
hello_multithreading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800708c  0800708c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800708c  0800708c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007094  08007094  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007098  08007098  00017098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800709c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a20  20000074  08007110  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a94  08007110  00021a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d905  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003877  00000000  00000000  0003d9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  00041220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  00042928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a8d  00000000  00000000  00043ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c1f  00000000  00000000  00048975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffa40  00000000  00000000  00060594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ffd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000675c  00000000  00000000  00160028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f08 	.word	0x08006f08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006f08 	.word	0x08006f08

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb7e 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f826 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8ca 	bl	800066c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f898 	bl	800060c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f003 f99c 	bl	8003818 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink0Task */
  blink0TaskHandle = osThreadNew(StartBlink0Task, NULL, &blink0Task_attributes);
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <main+0x40>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <main+0x44>)
 80004e6:	f003 f9e1 	bl	80038ac <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a08      	ldr	r2, [pc, #32]	; (8000510 <main+0x48>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of blink1Task */
  blink1TaskHandle = osThreadNew(StartBlink1Task, NULL, &blink1Task_attributes);
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <main+0x4c>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4808      	ldr	r0, [pc, #32]	; (8000518 <main+0x50>)
 80004f6:	f003 f9d9 	bl	80038ac <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <main+0x54>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000500:	f003 f9ae 	bl	8003860 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  for (;;)
 8000504:	e7fe      	b.n	8000504 <main+0x3c>
 8000506:	bf00      	nop
 8000508:	08006f74 	.word	0x08006f74
 800050c:	08000771 	.word	0x08000771
 8000510:	200019ec 	.word	0x200019ec
 8000514:	08006f98 	.word	0x08006f98
 8000518:	080007b5 	.word	0x080007b5
 800051c:	20001964 	.word	0x20001964

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b0b8      	sub	sp, #224	; 0xe0
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800052a:	2244      	movs	r2, #68	; 0x44
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f006 f81c 	bl	800656c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2288      	movs	r2, #136	; 0x88
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f006 f80e 	bl	800656c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2310      	movs	r3, #16
 8000560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056a:	2302      	movs	r3, #2
 800056c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000570:	2301      	movs	r3, #1
 8000572:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000576:	230a      	movs	r3, #10
 8000578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057c:	2307      	movs	r3, #7
 800057e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fe7c 	bl	8001290 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059e:	f000 f92f 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2303      	movs	r3, #3
 80005aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fa48 	bl	8001a5c <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005d2:	f000 f915 	bl	8000800 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005da:	2300      	movs	r3, #0
 80005dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fc73 	bl	8001ecc <HAL_RCCEx_PeriphCLKConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005ec:	f000 f908 	bl	8000800 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f4:	f000 fdf6 	bl	80011e4 <HAL_PWREx_ControlVoltageScaling>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005fe:	f000 f8ff 	bl	8000800 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	37e0      	adds	r7, #224	; 0xe0
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000612:	4a15      	ldr	r2, [pc, #84]	; (8000668 <MX_USART2_UART_Init+0x5c>)
 8000614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800061c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000632:	220c      	movs	r2, #12
 8000634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART2_UART_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART2_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART2_UART_Init+0x58>)
 8000650:	f002 fbca 	bl	8002de8 <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800065a:	f000 f8d1 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20001968 	.word	0x20001968
 8000668:	40004400 	.word	0x40004400

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_GPIO_Init+0xa8>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a23      	ldr	r2, [pc, #140]	; (8000714 <MX_GPIO_Init+0xa8>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_GPIO_Init+0xa8>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_GPIO_Init+0xa8>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a1d      	ldr	r2, [pc, #116]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a17      	ldr	r2, [pc, #92]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a11      	ldr	r2, [pc, #68]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_GPIO_Init+0xa8>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f242 010c 	movw	r1, #8204	; 0x200c
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <MX_GPIO_Init+0xac>)
 80006ea:	f000 fd3b 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80006ee:	f242 030c 	movw	r3, #8204	; 0x200c
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0xac>)
 8000708:	f000 fb82 	bl	8000e10 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	48000800 	.word	0x48000800

0800071c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	// override putchar
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000724:	1d39      	adds	r1, r7, #4
 8000726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072a:	2201      	movs	r2, #1
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <__io_putchar+0x20>)
 800072e:	f002 fba9 	bl	8002e84 <HAL_UART_Transmit>
  return ch;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20001968 	.word	0x20001968

08000740 <StartBlink2Task>:


void StartBlink2Task(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074c:	4806      	ldr	r0, [pc, #24]	; (8000768 <StartBlink2Task+0x28>)
 800074e:	f000 fd21 	bl	8001194 <HAL_GPIO_TogglePin>
    printf("Blink2\r\n");
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <StartBlink2Task+0x2c>)
 8000754:	f005 ff80 	bl	8006658 <puts>
    //osThreadTerminate(blink2TaskHandle); // Fails because blink2TaskHandle was not properly re-defined as Blink0Task was pre-empted
    osThreadTerminate(osThreadGetId()); // osThreadGetId() gets the actual id
 8000758:	f003 f93a 	bl	80039d0 <osThreadGetId>
 800075c:	4603      	mov	r3, r0
 800075e:	4618      	mov	r0, r3
 8000760:	f003 f941 	bl	80039e6 <osThreadTerminate>
	{
 8000764:	e7f0      	b.n	8000748 <StartBlink2Task+0x8>
 8000766:	bf00      	nop
 8000768:	48000800 	.word	0x48000800
 800076c:	08006f44 	.word	0x08006f44

08000770 <StartBlink0Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink0Task */
void StartBlink0Task(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	blink2TaskHandle = osThreadNew(StartBlink2Task, NULL, &blink2Task_attributes); // pre-empted before blink2TaskHandle is re-defined!
 8000778:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <StartBlink0Task+0x30>)
 800077a:	2100      	movs	r1, #0
 800077c:	4809      	ldr	r0, [pc, #36]	; (80007a4 <StartBlink0Task+0x34>)
 800077e:	f003 f895 	bl	80038ac <osThreadNew>
 8000782:	4603      	mov	r3, r0
 8000784:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <StartBlink0Task+0x38>)
 8000786:	6013      	str	r3, [r2, #0]
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8000788:	2104      	movs	r1, #4
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <StartBlink0Task+0x3c>)
 800078c:	f000 fd02 	bl	8001194 <HAL_GPIO_TogglePin>
    printf("Blink0\r\n");
 8000790:	4807      	ldr	r0, [pc, #28]	; (80007b0 <StartBlink0Task+0x40>)
 8000792:	f005 ff61 	bl	8006658 <puts>
    osDelay(1000);
 8000796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079a:	f003 f951 	bl	8003a40 <osDelay>
  {
 800079e:	e7eb      	b.n	8000778 <StartBlink0Task+0x8>
 80007a0:	08006fbc 	.word	0x08006fbc
 80007a4:	08000741 	.word	0x08000741
 80007a8:	200019f0 	.word	0x200019f0
 80007ac:	48000800 	.word	0x48000800
 80007b0:	08006f4c 	.word	0x08006f4c

080007b4 <StartBlink1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink1Task */
void StartBlink1Task(void *argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink1Task */
  /* Infinite loop */
  for(;;)
  {
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80007bc:	2108      	movs	r1, #8
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <StartBlink1Task+0x20>)
 80007c0:	f000 fce8 	bl	8001194 <HAL_GPIO_TogglePin>
    printf("Blink1\r\n");
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <StartBlink1Task+0x24>)
 80007c6:	f005 ff47 	bl	8006658 <puts>
    osDelay(500);
 80007ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ce:	f003 f937 	bl	8003a40 <osDelay>
  {
 80007d2:	e7f3      	b.n	80007bc <StartBlink1Task+0x8>
 80007d4:	48000800 	.word	0x48000800
 80007d8:	08006f54 	.word	0x08006f54

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 fa0d 	bl	8000c0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40001000 	.word	0x40001000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_MspInit+0x4c>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <HAL_MspInit+0x4c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6613      	str	r3, [r2, #96]	; 0x60
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_MspInit+0x4c>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <HAL_MspInit+0x4c>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <HAL_MspInit+0x4c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6593      	str	r3, [r2, #88]	; 0x58
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_MspInit+0x4c>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	210f      	movs	r1, #15
 8000846:	f06f 0001 	mvn.w	r0, #1
 800084a:	f000 fab7 	bl	8000dbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_UART_MspInit+0x7c>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d128      	bne.n	80008d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6593      	str	r3, [r2, #88]	; 0x58
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <HAL_UART_MspInit+0x80>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <HAL_UART_MspInit+0x80>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_UART_MspInit+0x80>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ae:	230c      	movs	r3, #12
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008be:	2307      	movs	r3, #7
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f000 faa0 	bl	8000e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	2036      	movs	r0, #54	; 0x36
 80008f6:	f000 fa61 	bl	8000dbc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008fa:	2036      	movs	r0, #54	; 0x36
 80008fc:	f000 fa7a 	bl	8000df4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <HAL_InitTick+0x9c>)
 8000902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000904:	4a1d      	ldr	r2, [pc, #116]	; (800097c <HAL_InitTick+0x9c>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6593      	str	r3, [r2, #88]	; 0x58
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <HAL_InitTick+0x9c>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000910:	f003 0310 	and.w	r3, r3, #16
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000918:	f107 0210 	add.w	r2, r7, #16
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fa40 	bl	8001da8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000928:	f001 fa12 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 800092c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <HAL_InitTick+0xa0>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	0c9b      	lsrs	r3, r3, #18
 8000938:	3b01      	subs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_InitTick+0xa4>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <HAL_InitTick+0xa8>)
 8000940:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_InitTick+0xa4>)
 8000944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000948:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_InitTick+0xa4>)
 800094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_InitTick+0xa4>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_InitTick+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <HAL_InitTick+0xa4>)
 800095e:	f001 ff71 	bl	8002844 <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d104      	bne.n	8000972 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <HAL_InitTick+0xa4>)
 800096a:	f001 ffcd 	bl	8002908 <HAL_TIM_Base_Start_IT>
 800096e:	4603      	mov	r3, r0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3730      	adds	r7, #48	; 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40021000 	.word	0x40021000
 8000980:	431bde83 	.word	0x431bde83
 8000984:	200019f4 	.word	0x200019f4
 8000988:	40001000 	.word	0x40001000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <TIM6_DAC_IRQHandler+0x10>)
 80009be:	f002 f813 	bl	80029e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200019f4 	.word	0x200019f4

080009cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
	}

return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e009      	b.n	8000a2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fe7b 	bl	800071c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf1      	blt.n	8000a18 <_write+0x12>
	}
	return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_close>:

int _close(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a66:	605a      	str	r2, [r3, #4]
	return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_isatty>:

int _isatty(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
	return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f005 fd10 	bl	80064fc <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20018000 	.word	0x20018000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	20000090 	.word	0x20000090
 8000b10:	20001a98 	.word	0x20001a98

08000b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <SystemInit+0x5c>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <SystemInit+0x5c>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <SystemInit+0x60>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <SystemInit+0x60>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <SystemInit+0x60>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <SystemInit+0x60>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <SystemInit+0x60>)
 8000b40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <SystemInit+0x60>)
 8000b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <SystemInit+0x60>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <SystemInit+0x60>)
 8000b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SystemInit+0x60>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	40021000 	.word	0x40021000

08000b78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b7c:	f7ff ffca 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b82:	e003      	b.n	8000b8c <LoopCopyDataInit>

08000b84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b8a:	3104      	adds	r1, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b8c:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b94:	d3f6      	bcc.n	8000b84 <CopyDataInit>
	ldr	r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b98:	e002      	b.n	8000ba0 <LoopFillZerobss>

08000b9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b9c:	f842 3b04 	str.w	r3, [r2], #4

08000ba0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <LoopForever+0x16>)
	cmp	r2, r3
 8000ba2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ba4:	d3f9      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f005 fcaf 	bl	8006508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000baa:	f7ff fc8d 	bl	80004c8 <main>

08000bae <LoopForever>:

LoopForever:
    b LoopForever
 8000bae:	e7fe      	b.n	8000bae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bb4:	0800709c 	.word	0x0800709c
	ldr	r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bbc:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000bc0:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000bc4:	20001a94 	.word	0x20001a94

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_Init+0x3c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <HAL_Init+0x3c>)
 8000bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be2:	2003      	movs	r0, #3
 8000be4:	f000 f8df 	bl	8000da6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff fe79 	bl	80008e0 <HAL_InitTick>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	e001      	b.n	8000bfe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfa:	f7ff fe07 	bl	800080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20001a40 	.word	0x20001a40

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20001a40 	.word	0x20001a40

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db0b      	blt.n	8000cda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 021f 	and.w	r2, r3, #31
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <__NVIC_EnableIRQ+0x38>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ff4c 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dce:	f7ff ff61 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000dd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	6978      	ldr	r0, [r7, #20]
 8000dda:	f7ff ffb1 	bl	8000d40 <NVIC_EncodePriority>
 8000dde:	4602      	mov	r2, r0
 8000de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff80 	bl	8000cec <__NVIC_SetPriority>
}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff54 	bl	8000cb0 <__NVIC_EnableIRQ>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1e:	e17f      	b.n	8001120 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	2101      	movs	r1, #1
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 8171 	beq.w	800111a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d00b      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d007      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4c:	2b11      	cmp	r3, #17
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b12      	cmp	r3, #18
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	f003 0201 	and.w	r2, r3, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d118      	bne.n	8000ef8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	f003 0201 	and.w	r2, r3, #1
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x128>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b12      	cmp	r3, #18
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	6939      	ldr	r1, [r7, #16]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80ac 	beq.w	800111a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <HAL_GPIO_Init+0x330>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc6:	4a5e      	ldr	r2, [pc, #376]	; (8001140 <HAL_GPIO_Init+0x330>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fce:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <HAL_GPIO_Init+0x330>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fda:	4a5a      	ldr	r2, [pc, #360]	; (8001144 <HAL_GPIO_Init+0x334>)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x242>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4f      	ldr	r2, [pc, #316]	; (8001148 <HAL_GPIO_Init+0x338>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x23e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4e      	ldr	r2, [pc, #312]	; (800114c <HAL_GPIO_Init+0x33c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x23a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4d      	ldr	r2, [pc, #308]	; (8001150 <HAL_GPIO_Init+0x340>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x236>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4c      	ldr	r2, [pc, #304]	; (8001154 <HAL_GPIO_Init+0x344>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x232>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4b      	ldr	r2, [pc, #300]	; (8001158 <HAL_GPIO_Init+0x348>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x22e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4a      	ldr	r2, [pc, #296]	; (800115c <HAL_GPIO_Init+0x34c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x22a>
 8001036:	2306      	movs	r3, #6
 8001038:	e00c      	b.n	8001054 <HAL_GPIO_Init+0x244>
 800103a:	2307      	movs	r3, #7
 800103c:	e00a      	b.n	8001054 <HAL_GPIO_Init+0x244>
 800103e:	2305      	movs	r3, #5
 8001040:	e008      	b.n	8001054 <HAL_GPIO_Init+0x244>
 8001042:	2304      	movs	r3, #4
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x244>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x244>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x244>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x244>
 8001052:	2300      	movs	r3, #0
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	f002 0203 	and.w	r2, r2, #3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001064:	4937      	ldr	r1, [pc, #220]	; (8001144 <HAL_GPIO_Init+0x334>)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <HAL_GPIO_Init+0x350>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001096:	4a32      	ldr	r2, [pc, #200]	; (8001160 <HAL_GPIO_Init+0x350>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_GPIO_Init+0x350>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010c0:	4a27      	ldr	r2, [pc, #156]	; (8001160 <HAL_GPIO_Init+0x350>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010c6:	4b26      	ldr	r3, [pc, #152]	; (8001160 <HAL_GPIO_Init+0x350>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ea:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <HAL_GPIO_Init+0x350>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_GPIO_Init+0x350>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <HAL_GPIO_Init+0x350>)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa22 f303 	lsr.w	r3, r2, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	f47f ae78 	bne.w	8000e20 <HAL_GPIO_Init+0x10>
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000
 8001148:	48000400 	.word	0x48000400
 800114c:	48000800 	.word	0x48000800
 8001150:	48000c00 	.word	0x48000c00
 8001154:	48001000 	.word	0x48001000
 8001158:	48001400 	.word	0x48001400
 800115c:	48001800 	.word	0x48001800
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001180:	e002      	b.n	8001188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4013      	ands	r3, r2
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43d9      	mvns	r1, r3
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	400b      	ands	r3, r1
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40007000 	.word	0x40007000

080011e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f2:	d130      	bne.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001200:	d038      	beq.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800120a:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001210:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2232      	movs	r2, #50	; 0x32
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800121e:	fba2 2303 	umull	r2, r3, r2, r3
 8001222:	0c9b      	lsrs	r3, r3, #18
 8001224:	3301      	adds	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001228:	e002      	b.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3b01      	subs	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123c:	d102      	bne.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x60>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f2      	bne.n	800122a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001250:	d110      	bne.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e00f      	b.n	8001276 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800125e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001262:	d007      	beq.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001272:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40007000 	.word	0x40007000
 8001288:	20000000 	.word	0x20000000
 800128c:	431bde83 	.word	0x431bde83

08001290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e3d4      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a2:	4ba1      	ldr	r3, [pc, #644]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ac:	4b9e      	ldr	r3, [pc, #632]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80e4 	beq.w	800148c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <HAL_RCC_OscConfig+0x4a>
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	f040 808b 	bne.w	80013e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	f040 8087 	bne.w	80013e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012da:	4b93      	ldr	r3, [pc, #588]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x62>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e3ac      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1a      	ldr	r2, [r3, #32]
 80012f6:	4b8c      	ldr	r3, [pc, #560]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d004      	beq.n	800130c <HAL_RCC_OscConfig+0x7c>
 8001302:	4b89      	ldr	r3, [pc, #548]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800130a:	e005      	b.n	8001318 <HAL_RCC_OscConfig+0x88>
 800130c:	4b86      	ldr	r3, [pc, #536]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 800130e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001318:	4293      	cmp	r3, r2
 800131a:	d223      	bcs.n	8001364 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fd73 	bl	8001e0c <RCC_SetFlashLatencyFromMSIRange>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e38d      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001330:	4b7d      	ldr	r3, [pc, #500]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a7c      	ldr	r2, [pc, #496]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b7a      	ldr	r3, [pc, #488]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4977      	ldr	r1, [pc, #476]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134e:	4b76      	ldr	r3, [pc, #472]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	4972      	ldr	r1, [pc, #456]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
 8001362:	e025      	b.n	80013b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001364:	4b70      	ldr	r3, [pc, #448]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a6f      	ldr	r2, [pc, #444]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b6d      	ldr	r3, [pc, #436]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	496a      	ldr	r1, [pc, #424]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001382:	4b69      	ldr	r3, [pc, #420]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	4965      	ldr	r1, [pc, #404]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d109      	bne.n	80013b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fd33 	bl	8001e0c <RCC_SetFlashLatencyFromMSIRange>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e34d      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013b0:	f000 fc36 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	495a      	ldr	r1, [pc, #360]	; (800152c <HAL_RCC_OscConfig+0x29c>)
 80013c2:	5ccb      	ldrb	r3, [r1, r3]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
 80013cc:	4a58      	ldr	r2, [pc, #352]	; (8001530 <HAL_RCC_OscConfig+0x2a0>)
 80013ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <HAL_RCC_OscConfig+0x2a4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fa83 	bl	80008e0 <HAL_InitTick>
 80013da:	4603      	mov	r3, r0
 80013dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d052      	beq.n	800148a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	e331      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d032      	beq.n	8001456 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013f0:	4b4d      	ldr	r3, [pc, #308]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a4c      	ldr	r2, [pc, #304]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc1a 	bl	8000c34 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001404:	f7ff fc16 	bl	8000c34 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e31a      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001416:	4b44      	ldr	r3, [pc, #272]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a40      	ldr	r2, [pc, #256]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	493b      	ldr	r1, [pc, #236]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001440:	4b39      	ldr	r3, [pc, #228]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	4936      	ldr	r1, [pc, #216]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
 8001454:	e01a      	b.n	800148c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001456:	4b34      	ldr	r3, [pc, #208]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a33      	ldr	r2, [pc, #204]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 800145c:	f023 0301 	bic.w	r3, r3, #1
 8001460:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001462:	f7ff fbe7 	bl	8000c34 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800146a:	f7ff fbe3 	bl	8000c34 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e2e7      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x1da>
 8001488:	e000      	b.n	800148c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800148a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d074      	beq.n	8001582 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2b08      	cmp	r3, #8
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x21a>
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b0c      	cmp	r3, #12
 80014a2:	d10e      	bne.n	80014c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d10b      	bne.n	80014c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d064      	beq.n	8001580 <HAL_RCC_OscConfig+0x2f0>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d160      	bne.n	8001580 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e2c4      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x24a>
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a15      	ldr	r2, [pc, #84]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80014d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	e01d      	b.n	8001516 <HAL_RCC_OscConfig+0x286>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e2:	d10c      	bne.n	80014fe <HAL_RCC_OscConfig+0x26e>
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80014ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0c      	ldr	r2, [pc, #48]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 80014f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e00b      	b.n	8001516 <HAL_RCC_OscConfig+0x286>
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a09      	ldr	r2, [pc, #36]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_RCC_OscConfig+0x298>)
 8001510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01c      	beq.n	8001558 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff fb89 	bl	8000c34 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001524:	e011      	b.n	800154a <HAL_RCC_OscConfig+0x2ba>
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	08006fe0 	.word	0x08006fe0
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fb7c 	bl	8000c34 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e280      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154a:	4baf      	ldr	r3, [pc, #700]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x2a8>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fb6c 	bl	8000c34 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fb68 	bl	8000c34 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e26c      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001572:	4ba5      	ldr	r3, [pc, #660]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x2d0>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d060      	beq.n	8001650 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x310>
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d119      	bne.n	80015ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d116      	bne.n	80015ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a0:	4b99      	ldr	r3, [pc, #612]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_OscConfig+0x328>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e249      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b93      	ldr	r3, [pc, #588]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	4990      	ldr	r1, [pc, #576]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015cc:	e040      	b.n	8001650 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d023      	beq.n	800161e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d6:	4b8c      	ldr	r3, [pc, #560]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a8b      	ldr	r2, [pc, #556]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb27 	bl	8000c34 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff fb23 	bl	8000c34 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e227      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015fc:	4b82      	ldr	r3, [pc, #520]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001608:	4b7f      	ldr	r3, [pc, #508]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	061b      	lsls	r3, r3, #24
 8001616:	497c      	ldr	r1, [pc, #496]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
 800161c:	e018      	b.n	8001650 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161e:	4b7a      	ldr	r3, [pc, #488]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a79      	ldr	r2, [pc, #484]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fb03 	bl	8000c34 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff faff 	bl	8000c34 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e203      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001644:	4b70      	ldr	r3, [pc, #448]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d03c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01c      	beq.n	800169e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001664:	4b68      	ldr	r3, [pc, #416]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166a:	4a67      	ldr	r2, [pc, #412]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff fade 	bl	8000c34 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fada 	bl	8000c34 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1de      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168e:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ef      	beq.n	800167c <HAL_RCC_OscConfig+0x3ec>
 800169c:	e01b      	b.n	80016d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169e:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80016a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a4:	4a58      	ldr	r2, [pc, #352]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff fac1 	bl	8000c34 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff fabd 	bl	8000c34 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1c1      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c8:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80016ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ef      	bne.n	80016b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80a6 	beq.w	8001830 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016e8:	4b47      	ldr	r3, [pc, #284]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10d      	bne.n	8001710 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	4b44      	ldr	r3, [pc, #272]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	4a43      	ldr	r2, [pc, #268]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80016fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170c:	2301      	movs	r3, #1
 800170e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001710:	4b3e      	ldr	r3, [pc, #248]	; (800180c <HAL_RCC_OscConfig+0x57c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d118      	bne.n	800174e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800171c:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_RCC_OscConfig+0x57c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a3a      	ldr	r2, [pc, #232]	; (800180c <HAL_RCC_OscConfig+0x57c>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001726:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001728:	f7ff fa84 	bl	8000c34 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001730:	f7ff fa80 	bl	8000c34 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e184      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_RCC_OscConfig+0x57c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <HAL_RCC_OscConfig+0x4d8>
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175c:	4a2a      	ldr	r2, [pc, #168]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001766:	e024      	b.n	80017b2 <HAL_RCC_OscConfig+0x522>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d110      	bne.n	8001792 <HAL_RCC_OscConfig+0x502>
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001776:	4a24      	ldr	r2, [pc, #144]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001786:	4a20      	ldr	r2, [pc, #128]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001790:	e00f      	b.n	80017b2 <HAL_RCC_OscConfig+0x522>
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 8001794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80017a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a8:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80017aa:	f023 0304 	bic.w	r3, r3, #4
 80017ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d016      	beq.n	80017e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff fa3b 	bl	8000c34 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff fa37 	bl	8000c34 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e139      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_RCC_OscConfig+0x578>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0ed      	beq.n	80017c2 <HAL_RCC_OscConfig+0x532>
 80017e6:	e01a      	b.n	800181e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fa24 	bl	8000c34 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ee:	e00f      	b.n	8001810 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff fa20 	bl	8000c34 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d906      	bls.n	8001810 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e122      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001810:	4b90      	ldr	r3, [pc, #576]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1e8      	bne.n	80017f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001824:	4b8b      	ldr	r3, [pc, #556]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	4a8a      	ldr	r2, [pc, #552]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 800182a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8108 	beq.w	8001a4a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	2b02      	cmp	r3, #2
 8001840:	f040 80d0 	bne.w	80019e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001844:	4b83      	ldr	r3, [pc, #524]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0203 	and.w	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	429a      	cmp	r2, r3
 8001856:	d130      	bne.n	80018ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	3b01      	subs	r3, #1
 8001864:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d127      	bne.n	80018ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001874:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d11f      	bne.n	80018ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001884:	2a07      	cmp	r2, #7
 8001886:	bf14      	ite	ne
 8001888:	2201      	movne	r2, #1
 800188a:	2200      	moveq	r2, #0
 800188c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188e:	4293      	cmp	r3, r2
 8001890:	d113      	bne.n	80018ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	3b01      	subs	r3, #1
 80018a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	3b01      	subs	r3, #1
 80018b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d06e      	beq.n	8001998 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b0c      	cmp	r3, #12
 80018be:	d069      	beq.n	8001994 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018c0:	4b64      	ldr	r3, [pc, #400]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018cc:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0b7      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018dc:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a5c      	ldr	r2, [pc, #368]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80018e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e8:	f7ff f9a4 	bl	8000c34 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff f9a0 	bl	8000c34 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0a4      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001902:	4b54      	ldr	r3, [pc, #336]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190e:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	4b51      	ldr	r3, [pc, #324]	; (8001a58 <HAL_RCC_OscConfig+0x7c8>)
 8001914:	4013      	ands	r3, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800191e:	3a01      	subs	r2, #1
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	4311      	orrs	r1, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001928:	0212      	lsls	r2, r2, #8
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001930:	0852      	lsrs	r2, r2, #1
 8001932:	3a01      	subs	r2, #1
 8001934:	0552      	lsls	r2, r2, #21
 8001936:	4311      	orrs	r1, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800193c:	0852      	lsrs	r2, r2, #1
 800193e:	3a01      	subs	r2, #1
 8001940:	0652      	lsls	r2, r2, #25
 8001942:	4311      	orrs	r1, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001948:	0912      	lsrs	r2, r2, #4
 800194a:	0452      	lsls	r2, r2, #17
 800194c:	430a      	orrs	r2, r1
 800194e:	4941      	ldr	r1, [pc, #260]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001950:	4313      	orrs	r3, r2
 8001952:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001954:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a3e      	ldr	r2, [pc, #248]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 800195a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001960:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a3b      	ldr	r2, [pc, #236]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800196c:	f7ff f962 	bl	8000c34 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f95e 	bl	8000c34 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e062      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001992:	e05a      	b.n	8001a4a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e059      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d152      	bne.n	8001a4a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a2a      	ldr	r2, [pc, #168]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80019aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019bc:	f7ff f93a 	bl	8000c34 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff f936 	bl	8000c34 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e03a      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x734>
 80019e2:	e032      	b.n	8001a4a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d02d      	beq.n	8001a46 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80019f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d105      	bne.n	8001a0e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001a08:	f023 0303 	bic.w	r3, r3, #3
 8001a0c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001a14:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f909 	bl	8000c34 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f905 	bl	8000c34 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e009      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_RCC_OscConfig+0x7c4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x796>
 8001a44:	e001      	b.n	8001a4a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	f99d808c 	.word	0xf99d808c

08001a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0c8      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b66      	ldr	r3, [pc, #408]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d910      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 0207 	bic.w	r2, r3, #7
 8001a86:	4961      	ldr	r1, [pc, #388]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b5f      	ldr	r3, [pc, #380]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0b0      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d04c      	beq.n	8001b46 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab4:	4b56      	ldr	r3, [pc, #344]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d121      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e09e      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d115      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e092      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e086      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af4:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e07e      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b04:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 0203 	bic.w	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	493f      	ldr	r1, [pc, #252]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b16:	f7ff f88d 	bl	8000c34 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1e:	f7ff f889 	bl	8000c34 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e066      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 020c 	and.w	r2, r3, #12
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d1eb      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	492c      	ldr	r1, [pc, #176]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d210      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	4924      	ldr	r1, [pc, #144]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e036      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4918      	ldr	r1, [pc, #96]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4910      	ldr	r1, [pc, #64]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd2:	f000 f825 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	490c      	ldr	r1, [pc, #48]	; (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	5ccb      	ldrb	r3, [r1, r3]
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	fa22 f303 	lsr.w	r3, r2, r3
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fe72 	bl	80008e0 <HAL_InitTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c00:	7afb      	ldrb	r3, [r7, #11]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	08006fe0 	.word	0x08006fe0
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c38:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x34>
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d121      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d11e      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c54:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c60:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e005      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c70:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d102      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e004      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d134      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d003      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0xac>
 8001cc4:	e005      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc8:	617b      	str	r3, [r7, #20]
      break;
 8001cca:	e005      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cce:	617b      	str	r3, [r7, #20]
      break;
 8001cd0:	e002      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	617b      	str	r3, [r7, #20]
      break;
 8001cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	fb02 f203 	mul.w	r2, r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	0e5b      	lsrs	r3, r3, #25
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d18:	69bb      	ldr	r3, [r7, #24]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08006ff8 	.word	0x08006ff8
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	007a1200 	.word	0x007a1200

08001d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4904      	ldr	r1, [pc, #16]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08006ff0 	.word	0x08006ff0

08001d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d80:	f7ff ffda 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0adb      	lsrs	r3, r3, #11
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4904      	ldr	r1, [pc, #16]	; (8001da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08006ff0 	.word	0x08006ff0

08001da8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	220f      	movs	r2, #15
 8001db6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_RCC_GetClockConfig+0x60>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0207 	and.w	r2, r3, #7
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	601a      	str	r2, [r3, #0]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40022000 	.word	0x40022000

08001e0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e24:	f7ff f9d0 	bl	80011c8 <HAL_PWREx_GetVoltageRange>
 8001e28:	6178      	str	r0, [r7, #20]
 8001e2a:	e014      	b.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e36:	6593      	str	r3, [r2, #88]	; 0x58
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e44:	f7ff f9c0 	bl	80011c8 <HAL_PWREx_GetVoltageRange>
 8001e48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e5c:	d10b      	bne.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d919      	bls.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2ba0      	cmp	r3, #160	; 0xa0
 8001e68:	d902      	bls.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	e013      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	e010      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b80      	cmp	r3, #128	; 0x80
 8001e7a:	d902      	bls.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e00a      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	d102      	bne.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e88:	2302      	movs	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e004      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b70      	cmp	r3, #112	; 0x70
 8001e92:	d101      	bne.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0207 	bic.w	r2, r3, #7
 8001ea0:	4909      	ldr	r1, [pc, #36]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40022000 	.word	0x40022000

08001ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ed8:	2300      	movs	r3, #0
 8001eda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d041      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef0:	d02a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ef2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef6:	d824      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001efc:	d008      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001efe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f02:	d81e      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f0c:	d010      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f0e:	e018      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f10:	4b86      	ldr	r3, [pc, #536]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a85      	ldr	r2, [pc, #532]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1c:	e015      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fabb 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f2e:	e00c      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3320      	adds	r3, #32
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fba6 	bl	8002688 <RCCEx_PLLSAI2_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f40:	e003      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	74fb      	strb	r3, [r7, #19]
      break;
 8001f46:	e000      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f4a:	7cfb      	ldrb	r3, [r7, #19]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f50:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f5e:	4973      	ldr	r1, [pc, #460]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f66:	e001      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d041      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f80:	d02a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f86:	d824      	bhi.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f8c:	d008      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f92:	d81e      	bhi.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f9e:	e018      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa0:	4b62      	ldr	r3, [pc, #392]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a61      	ldr	r2, [pc, #388]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fac:	e015      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fa73 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fbe:	e00c      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3320      	adds	r3, #32
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fb5e 	bl	8002688 <RCCEx_PLLSAI2_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fd0:	e003      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fd6:	e000      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fda:	7cfb      	ldrb	r3, [r7, #19]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10b      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fe0:	4b52      	ldr	r3, [pc, #328]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fee:	494f      	ldr	r1, [pc, #316]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ff6:	e001      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a0 	beq.w	800214a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	4a40      	ldr	r2, [pc, #256]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	; 0x58
 8002030:	4b3e      	ldr	r3, [pc, #248]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203c:	2301      	movs	r3, #1
 800203e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002040:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800204c:	f7fe fdf2 	bl	8000c34 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002052:	e009      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002054:	f7fe fdee 	bl	8000c34 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d902      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	74fb      	strb	r3, [r7, #19]
        break;
 8002066:	e005      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ef      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d15c      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800207a:	4b2c      	ldr	r3, [pc, #176]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002084:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01f      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	d019      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a1c      	ldr	r2, [pc, #112]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7fe fdad 	bl	8000c34 <HAL_GetTick>
 80020da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020dc:	e00b      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7fe fda9 	bl	8000c34 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d902      	bls.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	74fb      	strb	r3, [r7, #19]
            break;
 80020f4:	e006      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ec      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211a:	4904      	ldr	r1, [pc, #16]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002122:	e009      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	74bb      	strb	r3, [r7, #18]
 8002128:	e006      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002138:	7c7b      	ldrb	r3, [r7, #17]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213e:	4b9e      	ldr	r3, [pc, #632]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	4a9d      	ldr	r2, [pc, #628]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002156:	4b98      	ldr	r3, [pc, #608]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215c:	f023 0203 	bic.w	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	4994      	ldr	r1, [pc, #592]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002178:	4b8f      	ldr	r3, [pc, #572]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	f023 020c 	bic.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	498c      	ldr	r1, [pc, #560]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800219a:	4b87      	ldr	r3, [pc, #540]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	4983      	ldr	r1, [pc, #524]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021bc:	4b7e      	ldr	r3, [pc, #504]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	497b      	ldr	r1, [pc, #492]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ec:	4972      	ldr	r1, [pc, #456]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002200:	4b6d      	ldr	r3, [pc, #436]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	496a      	ldr	r1, [pc, #424]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002222:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	4961      	ldr	r1, [pc, #388]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002244:	4b5c      	ldr	r3, [pc, #368]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002252:	4959      	ldr	r1, [pc, #356]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002266:	4b54      	ldr	r3, [pc, #336]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002274:	4950      	ldr	r1, [pc, #320]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002288:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	4948      	ldr	r1, [pc, #288]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022aa:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	493f      	ldr	r1, [pc, #252]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d028      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022cc:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022da:	4937      	ldr	r1, [pc, #220]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ea:	d106      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a31      	ldr	r2, [pc, #196]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f6:	60d3      	str	r3, [r2, #12]
 80022f8:	e011      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002302:	d10c      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3304      	adds	r3, #4
 8002308:	2101      	movs	r1, #1
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f8c8 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d028      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002330:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	491f      	ldr	r1, [pc, #124]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002348:	d106      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002354:	60d3      	str	r3, [r2, #12]
 8002356:	e011      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002360:	d10c      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	2101      	movs	r1, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f899 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02b      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a6:	d109      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a02      	ldr	r2, [pc, #8]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b2:	60d3      	str	r3, [r2, #12]
 80023b4:	e014      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f867 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02f      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023fa:	4928      	ldr	r1, [pc, #160]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800240a:	d10d      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	2102      	movs	r1, #2
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f844 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d014      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	74bb      	strb	r3, [r7, #18]
 8002426:	e011      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800242c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002430:	d10c      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3320      	adds	r3, #32
 8002436:	2102      	movs	r1, #2
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f925 	bl	8002688 <RCCEx_PLLSAI2_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002466:	490d      	ldr	r1, [pc, #52]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800248a:	4904      	ldr	r1, [pc, #16]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002492:	7cbb      	ldrb	r3, [r7, #18]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000

080024a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ae:	4b75      	ldr	r3, [pc, #468]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d018      	beq.n	80024ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ba:	4b72      	ldr	r3, [pc, #456]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0203 	and.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d10d      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
       ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024d2:	4b6c      	ldr	r3, [pc, #432]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
       ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d047      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e044      	b.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d018      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0x86>
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d825      	bhi.n	8002544 <RCCEx_PLLSAI1_Config+0xa4>
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d002      	beq.n	8002502 <RCCEx_PLLSAI1_Config+0x62>
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d009      	beq.n	8002514 <RCCEx_PLLSAI1_Config+0x74>
 8002500:	e020      	b.n	8002544 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002502:	4b60      	ldr	r3, [pc, #384]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11d      	bne.n	800254a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002512:	e01a      	b.n	800254a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002524:	e013      	b.n	800254e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002526:	4b57      	ldr	r3, [pc, #348]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002532:	4b54      	ldr	r3, [pc, #336]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002542:	e006      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e004      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254a:	bf00      	nop
 800254c:	e002      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002552:	bf00      	nop
    }

    if(status == HAL_OK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800255a:	4b4a      	ldr	r3, [pc, #296]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	430b      	orrs	r3, r1
 8002570:	4944      	ldr	r1, [pc, #272]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d17d      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800257c:	4b41      	ldr	r3, [pc, #260]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a40      	ldr	r2, [pc, #256]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7fe fb54 	bl	8000c34 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800258e:	e009      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002590:	f7fe fb50 	bl	8000c34 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	73fb      	strb	r3, [r7, #15]
        break;
 80025a2:	e005      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025a4:	4b37      	ldr	r3, [pc, #220]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ef      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d160      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d111      	bne.n	80025e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025bc:	4b31      	ldr	r3, [pc, #196]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	0211      	lsls	r1, r2, #8
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68d2      	ldr	r2, [r2, #12]
 80025d2:	0912      	lsrs	r2, r2, #4
 80025d4:	0452      	lsls	r2, r2, #17
 80025d6:	430a      	orrs	r2, r1
 80025d8:	492a      	ldr	r1, [pc, #168]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	610b      	str	r3, [r1, #16]
 80025de:	e027      	b.n	8002630 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d112      	bne.n	800260c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e6:	4b27      	ldr	r3, [pc, #156]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6892      	ldr	r2, [r2, #8]
 80025f6:	0211      	lsls	r1, r2, #8
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6912      	ldr	r2, [r2, #16]
 80025fc:	0852      	lsrs	r2, r2, #1
 80025fe:	3a01      	subs	r2, #1
 8002600:	0552      	lsls	r2, r2, #21
 8002602:	430a      	orrs	r2, r1
 8002604:	491f      	ldr	r1, [pc, #124]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	610b      	str	r3, [r1, #16]
 800260a:	e011      	b.n	8002630 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	0211      	lsls	r1, r2, #8
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6952      	ldr	r2, [r2, #20]
 8002622:	0852      	lsrs	r2, r2, #1
 8002624:	3a01      	subs	r2, #1
 8002626:	0652      	lsls	r2, r2, #25
 8002628:	430a      	orrs	r2, r1
 800262a:	4916      	ldr	r1, [pc, #88]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800263a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fafa 	bl	8000c34 <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002642:	e009      	b.n	8002658 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002644:	f7fe faf6 	bl	8000c34 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d902      	bls.n	8002658 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	73fb      	strb	r3, [r7, #15]
          break;
 8002656:	e005      	b.n	8002664 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ef      	beq.n	8002644 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4904      	ldr	r1, [pc, #16]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000

08002688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002696:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d018      	beq.n	80026d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026a2:	4b67      	ldr	r3, [pc, #412]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0203 	and.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d10d      	bne.n	80026ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
       ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026ba:	4b61      	ldr	r3, [pc, #388]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
       ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d047      	beq.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e044      	b.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d018      	beq.n	800270e <RCCEx_PLLSAI2_Config+0x86>
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d825      	bhi.n	800272c <RCCEx_PLLSAI2_Config+0xa4>
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d002      	beq.n	80026ea <RCCEx_PLLSAI2_Config+0x62>
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d009      	beq.n	80026fc <RCCEx_PLLSAI2_Config+0x74>
 80026e8:	e020      	b.n	800272c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ea:	4b55      	ldr	r3, [pc, #340]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d11d      	bne.n	8002732 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fa:	e01a      	b.n	8002732 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d116      	bne.n	8002736 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270c:	e013      	b.n	8002736 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800270e:	4b4c      	ldr	r3, [pc, #304]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800271a:	4b49      	ldr	r3, [pc, #292]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800272a:	e006      	b.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      break;
 8002730:	e004      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002732:	bf00      	nop
 8002734:	e002      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002736:	bf00      	nop
 8002738:	e000      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273a:	bf00      	nop
    }

    if(status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10d      	bne.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002742:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	430b      	orrs	r3, r1
 8002758:	4939      	ldr	r1, [pc, #228]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d167      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a35      	ldr	r2, [pc, #212]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002770:	f7fe fa60 	bl	8000c34 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002776:	e009      	b.n	800278c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002778:	f7fe fa5c 	bl	8000c34 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	73fb      	strb	r3, [r7, #15]
        break;
 800278a:	e005      	b.n	8002798 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ef      	bne.n	8002778 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d14a      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6892      	ldr	r2, [r2, #8]
 80027b4:	0211      	lsls	r1, r2, #8
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68d2      	ldr	r2, [r2, #12]
 80027ba:	0912      	lsrs	r2, r2, #4
 80027bc:	0452      	lsls	r2, r2, #17
 80027be:	430a      	orrs	r2, r1
 80027c0:	491f      	ldr	r1, [pc, #124]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	614b      	str	r3, [r1, #20]
 80027c6:	e011      	b.n	80027ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6892      	ldr	r2, [r2, #8]
 80027d8:	0211      	lsls	r1, r2, #8
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6912      	ldr	r2, [r2, #16]
 80027de:	0852      	lsrs	r2, r2, #1
 80027e0:	3a01      	subs	r2, #1
 80027e2:	0652      	lsls	r2, r2, #25
 80027e4:	430a      	orrs	r2, r1
 80027e6:	4916      	ldr	r1, [pc, #88]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a13      	ldr	r2, [pc, #76]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe fa1c 	bl	8000c34 <HAL_GetTick>
 80027fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027fe:	e009      	b.n	8002814 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002800:	f7fe fa18 	bl	8000c34 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d902      	bls.n	8002814 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	73fb      	strb	r3, [r7, #15]
          break;
 8002812:	e005      	b.n	8002820 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4904      	ldr	r1, [pc, #16]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002830:	4313      	orrs	r3, r2
 8002832:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e049      	b.n	80028ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f841 	bl	80028f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f000 f9f8 	bl	8002c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d001      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e04f      	b.n	80029c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a23      	ldr	r2, [pc, #140]	; (80029cc <HAL_TIM_Base_Start_IT+0xc4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01d      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d018      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1e      	ldr	r2, [pc, #120]	; (80029d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_TIM_Base_Start_IT+0xd4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_TIM_Base_Start_IT+0x76>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d115      	bne.n	80029aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b06      	cmp	r3, #6
 800298e:	d015      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0xb4>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002996:	d011      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a8:	e008      	b.n	80029bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e000      	b.n	80029be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40013400 	.word	0x40013400
 80029e0:	40014000 	.word	0x40014000
 80029e4:	00010007 	.word	0x00010007

080029e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0202 	mvn.w	r2, #2
 8002a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f905 	bl	8002c3a <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f8f7 	bl	8002c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f908 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0204 	mvn.w	r2, #4
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8db 	bl	8002c3a <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8cd 	bl	8002c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8de 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0208 	mvn.w	r2, #8
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8b1 	bl	8002c3a <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8a3 	bl	8002c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f8b4 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0210 	mvn.w	r2, #16
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2208      	movs	r2, #8
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f887 	bl	8002c3a <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f879 	bl	8002c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f88a 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10e      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d107      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0201 	mvn.w	r2, #1
 8002b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fd fe38 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d10e      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b80      	cmp	r3, #128	; 0x80
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f914 	bl	8002dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba6:	d10e      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b80      	cmp	r3, #128	; 0x80
 8002bb4:	d107      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f907 	bl	8002dd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	d107      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f838 	bl	8002c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d10e      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d107      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f06f 0220 	mvn.w	r2, #32
 8002c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f8c7 	bl	8002dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a40      	ldr	r2, [pc, #256]	; (8002d8c <TIM_Base_SetConfig+0x114>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d013      	beq.n	8002cb8 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c96:	d00f      	beq.n	8002cb8 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a3d      	ldr	r2, [pc, #244]	; (8002d90 <TIM_Base_SetConfig+0x118>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00b      	beq.n	8002cb8 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a3c      	ldr	r2, [pc, #240]	; (8002d94 <TIM_Base_SetConfig+0x11c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d007      	beq.n	8002cb8 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3b      	ldr	r2, [pc, #236]	; (8002d98 <TIM_Base_SetConfig+0x120>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3a      	ldr	r2, [pc, #232]	; (8002d9c <TIM_Base_SetConfig+0x124>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d108      	bne.n	8002cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a2f      	ldr	r2, [pc, #188]	; (8002d8c <TIM_Base_SetConfig+0x114>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01f      	beq.n	8002d12 <TIM_Base_SetConfig+0x9a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d01b      	beq.n	8002d12 <TIM_Base_SetConfig+0x9a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2c      	ldr	r2, [pc, #176]	; (8002d90 <TIM_Base_SetConfig+0x118>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d017      	beq.n	8002d12 <TIM_Base_SetConfig+0x9a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	; (8002d94 <TIM_Base_SetConfig+0x11c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <TIM_Base_SetConfig+0x9a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <TIM_Base_SetConfig+0x120>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00f      	beq.n	8002d12 <TIM_Base_SetConfig+0x9a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a29      	ldr	r2, [pc, #164]	; (8002d9c <TIM_Base_SetConfig+0x124>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00b      	beq.n	8002d12 <TIM_Base_SetConfig+0x9a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a28      	ldr	r2, [pc, #160]	; (8002da0 <TIM_Base_SetConfig+0x128>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d007      	beq.n	8002d12 <TIM_Base_SetConfig+0x9a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <TIM_Base_SetConfig+0x12c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d003      	beq.n	8002d12 <TIM_Base_SetConfig+0x9a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <TIM_Base_SetConfig+0x130>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d108      	bne.n	8002d24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <TIM_Base_SetConfig+0x114>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00f      	beq.n	8002d70 <TIM_Base_SetConfig+0xf8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <TIM_Base_SetConfig+0x124>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00b      	beq.n	8002d70 <TIM_Base_SetConfig+0xf8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a11      	ldr	r2, [pc, #68]	; (8002da0 <TIM_Base_SetConfig+0x128>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <TIM_Base_SetConfig+0xf8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <TIM_Base_SetConfig+0x12c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_Base_SetConfig+0xf8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a0f      	ldr	r2, [pc, #60]	; (8002da8 <TIM_Base_SetConfig+0x130>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d103      	bne.n	8002d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	615a      	str	r2, [r3, #20]
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40013400 	.word	0x40013400
 8002da0:	40014000 	.word	0x40014000
 8002da4:	40014400 	.word	0x40014400
 8002da8:	40014800 	.word	0x40014800

08002dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e040      	b.n	8002e7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fd fd26 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	; 0x24
 8002e14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8c0 	bl	8002fac <UART_SetConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e022      	b.n	8002e7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fb3e 	bl	80034c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fbc5 	bl	8003604 <UART_CheckIdleState>
 8002e7a:	4603      	mov	r3, r0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	f040 8082 	bne.w	8002fa2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_UART_Transmit+0x26>
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e07a      	b.n	8002fa4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit+0x38>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e073      	b.n	8002fa4 <HAL_UART_Transmit+0x120>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2221      	movs	r2, #33	; 0x21
 8002ed0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed2:	f7fd feaf 	bl	8000c34 <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef0:	d108      	bne.n	8002f04 <HAL_UART_Transmit+0x80>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	e003      	b.n	8002f0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f14:	e02d      	b.n	8002f72 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fbb8 	bl	8003696 <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e039      	b.n	8002fa4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	881a      	ldrh	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f42:	b292      	uxth	r2, r2
 8002f44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e008      	b.n	8002f60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b292      	uxth	r2, r2
 8002f58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1cb      	bne.n	8002f16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2200      	movs	r2, #0
 8002f86:	2140      	movs	r1, #64	; 0x40
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fb84 	bl	8003696 <UART_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e005      	b.n	8002fa4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e000      	b.n	8002fa4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
  }
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fac:	b5b0      	push	{r4, r5, r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4bad      	ldr	r3, [pc, #692]	; (800328c <UART_SetConfig+0x2e0>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	69f9      	ldr	r1, [r7, #28]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4aa2      	ldr	r2, [pc, #648]	; (8003290 <UART_SetConfig+0x2e4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d004      	beq.n	8003014 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	4313      	orrs	r3, r2
 8003012:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a99      	ldr	r2, [pc, #612]	; (8003294 <UART_SetConfig+0x2e8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d121      	bne.n	8003076 <UART_SetConfig+0xca>
 8003032:	4b99      	ldr	r3, [pc, #612]	; (8003298 <UART_SetConfig+0x2ec>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b03      	cmp	r3, #3
 800303e:	d817      	bhi.n	8003070 <UART_SetConfig+0xc4>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x9c>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	08003059 	.word	0x08003059
 800304c:	08003065 	.word	0x08003065
 8003050:	0800305f 	.word	0x0800305f
 8003054:	0800306b 	.word	0x0800306b
 8003058:	2301      	movs	r3, #1
 800305a:	76fb      	strb	r3, [r7, #27]
 800305c:	e0e7      	b.n	800322e <UART_SetConfig+0x282>
 800305e:	2302      	movs	r3, #2
 8003060:	76fb      	strb	r3, [r7, #27]
 8003062:	e0e4      	b.n	800322e <UART_SetConfig+0x282>
 8003064:	2304      	movs	r3, #4
 8003066:	76fb      	strb	r3, [r7, #27]
 8003068:	e0e1      	b.n	800322e <UART_SetConfig+0x282>
 800306a:	2308      	movs	r3, #8
 800306c:	76fb      	strb	r3, [r7, #27]
 800306e:	e0de      	b.n	800322e <UART_SetConfig+0x282>
 8003070:	2310      	movs	r3, #16
 8003072:	76fb      	strb	r3, [r7, #27]
 8003074:	e0db      	b.n	800322e <UART_SetConfig+0x282>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a88      	ldr	r2, [pc, #544]	; (800329c <UART_SetConfig+0x2f0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d132      	bne.n	80030e6 <UART_SetConfig+0x13a>
 8003080:	4b85      	ldr	r3, [pc, #532]	; (8003298 <UART_SetConfig+0x2ec>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d828      	bhi.n	80030e0 <UART_SetConfig+0x134>
 800308e:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <UART_SetConfig+0xe8>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030c9 	.word	0x080030c9
 8003098:	080030e1 	.word	0x080030e1
 800309c:	080030e1 	.word	0x080030e1
 80030a0:	080030e1 	.word	0x080030e1
 80030a4:	080030d5 	.word	0x080030d5
 80030a8:	080030e1 	.word	0x080030e1
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	080030e1 	.word	0x080030e1
 80030b4:	080030cf 	.word	0x080030cf
 80030b8:	080030e1 	.word	0x080030e1
 80030bc:	080030e1 	.word	0x080030e1
 80030c0:	080030e1 	.word	0x080030e1
 80030c4:	080030db 	.word	0x080030db
 80030c8:	2300      	movs	r3, #0
 80030ca:	76fb      	strb	r3, [r7, #27]
 80030cc:	e0af      	b.n	800322e <UART_SetConfig+0x282>
 80030ce:	2302      	movs	r3, #2
 80030d0:	76fb      	strb	r3, [r7, #27]
 80030d2:	e0ac      	b.n	800322e <UART_SetConfig+0x282>
 80030d4:	2304      	movs	r3, #4
 80030d6:	76fb      	strb	r3, [r7, #27]
 80030d8:	e0a9      	b.n	800322e <UART_SetConfig+0x282>
 80030da:	2308      	movs	r3, #8
 80030dc:	76fb      	strb	r3, [r7, #27]
 80030de:	e0a6      	b.n	800322e <UART_SetConfig+0x282>
 80030e0:	2310      	movs	r3, #16
 80030e2:	76fb      	strb	r3, [r7, #27]
 80030e4:	e0a3      	b.n	800322e <UART_SetConfig+0x282>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6d      	ldr	r2, [pc, #436]	; (80032a0 <UART_SetConfig+0x2f4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d120      	bne.n	8003132 <UART_SetConfig+0x186>
 80030f0:	4b69      	ldr	r3, [pc, #420]	; (8003298 <UART_SetConfig+0x2ec>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030fa:	2b30      	cmp	r3, #48	; 0x30
 80030fc:	d013      	beq.n	8003126 <UART_SetConfig+0x17a>
 80030fe:	2b30      	cmp	r3, #48	; 0x30
 8003100:	d814      	bhi.n	800312c <UART_SetConfig+0x180>
 8003102:	2b20      	cmp	r3, #32
 8003104:	d009      	beq.n	800311a <UART_SetConfig+0x16e>
 8003106:	2b20      	cmp	r3, #32
 8003108:	d810      	bhi.n	800312c <UART_SetConfig+0x180>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <UART_SetConfig+0x168>
 800310e:	2b10      	cmp	r3, #16
 8003110:	d006      	beq.n	8003120 <UART_SetConfig+0x174>
 8003112:	e00b      	b.n	800312c <UART_SetConfig+0x180>
 8003114:	2300      	movs	r3, #0
 8003116:	76fb      	strb	r3, [r7, #27]
 8003118:	e089      	b.n	800322e <UART_SetConfig+0x282>
 800311a:	2302      	movs	r3, #2
 800311c:	76fb      	strb	r3, [r7, #27]
 800311e:	e086      	b.n	800322e <UART_SetConfig+0x282>
 8003120:	2304      	movs	r3, #4
 8003122:	76fb      	strb	r3, [r7, #27]
 8003124:	e083      	b.n	800322e <UART_SetConfig+0x282>
 8003126:	2308      	movs	r3, #8
 8003128:	76fb      	strb	r3, [r7, #27]
 800312a:	e080      	b.n	800322e <UART_SetConfig+0x282>
 800312c:	2310      	movs	r3, #16
 800312e:	76fb      	strb	r3, [r7, #27]
 8003130:	e07d      	b.n	800322e <UART_SetConfig+0x282>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a5b      	ldr	r2, [pc, #364]	; (80032a4 <UART_SetConfig+0x2f8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d120      	bne.n	800317e <UART_SetConfig+0x1d2>
 800313c:	4b56      	ldr	r3, [pc, #344]	; (8003298 <UART_SetConfig+0x2ec>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003146:	2bc0      	cmp	r3, #192	; 0xc0
 8003148:	d013      	beq.n	8003172 <UART_SetConfig+0x1c6>
 800314a:	2bc0      	cmp	r3, #192	; 0xc0
 800314c:	d814      	bhi.n	8003178 <UART_SetConfig+0x1cc>
 800314e:	2b80      	cmp	r3, #128	; 0x80
 8003150:	d009      	beq.n	8003166 <UART_SetConfig+0x1ba>
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d810      	bhi.n	8003178 <UART_SetConfig+0x1cc>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <UART_SetConfig+0x1b4>
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d006      	beq.n	800316c <UART_SetConfig+0x1c0>
 800315e:	e00b      	b.n	8003178 <UART_SetConfig+0x1cc>
 8003160:	2300      	movs	r3, #0
 8003162:	76fb      	strb	r3, [r7, #27]
 8003164:	e063      	b.n	800322e <UART_SetConfig+0x282>
 8003166:	2302      	movs	r3, #2
 8003168:	76fb      	strb	r3, [r7, #27]
 800316a:	e060      	b.n	800322e <UART_SetConfig+0x282>
 800316c:	2304      	movs	r3, #4
 800316e:	76fb      	strb	r3, [r7, #27]
 8003170:	e05d      	b.n	800322e <UART_SetConfig+0x282>
 8003172:	2308      	movs	r3, #8
 8003174:	76fb      	strb	r3, [r7, #27]
 8003176:	e05a      	b.n	800322e <UART_SetConfig+0x282>
 8003178:	2310      	movs	r3, #16
 800317a:	76fb      	strb	r3, [r7, #27]
 800317c:	e057      	b.n	800322e <UART_SetConfig+0x282>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a49      	ldr	r2, [pc, #292]	; (80032a8 <UART_SetConfig+0x2fc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d125      	bne.n	80031d4 <UART_SetConfig+0x228>
 8003188:	4b43      	ldr	r3, [pc, #268]	; (8003298 <UART_SetConfig+0x2ec>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003196:	d017      	beq.n	80031c8 <UART_SetConfig+0x21c>
 8003198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800319c:	d817      	bhi.n	80031ce <UART_SetConfig+0x222>
 800319e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a2:	d00b      	beq.n	80031bc <UART_SetConfig+0x210>
 80031a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a8:	d811      	bhi.n	80031ce <UART_SetConfig+0x222>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <UART_SetConfig+0x20a>
 80031ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b2:	d006      	beq.n	80031c2 <UART_SetConfig+0x216>
 80031b4:	e00b      	b.n	80031ce <UART_SetConfig+0x222>
 80031b6:	2300      	movs	r3, #0
 80031b8:	76fb      	strb	r3, [r7, #27]
 80031ba:	e038      	b.n	800322e <UART_SetConfig+0x282>
 80031bc:	2302      	movs	r3, #2
 80031be:	76fb      	strb	r3, [r7, #27]
 80031c0:	e035      	b.n	800322e <UART_SetConfig+0x282>
 80031c2:	2304      	movs	r3, #4
 80031c4:	76fb      	strb	r3, [r7, #27]
 80031c6:	e032      	b.n	800322e <UART_SetConfig+0x282>
 80031c8:	2308      	movs	r3, #8
 80031ca:	76fb      	strb	r3, [r7, #27]
 80031cc:	e02f      	b.n	800322e <UART_SetConfig+0x282>
 80031ce:	2310      	movs	r3, #16
 80031d0:	76fb      	strb	r3, [r7, #27]
 80031d2:	e02c      	b.n	800322e <UART_SetConfig+0x282>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2d      	ldr	r2, [pc, #180]	; (8003290 <UART_SetConfig+0x2e4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d125      	bne.n	800322a <UART_SetConfig+0x27e>
 80031de:	4b2e      	ldr	r3, [pc, #184]	; (8003298 <UART_SetConfig+0x2ec>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031ec:	d017      	beq.n	800321e <UART_SetConfig+0x272>
 80031ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f2:	d817      	bhi.n	8003224 <UART_SetConfig+0x278>
 80031f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f8:	d00b      	beq.n	8003212 <UART_SetConfig+0x266>
 80031fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fe:	d811      	bhi.n	8003224 <UART_SetConfig+0x278>
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <UART_SetConfig+0x260>
 8003204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003208:	d006      	beq.n	8003218 <UART_SetConfig+0x26c>
 800320a:	e00b      	b.n	8003224 <UART_SetConfig+0x278>
 800320c:	2300      	movs	r3, #0
 800320e:	76fb      	strb	r3, [r7, #27]
 8003210:	e00d      	b.n	800322e <UART_SetConfig+0x282>
 8003212:	2302      	movs	r3, #2
 8003214:	76fb      	strb	r3, [r7, #27]
 8003216:	e00a      	b.n	800322e <UART_SetConfig+0x282>
 8003218:	2304      	movs	r3, #4
 800321a:	76fb      	strb	r3, [r7, #27]
 800321c:	e007      	b.n	800322e <UART_SetConfig+0x282>
 800321e:	2308      	movs	r3, #8
 8003220:	76fb      	strb	r3, [r7, #27]
 8003222:	e004      	b.n	800322e <UART_SetConfig+0x282>
 8003224:	2310      	movs	r3, #16
 8003226:	76fb      	strb	r3, [r7, #27]
 8003228:	e001      	b.n	800322e <UART_SetConfig+0x282>
 800322a:	2310      	movs	r3, #16
 800322c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a17      	ldr	r2, [pc, #92]	; (8003290 <UART_SetConfig+0x2e4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	f040 8087 	bne.w	8003348 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800323a:	7efb      	ldrb	r3, [r7, #27]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d837      	bhi.n	80032b0 <UART_SetConfig+0x304>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <UART_SetConfig+0x29c>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	0800326d 	.word	0x0800326d
 800324c:	080032b1 	.word	0x080032b1
 8003250:	08003275 	.word	0x08003275
 8003254:	080032b1 	.word	0x080032b1
 8003258:	0800327b 	.word	0x0800327b
 800325c:	080032b1 	.word	0x080032b1
 8003260:	080032b1 	.word	0x080032b1
 8003264:	080032b1 	.word	0x080032b1
 8003268:	08003283 	.word	0x08003283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800326c:	f7fe fd70 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003270:	6178      	str	r0, [r7, #20]
        break;
 8003272:	e022      	b.n	80032ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003274:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <UART_SetConfig+0x300>)
 8003276:	617b      	str	r3, [r7, #20]
        break;
 8003278:	e01f      	b.n	80032ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800327a:	f7fe fcd1 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 800327e:	6178      	str	r0, [r7, #20]
        break;
 8003280:	e01b      	b.n	80032ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003286:	617b      	str	r3, [r7, #20]
        break;
 8003288:	e017      	b.n	80032ba <UART_SetConfig+0x30e>
 800328a:	bf00      	nop
 800328c:	efff69f3 	.word	0xefff69f3
 8003290:	40008000 	.word	0x40008000
 8003294:	40013800 	.word	0x40013800
 8003298:	40021000 	.word	0x40021000
 800329c:	40004400 	.word	0x40004400
 80032a0:	40004800 	.word	0x40004800
 80032a4:	40004c00 	.word	0x40004c00
 80032a8:	40005000 	.word	0x40005000
 80032ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	76bb      	strb	r3, [r7, #26]
        break;
 80032b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80f1 	beq.w	80034a4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4413      	add	r3, r2
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d305      	bcc.n	80032de <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d902      	bls.n	80032e4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	76bb      	strb	r3, [r7, #26]
 80032e2:	e0df      	b.n	80034a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f04f 0100 	mov.w	r1, #0
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	020b      	lsls	r3, r1, #8
 80032f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032fa:	0202      	lsls	r2, r0, #8
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	6849      	ldr	r1, [r1, #4]
 8003300:	0849      	lsrs	r1, r1, #1
 8003302:	4608      	mov	r0, r1
 8003304:	f04f 0100 	mov.w	r1, #0
 8003308:	1814      	adds	r4, r2, r0
 800330a:	eb43 0501 	adc.w	r5, r3, r1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	461a      	mov	r2, r3
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	4620      	mov	r0, r4
 800331a:	4629      	mov	r1, r5
 800331c:	f7fc ff58 	bl	80001d0 <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4613      	mov	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332e:	d308      	bcc.n	8003342 <UART_SetConfig+0x396>
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003336:	d204      	bcs.n	8003342 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	e0b0      	b.n	80034a4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	76bb      	strb	r3, [r7, #26]
 8003346:	e0ad      	b.n	80034a4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003350:	d15c      	bne.n	800340c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003352:	7efb      	ldrb	r3, [r7, #27]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d828      	bhi.n	80033aa <UART_SetConfig+0x3fe>
 8003358:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <UART_SetConfig+0x3b4>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003385 	.word	0x08003385
 8003364:	0800338d 	.word	0x0800338d
 8003368:	08003395 	.word	0x08003395
 800336c:	080033ab 	.word	0x080033ab
 8003370:	0800339b 	.word	0x0800339b
 8003374:	080033ab 	.word	0x080033ab
 8003378:	080033ab 	.word	0x080033ab
 800337c:	080033ab 	.word	0x080033ab
 8003380:	080033a3 	.word	0x080033a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003384:	f7fe fce4 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003388:	6178      	str	r0, [r7, #20]
        break;
 800338a:	e013      	b.n	80033b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800338c:	f7fe fcf6 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8003390:	6178      	str	r0, [r7, #20]
        break;
 8003392:	e00f      	b.n	80033b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003394:	4b49      	ldr	r3, [pc, #292]	; (80034bc <UART_SetConfig+0x510>)
 8003396:	617b      	str	r3, [r7, #20]
        break;
 8003398:	e00c      	b.n	80033b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339a:	f7fe fc41 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 800339e:	6178      	str	r0, [r7, #20]
        break;
 80033a0:	e008      	b.n	80033b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a6:	617b      	str	r3, [r7, #20]
        break;
 80033a8:	e004      	b.n	80033b4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	76bb      	strb	r3, [r7, #26]
        break;
 80033b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d074      	beq.n	80034a4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	005a      	lsls	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	441a      	add	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b0f      	cmp	r3, #15
 80033d6:	d916      	bls.n	8003406 <UART_SetConfig+0x45a>
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033de:	d212      	bcs.n	8003406 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f023 030f 	bic.w	r3, r3, #15
 80033e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	89fb      	ldrh	r3, [r7, #14]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	89fa      	ldrh	r2, [r7, #14]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	e04e      	b.n	80034a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	76bb      	strb	r3, [r7, #26]
 800340a:	e04b      	b.n	80034a4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800340c:	7efb      	ldrb	r3, [r7, #27]
 800340e:	2b08      	cmp	r3, #8
 8003410:	d827      	bhi.n	8003462 <UART_SetConfig+0x4b6>
 8003412:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <UART_SetConfig+0x46c>)
 8003414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003418:	0800343d 	.word	0x0800343d
 800341c:	08003445 	.word	0x08003445
 8003420:	0800344d 	.word	0x0800344d
 8003424:	08003463 	.word	0x08003463
 8003428:	08003453 	.word	0x08003453
 800342c:	08003463 	.word	0x08003463
 8003430:	08003463 	.word	0x08003463
 8003434:	08003463 	.word	0x08003463
 8003438:	0800345b 	.word	0x0800345b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800343c:	f7fe fc88 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003440:	6178      	str	r0, [r7, #20]
        break;
 8003442:	e013      	b.n	800346c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003444:	f7fe fc9a 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8003448:	6178      	str	r0, [r7, #20]
        break;
 800344a:	e00f      	b.n	800346c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <UART_SetConfig+0x510>)
 800344e:	617b      	str	r3, [r7, #20]
        break;
 8003450:	e00c      	b.n	800346c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003452:	f7fe fbe5 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8003456:	6178      	str	r0, [r7, #20]
        break;
 8003458:	e008      	b.n	800346c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345e:	617b      	str	r3, [r7, #20]
        break;
 8003460:	e004      	b.n	800346c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	76bb      	strb	r3, [r7, #26]
        break;
 800346a:	bf00      	nop
    }

    if (pclk != 0U)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d018      	beq.n	80034a4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	085a      	lsrs	r2, r3, #1
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	441a      	add	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	b29b      	uxth	r3, r3
 8003486:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b0f      	cmp	r3, #15
 800348c:	d908      	bls.n	80034a0 <UART_SetConfig+0x4f4>
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d204      	bcs.n	80034a0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	e001      	b.n	80034a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80034b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bdb0      	pop	{r4, r5, r7, pc}
 80034ba:	bf00      	nop
 80034bc:	00f42400 	.word	0x00f42400

080034c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01a      	beq.n	80035d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035be:	d10a      	bne.n	80035d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003614:	f7fd fb0e 	bl	8000c34 <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d10e      	bne.n	8003646 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f82d 	bl	8003696 <UART_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e023      	b.n	800368e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d10e      	bne.n	8003672 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f817 	bl	8003696 <UART_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e00d      	b.n	800368e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a6:	e05e      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d05a      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b0:	f7fd fac0 	bl	8000c34 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d302      	bcc.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11b      	bne.n	80036fe <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e043      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02c      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800371a:	d124      	bne.n	8003766 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003724:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003734:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e00f      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	429a      	cmp	r2, r3
 8003782:	d091      	beq.n	80036a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <__NVIC_SetPriority>:
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db0a      	blt.n	80037ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	490c      	ldr	r1, [pc, #48]	; (80037dc <__NVIC_SetPriority+0x4c>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	0112      	lsls	r2, r2, #4
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	440b      	add	r3, r1
 80037b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037b8:	e00a      	b.n	80037d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4908      	ldr	r1, [pc, #32]	; (80037e0 <__NVIC_SetPriority+0x50>)
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	3b04      	subs	r3, #4
 80037c8:	0112      	lsls	r2, r2, #4
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	440b      	add	r3, r1
 80037ce:	761a      	strb	r2, [r3, #24]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000e100 	.word	0xe000e100
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <SysTick_Handler+0x1c>)
 80037ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80037ec:	f001 fe1e 	bl	800542c <xTaskGetSchedulerState>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d001      	beq.n	80037fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80037f6:	f002 fc07 	bl	8006008 <xPortSysTickHandler>
  }
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	e000e010 	.word	0xe000e010

08003804 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003808:	2100      	movs	r1, #0
 800380a:	f06f 0004 	mvn.w	r0, #4
 800380e:	f7ff ffbf 	bl	8003790 <__NVIC_SetPriority>
#endif
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800381e:	f3ef 8305 	mrs	r3, IPSR
 8003822:	603b      	str	r3, [r7, #0]
  return(result);
 8003824:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800382a:	f06f 0305 	mvn.w	r3, #5
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	e00c      	b.n	800384c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <osKernelInitialize+0x44>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <osKernelInitialize+0x44>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003840:	2300      	movs	r3, #0
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	e002      	b.n	800384c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003846:	f04f 33ff 	mov.w	r3, #4294967295
 800384a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800384c:	687b      	ldr	r3, [r7, #4]
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000094 	.word	0x20000094

08003860 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003866:	f3ef 8305 	mrs	r3, IPSR
 800386a:	603b      	str	r3, [r7, #0]
  return(result);
 800386c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003872:	f06f 0305 	mvn.w	r3, #5
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	e010      	b.n	800389c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <osKernelStart+0x48>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d109      	bne.n	8003896 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003882:	f7ff ffbf 	bl	8003804 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <osKernelStart+0x48>)
 8003888:	2202      	movs	r2, #2
 800388a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800388c:	f001 f976 	bl	8004b7c <vTaskStartScheduler>
      stat = osOK;
 8003890:	2300      	movs	r3, #0
 8003892:	607b      	str	r3, [r7, #4]
 8003894:	e002      	b.n	800389c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003896:	f04f 33ff 	mov.w	r3, #4294967295
 800389a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800389c:	687b      	ldr	r3, [r7, #4]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000094 	.word	0x20000094

080038ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08e      	sub	sp, #56	; 0x38
 80038b0:	af04      	add	r7, sp, #16
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038bc:	f3ef 8305 	mrs	r3, IPSR
 80038c0:	617b      	str	r3, [r7, #20]
  return(result);
 80038c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d17e      	bne.n	80039c6 <osThreadNew+0x11a>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d07b      	beq.n	80039c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038d2:	2318      	movs	r3, #24
 80038d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d045      	beq.n	8003972 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <osThreadNew+0x48>
        name = attr->name;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <osThreadNew+0x6e>
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2b38      	cmp	r3, #56	; 0x38
 800390c:	d805      	bhi.n	800391a <osThreadNew+0x6e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <osThreadNew+0x72>
        return (NULL);
 800391a:	2300      	movs	r3, #0
 800391c:	e054      	b.n	80039c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00e      	beq.n	8003954 <osThreadNew+0xa8>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b5b      	cmp	r3, #91	; 0x5b
 800393c:	d90a      	bls.n	8003954 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003942:	2b00      	cmp	r3, #0
 8003944:	d006      	beq.n	8003954 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <osThreadNew+0xa8>
        mem = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	e010      	b.n	8003976 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10c      	bne.n	8003976 <osThreadNew+0xca>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <osThreadNew+0xca>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <osThreadNew+0xca>
          mem = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e001      	b.n	8003976 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d110      	bne.n	800399e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003984:	9202      	str	r2, [sp, #8]
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6a3a      	ldr	r2, [r7, #32]
 8003990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fe44 	bl	8004620 <xTaskCreateStatic>
 8003998:	4603      	mov	r3, r0
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	e013      	b.n	80039c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d110      	bne.n	80039c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	f107 0310 	add.w	r3, r7, #16
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fe8f 	bl	80046da <xTaskCreate>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d001      	beq.n	80039c6 <osThreadNew+0x11a>
            hTask = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039c6:	693b      	ldr	r3, [r7, #16]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3728      	adds	r7, #40	; 0x28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80039d6:	f001 fd19 	bl	800540c <xTaskGetCurrentTaskHandle>
 80039da:	6078      	str	r0, [r7, #4]

  return (id);
 80039dc:	687b      	ldr	r3, [r7, #4]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f2:	f3ef 8305 	mrs	r3, IPSR
 80039f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80039f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80039fe:	f06f 0305 	mvn.w	r3, #5
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	e017      	b.n	8003a36 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d103      	bne.n	8003a14 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8003a0c:	f06f 0303 	mvn.w	r3, #3
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e010      	b.n	8003a36 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8003a14:	6938      	ldr	r0, [r7, #16]
 8003a16:	f001 f84b 	bl	8004ab0 <eTaskGetState>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d005      	beq.n	8003a30 <osThreadTerminate+0x4a>
      stat = osOK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8003a28:	6938      	ldr	r0, [r7, #16]
 8003a2a:	f000 ff9b 	bl	8004964 <vTaskDelete>
 8003a2e:	e002      	b.n	8003a36 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8003a30:	f06f 0302 	mvn.w	r3, #2
 8003a34:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8003a36:	697b      	ldr	r3, [r7, #20]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a48:	f3ef 8305 	mrs	r3, IPSR
 8003a4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <osDelay+0x1c>
    stat = osErrorISR;
 8003a54:	f06f 0305 	mvn.w	r3, #5
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e007      	b.n	8003a6c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 ffee 	bl	8004a48 <vTaskDelay>
    }
  }

  return (stat);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	4a06      	ldr	r2, [pc, #24]	; (8003aa8 <vApplicationGetIdleTaskMemory+0x30>)
 8003a8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2280      	movs	r2, #128	; 0x80
 8003a94:	601a      	str	r2, [r3, #0]
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000098 	.word	0x20000098
 8003aa8:	200000f4 	.word	0x200000f4

08003aac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4a07      	ldr	r2, [pc, #28]	; (8003ad8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003abc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4a06      	ldr	r2, [pc, #24]	; (8003adc <vApplicationGetTimerTaskMemory+0x30>)
 8003ac2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aca:	601a      	str	r2, [r3, #0]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	200002f4 	.word	0x200002f4
 8003adc:	20000350 	.word	0x20000350

08003ae0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f103 0208 	add.w	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295
 8003af8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f103 0208 	add.w	r2, r3, #8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f103 0208 	add.w	r2, r3, #8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	601a      	str	r2, [r3, #0]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d103      	bne.n	8003ba2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e00c      	b.n	8003bbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	e002      	b.n	8003bb0 <vListInsert+0x2e>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d2f6      	bcs.n	8003baa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	601a      	str	r2, [r3, #0]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6892      	ldr	r2, [r2, #8]
 8003c0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6852      	ldr	r2, [r2, #4]
 8003c14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d103      	bne.n	8003c28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	1e5a      	subs	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c6e:	bf00      	nop
 8003c70:	e7fe      	b.n	8003c70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c72:	f002 f937 	bl	8005ee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	441a      	add	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	68f9      	ldr	r1, [r7, #12]
 8003ca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	441a      	add	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	22ff      	movs	r2, #255	; 0xff
 8003cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	22ff      	movs	r2, #255	; 0xff
 8003cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d114      	bne.n	8003cf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01a      	beq.n	8003d06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3310      	adds	r3, #16
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f001 f9db 	bl	8005090 <xTaskRemoveFromEventList>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d012      	beq.n	8003d06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <xQueueGenericReset+0xcc>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	e009      	b.n	8003d06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3310      	adds	r3, #16
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fef2 	bl	8003ae0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3324      	adds	r3, #36	; 0x24
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff feed 	bl	8003ae0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d06:	f002 f91d 	bl	8005f44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d0a:	2301      	movs	r3, #1
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08e      	sub	sp, #56	; 0x38
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <xQueueGenericCreateStatic+0x52>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <xQueueGenericCreateStatic+0x56>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <xQueueGenericCreateStatic+0x58>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	623b      	str	r3, [r7, #32]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <xQueueGenericCreateStatic+0x7e>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <xQueueGenericCreateStatic+0x82>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <xQueueGenericCreateStatic+0x84>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	61fb      	str	r3, [r7, #28]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003db6:	2350      	movs	r3, #80	; 0x50
 8003db8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b50      	cmp	r3, #80	; 0x50
 8003dbe:	d00a      	beq.n	8003dd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	61bb      	str	r3, [r7, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003dd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f805 	bl	8003e08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3730      	adds	r7, #48	; 0x30
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e002      	b.n	8003e2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e36:	2101      	movs	r1, #1
 8003e38:	69b8      	ldr	r0, [r7, #24]
 8003e3a:	f7ff ff05 	bl	8003c48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08e      	sub	sp, #56	; 0x38
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <xQueueGenericSend+0x32>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e7e:	bf00      	nop
 8003e80:	e7fe      	b.n	8003e80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d103      	bne.n	8003e90 <xQueueGenericSend+0x40>
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <xQueueGenericSend+0x44>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <xQueueGenericSend+0x46>
 8003e94:	2300      	movs	r3, #0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <xQueueGenericSend+0x60>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d103      	bne.n	8003ebe <xQueueGenericSend+0x6e>
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <xQueueGenericSend+0x72>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <xQueueGenericSend+0x74>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <xQueueGenericSend+0x8e>
	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	623b      	str	r3, [r7, #32]
}
 8003eda:	bf00      	nop
 8003edc:	e7fe      	b.n	8003edc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ede:	f001 faa5 	bl	800542c <xTaskGetSchedulerState>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <xQueueGenericSend+0x9e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <xQueueGenericSend+0xa2>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <xQueueGenericSend+0xa4>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <xQueueGenericSend+0xbe>
	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	61fb      	str	r3, [r7, #28]
}
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f0e:	f001 ffe9 	bl	8005ee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <xQueueGenericSend+0xd4>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d129      	bne.n	8003f78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f2a:	f000 fa0b 	bl	8004344 <prvCopyDataToQueue>
 8003f2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d010      	beq.n	8003f5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	3324      	adds	r3, #36	; 0x24
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 f8a7 	bl	8005090 <xTaskRemoveFromEventList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d013      	beq.n	8003f70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f48:	4b3f      	ldr	r3, [pc, #252]	; (8004048 <xQueueGenericSend+0x1f8>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	e00a      	b.n	8003f70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f60:	4b39      	ldr	r3, [pc, #228]	; (8004048 <xQueueGenericSend+0x1f8>)
 8003f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f70:	f001 ffe8 	bl	8005f44 <vPortExitCritical>
				return pdPASS;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e063      	b.n	8004040 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f7e:	f001 ffe1 	bl	8005f44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e05c      	b.n	8004040 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 f8e1 	bl	8005158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f96:	2301      	movs	r3, #1
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f9a:	f001 ffd3 	bl	8005f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f9e:	f000 fe53 	bl	8004c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fa2:	f001 ff9f 	bl	8005ee4 <vPortEnterCritical>
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fac:	b25b      	sxtb	r3, r3
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d103      	bne.n	8003fbc <xQueueGenericSend+0x16c>
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fc2:	b25b      	sxtb	r3, r3
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d103      	bne.n	8003fd2 <xQueueGenericSend+0x182>
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fd2:	f001 ffb7 	bl	8005f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fd6:	1d3a      	adds	r2, r7, #4
 8003fd8:	f107 0314 	add.w	r3, r7, #20
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 f8d0 	bl	8005184 <xTaskCheckForTimeOut>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d124      	bne.n	8004034 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fec:	f000 faa2 	bl	8004534 <prvIsQueueFull>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d018      	beq.n	8004028 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	3310      	adds	r3, #16
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fff6 	bl	8004ff0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004006:	f000 fa2d 	bl	8004464 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800400a:	f000 fe2b 	bl	8004c64 <xTaskResumeAll>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	f47f af7c 	bne.w	8003f0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <xQueueGenericSend+0x1f8>)
 8004018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	e772      	b.n	8003f0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800402a:	f000 fa1b 	bl	8004464 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800402e:	f000 fe19 	bl	8004c64 <xTaskResumeAll>
 8004032:	e76c      	b.n	8003f0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004036:	f000 fa15 	bl	8004464 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800403a:	f000 fe13 	bl	8004c64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800403e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004040:	4618      	mov	r0, r3
 8004042:	3738      	adds	r7, #56	; 0x38
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	e000ed04 	.word	0xe000ed04

0800404c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b090      	sub	sp, #64	; 0x40
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d103      	bne.n	8004088 <xQueueGenericSendFromISR+0x3c>
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <xQueueGenericSendFromISR+0x40>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <xQueueGenericSendFromISR+0x42>
 800408c:	2300      	movs	r3, #0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040a4:	bf00      	nop
 80040a6:	e7fe      	b.n	80040a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d103      	bne.n	80040b6 <xQueueGenericSendFromISR+0x6a>
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <xQueueGenericSendFromISR+0x6e>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <xQueueGenericSendFromISR+0x70>
 80040ba:	2300      	movs	r3, #0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	623b      	str	r3, [r7, #32]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040d6:	f001 ffe7 	bl	80060a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040da:	f3ef 8211 	mrs	r2, BASEPRI
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	61fa      	str	r2, [r7, #28]
 80040f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <xQueueGenericSendFromISR+0xbc>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d12f      	bne.n	8004168 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800410e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800411e:	f000 f911 	bl	8004344 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004122:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d112      	bne.n	8004152 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2b00      	cmp	r3, #0
 8004132:	d016      	beq.n	8004162 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	3324      	adds	r3, #36	; 0x24
 8004138:	4618      	mov	r0, r3
 800413a:	f000 ffa9 	bl	8005090 <xTaskRemoveFromEventList>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00e      	beq.n	8004162 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e007      	b.n	8004162 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004152:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004156:	3301      	adds	r3, #1
 8004158:	b2db      	uxtb	r3, r3
 800415a:	b25a      	sxtb	r2, r3
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004162:	2301      	movs	r3, #1
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004166:	e001      	b.n	800416c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004168:	2300      	movs	r3, #0
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800416c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004176:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800417a:	4618      	mov	r0, r3
 800417c:	3740      	adds	r7, #64	; 0x40
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08c      	sub	sp, #48	; 0x30
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004190:	2300      	movs	r3, #0
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <xQueueReceive+0x30>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	623b      	str	r3, [r7, #32]
}
 80041b0:	bf00      	nop
 80041b2:	e7fe      	b.n	80041b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <xQueueReceive+0x3e>
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <xQueueReceive+0x42>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <xQueueReceive+0x44>
 80041c6:	2300      	movs	r3, #0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <xQueueReceive+0x5e>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	61fb      	str	r3, [r7, #28]
}
 80041de:	bf00      	nop
 80041e0:	e7fe      	b.n	80041e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041e2:	f001 f923 	bl	800542c <xTaskGetSchedulerState>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <xQueueReceive+0x6e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <xQueueReceive+0x72>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <xQueueReceive+0x74>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <xQueueReceive+0x8e>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	61bb      	str	r3, [r7, #24]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004212:	f001 fe67 	bl	8005ee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01f      	beq.n	8004262 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004226:	f000 f8f7 	bl	8004418 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	1e5a      	subs	r2, r3, #1
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00f      	beq.n	800425a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	3310      	adds	r3, #16
 800423e:	4618      	mov	r0, r3
 8004240:	f000 ff26 	bl	8005090 <xTaskRemoveFromEventList>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800424a:	4b3d      	ldr	r3, [pc, #244]	; (8004340 <xQueueReceive+0x1bc>)
 800424c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800425a:	f001 fe73 	bl	8005f44 <vPortExitCritical>
				return pdPASS;
 800425e:	2301      	movs	r3, #1
 8004260:	e069      	b.n	8004336 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d103      	bne.n	8004270 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004268:	f001 fe6c 	bl	8005f44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800426c:	2300      	movs	r3, #0
 800426e:	e062      	b.n	8004336 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004276:	f107 0310 	add.w	r3, r7, #16
 800427a:	4618      	mov	r0, r3
 800427c:	f000 ff6c 	bl	8005158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004284:	f001 fe5e 	bl	8005f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004288:	f000 fcde 	bl	8004c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800428c:	f001 fe2a 	bl	8005ee4 <vPortEnterCritical>
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004296:	b25b      	sxtb	r3, r3
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d103      	bne.n	80042a6 <xQueueReceive+0x122>
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ac:	b25b      	sxtb	r3, r3
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b2:	d103      	bne.n	80042bc <xQueueReceive+0x138>
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042bc:	f001 fe42 	bl	8005f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042c0:	1d3a      	adds	r2, r7, #4
 80042c2:	f107 0310 	add.w	r3, r7, #16
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 ff5b 	bl	8005184 <xTaskCheckForTimeOut>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d123      	bne.n	800431c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042d6:	f000 f917 	bl	8004508 <prvIsQueueEmpty>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d017      	beq.n	8004310 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	3324      	adds	r3, #36	; 0x24
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fe81 	bl	8004ff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f0:	f000 f8b8 	bl	8004464 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042f4:	f000 fcb6 	bl	8004c64 <xTaskResumeAll>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d189      	bne.n	8004212 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80042fe:	4b10      	ldr	r3, [pc, #64]	; (8004340 <xQueueReceive+0x1bc>)
 8004300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	e780      	b.n	8004212 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004312:	f000 f8a7 	bl	8004464 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004316:	f000 fca5 	bl	8004c64 <xTaskResumeAll>
 800431a:	e77a      	b.n	8004212 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800431c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800431e:	f000 f8a1 	bl	8004464 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004322:	f000 fc9f 	bl	8004c64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004328:	f000 f8ee 	bl	8004508 <prvIsQueueEmpty>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	f43f af6f 	beq.w	8004212 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004334:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004336:	4618      	mov	r0, r3
 8004338:	3730      	adds	r7, #48	; 0x30
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	e000ed04 	.word	0xe000ed04

08004344 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10d      	bne.n	800437e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d14d      	bne.n	8004406 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4618      	mov	r0, r3
 8004370:	f001 f87a 	bl	8005468 <xTaskPriorityDisinherit>
 8004374:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	e043      	b.n	8004406 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d119      	bne.n	80043b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6858      	ldr	r0, [r3, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	461a      	mov	r2, r3
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	f002 f8de 	bl	8006550 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d32b      	bcc.n	8004406 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	e026      	b.n	8004406 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	68d8      	ldr	r0, [r3, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	461a      	mov	r2, r3
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	f002 f8c4 	bl	8006550 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	425b      	negs	r3, r3
 80043d2:	441a      	add	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d207      	bcs.n	80043f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	425b      	negs	r3, r3
 80043ee:	441a      	add	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d105      	bne.n	8004406 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	3b01      	subs	r3, #1
 8004404:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800440e:	697b      	ldr	r3, [r7, #20]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d018      	beq.n	800445c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	441a      	add	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	429a      	cmp	r2, r3
 8004442:	d303      	bcc.n	800444c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68d9      	ldr	r1, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	461a      	mov	r2, r3
 8004456:	6838      	ldr	r0, [r7, #0]
 8004458:	f002 f87a 	bl	8006550 <memcpy>
	}
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800446c:	f001 fd3a 	bl	8005ee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004476:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004478:	e011      	b.n	800449e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	2b00      	cmp	r3, #0
 8004480:	d012      	beq.n	80044a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3324      	adds	r3, #36	; 0x24
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fe02 	bl	8005090 <xTaskRemoveFromEventList>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004492:	f000 fed9 	bl	8005248 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	3b01      	subs	r3, #1
 800449a:	b2db      	uxtb	r3, r3
 800449c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800449e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	dce9      	bgt.n	800447a <prvUnlockQueue+0x16>
 80044a6:	e000      	b.n	80044aa <prvUnlockQueue+0x46>
					break;
 80044a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	22ff      	movs	r2, #255	; 0xff
 80044ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80044b2:	f001 fd47 	bl	8005f44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044b6:	f001 fd15 	bl	8005ee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044c2:	e011      	b.n	80044e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d012      	beq.n	80044f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3310      	adds	r3, #16
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fddd 	bl	8005090 <xTaskRemoveFromEventList>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044dc:	f000 feb4 	bl	8005248 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044e0:	7bbb      	ldrb	r3, [r7, #14]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	dce9      	bgt.n	80044c4 <prvUnlockQueue+0x60>
 80044f0:	e000      	b.n	80044f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	22ff      	movs	r2, #255	; 0xff
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80044fc:	f001 fd22 	bl	8005f44 <vPortExitCritical>
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004510:	f001 fce8 	bl	8005ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800451c:	2301      	movs	r3, #1
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	e001      	b.n	8004526 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004526:	f001 fd0d 	bl	8005f44 <vPortExitCritical>

	return xReturn;
 800452a:	68fb      	ldr	r3, [r7, #12]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800453c:	f001 fcd2 	bl	8005ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004548:	429a      	cmp	r2, r3
 800454a:	d102      	bne.n	8004552 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800454c:	2301      	movs	r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	e001      	b.n	8004556 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004556:	f001 fcf5 	bl	8005f44 <vPortExitCritical>

	return xReturn;
 800455a:	68fb      	ldr	r3, [r7, #12]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e014      	b.n	800459e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004574:	4a0f      	ldr	r2, [pc, #60]	; (80045b4 <vQueueAddToRegistry+0x50>)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004580:	490c      	ldr	r1, [pc, #48]	; (80045b4 <vQueueAddToRegistry+0x50>)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <vQueueAddToRegistry+0x50>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004596:	e006      	b.n	80045a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3301      	adds	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b07      	cmp	r3, #7
 80045a2:	d9e7      	bls.n	8004574 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20001a44 	.word	0x20001a44

080045b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80045c8:	f001 fc8c 	bl	8005ee4 <vPortEnterCritical>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045d2:	b25b      	sxtb	r3, r3
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d103      	bne.n	80045e2 <vQueueWaitForMessageRestricted+0x2a>
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045e8:	b25b      	sxtb	r3, r3
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d103      	bne.n	80045f8 <vQueueWaitForMessageRestricted+0x40>
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f8:	f001 fca4 	bl	8005f44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	3324      	adds	r3, #36	; 0x24
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fd13 	bl	8005038 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004612:	6978      	ldr	r0, [r7, #20]
 8004614:	f7ff ff26 	bl	8004464 <prvUnlockQueue>
	}
 8004618:	bf00      	nop
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08e      	sub	sp, #56	; 0x38
 8004624:	af04      	add	r7, sp, #16
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800462e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	623b      	str	r3, [r7, #32]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800464a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <xTaskCreateStatic+0x46>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	61fb      	str	r3, [r7, #28]
}
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004666:	235c      	movs	r3, #92	; 0x5c
 8004668:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b5c      	cmp	r3, #92	; 0x5c
 800466e:	d00a      	beq.n	8004686 <xTaskCreateStatic+0x66>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	61bb      	str	r3, [r7, #24]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004686:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	2b00      	cmp	r3, #0
 800468c:	d01e      	beq.n	80046cc <xTaskCreateStatic+0xac>
 800468e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01b      	beq.n	80046cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800469c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046a6:	2300      	movs	r3, #0
 80046a8:	9303      	str	r3, [sp, #12]
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	9302      	str	r3, [sp, #8]
 80046ae:	f107 0314 	add.w	r3, r7, #20
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f850 	bl	8004764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046c6:	f000 f8dd 	bl	8004884 <prvAddNewTaskToReadyList>
 80046ca:	e001      	b.n	80046d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046d0:	697b      	ldr	r3, [r7, #20]
	}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3728      	adds	r7, #40	; 0x28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b08c      	sub	sp, #48	; 0x30
 80046de:	af04      	add	r7, sp, #16
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 fd1a 	bl	8006128 <pvPortMalloc>
 80046f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00e      	beq.n	800471a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046fc:	205c      	movs	r0, #92	; 0x5c
 80046fe:	f001 fd13 	bl	8006128 <pvPortMalloc>
 8004702:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
 8004710:	e005      	b.n	800471e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004712:	6978      	ldr	r0, [r7, #20]
 8004714:	f001 fdd4 	bl	80062c0 <vPortFree>
 8004718:	e001      	b.n	800471e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d017      	beq.n	8004754 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800472c:	88fa      	ldrh	r2, [r7, #6]
 800472e:	2300      	movs	r3, #0
 8004730:	9303      	str	r3, [sp, #12]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	9302      	str	r3, [sp, #8]
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f80e 	bl	8004764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004748:	69f8      	ldr	r0, [r7, #28]
 800474a:	f000 f89b 	bl	8004884 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800474e:	2301      	movs	r3, #1
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	e002      	b.n	800475a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004754:	f04f 33ff 	mov.w	r3, #4294967295
 8004758:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800475a:	69bb      	ldr	r3, [r7, #24]
	}
 800475c:	4618      	mov	r0, r3
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	461a      	mov	r2, r3
 800477c:	21a5      	movs	r1, #165	; 0xa5
 800477e:	f001 fef5 	bl	800656c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800478c:	3b01      	subs	r3, #1
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f023 0307 	bic.w	r3, r3, #7
 800479a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	617b      	str	r3, [r7, #20]
}
 80047b8:	bf00      	nop
 80047ba:	e7fe      	b.n	80047ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01f      	beq.n	8004802 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	e012      	b.n	80047ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	4413      	add	r3, r2
 80047ce:	7819      	ldrb	r1, [r3, #0]
 80047d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	4413      	add	r3, r2
 80047d6:	3334      	adds	r3, #52	; 0x34
 80047d8:	460a      	mov	r2, r1
 80047da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2b0f      	cmp	r3, #15
 80047f2:	d9e9      	bls.n	80047c8 <prvInitialiseNewTask+0x64>
 80047f4:	e000      	b.n	80047f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80047f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004800:	e003      	b.n	800480a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	2b37      	cmp	r3, #55	; 0x37
 800480e:	d901      	bls.n	8004814 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004810:	2337      	movs	r3, #55	; 0x37
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004818:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800481e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	2200      	movs	r2, #0
 8004824:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	3304      	adds	r3, #4
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff f978 	bl	8003b20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	3318      	adds	r3, #24
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff f973 	bl	8003b20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800484e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	2200      	movs	r2, #0
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	68f9      	ldr	r1, [r7, #12]
 8004862:	69b8      	ldr	r0, [r7, #24]
 8004864:	f001 fa10 	bl	8005c88 <pxPortInitialiseStack>
 8004868:	4602      	mov	r2, r0
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004878:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800487a:	bf00      	nop
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800488c:	f001 fb2a 	bl	8005ee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004890:	4b2d      	ldr	r3, [pc, #180]	; (8004948 <prvAddNewTaskToReadyList+0xc4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <prvAddNewTaskToReadyList+0xc4>)
 8004898:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800489a:	4b2c      	ldr	r3, [pc, #176]	; (800494c <prvAddNewTaskToReadyList+0xc8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048a2:	4a2a      	ldr	r2, [pc, #168]	; (800494c <prvAddNewTaskToReadyList+0xc8>)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048a8:	4b27      	ldr	r3, [pc, #156]	; (8004948 <prvAddNewTaskToReadyList+0xc4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d110      	bne.n	80048d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048b0:	f000 fcee 	bl	8005290 <prvInitialiseTaskLists>
 80048b4:	e00d      	b.n	80048d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048b6:	4b26      	ldr	r3, [pc, #152]	; (8004950 <prvAddNewTaskToReadyList+0xcc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048be:	4b23      	ldr	r3, [pc, #140]	; (800494c <prvAddNewTaskToReadyList+0xc8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d802      	bhi.n	80048d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048cc:	4a1f      	ldr	r2, [pc, #124]	; (800494c <prvAddNewTaskToReadyList+0xc8>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048d2:	4b20      	ldr	r3, [pc, #128]	; (8004954 <prvAddNewTaskToReadyList+0xd0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3301      	adds	r3, #1
 80048d8:	4a1e      	ldr	r2, [pc, #120]	; (8004954 <prvAddNewTaskToReadyList+0xd0>)
 80048da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <prvAddNewTaskToReadyList+0xd0>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <prvAddNewTaskToReadyList+0xd4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d903      	bls.n	80048f8 <prvAddNewTaskToReadyList+0x74>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	4a18      	ldr	r2, [pc, #96]	; (8004958 <prvAddNewTaskToReadyList+0xd4>)
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4a15      	ldr	r2, [pc, #84]	; (800495c <prvAddNewTaskToReadyList+0xd8>)
 8004906:	441a      	add	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f7ff f913 	bl	8003b3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004914:	f001 fb16 	bl	8005f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004918:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <prvAddNewTaskToReadyList+0xcc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00e      	beq.n	800493e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <prvAddNewTaskToReadyList+0xc8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	429a      	cmp	r2, r3
 800492c:	d207      	bcs.n	800493e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <prvAddNewTaskToReadyList+0xdc>)
 8004930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000c24 	.word	0x20000c24
 800494c:	20000750 	.word	0x20000750
 8004950:	20000c30 	.word	0x20000c30
 8004954:	20000c40 	.word	0x20000c40
 8004958:	20000c2c 	.word	0x20000c2c
 800495c:	20000754 	.word	0x20000754
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800496c:	f001 faba 	bl	8005ee4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <vTaskDelete+0x18>
 8004976:	4b2c      	ldr	r3, [pc, #176]	; (8004a28 <vTaskDelete+0xc4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	e000      	b.n	800497e <vTaskDelete+0x1a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3304      	adds	r3, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff f935 	bl	8003bf4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	d004      	beq.n	800499c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3318      	adds	r3, #24
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff f92c 	bl	8003bf4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800499c:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <vTaskDelete+0xc8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3301      	adds	r3, #1
 80049a2:	4a22      	ldr	r2, [pc, #136]	; (8004a2c <vTaskDelete+0xc8>)
 80049a4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80049a6:	4b20      	ldr	r3, [pc, #128]	; (8004a28 <vTaskDelete+0xc4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d10b      	bne.n	80049c8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	481e      	ldr	r0, [pc, #120]	; (8004a30 <vTaskDelete+0xcc>)
 80049b8:	f7ff f8bf 	bl	8003b3a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80049bc:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <vTaskDelete+0xd0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3301      	adds	r3, #1
 80049c2:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <vTaskDelete+0xd0>)
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e009      	b.n	80049dc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <vTaskDelete+0xd4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <vTaskDelete+0xd4>)
 80049d0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fcca 	bl	800536c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80049d8:	f000 fcf8 	bl	80053cc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80049dc:	f001 fab2 	bl	8005f44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80049e0:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <vTaskDelete+0xd8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <vTaskDelete+0xc4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d116      	bne.n	8004a20 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80049f2:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <vTaskDelete+0xdc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <vTaskDelete+0xac>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	60bb      	str	r3, [r7, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <vTaskDelete+0xe0>)
 8004a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000750 	.word	0x20000750
 8004a2c:	20000c40 	.word	0x20000c40
 8004a30:	20000bf8 	.word	0x20000bf8
 8004a34:	20000c0c 	.word	0x20000c0c
 8004a38:	20000c24 	.word	0x20000c24
 8004a3c:	20000c30 	.word	0x20000c30
 8004a40:	20000c4c 	.word	0x20000c4c
 8004a44:	e000ed04 	.word	0xe000ed04

08004a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d017      	beq.n	8004a8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a5a:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <vTaskDelay+0x60>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <vTaskDelay+0x30>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	60bb      	str	r3, [r7, #8]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a78:	f000 f8e6 	bl	8004c48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fd60 	bl	8005544 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a84:	f000 f8ee 	bl	8004c64 <xTaskResumeAll>
 8004a88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d107      	bne.n	8004aa0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <vTaskDelay+0x64>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000c4c 	.word	0x20000c4c
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <eTaskGetState+0x28>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	60bb      	str	r3, [r7, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	e7fe      	b.n	8004ad6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8004ad8:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <eTaskGetState+0xb8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d102      	bne.n	8004ae8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e03a      	b.n	8004b5e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8004ae8:	f001 f9fc 	bl	8005ee4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004af2:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <eTaskGetState+0xbc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004af8:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <eTaskGetState+0xc0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004afe:	f001 fa21 	bl	8005f44 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d003      	beq.n	8004b12 <eTaskGetState+0x62>
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d102      	bne.n	8004b18 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004b12:	2302      	movs	r3, #2
 8004b14:	77fb      	strb	r3, [r7, #31]
 8004b16:	e022      	b.n	8004b5e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <eTaskGetState+0xc4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d112      	bne.n	8004b46 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10b      	bne.n	8004b40 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d102      	bne.n	8004b3a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8004b34:	2302      	movs	r3, #2
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e011      	b.n	8004b5e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	77fb      	strb	r3, [r7, #31]
 8004b3e:	e00e      	b.n	8004b5e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004b40:	2302      	movs	r3, #2
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e00b      	b.n	8004b5e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	4a0b      	ldr	r2, [pc, #44]	; (8004b78 <eTaskGetState+0xc8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d002      	beq.n	8004b54 <eTaskGetState+0xa4>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004b54:	2304      	movs	r3, #4
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e001      	b.n	8004b5e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004b5e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004b60:	4618      	mov	r0, r3
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20000750 	.word	0x20000750
 8004b6c:	20000bdc 	.word	0x20000bdc
 8004b70:	20000be0 	.word	0x20000be0
 8004b74:	20000c10 	.word	0x20000c10
 8004b78:	20000bf8 	.word	0x20000bf8

08004b7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b8a:	463a      	mov	r2, r7
 8004b8c:	1d39      	adds	r1, r7, #4
 8004b8e:	f107 0308 	add.w	r3, r7, #8
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe ff70 	bl	8003a78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b98:	6839      	ldr	r1, [r7, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	9202      	str	r2, [sp, #8]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	460a      	mov	r2, r1
 8004baa:	4921      	ldr	r1, [pc, #132]	; (8004c30 <vTaskStartScheduler+0xb4>)
 8004bac:	4821      	ldr	r0, [pc, #132]	; (8004c34 <vTaskStartScheduler+0xb8>)
 8004bae:	f7ff fd37 	bl	8004620 <xTaskCreateStatic>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4a20      	ldr	r2, [pc, #128]	; (8004c38 <vTaskStartScheduler+0xbc>)
 8004bb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bb8:	4b1f      	ldr	r3, [pc, #124]	; (8004c38 <vTaskStartScheduler+0xbc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e001      	b.n	8004bca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d102      	bne.n	8004bd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004bd0:	f000 fd0c 	bl	80055ec <xTimerCreateTimerTask>
 8004bd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d116      	bne.n	8004c0a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	613b      	str	r3, [r7, #16]
}
 8004bee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bf0:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <vTaskStartScheduler+0xc0>)
 8004bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bf8:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <vTaskStartScheduler+0xc4>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004bfe:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <vTaskStartScheduler+0xc8>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c04:	f001 f8cc 	bl	8005da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c08:	e00e      	b.n	8004c28 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d10a      	bne.n	8004c28 <vTaskStartScheduler+0xac>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	60fb      	str	r3, [r7, #12]
}
 8004c24:	bf00      	nop
 8004c26:	e7fe      	b.n	8004c26 <vTaskStartScheduler+0xaa>
}
 8004c28:	bf00      	nop
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	08006f5c 	.word	0x08006f5c
 8004c34:	08005261 	.word	0x08005261
 8004c38:	20000c48 	.word	0x20000c48
 8004c3c:	20000c44 	.word	0x20000c44
 8004c40:	20000c30 	.word	0x20000c30
 8004c44:	20000c28 	.word	0x20000c28

08004c48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <vTaskSuspendAll+0x18>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	4a03      	ldr	r2, [pc, #12]	; (8004c60 <vTaskSuspendAll+0x18>)
 8004c54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c56:	bf00      	nop
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	20000c4c 	.word	0x20000c4c

08004c64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c72:	4b42      	ldr	r3, [pc, #264]	; (8004d7c <xTaskResumeAll+0x118>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <xTaskResumeAll+0x2c>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	603b      	str	r3, [r7, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c90:	f001 f928 	bl	8005ee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c94:	4b39      	ldr	r3, [pc, #228]	; (8004d7c <xTaskResumeAll+0x118>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	4a38      	ldr	r2, [pc, #224]	; (8004d7c <xTaskResumeAll+0x118>)
 8004c9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c9e:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <xTaskResumeAll+0x118>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d162      	bne.n	8004d6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ca6:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <xTaskResumeAll+0x11c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d05e      	beq.n	8004d6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cae:	e02f      	b.n	8004d10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb0:	4b34      	ldr	r3, [pc, #208]	; (8004d84 <xTaskResumeAll+0x120>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3318      	adds	r3, #24
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe ff99 	bl	8003bf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe ff94 	bl	8003bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd0:	4b2d      	ldr	r3, [pc, #180]	; (8004d88 <xTaskResumeAll+0x124>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d903      	bls.n	8004ce0 <xTaskResumeAll+0x7c>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <xTaskResumeAll+0x124>)
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <xTaskResumeAll+0x128>)
 8004cee:	441a      	add	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f7fe ff1f 	bl	8003b3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4b23      	ldr	r3, [pc, #140]	; (8004d90 <xTaskResumeAll+0x12c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d302      	bcc.n	8004d10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d0a:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <xTaskResumeAll+0x130>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d10:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <xTaskResumeAll+0x120>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1cb      	bne.n	8004cb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d1e:	f000 fb55 	bl	80053cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d22:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <xTaskResumeAll+0x134>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d2e:	f000 f847 	bl	8004dc0 <xTaskIncrementTick>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d38:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <xTaskResumeAll+0x130>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f1      	bne.n	8004d2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <xTaskResumeAll+0x134>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <xTaskResumeAll+0x130>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <xTaskResumeAll+0x138>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d6c:	f001 f8ea 	bl	8005f44 <vPortExitCritical>

	return xAlreadyYielded;
 8004d70:	68bb      	ldr	r3, [r7, #8]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000c4c 	.word	0x20000c4c
 8004d80:	20000c24 	.word	0x20000c24
 8004d84:	20000be4 	.word	0x20000be4
 8004d88:	20000c2c 	.word	0x20000c2c
 8004d8c:	20000754 	.word	0x20000754
 8004d90:	20000750 	.word	0x20000750
 8004d94:	20000c38 	.word	0x20000c38
 8004d98:	20000c34 	.word	0x20000c34
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <xTaskGetTickCount+0x1c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dac:	687b      	ldr	r3, [r7, #4]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000c28 	.word	0x20000c28

08004dc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dca:	4b4f      	ldr	r3, [pc, #316]	; (8004f08 <xTaskIncrementTick+0x148>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f040 808f 	bne.w	8004ef2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004dd4:	4b4d      	ldr	r3, [pc, #308]	; (8004f0c <xTaskIncrementTick+0x14c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ddc:	4a4b      	ldr	r2, [pc, #300]	; (8004f0c <xTaskIncrementTick+0x14c>)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d120      	bne.n	8004e2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004de8:	4b49      	ldr	r3, [pc, #292]	; (8004f10 <xTaskIncrementTick+0x150>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <xTaskIncrementTick+0x48>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	603b      	str	r3, [r7, #0]
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <xTaskIncrementTick+0x46>
 8004e08:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <xTaskIncrementTick+0x150>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	4b41      	ldr	r3, [pc, #260]	; (8004f14 <xTaskIncrementTick+0x154>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a3f      	ldr	r2, [pc, #252]	; (8004f10 <xTaskIncrementTick+0x150>)
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	4a3f      	ldr	r2, [pc, #252]	; (8004f14 <xTaskIncrementTick+0x154>)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	4b3e      	ldr	r3, [pc, #248]	; (8004f18 <xTaskIncrementTick+0x158>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3301      	adds	r3, #1
 8004e22:	4a3d      	ldr	r2, [pc, #244]	; (8004f18 <xTaskIncrementTick+0x158>)
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	f000 fad1 	bl	80053cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e2a:	4b3c      	ldr	r3, [pc, #240]	; (8004f1c <xTaskIncrementTick+0x15c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d349      	bcc.n	8004ec8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e34:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <xTaskIncrementTick+0x150>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e3e:	4b37      	ldr	r3, [pc, #220]	; (8004f1c <xTaskIncrementTick+0x15c>)
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295
 8004e44:	601a      	str	r2, [r3, #0]
					break;
 8004e46:	e03f      	b.n	8004ec8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e48:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <xTaskIncrementTick+0x150>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d203      	bcs.n	8004e68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e60:	4a2e      	ldr	r2, [pc, #184]	; (8004f1c <xTaskIncrementTick+0x15c>)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e66:	e02f      	b.n	8004ec8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe fec1 	bl	8003bf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d004      	beq.n	8004e84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	3318      	adds	r3, #24
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe feb8 	bl	8003bf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e88:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <xTaskIncrementTick+0x160>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d903      	bls.n	8004e98 <xTaskIncrementTick+0xd8>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	4a22      	ldr	r2, [pc, #136]	; (8004f20 <xTaskIncrementTick+0x160>)
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <xTaskIncrementTick+0x164>)
 8004ea6:	441a      	add	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7fe fe43 	bl	8003b3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <xTaskIncrementTick+0x168>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d3b8      	bcc.n	8004e34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ec6:	e7b5      	b.n	8004e34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ec8:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <xTaskIncrementTick+0x168>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ece:	4915      	ldr	r1, [pc, #84]	; (8004f24 <xTaskIncrementTick+0x164>)
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d901      	bls.n	8004ee4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ee4:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <xTaskIncrementTick+0x16c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004eec:	2301      	movs	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e004      	b.n	8004efc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <xTaskIncrementTick+0x170>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	4a0d      	ldr	r2, [pc, #52]	; (8004f30 <xTaskIncrementTick+0x170>)
 8004efa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004efc:	697b      	ldr	r3, [r7, #20]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000c4c 	.word	0x20000c4c
 8004f0c:	20000c28 	.word	0x20000c28
 8004f10:	20000bdc 	.word	0x20000bdc
 8004f14:	20000be0 	.word	0x20000be0
 8004f18:	20000c3c 	.word	0x20000c3c
 8004f1c:	20000c44 	.word	0x20000c44
 8004f20:	20000c2c 	.word	0x20000c2c
 8004f24:	20000754 	.word	0x20000754
 8004f28:	20000750 	.word	0x20000750
 8004f2c:	20000c38 	.word	0x20000c38
 8004f30:	20000c34 	.word	0x20000c34

08004f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f3a:	4b28      	ldr	r3, [pc, #160]	; (8004fdc <vTaskSwitchContext+0xa8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f42:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <vTaskSwitchContext+0xac>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f48:	e041      	b.n	8004fce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004f4a:	4b25      	ldr	r3, [pc, #148]	; (8004fe0 <vTaskSwitchContext+0xac>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f50:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <vTaskSwitchContext+0xb0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e010      	b.n	8004f7a <vTaskSwitchContext+0x46>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <vTaskSwitchContext+0x40>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	607b      	str	r3, [r7, #4]
}
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <vTaskSwitchContext+0x3e>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	491b      	ldr	r1, [pc, #108]	; (8004fe8 <vTaskSwitchContext+0xb4>)
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0e4      	beq.n	8004f58 <vTaskSwitchContext+0x24>
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <vTaskSwitchContext+0xb4>)
 8004f9a:	4413      	add	r3, r2
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	605a      	str	r2, [r3, #4]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d104      	bne.n	8004fbe <vTaskSwitchContext+0x8a>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4a09      	ldr	r2, [pc, #36]	; (8004fec <vTaskSwitchContext+0xb8>)
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4a06      	ldr	r2, [pc, #24]	; (8004fe4 <vTaskSwitchContext+0xb0>)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6013      	str	r3, [r2, #0]
}
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000c4c 	.word	0x20000c4c
 8004fe0:	20000c38 	.word	0x20000c38
 8004fe4:	20000c2c 	.word	0x20000c2c
 8004fe8:	20000754 	.word	0x20000754
 8004fec:	20000750 	.word	0x20000750

08004ff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	60fb      	str	r3, [r7, #12]
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005016:	4b07      	ldr	r3, [pc, #28]	; (8005034 <vTaskPlaceOnEventList+0x44>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3318      	adds	r3, #24
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fe fdaf 	bl	8003b82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005024:	2101      	movs	r1, #1
 8005026:	6838      	ldr	r0, [r7, #0]
 8005028:	f000 fa8c 	bl	8005544 <prvAddCurrentTaskToDelayedList>
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000750 	.word	0x20000750

08005038 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10a      	bne.n	8005060 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	617b      	str	r3, [r7, #20]
}
 800505c:	bf00      	nop
 800505e:	e7fe      	b.n	800505e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005060:	4b0a      	ldr	r3, [pc, #40]	; (800508c <vTaskPlaceOnEventListRestricted+0x54>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3318      	adds	r3, #24
 8005066:	4619      	mov	r1, r3
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7fe fd66 	bl	8003b3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005074:	f04f 33ff 	mov.w	r3, #4294967295
 8005078:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	68b8      	ldr	r0, [r7, #8]
 800507e:	f000 fa61 	bl	8005544 <prvAddCurrentTaskToDelayedList>
	}
 8005082:	bf00      	nop
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20000750 	.word	0x20000750

08005090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	60fb      	str	r3, [r7, #12]
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	3318      	adds	r3, #24
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe fd97 	bl	8003bf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050c6:	4b1e      	ldr	r3, [pc, #120]	; (8005140 <xTaskRemoveFromEventList+0xb0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d11d      	bne.n	800510a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	3304      	adds	r3, #4
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe fd8e 	bl	8003bf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <xTaskRemoveFromEventList+0xb4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d903      	bls.n	80050ec <xTaskRemoveFromEventList+0x5c>
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	4a16      	ldr	r2, [pc, #88]	; (8005144 <xTaskRemoveFromEventList+0xb4>)
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <xTaskRemoveFromEventList+0xb8>)
 80050fa:	441a      	add	r2, r3
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	3304      	adds	r3, #4
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f7fe fd19 	bl	8003b3a <vListInsertEnd>
 8005108:	e005      	b.n	8005116 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3318      	adds	r3, #24
 800510e:	4619      	mov	r1, r3
 8005110:	480e      	ldr	r0, [pc, #56]	; (800514c <xTaskRemoveFromEventList+0xbc>)
 8005112:	f7fe fd12 	bl	8003b3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <xTaskRemoveFromEventList+0xc0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	429a      	cmp	r2, r3
 8005122:	d905      	bls.n	8005130 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005124:	2301      	movs	r3, #1
 8005126:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005128:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <xTaskRemoveFromEventList+0xc4>)
 800512a:	2201      	movs	r2, #1
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e001      	b.n	8005134 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005134:	697b      	ldr	r3, [r7, #20]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000c4c 	.word	0x20000c4c
 8005144:	20000c2c 	.word	0x20000c2c
 8005148:	20000754 	.word	0x20000754
 800514c:	20000be4 	.word	0x20000be4
 8005150:	20000750 	.word	0x20000750
 8005154:	20000c38 	.word	0x20000c38

08005158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <vTaskInternalSetTimeOutState+0x24>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <vTaskInternalSetTimeOutState+0x28>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	605a      	str	r2, [r3, #4]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	20000c3c 	.word	0x20000c3c
 8005180:	20000c28 	.word	0x20000c28

08005184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	613b      	str	r3, [r7, #16]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	60fb      	str	r3, [r7, #12]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80051c6:	f000 fe8d 	bl	8005ee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051ca:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <xTaskCheckForTimeOut+0xbc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d102      	bne.n	80051ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	e023      	b.n	8005232 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b15      	ldr	r3, [pc, #84]	; (8005244 <xTaskCheckForTimeOut+0xc0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d007      	beq.n	8005206 <xTaskCheckForTimeOut+0x82>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d302      	bcc.n	8005206 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005200:	2301      	movs	r3, #1
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	e015      	b.n	8005232 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	429a      	cmp	r2, r3
 800520e:	d20b      	bcs.n	8005228 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff ff9b 	bl	8005158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	e004      	b.n	8005232 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800522e:	2301      	movs	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005232:	f000 fe87 	bl	8005f44 <vPortExitCritical>

	return xReturn;
 8005236:	69fb      	ldr	r3, [r7, #28]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000c28 	.word	0x20000c28
 8005244:	20000c3c 	.word	0x20000c3c

08005248 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800524c:	4b03      	ldr	r3, [pc, #12]	; (800525c <vTaskMissedYield+0x14>)
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]
}
 8005252:	bf00      	nop
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	20000c38 	.word	0x20000c38

08005260 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005268:	f000 f852 	bl	8005310 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <prvIdleTask+0x28>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d9f9      	bls.n	8005268 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <prvIdleTask+0x2c>)
 8005276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005284:	e7f0      	b.n	8005268 <prvIdleTask+0x8>
 8005286:	bf00      	nop
 8005288:	20000754 	.word	0x20000754
 800528c:	e000ed04 	.word	0xe000ed04

08005290 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005296:	2300      	movs	r3, #0
 8005298:	607b      	str	r3, [r7, #4]
 800529a:	e00c      	b.n	80052b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <prvInitialiseTaskLists+0x60>)
 80052a8:	4413      	add	r3, r2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe fc18 	bl	8003ae0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3301      	adds	r3, #1
 80052b4:	607b      	str	r3, [r7, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b37      	cmp	r3, #55	; 0x37
 80052ba:	d9ef      	bls.n	800529c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052bc:	480d      	ldr	r0, [pc, #52]	; (80052f4 <prvInitialiseTaskLists+0x64>)
 80052be:	f7fe fc0f 	bl	8003ae0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052c2:	480d      	ldr	r0, [pc, #52]	; (80052f8 <prvInitialiseTaskLists+0x68>)
 80052c4:	f7fe fc0c 	bl	8003ae0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052c8:	480c      	ldr	r0, [pc, #48]	; (80052fc <prvInitialiseTaskLists+0x6c>)
 80052ca:	f7fe fc09 	bl	8003ae0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052ce:	480c      	ldr	r0, [pc, #48]	; (8005300 <prvInitialiseTaskLists+0x70>)
 80052d0:	f7fe fc06 	bl	8003ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052d4:	480b      	ldr	r0, [pc, #44]	; (8005304 <prvInitialiseTaskLists+0x74>)
 80052d6:	f7fe fc03 	bl	8003ae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <prvInitialiseTaskLists+0x78>)
 80052dc:	4a05      	ldr	r2, [pc, #20]	; (80052f4 <prvInitialiseTaskLists+0x64>)
 80052de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052e0:	4b0a      	ldr	r3, [pc, #40]	; (800530c <prvInitialiseTaskLists+0x7c>)
 80052e2:	4a05      	ldr	r2, [pc, #20]	; (80052f8 <prvInitialiseTaskLists+0x68>)
 80052e4:	601a      	str	r2, [r3, #0]
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000754 	.word	0x20000754
 80052f4:	20000bb4 	.word	0x20000bb4
 80052f8:	20000bc8 	.word	0x20000bc8
 80052fc:	20000be4 	.word	0x20000be4
 8005300:	20000bf8 	.word	0x20000bf8
 8005304:	20000c10 	.word	0x20000c10
 8005308:	20000bdc 	.word	0x20000bdc
 800530c:	20000be0 	.word	0x20000be0

08005310 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005316:	e019      	b.n	800534c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005318:	f000 fde4 	bl	8005ee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800531c:	4b10      	ldr	r3, [pc, #64]	; (8005360 <prvCheckTasksWaitingTermination+0x50>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4618      	mov	r0, r3
 800532a:	f7fe fc63 	bl	8003bf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800532e:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <prvCheckTasksWaitingTermination+0x54>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3b01      	subs	r3, #1
 8005334:	4a0b      	ldr	r2, [pc, #44]	; (8005364 <prvCheckTasksWaitingTermination+0x54>)
 8005336:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <prvCheckTasksWaitingTermination+0x58>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3b01      	subs	r3, #1
 800533e:	4a0a      	ldr	r2, [pc, #40]	; (8005368 <prvCheckTasksWaitingTermination+0x58>)
 8005340:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005342:	f000 fdff 	bl	8005f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f810 	bl	800536c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <prvCheckTasksWaitingTermination+0x58>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e1      	bne.n	8005318 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000bf8 	.word	0x20000bf8
 8005364:	20000c24 	.word	0x20000c24
 8005368:	20000c0c 	.word	0x20000c0c

0800536c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800537a:	2b00      	cmp	r3, #0
 800537c:	d108      	bne.n	8005390 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	4618      	mov	r0, r3
 8005384:	f000 ff9c 	bl	80062c0 <vPortFree>
				vPortFree( pxTCB );
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 ff99 	bl	80062c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800538e:	e018      	b.n	80053c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005396:	2b01      	cmp	r3, #1
 8005398:	d103      	bne.n	80053a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 ff90 	bl	80062c0 <vPortFree>
	}
 80053a0:	e00f      	b.n	80053c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d00a      	beq.n	80053c2 <prvDeleteTCB+0x56>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60fb      	str	r3, [r7, #12]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <prvDeleteTCB+0x54>
	}
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d2:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <prvResetNextTaskUnblockTime+0x38>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <prvResetNextTaskUnblockTime+0x3c>)
 80053de:	f04f 32ff 	mov.w	r2, #4294967295
 80053e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053e4:	e008      	b.n	80053f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e6:	4b07      	ldr	r3, [pc, #28]	; (8005404 <prvResetNextTaskUnblockTime+0x38>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4a04      	ldr	r2, [pc, #16]	; (8005408 <prvResetNextTaskUnblockTime+0x3c>)
 80053f6:	6013      	str	r3, [r2, #0]
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	20000bdc 	.word	0x20000bdc
 8005408:	20000c44 	.word	0x20000c44

0800540c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <xTaskGetCurrentTaskHandle+0x1c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005418:	687b      	ldr	r3, [r7, #4]
	}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20000750 	.word	0x20000750

0800542c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005432:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <xTaskGetSchedulerState+0x34>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d102      	bne.n	8005440 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800543a:	2301      	movs	r3, #1
 800543c:	607b      	str	r3, [r7, #4]
 800543e:	e008      	b.n	8005452 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005440:	4b08      	ldr	r3, [pc, #32]	; (8005464 <xTaskGetSchedulerState+0x38>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d102      	bne.n	800544e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005448:	2302      	movs	r3, #2
 800544a:	607b      	str	r3, [r7, #4]
 800544c:	e001      	b.n	8005452 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800544e:	2300      	movs	r3, #0
 8005450:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005452:	687b      	ldr	r3, [r7, #4]
	}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	20000c30 	.word	0x20000c30
 8005464:	20000c4c 	.word	0x20000c4c

08005468 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d056      	beq.n	800552c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <xTaskPriorityDisinherit+0xd0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	429a      	cmp	r2, r3
 8005486:	d00a      	beq.n	800549e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	60fb      	str	r3, [r7, #12]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	60bb      	str	r3, [r7, #8]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d02c      	beq.n	800552c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d128      	bne.n	800552c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	3304      	adds	r3, #4
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fe fb88 	bl	8003bf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fc:	4b0f      	ldr	r3, [pc, #60]	; (800553c <xTaskPriorityDisinherit+0xd4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d903      	bls.n	800550c <xTaskPriorityDisinherit+0xa4>
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	4a0c      	ldr	r2, [pc, #48]	; (800553c <xTaskPriorityDisinherit+0xd4>)
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4a09      	ldr	r2, [pc, #36]	; (8005540 <xTaskPriorityDisinherit+0xd8>)
 800551a:	441a      	add	r2, r3
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f7fe fb09 	bl	8003b3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005528:	2301      	movs	r3, #1
 800552a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800552c:	697b      	ldr	r3, [r7, #20]
	}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000750 	.word	0x20000750
 800553c:	20000c2c 	.word	0x20000c2c
 8005540:	20000754 	.word	0x20000754

08005544 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800554e:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005554:	4b20      	ldr	r3, [pc, #128]	; (80055d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3304      	adds	r3, #4
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fb4a 	bl	8003bf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d10a      	bne.n	800557e <prvAddCurrentTaskToDelayedList+0x3a>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d007      	beq.n	800557e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800556e:	4b1a      	ldr	r3, [pc, #104]	; (80055d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	4819      	ldr	r0, [pc, #100]	; (80055dc <prvAddCurrentTaskToDelayedList+0x98>)
 8005578:	f7fe fadf 	bl	8003b3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800557c:	e026      	b.n	80055cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4413      	add	r3, r2
 8005584:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	429a      	cmp	r2, r3
 8005594:	d209      	bcs.n	80055aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005596:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f7fe faed 	bl	8003b82 <vListInsert>
}
 80055a8:	e010      	b.n	80055cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055aa:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f7fe fae3 	bl	8003b82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d202      	bcs.n	80055cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055c6:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6013      	str	r3, [r2, #0]
}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000c28 	.word	0x20000c28
 80055d8:	20000750 	.word	0x20000750
 80055dc:	20000c10 	.word	0x20000c10
 80055e0:	20000be0 	.word	0x20000be0
 80055e4:	20000bdc 	.word	0x20000bdc
 80055e8:	20000c44 	.word	0x20000c44

080055ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	; 0x28
 80055f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80055f6:	f000 fb07 	bl	8005c08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80055fa:	4b1c      	ldr	r3, [pc, #112]	; (800566c <xTimerCreateTimerTask+0x80>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d021      	beq.n	8005646 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800560a:	1d3a      	adds	r2, r7, #4
 800560c:	f107 0108 	add.w	r1, r7, #8
 8005610:	f107 030c 	add.w	r3, r7, #12
 8005614:	4618      	mov	r0, r3
 8005616:	f7fe fa49 	bl	8003aac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	9202      	str	r2, [sp, #8]
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	2302      	movs	r3, #2
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	2300      	movs	r3, #0
 800562a:	460a      	mov	r2, r1
 800562c:	4910      	ldr	r1, [pc, #64]	; (8005670 <xTimerCreateTimerTask+0x84>)
 800562e:	4811      	ldr	r0, [pc, #68]	; (8005674 <xTimerCreateTimerTask+0x88>)
 8005630:	f7fe fff6 	bl	8004620 <xTaskCreateStatic>
 8005634:	4603      	mov	r3, r0
 8005636:	4a10      	ldr	r2, [pc, #64]	; (8005678 <xTimerCreateTimerTask+0x8c>)
 8005638:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800563a:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <xTimerCreateTimerTask+0x8c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005642:	2301      	movs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	613b      	str	r3, [r7, #16]
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005662:	697b      	ldr	r3, [r7, #20]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000c80 	.word	0x20000c80
 8005670:	08006f64 	.word	0x08006f64
 8005674:	080057b1 	.word	0x080057b1
 8005678:	20000c84 	.word	0x20000c84

0800567c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800568a:	2300      	movs	r3, #0
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	623b      	str	r3, [r7, #32]
}
 80056a6:	bf00      	nop
 80056a8:	e7fe      	b.n	80056a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80056aa:	4b1a      	ldr	r3, [pc, #104]	; (8005714 <xTimerGenericCommand+0x98>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d02a      	beq.n	8005708 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b05      	cmp	r3, #5
 80056c2:	dc18      	bgt.n	80056f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056c4:	f7ff feb2 	bl	800542c <xTaskGetSchedulerState>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d109      	bne.n	80056e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056ce:	4b11      	ldr	r3, [pc, #68]	; (8005714 <xTimerGenericCommand+0x98>)
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	f107 0110 	add.w	r1, r7, #16
 80056d6:	2300      	movs	r3, #0
 80056d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056da:	f7fe fbb9 	bl	8003e50 <xQueueGenericSend>
 80056de:	6278      	str	r0, [r7, #36]	; 0x24
 80056e0:	e012      	b.n	8005708 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056e2:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <xTimerGenericCommand+0x98>)
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	f107 0110 	add.w	r1, r7, #16
 80056ea:	2300      	movs	r3, #0
 80056ec:	2200      	movs	r2, #0
 80056ee:	f7fe fbaf 	bl	8003e50 <xQueueGenericSend>
 80056f2:	6278      	str	r0, [r7, #36]	; 0x24
 80056f4:	e008      	b.n	8005708 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80056f6:	4b07      	ldr	r3, [pc, #28]	; (8005714 <xTimerGenericCommand+0x98>)
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	f107 0110 	add.w	r1, r7, #16
 80056fe:	2300      	movs	r3, #0
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	f7fe fca3 	bl	800404c <xQueueGenericSendFromISR>
 8005706:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800570a:	4618      	mov	r0, r3
 800570c:	3728      	adds	r7, #40	; 0x28
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000c80 	.word	0x20000c80

08005718 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af02      	add	r7, sp, #8
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005722:	4b22      	ldr	r3, [pc, #136]	; (80057ac <prvProcessExpiredTimer+0x94>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	3304      	adds	r3, #4
 8005730:	4618      	mov	r0, r3
 8005732:	f7fe fa5f 	bl	8003bf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d022      	beq.n	800578a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	18d1      	adds	r1, r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	6978      	ldr	r0, [r7, #20]
 8005752:	f000 f8d1 	bl	80058f8 <prvInsertTimerInActiveList>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01f      	beq.n	800579c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800575c:	2300      	movs	r3, #0
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	2300      	movs	r3, #0
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	2100      	movs	r1, #0
 8005766:	6978      	ldr	r0, [r7, #20]
 8005768:	f7ff ff88 	bl	800567c <xTimerGenericCommand>
 800576c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d113      	bne.n	800579c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	60fb      	str	r3, [r7, #12]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005790:	f023 0301 	bic.w	r3, r3, #1
 8005794:	b2da      	uxtb	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	6978      	ldr	r0, [r7, #20]
 80057a2:	4798      	blx	r3
}
 80057a4:	bf00      	nop
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	20000c78 	.word	0x20000c78

080057b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057b8:	f107 0308 	add.w	r3, r7, #8
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 f857 	bl	8005870 <prvGetNextExpireTime>
 80057c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4619      	mov	r1, r3
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f803 	bl	80057d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80057ce:	f000 f8d5 	bl	800597c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057d2:	e7f1      	b.n	80057b8 <prvTimerTask+0x8>

080057d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80057de:	f7ff fa33 	bl	8004c48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057e2:	f107 0308 	add.w	r3, r7, #8
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f866 	bl	80058b8 <prvSampleTimeNow>
 80057ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d130      	bne.n	8005856 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <prvProcessTimerOrBlockTask+0x3c>
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d806      	bhi.n	8005810 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005802:	f7ff fa2f 	bl	8004c64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005806:	68f9      	ldr	r1, [r7, #12]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ff85 	bl	8005718 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800580e:	e024      	b.n	800585a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d008      	beq.n	8005828 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005816:	4b13      	ldr	r3, [pc, #76]	; (8005864 <prvProcessTimerOrBlockTask+0x90>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <prvProcessTimerOrBlockTask+0x50>
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <prvProcessTimerOrBlockTask+0x52>
 8005824:	2300      	movs	r3, #0
 8005826:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005828:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <prvProcessTimerOrBlockTask+0x94>)
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	4619      	mov	r1, r3
 8005836:	f7fe febf 	bl	80045b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800583a:	f7ff fa13 	bl	8004c64 <xTaskResumeAll>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <prvProcessTimerOrBlockTask+0x98>)
 8005846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	f3bf 8f6f 	isb	sy
}
 8005854:	e001      	b.n	800585a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005856:	f7ff fa05 	bl	8004c64 <xTaskResumeAll>
}
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000c7c 	.word	0x20000c7c
 8005868:	20000c80 	.word	0x20000c80
 800586c:	e000ed04 	.word	0xe000ed04

08005870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005878:	4b0e      	ldr	r3, [pc, #56]	; (80058b4 <prvGetNextExpireTime+0x44>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <prvGetNextExpireTime+0x16>
 8005882:	2201      	movs	r2, #1
 8005884:	e000      	b.n	8005888 <prvGetNextExpireTime+0x18>
 8005886:	2200      	movs	r2, #0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <prvGetNextExpireTime+0x44>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e001      	b.n	80058a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058a4:	68fb      	ldr	r3, [r7, #12]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	20000c78 	.word	0x20000c78

080058b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80058c0:	f7ff fa6e 	bl	8004da0 <xTaskGetTickCount>
 80058c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <prvSampleTimeNow+0x3c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d205      	bcs.n	80058dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80058d0:	f000 f936 	bl	8005b40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e002      	b.n	80058e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80058e2:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <prvSampleTimeNow+0x3c>)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80058e8:	68fb      	ldr	r3, [r7, #12]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000c88 	.word	0x20000c88

080058f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d812      	bhi.n	8005944 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	1ad2      	subs	r2, r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800592c:	2301      	movs	r3, #1
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	e01b      	b.n	800596a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005932:	4b10      	ldr	r3, [pc, #64]	; (8005974 <prvInsertTimerInActiveList+0x7c>)
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3304      	adds	r3, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f7fe f920 	bl	8003b82 <vListInsert>
 8005942:	e012      	b.n	800596a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d206      	bcs.n	800595a <prvInsertTimerInActiveList+0x62>
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d302      	bcc.n	800595a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005954:	2301      	movs	r3, #1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	e007      	b.n	800596a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800595a:	4b07      	ldr	r3, [pc, #28]	; (8005978 <prvInsertTimerInActiveList+0x80>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3304      	adds	r3, #4
 8005962:	4619      	mov	r1, r3
 8005964:	4610      	mov	r0, r2
 8005966:	f7fe f90c 	bl	8003b82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800596a:	697b      	ldr	r3, [r7, #20]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000c7c 	.word	0x20000c7c
 8005978:	20000c78 	.word	0x20000c78

0800597c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08e      	sub	sp, #56	; 0x38
 8005980:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005982:	e0ca      	b.n	8005b1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	da18      	bge.n	80059bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800598a:	1d3b      	adds	r3, r7, #4
 800598c:	3304      	adds	r3, #4
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10a      	bne.n	80059ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	61fb      	str	r3, [r7, #28]
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059b2:	6850      	ldr	r0, [r2, #4]
 80059b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059b6:	6892      	ldr	r2, [r2, #8]
 80059b8:	4611      	mov	r1, r2
 80059ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f2c0 80aa 	blt.w	8005b18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d004      	beq.n	80059da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	3304      	adds	r3, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe f90d 	bl	8003bf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059da:	463b      	mov	r3, r7
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff ff6b 	bl	80058b8 <prvSampleTimeNow>
 80059e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b09      	cmp	r3, #9
 80059e8:	f200 8097 	bhi.w	8005b1a <prvProcessReceivedCommands+0x19e>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <prvProcessReceivedCommands+0x78>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a1d 	.word	0x08005a1d
 80059f8:	08005a1d 	.word	0x08005a1d
 80059fc:	08005a1d 	.word	0x08005a1d
 8005a00:	08005a91 	.word	0x08005a91
 8005a04:	08005aa5 	.word	0x08005aa5
 8005a08:	08005aef 	.word	0x08005aef
 8005a0c:	08005a1d 	.word	0x08005a1d
 8005a10:	08005a1d 	.word	0x08005a1d
 8005a14:	08005a91 	.word	0x08005a91
 8005a18:	08005aa5 	.word	0x08005aa5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	18d1      	adds	r1, r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a3c:	f7ff ff5c 	bl	80058f8 <prvInsertTimerInActiveList>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d069      	beq.n	8005b1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d05e      	beq.n	8005b1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	441a      	add	r2, r3
 8005a64:	2300      	movs	r3, #0
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a6e:	f7ff fe05 	bl	800567c <xTimerGenericCommand>
 8005a72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d14f      	bne.n	8005b1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	61bb      	str	r3, [r7, #24]
}
 8005a8c:	bf00      	nop
 8005a8e:	e7fe      	b.n	8005a8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005aa2:	e03a      	b.n	8005b1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	617b      	str	r3, [r7, #20]
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	18d1      	adds	r1, r2, r3
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae8:	f7ff ff06 	bl	80058f8 <prvInsertTimerInActiveList>
					break;
 8005aec:	e015      	b.n	8005b1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005afe:	f000 fbdf 	bl	80062c0 <vPortFree>
 8005b02:	e00a      	b.n	8005b1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b16:	e000      	b.n	8005b1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005b18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b1a:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <prvProcessReceivedCommands+0x1c0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	1d39      	adds	r1, r7, #4
 8005b20:	2200      	movs	r2, #0
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fb2e 	bl	8004184 <xQueueReceive>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f47f af2a 	bne.w	8005984 <prvProcessReceivedCommands+0x8>
	}
}
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
 8005b34:	3730      	adds	r7, #48	; 0x30
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000c80 	.word	0x20000c80

08005b40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b46:	e048      	b.n	8005bda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b48:	4b2d      	ldr	r3, [pc, #180]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b52:	4b2b      	ldr	r3, [pc, #172]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe f847 	bl	8003bf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d02e      	beq.n	8005bda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4413      	add	r3, r2
 8005b84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d90e      	bls.n	8005bac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b9a:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	f7fd ffec 	bl	8003b82 <vListInsert>
 8005baa:	e016      	b.n	8005bda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bac:	2300      	movs	r3, #0
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff fd60 	bl	800567c <xTimerGenericCommand>
 8005bbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	603b      	str	r3, [r7, #0]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1b1      	bne.n	8005b48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005be4:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <prvSwitchTimerLists+0xc4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a04      	ldr	r2, [pc, #16]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005bf0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005bf2:	4a04      	ldr	r2, [pc, #16]	; (8005c04 <prvSwitchTimerLists+0xc4>)
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	6013      	str	r3, [r2, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000c78 	.word	0x20000c78
 8005c04:	20000c7c 	.word	0x20000c7c

08005c08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c0e:	f000 f969 	bl	8005ee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d120      	bne.n	8005c5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c1a:	4814      	ldr	r0, [pc, #80]	; (8005c6c <prvCheckForValidListAndQueue+0x64>)
 8005c1c:	f7fd ff60 	bl	8003ae0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c20:	4813      	ldr	r0, [pc, #76]	; (8005c70 <prvCheckForValidListAndQueue+0x68>)
 8005c22:	f7fd ff5d 	bl	8003ae0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c26:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <prvCheckForValidListAndQueue+0x6c>)
 8005c28:	4a10      	ldr	r2, [pc, #64]	; (8005c6c <prvCheckForValidListAndQueue+0x64>)
 8005c2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c2c:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <prvCheckForValidListAndQueue+0x70>)
 8005c2e:	4a10      	ldr	r2, [pc, #64]	; (8005c70 <prvCheckForValidListAndQueue+0x68>)
 8005c30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c32:	2300      	movs	r3, #0
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <prvCheckForValidListAndQueue+0x74>)
 8005c38:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <prvCheckForValidListAndQueue+0x78>)
 8005c3a:	2110      	movs	r1, #16
 8005c3c:	200a      	movs	r0, #10
 8005c3e:	f7fe f86b 	bl	8003d18 <xQueueGenericCreateStatic>
 8005c42:	4603      	mov	r3, r0
 8005c44:	4a08      	ldr	r2, [pc, #32]	; (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	490b      	ldr	r1, [pc, #44]	; (8005c84 <prvCheckForValidListAndQueue+0x7c>)
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fc84 	bl	8004564 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c5c:	f000 f972 	bl	8005f44 <vPortExitCritical>
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20000c80 	.word	0x20000c80
 8005c6c:	20000c50 	.word	0x20000c50
 8005c70:	20000c64 	.word	0x20000c64
 8005c74:	20000c78 	.word	0x20000c78
 8005c78:	20000c7c 	.word	0x20000c7c
 8005c7c:	20000d2c 	.word	0x20000d2c
 8005c80:	20000c8c 	.word	0x20000c8c
 8005c84:	08006f6c 	.word	0x08006f6c

08005c88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3b04      	subs	r3, #4
 8005c98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cb8:	4a0c      	ldr	r2, [pc, #48]	; (8005cec <pxPortInitialiseStack+0x64>)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3b14      	subs	r3, #20
 8005cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3b04      	subs	r3, #4
 8005cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f06f 0202 	mvn.w	r2, #2
 8005cd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3b20      	subs	r3, #32
 8005cdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cde:	68fb      	ldr	r3, [r7, #12]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	08005cf1 	.word	0x08005cf1

08005cf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cfa:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <prvTaskExitError+0x54>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d00a      	beq.n	8005d1a <prvTaskExitError+0x2a>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	60fb      	str	r3, [r7, #12]
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <prvTaskExitError+0x28>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	60bb      	str	r3, [r7, #8]
}
 8005d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d2e:	bf00      	nop
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0fc      	beq.n	8005d30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	2000000c 	.word	0x2000000c
	...

08005d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d50:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <pxCurrentTCBConst2>)
 8005d52:	6819      	ldr	r1, [r3, #0]
 8005d54:	6808      	ldr	r0, [r1, #0]
 8005d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	f380 8809 	msr	PSP, r0
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f04f 0000 	mov.w	r0, #0
 8005d66:	f380 8811 	msr	BASEPRI, r0
 8005d6a:	4770      	bx	lr
 8005d6c:	f3af 8000 	nop.w

08005d70 <pxCurrentTCBConst2>:
 8005d70:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop

08005d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d78:	4808      	ldr	r0, [pc, #32]	; (8005d9c <prvPortStartFirstTask+0x24>)
 8005d7a:	6800      	ldr	r0, [r0, #0]
 8005d7c:	6800      	ldr	r0, [r0, #0]
 8005d7e:	f380 8808 	msr	MSP, r0
 8005d82:	f04f 0000 	mov.w	r0, #0
 8005d86:	f380 8814 	msr	CONTROL, r0
 8005d8a:	b662      	cpsie	i
 8005d8c:	b661      	cpsie	f
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	df00      	svc	0
 8005d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d9a:	bf00      	nop
 8005d9c:	e000ed08 	.word	0xe000ed08

08005da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005da6:	4b46      	ldr	r3, [pc, #280]	; (8005ec0 <xPortStartScheduler+0x120>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a46      	ldr	r2, [pc, #280]	; (8005ec4 <xPortStartScheduler+0x124>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10a      	bne.n	8005dc6 <xPortStartScheduler+0x26>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	613b      	str	r3, [r7, #16]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005dc6:	4b3e      	ldr	r3, [pc, #248]	; (8005ec0 <xPortStartScheduler+0x120>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a3f      	ldr	r2, [pc, #252]	; (8005ec8 <xPortStartScheduler+0x128>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10a      	bne.n	8005de6 <xPortStartScheduler+0x46>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	60fb      	str	r3, [r7, #12]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005de6:	4b39      	ldr	r3, [pc, #228]	; (8005ecc <xPortStartScheduler+0x12c>)
 8005de8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	22ff      	movs	r2, #255	; 0xff
 8005df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <xPortStartScheduler+0x130>)
 8005e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e0e:	4b31      	ldr	r3, [pc, #196]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e10:	2207      	movs	r2, #7
 8005e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e14:	e009      	b.n	8005e2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e16:	4b2f      	ldr	r3, [pc, #188]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	4a2d      	ldr	r2, [pc, #180]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b80      	cmp	r3, #128	; 0x80
 8005e34:	d0ef      	beq.n	8005e16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e36:	4b27      	ldr	r3, [pc, #156]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f1c3 0307 	rsb	r3, r3, #7
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d00a      	beq.n	8005e58 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	60bb      	str	r3, [r7, #8]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e58:	4b1e      	ldr	r3, [pc, #120]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e6a:	4a1a      	ldr	r2, [pc, #104]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e76:	4b18      	ldr	r3, [pc, #96]	; (8005ed8 <xPortStartScheduler+0x138>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <xPortStartScheduler+0x138>)
 8005e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <xPortStartScheduler+0x138>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a14      	ldr	r2, [pc, #80]	; (8005ed8 <xPortStartScheduler+0x138>)
 8005e88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e8e:	f000 f8dd 	bl	800604c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e92:	4b12      	ldr	r3, [pc, #72]	; (8005edc <xPortStartScheduler+0x13c>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e98:	f000 f8fc 	bl	8006094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e9c:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <xPortStartScheduler+0x140>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a0f      	ldr	r2, [pc, #60]	; (8005ee0 <xPortStartScheduler+0x140>)
 8005ea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ea8:	f7ff ff66 	bl	8005d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005eac:	f7ff f842 	bl	8004f34 <vTaskSwitchContext>
	prvTaskExitError();
 8005eb0:	f7ff ff1e 	bl	8005cf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	e000ed00 	.word	0xe000ed00
 8005ec4:	410fc271 	.word	0x410fc271
 8005ec8:	410fc270 	.word	0x410fc270
 8005ecc:	e000e400 	.word	0xe000e400
 8005ed0:	20000d7c 	.word	0x20000d7c
 8005ed4:	20000d80 	.word	0x20000d80
 8005ed8:	e000ed20 	.word	0xe000ed20
 8005edc:	2000000c 	.word	0x2000000c
 8005ee0:	e000ef34 	.word	0xe000ef34

08005ee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	607b      	str	r3, [r7, #4]
}
 8005efc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005efe:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <vPortEnterCritical+0x58>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3301      	adds	r3, #1
 8005f04:	4a0d      	ldr	r2, [pc, #52]	; (8005f3c <vPortEnterCritical+0x58>)
 8005f06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <vPortEnterCritical+0x58>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10f      	bne.n	8005f30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <vPortEnterCritical+0x5c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	603b      	str	r3, [r7, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <vPortEnterCritical+0x4a>
	}
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f4a:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <vPortExitCritical+0x50>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <vPortExitCritical+0x24>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	607b      	str	r3, [r7, #4]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <vPortExitCritical+0x50>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	4a09      	ldr	r2, [pc, #36]	; (8005f94 <vPortExitCritical+0x50>)
 8005f70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f72:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <vPortExitCritical+0x50>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d105      	bne.n	8005f86 <vPortExitCritical+0x42>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	f383 8811 	msr	BASEPRI, r3
}
 8005f84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	2000000c 	.word	0x2000000c
	...

08005fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fa0:	f3ef 8009 	mrs	r0, PSP
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	4b15      	ldr	r3, [pc, #84]	; (8006000 <pxCurrentTCBConst>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	f01e 0f10 	tst.w	lr, #16
 8005fb0:	bf08      	it	eq
 8005fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fba:	6010      	str	r0, [r2, #0]
 8005fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fc4:	f380 8811 	msr	BASEPRI, r0
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f7fe ffb0 	bl	8004f34 <vTaskSwitchContext>
 8005fd4:	f04f 0000 	mov.w	r0, #0
 8005fd8:	f380 8811 	msr	BASEPRI, r0
 8005fdc:	bc09      	pop	{r0, r3}
 8005fde:	6819      	ldr	r1, [r3, #0]
 8005fe0:	6808      	ldr	r0, [r1, #0]
 8005fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe6:	f01e 0f10 	tst.w	lr, #16
 8005fea:	bf08      	it	eq
 8005fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ff0:	f380 8809 	msr	PSP, r0
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	f3af 8000 	nop.w

08006000 <pxCurrentTCBConst>:
 8006000:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	607b      	str	r3, [r7, #4]
}
 8006020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006022:	f7fe fecd 	bl	8004dc0 <xTaskIncrementTick>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800602c:	4b06      	ldr	r3, [pc, #24]	; (8006048 <xPortSysTickHandler+0x40>)
 800602e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	2300      	movs	r3, #0
 8006036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	f383 8811 	msr	BASEPRI, r3
}
 800603e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <vPortSetupTimerInterrupt+0x34>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006056:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <vPortSetupTimerInterrupt+0x38>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <vPortSetupTimerInterrupt+0x3c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0a      	ldr	r2, [pc, #40]	; (800608c <vPortSetupTimerInterrupt+0x40>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	099b      	lsrs	r3, r3, #6
 8006068:	4a09      	ldr	r2, [pc, #36]	; (8006090 <vPortSetupTimerInterrupt+0x44>)
 800606a:	3b01      	subs	r3, #1
 800606c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800606e:	4b04      	ldr	r3, [pc, #16]	; (8006080 <vPortSetupTimerInterrupt+0x34>)
 8006070:	2207      	movs	r2, #7
 8006072:	601a      	str	r2, [r3, #0]
}
 8006074:	bf00      	nop
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	e000e010 	.word	0xe000e010
 8006084:	e000e018 	.word	0xe000e018
 8006088:	20000000 	.word	0x20000000
 800608c:	10624dd3 	.word	0x10624dd3
 8006090:	e000e014 	.word	0xe000e014

08006094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060a4 <vPortEnableVFP+0x10>
 8006098:	6801      	ldr	r1, [r0, #0]
 800609a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800609e:	6001      	str	r1, [r0, #0]
 80060a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060a2:	bf00      	nop
 80060a4:	e000ed88 	.word	0xe000ed88

080060a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ae:	f3ef 8305 	mrs	r3, IPSR
 80060b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b0f      	cmp	r3, #15
 80060b8:	d914      	bls.n	80060e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060ba:	4a17      	ldr	r2, [pc, #92]	; (8006118 <vPortValidateInterruptPriority+0x70>)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060c4:	4b15      	ldr	r3, [pc, #84]	; (800611c <vPortValidateInterruptPriority+0x74>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	7afa      	ldrb	r2, [r7, #11]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d20a      	bcs.n	80060e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	607b      	str	r3, [r7, #4]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060e4:	4b0e      	ldr	r3, [pc, #56]	; (8006120 <vPortValidateInterruptPriority+0x78>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060ec:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <vPortValidateInterruptPriority+0x7c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d90a      	bls.n	800610a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	603b      	str	r3, [r7, #0]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <vPortValidateInterruptPriority+0x60>
	}
 800610a:	bf00      	nop
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	e000e3f0 	.word	0xe000e3f0
 800611c:	20000d7c 	.word	0x20000d7c
 8006120:	e000ed0c 	.word	0xe000ed0c
 8006124:	20000d80 	.word	0x20000d80

08006128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	; 0x28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006130:	2300      	movs	r3, #0
 8006132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006134:	f7fe fd88 	bl	8004c48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006138:	4b5b      	ldr	r3, [pc, #364]	; (80062a8 <pvPortMalloc+0x180>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006140:	f000 f920 	bl	8006384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006144:	4b59      	ldr	r3, [pc, #356]	; (80062ac <pvPortMalloc+0x184>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4013      	ands	r3, r2
 800614c:	2b00      	cmp	r3, #0
 800614e:	f040 8093 	bne.w	8006278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01d      	beq.n	8006194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006158:	2208      	movs	r2, #8
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	2b00      	cmp	r3, #0
 8006168:	d014      	beq.n	8006194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f023 0307 	bic.w	r3, r3, #7
 8006170:	3308      	adds	r3, #8
 8006172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <pvPortMalloc+0x6c>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	617b      	str	r3, [r7, #20]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d06e      	beq.n	8006278 <pvPortMalloc+0x150>
 800619a:	4b45      	ldr	r3, [pc, #276]	; (80062b0 <pvPortMalloc+0x188>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d869      	bhi.n	8006278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061a4:	4b43      	ldr	r3, [pc, #268]	; (80062b4 <pvPortMalloc+0x18c>)
 80061a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061a8:	4b42      	ldr	r3, [pc, #264]	; (80062b4 <pvPortMalloc+0x18c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ae:	e004      	b.n	80061ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d903      	bls.n	80061cc <pvPortMalloc+0xa4>
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1f1      	bne.n	80061b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061cc:	4b36      	ldr	r3, [pc, #216]	; (80062a8 <pvPortMalloc+0x180>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d050      	beq.n	8006278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2208      	movs	r2, #8
 80061dc:	4413      	add	r3, r2
 80061de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	1ad2      	subs	r2, r2, r3
 80061f0:	2308      	movs	r3, #8
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d91f      	bls.n	8006238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <pvPortMalloc+0xf8>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	613b      	str	r3, [r7, #16]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006232:	69b8      	ldr	r0, [r7, #24]
 8006234:	f000 f908 	bl	8006448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006238:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <pvPortMalloc+0x188>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <pvPortMalloc+0x188>)
 8006244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006246:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <pvPortMalloc+0x188>)
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4b1b      	ldr	r3, [pc, #108]	; (80062b8 <pvPortMalloc+0x190>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d203      	bcs.n	800625a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006252:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <pvPortMalloc+0x188>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <pvPortMalloc+0x190>)
 8006258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	4b13      	ldr	r3, [pc, #76]	; (80062ac <pvPortMalloc+0x184>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	431a      	orrs	r2, r3
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800626e:	4b13      	ldr	r3, [pc, #76]	; (80062bc <pvPortMalloc+0x194>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3301      	adds	r3, #1
 8006274:	4a11      	ldr	r2, [pc, #68]	; (80062bc <pvPortMalloc+0x194>)
 8006276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006278:	f7fe fcf4 	bl	8004c64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <pvPortMalloc+0x174>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	60fb      	str	r3, [r7, #12]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <pvPortMalloc+0x172>
	return pvReturn;
 800629c:	69fb      	ldr	r3, [r7, #28]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3728      	adds	r7, #40	; 0x28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20001944 	.word	0x20001944
 80062ac:	20001958 	.word	0x20001958
 80062b0:	20001948 	.word	0x20001948
 80062b4:	2000193c 	.word	0x2000193c
 80062b8:	2000194c 	.word	0x2000194c
 80062bc:	20001950 	.word	0x20001950

080062c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d04d      	beq.n	800636e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062d2:	2308      	movs	r3, #8
 80062d4:	425b      	negs	r3, r3
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	4b24      	ldr	r3, [pc, #144]	; (8006378 <vPortFree+0xb8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <vPortFree+0x44>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	60fb      	str	r3, [r7, #12]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <vPortFree+0x62>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	60bb      	str	r3, [r7, #8]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	4b14      	ldr	r3, [pc, #80]	; (8006378 <vPortFree+0xb8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4013      	ands	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01e      	beq.n	800636e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d11a      	bne.n	800636e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <vPortFree+0xb8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	43db      	mvns	r3, r3
 8006342:	401a      	ands	r2, r3
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006348:	f7fe fc7e 	bl	8004c48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <vPortFree+0xbc>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4413      	add	r3, r2
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <vPortFree+0xbc>)
 8006358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800635a:	6938      	ldr	r0, [r7, #16]
 800635c:	f000 f874 	bl	8006448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006360:	4b07      	ldr	r3, [pc, #28]	; (8006380 <vPortFree+0xc0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	4a06      	ldr	r2, [pc, #24]	; (8006380 <vPortFree+0xc0>)
 8006368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800636a:	f7fe fc7b 	bl	8004c64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800636e:	bf00      	nop
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20001958 	.word	0x20001958
 800637c:	20001948 	.word	0x20001948
 8006380:	20001954 	.word	0x20001954

08006384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800638a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800638e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006390:	4b27      	ldr	r3, [pc, #156]	; (8006430 <prvHeapInit+0xac>)
 8006392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00c      	beq.n	80063b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3307      	adds	r3, #7
 80063a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0307 	bic.w	r3, r3, #7
 80063aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	4a1f      	ldr	r2, [pc, #124]	; (8006430 <prvHeapInit+0xac>)
 80063b4:	4413      	add	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063bc:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <prvHeapInit+0xb0>)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063c2:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <prvHeapInit+0xb0>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	4413      	add	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063d0:	2208      	movs	r2, #8
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0307 	bic.w	r3, r3, #7
 80063de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4a15      	ldr	r2, [pc, #84]	; (8006438 <prvHeapInit+0xb4>)
 80063e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063e6:	4b14      	ldr	r3, [pc, #80]	; (8006438 <prvHeapInit+0xb4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063ee:	4b12      	ldr	r3, [pc, #72]	; (8006438 <prvHeapInit+0xb4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	1ad2      	subs	r2, r2, r3
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006404:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <prvHeapInit+0xb4>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	4a0a      	ldr	r2, [pc, #40]	; (800643c <prvHeapInit+0xb8>)
 8006412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a09      	ldr	r2, [pc, #36]	; (8006440 <prvHeapInit+0xbc>)
 800641a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800641c:	4b09      	ldr	r3, [pc, #36]	; (8006444 <prvHeapInit+0xc0>)
 800641e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006422:	601a      	str	r2, [r3, #0]
}
 8006424:	bf00      	nop
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	20000d84 	.word	0x20000d84
 8006434:	2000193c 	.word	0x2000193c
 8006438:	20001944 	.word	0x20001944
 800643c:	2000194c 	.word	0x2000194c
 8006440:	20001948 	.word	0x20001948
 8006444:	20001958 	.word	0x20001958

08006448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006450:	4b28      	ldr	r3, [pc, #160]	; (80064f4 <prvInsertBlockIntoFreeList+0xac>)
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e002      	b.n	800645c <prvInsertBlockIntoFreeList+0x14>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	429a      	cmp	r2, r3
 8006464:	d8f7      	bhi.n	8006456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	4413      	add	r3, r2
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d108      	bne.n	800648a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	441a      	add	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	441a      	add	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d118      	bne.n	80064d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <prvInsertBlockIntoFreeList+0xb0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d00d      	beq.n	80064c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	441a      	add	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e008      	b.n	80064d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064c6:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <prvInsertBlockIntoFreeList+0xb0>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e003      	b.n	80064d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d002      	beq.n	80064e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064e6:	bf00      	nop
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	2000193c 	.word	0x2000193c
 80064f8:	20001944 	.word	0x20001944

080064fc <__errno>:
 80064fc:	4b01      	ldr	r3, [pc, #4]	; (8006504 <__errno+0x8>)
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000010 	.word	0x20000010

08006508 <__libc_init_array>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	4d0d      	ldr	r5, [pc, #52]	; (8006540 <__libc_init_array+0x38>)
 800650c:	4c0d      	ldr	r4, [pc, #52]	; (8006544 <__libc_init_array+0x3c>)
 800650e:	1b64      	subs	r4, r4, r5
 8006510:	10a4      	asrs	r4, r4, #2
 8006512:	2600      	movs	r6, #0
 8006514:	42a6      	cmp	r6, r4
 8006516:	d109      	bne.n	800652c <__libc_init_array+0x24>
 8006518:	4d0b      	ldr	r5, [pc, #44]	; (8006548 <__libc_init_array+0x40>)
 800651a:	4c0c      	ldr	r4, [pc, #48]	; (800654c <__libc_init_array+0x44>)
 800651c:	f000 fcf4 	bl	8006f08 <_init>
 8006520:	1b64      	subs	r4, r4, r5
 8006522:	10a4      	asrs	r4, r4, #2
 8006524:	2600      	movs	r6, #0
 8006526:	42a6      	cmp	r6, r4
 8006528:	d105      	bne.n	8006536 <__libc_init_array+0x2e>
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006530:	4798      	blx	r3
 8006532:	3601      	adds	r6, #1
 8006534:	e7ee      	b.n	8006514 <__libc_init_array+0xc>
 8006536:	f855 3b04 	ldr.w	r3, [r5], #4
 800653a:	4798      	blx	r3
 800653c:	3601      	adds	r6, #1
 800653e:	e7f2      	b.n	8006526 <__libc_init_array+0x1e>
 8006540:	08007094 	.word	0x08007094
 8006544:	08007094 	.word	0x08007094
 8006548:	08007094 	.word	0x08007094
 800654c:	08007098 	.word	0x08007098

08006550 <memcpy>:
 8006550:	440a      	add	r2, r1
 8006552:	4291      	cmp	r1, r2
 8006554:	f100 33ff 	add.w	r3, r0, #4294967295
 8006558:	d100      	bne.n	800655c <memcpy+0xc>
 800655a:	4770      	bx	lr
 800655c:	b510      	push	{r4, lr}
 800655e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006566:	4291      	cmp	r1, r2
 8006568:	d1f9      	bne.n	800655e <memcpy+0xe>
 800656a:	bd10      	pop	{r4, pc}

0800656c <memset>:
 800656c:	4402      	add	r2, r0
 800656e:	4603      	mov	r3, r0
 8006570:	4293      	cmp	r3, r2
 8006572:	d100      	bne.n	8006576 <memset+0xa>
 8006574:	4770      	bx	lr
 8006576:	f803 1b01 	strb.w	r1, [r3], #1
 800657a:	e7f9      	b.n	8006570 <memset+0x4>

0800657c <_puts_r>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	460e      	mov	r6, r1
 8006580:	4605      	mov	r5, r0
 8006582:	b118      	cbz	r0, 800658c <_puts_r+0x10>
 8006584:	6983      	ldr	r3, [r0, #24]
 8006586:	b90b      	cbnz	r3, 800658c <_puts_r+0x10>
 8006588:	f000 fa48 	bl	8006a1c <__sinit>
 800658c:	69ab      	ldr	r3, [r5, #24]
 800658e:	68ac      	ldr	r4, [r5, #8]
 8006590:	b913      	cbnz	r3, 8006598 <_puts_r+0x1c>
 8006592:	4628      	mov	r0, r5
 8006594:	f000 fa42 	bl	8006a1c <__sinit>
 8006598:	4b2c      	ldr	r3, [pc, #176]	; (800664c <_puts_r+0xd0>)
 800659a:	429c      	cmp	r4, r3
 800659c:	d120      	bne.n	80065e0 <_puts_r+0x64>
 800659e:	686c      	ldr	r4, [r5, #4]
 80065a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065a2:	07db      	lsls	r3, r3, #31
 80065a4:	d405      	bmi.n	80065b2 <_puts_r+0x36>
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	0598      	lsls	r0, r3, #22
 80065aa:	d402      	bmi.n	80065b2 <_puts_r+0x36>
 80065ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ae:	f000 fad3 	bl	8006b58 <__retarget_lock_acquire_recursive>
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	0719      	lsls	r1, r3, #28
 80065b6:	d51d      	bpl.n	80065f4 <_puts_r+0x78>
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	b1db      	cbz	r3, 80065f4 <_puts_r+0x78>
 80065bc:	3e01      	subs	r6, #1
 80065be:	68a3      	ldr	r3, [r4, #8]
 80065c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065c4:	3b01      	subs	r3, #1
 80065c6:	60a3      	str	r3, [r4, #8]
 80065c8:	bb39      	cbnz	r1, 800661a <_puts_r+0x9e>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	da38      	bge.n	8006640 <_puts_r+0xc4>
 80065ce:	4622      	mov	r2, r4
 80065d0:	210a      	movs	r1, #10
 80065d2:	4628      	mov	r0, r5
 80065d4:	f000 f848 	bl	8006668 <__swbuf_r>
 80065d8:	3001      	adds	r0, #1
 80065da:	d011      	beq.n	8006600 <_puts_r+0x84>
 80065dc:	250a      	movs	r5, #10
 80065de:	e011      	b.n	8006604 <_puts_r+0x88>
 80065e0:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <_puts_r+0xd4>)
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d101      	bne.n	80065ea <_puts_r+0x6e>
 80065e6:	68ac      	ldr	r4, [r5, #8]
 80065e8:	e7da      	b.n	80065a0 <_puts_r+0x24>
 80065ea:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <_puts_r+0xd8>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	bf08      	it	eq
 80065f0:	68ec      	ldreq	r4, [r5, #12]
 80065f2:	e7d5      	b.n	80065a0 <_puts_r+0x24>
 80065f4:	4621      	mov	r1, r4
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 f888 	bl	800670c <__swsetup_r>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d0dd      	beq.n	80065bc <_puts_r+0x40>
 8006600:	f04f 35ff 	mov.w	r5, #4294967295
 8006604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006606:	07da      	lsls	r2, r3, #31
 8006608:	d405      	bmi.n	8006616 <_puts_r+0x9a>
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	059b      	lsls	r3, r3, #22
 800660e:	d402      	bmi.n	8006616 <_puts_r+0x9a>
 8006610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006612:	f000 faa2 	bl	8006b5a <__retarget_lock_release_recursive>
 8006616:	4628      	mov	r0, r5
 8006618:	bd70      	pop	{r4, r5, r6, pc}
 800661a:	2b00      	cmp	r3, #0
 800661c:	da04      	bge.n	8006628 <_puts_r+0xac>
 800661e:	69a2      	ldr	r2, [r4, #24]
 8006620:	429a      	cmp	r2, r3
 8006622:	dc06      	bgt.n	8006632 <_puts_r+0xb6>
 8006624:	290a      	cmp	r1, #10
 8006626:	d004      	beq.n	8006632 <_puts_r+0xb6>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	6022      	str	r2, [r4, #0]
 800662e:	7019      	strb	r1, [r3, #0]
 8006630:	e7c5      	b.n	80065be <_puts_r+0x42>
 8006632:	4622      	mov	r2, r4
 8006634:	4628      	mov	r0, r5
 8006636:	f000 f817 	bl	8006668 <__swbuf_r>
 800663a:	3001      	adds	r0, #1
 800663c:	d1bf      	bne.n	80065be <_puts_r+0x42>
 800663e:	e7df      	b.n	8006600 <_puts_r+0x84>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	250a      	movs	r5, #10
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	6022      	str	r2, [r4, #0]
 8006648:	701d      	strb	r5, [r3, #0]
 800664a:	e7db      	b.n	8006604 <_puts_r+0x88>
 800664c:	0800704c 	.word	0x0800704c
 8006650:	0800706c 	.word	0x0800706c
 8006654:	0800702c 	.word	0x0800702c

08006658 <puts>:
 8006658:	4b02      	ldr	r3, [pc, #8]	; (8006664 <puts+0xc>)
 800665a:	4601      	mov	r1, r0
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	f7ff bf8d 	b.w	800657c <_puts_r>
 8006662:	bf00      	nop
 8006664:	20000010 	.word	0x20000010

08006668 <__swbuf_r>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	460e      	mov	r6, r1
 800666c:	4614      	mov	r4, r2
 800666e:	4605      	mov	r5, r0
 8006670:	b118      	cbz	r0, 800667a <__swbuf_r+0x12>
 8006672:	6983      	ldr	r3, [r0, #24]
 8006674:	b90b      	cbnz	r3, 800667a <__swbuf_r+0x12>
 8006676:	f000 f9d1 	bl	8006a1c <__sinit>
 800667a:	4b21      	ldr	r3, [pc, #132]	; (8006700 <__swbuf_r+0x98>)
 800667c:	429c      	cmp	r4, r3
 800667e:	d12b      	bne.n	80066d8 <__swbuf_r+0x70>
 8006680:	686c      	ldr	r4, [r5, #4]
 8006682:	69a3      	ldr	r3, [r4, #24]
 8006684:	60a3      	str	r3, [r4, #8]
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	071a      	lsls	r2, r3, #28
 800668a:	d52f      	bpl.n	80066ec <__swbuf_r+0x84>
 800668c:	6923      	ldr	r3, [r4, #16]
 800668e:	b36b      	cbz	r3, 80066ec <__swbuf_r+0x84>
 8006690:	6923      	ldr	r3, [r4, #16]
 8006692:	6820      	ldr	r0, [r4, #0]
 8006694:	1ac0      	subs	r0, r0, r3
 8006696:	6963      	ldr	r3, [r4, #20]
 8006698:	b2f6      	uxtb	r6, r6
 800669a:	4283      	cmp	r3, r0
 800669c:	4637      	mov	r7, r6
 800669e:	dc04      	bgt.n	80066aa <__swbuf_r+0x42>
 80066a0:	4621      	mov	r1, r4
 80066a2:	4628      	mov	r0, r5
 80066a4:	f000 f926 	bl	80068f4 <_fflush_r>
 80066a8:	bb30      	cbnz	r0, 80066f8 <__swbuf_r+0x90>
 80066aa:	68a3      	ldr	r3, [r4, #8]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	60a3      	str	r3, [r4, #8]
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	6022      	str	r2, [r4, #0]
 80066b6:	701e      	strb	r6, [r3, #0]
 80066b8:	6963      	ldr	r3, [r4, #20]
 80066ba:	3001      	adds	r0, #1
 80066bc:	4283      	cmp	r3, r0
 80066be:	d004      	beq.n	80066ca <__swbuf_r+0x62>
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	07db      	lsls	r3, r3, #31
 80066c4:	d506      	bpl.n	80066d4 <__swbuf_r+0x6c>
 80066c6:	2e0a      	cmp	r6, #10
 80066c8:	d104      	bne.n	80066d4 <__swbuf_r+0x6c>
 80066ca:	4621      	mov	r1, r4
 80066cc:	4628      	mov	r0, r5
 80066ce:	f000 f911 	bl	80068f4 <_fflush_r>
 80066d2:	b988      	cbnz	r0, 80066f8 <__swbuf_r+0x90>
 80066d4:	4638      	mov	r0, r7
 80066d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d8:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <__swbuf_r+0x9c>)
 80066da:	429c      	cmp	r4, r3
 80066dc:	d101      	bne.n	80066e2 <__swbuf_r+0x7a>
 80066de:	68ac      	ldr	r4, [r5, #8]
 80066e0:	e7cf      	b.n	8006682 <__swbuf_r+0x1a>
 80066e2:	4b09      	ldr	r3, [pc, #36]	; (8006708 <__swbuf_r+0xa0>)
 80066e4:	429c      	cmp	r4, r3
 80066e6:	bf08      	it	eq
 80066e8:	68ec      	ldreq	r4, [r5, #12]
 80066ea:	e7ca      	b.n	8006682 <__swbuf_r+0x1a>
 80066ec:	4621      	mov	r1, r4
 80066ee:	4628      	mov	r0, r5
 80066f0:	f000 f80c 	bl	800670c <__swsetup_r>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d0cb      	beq.n	8006690 <__swbuf_r+0x28>
 80066f8:	f04f 37ff 	mov.w	r7, #4294967295
 80066fc:	e7ea      	b.n	80066d4 <__swbuf_r+0x6c>
 80066fe:	bf00      	nop
 8006700:	0800704c 	.word	0x0800704c
 8006704:	0800706c 	.word	0x0800706c
 8006708:	0800702c 	.word	0x0800702c

0800670c <__swsetup_r>:
 800670c:	4b32      	ldr	r3, [pc, #200]	; (80067d8 <__swsetup_r+0xcc>)
 800670e:	b570      	push	{r4, r5, r6, lr}
 8006710:	681d      	ldr	r5, [r3, #0]
 8006712:	4606      	mov	r6, r0
 8006714:	460c      	mov	r4, r1
 8006716:	b125      	cbz	r5, 8006722 <__swsetup_r+0x16>
 8006718:	69ab      	ldr	r3, [r5, #24]
 800671a:	b913      	cbnz	r3, 8006722 <__swsetup_r+0x16>
 800671c:	4628      	mov	r0, r5
 800671e:	f000 f97d 	bl	8006a1c <__sinit>
 8006722:	4b2e      	ldr	r3, [pc, #184]	; (80067dc <__swsetup_r+0xd0>)
 8006724:	429c      	cmp	r4, r3
 8006726:	d10f      	bne.n	8006748 <__swsetup_r+0x3c>
 8006728:	686c      	ldr	r4, [r5, #4]
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006730:	0719      	lsls	r1, r3, #28
 8006732:	d42c      	bmi.n	800678e <__swsetup_r+0x82>
 8006734:	06dd      	lsls	r5, r3, #27
 8006736:	d411      	bmi.n	800675c <__swsetup_r+0x50>
 8006738:	2309      	movs	r3, #9
 800673a:	6033      	str	r3, [r6, #0]
 800673c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	f04f 30ff 	mov.w	r0, #4294967295
 8006746:	e03e      	b.n	80067c6 <__swsetup_r+0xba>
 8006748:	4b25      	ldr	r3, [pc, #148]	; (80067e0 <__swsetup_r+0xd4>)
 800674a:	429c      	cmp	r4, r3
 800674c:	d101      	bne.n	8006752 <__swsetup_r+0x46>
 800674e:	68ac      	ldr	r4, [r5, #8]
 8006750:	e7eb      	b.n	800672a <__swsetup_r+0x1e>
 8006752:	4b24      	ldr	r3, [pc, #144]	; (80067e4 <__swsetup_r+0xd8>)
 8006754:	429c      	cmp	r4, r3
 8006756:	bf08      	it	eq
 8006758:	68ec      	ldreq	r4, [r5, #12]
 800675a:	e7e6      	b.n	800672a <__swsetup_r+0x1e>
 800675c:	0758      	lsls	r0, r3, #29
 800675e:	d512      	bpl.n	8006786 <__swsetup_r+0x7a>
 8006760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006762:	b141      	cbz	r1, 8006776 <__swsetup_r+0x6a>
 8006764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006768:	4299      	cmp	r1, r3
 800676a:	d002      	beq.n	8006772 <__swsetup_r+0x66>
 800676c:	4630      	mov	r0, r6
 800676e:	f000 fa59 	bl	8006c24 <_free_r>
 8006772:	2300      	movs	r3, #0
 8006774:	6363      	str	r3, [r4, #52]	; 0x34
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800677c:	81a3      	strh	r3, [r4, #12]
 800677e:	2300      	movs	r3, #0
 8006780:	6063      	str	r3, [r4, #4]
 8006782:	6923      	ldr	r3, [r4, #16]
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	f043 0308 	orr.w	r3, r3, #8
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	b94b      	cbnz	r3, 80067a6 <__swsetup_r+0x9a>
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800679c:	d003      	beq.n	80067a6 <__swsetup_r+0x9a>
 800679e:	4621      	mov	r1, r4
 80067a0:	4630      	mov	r0, r6
 80067a2:	f000 f9ff 	bl	8006ba4 <__smakebuf_r>
 80067a6:	89a0      	ldrh	r0, [r4, #12]
 80067a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067ac:	f010 0301 	ands.w	r3, r0, #1
 80067b0:	d00a      	beq.n	80067c8 <__swsetup_r+0xbc>
 80067b2:	2300      	movs	r3, #0
 80067b4:	60a3      	str	r3, [r4, #8]
 80067b6:	6963      	ldr	r3, [r4, #20]
 80067b8:	425b      	negs	r3, r3
 80067ba:	61a3      	str	r3, [r4, #24]
 80067bc:	6923      	ldr	r3, [r4, #16]
 80067be:	b943      	cbnz	r3, 80067d2 <__swsetup_r+0xc6>
 80067c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067c4:	d1ba      	bne.n	800673c <__swsetup_r+0x30>
 80067c6:	bd70      	pop	{r4, r5, r6, pc}
 80067c8:	0781      	lsls	r1, r0, #30
 80067ca:	bf58      	it	pl
 80067cc:	6963      	ldrpl	r3, [r4, #20]
 80067ce:	60a3      	str	r3, [r4, #8]
 80067d0:	e7f4      	b.n	80067bc <__swsetup_r+0xb0>
 80067d2:	2000      	movs	r0, #0
 80067d4:	e7f7      	b.n	80067c6 <__swsetup_r+0xba>
 80067d6:	bf00      	nop
 80067d8:	20000010 	.word	0x20000010
 80067dc:	0800704c 	.word	0x0800704c
 80067e0:	0800706c 	.word	0x0800706c
 80067e4:	0800702c 	.word	0x0800702c

080067e8 <__sflush_r>:
 80067e8:	898a      	ldrh	r2, [r1, #12]
 80067ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ee:	4605      	mov	r5, r0
 80067f0:	0710      	lsls	r0, r2, #28
 80067f2:	460c      	mov	r4, r1
 80067f4:	d458      	bmi.n	80068a8 <__sflush_r+0xc0>
 80067f6:	684b      	ldr	r3, [r1, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	dc05      	bgt.n	8006808 <__sflush_r+0x20>
 80067fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dc02      	bgt.n	8006808 <__sflush_r+0x20>
 8006802:	2000      	movs	r0, #0
 8006804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800680a:	2e00      	cmp	r6, #0
 800680c:	d0f9      	beq.n	8006802 <__sflush_r+0x1a>
 800680e:	2300      	movs	r3, #0
 8006810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006814:	682f      	ldr	r7, [r5, #0]
 8006816:	602b      	str	r3, [r5, #0]
 8006818:	d032      	beq.n	8006880 <__sflush_r+0x98>
 800681a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	075a      	lsls	r2, r3, #29
 8006820:	d505      	bpl.n	800682e <__sflush_r+0x46>
 8006822:	6863      	ldr	r3, [r4, #4]
 8006824:	1ac0      	subs	r0, r0, r3
 8006826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006828:	b10b      	cbz	r3, 800682e <__sflush_r+0x46>
 800682a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800682c:	1ac0      	subs	r0, r0, r3
 800682e:	2300      	movs	r3, #0
 8006830:	4602      	mov	r2, r0
 8006832:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006834:	6a21      	ldr	r1, [r4, #32]
 8006836:	4628      	mov	r0, r5
 8006838:	47b0      	blx	r6
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	d106      	bne.n	800684e <__sflush_r+0x66>
 8006840:	6829      	ldr	r1, [r5, #0]
 8006842:	291d      	cmp	r1, #29
 8006844:	d82c      	bhi.n	80068a0 <__sflush_r+0xb8>
 8006846:	4a2a      	ldr	r2, [pc, #168]	; (80068f0 <__sflush_r+0x108>)
 8006848:	40ca      	lsrs	r2, r1
 800684a:	07d6      	lsls	r6, r2, #31
 800684c:	d528      	bpl.n	80068a0 <__sflush_r+0xb8>
 800684e:	2200      	movs	r2, #0
 8006850:	6062      	str	r2, [r4, #4]
 8006852:	04d9      	lsls	r1, r3, #19
 8006854:	6922      	ldr	r2, [r4, #16]
 8006856:	6022      	str	r2, [r4, #0]
 8006858:	d504      	bpl.n	8006864 <__sflush_r+0x7c>
 800685a:	1c42      	adds	r2, r0, #1
 800685c:	d101      	bne.n	8006862 <__sflush_r+0x7a>
 800685e:	682b      	ldr	r3, [r5, #0]
 8006860:	b903      	cbnz	r3, 8006864 <__sflush_r+0x7c>
 8006862:	6560      	str	r0, [r4, #84]	; 0x54
 8006864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006866:	602f      	str	r7, [r5, #0]
 8006868:	2900      	cmp	r1, #0
 800686a:	d0ca      	beq.n	8006802 <__sflush_r+0x1a>
 800686c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006870:	4299      	cmp	r1, r3
 8006872:	d002      	beq.n	800687a <__sflush_r+0x92>
 8006874:	4628      	mov	r0, r5
 8006876:	f000 f9d5 	bl	8006c24 <_free_r>
 800687a:	2000      	movs	r0, #0
 800687c:	6360      	str	r0, [r4, #52]	; 0x34
 800687e:	e7c1      	b.n	8006804 <__sflush_r+0x1c>
 8006880:	6a21      	ldr	r1, [r4, #32]
 8006882:	2301      	movs	r3, #1
 8006884:	4628      	mov	r0, r5
 8006886:	47b0      	blx	r6
 8006888:	1c41      	adds	r1, r0, #1
 800688a:	d1c7      	bne.n	800681c <__sflush_r+0x34>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0c4      	beq.n	800681c <__sflush_r+0x34>
 8006892:	2b1d      	cmp	r3, #29
 8006894:	d001      	beq.n	800689a <__sflush_r+0xb2>
 8006896:	2b16      	cmp	r3, #22
 8006898:	d101      	bne.n	800689e <__sflush_r+0xb6>
 800689a:	602f      	str	r7, [r5, #0]
 800689c:	e7b1      	b.n	8006802 <__sflush_r+0x1a>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a4:	81a3      	strh	r3, [r4, #12]
 80068a6:	e7ad      	b.n	8006804 <__sflush_r+0x1c>
 80068a8:	690f      	ldr	r7, [r1, #16]
 80068aa:	2f00      	cmp	r7, #0
 80068ac:	d0a9      	beq.n	8006802 <__sflush_r+0x1a>
 80068ae:	0793      	lsls	r3, r2, #30
 80068b0:	680e      	ldr	r6, [r1, #0]
 80068b2:	bf08      	it	eq
 80068b4:	694b      	ldreq	r3, [r1, #20]
 80068b6:	600f      	str	r7, [r1, #0]
 80068b8:	bf18      	it	ne
 80068ba:	2300      	movne	r3, #0
 80068bc:	eba6 0807 	sub.w	r8, r6, r7
 80068c0:	608b      	str	r3, [r1, #8]
 80068c2:	f1b8 0f00 	cmp.w	r8, #0
 80068c6:	dd9c      	ble.n	8006802 <__sflush_r+0x1a>
 80068c8:	6a21      	ldr	r1, [r4, #32]
 80068ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068cc:	4643      	mov	r3, r8
 80068ce:	463a      	mov	r2, r7
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b0      	blx	r6
 80068d4:	2800      	cmp	r0, #0
 80068d6:	dc06      	bgt.n	80068e6 <__sflush_r+0xfe>
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295
 80068e4:	e78e      	b.n	8006804 <__sflush_r+0x1c>
 80068e6:	4407      	add	r7, r0
 80068e8:	eba8 0800 	sub.w	r8, r8, r0
 80068ec:	e7e9      	b.n	80068c2 <__sflush_r+0xda>
 80068ee:	bf00      	nop
 80068f0:	20400001 	.word	0x20400001

080068f4 <_fflush_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	690b      	ldr	r3, [r1, #16]
 80068f8:	4605      	mov	r5, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	b913      	cbnz	r3, 8006904 <_fflush_r+0x10>
 80068fe:	2500      	movs	r5, #0
 8006900:	4628      	mov	r0, r5
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	b118      	cbz	r0, 800690e <_fflush_r+0x1a>
 8006906:	6983      	ldr	r3, [r0, #24]
 8006908:	b90b      	cbnz	r3, 800690e <_fflush_r+0x1a>
 800690a:	f000 f887 	bl	8006a1c <__sinit>
 800690e:	4b14      	ldr	r3, [pc, #80]	; (8006960 <_fflush_r+0x6c>)
 8006910:	429c      	cmp	r4, r3
 8006912:	d11b      	bne.n	800694c <_fflush_r+0x58>
 8006914:	686c      	ldr	r4, [r5, #4]
 8006916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0ef      	beq.n	80068fe <_fflush_r+0xa>
 800691e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006920:	07d0      	lsls	r0, r2, #31
 8006922:	d404      	bmi.n	800692e <_fflush_r+0x3a>
 8006924:	0599      	lsls	r1, r3, #22
 8006926:	d402      	bmi.n	800692e <_fflush_r+0x3a>
 8006928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800692a:	f000 f915 	bl	8006b58 <__retarget_lock_acquire_recursive>
 800692e:	4628      	mov	r0, r5
 8006930:	4621      	mov	r1, r4
 8006932:	f7ff ff59 	bl	80067e8 <__sflush_r>
 8006936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006938:	07da      	lsls	r2, r3, #31
 800693a:	4605      	mov	r5, r0
 800693c:	d4e0      	bmi.n	8006900 <_fflush_r+0xc>
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	059b      	lsls	r3, r3, #22
 8006942:	d4dd      	bmi.n	8006900 <_fflush_r+0xc>
 8006944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006946:	f000 f908 	bl	8006b5a <__retarget_lock_release_recursive>
 800694a:	e7d9      	b.n	8006900 <_fflush_r+0xc>
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <_fflush_r+0x70>)
 800694e:	429c      	cmp	r4, r3
 8006950:	d101      	bne.n	8006956 <_fflush_r+0x62>
 8006952:	68ac      	ldr	r4, [r5, #8]
 8006954:	e7df      	b.n	8006916 <_fflush_r+0x22>
 8006956:	4b04      	ldr	r3, [pc, #16]	; (8006968 <_fflush_r+0x74>)
 8006958:	429c      	cmp	r4, r3
 800695a:	bf08      	it	eq
 800695c:	68ec      	ldreq	r4, [r5, #12]
 800695e:	e7da      	b.n	8006916 <_fflush_r+0x22>
 8006960:	0800704c 	.word	0x0800704c
 8006964:	0800706c 	.word	0x0800706c
 8006968:	0800702c 	.word	0x0800702c

0800696c <std>:
 800696c:	2300      	movs	r3, #0
 800696e:	b510      	push	{r4, lr}
 8006970:	4604      	mov	r4, r0
 8006972:	e9c0 3300 	strd	r3, r3, [r0]
 8006976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800697a:	6083      	str	r3, [r0, #8]
 800697c:	8181      	strh	r1, [r0, #12]
 800697e:	6643      	str	r3, [r0, #100]	; 0x64
 8006980:	81c2      	strh	r2, [r0, #14]
 8006982:	6183      	str	r3, [r0, #24]
 8006984:	4619      	mov	r1, r3
 8006986:	2208      	movs	r2, #8
 8006988:	305c      	adds	r0, #92	; 0x5c
 800698a:	f7ff fdef 	bl	800656c <memset>
 800698e:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <std+0x38>)
 8006990:	6263      	str	r3, [r4, #36]	; 0x24
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <std+0x3c>)
 8006994:	62a3      	str	r3, [r4, #40]	; 0x28
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <std+0x40>)
 8006998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800699a:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <std+0x44>)
 800699c:	6224      	str	r4, [r4, #32]
 800699e:	6323      	str	r3, [r4, #48]	; 0x30
 80069a0:	bd10      	pop	{r4, pc}
 80069a2:	bf00      	nop
 80069a4:	08006d99 	.word	0x08006d99
 80069a8:	08006dbb 	.word	0x08006dbb
 80069ac:	08006df3 	.word	0x08006df3
 80069b0:	08006e17 	.word	0x08006e17

080069b4 <_cleanup_r>:
 80069b4:	4901      	ldr	r1, [pc, #4]	; (80069bc <_cleanup_r+0x8>)
 80069b6:	f000 b8af 	b.w	8006b18 <_fwalk_reent>
 80069ba:	bf00      	nop
 80069bc:	080068f5 	.word	0x080068f5

080069c0 <__sfmoreglue>:
 80069c0:	b570      	push	{r4, r5, r6, lr}
 80069c2:	1e4a      	subs	r2, r1, #1
 80069c4:	2568      	movs	r5, #104	; 0x68
 80069c6:	4355      	muls	r5, r2
 80069c8:	460e      	mov	r6, r1
 80069ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069ce:	f000 f979 	bl	8006cc4 <_malloc_r>
 80069d2:	4604      	mov	r4, r0
 80069d4:	b140      	cbz	r0, 80069e8 <__sfmoreglue+0x28>
 80069d6:	2100      	movs	r1, #0
 80069d8:	e9c0 1600 	strd	r1, r6, [r0]
 80069dc:	300c      	adds	r0, #12
 80069de:	60a0      	str	r0, [r4, #8]
 80069e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069e4:	f7ff fdc2 	bl	800656c <memset>
 80069e8:	4620      	mov	r0, r4
 80069ea:	bd70      	pop	{r4, r5, r6, pc}

080069ec <__sfp_lock_acquire>:
 80069ec:	4801      	ldr	r0, [pc, #4]	; (80069f4 <__sfp_lock_acquire+0x8>)
 80069ee:	f000 b8b3 	b.w	8006b58 <__retarget_lock_acquire_recursive>
 80069f2:	bf00      	nop
 80069f4:	20001a8c 	.word	0x20001a8c

080069f8 <__sfp_lock_release>:
 80069f8:	4801      	ldr	r0, [pc, #4]	; (8006a00 <__sfp_lock_release+0x8>)
 80069fa:	f000 b8ae 	b.w	8006b5a <__retarget_lock_release_recursive>
 80069fe:	bf00      	nop
 8006a00:	20001a8c 	.word	0x20001a8c

08006a04 <__sinit_lock_acquire>:
 8006a04:	4801      	ldr	r0, [pc, #4]	; (8006a0c <__sinit_lock_acquire+0x8>)
 8006a06:	f000 b8a7 	b.w	8006b58 <__retarget_lock_acquire_recursive>
 8006a0a:	bf00      	nop
 8006a0c:	20001a87 	.word	0x20001a87

08006a10 <__sinit_lock_release>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__sinit_lock_release+0x8>)
 8006a12:	f000 b8a2 	b.w	8006b5a <__retarget_lock_release_recursive>
 8006a16:	bf00      	nop
 8006a18:	20001a87 	.word	0x20001a87

08006a1c <__sinit>:
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	4604      	mov	r4, r0
 8006a20:	f7ff fff0 	bl	8006a04 <__sinit_lock_acquire>
 8006a24:	69a3      	ldr	r3, [r4, #24]
 8006a26:	b11b      	cbz	r3, 8006a30 <__sinit+0x14>
 8006a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a2c:	f7ff bff0 	b.w	8006a10 <__sinit_lock_release>
 8006a30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a34:	6523      	str	r3, [r4, #80]	; 0x50
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <__sinit+0x68>)
 8006a38:	4a13      	ldr	r2, [pc, #76]	; (8006a88 <__sinit+0x6c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a3e:	42a3      	cmp	r3, r4
 8006a40:	bf04      	itt	eq
 8006a42:	2301      	moveq	r3, #1
 8006a44:	61a3      	streq	r3, [r4, #24]
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 f820 	bl	8006a8c <__sfp>
 8006a4c:	6060      	str	r0, [r4, #4]
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 f81c 	bl	8006a8c <__sfp>
 8006a54:	60a0      	str	r0, [r4, #8]
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 f818 	bl	8006a8c <__sfp>
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	60e0      	str	r0, [r4, #12]
 8006a60:	2104      	movs	r1, #4
 8006a62:	6860      	ldr	r0, [r4, #4]
 8006a64:	f7ff ff82 	bl	800696c <std>
 8006a68:	68a0      	ldr	r0, [r4, #8]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	2109      	movs	r1, #9
 8006a6e:	f7ff ff7d 	bl	800696c <std>
 8006a72:	68e0      	ldr	r0, [r4, #12]
 8006a74:	2202      	movs	r2, #2
 8006a76:	2112      	movs	r1, #18
 8006a78:	f7ff ff78 	bl	800696c <std>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	61a3      	str	r3, [r4, #24]
 8006a80:	e7d2      	b.n	8006a28 <__sinit+0xc>
 8006a82:	bf00      	nop
 8006a84:	08007028 	.word	0x08007028
 8006a88:	080069b5 	.word	0x080069b5

08006a8c <__sfp>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	4607      	mov	r7, r0
 8006a90:	f7ff ffac 	bl	80069ec <__sfp_lock_acquire>
 8006a94:	4b1e      	ldr	r3, [pc, #120]	; (8006b10 <__sfp+0x84>)
 8006a96:	681e      	ldr	r6, [r3, #0]
 8006a98:	69b3      	ldr	r3, [r6, #24]
 8006a9a:	b913      	cbnz	r3, 8006aa2 <__sfp+0x16>
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f7ff ffbd 	bl	8006a1c <__sinit>
 8006aa2:	3648      	adds	r6, #72	; 0x48
 8006aa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	d503      	bpl.n	8006ab4 <__sfp+0x28>
 8006aac:	6833      	ldr	r3, [r6, #0]
 8006aae:	b30b      	cbz	r3, 8006af4 <__sfp+0x68>
 8006ab0:	6836      	ldr	r6, [r6, #0]
 8006ab2:	e7f7      	b.n	8006aa4 <__sfp+0x18>
 8006ab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ab8:	b9d5      	cbnz	r5, 8006af0 <__sfp+0x64>
 8006aba:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <__sfp+0x88>)
 8006abc:	60e3      	str	r3, [r4, #12]
 8006abe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ac2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ac4:	f000 f847 	bl	8006b56 <__retarget_lock_init_recursive>
 8006ac8:	f7ff ff96 	bl	80069f8 <__sfp_lock_release>
 8006acc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ad4:	6025      	str	r5, [r4, #0]
 8006ad6:	61a5      	str	r5, [r4, #24]
 8006ad8:	2208      	movs	r2, #8
 8006ada:	4629      	mov	r1, r5
 8006adc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ae0:	f7ff fd44 	bl	800656c <memset>
 8006ae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006aec:	4620      	mov	r0, r4
 8006aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006af0:	3468      	adds	r4, #104	; 0x68
 8006af2:	e7d9      	b.n	8006aa8 <__sfp+0x1c>
 8006af4:	2104      	movs	r1, #4
 8006af6:	4638      	mov	r0, r7
 8006af8:	f7ff ff62 	bl	80069c0 <__sfmoreglue>
 8006afc:	4604      	mov	r4, r0
 8006afe:	6030      	str	r0, [r6, #0]
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d1d5      	bne.n	8006ab0 <__sfp+0x24>
 8006b04:	f7ff ff78 	bl	80069f8 <__sfp_lock_release>
 8006b08:	230c      	movs	r3, #12
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	e7ee      	b.n	8006aec <__sfp+0x60>
 8006b0e:	bf00      	nop
 8006b10:	08007028 	.word	0x08007028
 8006b14:	ffff0001 	.word	0xffff0001

08006b18 <_fwalk_reent>:
 8006b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	4688      	mov	r8, r1
 8006b20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b24:	2700      	movs	r7, #0
 8006b26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b2a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b2e:	d505      	bpl.n	8006b3c <_fwalk_reent+0x24>
 8006b30:	6824      	ldr	r4, [r4, #0]
 8006b32:	2c00      	cmp	r4, #0
 8006b34:	d1f7      	bne.n	8006b26 <_fwalk_reent+0xe>
 8006b36:	4638      	mov	r0, r7
 8006b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3c:	89ab      	ldrh	r3, [r5, #12]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d907      	bls.n	8006b52 <_fwalk_reent+0x3a>
 8006b42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b46:	3301      	adds	r3, #1
 8006b48:	d003      	beq.n	8006b52 <_fwalk_reent+0x3a>
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	47c0      	blx	r8
 8006b50:	4307      	orrs	r7, r0
 8006b52:	3568      	adds	r5, #104	; 0x68
 8006b54:	e7e9      	b.n	8006b2a <_fwalk_reent+0x12>

08006b56 <__retarget_lock_init_recursive>:
 8006b56:	4770      	bx	lr

08006b58 <__retarget_lock_acquire_recursive>:
 8006b58:	4770      	bx	lr

08006b5a <__retarget_lock_release_recursive>:
 8006b5a:	4770      	bx	lr

08006b5c <__swhatbuf_r>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	460e      	mov	r6, r1
 8006b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b64:	2900      	cmp	r1, #0
 8006b66:	b096      	sub	sp, #88	; 0x58
 8006b68:	4614      	mov	r4, r2
 8006b6a:	461d      	mov	r5, r3
 8006b6c:	da07      	bge.n	8006b7e <__swhatbuf_r+0x22>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	602b      	str	r3, [r5, #0]
 8006b72:	89b3      	ldrh	r3, [r6, #12]
 8006b74:	061a      	lsls	r2, r3, #24
 8006b76:	d410      	bmi.n	8006b9a <__swhatbuf_r+0x3e>
 8006b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b7c:	e00e      	b.n	8006b9c <__swhatbuf_r+0x40>
 8006b7e:	466a      	mov	r2, sp
 8006b80:	f000 f970 	bl	8006e64 <_fstat_r>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	dbf2      	blt.n	8006b6e <__swhatbuf_r+0x12>
 8006b88:	9a01      	ldr	r2, [sp, #4]
 8006b8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b92:	425a      	negs	r2, r3
 8006b94:	415a      	adcs	r2, r3
 8006b96:	602a      	str	r2, [r5, #0]
 8006b98:	e7ee      	b.n	8006b78 <__swhatbuf_r+0x1c>
 8006b9a:	2340      	movs	r3, #64	; 0x40
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	b016      	add	sp, #88	; 0x58
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}

08006ba4 <__smakebuf_r>:
 8006ba4:	898b      	ldrh	r3, [r1, #12]
 8006ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ba8:	079d      	lsls	r5, r3, #30
 8006baa:	4606      	mov	r6, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	d507      	bpl.n	8006bc0 <__smakebuf_r+0x1c>
 8006bb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	6123      	str	r3, [r4, #16]
 8006bb8:	2301      	movs	r3, #1
 8006bba:	6163      	str	r3, [r4, #20]
 8006bbc:	b002      	add	sp, #8
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
 8006bc0:	ab01      	add	r3, sp, #4
 8006bc2:	466a      	mov	r2, sp
 8006bc4:	f7ff ffca 	bl	8006b5c <__swhatbuf_r>
 8006bc8:	9900      	ldr	r1, [sp, #0]
 8006bca:	4605      	mov	r5, r0
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f000 f879 	bl	8006cc4 <_malloc_r>
 8006bd2:	b948      	cbnz	r0, 8006be8 <__smakebuf_r+0x44>
 8006bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd8:	059a      	lsls	r2, r3, #22
 8006bda:	d4ef      	bmi.n	8006bbc <__smakebuf_r+0x18>
 8006bdc:	f023 0303 	bic.w	r3, r3, #3
 8006be0:	f043 0302 	orr.w	r3, r3, #2
 8006be4:	81a3      	strh	r3, [r4, #12]
 8006be6:	e7e3      	b.n	8006bb0 <__smakebuf_r+0xc>
 8006be8:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <__smakebuf_r+0x7c>)
 8006bea:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	6020      	str	r0, [r4, #0]
 8006bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	9b00      	ldr	r3, [sp, #0]
 8006bf8:	6163      	str	r3, [r4, #20]
 8006bfa:	9b01      	ldr	r3, [sp, #4]
 8006bfc:	6120      	str	r0, [r4, #16]
 8006bfe:	b15b      	cbz	r3, 8006c18 <__smakebuf_r+0x74>
 8006c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c04:	4630      	mov	r0, r6
 8006c06:	f000 f93f 	bl	8006e88 <_isatty_r>
 8006c0a:	b128      	cbz	r0, 8006c18 <__smakebuf_r+0x74>
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	f023 0303 	bic.w	r3, r3, #3
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	89a0      	ldrh	r0, [r4, #12]
 8006c1a:	4305      	orrs	r5, r0
 8006c1c:	81a5      	strh	r5, [r4, #12]
 8006c1e:	e7cd      	b.n	8006bbc <__smakebuf_r+0x18>
 8006c20:	080069b5 	.word	0x080069b5

08006c24 <_free_r>:
 8006c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c26:	2900      	cmp	r1, #0
 8006c28:	d048      	beq.n	8006cbc <_free_r+0x98>
 8006c2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c2e:	9001      	str	r0, [sp, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f1a1 0404 	sub.w	r4, r1, #4
 8006c36:	bfb8      	it	lt
 8006c38:	18e4      	addlt	r4, r4, r3
 8006c3a:	f000 f947 	bl	8006ecc <__malloc_lock>
 8006c3e:	4a20      	ldr	r2, [pc, #128]	; (8006cc0 <_free_r+0x9c>)
 8006c40:	9801      	ldr	r0, [sp, #4]
 8006c42:	6813      	ldr	r3, [r2, #0]
 8006c44:	4615      	mov	r5, r2
 8006c46:	b933      	cbnz	r3, 8006c56 <_free_r+0x32>
 8006c48:	6063      	str	r3, [r4, #4]
 8006c4a:	6014      	str	r4, [r2, #0]
 8006c4c:	b003      	add	sp, #12
 8006c4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c52:	f000 b941 	b.w	8006ed8 <__malloc_unlock>
 8006c56:	42a3      	cmp	r3, r4
 8006c58:	d90b      	bls.n	8006c72 <_free_r+0x4e>
 8006c5a:	6821      	ldr	r1, [r4, #0]
 8006c5c:	1862      	adds	r2, r4, r1
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	bf04      	itt	eq
 8006c62:	681a      	ldreq	r2, [r3, #0]
 8006c64:	685b      	ldreq	r3, [r3, #4]
 8006c66:	6063      	str	r3, [r4, #4]
 8006c68:	bf04      	itt	eq
 8006c6a:	1852      	addeq	r2, r2, r1
 8006c6c:	6022      	streq	r2, [r4, #0]
 8006c6e:	602c      	str	r4, [r5, #0]
 8006c70:	e7ec      	b.n	8006c4c <_free_r+0x28>
 8006c72:	461a      	mov	r2, r3
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	b10b      	cbz	r3, 8006c7c <_free_r+0x58>
 8006c78:	42a3      	cmp	r3, r4
 8006c7a:	d9fa      	bls.n	8006c72 <_free_r+0x4e>
 8006c7c:	6811      	ldr	r1, [r2, #0]
 8006c7e:	1855      	adds	r5, r2, r1
 8006c80:	42a5      	cmp	r5, r4
 8006c82:	d10b      	bne.n	8006c9c <_free_r+0x78>
 8006c84:	6824      	ldr	r4, [r4, #0]
 8006c86:	4421      	add	r1, r4
 8006c88:	1854      	adds	r4, r2, r1
 8006c8a:	42a3      	cmp	r3, r4
 8006c8c:	6011      	str	r1, [r2, #0]
 8006c8e:	d1dd      	bne.n	8006c4c <_free_r+0x28>
 8006c90:	681c      	ldr	r4, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	6053      	str	r3, [r2, #4]
 8006c96:	4421      	add	r1, r4
 8006c98:	6011      	str	r1, [r2, #0]
 8006c9a:	e7d7      	b.n	8006c4c <_free_r+0x28>
 8006c9c:	d902      	bls.n	8006ca4 <_free_r+0x80>
 8006c9e:	230c      	movs	r3, #12
 8006ca0:	6003      	str	r3, [r0, #0]
 8006ca2:	e7d3      	b.n	8006c4c <_free_r+0x28>
 8006ca4:	6825      	ldr	r5, [r4, #0]
 8006ca6:	1961      	adds	r1, r4, r5
 8006ca8:	428b      	cmp	r3, r1
 8006caa:	bf04      	itt	eq
 8006cac:	6819      	ldreq	r1, [r3, #0]
 8006cae:	685b      	ldreq	r3, [r3, #4]
 8006cb0:	6063      	str	r3, [r4, #4]
 8006cb2:	bf04      	itt	eq
 8006cb4:	1949      	addeq	r1, r1, r5
 8006cb6:	6021      	streq	r1, [r4, #0]
 8006cb8:	6054      	str	r4, [r2, #4]
 8006cba:	e7c7      	b.n	8006c4c <_free_r+0x28>
 8006cbc:	b003      	add	sp, #12
 8006cbe:	bd30      	pop	{r4, r5, pc}
 8006cc0:	2000195c 	.word	0x2000195c

08006cc4 <_malloc_r>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	1ccd      	adds	r5, r1, #3
 8006cc8:	f025 0503 	bic.w	r5, r5, #3
 8006ccc:	3508      	adds	r5, #8
 8006cce:	2d0c      	cmp	r5, #12
 8006cd0:	bf38      	it	cc
 8006cd2:	250c      	movcc	r5, #12
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	db01      	blt.n	8006cde <_malloc_r+0x1a>
 8006cda:	42a9      	cmp	r1, r5
 8006cdc:	d903      	bls.n	8006ce6 <_malloc_r+0x22>
 8006cde:	230c      	movs	r3, #12
 8006ce0:	6033      	str	r3, [r6, #0]
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce6:	f000 f8f1 	bl	8006ecc <__malloc_lock>
 8006cea:	4921      	ldr	r1, [pc, #132]	; (8006d70 <_malloc_r+0xac>)
 8006cec:	680a      	ldr	r2, [r1, #0]
 8006cee:	4614      	mov	r4, r2
 8006cf0:	b99c      	cbnz	r4, 8006d1a <_malloc_r+0x56>
 8006cf2:	4f20      	ldr	r7, [pc, #128]	; (8006d74 <_malloc_r+0xb0>)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	b923      	cbnz	r3, 8006d02 <_malloc_r+0x3e>
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f000 f83c 	bl	8006d78 <_sbrk_r>
 8006d00:	6038      	str	r0, [r7, #0]
 8006d02:	4629      	mov	r1, r5
 8006d04:	4630      	mov	r0, r6
 8006d06:	f000 f837 	bl	8006d78 <_sbrk_r>
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	d123      	bne.n	8006d56 <_malloc_r+0x92>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	6033      	str	r3, [r6, #0]
 8006d12:	4630      	mov	r0, r6
 8006d14:	f000 f8e0 	bl	8006ed8 <__malloc_unlock>
 8006d18:	e7e3      	b.n	8006ce2 <_malloc_r+0x1e>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	1b5b      	subs	r3, r3, r5
 8006d1e:	d417      	bmi.n	8006d50 <_malloc_r+0x8c>
 8006d20:	2b0b      	cmp	r3, #11
 8006d22:	d903      	bls.n	8006d2c <_malloc_r+0x68>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	441c      	add	r4, r3
 8006d28:	6025      	str	r5, [r4, #0]
 8006d2a:	e004      	b.n	8006d36 <_malloc_r+0x72>
 8006d2c:	6863      	ldr	r3, [r4, #4]
 8006d2e:	42a2      	cmp	r2, r4
 8006d30:	bf0c      	ite	eq
 8006d32:	600b      	streq	r3, [r1, #0]
 8006d34:	6053      	strne	r3, [r2, #4]
 8006d36:	4630      	mov	r0, r6
 8006d38:	f000 f8ce 	bl	8006ed8 <__malloc_unlock>
 8006d3c:	f104 000b 	add.w	r0, r4, #11
 8006d40:	1d23      	adds	r3, r4, #4
 8006d42:	f020 0007 	bic.w	r0, r0, #7
 8006d46:	1ac2      	subs	r2, r0, r3
 8006d48:	d0cc      	beq.n	8006ce4 <_malloc_r+0x20>
 8006d4a:	1a1b      	subs	r3, r3, r0
 8006d4c:	50a3      	str	r3, [r4, r2]
 8006d4e:	e7c9      	b.n	8006ce4 <_malloc_r+0x20>
 8006d50:	4622      	mov	r2, r4
 8006d52:	6864      	ldr	r4, [r4, #4]
 8006d54:	e7cc      	b.n	8006cf0 <_malloc_r+0x2c>
 8006d56:	1cc4      	adds	r4, r0, #3
 8006d58:	f024 0403 	bic.w	r4, r4, #3
 8006d5c:	42a0      	cmp	r0, r4
 8006d5e:	d0e3      	beq.n	8006d28 <_malloc_r+0x64>
 8006d60:	1a21      	subs	r1, r4, r0
 8006d62:	4630      	mov	r0, r6
 8006d64:	f000 f808 	bl	8006d78 <_sbrk_r>
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d1dd      	bne.n	8006d28 <_malloc_r+0x64>
 8006d6c:	e7cf      	b.n	8006d0e <_malloc_r+0x4a>
 8006d6e:	bf00      	nop
 8006d70:	2000195c 	.word	0x2000195c
 8006d74:	20001960 	.word	0x20001960

08006d78 <_sbrk_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d06      	ldr	r5, [pc, #24]	; (8006d94 <_sbrk_r+0x1c>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7f9 fe90 	bl	8000aa8 <_sbrk>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_sbrk_r+0x1a>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_sbrk_r+0x1a>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	20001a90 	.word	0x20001a90

08006d98 <__sread>:
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da0:	f000 f8a0 	bl	8006ee4 <_read_r>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	bfab      	itete	ge
 8006da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006daa:	89a3      	ldrhlt	r3, [r4, #12]
 8006dac:	181b      	addge	r3, r3, r0
 8006dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006db2:	bfac      	ite	ge
 8006db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006db6:	81a3      	strhlt	r3, [r4, #12]
 8006db8:	bd10      	pop	{r4, pc}

08006dba <__swrite>:
 8006dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	461f      	mov	r7, r3
 8006dc0:	898b      	ldrh	r3, [r1, #12]
 8006dc2:	05db      	lsls	r3, r3, #23
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	4616      	mov	r6, r2
 8006dca:	d505      	bpl.n	8006dd8 <__swrite+0x1e>
 8006dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f000 f868 	bl	8006ea8 <_lseek_r>
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006de2:	81a3      	strh	r3, [r4, #12]
 8006de4:	4632      	mov	r2, r6
 8006de6:	463b      	mov	r3, r7
 8006de8:	4628      	mov	r0, r5
 8006dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dee:	f000 b817 	b.w	8006e20 <_write_r>

08006df2 <__sseek>:
 8006df2:	b510      	push	{r4, lr}
 8006df4:	460c      	mov	r4, r1
 8006df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfa:	f000 f855 	bl	8006ea8 <_lseek_r>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	bf15      	itete	ne
 8006e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e0e:	81a3      	strheq	r3, [r4, #12]
 8006e10:	bf18      	it	ne
 8006e12:	81a3      	strhne	r3, [r4, #12]
 8006e14:	bd10      	pop	{r4, pc}

08006e16 <__sclose>:
 8006e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1a:	f000 b813 	b.w	8006e44 <_close_r>
	...

08006e20 <_write_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d07      	ldr	r5, [pc, #28]	; (8006e40 <_write_r+0x20>)
 8006e24:	4604      	mov	r4, r0
 8006e26:	4608      	mov	r0, r1
 8006e28:	4611      	mov	r1, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7f9 fde9 	bl	8000a06 <_write>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_write_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_write_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	20001a90 	.word	0x20001a90

08006e44 <_close_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4d06      	ldr	r5, [pc, #24]	; (8006e60 <_close_r+0x1c>)
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	602b      	str	r3, [r5, #0]
 8006e50:	f7f9 fdf5 	bl	8000a3e <_close>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_close_r+0x1a>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_close_r+0x1a>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	20001a90 	.word	0x20001a90

08006e64 <_fstat_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4d07      	ldr	r5, [pc, #28]	; (8006e84 <_fstat_r+0x20>)
 8006e68:	2300      	movs	r3, #0
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	4611      	mov	r1, r2
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	f7f9 fdf0 	bl	8000a56 <_fstat>
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	d102      	bne.n	8006e80 <_fstat_r+0x1c>
 8006e7a:	682b      	ldr	r3, [r5, #0]
 8006e7c:	b103      	cbz	r3, 8006e80 <_fstat_r+0x1c>
 8006e7e:	6023      	str	r3, [r4, #0]
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
 8006e82:	bf00      	nop
 8006e84:	20001a90 	.word	0x20001a90

08006e88 <_isatty_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d06      	ldr	r5, [pc, #24]	; (8006ea4 <_isatty_r+0x1c>)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4608      	mov	r0, r1
 8006e92:	602b      	str	r3, [r5, #0]
 8006e94:	f7f9 fdef 	bl	8000a76 <_isatty>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d102      	bne.n	8006ea2 <_isatty_r+0x1a>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	b103      	cbz	r3, 8006ea2 <_isatty_r+0x1a>
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	20001a90 	.word	0x20001a90

08006ea8 <_lseek_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4d07      	ldr	r5, [pc, #28]	; (8006ec8 <_lseek_r+0x20>)
 8006eac:	4604      	mov	r4, r0
 8006eae:	4608      	mov	r0, r1
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	602a      	str	r2, [r5, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f7f9 fde8 	bl	8000a8c <_lseek>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_lseek_r+0x1e>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_lseek_r+0x1e>
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	20001a90 	.word	0x20001a90

08006ecc <__malloc_lock>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__malloc_lock+0x8>)
 8006ece:	f7ff be43 	b.w	8006b58 <__retarget_lock_acquire_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	20001a88 	.word	0x20001a88

08006ed8 <__malloc_unlock>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__malloc_unlock+0x8>)
 8006eda:	f7ff be3e 	b.w	8006b5a <__retarget_lock_release_recursive>
 8006ede:	bf00      	nop
 8006ee0:	20001a88 	.word	0x20001a88

08006ee4 <_read_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d07      	ldr	r5, [pc, #28]	; (8006f04 <_read_r+0x20>)
 8006ee8:	4604      	mov	r4, r0
 8006eea:	4608      	mov	r0, r1
 8006eec:	4611      	mov	r1, r2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	602a      	str	r2, [r5, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f7f9 fd6a 	bl	80009cc <_read>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_read_r+0x1e>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_read_r+0x1e>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	20001a90 	.word	0x20001a90

08006f08 <_init>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr

08006f14 <_fini>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr
