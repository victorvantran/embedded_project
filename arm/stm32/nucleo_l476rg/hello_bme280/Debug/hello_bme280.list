
hello_bme280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d63c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  0800d7d0  0800d7d0  0001d7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df84  0800df84  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800df84  0800df84  0001df84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df8c  0800df8c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df8c  0800df8c  0001df8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df90  0800df90  0001df90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800df94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa8  200001e4  0800e178  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c8c  0800e178  00021c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024159  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041f4  00000000  00000000  0004436d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  00048568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001990  00000000  00000000  0004a080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ec6  00000000  00000000  0004ba10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d1e8  00000000  00000000  000758d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001014c4  00000000  00000000  00092abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00193f82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088f8  00000000  00000000  00193fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7b4 	.word	0x0800d7b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800d7b4 	.word	0x0800d7b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <BME280_vInit>:


void BME280_vInit(BME280Handle_t *pxBME280,
		I2C_HandleTypeDef *pxI2CHandle,
		uint8_t uI2CSlaveAddress )
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	71fb      	strb	r3, [r7, #7]
	pxBME280->pxI2CHandle = pxI2CHandle;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	601a      	str	r2, [r3, #0]
	pxBME280->uI2CSlaveAddress = uI2CSlaveAddress;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	79fa      	ldrb	r2, [r7, #7]
 8001004:	711a      	strb	r2, [r3, #4]

	pxBME280->xMeasureRegData = xDefaultMeasureRegData;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3330      	adds	r3, #48	; 0x30
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
	pxBME280->xMeasureRawData = xDefaultMeasureRawData;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3338      	adds	r3, #56	; 0x38
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]

	BME280_vReadCalibrationData(pxBME280);
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 f804 	bl	800102a <BME280_vReadCalibrationData>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <BME280_vReadCalibrationData>:


void BME280_vReadCalibrationData(BME280Handle_t *pxBME280)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b088      	sub	sp, #32
 800102e:	af04      	add	r7, sp, #16
 8001030:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(pxBME280->pxI2CHandle,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6818      	ldr	r0, [r3, #0]
			(uint16_t)(pxBME280->uI2CSlaveAddress << 1),
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	791b      	ldrb	r3, [r3, #4]
 800103a:	b29b      	uxth	r3, r3
	HAL_I2C_Mem_Read(pxBME280->pxI2CHandle,
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	b299      	uxth	r1, r3
			(uint16_t)BME280_CALIBRATE_ADDRESS_A, 1,
			(uint8_t *)&(pxBME280->xCalibrationData), 25,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3308      	adds	r3, #8
	HAL_I2C_Mem_Read(pxBME280->pxI2CHandle,
 8001044:	2232      	movs	r2, #50	; 0x32
 8001046:	9202      	str	r2, [sp, #8]
 8001048:	2219      	movs	r2, #25
 800104a:	9201      	str	r2, [sp, #4]
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2288      	movs	r2, #136	; 0x88
 8001052:	f001 fd0f 	bl	8002a74 <HAL_I2C_Mem_Read>
			50
	);

	BME280CalibrationBRegData xCalibrationBRegData = {0};
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	f8c3 2003 	str.w	r2, [r3, #3]
	HAL_I2C_Mem_Read(pxBME280->pxI2CHandle,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6818      	ldr	r0, [r3, #0]
			(uint16_t)(pxBME280->uI2CSlaveAddress << 1),
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	b29b      	uxth	r3, r3
	HAL_I2C_Mem_Read(pxBME280->pxI2CHandle,
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b299      	uxth	r1, r3
 8001070:	2332      	movs	r3, #50	; 0x32
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2308      	movs	r3, #8
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	22e1      	movs	r2, #225	; 0xe1
 8001082:	f001 fcf7 	bl	8002a74 <HAL_I2C_Mem_Read>
			(uint8_t *)&xCalibrationBRegData, 8,
			50
	);

	/* Realign */
	pxBME280->xCalibrationData.xDigH.usH2 = ((uint16_t)xCalibrationBRegData.uc0xE2 << 8) + ((uint16_t)xCalibrationBRegData.uc0xE1);
 8001086:	7a7b      	ldrb	r3, [r7, #9]
 8001088:	b29b      	uxth	r3, r3
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b29a      	uxth	r2, r3
 800108e:	7a3b      	ldrb	r3, [r7, #8]
 8001090:	b29b      	uxth	r3, r3
 8001092:	4413      	add	r3, r2
 8001094:	b29b      	uxth	r3, r3
 8001096:	b21a      	sxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	845a      	strh	r2, [r3, #34]	; 0x22
	pxBME280->xCalibrationData.xDigH.ucH3 = xCalibrationBRegData.uc0xE3;
 800109c:	7aba      	ldrb	r2, [r7, #10]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pxBME280->xCalibrationData.xDigH.sH4 = ((uint16_t)xCalibrationBRegData.uc0xE4 << 4) + ((uint16_t)(xCalibrationBRegData.uc0xE5 & 0x0F));
 80010a4:	7afb      	ldrb	r3, [r7, #11]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	7b3b      	ldrb	r3, [r7, #12]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	84da      	strh	r2, [r3, #38]	; 0x26
	pxBME280->xCalibrationData.xDigH.sH5 = ((uint16_t)(xCalibrationBRegData.uc0xE6) << 4) + ((uint16_t)((xCalibrationBRegData.uc0xE5 & 0xF0) >> 4));
 80010c0:	7b7b      	ldrb	r3, [r7, #13]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	7b3b      	ldrb	r3, [r7, #12]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4413      	add	r3, r2
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	851a      	strh	r2, [r3, #40]	; 0x28
	pxBME280->xCalibrationData.xDigH.cH6 = ((int8_t)(xCalibrationBRegData.uc0xE7));
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <BME280_vMeasureAllForced>:
}



void BME280_vMeasureAllForced(BME280Handle_t *pxBME280)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	6078      	str	r0, [r7, #4]
	static const uint8_t uCtrlHum 	= 0b00000001;
	static const uint8_t uCtrlMeas	=	0b00100110;

	HAL_I2C_Mem_Write(pxBME280->pxI2CHandle, (uint16_t)(pxBME280->uI2CSlaveAddress << 1), (uint16_t)BME280_CTRL_HUM_ADDRESS, 1, &uCtrlHum, 1, 50);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	791b      	ldrb	r3, [r3, #4]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	b299      	uxth	r1, r3
 8001102:	2332      	movs	r3, #50	; 0x32
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	2301      	movs	r3, #1
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <BME280_vMeasureAllForced+0x54>)
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	22f2      	movs	r2, #242	; 0xf2
 8001112:	f001 fb9b 	bl	800284c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(pxBME280->pxI2CHandle, (uint16_t)(pxBME280->uI2CSlaveAddress << 1), (uint16_t)BME280_CTRL_MEAS_ADDRESS, 1, &uCtrlMeas, 1, 50);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	b29b      	uxth	r3, r3
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	b299      	uxth	r1, r3
 8001124:	2332      	movs	r3, #50	; 0x32
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2301      	movs	r3, #1
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <BME280_vMeasureAllForced+0x58>)
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	22f4      	movs	r2, #244	; 0xf4
 8001134:	f001 fb8a 	bl	800284c <HAL_I2C_Mem_Write>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	0800da45 	.word	0x0800da45
 8001144:	0800da46 	.word	0x0800da46

08001148 <BME280_vReadRawData>:
}



void BME280_vReadRawData(BME280Handle_t *pxBME280)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af04      	add	r7, sp, #16
 800114e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(pxBME280->pxI2CHandle, (uint16_t)(pxBME280->uI2CSlaveAddress << 1), (uint16_t)BME280_MEASURE_DATA_ADDRESS, 1, (uint8_t *)&(pxBME280->xMeasureRegData), 8, 50);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	791b      	ldrb	r3, [r3, #4]
 8001158:	b29b      	uxth	r3, r3
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	b299      	uxth	r1, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3330      	adds	r3, #48	; 0x30
 8001162:	2232      	movs	r2, #50	; 0x32
 8001164:	9202      	str	r2, [sp, #8]
 8001166:	2208      	movs	r2, #8
 8001168:	9201      	str	r2, [sp, #4]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	22f7      	movs	r2, #247	; 0xf7
 8001170:	f001 fc80 	bl	8002a74 <HAL_I2C_Mem_Read>

	pxBME280->xMeasureRawData.ulPressureRawData =
			(pxBME280->xMeasureRegData.xPressureRegData.uMSB << 12) +
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800117a:	031a      	lsls	r2, r3, #12
			(pxBME280->xMeasureRegData.xPressureRegData.uLSB << 4) +
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001182:	011b      	lsls	r3, r3, #4
			(pxBME280->xMeasureRegData.xPressureRegData.uMSB << 12) +
 8001184:	4413      	add	r3, r2
			(pxBME280->xMeasureRegData.xPressureRegData.uXLSB >> 4);
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800118c:	0912      	lsrs	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
			(pxBME280->xMeasureRegData.xPressureRegData.uLSB << 4) +
 8001190:	4413      	add	r3, r2
 8001192:	461a      	mov	r2, r3
	pxBME280->xMeasureRawData.ulPressureRawData =
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	639a      	str	r2, [r3, #56]	; 0x38

	pxBME280->xMeasureRawData.ulTemperatureRawData =
			(pxBME280->xMeasureRegData.xTemperatureRegData.uMSB << 12) +
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800119e:	031a      	lsls	r2, r3, #12
			(pxBME280->xMeasureRegData.xTemperatureRegData.uLSB << 4) +
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011a6:	011b      	lsls	r3, r3, #4
			(pxBME280->xMeasureRegData.xTemperatureRegData.uMSB << 12) +
 80011a8:	4413      	add	r3, r2
			(pxBME280->xMeasureRegData.xTemperatureRegData.uXLSB >> 4);
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 80011b0:	0912      	lsrs	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
			(pxBME280->xMeasureRegData.xTemperatureRegData.uLSB << 4) +
 80011b4:	4413      	add	r3, r2
 80011b6:	461a      	mov	r2, r3
	pxBME280->xMeasureRawData.ulTemperatureRawData =
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	63da      	str	r2, [r3, #60]	; 0x3c

	pxBME280->xMeasureRawData.uHumidityRawData =
			(pxBME280->xMeasureRegData.xHumidityRegData.uMSB << 8) +
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b29a      	uxth	r2, r3
			(pxBME280->xMeasureRegData.xHumidityRegData.uLSB);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80011ce:	b29b      	uxth	r3, r3
			(pxBME280->xMeasureRegData.xHumidityRegData.uMSB << 8) +
 80011d0:	4413      	add	r3, r2
 80011d2:	b29a      	uxth	r2, r3
	pxBME280->xMeasureRawData.uHumidityRawData =
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <BME280_lCalculateTemperatureFine>:



int32_t BME280_lCalculateTemperatureFine(BME280Handle_t *pxBME280)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b089      	sub	sp, #36	; 0x24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
	int32_t lTemperatureRaw = pxBME280->xMeasureRawData.ulTemperatureRawData;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ee:	61fb      	str	r3, [r7, #28]
	int32_t lDigT1 = pxBME280->xCalibrationData.xDigT.usT1;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	891b      	ldrh	r3, [r3, #8]
 80011f4:	61bb      	str	r3, [r7, #24]
	int32_t lDigT2 = pxBME280->xCalibrationData.xDigT.sT2;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011fc:	617b      	str	r3, [r7, #20]
	int32_t lDigT3 = pxBME280->xCalibrationData.xDigT.sT3;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001204:	613b      	str	r3, [r7, #16]

	int32_t lVar1;
	int32_t lVar2;

	lVar1 = (int32_t)((lTemperatureRaw >> 3) - (lDigT1 << 1));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	10da      	asrs	r2, r3, #3
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	60fb      	str	r3, [r7, #12]
	lVar1 = (lVar1 * lDigT2) >> 11;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	fb02 f303 	mul.w	r3, r2, r3
 800121a:	12db      	asrs	r3, r3, #11
 800121c:	60fb      	str	r3, [r7, #12]
	lVar2 = (int32_t)((lTemperatureRaw >> 4) - lDigT1);
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	111a      	asrs	r2, r3, #4
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	60bb      	str	r3, [r7, #8]
	lVar2 = (((lVar2 * lVar2) >> 12) * lDigT3) >> 14;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	fb03 f303 	mul.w	r3, r3, r3
 800122e:	131b      	asrs	r3, r3, #12
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	fb02 f303 	mul.w	r3, r2, r3
 8001236:	139b      	asrs	r3, r3, #14
 8001238:	60bb      	str	r3, [r7, #8]
	pxBME280->xCalibrationData.lTemperatureFine = lVar1 + lVar2;
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	441a      	add	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c

	return pxBME280->xCalibrationData.lTemperatureFine;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8001248:	4618      	mov	r0, r3
 800124a:	3724      	adds	r7, #36	; 0x24
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <BME280_fCompensateTemperatureData>:
}



float BME280_fCompensateTemperatureData(BME280Handle_t *pxBME280)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	static const float fTemperatureMin = -40.0f;
	static const float fTemperatureMax = 85.0f;

	float fTemperature;

	fTemperature = (float)(BME280_lCalculateTemperatureFine(pxBME280)) / 5120.0f;
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ffc0 	bl	80011e2 <BME280_lCalculateTemperatureFine>
 8001262:	ee07 0a90 	vmov	s15, r0
 8001266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126a:	eddf 6a16 	vldr	s13, [pc, #88]	; 80012c4 <BME280_fCompensateTemperatureData+0x70>
 800126e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001272:	edc7 7a03 	vstr	s15, [r7, #12]
	fTemperature = fTemperature < fTemperatureMin ? fTemperatureMin : fTemperature;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <BME280_fCompensateTemperatureData+0x74>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001288:	d502      	bpl.n	8001290 <BME280_fCompensateTemperatureData+0x3c>
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <BME280_fCompensateTemperatureData+0x74>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	e000      	b.n	8001292 <BME280_fCompensateTemperatureData+0x3e>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	60fb      	str	r3, [r7, #12]
	fTemperature = fTemperature > fTemperatureMax ? fTemperatureMax : fTemperature;
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <BME280_fCompensateTemperatureData+0x78>)
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ed97 7a03 	vldr	s14, [r7, #12]
 800129e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd02      	ble.n	80012ae <BME280_fCompensateTemperatureData+0x5a>
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <BME280_fCompensateTemperatureData+0x78>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	e000      	b.n	80012b0 <BME280_fCompensateTemperatureData+0x5c>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	60fb      	str	r3, [r7, #12]

	return fTemperature;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	ee07 3a90 	vmov	s15, r3
}
 80012b8:	eeb0 0a67 	vmov.f32	s0, s15
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	45a00000 	.word	0x45a00000
 80012c8:	0800da48 	.word	0x0800da48
 80012cc:	0800da4c 	.word	0x0800da4c

080012d0 <BME280_fCompensatePressureData>:



float BME280_fCompensatePressureData(BME280Handle_t *pxBME280)
{
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b090      	sub	sp, #64	; 0x40
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	static const float fPressureMin = 30000.0f;
	static const float fPressureMax = 110000.0f;

	int32_t lPressureRaw = (int32_t)pxBME280->xMeasureRawData.ulPressureRawData;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t lTemperatureFine = pxBME280->xCalibrationData.lTemperatureFine;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	63bb      	str	r3, [r7, #56]	; 0x38
	float fDigP1 = (float)pxBME280->xCalibrationData.xDigP.usP1;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	89db      	ldrh	r3, [r3, #14]
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float fDigP2 = (float)pxBME280->xCalibrationData.xDigP.sP2;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001302:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float fDigP3 = (float)pxBME280->xCalibrationData.xDigP.sP3;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float fDigP4 = (float)pxBME280->xCalibrationData.xDigP.sP4;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float fDigP5 = (float)pxBME280->xCalibrationData.xDigP.sP5;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001338:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float fDigP6 = (float)pxBME280->xCalibrationData.xDigP.sP6;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134a:	edc7 7a08 	vstr	s15, [r7, #32]
	float fDigP7 = (float)pxBME280->xCalibrationData.xDigP.sP7;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135c:	edc7 7a07 	vstr	s15, [r7, #28]
	float fDigP8 = (float)pxBME280->xCalibrationData.xDigP.sP8;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	edc7 7a06 	vstr	s15, [r7, #24]
	float fDigP9 = (float)pxBME280->xCalibrationData.xDigP.sP9;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001380:	edc7 7a05 	vstr	s15, [r7, #20]

	float fVar1, fVar2, fPressure;
	fVar1 = ((float)lTemperatureFine / 2.0f) - 64000.0f;
 8001384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001392:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001396:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8001648 <BME280_fCompensatePressureData+0x378>
 800139a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800139e:	edc7 7a04 	vstr	s15, [r7, #16]
	fVar2 = fVar1 * fVar1 * (fDigP6) / 32768.0;
 80013a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80013ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b2:	eddf 6aa6 	vldr	s13, [pc, #664]	; 800164c <BME280_fCompensatePressureData+0x37c>
 80013b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ba:	edc7 7a03 	vstr	s15, [r7, #12]
	fVar2 = fVar2 + fVar1 * (fDigP5) * 2.0;
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7ff f8c2 	bl	8000548 <__aeabi_f2d>
 80013c4:	4604      	mov	r4, r0
 80013c6:	460d      	mov	r5, r1
 80013c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80013cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	ee17 0a90 	vmov	r0, s15
 80013d8:	f7ff f8b6 	bl	8000548 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	f7fe ff54 	bl	800028c <__adddf3>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4620      	mov	r0, r4
 80013ea:	4629      	mov	r1, r5
 80013ec:	f7fe ff4e 	bl	800028c <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fbf6 	bl	8000be8 <__aeabi_d2f>
 80013fc:	4603      	mov	r3, r0
 80013fe:	60fb      	str	r3, [r7, #12]
	fVar2 = (fVar2 / 4.0) + ((fDigP4) * 65536.0);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff f8a1 	bl	8000548 <__aeabi_f2d>
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b91      	ldr	r3, [pc, #580]	; (8001650 <BME280_fCompensatePressureData+0x380>)
 800140c:	f7ff fa1e 	bl	800084c <__aeabi_ddiv>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4614      	mov	r4, r2
 8001416:	461d      	mov	r5, r3
 8001418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800141a:	f7ff f895 	bl	8000548 <__aeabi_f2d>
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b8c      	ldr	r3, [pc, #560]	; (8001654 <BME280_fCompensatePressureData+0x384>)
 8001424:	f7ff f8e8 	bl	80005f8 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4620      	mov	r0, r4
 800142e:	4629      	mov	r1, r5
 8001430:	f7fe ff2c 	bl	800028c <__adddf3>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fbd4 	bl	8000be8 <__aeabi_d2f>
 8001440:	4603      	mov	r3, r0
 8001442:	60fb      	str	r3, [r7, #12]
	fVar1 = ((fDigP3) * fVar1 * fVar1 / 524288.0 + (fDigP2) * fVar1) / 524288.0;
 8001444:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001448:	edd7 7a04 	vldr	s15, [r7, #16]
 800144c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001450:	edd7 7a04 	vldr	s15, [r7, #16]
 8001454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001458:	ee17 0a90 	vmov	r0, s15
 800145c:	f7ff f874 	bl	8000548 <__aeabi_f2d>
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b7c      	ldr	r3, [pc, #496]	; (8001658 <BME280_fCompensatePressureData+0x388>)
 8001466:	f7ff f9f1 	bl	800084c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4614      	mov	r4, r2
 8001470:	461d      	mov	r5, r3
 8001472:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001476:	edd7 7a04 	vldr	s15, [r7, #16]
 800147a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147e:	ee17 0a90 	vmov	r0, s15
 8001482:	f7ff f861 	bl	8000548 <__aeabi_f2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4620      	mov	r0, r4
 800148c:	4629      	mov	r1, r5
 800148e:	f7fe fefd 	bl	800028c <__adddf3>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b6e      	ldr	r3, [pc, #440]	; (8001658 <BME280_fCompensatePressureData+0x388>)
 80014a0:	f7ff f9d4 	bl	800084c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fb9c 	bl	8000be8 <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	613b      	str	r3, [r7, #16]
	fVar1 = (1.0 + fVar1 / 32768.0) * (fDigP1);
 80014b4:	6938      	ldr	r0, [r7, #16]
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4b67      	ldr	r3, [pc, #412]	; (800165c <BME280_fCompensatePressureData+0x38c>)
 80014c0:	f7ff f9c4 	bl	800084c <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b63      	ldr	r3, [pc, #396]	; (8001660 <BME280_fCompensatePressureData+0x390>)
 80014d2:	f7fe fedb 	bl	800028c <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4614      	mov	r4, r2
 80014dc:	461d      	mov	r5, r3
 80014de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014e0:	f7ff f832 	bl	8000548 <__aeabi_f2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7ff f884 	bl	80005f8 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb76 	bl	8000be8 <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	613b      	str	r3, [r7, #16]

	if (fVar1 == 0.0) return fPressureMin; /* Account for divide by zero */
 8001500:	edd7 7a04 	vldr	s15, [r7, #16]
 8001504:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d102      	bne.n	8001514 <BME280_fCompensatePressureData+0x244>
 800150e:	4b55      	ldr	r3, [pc, #340]	; (8001664 <BME280_fCompensatePressureData+0x394>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	e08d      	b.n	8001630 <BME280_fCompensatePressureData+0x360>

	fPressure = 1048576.0 - (float)lPressureRaw;
 8001514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001668 <BME280_fCompensatePressureData+0x398>
 8001522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001526:	edc7 7a02 	vstr	s15, [r7, #8]
	fPressure = (fPressure - (fVar2 / 4096.0)) * 6250.0 / fVar1;
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f7ff f80c 	bl	8000548 <__aeabi_f2d>
 8001530:	4604      	mov	r4, r0
 8001532:	460d      	mov	r5, r1
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff f807 	bl	8000548 <__aeabi_f2d>
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b4b      	ldr	r3, [pc, #300]	; (800166c <BME280_fCompensatePressureData+0x39c>)
 8001540:	f7ff f984 	bl	800084c <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7fe fe9c 	bl	8000288 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	a339      	add	r3, pc, #228	; (adr r3, 8001640 <BME280_fCompensatePressureData+0x370>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f84b 	bl	80005f8 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4614      	mov	r4, r2
 8001568:	461d      	mov	r5, r3
 800156a:	6938      	ldr	r0, [r7, #16]
 800156c:	f7fe ffec 	bl	8000548 <__aeabi_f2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4620      	mov	r0, r4
 8001576:	4629      	mov	r1, r5
 8001578:	f7ff f968 	bl	800084c <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fb30 	bl	8000be8 <__aeabi_d2f>
 8001588:	4603      	mov	r3, r0
 800158a:	60bb      	str	r3, [r7, #8]
	fVar1 = (fDigP9) * fPressure * fPressure / 2147483648.0;
 800158c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001590:	edd7 7a02 	vldr	s15, [r7, #8]
 8001594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001598:	edd7 7a02 	vldr	s15, [r7, #8]
 800159c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015a0:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001670 <BME280_fCompensatePressureData+0x3a0>
 80015a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a8:	edc7 7a04 	vstr	s15, [r7, #16]
	fVar2 = fPressure * (fDigP8) / 32768.0;
 80015ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80015b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b8:	eddf 6a24 	vldr	s13, [pc, #144]	; 800164c <BME280_fCompensatePressureData+0x37c>
 80015bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c0:	edc7 7a03 	vstr	s15, [r7, #12]
	fPressure = fPressure + (fVar1 + fVar2 + (fDigP7)) / 16.0;
 80015c4:	68b8      	ldr	r0, [r7, #8]
 80015c6:	f7fe ffbf 	bl	8000548 <__aeabi_f2d>
 80015ca:	4604      	mov	r4, r0
 80015cc:	460d      	mov	r5, r1
 80015ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80015d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015da:	edd7 7a07 	vldr	s15, [r7, #28]
 80015de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e2:	ee17 0a90 	vmov	r0, s15
 80015e6:	f7fe ffaf 	bl	8000548 <__aeabi_f2d>
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <BME280_fCompensatePressureData+0x3a4>)
 80015f0:	f7ff f92c 	bl	800084c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4620      	mov	r0, r4
 80015fa:	4629      	mov	r1, r5
 80015fc:	f7fe fe46 	bl	800028c <__adddf3>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff faee 	bl	8000be8 <__aeabi_d2f>
 800160c:	4603      	mov	r3, r0
 800160e:	60bb      	str	r3, [r7, #8]

	fPressure = fPressure > fPressureMax ? fPressureMax : fPressure;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <BME280_fCompensatePressureData+0x3a8>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ed97 7a02 	vldr	s14, [r7, #8]
 800161a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800161e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001622:	dd02      	ble.n	800162a <BME280_fCompensatePressureData+0x35a>
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <BME280_fCompensatePressureData+0x3a8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	e000      	b.n	800162c <BME280_fCompensatePressureData+0x35c>
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	60bb      	str	r3, [r7, #8]

	return fPressure;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	ee07 3a90 	vmov	s15, r3
}
 8001634:	eeb0 0a67 	vmov.f32	s0, s15
 8001638:	3740      	adds	r7, #64	; 0x40
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}
 800163e:	bf00      	nop
 8001640:	00000000 	.word	0x00000000
 8001644:	40b86a00 	.word	0x40b86a00
 8001648:	477a0000 	.word	0x477a0000
 800164c:	47000000 	.word	0x47000000
 8001650:	40100000 	.word	0x40100000
 8001654:	40f00000 	.word	0x40f00000
 8001658:	41200000 	.word	0x41200000
 800165c:	40e00000 	.word	0x40e00000
 8001660:	3ff00000 	.word	0x3ff00000
 8001664:	0800da50 	.word	0x0800da50
 8001668:	49800000 	.word	0x49800000
 800166c:	40b00000 	.word	0x40b00000
 8001670:	4f000000 	.word	0x4f000000
 8001674:	40300000 	.word	0x40300000
 8001678:	0800da54 	.word	0x0800da54

0800167c <BME280_fCompensateHumidityData>:


float BME280_fCompensateHumidityData(BME280Handle_t *pxBME280)
{
 800167c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001680:	b08c      	sub	sp, #48	; 0x30
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
	static const float fHumidityMin = 0.0f;
	static const float fHumidityMax = 100.0f;

	int32_t lHumidityRaw = (int32_t)pxBME280->xMeasureRawData.uHumidityRawData;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t lTemperatureFine = pxBME280->xCalibrationData.lTemperatureFine;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
	float fDigH1 = (float)pxBME280->xCalibrationData.xDigH.ucH1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float fDigH2 = (float)pxBME280->xCalibrationData.xDigH.usH2;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b4:	edc7 7a08 	vstr	s15, [r7, #32]
	float fDigH3 = (float)pxBME280->xCalibrationData.xDigH.ucH3;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c6:	edc7 7a07 	vstr	s15, [r7, #28]
	float fDigH4 = (float)pxBME280->xCalibrationData.xDigH.sH4;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d8:	edc7 7a06 	vstr	s15, [r7, #24]
	float fDigH5 = (float)pxBME280->xCalibrationData.xDigH.sH5;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ea:	edc7 7a05 	vstr	s15, [r7, #20]
	float fDigH6 = (float)pxBME280->xCalibrationData.xDigH.cH6;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016fc:	edc7 7a04 	vstr	s15, [r7, #16]

	float fHumidity;
	fHumidity = (((float)lTemperatureFine) - 76800.0f);
 8001700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001870 <BME280_fCompensateHumidityData+0x1f4>
 800170e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001712:	edc7 7a03 	vstr	s15, [r7, #12]
	fHumidity = (lHumidityRaw - ((fDigH4) * 64.0f + (fDigH5) / 16384.0f *
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001720:	edd7 7a06 	vldr	s15, [r7, #24]
 8001724:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001874 <BME280_fCompensateHumidityData+0x1f8>
 8001728:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800172c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001730:	eddf 5a51 	vldr	s11, [pc, #324]	; 8001878 <BME280_fCompensateHumidityData+0x1fc>
 8001734:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001738:	edd7 7a03 	vldr	s15, [r7, #12]
 800173c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001748:	ee17 0a90 	vmov	r0, s15
 800174c:	f7fe fefc 	bl	8000548 <__aeabi_f2d>
 8001750:	4604      	mov	r4, r0
 8001752:	460d      	mov	r5, r1
	fHumidity)) * ((fDigH2) / 65536.0f * (1.0f + (fDigH6) /
 8001754:	edd7 7a08 	vldr	s15, [r7, #32]
 8001758:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800187c <BME280_fCompensateHumidityData+0x200>
 800175c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001760:	ee16 0a90 	vmov	r0, s13
 8001764:	f7fe fef0 	bl	8000548 <__aeabi_f2d>
 8001768:	4680      	mov	r8, r0
 800176a:	4689      	mov	r9, r1
 800176c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001770:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001880 <BME280_fCompensateHumidityData+0x204>
 8001774:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	67108864.0f * fHumidity *
 8001778:	edd7 7a03 	vldr	s15, [r7, #12]
 800177c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001780:	ee17 0a90 	vmov	r0, s15
 8001784:	f7fe fee0 	bl	8000548 <__aeabi_f2d>
 8001788:	4682      	mov	sl, r0
 800178a:	468b      	mov	fp, r1
	(1.0 + (fDigH3) / 67108864.0f * fHumidity)));
 800178c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001790:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001880 <BME280_fCompensateHumidityData+0x204>
 8001794:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001798:	edd7 7a03 	vldr	s15, [r7, #12]
 800179c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a0:	ee17 0a90 	vmov	r0, s15
 80017a4:	f7fe fed0 	bl	8000548 <__aeabi_f2d>
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b35      	ldr	r3, [pc, #212]	; (8001884 <BME280_fCompensateHumidityData+0x208>)
 80017ae:	f7fe fd6d 	bl	800028c <__adddf3>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
	67108864.0f * fHumidity *
 80017b6:	4650      	mov	r0, sl
 80017b8:	4659      	mov	r1, fp
 80017ba:	f7fe ff1d 	bl	80005f8 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
	fHumidity)) * ((fDigH2) / 65536.0f * (1.0f + (fDigH6) /
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <BME280_fCompensateHumidityData+0x208>)
 80017cc:	f7fe fd5e 	bl	800028c <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4640      	mov	r0, r8
 80017d6:	4649      	mov	r1, r9
 80017d8:	f7fe ff0e 	bl	80005f8 <__aeabi_dmul>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe ff08 	bl	80005f8 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
	fHumidity = (lHumidityRaw - ((fDigH4) * 64.0f + (fDigH5) / 16384.0f *
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f9fa 	bl	8000be8 <__aeabi_d2f>
 80017f4:	4603      	mov	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]
	fHumidity = fHumidity * (1.0f - (fDigH1) * fHumidity / 524288.0f);
 80017f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001800:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001804:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001888 <BME280_fCompensateHumidityData+0x20c>
 8001808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001814:	ed97 7a03 	vldr	s14, [r7, #12]
 8001818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181c:	edc7 7a03 	vstr	s15, [r7, #12]
	fHumidity = fHumidity < fHumidityMin ? fHumidityMin : fHumidity;
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <BME280_fCompensateHumidityData+0x210>)
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ed97 7a03 	vldr	s14, [r7, #12]
 800182a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	d502      	bpl.n	800183a <BME280_fCompensateHumidityData+0x1be>
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <BME280_fCompensateHumidityData+0x210>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	e000      	b.n	800183c <BME280_fCompensateHumidityData+0x1c0>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	60fb      	str	r3, [r7, #12]
	fHumidity = fHumidity > fHumidityMax ? fHumidityMax : fHumidity;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <BME280_fCompensateHumidityData+0x214>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ed97 7a03 	vldr	s14, [r7, #12]
 8001848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	dd02      	ble.n	8001858 <BME280_fCompensateHumidityData+0x1dc>
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <BME280_fCompensateHumidityData+0x214>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	e000      	b.n	800185a <BME280_fCompensateHumidityData+0x1de>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	60fb      	str	r3, [r7, #12]

	return fHumidity;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	ee07 3a90 	vmov	s15, r3
}
 8001862:	eeb0 0a67 	vmov.f32	s0, s15
 8001866:	3730      	adds	r7, #48	; 0x30
 8001868:	46bd      	mov	sp, r7
 800186a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800186e:	bf00      	nop
 8001870:	47960000 	.word	0x47960000
 8001874:	42800000 	.word	0x42800000
 8001878:	46800000 	.word	0x46800000
 800187c:	47800000 	.word	0x47800000
 8001880:	4c800000 	.word	0x4c800000
 8001884:	3ff00000 	.word	0x3ff00000
 8001888:	49000000 	.word	0x49000000
 800188c:	0800da58 	.word	0x0800da58
 8001890:	0800da5c 	.word	0x0800da5c

08001894 <BME280_vPrintfCompensatedData>:
}



void BME280_vPrintfCompensatedData(BME280Handle_t *pxBME280)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	float fCompensatedTemperatureData = BME280_fCompensateTemperatureData(pxBME280);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff fcd9 	bl	8001254 <BME280_fCompensateTemperatureData>
 80018a2:	ed87 0a05 	vstr	s0, [r7, #20]
	float fCompensatedPressureData = BME280_fCompensatePressureData(pxBME280);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fd12 	bl	80012d0 <BME280_fCompensatePressureData>
 80018ac:	ed87 0a04 	vstr	s0, [r7, #16]
	float fCompensatedHumidityData = BME280_fCompensateHumidityData(pxBME280);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fee3 	bl	800167c <BME280_fCompensateHumidityData>
 80018b6:	ed87 0a03 	vstr	s0, [r7, #12]

	printf("fTemperature Calibrated Data: %.8fC\r\n", fCompensatedTemperatureData);
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7fe fe44 	bl	8000548 <__aeabi_f2d>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	480b      	ldr	r0, [pc, #44]	; (80018f4 <BME280_vPrintfCompensatedData+0x60>)
 80018c6:	f008 f94b 	bl	8009b60 <iprintf>
	printf("fPressure Calibrated Data: %.8fPa\r\n", fCompensatedPressureData);
 80018ca:	6938      	ldr	r0, [r7, #16]
 80018cc:	f7fe fe3c 	bl	8000548 <__aeabi_f2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <BME280_vPrintfCompensatedData+0x64>)
 80018d6:	f008 f943 	bl	8009b60 <iprintf>
	printf("fHumidity Calibrated Data: %.8f%%\r\n", fCompensatedHumidityData);
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f7fe fe34 	bl	8000548 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <BME280_vPrintfCompensatedData+0x68>)
 80018e6:	f008 f93b 	bl	8009b60 <iprintf>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	0800d9a4 	.word	0x0800d9a4
 80018f8:	0800d9cc 	.word	0x0800d9cc
 80018fc:	0800d9f0 	.word	0x0800d9f0

08001900 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001908:	1d39      	adds	r1, r7, #4
 800190a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190e:	2201      	movs	r2, #1
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <__io_putchar+0x20>)
 8001912:	f004 f84f 	bl	80059b4 <HAL_UART_Transmit>
	return ch;
 8001916:	687b      	ldr	r3, [r7, #4]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20001b68 	.word	0x20001b68

08001924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001928:	f000 fbe4 	bl	80020f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192c:	f000 f822 	bl	8001974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001930:	f000 f908 	bl	8001b44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001934:	f000 f8d6 	bl	8001ae4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001938:	f000 f894 	bl	8001a64 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BME280_vInit(&xBME280, &hi2c1, BME280_I2C_SLAVE_ADDRESS_A);
 800193c:	2276      	movs	r2, #118	; 0x76
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <main+0x3c>)
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <main+0x40>)
 8001942:	f7ff fb53 	bl	8000fec <BME280_vInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001946:	f004 fcff 	bl	8006348 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <main+0x44>)
 800194c:	2100      	movs	r1, #0
 800194e:	4807      	ldr	r0, [pc, #28]	; (800196c <main+0x48>)
 8001950:	f004 fd44 	bl	80063dc <osThreadNew>
 8001954:	4603      	mov	r3, r0
 8001956:	4a06      	ldr	r2, [pc, #24]	; (8001970 <main+0x4c>)
 8001958:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800195a:	f004 fd19 	bl	8006390 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800195e:	e7fe      	b.n	800195e <main+0x3a>
 8001960:	20001b1c 	.word	0x20001b1c
 8001964:	20001ad8 	.word	0x20001ad8
 8001968:	0800da60 	.word	0x0800da60
 800196c:	08001bbd 	.word	0x08001bbd
 8001970:	20001ad4 	.word	0x20001ad4

08001974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b0b8      	sub	sp, #224	; 0xe0
 8001978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800197e:	2244      	movs	r2, #68	; 0x44
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f007 fa6a 	bl	8008e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001988:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	463b      	mov	r3, r7
 800199a:	2288      	movs	r2, #136	; 0x88
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 fa5c 	bl	8008e5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a4:	2302      	movs	r3, #2
 80019a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b2:	2310      	movs	r3, #16
 80019b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b8:	2302      	movs	r3, #2
 80019ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019be:	2302      	movs	r3, #2
 80019c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019ca:	230a      	movs	r3, #10
 80019cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019d0:	2307      	movs	r3, #7
 80019d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019d6:	2302      	movs	r3, #2
 80019d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019dc:	2302      	movs	r3, #2
 80019de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 f9ea 	bl	8003dc0 <HAL_RCC_OscConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019f2:	f000 f90f 	bl	8001c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f6:	230f      	movs	r3, #15
 80019f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fc:	2303      	movs	r3, #3
 80019fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a18:	2104      	movs	r1, #4
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fdb6 	bl	800458c <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001a26:	f000 f8f5 	bl	8001c14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001a2a:	2342      	movs	r3, #66	; 0x42
 8001a2c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a36:	463b      	mov	r3, r7
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 ffdf 	bl	80049fc <HAL_RCCEx_PeriphCLKConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001a44:	f000 f8e6 	bl	8001c14 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a4c:	f002 f962 	bl	8003d14 <HAL_PWREx_ControlVoltageScaling>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001a56:	f000 f8dd 	bl	8001c14 <Error_Handler>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	37e0      	adds	r7, #224	; 0xe0
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <MX_I2C1_Init+0x78>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a70:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <MX_I2C1_Init+0x7c>)
 8001a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001aa0:	f000 fe44 	bl	800272c <HAL_I2C_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001aaa:	f000 f8b3 	bl	8001c14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001ab2:	f002 f889 	bl	8003bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001abc:	f000 f8aa 	bl	8001c14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001ac4:	f002 f8cb 	bl	8003c5e <HAL_I2CEx_ConfigDigitalFilter>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ace:	f000 f8a1 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20001b1c 	.word	0x20001b1c
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	10909cec 	.word	0x10909cec

08001ae4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MX_USART2_UART_Init+0x58>)
 8001aea:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <MX_USART2_UART_Init+0x5c>)
 8001aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <MX_USART2_UART_Init+0x58>)
 8001af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_USART2_UART_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <MX_USART2_UART_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_USART2_UART_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_USART2_UART_Init+0x58>)
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_USART2_UART_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_USART2_UART_Init+0x58>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_USART2_UART_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_USART2_UART_Init+0x58>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_USART2_UART_Init+0x58>)
 8001b28:	f003 fef6 	bl	8005918 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b32:	f000 f86f 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20001b68 	.word	0x20001b68
 8001b40:	40004400 	.word	0x40004400

08001b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_GPIO_Init+0x74>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000

08001bbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
  	printf("hello, world!\r\n");
 8001bc4:	4808      	ldr	r0, [pc, #32]	; (8001be8 <StartDefaultTask+0x2c>)
 8001bc6:	f008 f851 	bl	8009c6c <puts>
  	//HAL_I2C_Mem_Read(&hi2c1, (0x76<<1), BME280_DATA_ADDRESS, 1, &(xBME280.xRawData), 8, 50);
  	//BME280_vDisableHumidity(&xBME280);
  	//osDelay(200);


  	BME280_vMeasureAllForced(&xBME280);
 8001bca:	4808      	ldr	r0, [pc, #32]	; (8001bec <StartDefaultTask+0x30>)
 8001bcc:	f7ff fa8e 	bl	80010ec <BME280_vMeasureAllForced>
  	//BME280_vMeasureForced(&xBME280, 1, 0, 1);

  	BME280_vReadRawData(&xBME280);
 8001bd0:	4806      	ldr	r0, [pc, #24]	; (8001bec <StartDefaultTask+0x30>)
 8001bd2:	f7ff fab9 	bl	8001148 <BME280_vReadRawData>
  	//BME280_vPrintRawData(&xBME280);

  	//BME280_vPrintCalibrationData(&xBME280);

  	BME280_vPrintfCompensatedData(&xBME280);
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <StartDefaultTask+0x30>)
 8001bd8:	f7ff fe5c 	bl	8001894 <BME280_vPrintfCompensatedData>
  	//BME280_vPrintlCompensatedData(&xBME280);


    osDelay(2000);
 8001bdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001be0:	f004 fc8e 	bl	8006500 <osDelay>
  	printf("hello, world!\r\n");
 8001be4:	e7ee      	b.n	8001bc4 <StartDefaultTask+0x8>
 8001be6:	bf00      	nop
 8001be8:	0800da20 	.word	0x0800da20
 8001bec:	20001ad8 	.word	0x20001ad8

08001bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c02:	f000 fa97 	bl	8002134 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40001000 	.word	0x40001000

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <Error_Handler+0x8>
	...

08001c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	4a10      	ldr	r2, [pc, #64]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6613      	str	r3, [r2, #96]	; 0x60
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	210f      	movs	r1, #15
 8001c5a:	f06f 0001 	mvn.w	r0, #1
 8001c5e:	f000 fb41 	bl	80022e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <HAL_I2C_MspInit+0x9c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d138      	bne.n	8001d04 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <HAL_I2C_MspInit+0xa0>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_I2C_MspInit+0xa0>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_I2C_MspInit+0xa0>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001caa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb0:	2312      	movs	r3, #18
 8001cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4813      	ldr	r0, [pc, #76]	; (8001d14 <HAL_I2C_MspInit+0xa4>)
 8001cc8:	f000 fb86 	bl	80023d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_I2C_MspInit+0xa0>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_I2C_MspInit+0xa0>)
 8001cd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_I2C_MspInit+0xa0>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2105      	movs	r1, #5
 8001ce8:	201f      	movs	r0, #31
 8001cea:	f000 fafb 	bl	80022e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cee:	201f      	movs	r0, #31
 8001cf0:	f000 fb14 	bl	800231c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2105      	movs	r1, #5
 8001cf8:	2020      	movs	r0, #32
 8001cfa:	f000 faf3 	bl	80022e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cfe:	2020      	movs	r0, #32
 8001d00:	f000 fb0c 	bl	800231c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40005400 	.word	0x40005400
 8001d10:	40021000 	.word	0x40021000
 8001d14:	48000400 	.word	0x48000400

08001d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_UART_MspInit+0x7c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d128      	bne.n	8001d8c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_UART_MspInit+0x80>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <HAL_UART_MspInit+0x80>)
 8001d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_UART_MspInit+0x80>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_UART_MspInit+0x80>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <HAL_UART_MspInit+0x80>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HAL_UART_MspInit+0x80>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d6a:	230c      	movs	r3, #12
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d88:	f000 fb26 	bl	80023d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40004400 	.word	0x40004400
 8001d98:	40021000 	.word	0x40021000

08001d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	2036      	movs	r0, #54	; 0x36
 8001db2:	f000 fa97 	bl	80022e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001db6:	2036      	movs	r0, #54	; 0x36
 8001db8:	f000 fab0 	bl	800231c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <HAL_InitTick+0x9c>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <HAL_InitTick+0x9c>)
 8001dc2:	f043 0310 	orr.w	r3, r3, #16
 8001dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_InitTick+0x9c>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dd4:	f107 0210 	add.w	r2, r7, #16
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 fd7a 	bl	80048d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001de4:	f002 fd4c 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 8001de8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <HAL_InitTick+0xa0>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0c9b      	lsrs	r3, r3, #18
 8001df4:	3b01      	subs	r3, #1
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_InitTick+0xa4>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <HAL_InitTick+0xa8>)
 8001dfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_InitTick+0xa4>)
 8001e00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e06:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <HAL_InitTick+0xa4>)
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <HAL_InitTick+0xa4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_InitTick+0xa4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e18:	4809      	ldr	r0, [pc, #36]	; (8001e40 <HAL_InitTick+0xa4>)
 8001e1a:	f003 faab 	bl	8005374 <HAL_TIM_Base_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d104      	bne.n	8001e2e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e24:	4806      	ldr	r0, [pc, #24]	; (8001e40 <HAL_InitTick+0xa4>)
 8001e26:	f003 fb07 	bl	8005438 <HAL_TIM_Base_Start_IT>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	e000      	b.n	8001e30 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3730      	adds	r7, #48	; 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	20001bec 	.word	0x20001bec
 8001e44:	40001000 	.word	0x40001000

08001e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <NMI_Handler+0x4>

08001e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <I2C1_EV_IRQHandler+0x10>)
 8001e7a:	f000 ff15 	bl	8002ca8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20001b1c 	.word	0x20001b1c

08001e88 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <I2C1_ER_IRQHandler+0x10>)
 8001e8e:	f000 ff25 	bl	8002cdc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20001b1c 	.word	0x20001b1c

08001e9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <TIM6_DAC_IRQHandler+0x10>)
 8001ea2:	f003 fb39 	bl	8005518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20001bec 	.word	0x20001bec

08001eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
	return 1;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_kill>:

int _kill(int pid, int sig)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eca:	f006 ff8f 	bl	8008dec <__errno>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2216      	movs	r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_exit>:

void _exit (int status)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ffe7 	bl	8001ec0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ef2:	e7fe      	b.n	8001ef2 <_exit+0x12>

08001ef4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e00a      	b.n	8001f1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f06:	f3af 8000 	nop.w
 8001f0a:	4601      	mov	r1, r0
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	60ba      	str	r2, [r7, #8]
 8001f12:	b2ca      	uxtb	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf0      	blt.n	8001f06 <_read+0x12>
	}

return len;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e009      	b.n	8001f54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fcd9 	bl	8001900 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf1      	blt.n	8001f40 <_write+0x12>
	}
	return len;
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_close>:

int _close(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_isatty>:

int _isatty(int file)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
	return 1;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <_sbrk+0x5c>)
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <_sbrk+0x60>)
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <_sbrk+0x64>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <_sbrk+0x68>)
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d207      	bcs.n	8002010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002000:	f006 fef4 	bl	8008dec <__errno>
 8002004:	4603      	mov	r3, r0
 8002006:	220c      	movs	r2, #12
 8002008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800200e:	e009      	b.n	8002024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <_sbrk+0x64>)
 8002020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002022:	68fb      	ldr	r3, [r7, #12]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20018000 	.word	0x20018000
 8002030:	00000400 	.word	0x00000400
 8002034:	20000200 	.word	0x20000200
 8002038:	20001c90 	.word	0x20001c90

0800203c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <SystemInit+0x5c>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	4a14      	ldr	r2, [pc, #80]	; (8002098 <SystemInit+0x5c>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <SystemInit+0x60>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a11      	ldr	r2, [pc, #68]	; (800209c <SystemInit+0x60>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <SystemInit+0x60>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <SystemInit+0x60>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a0d      	ldr	r2, [pc, #52]	; (800209c <SystemInit+0x60>)
 8002068:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800206c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002070:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <SystemInit+0x60>)
 8002074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002078:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <SystemInit+0x60>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a07      	ldr	r2, [pc, #28]	; (800209c <SystemInit+0x60>)
 8002080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <SystemInit+0x60>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00
 800209c:	40021000 	.word	0x40021000

080020a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020a4:	f7ff ffca 	bl	800203c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020aa:	e003      	b.n	80020b4 <LoopCopyDataInit>

080020ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020b2:	3104      	adds	r1, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020b4:	480a      	ldr	r0, [pc, #40]	; (80020e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020bc:	d3f6      	bcc.n	80020ac <CopyDataInit>
	ldr	r2, =_sbss
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020c0:	e002      	b.n	80020c8 <LoopFillZerobss>

080020c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020c4:	f842 3b04 	str.w	r3, [r2], #4

080020c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <LoopForever+0x16>)
	cmp	r2, r3
 80020ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020cc:	d3f9      	bcc.n	80020c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ce:	f006 fe93 	bl	8008df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020d2:	f7ff fc27 	bl	8001924 <main>

080020d6 <LoopForever>:

LoopForever:
    b LoopForever
 80020d6:	e7fe      	b.n	80020d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80020dc:	0800df94 	.word	0x0800df94
	ldr	r0, =_sdata
 80020e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020e4:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 80020e8:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 80020ec:	20001c8c 	.word	0x20001c8c

080020f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f0:	e7fe      	b.n	80020f0 <ADC1_2_IRQHandler>
	...

080020f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_Init+0x3c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <HAL_Init+0x3c>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210a:	2003      	movs	r0, #3
 800210c:	f000 f8df 	bl	80022ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff fe43 	bl	8001d9c <HAL_InitTick>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	71fb      	strb	r3, [r7, #7]
 8002120:	e001      	b.n	8002126 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002122:	f7ff fd7d 	bl	8001c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002126:	79fb      	ldrb	r3, [r7, #7]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40022000 	.word	0x40022000

08002134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x20>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_IncTick+0x24>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_IncTick+0x24>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000008 	.word	0x20000008
 8002158:	20001c38 	.word	0x20001c38

0800215c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return uwTick;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_GetTick+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20001c38 	.word	0x20001c38

08002174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002190:	4013      	ands	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800219c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a6:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <__NVIC_GetPriorityGrouping+0x18>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 0307 	and.w	r3, r3, #7
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	db0b      	blt.n	8002202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f003 021f 	and.w	r2, r3, #31
 80021f0:	4907      	ldr	r1, [pc, #28]	; (8002210 <__NVIC_EnableIRQ+0x38>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2001      	movs	r0, #1
 80021fa:	fa00 f202 	lsl.w	r2, r0, r2
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000e100 	.word	0xe000e100

08002214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	db0a      	blt.n	800223e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	490c      	ldr	r1, [pc, #48]	; (8002260 <__NVIC_SetPriority+0x4c>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	0112      	lsls	r2, r2, #4
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	440b      	add	r3, r1
 8002238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800223c:	e00a      	b.n	8002254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4908      	ldr	r1, [pc, #32]	; (8002264 <__NVIC_SetPriority+0x50>)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3b04      	subs	r3, #4
 800224c:	0112      	lsls	r2, r2, #4
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	440b      	add	r3, r1
 8002252:	761a      	strb	r2, [r3, #24]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000e100 	.word	0xe000e100
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f1c3 0307 	rsb	r3, r3, #7
 8002282:	2b04      	cmp	r3, #4
 8002284:	bf28      	it	cs
 8002286:	2304      	movcs	r3, #4
 8002288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3304      	adds	r3, #4
 800228e:	2b06      	cmp	r3, #6
 8002290:	d902      	bls.n	8002298 <NVIC_EncodePriority+0x30>
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3b03      	subs	r3, #3
 8002296:	e000      	b.n	800229a <NVIC_EncodePriority+0x32>
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43d9      	mvns	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	4313      	orrs	r3, r2
         );
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ff4c 	bl	8002174 <__NVIC_SetPriorityGrouping>
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022f6:	f7ff ff61 	bl	80021bc <__NVIC_GetPriorityGrouping>
 80022fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	6978      	ldr	r0, [r7, #20]
 8002302:	f7ff ffb1 	bl	8002268 <NVIC_EncodePriority>
 8002306:	4602      	mov	r2, r0
 8002308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff80 	bl	8002214 <__NVIC_SetPriority>
}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff54 	bl	80021d8 <__NVIC_EnableIRQ>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d005      	beq.n	800235c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2204      	movs	r2, #4
 8002354:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e029      	b.n	80023b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 020e 	bic.w	r2, r2, #14
 800236a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	f003 021c 	and.w	r2, r3, #28
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f202 	lsl.w	r2, r1, r2
 800238e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
    }
  }
  return status;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023c8:	b2db      	uxtb	r3, r3
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e6:	e17f      	b.n	80026e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2101      	movs	r1, #1
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8171 	beq.w	80026e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d00b      	beq.n	8002420 <HAL_GPIO_Init+0x48>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d007      	beq.n	8002420 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002414:	2b11      	cmp	r3, #17
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b12      	cmp	r3, #18
 800241e:	d130      	bne.n	8002482 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002456:	2201      	movs	r2, #1
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	f003 0201 	and.w	r2, r3, #1
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b03      	cmp	r3, #3
 800248c:	d118      	bne.n	80024c0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002494:	2201      	movs	r2, #1
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	08db      	lsrs	r3, r3, #3
 80024aa:	f003 0201 	and.w	r2, r3, #1
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x128>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b12      	cmp	r3, #18
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	6939      	ldr	r1, [r7, #16]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80ac 	beq.w	80026e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	4b5f      	ldr	r3, [pc, #380]	; (8002708 <HAL_GPIO_Init+0x330>)
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	4a5e      	ldr	r2, [pc, #376]	; (8002708 <HAL_GPIO_Init+0x330>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6613      	str	r3, [r2, #96]	; 0x60
 8002596:	4b5c      	ldr	r3, [pc, #368]	; (8002708 <HAL_GPIO_Init+0x330>)
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025a2:	4a5a      	ldr	r2, [pc, #360]	; (800270c <HAL_GPIO_Init+0x334>)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	3302      	adds	r3, #2
 80025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	220f      	movs	r2, #15
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025cc:	d025      	beq.n	800261a <HAL_GPIO_Init+0x242>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4f      	ldr	r2, [pc, #316]	; (8002710 <HAL_GPIO_Init+0x338>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01f      	beq.n	8002616 <HAL_GPIO_Init+0x23e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4e      	ldr	r2, [pc, #312]	; (8002714 <HAL_GPIO_Init+0x33c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d019      	beq.n	8002612 <HAL_GPIO_Init+0x23a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4d      	ldr	r2, [pc, #308]	; (8002718 <HAL_GPIO_Init+0x340>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_GPIO_Init+0x236>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4c      	ldr	r2, [pc, #304]	; (800271c <HAL_GPIO_Init+0x344>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00d      	beq.n	800260a <HAL_GPIO_Init+0x232>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4b      	ldr	r2, [pc, #300]	; (8002720 <HAL_GPIO_Init+0x348>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d007      	beq.n	8002606 <HAL_GPIO_Init+0x22e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4a      	ldr	r2, [pc, #296]	; (8002724 <HAL_GPIO_Init+0x34c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_GPIO_Init+0x22a>
 80025fe:	2306      	movs	r3, #6
 8002600:	e00c      	b.n	800261c <HAL_GPIO_Init+0x244>
 8002602:	2307      	movs	r3, #7
 8002604:	e00a      	b.n	800261c <HAL_GPIO_Init+0x244>
 8002606:	2305      	movs	r3, #5
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x244>
 800260a:	2304      	movs	r3, #4
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x244>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x244>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x244>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x244>
 800261a:	2300      	movs	r3, #0
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	f002 0203 	and.w	r2, r2, #3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4093      	lsls	r3, r2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800262c:	4937      	ldr	r1, [pc, #220]	; (800270c <HAL_GPIO_Init+0x334>)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800263a:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_GPIO_Init+0x350>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800265e:	4a32      	ldr	r2, [pc, #200]	; (8002728 <HAL_GPIO_Init+0x350>)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002664:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_GPIO_Init+0x350>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	43db      	mvns	r3, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002688:	4a27      	ldr	r2, [pc, #156]	; (8002728 <HAL_GPIO_Init+0x350>)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <HAL_GPIO_Init+0x350>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026b2:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_GPIO_Init+0x350>)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_GPIO_Init+0x350>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_GPIO_Init+0x350>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f47f ae78 	bne.w	80023e8 <HAL_GPIO_Init+0x10>
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	40010000 	.word	0x40010000
 8002710:	48000400 	.word	0x48000400
 8002714:	48000800 	.word	0x48000800
 8002718:	48000c00 	.word	0x48000c00
 800271c:	48001000 	.word	0x48001000
 8002720:	48001400 	.word	0x48001400
 8002724:	48001800 	.word	0x48001800
 8002728:	40010400 	.word	0x40010400

0800272c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e081      	b.n	8002842 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d106      	bne.n	8002758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fa8c 	bl	8001c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2224      	movs	r2, #36	; 0x24
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800277c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800278c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d107      	bne.n	80027a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e006      	b.n	80027b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d104      	bne.n	80027c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	ea42 0103 	orr.w	r1, r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	021a      	lsls	r2, r3, #8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69d9      	ldr	r1, [r3, #28]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	4608      	mov	r0, r1
 8002856:	4611      	mov	r1, r2
 8002858:	461a      	mov	r2, r3
 800285a:	4603      	mov	r3, r0
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	460b      	mov	r3, r1
 8002860:	813b      	strh	r3, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b20      	cmp	r3, #32
 8002870:	f040 80f9 	bne.w	8002a66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_I2C_Mem_Write+0x34>
 800287a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800287c:	2b00      	cmp	r3, #0
 800287e:	d105      	bne.n	800288c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0ed      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_I2C_Mem_Write+0x4e>
 8002896:	2302      	movs	r3, #2
 8002898:	e0e6      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028a2:	f7ff fc5b 	bl	800215c <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2319      	movs	r3, #25
 80028ae:	2201      	movs	r2, #1
 80028b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 ffd8 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0d1      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2221      	movs	r2, #33	; 0x21
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2240      	movs	r2, #64	; 0x40
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ec:	88f8      	ldrh	r0, [r7, #6]
 80028ee:	893a      	ldrh	r2, [r7, #8]
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	4603      	mov	r3, r0
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fb91 	bl	8003024 <I2C_RequestMemoryWrite>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0a9      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2bff      	cmp	r3, #255	; 0xff
 800291c:	d90e      	bls.n	800293c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	22ff      	movs	r2, #255	; 0xff
 8002922:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	b2da      	uxtb	r2, r3
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	2300      	movs	r3, #0
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f001 f8bb 	bl	8003ab0 <I2C_TransferConfig>
 800293a:	e00f      	b.n	800295c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	b2da      	uxtb	r2, r3
 800294c:	8979      	ldrh	r1, [r7, #10]
 800294e:	2300      	movs	r3, #0
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f001 f8aa 	bl	8003ab0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 ffc2 	bl	80038ea <I2C_WaitOnTXISFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e07b      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d034      	beq.n	8002a14 <HAL_I2C_Mem_Write+0x1c8>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d130      	bne.n	8002a14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	2200      	movs	r2, #0
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 ff54 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e04d      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2bff      	cmp	r3, #255	; 0xff
 80029d4:	d90e      	bls.n	80029f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	22ff      	movs	r2, #255	; 0xff
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	8979      	ldrh	r1, [r7, #10]
 80029e4:	2300      	movs	r3, #0
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f001 f85f 	bl	8003ab0 <I2C_TransferConfig>
 80029f2:	e00f      	b.n	8002a14 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	8979      	ldrh	r1, [r7, #10]
 8002a06:	2300      	movs	r3, #0
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f001 f84e 	bl	8003ab0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d19e      	bne.n	800295c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 ffa1 	bl	800396a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e01a      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2220      	movs	r2, #32
 8002a38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_I2C_Mem_Write+0x224>)
 8002a46:	400b      	ands	r3, r1
 8002a48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	fe00e800 	.word	0xfe00e800

08002a74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	460b      	mov	r3, r1
 8002a88:	813b      	strh	r3, [r7, #8]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	f040 80fd 	bne.w	8002c96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x34>
 8002aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0f1      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_I2C_Mem_Read+0x4e>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e0ea      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aca:	f7ff fb47 	bl	800215c <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2319      	movs	r3, #25
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fec4 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0d5      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2222      	movs	r2, #34	; 0x22
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2240      	movs	r2, #64	; 0x40
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a3a      	ldr	r2, [r7, #32]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b14:	88f8      	ldrh	r0, [r7, #6]
 8002b16:	893a      	ldrh	r2, [r7, #8]
 8002b18:	8979      	ldrh	r1, [r7, #10]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	4603      	mov	r3, r0
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fad1 	bl	80030cc <I2C_RequestMemoryRead>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0ad      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2bff      	cmp	r3, #255	; 0xff
 8002b44:	d90e      	bls.n	8002b64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	8979      	ldrh	r1, [r7, #10]
 8002b54:	4b52      	ldr	r3, [pc, #328]	; (8002ca0 <HAL_I2C_Mem_Read+0x22c>)
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 ffa7 	bl	8003ab0 <I2C_TransferConfig>
 8002b62:	e00f      	b.n	8002b84 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	8979      	ldrh	r1, [r7, #10]
 8002b76:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <HAL_I2C_Mem_Read+0x22c>)
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 ff96 	bl	8003ab0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fe6b 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e07c      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d034      	beq.n	8002c44 <HAL_I2C_Mem_Read+0x1d0>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d130      	bne.n	8002c44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	2200      	movs	r2, #0
 8002bea:	2180      	movs	r1, #128	; 0x80
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fe3c 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e04d      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2bff      	cmp	r3, #255	; 0xff
 8002c04:	d90e      	bls.n	8002c24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	22ff      	movs	r2, #255	; 0xff
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	8979      	ldrh	r1, [r7, #10]
 8002c14:	2300      	movs	r3, #0
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 ff47 	bl	8003ab0 <I2C_TransferConfig>
 8002c22:	e00f      	b.n	8002c44 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	8979      	ldrh	r1, [r7, #10]
 8002c36:	2300      	movs	r3, #0
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 ff36 	bl	8003ab0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d19a      	bne.n	8002b84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fe89 	bl	800396a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e01a      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2220      	movs	r2, #32
 8002c68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_I2C_Mem_Read+0x230>)
 8002c76:	400b      	ands	r3, r1
 8002c78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	80002400 	.word	0x80002400
 8002ca4:	fe00e800 	.word	0xfe00e800

08002ca8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	68f9      	ldr	r1, [r7, #12]
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_I2C_ER_IRQHandler+0x46>
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	09db      	lsrs	r3, r3, #7
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d20:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	0a9b      	lsrs	r3, r3, #10
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <HAL_I2C_ER_IRQHandler+0x74>
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	09db      	lsrs	r3, r3, #7
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f043 0208 	orr.w	r2, r3, #8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	0a5b      	lsrs	r3, r3, #9
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_I2C_ER_IRQHandler+0xa2>
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	09db      	lsrs	r3, r3, #7
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	f043 0202 	orr.w	r2, r3, #2
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 030b 	and.w	r3, r3, #11
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002d8e:	68f9      	ldr	r1, [r7, #12]
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fc31 	bl	80035f8 <I2C_ITError>
  }
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	70fb      	strb	r3, [r7, #3]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <I2C_Slave_ISR_IT+0x24>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e0ec      	b.n	800301c <I2C_Slave_ISR_IT+0x1fe>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <I2C_Slave_ISR_IT+0x4c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002e62:	6939      	ldr	r1, [r7, #16]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fa67 	bl	8003338 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d04d      	beq.n	8002f12 <I2C_Slave_ISR_IT+0xf4>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d047      	beq.n	8002f12 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d128      	bne.n	8002ede <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b28      	cmp	r3, #40	; 0x28
 8002e96:	d108      	bne.n	8002eaa <I2C_Slave_ISR_IT+0x8c>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e9e:	d104      	bne.n	8002eaa <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ea0:	6939      	ldr	r1, [r7, #16]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fb52 	bl	800354c <I2C_ITListenCplt>
 8002ea8:	e032      	b.n	8002f10 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b29      	cmp	r3, #41	; 0x29
 8002eb4:	d10e      	bne.n	8002ed4 <I2C_Slave_ISR_IT+0xb6>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ebc:	d00a      	beq.n	8002ed4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2210      	movs	r2, #16
 8002ec4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fc8d 	bl	80037e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f9d5 	bl	800327c <I2C_ITSlaveSeqCplt>
 8002ed2:	e01d      	b.n	8002f10 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002edc:	e096      	b.n	800300c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f043 0204 	orr.w	r2, r3, #4
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <I2C_Slave_ISR_IT+0xe4>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efe:	f040 8085 	bne.w	800300c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4619      	mov	r1, r3
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fb75 	bl	80035f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f0e:	e07d      	b.n	800300c <I2C_Slave_ISR_IT+0x1ee>
 8002f10:	e07c      	b.n	800300c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d030      	beq.n	8002f80 <I2C_Slave_ISR_IT+0x162>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d02a      	beq.n	8002f80 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d018      	beq.n	8002f66 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d14f      	bne.n	8003010 <I2C_Slave_ISR_IT+0x1f2>
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f76:	d04b      	beq.n	8003010 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f97f 	bl	800327c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002f7e:	e047      	b.n	8003010 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	08db      	lsrs	r3, r3, #3
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	08db      	lsrs	r3, r3, #3
 8002f90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002f98:	6939      	ldr	r1, [r7, #16]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f8ea 	bl	8003174 <I2C_ITAddrCplt>
 8002fa0:	e037      	b.n	8003012 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d031      	beq.n	8003012 <I2C_Slave_ISR_IT+0x1f4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d02b      	beq.n	8003012 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d018      	beq.n	8002ff6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
 8002ff4:	e00d      	b.n	8003012 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ffc:	d002      	beq.n	8003004 <I2C_Slave_ISR_IT+0x1e6>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f939 	bl	800327c <I2C_ITSlaveSeqCplt>
 800300a:	e002      	b.n	8003012 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800300c:	bf00      	nop
 800300e:	e000      	b.n	8003012 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003010:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	817b      	strh	r3, [r7, #10]
 8003036:	460b      	mov	r3, r1
 8003038:	813b      	strh	r3, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	8979      	ldrh	r1, [r7, #10]
 8003044:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <I2C_RequestMemoryWrite+0xa4>)
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fd2f 	bl	8003ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	69b9      	ldr	r1, [r7, #24]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fc47 	bl	80038ea <I2C_WaitOnTXISFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e02c      	b.n	80030c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800306c:	893b      	ldrh	r3, [r7, #8]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
 8003076:	e015      	b.n	80030a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003078:	893b      	ldrh	r3, [r7, #8]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	b29b      	uxth	r3, r3
 800307e:	b2da      	uxtb	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	69b9      	ldr	r1, [r7, #24]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fc2d 	bl	80038ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e012      	b.n	80030c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800309a:	893b      	ldrh	r3, [r7, #8]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2200      	movs	r2, #0
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fbdb 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	80002000 	.word	0x80002000

080030cc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	460b      	mov	r3, r1
 80030e0:	813b      	strh	r3, [r7, #8]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	8979      	ldrh	r1, [r7, #10]
 80030ec:	4b20      	ldr	r3, [pc, #128]	; (8003170 <I2C_RequestMemoryRead+0xa4>)
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2300      	movs	r3, #0
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fcdc 	bl	8003ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	69b9      	ldr	r1, [r7, #24]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fbf4 	bl	80038ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e02c      	b.n	8003166 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d105      	bne.n	800311e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003112:	893b      	ldrh	r3, [r7, #8]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
 800311c:	e015      	b.n	800314a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800311e:	893b      	ldrh	r3, [r7, #8]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	b29b      	uxth	r3, r3
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	69b9      	ldr	r1, [r7, #24]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fbda 	bl	80038ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e012      	b.n	8003166 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003140:	893b      	ldrh	r3, [r7, #8]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2200      	movs	r2, #0
 8003152:	2140      	movs	r1, #64	; 0x40
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fb88 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	80002000 	.word	0x80002000

08003174 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800318a:	2b28      	cmp	r3, #40	; 0x28
 800318c:	d16a      	bne.n	8003264 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	0c1b      	lsrs	r3, r3, #16
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80031ac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80031c8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d138      	bne.n	8003244 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80031d2:	897b      	ldrh	r3, [r7, #10]
 80031d4:	09db      	lsrs	r3, r3, #7
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	89bb      	ldrh	r3, [r7, #12]
 80031da:	4053      	eors	r3, r2
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f003 0306 	and.w	r3, r3, #6
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d11c      	bne.n	8003220 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d13b      	bne.n	8003274 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2208      	movs	r2, #8
 8003208:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003212:	89ba      	ldrh	r2, [r7, #12]
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	4619      	mov	r1, r3
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff fdd4 	bl	8002dc6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800321e:	e029      	b.n	8003274 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003220:	893b      	ldrh	r3, [r7, #8]
 8003222:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fc6f 	bl	8003b0c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003236:	89ba      	ldrh	r2, [r7, #12]
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff fdc2 	bl	8002dc6 <HAL_I2C_AddrCallback>
}
 8003242:	e017      	b.n	8003274 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fc5f 	bl	8003b0c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003256:	89ba      	ldrh	r2, [r7, #12]
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fdb2 	bl	8002dc6 <HAL_I2C_AddrCallback>
}
 8003262:	e007      	b.n	8003274 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2208      	movs	r2, #8
 800326a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	0b9b      	lsrs	r3, r3, #14
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e00d      	b.n	80032ce <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	0bdb      	lsrs	r3, r3, #15
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b29      	cmp	r3, #41	; 0x29
 80032d8:	d112      	bne.n	8003300 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2228      	movs	r2, #40	; 0x28
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2221      	movs	r2, #33	; 0x21
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032e8:	2101      	movs	r1, #1
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fc0e 	bl	8003b0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff fd50 	bl	8002d9e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80032fe:	e017      	b.n	8003330 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b2a      	cmp	r3, #42	; 0x2a
 800330a:	d111      	bne.n	8003330 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2228      	movs	r2, #40	; 0x28
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2222      	movs	r2, #34	; 0x22
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800331a:	2102      	movs	r1, #2
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fbf5 	bl	8003b0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff fd41 	bl	8002db2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003354:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2220      	movs	r2, #32
 800335c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b21      	cmp	r3, #33	; 0x21
 8003362:	d002      	beq.n	800336a <I2C_ITSlaveCplt+0x32>
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b29      	cmp	r3, #41	; 0x29
 8003368:	d108      	bne.n	800337c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800336a:	f248 0101 	movw	r1, #32769	; 0x8001
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fbcc 	bl	8003b0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2221      	movs	r2, #33	; 0x21
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
 800337a:	e00d      	b.n	8003398 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2b22      	cmp	r3, #34	; 0x22
 8003380:	d002      	beq.n	8003388 <I2C_ITSlaveCplt+0x50>
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b2a      	cmp	r3, #42	; 0x2a
 8003386:	d107      	bne.n	8003398 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003388:	f248 0102 	movw	r1, #32770	; 0x8002
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fbbd 	bl	8003b0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2222      	movs	r2, #34	; 0x22
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033a6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4b64      	ldr	r3, [pc, #400]	; (8003544 <I2C_ITSlaveCplt+0x20c>)
 80033b4:	400b      	ands	r3, r1
 80033b6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fa14 	bl	80037e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	0b9b      	lsrs	r3, r3, #14
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d013      	beq.n	80033f2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d020      	beq.n	8003424 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033f0:	e018      	b.n	8003424 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	0bdb      	lsrs	r3, r3, #15
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d012      	beq.n	8003424 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800340c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d006      	beq.n	8003424 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d020      	beq.n	8003472 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f023 0304 	bic.w	r3, r3, #4
 8003436:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00c      	beq.n	8003472 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	f043 0204 	orr.w	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	2b00      	cmp	r3, #0
 800349c:	d010      	beq.n	80034c0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f8a7 	bl	80035f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b28      	cmp	r3, #40	; 0x28
 80034b4:	d141      	bne.n	800353a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80034b6:	6979      	ldr	r1, [r7, #20]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f847 	bl	800354c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034be:	e03c      	b.n	800353a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c8:	d014      	beq.n	80034f4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff fed6 	bl	800327c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <I2C_ITSlaveCplt+0x210>)
 80034d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fc78 	bl	8002de2 <HAL_I2C_ListenCpltCallback>
}
 80034f2:	e022      	b.n	800353a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b22      	cmp	r3, #34	; 0x22
 80034fe:	d10e      	bne.n	800351e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff fc4b 	bl	8002db2 <HAL_I2C_SlaveRxCpltCallback>
}
 800351c:	e00d      	b.n	800353a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff fc32 	bl	8002d9e <HAL_I2C_SlaveTxCpltCallback>
}
 800353a:	bf00      	nop
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	fe00e800 	.word	0xfe00e800
 8003548:	ffff0000 	.word	0xffff0000

0800354c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <I2C_ITListenCplt+0xa8>)
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d022      	beq.n	80035ca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d012      	beq.n	80035ca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f043 0204 	orr.w	r2, r3, #4
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035ca:	f248 0103 	movw	r1, #32771	; 0x8003
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa9c 	bl	8003b0c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2210      	movs	r2, #16
 80035da:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff fbfc 	bl	8002de2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	ffff0000 	.word	0xffff0000

080035f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003608:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a5d      	ldr	r2, [pc, #372]	; (800378c <I2C_ITError+0x194>)
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	2b28      	cmp	r3, #40	; 0x28
 800362e:	d005      	beq.n	800363c <I2C_ITError+0x44>
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b29      	cmp	r3, #41	; 0x29
 8003634:	d002      	beq.n	800363c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b2a      	cmp	r3, #42	; 0x2a
 800363a:	d10b      	bne.n	8003654 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800363c:	2103      	movs	r1, #3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa64 	bl	8003b0c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2228      	movs	r2, #40	; 0x28
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a50      	ldr	r2, [pc, #320]	; (8003790 <I2C_ITError+0x198>)
 8003650:	635a      	str	r2, [r3, #52]	; 0x34
 8003652:	e011      	b.n	8003678 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003654:	f248 0103 	movw	r1, #32771	; 0x8003
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fa57 	bl	8003b0c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b60      	cmp	r3, #96	; 0x60
 8003668:	d003      	beq.n	8003672 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	2b00      	cmp	r3, #0
 8003684:	d039      	beq.n	80036fa <I2C_ITError+0x102>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b11      	cmp	r3, #17
 800368a:	d002      	beq.n	8003692 <I2C_ITError+0x9a>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b21      	cmp	r3, #33	; 0x21
 8003690:	d133      	bne.n	80036fa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a0:	d107      	bne.n	80036b2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fe7f 	bl	80023ba <HAL_DMA_GetState>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d017      	beq.n	80036f2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	4a33      	ldr	r2, [pc, #204]	; (8003794 <I2C_ITError+0x19c>)
 80036c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe fe2e 	bl	8002338 <HAL_DMA_Abort_IT>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d04d      	beq.n	800377e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036ec:	4610      	mov	r0, r2
 80036ee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036f0:	e045      	b.n	800377e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f850 	bl	8003798 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036f8:	e041      	b.n	800377e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d039      	beq.n	8003776 <I2C_ITError+0x17e>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b12      	cmp	r3, #18
 8003706:	d002      	beq.n	800370e <I2C_ITError+0x116>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b22      	cmp	r3, #34	; 0x22
 800370c:	d133      	bne.n	8003776 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371c:	d107      	bne.n	800372e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800372c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe fe41 	bl	80023ba <HAL_DMA_GetState>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d017      	beq.n	800376e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <I2C_ITError+0x19c>)
 8003744:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe fdf0 	bl	8002338 <HAL_DMA_Abort_IT>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d011      	beq.n	8003782 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003768:	4610      	mov	r0, r2
 800376a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800376c:	e009      	b.n	8003782 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f812 	bl	8003798 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003774:	e005      	b.n	8003782 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f80e 	bl	8003798 <I2C_TreatErrorCallback>
  }
}
 800377c:	e002      	b.n	8003784 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800377e:	bf00      	nop
 8003780:	e000      	b.n	8003784 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003782:	bf00      	nop
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	ffff0000 	.word	0xffff0000
 8003790:	08002e1f 	.word	0x08002e1f
 8003794:	0800382f 	.word	0x0800382f

08003798 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b60      	cmp	r3, #96	; 0x60
 80037aa:	d10e      	bne.n	80037ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fb21 	bl	8002e0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037c8:	e009      	b.n	80037de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fb0c 	bl	8002df6 <HAL_I2C_ErrorCallback>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d103      	bne.n	8003804 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2200      	movs	r2, #0
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d007      	beq.n	8003822 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	619a      	str	r2, [r3, #24]
  }
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	2200      	movs	r2, #0
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	2200      	movs	r2, #0
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7ff ff9b 	bl	8003798 <I2C_TreatErrorCallback>
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	4613      	mov	r3, r2
 8003878:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800387a:	e022      	b.n	80038c2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003882:	d01e      	beq.n	80038c2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003884:	f7fe fc6a 	bl	800215c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d302      	bcc.n	800389a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d113      	bne.n	80038c2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f043 0220 	orr.w	r2, r3, #32
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e00f      	b.n	80038e2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d0cd      	beq.n	800387c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038f6:	e02c      	b.n	8003952 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f871 	bl	80039e4 <I2C_IsAcknowledgeFailed>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e02a      	b.n	8003962 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003912:	d01e      	beq.n	8003952 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003914:	f7fe fc22 	bl	800215c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	429a      	cmp	r2, r3
 8003922:	d302      	bcc.n	800392a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d113      	bne.n	8003952 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e007      	b.n	8003962 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d1cb      	bne.n	80038f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003976:	e028      	b.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f831 	bl	80039e4 <I2C_IsAcknowledgeFailed>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e026      	b.n	80039da <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7fe fbe6 	bl	800215c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d113      	bne.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e007      	b.n	80039da <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d1cf      	bne.n	8003978 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b10      	cmp	r3, #16
 80039fc:	d151      	bne.n	8003aa2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039fe:	e022      	b.n	8003a46 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a06:	d01e      	beq.n	8003a46 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a08:	f7fe fba8 	bl	800215c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d302      	bcc.n	8003a1e <I2C_IsAcknowledgeFailed+0x3a>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d113      	bne.n	8003a46 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e02e      	b.n	8003aa4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d1d5      	bne.n	8003a00 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2210      	movs	r2, #16
 8003a5a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2220      	movs	r2, #32
 8003a62:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff febe 	bl	80037e6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <I2C_IsAcknowledgeFailed+0xc8>)
 8003a76:	400b      	ands	r3, r1
 8003a78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f043 0204 	orr.w	r2, r3, #4
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	fe00e800 	.word	0xfe00e800

08003ab0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	817b      	strh	r3, [r7, #10]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	0d5b      	lsrs	r3, r3, #21
 8003acc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <I2C_TransferConfig+0x58>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	ea02 0103 	and.w	r1, r2, r3
 8003ada:	897b      	ldrh	r3, [r7, #10]
 8003adc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ae0:	7a7b      	ldrb	r3, [r7, #9]
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	03ff63ff 	.word	0x03ff63ff

08003b0c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b1c:	887b      	ldrh	r3, [r7, #2]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00f      	beq.n	8003b46 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003b2c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b3a:	2b28      	cmp	r3, #40	; 0x28
 8003b3c:	d003      	beq.n	8003b46 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b44:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00f      	beq.n	8003b70 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003b56:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b64:	2b28      	cmp	r3, #40	; 0x28
 8003b66:	d003      	beq.n	8003b70 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b6e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da03      	bge.n	8003b80 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b80:	887b      	ldrh	r3, [r7, #2]
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d103      	bne.n	8003b8e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b8e:	887b      	ldrh	r3, [r7, #2]
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d103      	bne.n	8003b9c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f043 0320 	orr.w	r3, r3, #32
 8003b9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d103      	bne.n	8003baa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	400a      	ands	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d138      	bne.n	8003c50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e032      	b.n	8003c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2224      	movs	r2, #36	; 0x24
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6819      	ldr	r1, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d139      	bne.n	8003ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e033      	b.n	8003cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2224      	movs	r2, #36	; 0x24
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40007000 	.word	0x40007000

08003d14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d22:	d130      	bne.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d24:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d30:	d038      	beq.n	8003da4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d3a:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2232      	movs	r2, #50	; 0x32
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	0c9b      	lsrs	r3, r3, #18
 8003d54:	3301      	adds	r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d58:	e002      	b.n	8003d60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6c:	d102      	bne.n	8003d74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f2      	bne.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d80:	d110      	bne.n	8003da4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e00f      	b.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d92:	d007      	beq.n	8003da4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d9c:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003da2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40007000 	.word	0x40007000
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	431bde83 	.word	0x431bde83

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e3d4      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd2:	4ba1      	ldr	r3, [pc, #644]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ddc:	4b9e      	ldr	r3, [pc, #632]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80e4 	beq.w	8003fbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <HAL_RCC_OscConfig+0x4a>
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	f040 808b 	bne.w	8003f18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	f040 8087 	bne.w	8003f18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e0a:	4b93      	ldr	r3, [pc, #588]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_RCC_OscConfig+0x62>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e3ac      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1a      	ldr	r2, [r3, #32]
 8003e26:	4b8c      	ldr	r3, [pc, #560]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <HAL_RCC_OscConfig+0x7c>
 8003e32:	4b89      	ldr	r3, [pc, #548]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e3a:	e005      	b.n	8003e48 <HAL_RCC_OscConfig+0x88>
 8003e3c:	4b86      	ldr	r3, [pc, #536]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d223      	bcs.n	8003e94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fd73 	bl	800493c <RCC_SetFlashLatencyFromMSIRange>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e38d      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e60:	4b7d      	ldr	r3, [pc, #500]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a7c      	ldr	r2, [pc, #496]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e66:	f043 0308 	orr.w	r3, r3, #8
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b7a      	ldr	r3, [pc, #488]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	4977      	ldr	r1, [pc, #476]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e7e:	4b76      	ldr	r3, [pc, #472]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	4972      	ldr	r1, [pc, #456]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
 8003e92:	e025      	b.n	8003ee0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e94:	4b70      	ldr	r3, [pc, #448]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a6f      	ldr	r2, [pc, #444]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e9a:	f043 0308 	orr.w	r3, r3, #8
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b6d      	ldr	r3, [pc, #436]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	496a      	ldr	r1, [pc, #424]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eb2:	4b69      	ldr	r3, [pc, #420]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	4965      	ldr	r1, [pc, #404]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fd33 	bl	800493c <RCC_SetFlashLatencyFromMSIRange>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e34d      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ee0:	f000 fc36 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b5c      	ldr	r3, [pc, #368]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	495a      	ldr	r1, [pc, #360]	; (800405c <HAL_RCC_OscConfig+0x29c>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8003efc:	4a58      	ldr	r2, [pc, #352]	; (8004060 <HAL_RCC_OscConfig+0x2a0>)
 8003efe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f00:	4b58      	ldr	r3, [pc, #352]	; (8004064 <HAL_RCC_OscConfig+0x2a4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fd ff49 	bl	8001d9c <HAL_InitTick>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d052      	beq.n	8003fba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	e331      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d032      	beq.n	8003f86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f20:	4b4d      	ldr	r3, [pc, #308]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a4c      	ldr	r2, [pc, #304]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f2c:	f7fe f916 	bl	800215c <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f34:	f7fe f912 	bl	800215c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e31a      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f46:	4b44      	ldr	r3, [pc, #272]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f52:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a40      	ldr	r2, [pc, #256]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f58:	f043 0308 	orr.w	r3, r3, #8
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	493b      	ldr	r1, [pc, #236]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f70:	4b39      	ldr	r3, [pc, #228]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	4936      	ldr	r1, [pc, #216]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	e01a      	b.n	8003fbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a33      	ldr	r2, [pc, #204]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f92:	f7fe f8e3 	bl	800215c <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f9a:	f7fe f8df 	bl	800215c <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e2e7      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x1da>
 8003fb8:	e000      	b.n	8003fbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d074      	beq.n	80040b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_OscConfig+0x21a>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d10e      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fda:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d064      	beq.n	80040b0 <HAL_RCC_OscConfig+0x2f0>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d160      	bne.n	80040b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e2c4      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffa:	d106      	bne.n	800400a <HAL_RCC_OscConfig+0x24a>
 8003ffc:	4b16      	ldr	r3, [pc, #88]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a15      	ldr	r2, [pc, #84]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	e01d      	b.n	8004046 <HAL_RCC_OscConfig+0x286>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004012:	d10c      	bne.n	800402e <HAL_RCC_OscConfig+0x26e>
 8004014:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0f      	ldr	r2, [pc, #60]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 800401a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a0c      	ldr	r2, [pc, #48]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e00b      	b.n	8004046 <HAL_RCC_OscConfig+0x286>
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a06      	ldr	r2, [pc, #24]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004044:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01c      	beq.n	8004088 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fe f885 	bl	800215c <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004054:	e011      	b.n	800407a <HAL_RCC_OscConfig+0x2ba>
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	0800da84 	.word	0x0800da84
 8004060:	20000000 	.word	0x20000000
 8004064:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7fe f878 	bl	800215c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e280      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800407a:	4baf      	ldr	r3, [pc, #700]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCC_OscConfig+0x2a8>
 8004086:	e014      	b.n	80040b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fe f868 	bl	800215c <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004090:	f7fe f864 	bl	800215c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e26c      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040a2:	4ba5      	ldr	r3, [pc, #660]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x2d0>
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d060      	beq.n	8004180 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_OscConfig+0x310>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d119      	bne.n	80040fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d116      	bne.n	80040fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d0:	4b99      	ldr	r3, [pc, #612]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_OscConfig+0x328>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e249      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b93      	ldr	r3, [pc, #588]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	4990      	ldr	r1, [pc, #576]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040fc:	e040      	b.n	8004180 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d023      	beq.n	800414e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004106:	4b8c      	ldr	r3, [pc, #560]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a8b      	ldr	r2, [pc, #556]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800410c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7fe f823 	bl	800215c <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800411a:	f7fe f81f 	bl	800215c <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e227      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412c:	4b82      	ldr	r3, [pc, #520]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004138:	4b7f      	ldr	r3, [pc, #508]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	497c      	ldr	r1, [pc, #496]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
 800414c:	e018      	b.n	8004180 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800414e:	4b7a      	ldr	r3, [pc, #488]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a79      	ldr	r2, [pc, #484]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fd ffff 	bl	800215c <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004162:	f7fd fffb 	bl	800215c <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e203      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004174:	4b70      	ldr	r3, [pc, #448]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d03c      	beq.n	8004206 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01c      	beq.n	80041ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004194:	4b68      	ldr	r3, [pc, #416]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419a:	4a67      	ldr	r2, [pc, #412]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a4:	f7fd ffda 	bl	800215c <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ac:	f7fd ffd6 	bl	800215c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e1de      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041be:	4b5e      	ldr	r3, [pc, #376]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80041c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ef      	beq.n	80041ac <HAL_RCC_OscConfig+0x3ec>
 80041cc:	e01b      	b.n	8004206 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ce:	4b5a      	ldr	r3, [pc, #360]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80041d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d4:	4a58      	ldr	r2, [pc, #352]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fd ffbd 	bl	800215c <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e6:	f7fd ffb9 	bl	800215c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e1c1      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f8:	4b4f      	ldr	r3, [pc, #316]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1ef      	bne.n	80041e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80a6 	beq.w	8004360 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004214:	2300      	movs	r3, #0
 8004216:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004218:	4b47      	ldr	r3, [pc, #284]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10d      	bne.n	8004240 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004224:	4b44      	ldr	r3, [pc, #272]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004228:	4a43      	ldr	r2, [pc, #268]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800422a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422e:	6593      	str	r3, [r2, #88]	; 0x58
 8004230:	4b41      	ldr	r3, [pc, #260]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800423c:	2301      	movs	r3, #1
 800423e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004240:	4b3e      	ldr	r3, [pc, #248]	; (800433c <HAL_RCC_OscConfig+0x57c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d118      	bne.n	800427e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800424c:	4b3b      	ldr	r3, [pc, #236]	; (800433c <HAL_RCC_OscConfig+0x57c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3a      	ldr	r2, [pc, #232]	; (800433c <HAL_RCC_OscConfig+0x57c>)
 8004252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004256:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004258:	f7fd ff80 	bl	800215c <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004260:	f7fd ff7c 	bl	800215c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e184      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004272:	4b32      	ldr	r3, [pc, #200]	; (800433c <HAL_RCC_OscConfig+0x57c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d108      	bne.n	8004298 <HAL_RCC_OscConfig+0x4d8>
 8004286:	4b2c      	ldr	r3, [pc, #176]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	4a2a      	ldr	r2, [pc, #168]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004296:	e024      	b.n	80042e2 <HAL_RCC_OscConfig+0x522>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b05      	cmp	r3, #5
 800429e:	d110      	bne.n	80042c2 <HAL_RCC_OscConfig+0x502>
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	4a24      	ldr	r2, [pc, #144]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	4a20      	ldr	r2, [pc, #128]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c0:	e00f      	b.n	80042e2 <HAL_RCC_OscConfig+0x522>
 80042c2:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c8:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d2:	4b19      	ldr	r3, [pc, #100]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	4a17      	ldr	r2, [pc, #92]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fd ff37 	bl	800215c <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fd ff33 	bl	800215c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e139      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004308:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ed      	beq.n	80042f2 <HAL_RCC_OscConfig+0x532>
 8004316:	e01a      	b.n	800434e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fd ff20 	bl	800215c <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800431e:	e00f      	b.n	8004340 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fd ff1c 	bl	800215c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d906      	bls.n	8004340 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e122      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004340:	4b90      	ldr	r3, [pc, #576]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e8      	bne.n	8004320 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800434e:	7ffb      	ldrb	r3, [r7, #31]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d105      	bne.n	8004360 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004354:	4b8b      	ldr	r3, [pc, #556]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	4a8a      	ldr	r2, [pc, #552]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 800435a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8108 	beq.w	800457a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	2b02      	cmp	r3, #2
 8004370:	f040 80d0 	bne.w	8004514 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004374:	4b83      	ldr	r3, [pc, #524]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 0203 	and.w	r2, r3, #3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	429a      	cmp	r2, r3
 8004386:	d130      	bne.n	80043ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	3b01      	subs	r3, #1
 8004394:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d127      	bne.n	80043ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d11f      	bne.n	80043ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043b4:	2a07      	cmp	r2, #7
 80043b6:	bf14      	ite	ne
 80043b8:	2201      	movne	r2, #1
 80043ba:	2200      	moveq	r2, #0
 80043bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043be:	4293      	cmp	r3, r2
 80043c0:	d113      	bne.n	80043ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	3b01      	subs	r3, #1
 80043d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d109      	bne.n	80043ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	3b01      	subs	r3, #1
 80043e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d06e      	beq.n	80044c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	d069      	beq.n	80044c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043f0:	4b64      	ldr	r3, [pc, #400]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d105      	bne.n	8004408 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043fc:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0b7      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800440c:	4b5d      	ldr	r3, [pc, #372]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a5c      	ldr	r2, [pc, #368]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004416:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004418:	f7fd fea0 	bl	800215c <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004420:	f7fd fe9c 	bl	800215c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e0a4      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004432:	4b54      	ldr	r3, [pc, #336]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800443e:	4b51      	ldr	r3, [pc, #324]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	4b51      	ldr	r3, [pc, #324]	; (8004588 <HAL_RCC_OscConfig+0x7c8>)
 8004444:	4013      	ands	r3, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800444e:	3a01      	subs	r2, #1
 8004450:	0112      	lsls	r2, r2, #4
 8004452:	4311      	orrs	r1, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004458:	0212      	lsls	r2, r2, #8
 800445a:	4311      	orrs	r1, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004460:	0852      	lsrs	r2, r2, #1
 8004462:	3a01      	subs	r2, #1
 8004464:	0552      	lsls	r2, r2, #21
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800446c:	0852      	lsrs	r2, r2, #1
 800446e:	3a01      	subs	r2, #1
 8004470:	0652      	lsls	r2, r2, #25
 8004472:	4311      	orrs	r1, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004478:	0912      	lsrs	r2, r2, #4
 800447a:	0452      	lsls	r2, r2, #17
 800447c:	430a      	orrs	r2, r1
 800447e:	4941      	ldr	r1, [pc, #260]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004480:	4313      	orrs	r3, r2
 8004482:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004484:	4b3f      	ldr	r3, [pc, #252]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a3e      	ldr	r2, [pc, #248]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 800448a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004490:	4b3c      	ldr	r3, [pc, #240]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800449c:	f7fd fe5e 	bl	800215c <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a4:	f7fd fe5a 	bl	800215c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e062      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b6:	4b33      	ldr	r3, [pc, #204]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044c2:	e05a      	b.n	800457a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e059      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c8:	4b2e      	ldr	r3, [pc, #184]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d152      	bne.n	800457a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044d4:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044e0:	4b28      	ldr	r3, [pc, #160]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a27      	ldr	r2, [pc, #156]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044ec:	f7fd fe36 	bl	800215c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd fe32 	bl	800215c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e03a      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004506:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x734>
 8004512:	e032      	b.n	800457a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b0c      	cmp	r3, #12
 8004518:	d02d      	beq.n	8004576 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451a:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a19      	ldr	r2, [pc, #100]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004524:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4a13      	ldr	r2, [pc, #76]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004538:	f023 0303 	bic.w	r3, r3, #3
 800453c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800453e:	4b11      	ldr	r3, [pc, #68]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004544:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454e:	f7fd fe05 	bl	800215c <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004556:	f7fd fe01 	bl	800215c <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e009      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f0      	bne.n	8004556 <HAL_RCC_OscConfig+0x796>
 8004574:	e001      	b.n	800457a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	f99d808c 	.word	0xf99d808c

0800458c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0c8      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a0:	4b66      	ldr	r3, [pc, #408]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d910      	bls.n	80045d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b63      	ldr	r3, [pc, #396]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0207 	bic.w	r2, r3, #7
 80045b6:	4961      	ldr	r1, [pc, #388]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b5f      	ldr	r3, [pc, #380]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0b0      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d04c      	beq.n	8004676 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e4:	4b56      	ldr	r3, [pc, #344]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d121      	bne.n	8004634 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e09e      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d107      	bne.n	800460c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045fc:	4b50      	ldr	r3, [pc, #320]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d115      	bne.n	8004634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e092      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d107      	bne.n	8004624 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004614:	4b4a      	ldr	r3, [pc, #296]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d109      	bne.n	8004634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e086      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004624:	4b46      	ldr	r3, [pc, #280]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e07e      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004634:	4b42      	ldr	r3, [pc, #264]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 0203 	bic.w	r2, r3, #3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	493f      	ldr	r1, [pc, #252]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004646:	f7fd fd89 	bl	800215c <HAL_GetTick>
 800464a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464c:	e00a      	b.n	8004664 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464e:	f7fd fd85 	bl	800215c <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e066      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004664:	4b36      	ldr	r3, [pc, #216]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 020c 	and.w	r2, r3, #12
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	429a      	cmp	r2, r3
 8004674:	d1eb      	bne.n	800464e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004682:	4b2f      	ldr	r3, [pc, #188]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	492c      	ldr	r1, [pc, #176]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004694:	4b29      	ldr	r3, [pc, #164]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d210      	bcs.n	80046c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a2:	4b26      	ldr	r3, [pc, #152]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 0207 	bic.w	r2, r3, #7
 80046aa:	4924      	ldr	r1, [pc, #144]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e036      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d0:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4918      	ldr	r1, [pc, #96]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4910      	ldr	r1, [pc, #64]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004702:	f000 f825 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8004706:	4602      	mov	r2, r0
 8004708:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	490c      	ldr	r1, [pc, #48]	; (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 8004714:	5ccb      	ldrb	r3, [r1, r3]
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd fb38 	bl	8001d9c <HAL_InitTick>
 800472c:	4603      	mov	r3, r0
 800472e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004730:	7afb      	ldrb	r3, [r7, #11]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40022000 	.word	0x40022000
 8004740:	40021000 	.word	0x40021000
 8004744:	0800da84 	.word	0x0800da84
 8004748:	20000000 	.word	0x20000000
 800474c:	20000004 	.word	0x20000004

08004750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800475e:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <HAL_RCC_GetSysClockFreq+0x108>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004768:	4b3b      	ldr	r3, [pc, #236]	; (8004858 <HAL_RCC_GetSysClockFreq+0x108>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_GetSysClockFreq+0x34>
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d121      	bne.n	80047c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d11e      	bne.n	80047c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004784:	4b34      	ldr	r3, [pc, #208]	; (8004858 <HAL_RCC_GetSysClockFreq+0x108>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004790:	4b31      	ldr	r3, [pc, #196]	; (8004858 <HAL_RCC_GetSysClockFreq+0x108>)
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	e005      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047ac:	4a2b      	ldr	r2, [pc, #172]	; (800485c <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10d      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d102      	bne.n	80047ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047c8:	4b25      	ldr	r3, [pc, #148]	; (8004860 <HAL_RCC_GetSysClockFreq+0x110>)
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e004      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047d4:	4b23      	ldr	r3, [pc, #140]	; (8004864 <HAL_RCC_GetSysClockFreq+0x114>)
 80047d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d134      	bne.n	8004848 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047de:	4b1e      	ldr	r3, [pc, #120]	; (8004858 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d003      	beq.n	80047f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d003      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0xac>
 80047f4:	e005      	b.n	8004802 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047f6:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <HAL_RCC_GetSysClockFreq+0x110>)
 80047f8:	617b      	str	r3, [r7, #20]
      break;
 80047fa:	e005      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047fc:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_RCC_GetSysClockFreq+0x114>)
 80047fe:	617b      	str	r3, [r7, #20]
      break;
 8004800:	e002      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	617b      	str	r3, [r7, #20]
      break;
 8004806:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004808:	4b13      	ldr	r3, [pc, #76]	; (8004858 <HAL_RCC_GetSysClockFreq+0x108>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	3301      	adds	r3, #1
 8004814:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <HAL_RCC_GetSysClockFreq+0x108>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	fb02 f203 	mul.w	r2, r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800482e:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <HAL_RCC_GetSysClockFreq+0x108>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	0e5b      	lsrs	r3, r3, #25
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	3301      	adds	r3, #1
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	fbb2 f3f3 	udiv	r3, r2, r3
 8004846:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004848:	69bb      	ldr	r3, [r7, #24]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3724      	adds	r7, #36	; 0x24
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	0800da9c 	.word	0x0800da9c
 8004860:	00f42400 	.word	0x00f42400
 8004864:	007a1200 	.word	0x007a1200

08004868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800486c:	4b03      	ldr	r3, [pc, #12]	; (800487c <HAL_RCC_GetHCLKFreq+0x14>)
 800486e:	681b      	ldr	r3, [r3, #0]
}
 8004870:	4618      	mov	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000000 	.word	0x20000000

08004880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004884:	f7ff fff0 	bl	8004868 <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	0a1b      	lsrs	r3, r3, #8
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4904      	ldr	r1, [pc, #16]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000
 80048a8:	0800da94 	.word	0x0800da94

080048ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048b0:	f7ff ffda 	bl	8004868 <HAL_RCC_GetHCLKFreq>
 80048b4:	4602      	mov	r2, r0
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	0adb      	lsrs	r3, r3, #11
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	4904      	ldr	r1, [pc, #16]	; (80048d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048c2:	5ccb      	ldrb	r3, [r1, r3]
 80048c4:	f003 031f 	and.w	r3, r3, #31
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40021000 	.word	0x40021000
 80048d4:	0800da94 	.word	0x0800da94

080048d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	220f      	movs	r2, #15
 80048e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80048e8:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_RCC_GetClockConfig+0x5c>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0203 	and.w	r2, r3, #3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80048f4:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <HAL_RCC_GetClockConfig+0x5c>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <HAL_RCC_GetClockConfig+0x5c>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800490c:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCC_GetClockConfig+0x5c>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	08db      	lsrs	r3, r3, #3
 8004912:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_RCC_GetClockConfig+0x60>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0207 	and.w	r2, r3, #7
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	601a      	str	r2, [r3, #0]
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000
 8004938:	40022000 	.word	0x40022000

0800493c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004948:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004954:	f7ff f9d0 	bl	8003cf8 <HAL_PWREx_GetVoltageRange>
 8004958:	6178      	str	r0, [r7, #20]
 800495a:	e014      	b.n	8004986 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800495c:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	4a24      	ldr	r2, [pc, #144]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004966:	6593      	str	r3, [r2, #88]	; 0x58
 8004968:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004974:	f7ff f9c0 	bl	8003cf8 <HAL_PWREx_GetVoltageRange>
 8004978:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800497a:	4b1e      	ldr	r3, [pc, #120]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	4a1d      	ldr	r2, [pc, #116]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004984:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498c:	d10b      	bne.n	80049a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	d919      	bls.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2ba0      	cmp	r3, #160	; 0xa0
 8004998:	d902      	bls.n	80049a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800499a:	2302      	movs	r3, #2
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e013      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049a0:	2301      	movs	r3, #1
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	e010      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b80      	cmp	r3, #128	; 0x80
 80049aa:	d902      	bls.n	80049b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049ac:	2303      	movs	r3, #3
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	e00a      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d102      	bne.n	80049be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049b8:	2302      	movs	r3, #2
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	e004      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b70      	cmp	r3, #112	; 0x70
 80049c2:	d101      	bne.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049c4:	2301      	movs	r3, #1
 80049c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f023 0207 	bic.w	r2, r3, #7
 80049d0:	4909      	ldr	r1, [pc, #36]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049d8:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d001      	beq.n	80049ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40022000 	.word	0x40022000

080049fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a04:	2300      	movs	r3, #0
 8004a06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a08:	2300      	movs	r3, #0
 8004a0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d041      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a20:	d02a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a26:	d824      	bhi.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a2c:	d008      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a32:	d81e      	bhi.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3c:	d010      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a3e:	e018      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a40:	4b86      	ldr	r3, [pc, #536]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4a85      	ldr	r2, [pc, #532]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a4c:	e015      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3304      	adds	r3, #4
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fabb 	bl	8004fd0 <RCCEx_PLLSAI1_Config>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a5e:	e00c      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3320      	adds	r3, #32
 8004a64:	2100      	movs	r1, #0
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fba6 	bl	80051b8 <RCCEx_PLLSAI2_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a70:	e003      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	74fb      	strb	r3, [r7, #19]
      break;
 8004a76:	e000      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7a:	7cfb      	ldrb	r3, [r7, #19]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10b      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a80:	4b76      	ldr	r3, [pc, #472]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a8e:	4973      	ldr	r1, [pc, #460]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a96:	e001      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	7cfb      	ldrb	r3, [r7, #19]
 8004a9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d041      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ab0:	d02a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ab2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ab6:	d824      	bhi.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004abc:	d008      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac2:	d81e      	bhi.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004acc:	d010      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ace:	e018      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ad0:	4b62      	ldr	r3, [pc, #392]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4a61      	ldr	r2, [pc, #388]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ada:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004adc:	e015      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fa73 	bl	8004fd0 <RCCEx_PLLSAI1_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aee:	e00c      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3320      	adds	r3, #32
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fb5e 	bl	80051b8 <RCCEx_PLLSAI2_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b00:	e003      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	74fb      	strb	r3, [r7, #19]
      break;
 8004b06:	e000      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b0a:	7cfb      	ldrb	r3, [r7, #19]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10b      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b10:	4b52      	ldr	r3, [pc, #328]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b1e:	494f      	ldr	r1, [pc, #316]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b26:	e001      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b28:	7cfb      	ldrb	r3, [r7, #19]
 8004b2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80a0 	beq.w	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b3e:	4b47      	ldr	r3, [pc, #284]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b54:	4b41      	ldr	r3, [pc, #260]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b58:	4a40      	ldr	r2, [pc, #256]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b60:	4b3e      	ldr	r3, [pc, #248]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b70:	4b3b      	ldr	r3, [pc, #236]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a3a      	ldr	r2, [pc, #232]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b7c:	f7fd faee 	bl	800215c <HAL_GetTick>
 8004b80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b82:	e009      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b84:	f7fd faea 	bl	800215c <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d902      	bls.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	74fb      	strb	r3, [r7, #19]
        break;
 8004b96:	e005      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b98:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0ef      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ba4:	7cfb      	ldrb	r3, [r7, #19]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d15c      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004baa:	4b2c      	ldr	r3, [pc, #176]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01f      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d019      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bc8:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bd4:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	4a20      	ldr	r2, [pc, #128]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004be4:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4a1c      	ldr	r2, [pc, #112]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bf4:	4a19      	ldr	r2, [pc, #100]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fd faa9 	bl	800215c <HAL_GetTick>
 8004c0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0c:	e00b      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fd faa5 	bl	800215c <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d902      	bls.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	74fb      	strb	r3, [r7, #19]
            break;
 8004c24:	e006      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c26:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ec      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c3a:	4b08      	ldr	r3, [pc, #32]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4a:	4904      	ldr	r1, [pc, #16]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c52:	e009      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	74bb      	strb	r3, [r7, #18]
 8004c58:	e006      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c68:	7c7b      	ldrb	r3, [r7, #17]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d105      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4b9e      	ldr	r3, [pc, #632]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	4a9d      	ldr	r2, [pc, #628]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c86:	4b98      	ldr	r3, [pc, #608]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f023 0203 	bic.w	r2, r3, #3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	4994      	ldr	r1, [pc, #592]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca8:	4b8f      	ldr	r3, [pc, #572]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f023 020c 	bic.w	r2, r3, #12
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	498c      	ldr	r1, [pc, #560]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cca:	4b87      	ldr	r3, [pc, #540]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	4983      	ldr	r1, [pc, #524]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cec:	4b7e      	ldr	r3, [pc, #504]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	497b      	ldr	r1, [pc, #492]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d0e:	4b76      	ldr	r3, [pc, #472]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1c:	4972      	ldr	r1, [pc, #456]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d30:	4b6d      	ldr	r3, [pc, #436]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3e:	496a      	ldr	r1, [pc, #424]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d52:	4b65      	ldr	r3, [pc, #404]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d60:	4961      	ldr	r1, [pc, #388]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d74:	4b5c      	ldr	r3, [pc, #368]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d82:	4959      	ldr	r1, [pc, #356]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d96:	4b54      	ldr	r3, [pc, #336]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da4:	4950      	ldr	r1, [pc, #320]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004db8:	4b4b      	ldr	r3, [pc, #300]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	4948      	ldr	r1, [pc, #288]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dda:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de8:	493f      	ldr	r1, [pc, #252]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d028      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dfc:	4b3a      	ldr	r3, [pc, #232]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0a:	4937      	ldr	r1, [pc, #220]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e1a:	d106      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1c:	4b32      	ldr	r3, [pc, #200]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a31      	ldr	r2, [pc, #196]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e26:	60d3      	str	r3, [r2, #12]
 8004e28:	e011      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e32:	d10c      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	2101      	movs	r1, #1
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f8c8 	bl	8004fd0 <RCCEx_PLLSAI1_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e4a:	7cfb      	ldrb	r3, [r7, #19]
 8004e4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d028      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e5a:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	491f      	ldr	r1, [pc, #124]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e78:	d106      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e84:	60d3      	str	r3, [r2, #12]
 8004e86:	e011      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e90:	d10c      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3304      	adds	r3, #4
 8004e96:	2101      	movs	r1, #1
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 f899 	bl	8004fd0 <RCCEx_PLLSAI1_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea2:	7cfb      	ldrb	r3, [r7, #19]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d02b      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec6:	4908      	ldr	r1, [pc, #32]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed6:	d109      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed8:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4a02      	ldr	r2, [pc, #8]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee2:	60d3      	str	r3, [r2, #12]
 8004ee4:	e014      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ee6:	bf00      	nop
 8004ee8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	2101      	movs	r1, #1
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 f867 	bl	8004fd0 <RCCEx_PLLSAI1_Config>
 8004f02:	4603      	mov	r3, r0
 8004f04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f06:	7cfb      	ldrb	r3, [r7, #19]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f0c:	7cfb      	ldrb	r3, [r7, #19]
 8004f0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d02f      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f1c:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f2a:	4928      	ldr	r1, [pc, #160]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f3a:	d10d      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	2102      	movs	r1, #2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f844 	bl	8004fd0 <RCCEx_PLLSAI1_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d014      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f52:	7cfb      	ldrb	r3, [r7, #19]
 8004f54:	74bb      	strb	r3, [r7, #18]
 8004f56:	e011      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3320      	adds	r3, #32
 8004f66:	2102      	movs	r1, #2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 f925 	bl	80051b8 <RCCEx_PLLSAI2_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f72:	7cfb      	ldrb	r3, [r7, #19]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f88:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f96:	490d      	ldr	r1, [pc, #52]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004faa:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fba:	4904      	ldr	r1, [pc, #16]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40021000 	.word	0x40021000

08004fd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fde:	4b75      	ldr	r3, [pc, #468]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d018      	beq.n	800501c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fea:	4b72      	ldr	r3, [pc, #456]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0203 	and.w	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d10d      	bne.n	8005016 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
       ||
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005002:	4b6c      	ldr	r3, [pc, #432]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
       ||
 8005012:	429a      	cmp	r2, r3
 8005014:	d047      	beq.n	80050a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
 800501a:	e044      	b.n	80050a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b03      	cmp	r3, #3
 8005022:	d018      	beq.n	8005056 <RCCEx_PLLSAI1_Config+0x86>
 8005024:	2b03      	cmp	r3, #3
 8005026:	d825      	bhi.n	8005074 <RCCEx_PLLSAI1_Config+0xa4>
 8005028:	2b01      	cmp	r3, #1
 800502a:	d002      	beq.n	8005032 <RCCEx_PLLSAI1_Config+0x62>
 800502c:	2b02      	cmp	r3, #2
 800502e:	d009      	beq.n	8005044 <RCCEx_PLLSAI1_Config+0x74>
 8005030:	e020      	b.n	8005074 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005032:	4b60      	ldr	r3, [pc, #384]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d11d      	bne.n	800507a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005042:	e01a      	b.n	800507a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005044:	4b5b      	ldr	r3, [pc, #364]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800504c:	2b00      	cmp	r3, #0
 800504e:	d116      	bne.n	800507e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005054:	e013      	b.n	800507e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005056:	4b57      	ldr	r3, [pc, #348]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10f      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005062:	4b54      	ldr	r3, [pc, #336]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005072:	e006      	b.n	8005082 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      break;
 8005078:	e004      	b.n	8005084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800507a:	bf00      	nop
 800507c:	e002      	b.n	8005084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005082:	bf00      	nop
    }

    if(status == HAL_OK)
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10d      	bne.n	80050a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800508a:	4b4a      	ldr	r3, [pc, #296]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6819      	ldr	r1, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	3b01      	subs	r3, #1
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	430b      	orrs	r3, r1
 80050a0:	4944      	ldr	r1, [pc, #272]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d17d      	bne.n	80051a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050ac:	4b41      	ldr	r3, [pc, #260]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a40      	ldr	r2, [pc, #256]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b8:	f7fd f850 	bl	800215c <HAL_GetTick>
 80050bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050be:	e009      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050c0:	f7fd f84c 	bl	800215c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d902      	bls.n	80050d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	73fb      	strb	r3, [r7, #15]
        break;
 80050d2:	e005      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050d4:	4b37      	ldr	r3, [pc, #220]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ef      	bne.n	80050c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d160      	bne.n	80051a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d111      	bne.n	8005110 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050ec:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6892      	ldr	r2, [r2, #8]
 80050fc:	0211      	lsls	r1, r2, #8
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68d2      	ldr	r2, [r2, #12]
 8005102:	0912      	lsrs	r2, r2, #4
 8005104:	0452      	lsls	r2, r2, #17
 8005106:	430a      	orrs	r2, r1
 8005108:	492a      	ldr	r1, [pc, #168]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510a:	4313      	orrs	r3, r2
 800510c:	610b      	str	r3, [r1, #16]
 800510e:	e027      	b.n	8005160 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d112      	bne.n	800513c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005116:	4b27      	ldr	r3, [pc, #156]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800511e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6892      	ldr	r2, [r2, #8]
 8005126:	0211      	lsls	r1, r2, #8
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6912      	ldr	r2, [r2, #16]
 800512c:	0852      	lsrs	r2, r2, #1
 800512e:	3a01      	subs	r2, #1
 8005130:	0552      	lsls	r2, r2, #21
 8005132:	430a      	orrs	r2, r1
 8005134:	491f      	ldr	r1, [pc, #124]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005136:	4313      	orrs	r3, r2
 8005138:	610b      	str	r3, [r1, #16]
 800513a:	e011      	b.n	8005160 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800513c:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005144:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6892      	ldr	r2, [r2, #8]
 800514c:	0211      	lsls	r1, r2, #8
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6952      	ldr	r2, [r2, #20]
 8005152:	0852      	lsrs	r2, r2, #1
 8005154:	3a01      	subs	r2, #1
 8005156:	0652      	lsls	r2, r2, #25
 8005158:	430a      	orrs	r2, r1
 800515a:	4916      	ldr	r1, [pc, #88]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800515c:	4313      	orrs	r3, r2
 800515e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005160:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005166:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800516a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fc fff6 	bl	800215c <HAL_GetTick>
 8005170:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005172:	e009      	b.n	8005188 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005174:	f7fc fff2 	bl	800215c <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d902      	bls.n	8005188 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	73fb      	strb	r3, [r7, #15]
          break;
 8005186:	e005      	b.n	8005194 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0ef      	beq.n	8005174 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	4904      	ldr	r1, [pc, #16]	; (80051b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000

080051b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051c6:	4b6a      	ldr	r3, [pc, #424]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d018      	beq.n	8005204 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051d2:	4b67      	ldr	r3, [pc, #412]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f003 0203 	and.w	r2, r3, #3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d10d      	bne.n	80051fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
       ||
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051ea:	4b61      	ldr	r3, [pc, #388]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	091b      	lsrs	r3, r3, #4
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
       ||
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d047      	beq.n	800528e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	73fb      	strb	r3, [r7, #15]
 8005202:	e044      	b.n	800528e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b03      	cmp	r3, #3
 800520a:	d018      	beq.n	800523e <RCCEx_PLLSAI2_Config+0x86>
 800520c:	2b03      	cmp	r3, #3
 800520e:	d825      	bhi.n	800525c <RCCEx_PLLSAI2_Config+0xa4>
 8005210:	2b01      	cmp	r3, #1
 8005212:	d002      	beq.n	800521a <RCCEx_PLLSAI2_Config+0x62>
 8005214:	2b02      	cmp	r3, #2
 8005216:	d009      	beq.n	800522c <RCCEx_PLLSAI2_Config+0x74>
 8005218:	e020      	b.n	800525c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800521a:	4b55      	ldr	r3, [pc, #340]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d11d      	bne.n	8005262 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800522a:	e01a      	b.n	8005262 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800522c:	4b50      	ldr	r3, [pc, #320]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005234:	2b00      	cmp	r3, #0
 8005236:	d116      	bne.n	8005266 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800523c:	e013      	b.n	8005266 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800523e:	4b4c      	ldr	r3, [pc, #304]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10f      	bne.n	800526a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800524a:	4b49      	ldr	r3, [pc, #292]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d109      	bne.n	800526a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800525a:	e006      	b.n	800526a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
      break;
 8005260:	e004      	b.n	800526c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005262:	bf00      	nop
 8005264:	e002      	b.n	800526c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005266:	bf00      	nop
 8005268:	e000      	b.n	800526c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800526a:	bf00      	nop
    }

    if(status == HAL_OK)
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10d      	bne.n	800528e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005272:	4b3f      	ldr	r3, [pc, #252]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6819      	ldr	r1, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	3b01      	subs	r3, #1
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	430b      	orrs	r3, r1
 8005288:	4939      	ldr	r1, [pc, #228]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528a:	4313      	orrs	r3, r2
 800528c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d167      	bne.n	8005364 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005294:	4b36      	ldr	r3, [pc, #216]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a35      	ldr	r2, [pc, #212]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a0:	f7fc ff5c 	bl	800215c <HAL_GetTick>
 80052a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052a6:	e009      	b.n	80052bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052a8:	f7fc ff58 	bl	800215c <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d902      	bls.n	80052bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	73fb      	strb	r3, [r7, #15]
        break;
 80052ba:	e005      	b.n	80052c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052bc:	4b2c      	ldr	r3, [pc, #176]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1ef      	bne.n	80052a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d14a      	bne.n	8005364 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d111      	bne.n	80052f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052d4:	4b26      	ldr	r3, [pc, #152]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6892      	ldr	r2, [r2, #8]
 80052e4:	0211      	lsls	r1, r2, #8
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68d2      	ldr	r2, [r2, #12]
 80052ea:	0912      	lsrs	r2, r2, #4
 80052ec:	0452      	lsls	r2, r2, #17
 80052ee:	430a      	orrs	r2, r1
 80052f0:	491f      	ldr	r1, [pc, #124]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	614b      	str	r3, [r1, #20]
 80052f6:	e011      	b.n	800531c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052f8:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005300:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6892      	ldr	r2, [r2, #8]
 8005308:	0211      	lsls	r1, r2, #8
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6912      	ldr	r2, [r2, #16]
 800530e:	0852      	lsrs	r2, r2, #1
 8005310:	3a01      	subs	r2, #1
 8005312:	0652      	lsls	r2, r2, #25
 8005314:	430a      	orrs	r2, r1
 8005316:	4916      	ldr	r1, [pc, #88]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005318:	4313      	orrs	r3, r2
 800531a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800531c:	4b14      	ldr	r3, [pc, #80]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a13      	ldr	r2, [pc, #76]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005326:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005328:	f7fc ff18 	bl	800215c <HAL_GetTick>
 800532c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800532e:	e009      	b.n	8005344 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005330:	f7fc ff14 	bl	800215c <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d902      	bls.n	8005344 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	73fb      	strb	r3, [r7, #15]
          break;
 8005342:	e005      	b.n	8005350 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0ef      	beq.n	8005330 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	4904      	ldr	r1, [pc, #16]	; (8005370 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005360:	4313      	orrs	r3, r2
 8005362:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000

08005374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e049      	b.n	800541a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f841 	bl	8005422 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f000 f9f8 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	d001      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e04f      	b.n	80054f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a23      	ldr	r2, [pc, #140]	; (80054fc <HAL_TIM_Base_Start_IT+0xc4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d01d      	beq.n	80054ae <HAL_TIM_Base_Start_IT+0x76>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547a:	d018      	beq.n	80054ae <HAL_TIM_Base_Start_IT+0x76>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <HAL_TIM_Base_Start_IT+0xc8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <HAL_TIM_Base_Start_IT+0x76>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <HAL_TIM_Base_Start_IT+0xcc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00e      	beq.n	80054ae <HAL_TIM_Base_Start_IT+0x76>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <HAL_TIM_Base_Start_IT+0xd0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d009      	beq.n	80054ae <HAL_TIM_Base_Start_IT+0x76>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1b      	ldr	r2, [pc, #108]	; (800550c <HAL_TIM_Base_Start_IT+0xd4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_TIM_Base_Start_IT+0x76>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a19      	ldr	r2, [pc, #100]	; (8005510 <HAL_TIM_Base_Start_IT+0xd8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d115      	bne.n	80054da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	4b17      	ldr	r3, [pc, #92]	; (8005514 <HAL_TIM_Base_Start_IT+0xdc>)
 80054b6:	4013      	ands	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b06      	cmp	r3, #6
 80054be:	d015      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0xb4>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c6:	d011      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d8:	e008      	b.n	80054ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0201 	orr.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e000      	b.n	80054ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40000400 	.word	0x40000400
 8005504:	40000800 	.word	0x40000800
 8005508:	40000c00 	.word	0x40000c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	00010007 	.word	0x00010007

08005518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b02      	cmp	r3, #2
 800552c:	d122      	bne.n	8005574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b02      	cmp	r3, #2
 800553a:	d11b      	bne.n	8005574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0202 	mvn.w	r2, #2
 8005544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f905 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f8f7 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f908 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b04      	cmp	r3, #4
 8005580:	d122      	bne.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b04      	cmp	r3, #4
 800558e:	d11b      	bne.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0204 	mvn.w	r2, #4
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f8db 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8cd 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f8de 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0208 	mvn.w	r2, #8
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2204      	movs	r2, #4
 80055f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f8b1 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8a3 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f8b4 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b10      	cmp	r3, #16
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b10      	cmp	r3, #16
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0210 	mvn.w	r2, #16
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2208      	movs	r2, #8
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f887 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f879 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f88a 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0201 	mvn.w	r2, #1
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fc faaa 	bl	8001bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b80      	cmp	r3, #128	; 0x80
 80056a8:	d10e      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b4:	2b80      	cmp	r3, #128	; 0x80
 80056b6:	d107      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f914 	bl	80058f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d6:	d10e      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d107      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f907 	bl	8005904 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005700:	2b40      	cmp	r3, #64	; 0x40
 8005702:	d10e      	bne.n	8005722 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570e:	2b40      	cmp	r3, #64	; 0x40
 8005710:	d107      	bne.n	8005722 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800571a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f838 	bl	8005792 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b20      	cmp	r3, #32
 800572e:	d10e      	bne.n	800574e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b20      	cmp	r3, #32
 800573c:	d107      	bne.n	800574e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f06f 0220 	mvn.w	r2, #32
 8005746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f8c7 	bl	80058dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a40      	ldr	r2, [pc, #256]	; (80058bc <TIM_Base_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d013      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c6:	d00f      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a3d      	ldr	r2, [pc, #244]	; (80058c0 <TIM_Base_SetConfig+0x118>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00b      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a3c      	ldr	r2, [pc, #240]	; (80058c4 <TIM_Base_SetConfig+0x11c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d007      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a3b      	ldr	r2, [pc, #236]	; (80058c8 <TIM_Base_SetConfig+0x120>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a3a      	ldr	r2, [pc, #232]	; (80058cc <TIM_Base_SetConfig+0x124>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d108      	bne.n	80057fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2f      	ldr	r2, [pc, #188]	; (80058bc <TIM_Base_SetConfig+0x114>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01f      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005808:	d01b      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2c      	ldr	r2, [pc, #176]	; (80058c0 <TIM_Base_SetConfig+0x118>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d017      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2b      	ldr	r2, [pc, #172]	; (80058c4 <TIM_Base_SetConfig+0x11c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2a      	ldr	r2, [pc, #168]	; (80058c8 <TIM_Base_SetConfig+0x120>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00f      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a29      	ldr	r2, [pc, #164]	; (80058cc <TIM_Base_SetConfig+0x124>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00b      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a28      	ldr	r2, [pc, #160]	; (80058d0 <TIM_Base_SetConfig+0x128>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d007      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a27      	ldr	r2, [pc, #156]	; (80058d4 <TIM_Base_SetConfig+0x12c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a26      	ldr	r2, [pc, #152]	; (80058d8 <TIM_Base_SetConfig+0x130>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d108      	bne.n	8005854 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a10      	ldr	r2, [pc, #64]	; (80058bc <TIM_Base_SetConfig+0x114>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00f      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a12      	ldr	r2, [pc, #72]	; (80058cc <TIM_Base_SetConfig+0x124>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00b      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a11      	ldr	r2, [pc, #68]	; (80058d0 <TIM_Base_SetConfig+0x128>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a10      	ldr	r2, [pc, #64]	; (80058d4 <TIM_Base_SetConfig+0x12c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a0f      	ldr	r2, [pc, #60]	; (80058d8 <TIM_Base_SetConfig+0x130>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d103      	bne.n	80058a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	615a      	str	r2, [r3, #20]
}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40012c00 	.word	0x40012c00
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800

080058dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e040      	b.n	80059ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fc f9ec 	bl	8001d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2224      	movs	r2, #36	; 0x24
 8005944:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f8c0 	bl	8005adc <UART_SetConfig>
 800595c:	4603      	mov	r3, r0
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e022      	b.n	80059ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fb3e 	bl	8005ff0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0201 	orr.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fbc5 	bl	8006134 <UART_CheckIdleState>
 80059aa:	4603      	mov	r3, r0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08a      	sub	sp, #40	; 0x28
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	f040 8082 	bne.w	8005ad2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <HAL_UART_Transmit+0x26>
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e07a      	b.n	8005ad4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_UART_Transmit+0x38>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e073      	b.n	8005ad4 <HAL_UART_Transmit+0x120>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2221      	movs	r2, #33	; 0x21
 8005a00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a02:	f7fc fbab 	bl	800215c <HAL_GetTick>
 8005a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	88fa      	ldrh	r2, [r7, #6]
 8005a0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a20:	d108      	bne.n	8005a34 <HAL_UART_Transmit+0x80>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d104      	bne.n	8005a34 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	e003      	b.n	8005a3c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005a44:	e02d      	b.n	8005aa2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fbb8 	bl	80061c6 <UART_WaitOnFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e039      	b.n	8005ad4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	881a      	ldrh	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a72:	b292      	uxth	r2, r2
 8005a74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	3302      	adds	r3, #2
 8005a7a:	61bb      	str	r3, [r7, #24]
 8005a7c:	e008      	b.n	8005a90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	b292      	uxth	r2, r2
 8005a88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1cb      	bne.n	8005a46 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2140      	movs	r1, #64	; 0x40
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fb84 	bl	80061c6 <UART_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e005      	b.n	8005ad4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e000      	b.n	8005ad4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
  }
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005adc:	b5b0      	push	{r4, r5, r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4bad      	ldr	r3, [pc, #692]	; (8005dbc <UART_SetConfig+0x2e0>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	69f9      	ldr	r1, [r7, #28]
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4aa2      	ldr	r2, [pc, #648]	; (8005dc0 <UART_SetConfig+0x2e4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d004      	beq.n	8005b44 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a99      	ldr	r2, [pc, #612]	; (8005dc4 <UART_SetConfig+0x2e8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d121      	bne.n	8005ba6 <UART_SetConfig+0xca>
 8005b62:	4b99      	ldr	r3, [pc, #612]	; (8005dc8 <UART_SetConfig+0x2ec>)
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d817      	bhi.n	8005ba0 <UART_SetConfig+0xc4>
 8005b70:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <UART_SetConfig+0x9c>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005b89 	.word	0x08005b89
 8005b7c:	08005b95 	.word	0x08005b95
 8005b80:	08005b8f 	.word	0x08005b8f
 8005b84:	08005b9b 	.word	0x08005b9b
 8005b88:	2301      	movs	r3, #1
 8005b8a:	76fb      	strb	r3, [r7, #27]
 8005b8c:	e0e7      	b.n	8005d5e <UART_SetConfig+0x282>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	76fb      	strb	r3, [r7, #27]
 8005b92:	e0e4      	b.n	8005d5e <UART_SetConfig+0x282>
 8005b94:	2304      	movs	r3, #4
 8005b96:	76fb      	strb	r3, [r7, #27]
 8005b98:	e0e1      	b.n	8005d5e <UART_SetConfig+0x282>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	76fb      	strb	r3, [r7, #27]
 8005b9e:	e0de      	b.n	8005d5e <UART_SetConfig+0x282>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	76fb      	strb	r3, [r7, #27]
 8005ba4:	e0db      	b.n	8005d5e <UART_SetConfig+0x282>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a88      	ldr	r2, [pc, #544]	; (8005dcc <UART_SetConfig+0x2f0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d132      	bne.n	8005c16 <UART_SetConfig+0x13a>
 8005bb0:	4b85      	ldr	r3, [pc, #532]	; (8005dc8 <UART_SetConfig+0x2ec>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	2b0c      	cmp	r3, #12
 8005bbc:	d828      	bhi.n	8005c10 <UART_SetConfig+0x134>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0xe8>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005bf9 	.word	0x08005bf9
 8005bc8:	08005c11 	.word	0x08005c11
 8005bcc:	08005c11 	.word	0x08005c11
 8005bd0:	08005c11 	.word	0x08005c11
 8005bd4:	08005c05 	.word	0x08005c05
 8005bd8:	08005c11 	.word	0x08005c11
 8005bdc:	08005c11 	.word	0x08005c11
 8005be0:	08005c11 	.word	0x08005c11
 8005be4:	08005bff 	.word	0x08005bff
 8005be8:	08005c11 	.word	0x08005c11
 8005bec:	08005c11 	.word	0x08005c11
 8005bf0:	08005c11 	.word	0x08005c11
 8005bf4:	08005c0b 	.word	0x08005c0b
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	76fb      	strb	r3, [r7, #27]
 8005bfc:	e0af      	b.n	8005d5e <UART_SetConfig+0x282>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	76fb      	strb	r3, [r7, #27]
 8005c02:	e0ac      	b.n	8005d5e <UART_SetConfig+0x282>
 8005c04:	2304      	movs	r3, #4
 8005c06:	76fb      	strb	r3, [r7, #27]
 8005c08:	e0a9      	b.n	8005d5e <UART_SetConfig+0x282>
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	76fb      	strb	r3, [r7, #27]
 8005c0e:	e0a6      	b.n	8005d5e <UART_SetConfig+0x282>
 8005c10:	2310      	movs	r3, #16
 8005c12:	76fb      	strb	r3, [r7, #27]
 8005c14:	e0a3      	b.n	8005d5e <UART_SetConfig+0x282>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a6d      	ldr	r2, [pc, #436]	; (8005dd0 <UART_SetConfig+0x2f4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d120      	bne.n	8005c62 <UART_SetConfig+0x186>
 8005c20:	4b69      	ldr	r3, [pc, #420]	; (8005dc8 <UART_SetConfig+0x2ec>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c2a:	2b30      	cmp	r3, #48	; 0x30
 8005c2c:	d013      	beq.n	8005c56 <UART_SetConfig+0x17a>
 8005c2e:	2b30      	cmp	r3, #48	; 0x30
 8005c30:	d814      	bhi.n	8005c5c <UART_SetConfig+0x180>
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d009      	beq.n	8005c4a <UART_SetConfig+0x16e>
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d810      	bhi.n	8005c5c <UART_SetConfig+0x180>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <UART_SetConfig+0x168>
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d006      	beq.n	8005c50 <UART_SetConfig+0x174>
 8005c42:	e00b      	b.n	8005c5c <UART_SetConfig+0x180>
 8005c44:	2300      	movs	r3, #0
 8005c46:	76fb      	strb	r3, [r7, #27]
 8005c48:	e089      	b.n	8005d5e <UART_SetConfig+0x282>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	76fb      	strb	r3, [r7, #27]
 8005c4e:	e086      	b.n	8005d5e <UART_SetConfig+0x282>
 8005c50:	2304      	movs	r3, #4
 8005c52:	76fb      	strb	r3, [r7, #27]
 8005c54:	e083      	b.n	8005d5e <UART_SetConfig+0x282>
 8005c56:	2308      	movs	r3, #8
 8005c58:	76fb      	strb	r3, [r7, #27]
 8005c5a:	e080      	b.n	8005d5e <UART_SetConfig+0x282>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	76fb      	strb	r3, [r7, #27]
 8005c60:	e07d      	b.n	8005d5e <UART_SetConfig+0x282>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a5b      	ldr	r2, [pc, #364]	; (8005dd4 <UART_SetConfig+0x2f8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d120      	bne.n	8005cae <UART_SetConfig+0x1d2>
 8005c6c:	4b56      	ldr	r3, [pc, #344]	; (8005dc8 <UART_SetConfig+0x2ec>)
 8005c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c76:	2bc0      	cmp	r3, #192	; 0xc0
 8005c78:	d013      	beq.n	8005ca2 <UART_SetConfig+0x1c6>
 8005c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c7c:	d814      	bhi.n	8005ca8 <UART_SetConfig+0x1cc>
 8005c7e:	2b80      	cmp	r3, #128	; 0x80
 8005c80:	d009      	beq.n	8005c96 <UART_SetConfig+0x1ba>
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d810      	bhi.n	8005ca8 <UART_SetConfig+0x1cc>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <UART_SetConfig+0x1b4>
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d006      	beq.n	8005c9c <UART_SetConfig+0x1c0>
 8005c8e:	e00b      	b.n	8005ca8 <UART_SetConfig+0x1cc>
 8005c90:	2300      	movs	r3, #0
 8005c92:	76fb      	strb	r3, [r7, #27]
 8005c94:	e063      	b.n	8005d5e <UART_SetConfig+0x282>
 8005c96:	2302      	movs	r3, #2
 8005c98:	76fb      	strb	r3, [r7, #27]
 8005c9a:	e060      	b.n	8005d5e <UART_SetConfig+0x282>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	76fb      	strb	r3, [r7, #27]
 8005ca0:	e05d      	b.n	8005d5e <UART_SetConfig+0x282>
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	76fb      	strb	r3, [r7, #27]
 8005ca6:	e05a      	b.n	8005d5e <UART_SetConfig+0x282>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	76fb      	strb	r3, [r7, #27]
 8005cac:	e057      	b.n	8005d5e <UART_SetConfig+0x282>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a49      	ldr	r2, [pc, #292]	; (8005dd8 <UART_SetConfig+0x2fc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d125      	bne.n	8005d04 <UART_SetConfig+0x228>
 8005cb8:	4b43      	ldr	r3, [pc, #268]	; (8005dc8 <UART_SetConfig+0x2ec>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc6:	d017      	beq.n	8005cf8 <UART_SetConfig+0x21c>
 8005cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ccc:	d817      	bhi.n	8005cfe <UART_SetConfig+0x222>
 8005cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd2:	d00b      	beq.n	8005cec <UART_SetConfig+0x210>
 8005cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd8:	d811      	bhi.n	8005cfe <UART_SetConfig+0x222>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <UART_SetConfig+0x20a>
 8005cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce2:	d006      	beq.n	8005cf2 <UART_SetConfig+0x216>
 8005ce4:	e00b      	b.n	8005cfe <UART_SetConfig+0x222>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	76fb      	strb	r3, [r7, #27]
 8005cea:	e038      	b.n	8005d5e <UART_SetConfig+0x282>
 8005cec:	2302      	movs	r3, #2
 8005cee:	76fb      	strb	r3, [r7, #27]
 8005cf0:	e035      	b.n	8005d5e <UART_SetConfig+0x282>
 8005cf2:	2304      	movs	r3, #4
 8005cf4:	76fb      	strb	r3, [r7, #27]
 8005cf6:	e032      	b.n	8005d5e <UART_SetConfig+0x282>
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	76fb      	strb	r3, [r7, #27]
 8005cfc:	e02f      	b.n	8005d5e <UART_SetConfig+0x282>
 8005cfe:	2310      	movs	r3, #16
 8005d00:	76fb      	strb	r3, [r7, #27]
 8005d02:	e02c      	b.n	8005d5e <UART_SetConfig+0x282>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a2d      	ldr	r2, [pc, #180]	; (8005dc0 <UART_SetConfig+0x2e4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d125      	bne.n	8005d5a <UART_SetConfig+0x27e>
 8005d0e:	4b2e      	ldr	r3, [pc, #184]	; (8005dc8 <UART_SetConfig+0x2ec>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d1c:	d017      	beq.n	8005d4e <UART_SetConfig+0x272>
 8005d1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d22:	d817      	bhi.n	8005d54 <UART_SetConfig+0x278>
 8005d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d28:	d00b      	beq.n	8005d42 <UART_SetConfig+0x266>
 8005d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2e:	d811      	bhi.n	8005d54 <UART_SetConfig+0x278>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <UART_SetConfig+0x260>
 8005d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d38:	d006      	beq.n	8005d48 <UART_SetConfig+0x26c>
 8005d3a:	e00b      	b.n	8005d54 <UART_SetConfig+0x278>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	76fb      	strb	r3, [r7, #27]
 8005d40:	e00d      	b.n	8005d5e <UART_SetConfig+0x282>
 8005d42:	2302      	movs	r3, #2
 8005d44:	76fb      	strb	r3, [r7, #27]
 8005d46:	e00a      	b.n	8005d5e <UART_SetConfig+0x282>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	76fb      	strb	r3, [r7, #27]
 8005d4c:	e007      	b.n	8005d5e <UART_SetConfig+0x282>
 8005d4e:	2308      	movs	r3, #8
 8005d50:	76fb      	strb	r3, [r7, #27]
 8005d52:	e004      	b.n	8005d5e <UART_SetConfig+0x282>
 8005d54:	2310      	movs	r3, #16
 8005d56:	76fb      	strb	r3, [r7, #27]
 8005d58:	e001      	b.n	8005d5e <UART_SetConfig+0x282>
 8005d5a:	2310      	movs	r3, #16
 8005d5c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <UART_SetConfig+0x2e4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	f040 8087 	bne.w	8005e78 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d6a:	7efb      	ldrb	r3, [r7, #27]
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d837      	bhi.n	8005de0 <UART_SetConfig+0x304>
 8005d70:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <UART_SetConfig+0x29c>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005d9d 	.word	0x08005d9d
 8005d7c:	08005de1 	.word	0x08005de1
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005de1 	.word	0x08005de1
 8005d88:	08005dab 	.word	0x08005dab
 8005d8c:	08005de1 	.word	0x08005de1
 8005d90:	08005de1 	.word	0x08005de1
 8005d94:	08005de1 	.word	0x08005de1
 8005d98:	08005db3 	.word	0x08005db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d9c:	f7fe fd70 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 8005da0:	6178      	str	r0, [r7, #20]
        break;
 8005da2:	e022      	b.n	8005dea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da4:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <UART_SetConfig+0x300>)
 8005da6:	617b      	str	r3, [r7, #20]
        break;
 8005da8:	e01f      	b.n	8005dea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005daa:	f7fe fcd1 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8005dae:	6178      	str	r0, [r7, #20]
        break;
 8005db0:	e01b      	b.n	8005dea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db6:	617b      	str	r3, [r7, #20]
        break;
 8005db8:	e017      	b.n	8005dea <UART_SetConfig+0x30e>
 8005dba:	bf00      	nop
 8005dbc:	efff69f3 	.word	0xefff69f3
 8005dc0:	40008000 	.word	0x40008000
 8005dc4:	40013800 	.word	0x40013800
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	40004400 	.word	0x40004400
 8005dd0:	40004800 	.word	0x40004800
 8005dd4:	40004c00 	.word	0x40004c00
 8005dd8:	40005000 	.word	0x40005000
 8005ddc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	76bb      	strb	r3, [r7, #26]
        break;
 8005de8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80f1 	beq.w	8005fd4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	4413      	add	r3, r2
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d305      	bcc.n	8005e0e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d902      	bls.n	8005e14 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	76bb      	strb	r3, [r7, #26]
 8005e12:	e0df      	b.n	8005fd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f04f 0100 	mov.w	r1, #0
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	020b      	lsls	r3, r1, #8
 8005e26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e2a:	0202      	lsls	r2, r0, #8
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	6849      	ldr	r1, [r1, #4]
 8005e30:	0849      	lsrs	r1, r1, #1
 8005e32:	4608      	mov	r0, r1
 8005e34:	f04f 0100 	mov.w	r1, #0
 8005e38:	1814      	adds	r4, r2, r0
 8005e3a:	eb43 0501 	adc.w	r5, r3, r1
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	4620      	mov	r0, r4
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	f7fa ff1c 	bl	8000c88 <__aeabi_uldivmod>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4613      	mov	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e5e:	d308      	bcc.n	8005e72 <UART_SetConfig+0x396>
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e66:	d204      	bcs.n	8005e72 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	60da      	str	r2, [r3, #12]
 8005e70:	e0b0      	b.n	8005fd4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	76bb      	strb	r3, [r7, #26]
 8005e76:	e0ad      	b.n	8005fd4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e80:	d15c      	bne.n	8005f3c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005e82:	7efb      	ldrb	r3, [r7, #27]
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d828      	bhi.n	8005eda <UART_SetConfig+0x3fe>
 8005e88:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <UART_SetConfig+0x3b4>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005ebd 	.word	0x08005ebd
 8005e98:	08005ec5 	.word	0x08005ec5
 8005e9c:	08005edb 	.word	0x08005edb
 8005ea0:	08005ecb 	.word	0x08005ecb
 8005ea4:	08005edb 	.word	0x08005edb
 8005ea8:	08005edb 	.word	0x08005edb
 8005eac:	08005edb 	.word	0x08005edb
 8005eb0:	08005ed3 	.word	0x08005ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eb4:	f7fe fce4 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 8005eb8:	6178      	str	r0, [r7, #20]
        break;
 8005eba:	e013      	b.n	8005ee4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ebc:	f7fe fcf6 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 8005ec0:	6178      	str	r0, [r7, #20]
        break;
 8005ec2:	e00f      	b.n	8005ee4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ec4:	4b49      	ldr	r3, [pc, #292]	; (8005fec <UART_SetConfig+0x510>)
 8005ec6:	617b      	str	r3, [r7, #20]
        break;
 8005ec8:	e00c      	b.n	8005ee4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eca:	f7fe fc41 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8005ece:	6178      	str	r0, [r7, #20]
        break;
 8005ed0:	e008      	b.n	8005ee4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed6:	617b      	str	r3, [r7, #20]
        break;
 8005ed8:	e004      	b.n	8005ee4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	76bb      	strb	r3, [r7, #26]
        break;
 8005ee2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d074      	beq.n	8005fd4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	005a      	lsls	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	441a      	add	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b0f      	cmp	r3, #15
 8005f06:	d916      	bls.n	8005f36 <UART_SetConfig+0x45a>
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0e:	d212      	bcs.n	8005f36 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f023 030f 	bic.w	r3, r3, #15
 8005f18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	89fb      	ldrh	r3, [r7, #14]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	89fa      	ldrh	r2, [r7, #14]
 8005f32:	60da      	str	r2, [r3, #12]
 8005f34:	e04e      	b.n	8005fd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	76bb      	strb	r3, [r7, #26]
 8005f3a:	e04b      	b.n	8005fd4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f3c:	7efb      	ldrb	r3, [r7, #27]
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d827      	bhi.n	8005f92 <UART_SetConfig+0x4b6>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <UART_SetConfig+0x46c>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005f6d 	.word	0x08005f6d
 8005f4c:	08005f75 	.word	0x08005f75
 8005f50:	08005f7d 	.word	0x08005f7d
 8005f54:	08005f93 	.word	0x08005f93
 8005f58:	08005f83 	.word	0x08005f83
 8005f5c:	08005f93 	.word	0x08005f93
 8005f60:	08005f93 	.word	0x08005f93
 8005f64:	08005f93 	.word	0x08005f93
 8005f68:	08005f8b 	.word	0x08005f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f6c:	f7fe fc88 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 8005f70:	6178      	str	r0, [r7, #20]
        break;
 8005f72:	e013      	b.n	8005f9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f74:	f7fe fc9a 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 8005f78:	6178      	str	r0, [r7, #20]
        break;
 8005f7a:	e00f      	b.n	8005f9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <UART_SetConfig+0x510>)
 8005f7e:	617b      	str	r3, [r7, #20]
        break;
 8005f80:	e00c      	b.n	8005f9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f82:	f7fe fbe5 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8005f86:	6178      	str	r0, [r7, #20]
        break;
 8005f88:	e008      	b.n	8005f9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f8e:	617b      	str	r3, [r7, #20]
        break;
 8005f90:	e004      	b.n	8005f9c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	76bb      	strb	r3, [r7, #26]
        break;
 8005f9a:	bf00      	nop
    }

    if (pclk != 0U)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d018      	beq.n	8005fd4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	085a      	lsrs	r2, r3, #1
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	441a      	add	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	d908      	bls.n	8005fd0 <UART_SetConfig+0x4f4>
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc4:	d204      	bcs.n	8005fd0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	e001      	b.n	8005fd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005fe0:	7ebb      	ldrb	r3, [r7, #26]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8005fea:	bf00      	nop
 8005fec:	00f42400 	.word	0x00f42400

08005ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01a      	beq.n	8006106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ee:	d10a      	bne.n	8006106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	605a      	str	r2, [r3, #4]
  }
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af02      	add	r7, sp, #8
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006144:	f7fc f80a 	bl	800215c <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b08      	cmp	r3, #8
 8006156:	d10e      	bne.n	8006176 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f82d 	bl	80061c6 <UART_WaitOnFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e023      	b.n	80061be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b04      	cmp	r3, #4
 8006182:	d10e      	bne.n	80061a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f817 	bl	80061c6 <UART_WaitOnFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e00d      	b.n	80061be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	603b      	str	r3, [r7, #0]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d6:	e05e      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061de:	d05a      	beq.n	8006296 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e0:	f7fb ffbc 	bl	800215c <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d11b      	bne.n	800622e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006204:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0201 	bic.w	r2, r2, #1
 8006214:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e043      	b.n	80062b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d02c      	beq.n	8006296 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624a:	d124      	bne.n	8006296 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006254:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006264:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e00f      	b.n	80062b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4013      	ands	r3, r2
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	bf0c      	ite	eq
 80062a6:	2301      	moveq	r3, #1
 80062a8:	2300      	movne	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d091      	beq.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <__NVIC_SetPriority>:
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	6039      	str	r1, [r7, #0]
 80062ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	db0a      	blt.n	80062ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	490c      	ldr	r1, [pc, #48]	; (800630c <__NVIC_SetPriority+0x4c>)
 80062da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062de:	0112      	lsls	r2, r2, #4
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	440b      	add	r3, r1
 80062e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80062e8:	e00a      	b.n	8006300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	4908      	ldr	r1, [pc, #32]	; (8006310 <__NVIC_SetPriority+0x50>)
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	3b04      	subs	r3, #4
 80062f8:	0112      	lsls	r2, r2, #4
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	440b      	add	r3, r1
 80062fe:	761a      	strb	r2, [r3, #24]
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	e000e100 	.word	0xe000e100
 8006310:	e000ed00 	.word	0xe000ed00

08006314 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <SysTick_Handler+0x1c>)
 800631a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800631c:	f001 fcfe 	bl	8007d1c <xTaskGetSchedulerState>
 8006320:	4603      	mov	r3, r0
 8006322:	2b01      	cmp	r3, #1
 8006324:	d001      	beq.n	800632a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006326:	f002 fae7 	bl	80088f8 <xPortSysTickHandler>
  }
}
 800632a:	bf00      	nop
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	e000e010 	.word	0xe000e010

08006334 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006338:	2100      	movs	r1, #0
 800633a:	f06f 0004 	mvn.w	r0, #4
 800633e:	f7ff ffbf 	bl	80062c0 <__NVIC_SetPriority>
#endif
}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800634e:	f3ef 8305 	mrs	r3, IPSR
 8006352:	603b      	str	r3, [r7, #0]
  return(result);
 8006354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800635a:	f06f 0305 	mvn.w	r3, #5
 800635e:	607b      	str	r3, [r7, #4]
 8006360:	e00c      	b.n	800637c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006362:	4b0a      	ldr	r3, [pc, #40]	; (800638c <osKernelInitialize+0x44>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800636a:	4b08      	ldr	r3, [pc, #32]	; (800638c <osKernelInitialize+0x44>)
 800636c:	2201      	movs	r2, #1
 800636e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006370:	2300      	movs	r3, #0
 8006372:	607b      	str	r3, [r7, #4]
 8006374:	e002      	b.n	800637c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800637a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800637c:	687b      	ldr	r3, [r7, #4]
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20000204 	.word	0x20000204

08006390 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006396:	f3ef 8305 	mrs	r3, IPSR
 800639a:	603b      	str	r3, [r7, #0]
  return(result);
 800639c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80063a2:	f06f 0305 	mvn.w	r3, #5
 80063a6:	607b      	str	r3, [r7, #4]
 80063a8:	e010      	b.n	80063cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <osKernelStart+0x48>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d109      	bne.n	80063c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063b2:	f7ff ffbf 	bl	8006334 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <osKernelStart+0x48>)
 80063b8:	2202      	movs	r2, #2
 80063ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063bc:	f001 f866 	bl	800748c <vTaskStartScheduler>
      stat = osOK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	607b      	str	r3, [r7, #4]
 80063c4:	e002      	b.n	80063cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063cc:	687b      	ldr	r3, [r7, #4]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000204 	.word	0x20000204

080063dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08e      	sub	sp, #56	; 0x38
 80063e0:	af04      	add	r7, sp, #16
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ec:	f3ef 8305 	mrs	r3, IPSR
 80063f0:	617b      	str	r3, [r7, #20]
  return(result);
 80063f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d17e      	bne.n	80064f6 <osThreadNew+0x11a>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d07b      	beq.n	80064f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80063fe:	2380      	movs	r3, #128	; 0x80
 8006400:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006402:	2318      	movs	r3, #24
 8006404:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800640a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800640e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d045      	beq.n	80064a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <osThreadNew+0x48>
        name = attr->name;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <osThreadNew+0x6e>
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b38      	cmp	r3, #56	; 0x38
 800643c:	d805      	bhi.n	800644a <osThreadNew+0x6e>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <osThreadNew+0x72>
        return (NULL);
 800644a:	2300      	movs	r3, #0
 800644c:	e054      	b.n	80064f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	089b      	lsrs	r3, r3, #2
 800645c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00e      	beq.n	8006484 <osThreadNew+0xa8>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	2b5b      	cmp	r3, #91	; 0x5b
 800646c:	d90a      	bls.n	8006484 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006472:	2b00      	cmp	r3, #0
 8006474:	d006      	beq.n	8006484 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <osThreadNew+0xa8>
        mem = 1;
 800647e:	2301      	movs	r3, #1
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	e010      	b.n	80064a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10c      	bne.n	80064a6 <osThreadNew+0xca>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d108      	bne.n	80064a6 <osThreadNew+0xca>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <osThreadNew+0xca>
          mem = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	e001      	b.n	80064a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d110      	bne.n	80064ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064b4:	9202      	str	r2, [sp, #8]
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6a3a      	ldr	r2, [r7, #32]
 80064c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 fe0c 	bl	80070e0 <xTaskCreateStatic>
 80064c8:	4603      	mov	r3, r0
 80064ca:	613b      	str	r3, [r7, #16]
 80064cc:	e013      	b.n	80064f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d110      	bne.n	80064f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f107 0310 	add.w	r3, r7, #16
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fe57 	bl	800719a <xTaskCreate>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d001      	beq.n	80064f6 <osThreadNew+0x11a>
            hTask = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80064f6:	693b      	ldr	r3, [r7, #16]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3728      	adds	r7, #40	; 0x28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006508:	f3ef 8305 	mrs	r3, IPSR
 800650c:	60bb      	str	r3, [r7, #8]
  return(result);
 800650e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <osDelay+0x1c>
    stat = osErrorISR;
 8006514:	f06f 0305 	mvn.w	r3, #5
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e007      	b.n	800652c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 ff7c 	bl	8007424 <vTaskDelay>
    }
  }

  return (stat);
 800652c:	68fb      	ldr	r3, [r7, #12]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4a07      	ldr	r2, [pc, #28]	; (8006564 <vApplicationGetIdleTaskMemory+0x2c>)
 8006548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	4a06      	ldr	r2, [pc, #24]	; (8006568 <vApplicationGetIdleTaskMemory+0x30>)
 800654e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2280      	movs	r2, #128	; 0x80
 8006554:	601a      	str	r2, [r3, #0]
}
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000208 	.word	0x20000208
 8006568:	20000264 	.word	0x20000264

0800656c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4a07      	ldr	r2, [pc, #28]	; (8006598 <vApplicationGetTimerTaskMemory+0x2c>)
 800657c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	4a06      	ldr	r2, [pc, #24]	; (800659c <vApplicationGetTimerTaskMemory+0x30>)
 8006582:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800658a:	601a      	str	r2, [r3, #0]
}
 800658c:	bf00      	nop
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	20000464 	.word	0x20000464
 800659c:	200004c0 	.word	0x200004c0

080065a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f103 0208 	add.w	r2, r3, #8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f103 0208 	add.w	r2, r3, #8
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f103 0208 	add.w	r2, r3, #8
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
}
 8006636:	bf00      	nop
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006642:	b480      	push	{r7}
 8006644:	b085      	sub	sp, #20
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006658:	d103      	bne.n	8006662 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	e00c      	b.n	800667c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3308      	adds	r3, #8
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	e002      	b.n	8006670 <vListInsert+0x2e>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	429a      	cmp	r2, r3
 800667a:	d2f6      	bcs.n	800666a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	601a      	str	r2, [r3, #0]
}
 80066a8:	bf00      	nop
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6892      	ldr	r2, [r2, #8]
 80066ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6852      	ldr	r2, [r2, #4]
 80066d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d103      	bne.n	80066e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	1e5a      	subs	r2, r3, #1
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006732:	f002 f84f 	bl	80087d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006742:	fb01 f303 	mul.w	r3, r1, r3
 8006746:	441a      	add	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006762:	3b01      	subs	r3, #1
 8006764:	68f9      	ldr	r1, [r7, #12]
 8006766:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	441a      	add	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	22ff      	movs	r2, #255	; 0xff
 800677e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d114      	bne.n	80067b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01a      	beq.n	80067c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3310      	adds	r3, #16
 8006794:	4618      	mov	r0, r3
 8006796:	f001 f903 	bl	80079a0 <xTaskRemoveFromEventList>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d012      	beq.n	80067c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067a0:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <xQueueGenericReset+0xcc>)
 80067a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	e009      	b.n	80067c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3310      	adds	r3, #16
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff fef2 	bl	80065a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3324      	adds	r3, #36	; 0x24
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff feed 	bl	80065a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067c6:	f002 f835 	bl	8008834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067ca:	2301      	movs	r3, #1
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	e000ed04 	.word	0xe000ed04

080067d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08e      	sub	sp, #56	; 0x38
 80067dc:	af02      	add	r7, sp, #8
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <xQueueGenericCreateStatic+0x52>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <xQueueGenericCreateStatic+0x56>
 800682a:	2301      	movs	r3, #1
 800682c:	e000      	b.n	8006830 <xQueueGenericCreateStatic+0x58>
 800682e:	2300      	movs	r3, #0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	623b      	str	r3, [r7, #32]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <xQueueGenericCreateStatic+0x7e>
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <xQueueGenericCreateStatic+0x82>
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <xQueueGenericCreateStatic+0x84>
 800685a:	2300      	movs	r3, #0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	61fb      	str	r3, [r7, #28]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006876:	2350      	movs	r3, #80	; 0x50
 8006878:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b50      	cmp	r3, #80	; 0x50
 800687e:	d00a      	beq.n	8006896 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	61bb      	str	r3, [r7, #24]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006896:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00d      	beq.n	80068be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	4613      	mov	r3, r2
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f805 	bl	80068c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3730      	adds	r7, #48	; 0x30
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d103      	bne.n	80068e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	e002      	b.n	80068ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068f6:	2101      	movs	r1, #1
 80068f8:	69b8      	ldr	r0, [r7, #24]
 80068fa:	f7ff ff05 	bl	8006708 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	78fa      	ldrb	r2, [r7, #3]
 8006902:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006906:	bf00      	nop
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08e      	sub	sp, #56	; 0x38
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800691e:	2300      	movs	r3, #0
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <xQueueGenericSend+0x32>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <xQueueGenericSend+0x40>
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <xQueueGenericSend+0x44>
 8006950:	2301      	movs	r3, #1
 8006952:	e000      	b.n	8006956 <xQueueGenericSend+0x46>
 8006954:	2300      	movs	r3, #0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10a      	bne.n	8006970 <xQueueGenericSend+0x60>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b02      	cmp	r3, #2
 8006974:	d103      	bne.n	800697e <xQueueGenericSend+0x6e>
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <xQueueGenericSend+0x72>
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <xQueueGenericSend+0x74>
 8006982:	2300      	movs	r3, #0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <xQueueGenericSend+0x8e>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	623b      	str	r3, [r7, #32]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800699e:	f001 f9bd 	bl	8007d1c <xTaskGetSchedulerState>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d102      	bne.n	80069ae <xQueueGenericSend+0x9e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <xQueueGenericSend+0xa2>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <xQueueGenericSend+0xa4>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueGenericSend+0xbe>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	61fb      	str	r3, [r7, #28]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ce:	f001 ff01 	bl	80087d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	429a      	cmp	r2, r3
 80069dc:	d302      	bcc.n	80069e4 <xQueueGenericSend+0xd4>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d129      	bne.n	8006a38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	68b9      	ldr	r1, [r7, #8]
 80069e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ea:	f000 fa0b 	bl	8006e04 <prvCopyDataToQueue>
 80069ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d010      	beq.n	8006a1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	3324      	adds	r3, #36	; 0x24
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 ffcf 	bl	80079a0 <xTaskRemoveFromEventList>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d013      	beq.n	8006a30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a08:	4b3f      	ldr	r3, [pc, #252]	; (8006b08 <xQueueGenericSend+0x1f8>)
 8006a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	e00a      	b.n	8006a30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d007      	beq.n	8006a30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a20:	4b39      	ldr	r3, [pc, #228]	; (8006b08 <xQueueGenericSend+0x1f8>)
 8006a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a30:	f001 ff00 	bl	8008834 <vPortExitCritical>
				return pdPASS;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e063      	b.n	8006b00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a3e:	f001 fef9 	bl	8008834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e05c      	b.n	8006b00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a4c:	f107 0314 	add.w	r3, r7, #20
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 f809 	bl	8007a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a56:	2301      	movs	r3, #1
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a5a:	f001 feeb 	bl	8008834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a5e:	f000 fd7b 	bl	8007558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a62:	f001 feb7 	bl	80087d4 <vPortEnterCritical>
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a6c:	b25b      	sxtb	r3, r3
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a72:	d103      	bne.n	8006a7c <xQueueGenericSend+0x16c>
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a82:	b25b      	sxtb	r3, r3
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a88:	d103      	bne.n	8006a92 <xQueueGenericSend+0x182>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a92:	f001 fecf 	bl	8008834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a96:	1d3a      	adds	r2, r7, #4
 8006a98:	f107 0314 	add.w	r3, r7, #20
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fff8 	bl	8007a94 <xTaskCheckForTimeOut>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d124      	bne.n	8006af4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aac:	f000 faa2 	bl	8006ff4 <prvIsQueueFull>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d018      	beq.n	8006ae8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	3310      	adds	r3, #16
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 ff1e 	bl	8007900 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac6:	f000 fa2d 	bl	8006f24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006aca:	f000 fd53 	bl	8007574 <xTaskResumeAll>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f47f af7c 	bne.w	80069ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ad6:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <xQueueGenericSend+0x1f8>)
 8006ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	e772      	b.n	80069ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aea:	f000 fa1b 	bl	8006f24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aee:	f000 fd41 	bl	8007574 <xTaskResumeAll>
 8006af2:	e76c      	b.n	80069ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006af6:	f000 fa15 	bl	8006f24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006afa:	f000 fd3b 	bl	8007574 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006afe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3738      	adds	r7, #56	; 0x38
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b090      	sub	sp, #64	; 0x40
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d103      	bne.n	8006b48 <xQueueGenericSendFromISR+0x3c>
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <xQueueGenericSendFromISR+0x40>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <xQueueGenericSendFromISR+0x42>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10a      	bne.n	8006b68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b64:	bf00      	nop
 8006b66:	e7fe      	b.n	8006b66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d103      	bne.n	8006b76 <xQueueGenericSendFromISR+0x6a>
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <xQueueGenericSendFromISR+0x6e>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <xQueueGenericSendFromISR+0x70>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	623b      	str	r3, [r7, #32]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b96:	f001 feff 	bl	8008998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	61fa      	str	r2, [r7, #28]
 8006bb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d302      	bcc.n	8006bc8 <xQueueGenericSendFromISR+0xbc>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d12f      	bne.n	8006c28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bde:	f000 f911 	bl	8006e04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006be2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bea:	d112      	bne.n	8006c12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d016      	beq.n	8006c22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf6:	3324      	adds	r3, #36	; 0x24
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fed1 	bl	80079a0 <xTaskRemoveFromEventList>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00e      	beq.n	8006c22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00b      	beq.n	8006c22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	e007      	b.n	8006c22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c16:	3301      	adds	r3, #1
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	b25a      	sxtb	r2, r3
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c22:	2301      	movs	r3, #1
 8006c24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c26:	e001      	b.n	8006c2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3740      	adds	r7, #64	; 0x40
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08c      	sub	sp, #48	; 0x30
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c50:	2300      	movs	r3, #0
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <xQueueReceive+0x30>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	623b      	str	r3, [r7, #32]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d103      	bne.n	8006c82 <xQueueReceive+0x3e>
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <xQueueReceive+0x42>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <xQueueReceive+0x44>
 8006c86:	2300      	movs	r3, #0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <xQueueReceive+0x5e>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	61fb      	str	r3, [r7, #28]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ca2:	f001 f83b 	bl	8007d1c <xTaskGetSchedulerState>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d102      	bne.n	8006cb2 <xQueueReceive+0x6e>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <xQueueReceive+0x72>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <xQueueReceive+0x74>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <xQueueReceive+0x8e>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	61bb      	str	r3, [r7, #24]
}
 8006cce:	bf00      	nop
 8006cd0:	e7fe      	b.n	8006cd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cd2:	f001 fd7f 	bl	80087d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d01f      	beq.n	8006d22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce6:	f000 f8f7 	bl	8006ed8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	1e5a      	subs	r2, r3, #1
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00f      	beq.n	8006d1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	3310      	adds	r3, #16
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fe4e 	bl	80079a0 <xTaskRemoveFromEventList>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d0a:	4b3d      	ldr	r3, [pc, #244]	; (8006e00 <xQueueReceive+0x1bc>)
 8006d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d1a:	f001 fd8b 	bl	8008834 <vPortExitCritical>
				return pdPASS;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e069      	b.n	8006df6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d28:	f001 fd84 	bl	8008834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e062      	b.n	8006df6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d106      	bne.n	8006d44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d36:	f107 0310 	add.w	r3, r7, #16
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fe94 	bl	8007a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d40:	2301      	movs	r3, #1
 8006d42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d44:	f001 fd76 	bl	8008834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d48:	f000 fc06 	bl	8007558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d4c:	f001 fd42 	bl	80087d4 <vPortEnterCritical>
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d56:	b25b      	sxtb	r3, r3
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d5c:	d103      	bne.n	8006d66 <xQueueReceive+0x122>
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d6c:	b25b      	sxtb	r3, r3
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d72:	d103      	bne.n	8006d7c <xQueueReceive+0x138>
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d7c:	f001 fd5a 	bl	8008834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d80:	1d3a      	adds	r2, r7, #4
 8006d82:	f107 0310 	add.w	r3, r7, #16
 8006d86:	4611      	mov	r1, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 fe83 	bl	8007a94 <xTaskCheckForTimeOut>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d123      	bne.n	8006ddc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d96:	f000 f917 	bl	8006fc8 <prvIsQueueEmpty>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d017      	beq.n	8006dd0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	3324      	adds	r3, #36	; 0x24
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4611      	mov	r1, r2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fda9 	bl	8007900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db0:	f000 f8b8 	bl	8006f24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006db4:	f000 fbde 	bl	8007574 <xTaskResumeAll>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d189      	bne.n	8006cd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006dbe:	4b10      	ldr	r3, [pc, #64]	; (8006e00 <xQueueReceive+0x1bc>)
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	e780      	b.n	8006cd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd2:	f000 f8a7 	bl	8006f24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dd6:	f000 fbcd 	bl	8007574 <xTaskResumeAll>
 8006dda:	e77a      	b.n	8006cd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dde:	f000 f8a1 	bl	8006f24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006de2:	f000 fbc7 	bl	8007574 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006de8:	f000 f8ee 	bl	8006fc8 <prvIsQueueEmpty>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f43f af6f 	beq.w	8006cd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006df4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3730      	adds	r7, #48	; 0x30
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10d      	bne.n	8006e3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d14d      	bne.n	8006ec6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 ff92 	bl	8007d58 <xTaskPriorityDisinherit>
 8006e34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	609a      	str	r2, [r3, #8]
 8006e3c:	e043      	b.n	8006ec6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d119      	bne.n	8006e78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6858      	ldr	r0, [r3, #4]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	f001 fff6 	bl	8008e40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	441a      	add	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d32b      	bcc.n	8006ec6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	605a      	str	r2, [r3, #4]
 8006e76:	e026      	b.n	8006ec6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	68d8      	ldr	r0, [r3, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	461a      	mov	r2, r3
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	f001 ffdc 	bl	8008e40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	425b      	negs	r3, r3
 8006e92:	441a      	add	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d207      	bcs.n	8006eb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	425b      	negs	r3, r3
 8006eae:	441a      	add	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d105      	bne.n	8006ec6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ece:	697b      	ldr	r3, [r7, #20]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d018      	beq.n	8006f1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	441a      	add	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d303      	bcc.n	8006f0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68d9      	ldr	r1, [r3, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	461a      	mov	r2, r3
 8006f16:	6838      	ldr	r0, [r7, #0]
 8006f18:	f001 ff92 	bl	8008e40 <memcpy>
	}
}
 8006f1c:	bf00      	nop
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f2c:	f001 fc52 	bl	80087d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f38:	e011      	b.n	8006f5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d012      	beq.n	8006f68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3324      	adds	r3, #36	; 0x24
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fd2a 	bl	80079a0 <xTaskRemoveFromEventList>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f52:	f000 fe01 	bl	8007b58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	dce9      	bgt.n	8006f3a <prvUnlockQueue+0x16>
 8006f66:	e000      	b.n	8006f6a <prvUnlockQueue+0x46>
					break;
 8006f68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	22ff      	movs	r2, #255	; 0xff
 8006f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f72:	f001 fc5f 	bl	8008834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f76:	f001 fc2d 	bl	80087d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f82:	e011      	b.n	8006fa8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d012      	beq.n	8006fb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3310      	adds	r3, #16
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fd05 	bl	80079a0 <xTaskRemoveFromEventList>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f9c:	f000 fddc 	bl	8007b58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dce9      	bgt.n	8006f84 <prvUnlockQueue+0x60>
 8006fb0:	e000      	b.n	8006fb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	22ff      	movs	r2, #255	; 0xff
 8006fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006fbc:	f001 fc3a 	bl	8008834 <vPortExitCritical>
}
 8006fc0:	bf00      	nop
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fd0:	f001 fc00 	bl	80087d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d102      	bne.n	8006fe2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e001      	b.n	8006fe6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fe6:	f001 fc25 	bl	8008834 <vPortExitCritical>

	return xReturn;
 8006fea:	68fb      	ldr	r3, [r7, #12]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ffc:	f001 fbea 	bl	80087d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007008:	429a      	cmp	r2, r3
 800700a:	d102      	bne.n	8007012 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800700c:	2301      	movs	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	e001      	b.n	8007016 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007016:	f001 fc0d 	bl	8008834 <vPortExitCritical>

	return xReturn;
 800701a:	68fb      	ldr	r3, [r7, #12]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	e014      	b.n	800705e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007034:	4a0f      	ldr	r2, [pc, #60]	; (8007074 <vQueueAddToRegistry+0x50>)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10b      	bne.n	8007058 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007040:	490c      	ldr	r1, [pc, #48]	; (8007074 <vQueueAddToRegistry+0x50>)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800704a:	4a0a      	ldr	r2, [pc, #40]	; (8007074 <vQueueAddToRegistry+0x50>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	4413      	add	r3, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007056:	e006      	b.n	8007066 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b07      	cmp	r3, #7
 8007062:	d9e7      	bls.n	8007034 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20001c3c 	.word	0x20001c3c

08007078 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007088:	f001 fba4 	bl	80087d4 <vPortEnterCritical>
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007092:	b25b      	sxtb	r3, r3
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007098:	d103      	bne.n	80070a2 <vQueueWaitForMessageRestricted+0x2a>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070a8:	b25b      	sxtb	r3, r3
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ae:	d103      	bne.n	80070b8 <vQueueWaitForMessageRestricted+0x40>
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070b8:	f001 fbbc 	bl	8008834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	3324      	adds	r3, #36	; 0x24
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 fc3b 	bl	8007948 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070d2:	6978      	ldr	r0, [r7, #20]
 80070d4:	f7ff ff26 	bl	8006f24 <prvUnlockQueue>
	}
 80070d8:	bf00      	nop
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08e      	sub	sp, #56	; 0x38
 80070e4:	af04      	add	r7, sp, #16
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <xTaskCreateStatic+0x2a>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	623b      	str	r3, [r7, #32]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <xTaskCreateStatic+0x46>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	61fb      	str	r3, [r7, #28]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007126:	235c      	movs	r3, #92	; 0x5c
 8007128:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b5c      	cmp	r3, #92	; 0x5c
 800712e:	d00a      	beq.n	8007146 <xTaskCreateStatic+0x66>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	61bb      	str	r3, [r7, #24]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007146:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01e      	beq.n	800718c <xTaskCreateStatic+0xac>
 800714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01b      	beq.n	800718c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800715c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	2202      	movs	r2, #2
 8007162:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007166:	2300      	movs	r3, #0
 8007168:	9303      	str	r3, [sp, #12]
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	9302      	str	r3, [sp, #8]
 800716e:	f107 0314 	add.w	r3, r7, #20
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f850 	bl	8007224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007186:	f000 f8dd 	bl	8007344 <prvAddNewTaskToReadyList>
 800718a:	e001      	b.n	8007190 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007190:	697b      	ldr	r3, [r7, #20]
	}
 8007192:	4618      	mov	r0, r3
 8007194:	3728      	adds	r7, #40	; 0x28
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800719a:	b580      	push	{r7, lr}
 800719c:	b08c      	sub	sp, #48	; 0x30
 800719e:	af04      	add	r7, sp, #16
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	603b      	str	r3, [r7, #0]
 80071a6:	4613      	mov	r3, r2
 80071a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071aa:	88fb      	ldrh	r3, [r7, #6]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 fc32 	bl	8008a18 <pvPortMalloc>
 80071b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00e      	beq.n	80071da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071bc:	205c      	movs	r0, #92	; 0x5c
 80071be:	f001 fc2b 	bl	8008a18 <pvPortMalloc>
 80071c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30
 80071d0:	e005      	b.n	80071de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071d2:	6978      	ldr	r0, [r7, #20]
 80071d4:	f001 fcec 	bl	8008bb0 <vPortFree>
 80071d8:	e001      	b.n	80071de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d017      	beq.n	8007214 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071ec:	88fa      	ldrh	r2, [r7, #6]
 80071ee:	2300      	movs	r3, #0
 80071f0:	9303      	str	r3, [sp, #12]
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	9302      	str	r3, [sp, #8]
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f80e 	bl	8007224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007208:	69f8      	ldr	r0, [r7, #28]
 800720a:	f000 f89b 	bl	8007344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800720e:	2301      	movs	r3, #1
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	e002      	b.n	800721a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007218:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800721a:	69bb      	ldr	r3, [r7, #24]
	}
 800721c:	4618      	mov	r0, r3
 800721e:	3720      	adds	r7, #32
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	461a      	mov	r2, r3
 800723c:	21a5      	movs	r1, #165	; 0xa5
 800723e:	f001 fe0d 	bl	8008e5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800724c:	3b01      	subs	r3, #1
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	f023 0307 	bic.w	r3, r3, #7
 800725a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	617b      	str	r3, [r7, #20]
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01f      	beq.n	80072c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007282:	2300      	movs	r3, #0
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	e012      	b.n	80072ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	4413      	add	r3, r2
 800728e:	7819      	ldrb	r1, [r3, #0]
 8007290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	3334      	adds	r3, #52	; 0x34
 8007298:	460a      	mov	r2, r1
 800729a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d006      	beq.n	80072b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	3301      	adds	r3, #1
 80072ac:	61fb      	str	r3, [r7, #28]
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	2b0f      	cmp	r3, #15
 80072b2:	d9e9      	bls.n	8007288 <prvInitialiseNewTask+0x64>
 80072b4:	e000      	b.n	80072b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80072b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072c0:	e003      	b.n	80072ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	2b37      	cmp	r3, #55	; 0x37
 80072ce:	d901      	bls.n	80072d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072d0:	2337      	movs	r3, #55	; 0x37
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	2200      	movs	r2, #0
 80072e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	3304      	adds	r3, #4
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff f978 	bl	80065e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	3318      	adds	r3, #24
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff f973 	bl	80065e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	2200      	movs	r2, #0
 8007314:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	68f9      	ldr	r1, [r7, #12]
 8007322:	69b8      	ldr	r0, [r7, #24]
 8007324:	f001 f928 	bl	8008578 <pxPortInitialiseStack>
 8007328:	4602      	mov	r2, r0
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800733a:	bf00      	nop
 800733c:	3720      	adds	r7, #32
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800734c:	f001 fa42 	bl	80087d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007350:	4b2d      	ldr	r3, [pc, #180]	; (8007408 <prvAddNewTaskToReadyList+0xc4>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3301      	adds	r3, #1
 8007356:	4a2c      	ldr	r2, [pc, #176]	; (8007408 <prvAddNewTaskToReadyList+0xc4>)
 8007358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800735a:	4b2c      	ldr	r3, [pc, #176]	; (800740c <prvAddNewTaskToReadyList+0xc8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d109      	bne.n	8007376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007362:	4a2a      	ldr	r2, [pc, #168]	; (800740c <prvAddNewTaskToReadyList+0xc8>)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007368:	4b27      	ldr	r3, [pc, #156]	; (8007408 <prvAddNewTaskToReadyList+0xc4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d110      	bne.n	8007392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007370:	f000 fc16 	bl	8007ba0 <prvInitialiseTaskLists>
 8007374:	e00d      	b.n	8007392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007376:	4b26      	ldr	r3, [pc, #152]	; (8007410 <prvAddNewTaskToReadyList+0xcc>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d109      	bne.n	8007392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800737e:	4b23      	ldr	r3, [pc, #140]	; (800740c <prvAddNewTaskToReadyList+0xc8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	429a      	cmp	r2, r3
 800738a:	d802      	bhi.n	8007392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800738c:	4a1f      	ldr	r2, [pc, #124]	; (800740c <prvAddNewTaskToReadyList+0xc8>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007392:	4b20      	ldr	r3, [pc, #128]	; (8007414 <prvAddNewTaskToReadyList+0xd0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3301      	adds	r3, #1
 8007398:	4a1e      	ldr	r2, [pc, #120]	; (8007414 <prvAddNewTaskToReadyList+0xd0>)
 800739a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800739c:	4b1d      	ldr	r3, [pc, #116]	; (8007414 <prvAddNewTaskToReadyList+0xd0>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a8:	4b1b      	ldr	r3, [pc, #108]	; (8007418 <prvAddNewTaskToReadyList+0xd4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d903      	bls.n	80073b8 <prvAddNewTaskToReadyList+0x74>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	4a18      	ldr	r2, [pc, #96]	; (8007418 <prvAddNewTaskToReadyList+0xd4>)
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4a15      	ldr	r2, [pc, #84]	; (800741c <prvAddNewTaskToReadyList+0xd8>)
 80073c6:	441a      	add	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f7ff f913 	bl	80065fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073d4:	f001 fa2e 	bl	8008834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073d8:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <prvAddNewTaskToReadyList+0xcc>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00e      	beq.n	80073fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073e0:	4b0a      	ldr	r3, [pc, #40]	; (800740c <prvAddNewTaskToReadyList+0xc8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d207      	bcs.n	80073fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073ee:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <prvAddNewTaskToReadyList+0xdc>)
 80073f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000d94 	.word	0x20000d94
 800740c:	200008c0 	.word	0x200008c0
 8007410:	20000da0 	.word	0x20000da0
 8007414:	20000db0 	.word	0x20000db0
 8007418:	20000d9c 	.word	0x20000d9c
 800741c:	200008c4 	.word	0x200008c4
 8007420:	e000ed04 	.word	0xe000ed04

08007424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d017      	beq.n	8007466 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007436:	4b13      	ldr	r3, [pc, #76]	; (8007484 <vTaskDelay+0x60>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <vTaskDelay+0x30>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	60bb      	str	r3, [r7, #8]
}
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007454:	f000 f880 	bl	8007558 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007458:	2100      	movs	r1, #0
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fcea 	bl	8007e34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007460:	f000 f888 	bl	8007574 <xTaskResumeAll>
 8007464:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d107      	bne.n	800747c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800746c:	4b06      	ldr	r3, [pc, #24]	; (8007488 <vTaskDelay+0x64>)
 800746e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20000dbc 	.word	0x20000dbc
 8007488:	e000ed04 	.word	0xe000ed04

0800748c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	; 0x28
 8007490:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800749a:	463a      	mov	r2, r7
 800749c:	1d39      	adds	r1, r7, #4
 800749e:	f107 0308 	add.w	r3, r7, #8
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff f848 	bl	8006538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	9202      	str	r2, [sp, #8]
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	2300      	movs	r3, #0
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	2300      	movs	r3, #0
 80074b8:	460a      	mov	r2, r1
 80074ba:	4921      	ldr	r1, [pc, #132]	; (8007540 <vTaskStartScheduler+0xb4>)
 80074bc:	4821      	ldr	r0, [pc, #132]	; (8007544 <vTaskStartScheduler+0xb8>)
 80074be:	f7ff fe0f 	bl	80070e0 <xTaskCreateStatic>
 80074c2:	4603      	mov	r3, r0
 80074c4:	4a20      	ldr	r2, [pc, #128]	; (8007548 <vTaskStartScheduler+0xbc>)
 80074c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074c8:	4b1f      	ldr	r3, [pc, #124]	; (8007548 <vTaskStartScheduler+0xbc>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074d0:	2301      	movs	r3, #1
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e001      	b.n	80074da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d102      	bne.n	80074e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074e0:	f000 fcfc 	bl	8007edc <xTimerCreateTimerTask>
 80074e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d116      	bne.n	800751a <vTaskStartScheduler+0x8e>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	613b      	str	r3, [r7, #16]
}
 80074fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007500:	4b12      	ldr	r3, [pc, #72]	; (800754c <vTaskStartScheduler+0xc0>)
 8007502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007506:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007508:	4b11      	ldr	r3, [pc, #68]	; (8007550 <vTaskStartScheduler+0xc4>)
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800750e:	4b11      	ldr	r3, [pc, #68]	; (8007554 <vTaskStartScheduler+0xc8>)
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007514:	f001 f8bc 	bl	8008690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007518:	e00e      	b.n	8007538 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007520:	d10a      	bne.n	8007538 <vTaskStartScheduler+0xac>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	60fb      	str	r3, [r7, #12]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <vTaskStartScheduler+0xaa>
}
 8007538:	bf00      	nop
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	0800da30 	.word	0x0800da30
 8007544:	08007b71 	.word	0x08007b71
 8007548:	20000db8 	.word	0x20000db8
 800754c:	20000db4 	.word	0x20000db4
 8007550:	20000da0 	.word	0x20000da0
 8007554:	20000d98 	.word	0x20000d98

08007558 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800755c:	4b04      	ldr	r3, [pc, #16]	; (8007570 <vTaskSuspendAll+0x18>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3301      	adds	r3, #1
 8007562:	4a03      	ldr	r2, [pc, #12]	; (8007570 <vTaskSuspendAll+0x18>)
 8007564:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007566:	bf00      	nop
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	20000dbc 	.word	0x20000dbc

08007574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800757e:	2300      	movs	r3, #0
 8007580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007582:	4b42      	ldr	r3, [pc, #264]	; (800768c <xTaskResumeAll+0x118>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10a      	bne.n	80075a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	603b      	str	r3, [r7, #0]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075a0:	f001 f918 	bl	80087d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075a4:	4b39      	ldr	r3, [pc, #228]	; (800768c <xTaskResumeAll+0x118>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	4a38      	ldr	r2, [pc, #224]	; (800768c <xTaskResumeAll+0x118>)
 80075ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ae:	4b37      	ldr	r3, [pc, #220]	; (800768c <xTaskResumeAll+0x118>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d162      	bne.n	800767c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075b6:	4b36      	ldr	r3, [pc, #216]	; (8007690 <xTaskResumeAll+0x11c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d05e      	beq.n	800767c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075be:	e02f      	b.n	8007620 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c0:	4b34      	ldr	r3, [pc, #208]	; (8007694 <xTaskResumeAll+0x120>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3318      	adds	r3, #24
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff f871 	bl	80066b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff f86c 	bl	80066b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e0:	4b2d      	ldr	r3, [pc, #180]	; (8007698 <xTaskResumeAll+0x124>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d903      	bls.n	80075f0 <xTaskResumeAll+0x7c>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	4a2a      	ldr	r2, [pc, #168]	; (8007698 <xTaskResumeAll+0x124>)
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4a27      	ldr	r2, [pc, #156]	; (800769c <xTaskResumeAll+0x128>)
 80075fe:	441a      	add	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	4610      	mov	r0, r2
 8007608:	f7fe fff7 	bl	80065fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007610:	4b23      	ldr	r3, [pc, #140]	; (80076a0 <xTaskResumeAll+0x12c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	429a      	cmp	r2, r3
 8007618:	d302      	bcc.n	8007620 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800761a:	4b22      	ldr	r3, [pc, #136]	; (80076a4 <xTaskResumeAll+0x130>)
 800761c:	2201      	movs	r2, #1
 800761e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007620:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <xTaskResumeAll+0x120>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1cb      	bne.n	80075c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800762e:	f000 fb55 	bl	8007cdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007632:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <xTaskResumeAll+0x134>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d010      	beq.n	8007660 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800763e:	f000 f847 	bl	80076d0 <xTaskIncrementTick>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007648:	4b16      	ldr	r3, [pc, #88]	; (80076a4 <xTaskResumeAll+0x130>)
 800764a:	2201      	movs	r2, #1
 800764c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3b01      	subs	r3, #1
 8007652:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f1      	bne.n	800763e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800765a:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <xTaskResumeAll+0x134>)
 800765c:	2200      	movs	r2, #0
 800765e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007660:	4b10      	ldr	r3, [pc, #64]	; (80076a4 <xTaskResumeAll+0x130>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d009      	beq.n	800767c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800766c:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <xTaskResumeAll+0x138>)
 800766e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800767c:	f001 f8da 	bl	8008834 <vPortExitCritical>

	return xAlreadyYielded;
 8007680:	68bb      	ldr	r3, [r7, #8]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000dbc 	.word	0x20000dbc
 8007690:	20000d94 	.word	0x20000d94
 8007694:	20000d54 	.word	0x20000d54
 8007698:	20000d9c 	.word	0x20000d9c
 800769c:	200008c4 	.word	0x200008c4
 80076a0:	200008c0 	.word	0x200008c0
 80076a4:	20000da8 	.word	0x20000da8
 80076a8:	20000da4 	.word	0x20000da4
 80076ac:	e000ed04 	.word	0xe000ed04

080076b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076b6:	4b05      	ldr	r3, [pc, #20]	; (80076cc <xTaskGetTickCount+0x1c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076bc:	687b      	ldr	r3, [r7, #4]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20000d98 	.word	0x20000d98

080076d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076da:	4b4f      	ldr	r3, [pc, #316]	; (8007818 <xTaskIncrementTick+0x148>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f040 808f 	bne.w	8007802 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076e4:	4b4d      	ldr	r3, [pc, #308]	; (800781c <xTaskIncrementTick+0x14c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076ec:	4a4b      	ldr	r2, [pc, #300]	; (800781c <xTaskIncrementTick+0x14c>)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d120      	bne.n	800773a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80076f8:	4b49      	ldr	r3, [pc, #292]	; (8007820 <xTaskIncrementTick+0x150>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <xTaskIncrementTick+0x48>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	603b      	str	r3, [r7, #0]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <xTaskIncrementTick+0x46>
 8007718:	4b41      	ldr	r3, [pc, #260]	; (8007820 <xTaskIncrementTick+0x150>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	4b41      	ldr	r3, [pc, #260]	; (8007824 <xTaskIncrementTick+0x154>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a3f      	ldr	r2, [pc, #252]	; (8007820 <xTaskIncrementTick+0x150>)
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	4a3f      	ldr	r2, [pc, #252]	; (8007824 <xTaskIncrementTick+0x154>)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	4b3e      	ldr	r3, [pc, #248]	; (8007828 <xTaskIncrementTick+0x158>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3301      	adds	r3, #1
 8007732:	4a3d      	ldr	r2, [pc, #244]	; (8007828 <xTaskIncrementTick+0x158>)
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	f000 fad1 	bl	8007cdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800773a:	4b3c      	ldr	r3, [pc, #240]	; (800782c <xTaskIncrementTick+0x15c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d349      	bcc.n	80077d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007744:	4b36      	ldr	r3, [pc, #216]	; (8007820 <xTaskIncrementTick+0x150>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774e:	4b37      	ldr	r3, [pc, #220]	; (800782c <xTaskIncrementTick+0x15c>)
 8007750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007754:	601a      	str	r2, [r3, #0]
					break;
 8007756:	e03f      	b.n	80077d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007758:	4b31      	ldr	r3, [pc, #196]	; (8007820 <xTaskIncrementTick+0x150>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	429a      	cmp	r2, r3
 800776e:	d203      	bcs.n	8007778 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007770:	4a2e      	ldr	r2, [pc, #184]	; (800782c <xTaskIncrementTick+0x15c>)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007776:	e02f      	b.n	80077d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3304      	adds	r3, #4
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe ff99 	bl	80066b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	2b00      	cmp	r3, #0
 8007788:	d004      	beq.n	8007794 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	3318      	adds	r3, #24
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe ff90 	bl	80066b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007798:	4b25      	ldr	r3, [pc, #148]	; (8007830 <xTaskIncrementTick+0x160>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d903      	bls.n	80077a8 <xTaskIncrementTick+0xd8>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	4a22      	ldr	r2, [pc, #136]	; (8007830 <xTaskIncrementTick+0x160>)
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4a1f      	ldr	r2, [pc, #124]	; (8007834 <xTaskIncrementTick+0x164>)
 80077b6:	441a      	add	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f7fe ff1b 	bl	80065fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c8:	4b1b      	ldr	r3, [pc, #108]	; (8007838 <xTaskIncrementTick+0x168>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3b8      	bcc.n	8007744 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80077d2:	2301      	movs	r3, #1
 80077d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077d6:	e7b5      	b.n	8007744 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077d8:	4b17      	ldr	r3, [pc, #92]	; (8007838 <xTaskIncrementTick+0x168>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077de:	4915      	ldr	r1, [pc, #84]	; (8007834 <xTaskIncrementTick+0x164>)
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d901      	bls.n	80077f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077f4:	4b11      	ldr	r3, [pc, #68]	; (800783c <xTaskIncrementTick+0x16c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d007      	beq.n	800780c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e004      	b.n	800780c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007802:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <xTaskIncrementTick+0x170>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3301      	adds	r3, #1
 8007808:	4a0d      	ldr	r2, [pc, #52]	; (8007840 <xTaskIncrementTick+0x170>)
 800780a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800780c:	697b      	ldr	r3, [r7, #20]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20000dbc 	.word	0x20000dbc
 800781c:	20000d98 	.word	0x20000d98
 8007820:	20000d4c 	.word	0x20000d4c
 8007824:	20000d50 	.word	0x20000d50
 8007828:	20000dac 	.word	0x20000dac
 800782c:	20000db4 	.word	0x20000db4
 8007830:	20000d9c 	.word	0x20000d9c
 8007834:	200008c4 	.word	0x200008c4
 8007838:	200008c0 	.word	0x200008c0
 800783c:	20000da8 	.word	0x20000da8
 8007840:	20000da4 	.word	0x20000da4

08007844 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800784a:	4b28      	ldr	r3, [pc, #160]	; (80078ec <vTaskSwitchContext+0xa8>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007852:	4b27      	ldr	r3, [pc, #156]	; (80078f0 <vTaskSwitchContext+0xac>)
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007858:	e041      	b.n	80078de <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800785a:	4b25      	ldr	r3, [pc, #148]	; (80078f0 <vTaskSwitchContext+0xac>)
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007860:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <vTaskSwitchContext+0xb0>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	e010      	b.n	800788a <vTaskSwitchContext+0x46>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <vTaskSwitchContext+0x40>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	607b      	str	r3, [r7, #4]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <vTaskSwitchContext+0x3e>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3b01      	subs	r3, #1
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	491b      	ldr	r1, [pc, #108]	; (80078f8 <vTaskSwitchContext+0xb4>)
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0e4      	beq.n	8007868 <vTaskSwitchContext+0x24>
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4a13      	ldr	r2, [pc, #76]	; (80078f8 <vTaskSwitchContext+0xb4>)
 80078aa:	4413      	add	r3, r2
 80078ac:	60bb      	str	r3, [r7, #8]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	605a      	str	r2, [r3, #4]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	3308      	adds	r3, #8
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d104      	bne.n	80078ce <vTaskSwitchContext+0x8a>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	605a      	str	r2, [r3, #4]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	4a09      	ldr	r2, [pc, #36]	; (80078fc <vTaskSwitchContext+0xb8>)
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	4a06      	ldr	r2, [pc, #24]	; (80078f4 <vTaskSwitchContext+0xb0>)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6013      	str	r3, [r2, #0]
}
 80078de:	bf00      	nop
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	20000dbc 	.word	0x20000dbc
 80078f0:	20000da8 	.word	0x20000da8
 80078f4:	20000d9c 	.word	0x20000d9c
 80078f8:	200008c4 	.word	0x200008c4
 80078fc:	200008c0 	.word	0x200008c0

08007900 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	60fb      	str	r3, [r7, #12]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007926:	4b07      	ldr	r3, [pc, #28]	; (8007944 <vTaskPlaceOnEventList+0x44>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3318      	adds	r3, #24
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fe fe87 	bl	8006642 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007934:	2101      	movs	r1, #1
 8007936:	6838      	ldr	r0, [r7, #0]
 8007938:	f000 fa7c 	bl	8007e34 <prvAddCurrentTaskToDelayedList>
}
 800793c:	bf00      	nop
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	200008c0 	.word	0x200008c0

08007948 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	617b      	str	r3, [r7, #20]
}
 800796c:	bf00      	nop
 800796e:	e7fe      	b.n	800796e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007970:	4b0a      	ldr	r3, [pc, #40]	; (800799c <vTaskPlaceOnEventListRestricted+0x54>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3318      	adds	r3, #24
 8007976:	4619      	mov	r1, r3
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7fe fe3e 	bl	80065fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007988:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	68b8      	ldr	r0, [r7, #8]
 800798e:	f000 fa51 	bl	8007e34 <prvAddCurrentTaskToDelayedList>
	}
 8007992:	bf00      	nop
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	200008c0 	.word	0x200008c0

080079a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	60fb      	str	r3, [r7, #12]
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	3318      	adds	r3, #24
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fe fe6f 	bl	80066b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d6:	4b1e      	ldr	r3, [pc, #120]	; (8007a50 <xTaskRemoveFromEventList+0xb0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d11d      	bne.n	8007a1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	3304      	adds	r3, #4
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fe fe66 	bl	80066b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ec:	4b19      	ldr	r3, [pc, #100]	; (8007a54 <xTaskRemoveFromEventList+0xb4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d903      	bls.n	80079fc <xTaskRemoveFromEventList+0x5c>
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	4a16      	ldr	r2, [pc, #88]	; (8007a54 <xTaskRemoveFromEventList+0xb4>)
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a00:	4613      	mov	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4a13      	ldr	r2, [pc, #76]	; (8007a58 <xTaskRemoveFromEventList+0xb8>)
 8007a0a:	441a      	add	r2, r3
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4619      	mov	r1, r3
 8007a12:	4610      	mov	r0, r2
 8007a14:	f7fe fdf1 	bl	80065fa <vListInsertEnd>
 8007a18:	e005      	b.n	8007a26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	3318      	adds	r3, #24
 8007a1e:	4619      	mov	r1, r3
 8007a20:	480e      	ldr	r0, [pc, #56]	; (8007a5c <xTaskRemoveFromEventList+0xbc>)
 8007a22:	f7fe fdea 	bl	80065fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2a:	4b0d      	ldr	r3, [pc, #52]	; (8007a60 <xTaskRemoveFromEventList+0xc0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d905      	bls.n	8007a40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a34:	2301      	movs	r3, #1
 8007a36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a38:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <xTaskRemoveFromEventList+0xc4>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	e001      	b.n	8007a44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007a40:	2300      	movs	r3, #0
 8007a42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a44:	697b      	ldr	r3, [r7, #20]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000dbc 	.word	0x20000dbc
 8007a54:	20000d9c 	.word	0x20000d9c
 8007a58:	200008c4 	.word	0x200008c4
 8007a5c:	20000d54 	.word	0x20000d54
 8007a60:	200008c0 	.word	0x200008c0
 8007a64:	20000da8 	.word	0x20000da8

08007a68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a70:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <vTaskInternalSetTimeOutState+0x24>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <vTaskInternalSetTimeOutState+0x28>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	605a      	str	r2, [r3, #4]
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	20000dac 	.word	0x20000dac
 8007a90:	20000d98 	.word	0x20000d98

08007a94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	613b      	str	r3, [r7, #16]
}
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ad6:	f000 fe7d 	bl	80087d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ada:	4b1d      	ldr	r3, [pc, #116]	; (8007b50 <xTaskCheckForTimeOut+0xbc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007af2:	d102      	bne.n	8007afa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007af4:	2300      	movs	r3, #0
 8007af6:	61fb      	str	r3, [r7, #28]
 8007af8:	e023      	b.n	8007b42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	4b15      	ldr	r3, [pc, #84]	; (8007b54 <xTaskCheckForTimeOut+0xc0>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d007      	beq.n	8007b16 <xTaskCheckForTimeOut+0x82>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d302      	bcc.n	8007b16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b10:	2301      	movs	r3, #1
 8007b12:	61fb      	str	r3, [r7, #28]
 8007b14:	e015      	b.n	8007b42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d20b      	bcs.n	8007b38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	1ad2      	subs	r2, r2, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ff9b 	bl	8007a68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	61fb      	str	r3, [r7, #28]
 8007b36:	e004      	b.n	8007b42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b42:	f000 fe77 	bl	8008834 <vPortExitCritical>

	return xReturn;
 8007b46:	69fb      	ldr	r3, [r7, #28]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3720      	adds	r7, #32
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20000d98 	.word	0x20000d98
 8007b54:	20000dac 	.word	0x20000dac

08007b58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b5c:	4b03      	ldr	r3, [pc, #12]	; (8007b6c <vTaskMissedYield+0x14>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	601a      	str	r2, [r3, #0]
}
 8007b62:	bf00      	nop
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	20000da8 	.word	0x20000da8

08007b70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b78:	f000 f852 	bl	8007c20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <prvIdleTask+0x28>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d9f9      	bls.n	8007b78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <prvIdleTask+0x2c>)
 8007b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b94:	e7f0      	b.n	8007b78 <prvIdleTask+0x8>
 8007b96:	bf00      	nop
 8007b98:	200008c4 	.word	0x200008c4
 8007b9c:	e000ed04 	.word	0xe000ed04

08007ba0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	607b      	str	r3, [r7, #4]
 8007baa:	e00c      	b.n	8007bc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4a12      	ldr	r2, [pc, #72]	; (8007c00 <prvInitialiseTaskLists+0x60>)
 8007bb8:	4413      	add	r3, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fcf0 	bl	80065a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	607b      	str	r3, [r7, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b37      	cmp	r3, #55	; 0x37
 8007bca:	d9ef      	bls.n	8007bac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bcc:	480d      	ldr	r0, [pc, #52]	; (8007c04 <prvInitialiseTaskLists+0x64>)
 8007bce:	f7fe fce7 	bl	80065a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bd2:	480d      	ldr	r0, [pc, #52]	; (8007c08 <prvInitialiseTaskLists+0x68>)
 8007bd4:	f7fe fce4 	bl	80065a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bd8:	480c      	ldr	r0, [pc, #48]	; (8007c0c <prvInitialiseTaskLists+0x6c>)
 8007bda:	f7fe fce1 	bl	80065a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bde:	480c      	ldr	r0, [pc, #48]	; (8007c10 <prvInitialiseTaskLists+0x70>)
 8007be0:	f7fe fcde 	bl	80065a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007be4:	480b      	ldr	r0, [pc, #44]	; (8007c14 <prvInitialiseTaskLists+0x74>)
 8007be6:	f7fe fcdb 	bl	80065a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bea:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <prvInitialiseTaskLists+0x78>)
 8007bec:	4a05      	ldr	r2, [pc, #20]	; (8007c04 <prvInitialiseTaskLists+0x64>)
 8007bee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <prvInitialiseTaskLists+0x7c>)
 8007bf2:	4a05      	ldr	r2, [pc, #20]	; (8007c08 <prvInitialiseTaskLists+0x68>)
 8007bf4:	601a      	str	r2, [r3, #0]
}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	200008c4 	.word	0x200008c4
 8007c04:	20000d24 	.word	0x20000d24
 8007c08:	20000d38 	.word	0x20000d38
 8007c0c:	20000d54 	.word	0x20000d54
 8007c10:	20000d68 	.word	0x20000d68
 8007c14:	20000d80 	.word	0x20000d80
 8007c18:	20000d4c 	.word	0x20000d4c
 8007c1c:	20000d50 	.word	0x20000d50

08007c20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c26:	e019      	b.n	8007c5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c28:	f000 fdd4 	bl	80087d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c2c:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <prvCheckTasksWaitingTermination+0x50>)
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3304      	adds	r3, #4
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fe fd3b 	bl	80066b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <prvCheckTasksWaitingTermination+0x54>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	4a0b      	ldr	r2, [pc, #44]	; (8007c74 <prvCheckTasksWaitingTermination+0x54>)
 8007c46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c48:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <prvCheckTasksWaitingTermination+0x58>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	4a0a      	ldr	r2, [pc, #40]	; (8007c78 <prvCheckTasksWaitingTermination+0x58>)
 8007c50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c52:	f000 fdef 	bl	8008834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f810 	bl	8007c7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <prvCheckTasksWaitingTermination+0x58>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e1      	bne.n	8007c28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20000d68 	.word	0x20000d68
 8007c74:	20000d94 	.word	0x20000d94
 8007c78:	20000d7c 	.word	0x20000d7c

08007c7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d108      	bne.n	8007ca0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 ff8c 	bl	8008bb0 <vPortFree>
				vPortFree( pxTCB );
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 ff89 	bl	8008bb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c9e:	e018      	b.n	8007cd2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d103      	bne.n	8007cb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 ff80 	bl	8008bb0 <vPortFree>
	}
 8007cb0:	e00f      	b.n	8007cd2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d00a      	beq.n	8007cd2 <prvDeleteTCB+0x56>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60fb      	str	r3, [r7, #12]
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <prvDeleteTCB+0x54>
	}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ce2:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <prvResetNextTaskUnblockTime+0x38>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <prvResetNextTaskUnblockTime+0x3c>)
 8007cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cf2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007cf4:	e008      	b.n	8007d08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf6:	4b07      	ldr	r3, [pc, #28]	; (8007d14 <prvResetNextTaskUnblockTime+0x38>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	4a04      	ldr	r2, [pc, #16]	; (8007d18 <prvResetNextTaskUnblockTime+0x3c>)
 8007d06:	6013      	str	r3, [r2, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	20000d4c 	.word	0x20000d4c
 8007d18:	20000db4 	.word	0x20000db4

08007d1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d22:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <xTaskGetSchedulerState+0x34>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d102      	bne.n	8007d30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	607b      	str	r3, [r7, #4]
 8007d2e:	e008      	b.n	8007d42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d30:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <xTaskGetSchedulerState+0x38>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d102      	bne.n	8007d3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d38:	2302      	movs	r3, #2
 8007d3a:	607b      	str	r3, [r7, #4]
 8007d3c:	e001      	b.n	8007d42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d42:	687b      	ldr	r3, [r7, #4]
	}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	20000da0 	.word	0x20000da0
 8007d54:	20000dbc 	.word	0x20000dbc

08007d58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d056      	beq.n	8007e1c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d6e:	4b2e      	ldr	r3, [pc, #184]	; (8007e28 <xTaskPriorityDisinherit+0xd0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d00a      	beq.n	8007d8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	60fb      	str	r3, [r7, #12]
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10a      	bne.n	8007dac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	60bb      	str	r3, [r7, #8]
}
 8007da8:	bf00      	nop
 8007daa:	e7fe      	b.n	8007daa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db0:	1e5a      	subs	r2, r3, #1
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d02c      	beq.n	8007e1c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d128      	bne.n	8007e1c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fc70 	bl	80066b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <xTaskPriorityDisinherit+0xd4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d903      	bls.n	8007dfc <xTaskPriorityDisinherit+0xa4>
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	4a0c      	ldr	r2, [pc, #48]	; (8007e2c <xTaskPriorityDisinherit+0xd4>)
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e00:	4613      	mov	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4a09      	ldr	r2, [pc, #36]	; (8007e30 <xTaskPriorityDisinherit+0xd8>)
 8007e0a:	441a      	add	r2, r3
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4619      	mov	r1, r3
 8007e12:	4610      	mov	r0, r2
 8007e14:	f7fe fbf1 	bl	80065fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e1c:	697b      	ldr	r3, [r7, #20]
	}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	200008c0 	.word	0x200008c0
 8007e2c:	20000d9c 	.word	0x20000d9c
 8007e30:	200008c4 	.word	0x200008c4

08007e34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e3e:	4b21      	ldr	r3, [pc, #132]	; (8007ec4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e44:	4b20      	ldr	r3, [pc, #128]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fc32 	bl	80066b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e56:	d10a      	bne.n	8007e6e <prvAddCurrentTaskToDelayedList+0x3a>
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d007      	beq.n	8007e6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e5e:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4819      	ldr	r0, [pc, #100]	; (8007ecc <prvAddCurrentTaskToDelayedList+0x98>)
 8007e68:	f7fe fbc7 	bl	80065fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e6c:	e026      	b.n	8007ebc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4413      	add	r3, r2
 8007e74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e76:	4b14      	ldr	r3, [pc, #80]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d209      	bcs.n	8007e9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e86:	4b12      	ldr	r3, [pc, #72]	; (8007ed0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f7fe fbd5 	bl	8006642 <vListInsert>
}
 8007e98:	e010      	b.n	8007ebc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e9a:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	f7fe fbcb 	bl	8006642 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d202      	bcs.n	8007ebc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007eb6:	4a08      	ldr	r2, [pc, #32]	; (8007ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	6013      	str	r3, [r2, #0]
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20000d98 	.word	0x20000d98
 8007ec8:	200008c0 	.word	0x200008c0
 8007ecc:	20000d80 	.word	0x20000d80
 8007ed0:	20000d50 	.word	0x20000d50
 8007ed4:	20000d4c 	.word	0x20000d4c
 8007ed8:	20000db4 	.word	0x20000db4

08007edc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08a      	sub	sp, #40	; 0x28
 8007ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ee6:	f000 fb07 	bl	80084f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007eea:	4b1c      	ldr	r3, [pc, #112]	; (8007f5c <xTimerCreateTimerTask+0x80>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d021      	beq.n	8007f36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007efa:	1d3a      	adds	r2, r7, #4
 8007efc:	f107 0108 	add.w	r1, r7, #8
 8007f00:	f107 030c 	add.w	r3, r7, #12
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fb31 	bl	800656c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	9202      	str	r2, [sp, #8]
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	2302      	movs	r3, #2
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	460a      	mov	r2, r1
 8007f1c:	4910      	ldr	r1, [pc, #64]	; (8007f60 <xTimerCreateTimerTask+0x84>)
 8007f1e:	4811      	ldr	r0, [pc, #68]	; (8007f64 <xTimerCreateTimerTask+0x88>)
 8007f20:	f7ff f8de 	bl	80070e0 <xTaskCreateStatic>
 8007f24:	4603      	mov	r3, r0
 8007f26:	4a10      	ldr	r2, [pc, #64]	; (8007f68 <xTimerCreateTimerTask+0x8c>)
 8007f28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f2a:	4b0f      	ldr	r3, [pc, #60]	; (8007f68 <xTimerCreateTimerTask+0x8c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f32:	2301      	movs	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	613b      	str	r3, [r7, #16]
}
 8007f4e:	bf00      	nop
 8007f50:	e7fe      	b.n	8007f50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f52:	697b      	ldr	r3, [r7, #20]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20000df0 	.word	0x20000df0
 8007f60:	0800da38 	.word	0x0800da38
 8007f64:	080080a1 	.word	0x080080a1
 8007f68:	20000df4 	.word	0x20000df4

08007f6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08a      	sub	sp, #40	; 0x28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10a      	bne.n	8007f9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	623b      	str	r3, [r7, #32]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f9a:	4b1a      	ldr	r3, [pc, #104]	; (8008004 <xTimerGenericCommand+0x98>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d02a      	beq.n	8007ff8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b05      	cmp	r3, #5
 8007fb2:	dc18      	bgt.n	8007fe6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007fb4:	f7ff feb2 	bl	8007d1c <xTaskGetSchedulerState>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d109      	bne.n	8007fd2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fbe:	4b11      	ldr	r3, [pc, #68]	; (8008004 <xTimerGenericCommand+0x98>)
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	f107 0110 	add.w	r1, r7, #16
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fca:	f7fe fca1 	bl	8006910 <xQueueGenericSend>
 8007fce:	6278      	str	r0, [r7, #36]	; 0x24
 8007fd0:	e012      	b.n	8007ff8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fd2:	4b0c      	ldr	r3, [pc, #48]	; (8008004 <xTimerGenericCommand+0x98>)
 8007fd4:	6818      	ldr	r0, [r3, #0]
 8007fd6:	f107 0110 	add.w	r1, r7, #16
 8007fda:	2300      	movs	r3, #0
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f7fe fc97 	bl	8006910 <xQueueGenericSend>
 8007fe2:	6278      	str	r0, [r7, #36]	; 0x24
 8007fe4:	e008      	b.n	8007ff8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fe6:	4b07      	ldr	r3, [pc, #28]	; (8008004 <xTimerGenericCommand+0x98>)
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	f107 0110 	add.w	r1, r7, #16
 8007fee:	2300      	movs	r3, #0
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	f7fe fd8b 	bl	8006b0c <xQueueGenericSendFromISR>
 8007ff6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3728      	adds	r7, #40	; 0x28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20000df0 	.word	0x20000df0

08008008 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af02      	add	r7, sp, #8
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008012:	4b22      	ldr	r3, [pc, #136]	; (800809c <prvProcessExpiredTimer+0x94>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	3304      	adds	r3, #4
 8008020:	4618      	mov	r0, r3
 8008022:	f7fe fb47 	bl	80066b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d022      	beq.n	800807a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	699a      	ldr	r2, [r3, #24]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	18d1      	adds	r1, r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	6978      	ldr	r0, [r7, #20]
 8008042:	f000 f8d1 	bl	80081e8 <prvInsertTimerInActiveList>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01f      	beq.n	800808c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800804c:	2300      	movs	r3, #0
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	2300      	movs	r3, #0
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	2100      	movs	r1, #0
 8008056:	6978      	ldr	r0, [r7, #20]
 8008058:	f7ff ff88 	bl	8007f6c <xTimerGenericCommand>
 800805c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d113      	bne.n	800808c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	60fb      	str	r3, [r7, #12]
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008080:	f023 0301 	bic.w	r3, r3, #1
 8008084:	b2da      	uxtb	r2, r3
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	6978      	ldr	r0, [r7, #20]
 8008092:	4798      	blx	r3
}
 8008094:	bf00      	nop
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20000de8 	.word	0x20000de8

080080a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080a8:	f107 0308 	add.w	r3, r7, #8
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 f857 	bl	8008160 <prvGetNextExpireTime>
 80080b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	4619      	mov	r1, r3
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 f803 	bl	80080c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080be:	f000 f8d5 	bl	800826c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080c2:	e7f1      	b.n	80080a8 <prvTimerTask+0x8>

080080c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080ce:	f7ff fa43 	bl	8007558 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080d2:	f107 0308 	add.w	r3, r7, #8
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f866 	bl	80081a8 <prvSampleTimeNow>
 80080dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d130      	bne.n	8008146 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <prvProcessTimerOrBlockTask+0x3c>
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d806      	bhi.n	8008100 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080f2:	f7ff fa3f 	bl	8007574 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff ff85 	bl	8008008 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080fe:	e024      	b.n	800814a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d008      	beq.n	8008118 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008106:	4b13      	ldr	r3, [pc, #76]	; (8008154 <prvProcessTimerOrBlockTask+0x90>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <prvProcessTimerOrBlockTask+0x50>
 8008110:	2301      	movs	r3, #1
 8008112:	e000      	b.n	8008116 <prvProcessTimerOrBlockTask+0x52>
 8008114:	2300      	movs	r3, #0
 8008116:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008118:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <prvProcessTimerOrBlockTask+0x94>)
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	4619      	mov	r1, r3
 8008126:	f7fe ffa7 	bl	8007078 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800812a:	f7ff fa23 	bl	8007574 <xTaskResumeAll>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008134:	4b09      	ldr	r3, [pc, #36]	; (800815c <prvProcessTimerOrBlockTask+0x98>)
 8008136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	f3bf 8f6f 	isb	sy
}
 8008144:	e001      	b.n	800814a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008146:	f7ff fa15 	bl	8007574 <xTaskResumeAll>
}
 800814a:	bf00      	nop
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000dec 	.word	0x20000dec
 8008158:	20000df0 	.word	0x20000df0
 800815c:	e000ed04 	.word	0xe000ed04

08008160 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008168:	4b0e      	ldr	r3, [pc, #56]	; (80081a4 <prvGetNextExpireTime+0x44>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <prvGetNextExpireTime+0x16>
 8008172:	2201      	movs	r2, #1
 8008174:	e000      	b.n	8008178 <prvGetNextExpireTime+0x18>
 8008176:	2200      	movs	r2, #0
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008184:	4b07      	ldr	r3, [pc, #28]	; (80081a4 <prvGetNextExpireTime+0x44>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60fb      	str	r3, [r7, #12]
 800818e:	e001      	b.n	8008194 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008194:	68fb      	ldr	r3, [r7, #12]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	20000de8 	.word	0x20000de8

080081a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081b0:	f7ff fa7e 	bl	80076b0 <xTaskGetTickCount>
 80081b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081b6:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <prvSampleTimeNow+0x3c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d205      	bcs.n	80081cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80081c0:	f000 f936 	bl	8008430 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	e002      	b.n	80081d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081d2:	4a04      	ldr	r2, [pc, #16]	; (80081e4 <prvSampleTimeNow+0x3c>)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081d8:	68fb      	ldr	r3, [r7, #12]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20000df8 	.word	0x20000df8

080081e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	429a      	cmp	r2, r3
 800820c:	d812      	bhi.n	8008234 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	1ad2      	subs	r2, r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	429a      	cmp	r2, r3
 800821a:	d302      	bcc.n	8008222 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800821c:	2301      	movs	r3, #1
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	e01b      	b.n	800825a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008222:	4b10      	ldr	r3, [pc, #64]	; (8008264 <prvInsertTimerInActiveList+0x7c>)
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3304      	adds	r3, #4
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f7fe fa08 	bl	8006642 <vListInsert>
 8008232:	e012      	b.n	800825a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	429a      	cmp	r2, r3
 800823a:	d206      	bcs.n	800824a <prvInsertTimerInActiveList+0x62>
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	429a      	cmp	r2, r3
 8008242:	d302      	bcc.n	800824a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008244:	2301      	movs	r3, #1
 8008246:	617b      	str	r3, [r7, #20]
 8008248:	e007      	b.n	800825a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800824a:	4b07      	ldr	r3, [pc, #28]	; (8008268 <prvInsertTimerInActiveList+0x80>)
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3304      	adds	r3, #4
 8008252:	4619      	mov	r1, r3
 8008254:	4610      	mov	r0, r2
 8008256:	f7fe f9f4 	bl	8006642 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800825a:	697b      	ldr	r3, [r7, #20]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20000dec 	.word	0x20000dec
 8008268:	20000de8 	.word	0x20000de8

0800826c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08e      	sub	sp, #56	; 0x38
 8008270:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008272:	e0ca      	b.n	800840a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	da18      	bge.n	80082ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800827a:	1d3b      	adds	r3, r7, #4
 800827c:	3304      	adds	r3, #4
 800827e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	61fb      	str	r3, [r7, #28]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a2:	6850      	ldr	r0, [r2, #4]
 80082a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a6:	6892      	ldr	r2, [r2, #8]
 80082a8:	4611      	mov	r1, r2
 80082aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f2c0 80aa 	blt.w	8008408 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80082b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	3304      	adds	r3, #4
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe f9f5 	bl	80066b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082ca:	463b      	mov	r3, r7
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff ff6b 	bl	80081a8 <prvSampleTimeNow>
 80082d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b09      	cmp	r3, #9
 80082d8:	f200 8097 	bhi.w	800840a <prvProcessReceivedCommands+0x19e>
 80082dc:	a201      	add	r2, pc, #4	; (adr r2, 80082e4 <prvProcessReceivedCommands+0x78>)
 80082de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e2:	bf00      	nop
 80082e4:	0800830d 	.word	0x0800830d
 80082e8:	0800830d 	.word	0x0800830d
 80082ec:	0800830d 	.word	0x0800830d
 80082f0:	08008381 	.word	0x08008381
 80082f4:	08008395 	.word	0x08008395
 80082f8:	080083df 	.word	0x080083df
 80082fc:	0800830d 	.word	0x0800830d
 8008300:	0800830d 	.word	0x0800830d
 8008304:	08008381 	.word	0x08008381
 8008308:	08008395 	.word	0x08008395
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008312:	f043 0301 	orr.w	r3, r3, #1
 8008316:	b2da      	uxtb	r2, r3
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	18d1      	adds	r1, r2, r3
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800832a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800832c:	f7ff ff5c 	bl	80081e8 <prvInsertTimerInActiveList>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d069      	beq.n	800840a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800833c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	d05e      	beq.n	800840a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	441a      	add	r2, r3
 8008354:	2300      	movs	r3, #0
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	2300      	movs	r3, #0
 800835a:	2100      	movs	r1, #0
 800835c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800835e:	f7ff fe05 	bl	8007f6c <xTimerGenericCommand>
 8008362:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d14f      	bne.n	800840a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	61bb      	str	r3, [r7, #24]
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008386:	f023 0301 	bic.w	r3, r3, #1
 800838a:	b2da      	uxtb	r2, r3
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008392:	e03a      	b.n	800840a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	617b      	str	r3, [r7, #20]
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	699a      	ldr	r2, [r3, #24]
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	18d1      	adds	r1, r2, r3
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083d8:	f7ff ff06 	bl	80081e8 <prvInsertTimerInActiveList>
					break;
 80083dc:	e015      	b.n	800840a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d103      	bne.n	80083f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80083ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ee:	f000 fbdf 	bl	8008bb0 <vPortFree>
 80083f2:	e00a      	b.n	800840a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083fa:	f023 0301 	bic.w	r3, r3, #1
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008406:	e000      	b.n	800840a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008408:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800840a:	4b08      	ldr	r3, [pc, #32]	; (800842c <prvProcessReceivedCommands+0x1c0>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	1d39      	adds	r1, r7, #4
 8008410:	2200      	movs	r2, #0
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fc16 	bl	8006c44 <xQueueReceive>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	f47f af2a 	bne.w	8008274 <prvProcessReceivedCommands+0x8>
	}
}
 8008420:	bf00      	nop
 8008422:	bf00      	nop
 8008424:	3730      	adds	r7, #48	; 0x30
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000df0 	.word	0x20000df0

08008430 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008436:	e048      	b.n	80084ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008438:	4b2d      	ldr	r3, [pc, #180]	; (80084f0 <prvSwitchTimerLists+0xc0>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008442:	4b2b      	ldr	r3, [pc, #172]	; (80084f0 <prvSwitchTimerLists+0xc0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3304      	adds	r3, #4
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe f92f 	bl	80066b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	2b00      	cmp	r3, #0
 800846a:	d02e      	beq.n	80084ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	4413      	add	r3, r2
 8008474:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	429a      	cmp	r2, r3
 800847c:	d90e      	bls.n	800849c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800848a:	4b19      	ldr	r3, [pc, #100]	; (80084f0 <prvSwitchTimerLists+0xc0>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3304      	adds	r3, #4
 8008492:	4619      	mov	r1, r3
 8008494:	4610      	mov	r0, r2
 8008496:	f7fe f8d4 	bl	8006642 <vListInsert>
 800849a:	e016      	b.n	80084ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800849c:	2300      	movs	r3, #0
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	2300      	movs	r3, #0
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	2100      	movs	r1, #0
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff fd60 	bl	8007f6c <xTimerGenericCommand>
 80084ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	603b      	str	r3, [r7, #0]
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084ca:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <prvSwitchTimerLists+0xc0>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1b1      	bne.n	8008438 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084d4:	4b06      	ldr	r3, [pc, #24]	; (80084f0 <prvSwitchTimerLists+0xc0>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084da:	4b06      	ldr	r3, [pc, #24]	; (80084f4 <prvSwitchTimerLists+0xc4>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a04      	ldr	r2, [pc, #16]	; (80084f0 <prvSwitchTimerLists+0xc0>)
 80084e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084e2:	4a04      	ldr	r2, [pc, #16]	; (80084f4 <prvSwitchTimerLists+0xc4>)
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	6013      	str	r3, [r2, #0]
}
 80084e8:	bf00      	nop
 80084ea:	3718      	adds	r7, #24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20000de8 	.word	0x20000de8
 80084f4:	20000dec 	.word	0x20000dec

080084f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084fe:	f000 f969 	bl	80087d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008502:	4b15      	ldr	r3, [pc, #84]	; (8008558 <prvCheckForValidListAndQueue+0x60>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d120      	bne.n	800854c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800850a:	4814      	ldr	r0, [pc, #80]	; (800855c <prvCheckForValidListAndQueue+0x64>)
 800850c:	f7fe f848 	bl	80065a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008510:	4813      	ldr	r0, [pc, #76]	; (8008560 <prvCheckForValidListAndQueue+0x68>)
 8008512:	f7fe f845 	bl	80065a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008516:	4b13      	ldr	r3, [pc, #76]	; (8008564 <prvCheckForValidListAndQueue+0x6c>)
 8008518:	4a10      	ldr	r2, [pc, #64]	; (800855c <prvCheckForValidListAndQueue+0x64>)
 800851a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800851c:	4b12      	ldr	r3, [pc, #72]	; (8008568 <prvCheckForValidListAndQueue+0x70>)
 800851e:	4a10      	ldr	r2, [pc, #64]	; (8008560 <prvCheckForValidListAndQueue+0x68>)
 8008520:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008522:	2300      	movs	r3, #0
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	4b11      	ldr	r3, [pc, #68]	; (800856c <prvCheckForValidListAndQueue+0x74>)
 8008528:	4a11      	ldr	r2, [pc, #68]	; (8008570 <prvCheckForValidListAndQueue+0x78>)
 800852a:	2110      	movs	r1, #16
 800852c:	200a      	movs	r0, #10
 800852e:	f7fe f953 	bl	80067d8 <xQueueGenericCreateStatic>
 8008532:	4603      	mov	r3, r0
 8008534:	4a08      	ldr	r2, [pc, #32]	; (8008558 <prvCheckForValidListAndQueue+0x60>)
 8008536:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008538:	4b07      	ldr	r3, [pc, #28]	; (8008558 <prvCheckForValidListAndQueue+0x60>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008540:	4b05      	ldr	r3, [pc, #20]	; (8008558 <prvCheckForValidListAndQueue+0x60>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	490b      	ldr	r1, [pc, #44]	; (8008574 <prvCheckForValidListAndQueue+0x7c>)
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fd6c 	bl	8007024 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800854c:	f000 f972 	bl	8008834 <vPortExitCritical>
}
 8008550:	bf00      	nop
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20000df0 	.word	0x20000df0
 800855c:	20000dc0 	.word	0x20000dc0
 8008560:	20000dd4 	.word	0x20000dd4
 8008564:	20000de8 	.word	0x20000de8
 8008568:	20000dec 	.word	0x20000dec
 800856c:	20000e9c 	.word	0x20000e9c
 8008570:	20000dfc 	.word	0x20000dfc
 8008574:	0800da40 	.word	0x0800da40

08008578 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3b04      	subs	r3, #4
 8008588:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3b04      	subs	r3, #4
 8008596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f023 0201 	bic.w	r2, r3, #1
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3b04      	subs	r3, #4
 80085a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085a8:	4a0c      	ldr	r2, [pc, #48]	; (80085dc <pxPortInitialiseStack+0x64>)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3b14      	subs	r3, #20
 80085b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3b04      	subs	r3, #4
 80085be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f06f 0202 	mvn.w	r2, #2
 80085c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3b20      	subs	r3, #32
 80085cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085ce:	68fb      	ldr	r3, [r7, #12]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	080085e1 	.word	0x080085e1

080085e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085ea:	4b12      	ldr	r3, [pc, #72]	; (8008634 <prvTaskExitError+0x54>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f2:	d00a      	beq.n	800860a <prvTaskExitError+0x2a>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	60fb      	str	r3, [r7, #12]
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <prvTaskExitError+0x28>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	60bb      	str	r3, [r7, #8]
}
 800861c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800861e:	bf00      	nop
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d0fc      	beq.n	8008620 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008626:	bf00      	nop
 8008628:	bf00      	nop
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	2000000c 	.word	0x2000000c
	...

08008640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <pxCurrentTCBConst2>)
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	6808      	ldr	r0, [r1, #0]
 8008646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864a:	f380 8809 	msr	PSP, r0
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8811 	msr	BASEPRI, r0
 800865a:	4770      	bx	lr
 800865c:	f3af 8000 	nop.w

08008660 <pxCurrentTCBConst2>:
 8008660:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop

08008668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008668:	4808      	ldr	r0, [pc, #32]	; (800868c <prvPortStartFirstTask+0x24>)
 800866a:	6800      	ldr	r0, [r0, #0]
 800866c:	6800      	ldr	r0, [r0, #0]
 800866e:	f380 8808 	msr	MSP, r0
 8008672:	f04f 0000 	mov.w	r0, #0
 8008676:	f380 8814 	msr	CONTROL, r0
 800867a:	b662      	cpsie	i
 800867c:	b661      	cpsie	f
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	df00      	svc	0
 8008688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800868a:	bf00      	nop
 800868c:	e000ed08 	.word	0xe000ed08

08008690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008696:	4b46      	ldr	r3, [pc, #280]	; (80087b0 <xPortStartScheduler+0x120>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a46      	ldr	r2, [pc, #280]	; (80087b4 <xPortStartScheduler+0x124>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d10a      	bne.n	80086b6 <xPortStartScheduler+0x26>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	613b      	str	r3, [r7, #16]
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086b6:	4b3e      	ldr	r3, [pc, #248]	; (80087b0 <xPortStartScheduler+0x120>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a3f      	ldr	r2, [pc, #252]	; (80087b8 <xPortStartScheduler+0x128>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d10a      	bne.n	80086d6 <xPortStartScheduler+0x46>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	60fb      	str	r3, [r7, #12]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086d6:	4b39      	ldr	r3, [pc, #228]	; (80087bc <xPortStartScheduler+0x12c>)
 80086d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	22ff      	movs	r2, #255	; 0xff
 80086e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	4b31      	ldr	r3, [pc, #196]	; (80087c0 <xPortStartScheduler+0x130>)
 80086fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086fe:	4b31      	ldr	r3, [pc, #196]	; (80087c4 <xPortStartScheduler+0x134>)
 8008700:	2207      	movs	r2, #7
 8008702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008704:	e009      	b.n	800871a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008706:	4b2f      	ldr	r3, [pc, #188]	; (80087c4 <xPortStartScheduler+0x134>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3b01      	subs	r3, #1
 800870c:	4a2d      	ldr	r2, [pc, #180]	; (80087c4 <xPortStartScheduler+0x134>)
 800870e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	b2db      	uxtb	r3, r3
 8008718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	b2db      	uxtb	r3, r3
 800871e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008722:	2b80      	cmp	r3, #128	; 0x80
 8008724:	d0ef      	beq.n	8008706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008726:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <xPortStartScheduler+0x134>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f1c3 0307 	rsb	r3, r3, #7
 800872e:	2b04      	cmp	r3, #4
 8008730:	d00a      	beq.n	8008748 <xPortStartScheduler+0xb8>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	60bb      	str	r3, [r7, #8]
}
 8008744:	bf00      	nop
 8008746:	e7fe      	b.n	8008746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008748:	4b1e      	ldr	r3, [pc, #120]	; (80087c4 <xPortStartScheduler+0x134>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	4a1d      	ldr	r2, [pc, #116]	; (80087c4 <xPortStartScheduler+0x134>)
 8008750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008752:	4b1c      	ldr	r3, [pc, #112]	; (80087c4 <xPortStartScheduler+0x134>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800875a:	4a1a      	ldr	r2, [pc, #104]	; (80087c4 <xPortStartScheduler+0x134>)
 800875c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	b2da      	uxtb	r2, r3
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008766:	4b18      	ldr	r3, [pc, #96]	; (80087c8 <xPortStartScheduler+0x138>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a17      	ldr	r2, [pc, #92]	; (80087c8 <xPortStartScheduler+0x138>)
 800876c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008772:	4b15      	ldr	r3, [pc, #84]	; (80087c8 <xPortStartScheduler+0x138>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a14      	ldr	r2, [pc, #80]	; (80087c8 <xPortStartScheduler+0x138>)
 8008778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800877c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800877e:	f000 f8dd 	bl	800893c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008782:	4b12      	ldr	r3, [pc, #72]	; (80087cc <xPortStartScheduler+0x13c>)
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008788:	f000 f8fc 	bl	8008984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800878c:	4b10      	ldr	r3, [pc, #64]	; (80087d0 <xPortStartScheduler+0x140>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a0f      	ldr	r2, [pc, #60]	; (80087d0 <xPortStartScheduler+0x140>)
 8008792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008798:	f7ff ff66 	bl	8008668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800879c:	f7ff f852 	bl	8007844 <vTaskSwitchContext>
	prvTaskExitError();
 80087a0:	f7ff ff1e 	bl	80085e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3718      	adds	r7, #24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	e000ed00 	.word	0xe000ed00
 80087b4:	410fc271 	.word	0x410fc271
 80087b8:	410fc270 	.word	0x410fc270
 80087bc:	e000e400 	.word	0xe000e400
 80087c0:	20000eec 	.word	0x20000eec
 80087c4:	20000ef0 	.word	0x20000ef0
 80087c8:	e000ed20 	.word	0xe000ed20
 80087cc:	2000000c 	.word	0x2000000c
 80087d0:	e000ef34 	.word	0xe000ef34

080087d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	607b      	str	r3, [r7, #4]
}
 80087ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087ee:	4b0f      	ldr	r3, [pc, #60]	; (800882c <vPortEnterCritical+0x58>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3301      	adds	r3, #1
 80087f4:	4a0d      	ldr	r2, [pc, #52]	; (800882c <vPortEnterCritical+0x58>)
 80087f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087f8:	4b0c      	ldr	r3, [pc, #48]	; (800882c <vPortEnterCritical+0x58>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d10f      	bne.n	8008820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008800:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <vPortEnterCritical+0x5c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <vPortEnterCritical+0x4c>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	603b      	str	r3, [r7, #0]
}
 800881c:	bf00      	nop
 800881e:	e7fe      	b.n	800881e <vPortEnterCritical+0x4a>
	}
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	2000000c 	.word	0x2000000c
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800883a:	4b12      	ldr	r3, [pc, #72]	; (8008884 <vPortExitCritical+0x50>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10a      	bne.n	8008858 <vPortExitCritical+0x24>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	607b      	str	r3, [r7, #4]
}
 8008854:	bf00      	nop
 8008856:	e7fe      	b.n	8008856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008858:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <vPortExitCritical+0x50>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3b01      	subs	r3, #1
 800885e:	4a09      	ldr	r2, [pc, #36]	; (8008884 <vPortExitCritical+0x50>)
 8008860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008862:	4b08      	ldr	r3, [pc, #32]	; (8008884 <vPortExitCritical+0x50>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d105      	bne.n	8008876 <vPortExitCritical+0x42>
 800886a:	2300      	movs	r3, #0
 800886c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	f383 8811 	msr	BASEPRI, r3
}
 8008874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	2000000c 	.word	0x2000000c
	...

08008890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008890:	f3ef 8009 	mrs	r0, PSP
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <pxCurrentTCBConst>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	f01e 0f10 	tst.w	lr, #16
 80088a0:	bf08      	it	eq
 80088a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088aa:	6010      	str	r0, [r2, #0]
 80088ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088b4:	f380 8811 	msr	BASEPRI, r0
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f7fe ffc0 	bl	8007844 <vTaskSwitchContext>
 80088c4:	f04f 0000 	mov.w	r0, #0
 80088c8:	f380 8811 	msr	BASEPRI, r0
 80088cc:	bc09      	pop	{r0, r3}
 80088ce:	6819      	ldr	r1, [r3, #0]
 80088d0:	6808      	ldr	r0, [r1, #0]
 80088d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d6:	f01e 0f10 	tst.w	lr, #16
 80088da:	bf08      	it	eq
 80088dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088e0:	f380 8809 	msr	PSP, r0
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	f3af 8000 	nop.w

080088f0 <pxCurrentTCBConst>:
 80088f0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop

080088f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	607b      	str	r3, [r7, #4]
}
 8008910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008912:	f7fe fedd 	bl	80076d0 <xTaskIncrementTick>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800891c:	4b06      	ldr	r3, [pc, #24]	; (8008938 <xPortSysTickHandler+0x40>)
 800891e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	2300      	movs	r3, #0
 8008926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	f383 8811 	msr	BASEPRI, r3
}
 800892e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	e000ed04 	.word	0xe000ed04

0800893c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008940:	4b0b      	ldr	r3, [pc, #44]	; (8008970 <vPortSetupTimerInterrupt+0x34>)
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008946:	4b0b      	ldr	r3, [pc, #44]	; (8008974 <vPortSetupTimerInterrupt+0x38>)
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800894c:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <vPortSetupTimerInterrupt+0x3c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a0a      	ldr	r2, [pc, #40]	; (800897c <vPortSetupTimerInterrupt+0x40>)
 8008952:	fba2 2303 	umull	r2, r3, r2, r3
 8008956:	099b      	lsrs	r3, r3, #6
 8008958:	4a09      	ldr	r2, [pc, #36]	; (8008980 <vPortSetupTimerInterrupt+0x44>)
 800895a:	3b01      	subs	r3, #1
 800895c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800895e:	4b04      	ldr	r3, [pc, #16]	; (8008970 <vPortSetupTimerInterrupt+0x34>)
 8008960:	2207      	movs	r2, #7
 8008962:	601a      	str	r2, [r3, #0]
}
 8008964:	bf00      	nop
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	e000e010 	.word	0xe000e010
 8008974:	e000e018 	.word	0xe000e018
 8008978:	20000000 	.word	0x20000000
 800897c:	10624dd3 	.word	0x10624dd3
 8008980:	e000e014 	.word	0xe000e014

08008984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008994 <vPortEnableVFP+0x10>
 8008988:	6801      	ldr	r1, [r0, #0]
 800898a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800898e:	6001      	str	r1, [r0, #0]
 8008990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008992:	bf00      	nop
 8008994:	e000ed88 	.word	0xe000ed88

08008998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800899e:	f3ef 8305 	mrs	r3, IPSR
 80089a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b0f      	cmp	r3, #15
 80089a8:	d914      	bls.n	80089d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089aa:	4a17      	ldr	r2, [pc, #92]	; (8008a08 <vPortValidateInterruptPriority+0x70>)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089b4:	4b15      	ldr	r3, [pc, #84]	; (8008a0c <vPortValidateInterruptPriority+0x74>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	7afa      	ldrb	r2, [r7, #11]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d20a      	bcs.n	80089d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	607b      	str	r3, [r7, #4]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089d4:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <vPortValidateInterruptPriority+0x78>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089dc:	4b0d      	ldr	r3, [pc, #52]	; (8008a14 <vPortValidateInterruptPriority+0x7c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d90a      	bls.n	80089fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	603b      	str	r3, [r7, #0]
}
 80089f6:	bf00      	nop
 80089f8:	e7fe      	b.n	80089f8 <vPortValidateInterruptPriority+0x60>
	}
 80089fa:	bf00      	nop
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	e000e3f0 	.word	0xe000e3f0
 8008a0c:	20000eec 	.word	0x20000eec
 8008a10:	e000ed0c 	.word	0xe000ed0c
 8008a14:	20000ef0 	.word	0x20000ef0

08008a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08a      	sub	sp, #40	; 0x28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a20:	2300      	movs	r3, #0
 8008a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a24:	f7fe fd98 	bl	8007558 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a28:	4b5b      	ldr	r3, [pc, #364]	; (8008b98 <pvPortMalloc+0x180>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a30:	f000 f920 	bl	8008c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a34:	4b59      	ldr	r3, [pc, #356]	; (8008b9c <pvPortMalloc+0x184>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f040 8093 	bne.w	8008b68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01d      	beq.n	8008a84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a48:	2208      	movs	r2, #8
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f003 0307 	and.w	r3, r3, #7
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d014      	beq.n	8008a84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f023 0307 	bic.w	r3, r3, #7
 8008a60:	3308      	adds	r3, #8
 8008a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f003 0307 	and.w	r3, r3, #7
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00a      	beq.n	8008a84 <pvPortMalloc+0x6c>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	617b      	str	r3, [r7, #20]
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d06e      	beq.n	8008b68 <pvPortMalloc+0x150>
 8008a8a:	4b45      	ldr	r3, [pc, #276]	; (8008ba0 <pvPortMalloc+0x188>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d869      	bhi.n	8008b68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a94:	4b43      	ldr	r3, [pc, #268]	; (8008ba4 <pvPortMalloc+0x18c>)
 8008a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a98:	4b42      	ldr	r3, [pc, #264]	; (8008ba4 <pvPortMalloc+0x18c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a9e:	e004      	b.n	8008aaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d903      	bls.n	8008abc <pvPortMalloc+0xa4>
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1f1      	bne.n	8008aa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008abc:	4b36      	ldr	r3, [pc, #216]	; (8008b98 <pvPortMalloc+0x180>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d050      	beq.n	8008b68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2208      	movs	r2, #8
 8008acc:	4413      	add	r3, r2
 8008ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	1ad2      	subs	r2, r2, r3
 8008ae0:	2308      	movs	r3, #8
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d91f      	bls.n	8008b28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4413      	add	r3, r2
 8008aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	f003 0307 	and.w	r3, r3, #7
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00a      	beq.n	8008b10 <pvPortMalloc+0xf8>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	613b      	str	r3, [r7, #16]
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	1ad2      	subs	r2, r2, r3
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b22:	69b8      	ldr	r0, [r7, #24]
 8008b24:	f000 f908 	bl	8008d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b28:	4b1d      	ldr	r3, [pc, #116]	; (8008ba0 <pvPortMalloc+0x188>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	4a1b      	ldr	r2, [pc, #108]	; (8008ba0 <pvPortMalloc+0x188>)
 8008b34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b36:	4b1a      	ldr	r3, [pc, #104]	; (8008ba0 <pvPortMalloc+0x188>)
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ba8 <pvPortMalloc+0x190>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d203      	bcs.n	8008b4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b42:	4b17      	ldr	r3, [pc, #92]	; (8008ba0 <pvPortMalloc+0x188>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a18      	ldr	r2, [pc, #96]	; (8008ba8 <pvPortMalloc+0x190>)
 8008b48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	4b13      	ldr	r3, [pc, #76]	; (8008b9c <pvPortMalloc+0x184>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	431a      	orrs	r2, r3
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b5e:	4b13      	ldr	r3, [pc, #76]	; (8008bac <pvPortMalloc+0x194>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3301      	adds	r3, #1
 8008b64:	4a11      	ldr	r2, [pc, #68]	; (8008bac <pvPortMalloc+0x194>)
 8008b66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b68:	f7fe fd04 	bl	8007574 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00a      	beq.n	8008b8c <pvPortMalloc+0x174>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	60fb      	str	r3, [r7, #12]
}
 8008b88:	bf00      	nop
 8008b8a:	e7fe      	b.n	8008b8a <pvPortMalloc+0x172>
	return pvReturn;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3728      	adds	r7, #40	; 0x28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20001ab4 	.word	0x20001ab4
 8008b9c:	20001ac8 	.word	0x20001ac8
 8008ba0:	20001ab8 	.word	0x20001ab8
 8008ba4:	20001aac 	.word	0x20001aac
 8008ba8:	20001abc 	.word	0x20001abc
 8008bac:	20001ac0 	.word	0x20001ac0

08008bb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d04d      	beq.n	8008c5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bc2:	2308      	movs	r3, #8
 8008bc4:	425b      	negs	r3, r3
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	4413      	add	r3, r2
 8008bca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	4b24      	ldr	r3, [pc, #144]	; (8008c68 <vPortFree+0xb8>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10a      	bne.n	8008bf4 <vPortFree+0x44>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	60fb      	str	r3, [r7, #12]
}
 8008bf0:	bf00      	nop
 8008bf2:	e7fe      	b.n	8008bf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00a      	beq.n	8008c12 <vPortFree+0x62>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	60bb      	str	r3, [r7, #8]
}
 8008c0e:	bf00      	nop
 8008c10:	e7fe      	b.n	8008c10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	4b14      	ldr	r3, [pc, #80]	; (8008c68 <vPortFree+0xb8>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01e      	beq.n	8008c5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d11a      	bne.n	8008c5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	4b0e      	ldr	r3, [pc, #56]	; (8008c68 <vPortFree+0xb8>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	43db      	mvns	r3, r3
 8008c32:	401a      	ands	r2, r3
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c38:	f7fe fc8e 	bl	8007558 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <vPortFree+0xbc>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4413      	add	r3, r2
 8008c46:	4a09      	ldr	r2, [pc, #36]	; (8008c6c <vPortFree+0xbc>)
 8008c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c4a:	6938      	ldr	r0, [r7, #16]
 8008c4c:	f000 f874 	bl	8008d38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c50:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <vPortFree+0xc0>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3301      	adds	r3, #1
 8008c56:	4a06      	ldr	r2, [pc, #24]	; (8008c70 <vPortFree+0xc0>)
 8008c58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c5a:	f7fe fc8b 	bl	8007574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c5e:	bf00      	nop
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20001ac8 	.word	0x20001ac8
 8008c6c:	20001ab8 	.word	0x20001ab8
 8008c70:	20001ac4 	.word	0x20001ac4

08008c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c80:	4b27      	ldr	r3, [pc, #156]	; (8008d20 <prvHeapInit+0xac>)
 8008c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00c      	beq.n	8008ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3307      	adds	r3, #7
 8008c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f023 0307 	bic.w	r3, r3, #7
 8008c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	4a1f      	ldr	r2, [pc, #124]	; (8008d20 <prvHeapInit+0xac>)
 8008ca4:	4413      	add	r3, r2
 8008ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cac:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <prvHeapInit+0xb0>)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cb2:	4b1c      	ldr	r3, [pc, #112]	; (8008d24 <prvHeapInit+0xb0>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cc0:	2208      	movs	r2, #8
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0307 	bic.w	r3, r3, #7
 8008cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4a15      	ldr	r2, [pc, #84]	; (8008d28 <prvHeapInit+0xb4>)
 8008cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cd6:	4b14      	ldr	r3, [pc, #80]	; (8008d28 <prvHeapInit+0xb4>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cde:	4b12      	ldr	r3, [pc, #72]	; (8008d28 <prvHeapInit+0xb4>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	1ad2      	subs	r2, r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cf4:	4b0c      	ldr	r3, [pc, #48]	; (8008d28 <prvHeapInit+0xb4>)
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	4a0a      	ldr	r2, [pc, #40]	; (8008d2c <prvHeapInit+0xb8>)
 8008d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	4a09      	ldr	r2, [pc, #36]	; (8008d30 <prvHeapInit+0xbc>)
 8008d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d0c:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <prvHeapInit+0xc0>)
 8008d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d12:	601a      	str	r2, [r3, #0]
}
 8008d14:	bf00      	nop
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	20000ef4 	.word	0x20000ef4
 8008d24:	20001aac 	.word	0x20001aac
 8008d28:	20001ab4 	.word	0x20001ab4
 8008d2c:	20001abc 	.word	0x20001abc
 8008d30:	20001ab8 	.word	0x20001ab8
 8008d34:	20001ac8 	.word	0x20001ac8

08008d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d40:	4b28      	ldr	r3, [pc, #160]	; (8008de4 <prvInsertBlockIntoFreeList+0xac>)
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	e002      	b.n	8008d4c <prvInsertBlockIntoFreeList+0x14>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d8f7      	bhi.n	8008d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	4413      	add	r3, r2
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d108      	bne.n	8008d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	441a      	add	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	441a      	add	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d118      	bne.n	8008dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d00d      	beq.n	8008db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	441a      	add	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	e008      	b.n	8008dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008db6:	4b0c      	ldr	r3, [pc, #48]	; (8008de8 <prvInsertBlockIntoFreeList+0xb0>)
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	e003      	b.n	8008dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d002      	beq.n	8008dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	20001aac 	.word	0x20001aac
 8008de8:	20001ab4 	.word	0x20001ab4

08008dec <__errno>:
 8008dec:	4b01      	ldr	r3, [pc, #4]	; (8008df4 <__errno+0x8>)
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	20000010 	.word	0x20000010

08008df8 <__libc_init_array>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	4d0d      	ldr	r5, [pc, #52]	; (8008e30 <__libc_init_array+0x38>)
 8008dfc:	4c0d      	ldr	r4, [pc, #52]	; (8008e34 <__libc_init_array+0x3c>)
 8008dfe:	1b64      	subs	r4, r4, r5
 8008e00:	10a4      	asrs	r4, r4, #2
 8008e02:	2600      	movs	r6, #0
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	d109      	bne.n	8008e1c <__libc_init_array+0x24>
 8008e08:	4d0b      	ldr	r5, [pc, #44]	; (8008e38 <__libc_init_array+0x40>)
 8008e0a:	4c0c      	ldr	r4, [pc, #48]	; (8008e3c <__libc_init_array+0x44>)
 8008e0c:	f004 fcd2 	bl	800d7b4 <_init>
 8008e10:	1b64      	subs	r4, r4, r5
 8008e12:	10a4      	asrs	r4, r4, #2
 8008e14:	2600      	movs	r6, #0
 8008e16:	42a6      	cmp	r6, r4
 8008e18:	d105      	bne.n	8008e26 <__libc_init_array+0x2e>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e20:	4798      	blx	r3
 8008e22:	3601      	adds	r6, #1
 8008e24:	e7ee      	b.n	8008e04 <__libc_init_array+0xc>
 8008e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2a:	4798      	blx	r3
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	e7f2      	b.n	8008e16 <__libc_init_array+0x1e>
 8008e30:	0800df8c 	.word	0x0800df8c
 8008e34:	0800df8c 	.word	0x0800df8c
 8008e38:	0800df8c 	.word	0x0800df8c
 8008e3c:	0800df90 	.word	0x0800df90

08008e40 <memcpy>:
 8008e40:	440a      	add	r2, r1
 8008e42:	4291      	cmp	r1, r2
 8008e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e48:	d100      	bne.n	8008e4c <memcpy+0xc>
 8008e4a:	4770      	bx	lr
 8008e4c:	b510      	push	{r4, lr}
 8008e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e56:	4291      	cmp	r1, r2
 8008e58:	d1f9      	bne.n	8008e4e <memcpy+0xe>
 8008e5a:	bd10      	pop	{r4, pc}

08008e5c <memset>:
 8008e5c:	4402      	add	r2, r0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d100      	bne.n	8008e66 <memset+0xa>
 8008e64:	4770      	bx	lr
 8008e66:	f803 1b01 	strb.w	r1, [r3], #1
 8008e6a:	e7f9      	b.n	8008e60 <memset+0x4>

08008e6c <__cvt>:
 8008e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e70:	ec55 4b10 	vmov	r4, r5, d0
 8008e74:	2d00      	cmp	r5, #0
 8008e76:	460e      	mov	r6, r1
 8008e78:	4619      	mov	r1, r3
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	bfbb      	ittet	lt
 8008e7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e82:	461d      	movlt	r5, r3
 8008e84:	2300      	movge	r3, #0
 8008e86:	232d      	movlt	r3, #45	; 0x2d
 8008e88:	700b      	strb	r3, [r1, #0]
 8008e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e90:	4691      	mov	r9, r2
 8008e92:	f023 0820 	bic.w	r8, r3, #32
 8008e96:	bfbc      	itt	lt
 8008e98:	4622      	movlt	r2, r4
 8008e9a:	4614      	movlt	r4, r2
 8008e9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ea0:	d005      	beq.n	8008eae <__cvt+0x42>
 8008ea2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ea6:	d100      	bne.n	8008eaa <__cvt+0x3e>
 8008ea8:	3601      	adds	r6, #1
 8008eaa:	2102      	movs	r1, #2
 8008eac:	e000      	b.n	8008eb0 <__cvt+0x44>
 8008eae:	2103      	movs	r1, #3
 8008eb0:	ab03      	add	r3, sp, #12
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	ab02      	add	r3, sp, #8
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	ec45 4b10 	vmov	d0, r4, r5
 8008ebc:	4653      	mov	r3, sl
 8008ebe:	4632      	mov	r2, r6
 8008ec0:	f001 ff02 	bl	800acc8 <_dtoa_r>
 8008ec4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ec8:	4607      	mov	r7, r0
 8008eca:	d102      	bne.n	8008ed2 <__cvt+0x66>
 8008ecc:	f019 0f01 	tst.w	r9, #1
 8008ed0:	d022      	beq.n	8008f18 <__cvt+0xac>
 8008ed2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ed6:	eb07 0906 	add.w	r9, r7, r6
 8008eda:	d110      	bne.n	8008efe <__cvt+0x92>
 8008edc:	783b      	ldrb	r3, [r7, #0]
 8008ede:	2b30      	cmp	r3, #48	; 0x30
 8008ee0:	d10a      	bne.n	8008ef8 <__cvt+0x8c>
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7f7 fded 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eee:	b918      	cbnz	r0, 8008ef8 <__cvt+0x8c>
 8008ef0:	f1c6 0601 	rsb	r6, r6, #1
 8008ef4:	f8ca 6000 	str.w	r6, [sl]
 8008ef8:	f8da 3000 	ldr.w	r3, [sl]
 8008efc:	4499      	add	r9, r3
 8008efe:	2200      	movs	r2, #0
 8008f00:	2300      	movs	r3, #0
 8008f02:	4620      	mov	r0, r4
 8008f04:	4629      	mov	r1, r5
 8008f06:	f7f7 fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f0a:	b108      	cbz	r0, 8008f10 <__cvt+0xa4>
 8008f0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f10:	2230      	movs	r2, #48	; 0x30
 8008f12:	9b03      	ldr	r3, [sp, #12]
 8008f14:	454b      	cmp	r3, r9
 8008f16:	d307      	bcc.n	8008f28 <__cvt+0xbc>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f1c:	1bdb      	subs	r3, r3, r7
 8008f1e:	4638      	mov	r0, r7
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	b004      	add	sp, #16
 8008f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f28:	1c59      	adds	r1, r3, #1
 8008f2a:	9103      	str	r1, [sp, #12]
 8008f2c:	701a      	strb	r2, [r3, #0]
 8008f2e:	e7f0      	b.n	8008f12 <__cvt+0xa6>

08008f30 <__exponent>:
 8008f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f32:	4603      	mov	r3, r0
 8008f34:	2900      	cmp	r1, #0
 8008f36:	bfb8      	it	lt
 8008f38:	4249      	neglt	r1, r1
 8008f3a:	f803 2b02 	strb.w	r2, [r3], #2
 8008f3e:	bfb4      	ite	lt
 8008f40:	222d      	movlt	r2, #45	; 0x2d
 8008f42:	222b      	movge	r2, #43	; 0x2b
 8008f44:	2909      	cmp	r1, #9
 8008f46:	7042      	strb	r2, [r0, #1]
 8008f48:	dd2a      	ble.n	8008fa0 <__exponent+0x70>
 8008f4a:	f10d 0407 	add.w	r4, sp, #7
 8008f4e:	46a4      	mov	ip, r4
 8008f50:	270a      	movs	r7, #10
 8008f52:	46a6      	mov	lr, r4
 8008f54:	460a      	mov	r2, r1
 8008f56:	fb91 f6f7 	sdiv	r6, r1, r7
 8008f5a:	fb07 1516 	mls	r5, r7, r6, r1
 8008f5e:	3530      	adds	r5, #48	; 0x30
 8008f60:	2a63      	cmp	r2, #99	; 0x63
 8008f62:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008f66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	dcf1      	bgt.n	8008f52 <__exponent+0x22>
 8008f6e:	3130      	adds	r1, #48	; 0x30
 8008f70:	f1ae 0502 	sub.w	r5, lr, #2
 8008f74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008f78:	1c44      	adds	r4, r0, #1
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4561      	cmp	r1, ip
 8008f7e:	d30a      	bcc.n	8008f96 <__exponent+0x66>
 8008f80:	f10d 0209 	add.w	r2, sp, #9
 8008f84:	eba2 020e 	sub.w	r2, r2, lr
 8008f88:	4565      	cmp	r5, ip
 8008f8a:	bf88      	it	hi
 8008f8c:	2200      	movhi	r2, #0
 8008f8e:	4413      	add	r3, r2
 8008f90:	1a18      	subs	r0, r3, r0
 8008f92:	b003      	add	sp, #12
 8008f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008f9e:	e7ed      	b.n	8008f7c <__exponent+0x4c>
 8008fa0:	2330      	movs	r3, #48	; 0x30
 8008fa2:	3130      	adds	r1, #48	; 0x30
 8008fa4:	7083      	strb	r3, [r0, #2]
 8008fa6:	70c1      	strb	r1, [r0, #3]
 8008fa8:	1d03      	adds	r3, r0, #4
 8008faa:	e7f1      	b.n	8008f90 <__exponent+0x60>

08008fac <_printf_float>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	ed2d 8b02 	vpush	{d8}
 8008fb4:	b08d      	sub	sp, #52	; 0x34
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008fbc:	4616      	mov	r6, r2
 8008fbe:	461f      	mov	r7, r3
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	f003 f993 	bl	800c2ec <_localeconv_r>
 8008fc6:	f8d0 a000 	ldr.w	sl, [r0]
 8008fca:	4650      	mov	r0, sl
 8008fcc:	f7f7 f900 	bl	80001d0 <strlen>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	9305      	str	r3, [sp, #20]
 8008fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8008fdc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008fe0:	3307      	adds	r3, #7
 8008fe2:	f023 0307 	bic.w	r3, r3, #7
 8008fe6:	f103 0208 	add.w	r2, r3, #8
 8008fea:	f8c8 2000 	str.w	r2, [r8]
 8008fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ff6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008ffa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ffe:	9307      	str	r3, [sp, #28]
 8009000:	f8cd 8018 	str.w	r8, [sp, #24]
 8009004:	ee08 0a10 	vmov	s16, r0
 8009008:	4b9f      	ldr	r3, [pc, #636]	; (8009288 <_printf_float+0x2dc>)
 800900a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800900e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009012:	f7f7 fd8b 	bl	8000b2c <__aeabi_dcmpun>
 8009016:	bb88      	cbnz	r0, 800907c <_printf_float+0xd0>
 8009018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800901c:	4b9a      	ldr	r3, [pc, #616]	; (8009288 <_printf_float+0x2dc>)
 800901e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009022:	f7f7 fd65 	bl	8000af0 <__aeabi_dcmple>
 8009026:	bb48      	cbnz	r0, 800907c <_printf_float+0xd0>
 8009028:	2200      	movs	r2, #0
 800902a:	2300      	movs	r3, #0
 800902c:	4640      	mov	r0, r8
 800902e:	4649      	mov	r1, r9
 8009030:	f7f7 fd54 	bl	8000adc <__aeabi_dcmplt>
 8009034:	b110      	cbz	r0, 800903c <_printf_float+0x90>
 8009036:	232d      	movs	r3, #45	; 0x2d
 8009038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800903c:	4b93      	ldr	r3, [pc, #588]	; (800928c <_printf_float+0x2e0>)
 800903e:	4894      	ldr	r0, [pc, #592]	; (8009290 <_printf_float+0x2e4>)
 8009040:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009044:	bf94      	ite	ls
 8009046:	4698      	movls	r8, r3
 8009048:	4680      	movhi	r8, r0
 800904a:	2303      	movs	r3, #3
 800904c:	6123      	str	r3, [r4, #16]
 800904e:	9b05      	ldr	r3, [sp, #20]
 8009050:	f023 0204 	bic.w	r2, r3, #4
 8009054:	6022      	str	r2, [r4, #0]
 8009056:	f04f 0900 	mov.w	r9, #0
 800905a:	9700      	str	r7, [sp, #0]
 800905c:	4633      	mov	r3, r6
 800905e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009060:	4621      	mov	r1, r4
 8009062:	4628      	mov	r0, r5
 8009064:	f000 f9d8 	bl	8009418 <_printf_common>
 8009068:	3001      	adds	r0, #1
 800906a:	f040 8090 	bne.w	800918e <_printf_float+0x1e2>
 800906e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009072:	b00d      	add	sp, #52	; 0x34
 8009074:	ecbd 8b02 	vpop	{d8}
 8009078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907c:	4642      	mov	r2, r8
 800907e:	464b      	mov	r3, r9
 8009080:	4640      	mov	r0, r8
 8009082:	4649      	mov	r1, r9
 8009084:	f7f7 fd52 	bl	8000b2c <__aeabi_dcmpun>
 8009088:	b140      	cbz	r0, 800909c <_printf_float+0xf0>
 800908a:	464b      	mov	r3, r9
 800908c:	2b00      	cmp	r3, #0
 800908e:	bfbc      	itt	lt
 8009090:	232d      	movlt	r3, #45	; 0x2d
 8009092:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009096:	487f      	ldr	r0, [pc, #508]	; (8009294 <_printf_float+0x2e8>)
 8009098:	4b7f      	ldr	r3, [pc, #508]	; (8009298 <_printf_float+0x2ec>)
 800909a:	e7d1      	b.n	8009040 <_printf_float+0x94>
 800909c:	6863      	ldr	r3, [r4, #4]
 800909e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80090a2:	9206      	str	r2, [sp, #24]
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	d13f      	bne.n	8009128 <_printf_float+0x17c>
 80090a8:	2306      	movs	r3, #6
 80090aa:	6063      	str	r3, [r4, #4]
 80090ac:	9b05      	ldr	r3, [sp, #20]
 80090ae:	6861      	ldr	r1, [r4, #4]
 80090b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80090b4:	2300      	movs	r3, #0
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	ab0a      	add	r3, sp, #40	; 0x28
 80090ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80090be:	ab09      	add	r3, sp, #36	; 0x24
 80090c0:	ec49 8b10 	vmov	d0, r8, r9
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	6022      	str	r2, [r4, #0]
 80090c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80090cc:	4628      	mov	r0, r5
 80090ce:	f7ff fecd 	bl	8008e6c <__cvt>
 80090d2:	9b06      	ldr	r3, [sp, #24]
 80090d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090d6:	2b47      	cmp	r3, #71	; 0x47
 80090d8:	4680      	mov	r8, r0
 80090da:	d108      	bne.n	80090ee <_printf_float+0x142>
 80090dc:	1cc8      	adds	r0, r1, #3
 80090de:	db02      	blt.n	80090e6 <_printf_float+0x13a>
 80090e0:	6863      	ldr	r3, [r4, #4]
 80090e2:	4299      	cmp	r1, r3
 80090e4:	dd41      	ble.n	800916a <_printf_float+0x1be>
 80090e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80090ea:	fa5f fb8b 	uxtb.w	fp, fp
 80090ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090f2:	d820      	bhi.n	8009136 <_printf_float+0x18a>
 80090f4:	3901      	subs	r1, #1
 80090f6:	465a      	mov	r2, fp
 80090f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80090fc:	9109      	str	r1, [sp, #36]	; 0x24
 80090fe:	f7ff ff17 	bl	8008f30 <__exponent>
 8009102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009104:	1813      	adds	r3, r2, r0
 8009106:	2a01      	cmp	r2, #1
 8009108:	4681      	mov	r9, r0
 800910a:	6123      	str	r3, [r4, #16]
 800910c:	dc02      	bgt.n	8009114 <_printf_float+0x168>
 800910e:	6822      	ldr	r2, [r4, #0]
 8009110:	07d2      	lsls	r2, r2, #31
 8009112:	d501      	bpl.n	8009118 <_printf_float+0x16c>
 8009114:	3301      	adds	r3, #1
 8009116:	6123      	str	r3, [r4, #16]
 8009118:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800911c:	2b00      	cmp	r3, #0
 800911e:	d09c      	beq.n	800905a <_printf_float+0xae>
 8009120:	232d      	movs	r3, #45	; 0x2d
 8009122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009126:	e798      	b.n	800905a <_printf_float+0xae>
 8009128:	9a06      	ldr	r2, [sp, #24]
 800912a:	2a47      	cmp	r2, #71	; 0x47
 800912c:	d1be      	bne.n	80090ac <_printf_float+0x100>
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1bc      	bne.n	80090ac <_printf_float+0x100>
 8009132:	2301      	movs	r3, #1
 8009134:	e7b9      	b.n	80090aa <_printf_float+0xfe>
 8009136:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800913a:	d118      	bne.n	800916e <_printf_float+0x1c2>
 800913c:	2900      	cmp	r1, #0
 800913e:	6863      	ldr	r3, [r4, #4]
 8009140:	dd0b      	ble.n	800915a <_printf_float+0x1ae>
 8009142:	6121      	str	r1, [r4, #16]
 8009144:	b913      	cbnz	r3, 800914c <_printf_float+0x1a0>
 8009146:	6822      	ldr	r2, [r4, #0]
 8009148:	07d0      	lsls	r0, r2, #31
 800914a:	d502      	bpl.n	8009152 <_printf_float+0x1a6>
 800914c:	3301      	adds	r3, #1
 800914e:	440b      	add	r3, r1
 8009150:	6123      	str	r3, [r4, #16]
 8009152:	65a1      	str	r1, [r4, #88]	; 0x58
 8009154:	f04f 0900 	mov.w	r9, #0
 8009158:	e7de      	b.n	8009118 <_printf_float+0x16c>
 800915a:	b913      	cbnz	r3, 8009162 <_printf_float+0x1b6>
 800915c:	6822      	ldr	r2, [r4, #0]
 800915e:	07d2      	lsls	r2, r2, #31
 8009160:	d501      	bpl.n	8009166 <_printf_float+0x1ba>
 8009162:	3302      	adds	r3, #2
 8009164:	e7f4      	b.n	8009150 <_printf_float+0x1a4>
 8009166:	2301      	movs	r3, #1
 8009168:	e7f2      	b.n	8009150 <_printf_float+0x1a4>
 800916a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800916e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009170:	4299      	cmp	r1, r3
 8009172:	db05      	blt.n	8009180 <_printf_float+0x1d4>
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	6121      	str	r1, [r4, #16]
 8009178:	07d8      	lsls	r0, r3, #31
 800917a:	d5ea      	bpl.n	8009152 <_printf_float+0x1a6>
 800917c:	1c4b      	adds	r3, r1, #1
 800917e:	e7e7      	b.n	8009150 <_printf_float+0x1a4>
 8009180:	2900      	cmp	r1, #0
 8009182:	bfd4      	ite	le
 8009184:	f1c1 0202 	rsble	r2, r1, #2
 8009188:	2201      	movgt	r2, #1
 800918a:	4413      	add	r3, r2
 800918c:	e7e0      	b.n	8009150 <_printf_float+0x1a4>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	055a      	lsls	r2, r3, #21
 8009192:	d407      	bmi.n	80091a4 <_printf_float+0x1f8>
 8009194:	6923      	ldr	r3, [r4, #16]
 8009196:	4642      	mov	r2, r8
 8009198:	4631      	mov	r1, r6
 800919a:	4628      	mov	r0, r5
 800919c:	47b8      	blx	r7
 800919e:	3001      	adds	r0, #1
 80091a0:	d12c      	bne.n	80091fc <_printf_float+0x250>
 80091a2:	e764      	b.n	800906e <_printf_float+0xc2>
 80091a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091a8:	f240 80e0 	bls.w	800936c <_printf_float+0x3c0>
 80091ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091b0:	2200      	movs	r2, #0
 80091b2:	2300      	movs	r3, #0
 80091b4:	f7f7 fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d034      	beq.n	8009226 <_printf_float+0x27a>
 80091bc:	4a37      	ldr	r2, [pc, #220]	; (800929c <_printf_float+0x2f0>)
 80091be:	2301      	movs	r3, #1
 80091c0:	4631      	mov	r1, r6
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b8      	blx	r7
 80091c6:	3001      	adds	r0, #1
 80091c8:	f43f af51 	beq.w	800906e <_printf_float+0xc2>
 80091cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091d0:	429a      	cmp	r2, r3
 80091d2:	db02      	blt.n	80091da <_printf_float+0x22e>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	07d8      	lsls	r0, r3, #31
 80091d8:	d510      	bpl.n	80091fc <_printf_float+0x250>
 80091da:	ee18 3a10 	vmov	r3, s16
 80091de:	4652      	mov	r2, sl
 80091e0:	4631      	mov	r1, r6
 80091e2:	4628      	mov	r0, r5
 80091e4:	47b8      	blx	r7
 80091e6:	3001      	adds	r0, #1
 80091e8:	f43f af41 	beq.w	800906e <_printf_float+0xc2>
 80091ec:	f04f 0800 	mov.w	r8, #0
 80091f0:	f104 091a 	add.w	r9, r4, #26
 80091f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f6:	3b01      	subs	r3, #1
 80091f8:	4543      	cmp	r3, r8
 80091fa:	dc09      	bgt.n	8009210 <_printf_float+0x264>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	079b      	lsls	r3, r3, #30
 8009200:	f100 8105 	bmi.w	800940e <_printf_float+0x462>
 8009204:	68e0      	ldr	r0, [r4, #12]
 8009206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009208:	4298      	cmp	r0, r3
 800920a:	bfb8      	it	lt
 800920c:	4618      	movlt	r0, r3
 800920e:	e730      	b.n	8009072 <_printf_float+0xc6>
 8009210:	2301      	movs	r3, #1
 8009212:	464a      	mov	r2, r9
 8009214:	4631      	mov	r1, r6
 8009216:	4628      	mov	r0, r5
 8009218:	47b8      	blx	r7
 800921a:	3001      	adds	r0, #1
 800921c:	f43f af27 	beq.w	800906e <_printf_float+0xc2>
 8009220:	f108 0801 	add.w	r8, r8, #1
 8009224:	e7e6      	b.n	80091f4 <_printf_float+0x248>
 8009226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009228:	2b00      	cmp	r3, #0
 800922a:	dc39      	bgt.n	80092a0 <_printf_float+0x2f4>
 800922c:	4a1b      	ldr	r2, [pc, #108]	; (800929c <_printf_float+0x2f0>)
 800922e:	2301      	movs	r3, #1
 8009230:	4631      	mov	r1, r6
 8009232:	4628      	mov	r0, r5
 8009234:	47b8      	blx	r7
 8009236:	3001      	adds	r0, #1
 8009238:	f43f af19 	beq.w	800906e <_printf_float+0xc2>
 800923c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009240:	4313      	orrs	r3, r2
 8009242:	d102      	bne.n	800924a <_printf_float+0x29e>
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	07d9      	lsls	r1, r3, #31
 8009248:	d5d8      	bpl.n	80091fc <_printf_float+0x250>
 800924a:	ee18 3a10 	vmov	r3, s16
 800924e:	4652      	mov	r2, sl
 8009250:	4631      	mov	r1, r6
 8009252:	4628      	mov	r0, r5
 8009254:	47b8      	blx	r7
 8009256:	3001      	adds	r0, #1
 8009258:	f43f af09 	beq.w	800906e <_printf_float+0xc2>
 800925c:	f04f 0900 	mov.w	r9, #0
 8009260:	f104 0a1a 	add.w	sl, r4, #26
 8009264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009266:	425b      	negs	r3, r3
 8009268:	454b      	cmp	r3, r9
 800926a:	dc01      	bgt.n	8009270 <_printf_float+0x2c4>
 800926c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800926e:	e792      	b.n	8009196 <_printf_float+0x1ea>
 8009270:	2301      	movs	r3, #1
 8009272:	4652      	mov	r2, sl
 8009274:	4631      	mov	r1, r6
 8009276:	4628      	mov	r0, r5
 8009278:	47b8      	blx	r7
 800927a:	3001      	adds	r0, #1
 800927c:	f43f aef7 	beq.w	800906e <_printf_float+0xc2>
 8009280:	f109 0901 	add.w	r9, r9, #1
 8009284:	e7ee      	b.n	8009264 <_printf_float+0x2b8>
 8009286:	bf00      	nop
 8009288:	7fefffff 	.word	0x7fefffff
 800928c:	0800dad0 	.word	0x0800dad0
 8009290:	0800dad4 	.word	0x0800dad4
 8009294:	0800dadc 	.word	0x0800dadc
 8009298:	0800dad8 	.word	0x0800dad8
 800929c:	0800dae0 	.word	0x0800dae0
 80092a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092a4:	429a      	cmp	r2, r3
 80092a6:	bfa8      	it	ge
 80092a8:	461a      	movge	r2, r3
 80092aa:	2a00      	cmp	r2, #0
 80092ac:	4691      	mov	r9, r2
 80092ae:	dc37      	bgt.n	8009320 <_printf_float+0x374>
 80092b0:	f04f 0b00 	mov.w	fp, #0
 80092b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092b8:	f104 021a 	add.w	r2, r4, #26
 80092bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092be:	9305      	str	r3, [sp, #20]
 80092c0:	eba3 0309 	sub.w	r3, r3, r9
 80092c4:	455b      	cmp	r3, fp
 80092c6:	dc33      	bgt.n	8009330 <_printf_float+0x384>
 80092c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092cc:	429a      	cmp	r2, r3
 80092ce:	db3b      	blt.n	8009348 <_printf_float+0x39c>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	07da      	lsls	r2, r3, #31
 80092d4:	d438      	bmi.n	8009348 <_printf_float+0x39c>
 80092d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092d8:	9b05      	ldr	r3, [sp, #20]
 80092da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	eba2 0901 	sub.w	r9, r2, r1
 80092e2:	4599      	cmp	r9, r3
 80092e4:	bfa8      	it	ge
 80092e6:	4699      	movge	r9, r3
 80092e8:	f1b9 0f00 	cmp.w	r9, #0
 80092ec:	dc35      	bgt.n	800935a <_printf_float+0x3ae>
 80092ee:	f04f 0800 	mov.w	r8, #0
 80092f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092f6:	f104 0a1a 	add.w	sl, r4, #26
 80092fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092fe:	1a9b      	subs	r3, r3, r2
 8009300:	eba3 0309 	sub.w	r3, r3, r9
 8009304:	4543      	cmp	r3, r8
 8009306:	f77f af79 	ble.w	80091fc <_printf_float+0x250>
 800930a:	2301      	movs	r3, #1
 800930c:	4652      	mov	r2, sl
 800930e:	4631      	mov	r1, r6
 8009310:	4628      	mov	r0, r5
 8009312:	47b8      	blx	r7
 8009314:	3001      	adds	r0, #1
 8009316:	f43f aeaa 	beq.w	800906e <_printf_float+0xc2>
 800931a:	f108 0801 	add.w	r8, r8, #1
 800931e:	e7ec      	b.n	80092fa <_printf_float+0x34e>
 8009320:	4613      	mov	r3, r2
 8009322:	4631      	mov	r1, r6
 8009324:	4642      	mov	r2, r8
 8009326:	4628      	mov	r0, r5
 8009328:	47b8      	blx	r7
 800932a:	3001      	adds	r0, #1
 800932c:	d1c0      	bne.n	80092b0 <_printf_float+0x304>
 800932e:	e69e      	b.n	800906e <_printf_float+0xc2>
 8009330:	2301      	movs	r3, #1
 8009332:	4631      	mov	r1, r6
 8009334:	4628      	mov	r0, r5
 8009336:	9205      	str	r2, [sp, #20]
 8009338:	47b8      	blx	r7
 800933a:	3001      	adds	r0, #1
 800933c:	f43f ae97 	beq.w	800906e <_printf_float+0xc2>
 8009340:	9a05      	ldr	r2, [sp, #20]
 8009342:	f10b 0b01 	add.w	fp, fp, #1
 8009346:	e7b9      	b.n	80092bc <_printf_float+0x310>
 8009348:	ee18 3a10 	vmov	r3, s16
 800934c:	4652      	mov	r2, sl
 800934e:	4631      	mov	r1, r6
 8009350:	4628      	mov	r0, r5
 8009352:	47b8      	blx	r7
 8009354:	3001      	adds	r0, #1
 8009356:	d1be      	bne.n	80092d6 <_printf_float+0x32a>
 8009358:	e689      	b.n	800906e <_printf_float+0xc2>
 800935a:	9a05      	ldr	r2, [sp, #20]
 800935c:	464b      	mov	r3, r9
 800935e:	4442      	add	r2, r8
 8009360:	4631      	mov	r1, r6
 8009362:	4628      	mov	r0, r5
 8009364:	47b8      	blx	r7
 8009366:	3001      	adds	r0, #1
 8009368:	d1c1      	bne.n	80092ee <_printf_float+0x342>
 800936a:	e680      	b.n	800906e <_printf_float+0xc2>
 800936c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800936e:	2a01      	cmp	r2, #1
 8009370:	dc01      	bgt.n	8009376 <_printf_float+0x3ca>
 8009372:	07db      	lsls	r3, r3, #31
 8009374:	d538      	bpl.n	80093e8 <_printf_float+0x43c>
 8009376:	2301      	movs	r3, #1
 8009378:	4642      	mov	r2, r8
 800937a:	4631      	mov	r1, r6
 800937c:	4628      	mov	r0, r5
 800937e:	47b8      	blx	r7
 8009380:	3001      	adds	r0, #1
 8009382:	f43f ae74 	beq.w	800906e <_printf_float+0xc2>
 8009386:	ee18 3a10 	vmov	r3, s16
 800938a:	4652      	mov	r2, sl
 800938c:	4631      	mov	r1, r6
 800938e:	4628      	mov	r0, r5
 8009390:	47b8      	blx	r7
 8009392:	3001      	adds	r0, #1
 8009394:	f43f ae6b 	beq.w	800906e <_printf_float+0xc2>
 8009398:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800939c:	2200      	movs	r2, #0
 800939e:	2300      	movs	r3, #0
 80093a0:	f7f7 fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 80093a4:	b9d8      	cbnz	r0, 80093de <_printf_float+0x432>
 80093a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a8:	f108 0201 	add.w	r2, r8, #1
 80093ac:	3b01      	subs	r3, #1
 80093ae:	4631      	mov	r1, r6
 80093b0:	4628      	mov	r0, r5
 80093b2:	47b8      	blx	r7
 80093b4:	3001      	adds	r0, #1
 80093b6:	d10e      	bne.n	80093d6 <_printf_float+0x42a>
 80093b8:	e659      	b.n	800906e <_printf_float+0xc2>
 80093ba:	2301      	movs	r3, #1
 80093bc:	4652      	mov	r2, sl
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	f43f ae52 	beq.w	800906e <_printf_float+0xc2>
 80093ca:	f108 0801 	add.w	r8, r8, #1
 80093ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d0:	3b01      	subs	r3, #1
 80093d2:	4543      	cmp	r3, r8
 80093d4:	dcf1      	bgt.n	80093ba <_printf_float+0x40e>
 80093d6:	464b      	mov	r3, r9
 80093d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80093dc:	e6dc      	b.n	8009198 <_printf_float+0x1ec>
 80093de:	f04f 0800 	mov.w	r8, #0
 80093e2:	f104 0a1a 	add.w	sl, r4, #26
 80093e6:	e7f2      	b.n	80093ce <_printf_float+0x422>
 80093e8:	2301      	movs	r3, #1
 80093ea:	4642      	mov	r2, r8
 80093ec:	e7df      	b.n	80093ae <_printf_float+0x402>
 80093ee:	2301      	movs	r3, #1
 80093f0:	464a      	mov	r2, r9
 80093f2:	4631      	mov	r1, r6
 80093f4:	4628      	mov	r0, r5
 80093f6:	47b8      	blx	r7
 80093f8:	3001      	adds	r0, #1
 80093fa:	f43f ae38 	beq.w	800906e <_printf_float+0xc2>
 80093fe:	f108 0801 	add.w	r8, r8, #1
 8009402:	68e3      	ldr	r3, [r4, #12]
 8009404:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009406:	1a5b      	subs	r3, r3, r1
 8009408:	4543      	cmp	r3, r8
 800940a:	dcf0      	bgt.n	80093ee <_printf_float+0x442>
 800940c:	e6fa      	b.n	8009204 <_printf_float+0x258>
 800940e:	f04f 0800 	mov.w	r8, #0
 8009412:	f104 0919 	add.w	r9, r4, #25
 8009416:	e7f4      	b.n	8009402 <_printf_float+0x456>

08009418 <_printf_common>:
 8009418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800941c:	4616      	mov	r6, r2
 800941e:	4699      	mov	r9, r3
 8009420:	688a      	ldr	r2, [r1, #8]
 8009422:	690b      	ldr	r3, [r1, #16]
 8009424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009428:	4293      	cmp	r3, r2
 800942a:	bfb8      	it	lt
 800942c:	4613      	movlt	r3, r2
 800942e:	6033      	str	r3, [r6, #0]
 8009430:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009434:	4607      	mov	r7, r0
 8009436:	460c      	mov	r4, r1
 8009438:	b10a      	cbz	r2, 800943e <_printf_common+0x26>
 800943a:	3301      	adds	r3, #1
 800943c:	6033      	str	r3, [r6, #0]
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	0699      	lsls	r1, r3, #26
 8009442:	bf42      	ittt	mi
 8009444:	6833      	ldrmi	r3, [r6, #0]
 8009446:	3302      	addmi	r3, #2
 8009448:	6033      	strmi	r3, [r6, #0]
 800944a:	6825      	ldr	r5, [r4, #0]
 800944c:	f015 0506 	ands.w	r5, r5, #6
 8009450:	d106      	bne.n	8009460 <_printf_common+0x48>
 8009452:	f104 0a19 	add.w	sl, r4, #25
 8009456:	68e3      	ldr	r3, [r4, #12]
 8009458:	6832      	ldr	r2, [r6, #0]
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	42ab      	cmp	r3, r5
 800945e:	dc26      	bgt.n	80094ae <_printf_common+0x96>
 8009460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009464:	1e13      	subs	r3, r2, #0
 8009466:	6822      	ldr	r2, [r4, #0]
 8009468:	bf18      	it	ne
 800946a:	2301      	movne	r3, #1
 800946c:	0692      	lsls	r2, r2, #26
 800946e:	d42b      	bmi.n	80094c8 <_printf_common+0xb0>
 8009470:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009474:	4649      	mov	r1, r9
 8009476:	4638      	mov	r0, r7
 8009478:	47c0      	blx	r8
 800947a:	3001      	adds	r0, #1
 800947c:	d01e      	beq.n	80094bc <_printf_common+0xa4>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	68e5      	ldr	r5, [r4, #12]
 8009482:	6832      	ldr	r2, [r6, #0]
 8009484:	f003 0306 	and.w	r3, r3, #6
 8009488:	2b04      	cmp	r3, #4
 800948a:	bf08      	it	eq
 800948c:	1aad      	subeq	r5, r5, r2
 800948e:	68a3      	ldr	r3, [r4, #8]
 8009490:	6922      	ldr	r2, [r4, #16]
 8009492:	bf0c      	ite	eq
 8009494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009498:	2500      	movne	r5, #0
 800949a:	4293      	cmp	r3, r2
 800949c:	bfc4      	itt	gt
 800949e:	1a9b      	subgt	r3, r3, r2
 80094a0:	18ed      	addgt	r5, r5, r3
 80094a2:	2600      	movs	r6, #0
 80094a4:	341a      	adds	r4, #26
 80094a6:	42b5      	cmp	r5, r6
 80094a8:	d11a      	bne.n	80094e0 <_printf_common+0xc8>
 80094aa:	2000      	movs	r0, #0
 80094ac:	e008      	b.n	80094c0 <_printf_common+0xa8>
 80094ae:	2301      	movs	r3, #1
 80094b0:	4652      	mov	r2, sl
 80094b2:	4649      	mov	r1, r9
 80094b4:	4638      	mov	r0, r7
 80094b6:	47c0      	blx	r8
 80094b8:	3001      	adds	r0, #1
 80094ba:	d103      	bne.n	80094c4 <_printf_common+0xac>
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c4:	3501      	adds	r5, #1
 80094c6:	e7c6      	b.n	8009456 <_printf_common+0x3e>
 80094c8:	18e1      	adds	r1, r4, r3
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	2030      	movs	r0, #48	; 0x30
 80094ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094d2:	4422      	add	r2, r4
 80094d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094dc:	3302      	adds	r3, #2
 80094de:	e7c7      	b.n	8009470 <_printf_common+0x58>
 80094e0:	2301      	movs	r3, #1
 80094e2:	4622      	mov	r2, r4
 80094e4:	4649      	mov	r1, r9
 80094e6:	4638      	mov	r0, r7
 80094e8:	47c0      	blx	r8
 80094ea:	3001      	adds	r0, #1
 80094ec:	d0e6      	beq.n	80094bc <_printf_common+0xa4>
 80094ee:	3601      	adds	r6, #1
 80094f0:	e7d9      	b.n	80094a6 <_printf_common+0x8e>
	...

080094f4 <_printf_i>:
 80094f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f8:	460c      	mov	r4, r1
 80094fa:	4691      	mov	r9, r2
 80094fc:	7e27      	ldrb	r7, [r4, #24]
 80094fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009500:	2f78      	cmp	r7, #120	; 0x78
 8009502:	4680      	mov	r8, r0
 8009504:	469a      	mov	sl, r3
 8009506:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800950a:	d807      	bhi.n	800951c <_printf_i+0x28>
 800950c:	2f62      	cmp	r7, #98	; 0x62
 800950e:	d80a      	bhi.n	8009526 <_printf_i+0x32>
 8009510:	2f00      	cmp	r7, #0
 8009512:	f000 80d8 	beq.w	80096c6 <_printf_i+0x1d2>
 8009516:	2f58      	cmp	r7, #88	; 0x58
 8009518:	f000 80a3 	beq.w	8009662 <_printf_i+0x16e>
 800951c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009524:	e03a      	b.n	800959c <_printf_i+0xa8>
 8009526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800952a:	2b15      	cmp	r3, #21
 800952c:	d8f6      	bhi.n	800951c <_printf_i+0x28>
 800952e:	a001      	add	r0, pc, #4	; (adr r0, 8009534 <_printf_i+0x40>)
 8009530:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009534:	0800958d 	.word	0x0800958d
 8009538:	080095a1 	.word	0x080095a1
 800953c:	0800951d 	.word	0x0800951d
 8009540:	0800951d 	.word	0x0800951d
 8009544:	0800951d 	.word	0x0800951d
 8009548:	0800951d 	.word	0x0800951d
 800954c:	080095a1 	.word	0x080095a1
 8009550:	0800951d 	.word	0x0800951d
 8009554:	0800951d 	.word	0x0800951d
 8009558:	0800951d 	.word	0x0800951d
 800955c:	0800951d 	.word	0x0800951d
 8009560:	080096ad 	.word	0x080096ad
 8009564:	080095d1 	.word	0x080095d1
 8009568:	0800968f 	.word	0x0800968f
 800956c:	0800951d 	.word	0x0800951d
 8009570:	0800951d 	.word	0x0800951d
 8009574:	080096cf 	.word	0x080096cf
 8009578:	0800951d 	.word	0x0800951d
 800957c:	080095d1 	.word	0x080095d1
 8009580:	0800951d 	.word	0x0800951d
 8009584:	0800951d 	.word	0x0800951d
 8009588:	08009697 	.word	0x08009697
 800958c:	680b      	ldr	r3, [r1, #0]
 800958e:	1d1a      	adds	r2, r3, #4
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	600a      	str	r2, [r1, #0]
 8009594:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800959c:	2301      	movs	r3, #1
 800959e:	e0a3      	b.n	80096e8 <_printf_i+0x1f4>
 80095a0:	6825      	ldr	r5, [r4, #0]
 80095a2:	6808      	ldr	r0, [r1, #0]
 80095a4:	062e      	lsls	r6, r5, #24
 80095a6:	f100 0304 	add.w	r3, r0, #4
 80095aa:	d50a      	bpl.n	80095c2 <_printf_i+0xce>
 80095ac:	6805      	ldr	r5, [r0, #0]
 80095ae:	600b      	str	r3, [r1, #0]
 80095b0:	2d00      	cmp	r5, #0
 80095b2:	da03      	bge.n	80095bc <_printf_i+0xc8>
 80095b4:	232d      	movs	r3, #45	; 0x2d
 80095b6:	426d      	negs	r5, r5
 80095b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095bc:	485e      	ldr	r0, [pc, #376]	; (8009738 <_printf_i+0x244>)
 80095be:	230a      	movs	r3, #10
 80095c0:	e019      	b.n	80095f6 <_printf_i+0x102>
 80095c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80095c6:	6805      	ldr	r5, [r0, #0]
 80095c8:	600b      	str	r3, [r1, #0]
 80095ca:	bf18      	it	ne
 80095cc:	b22d      	sxthne	r5, r5
 80095ce:	e7ef      	b.n	80095b0 <_printf_i+0xbc>
 80095d0:	680b      	ldr	r3, [r1, #0]
 80095d2:	6825      	ldr	r5, [r4, #0]
 80095d4:	1d18      	adds	r0, r3, #4
 80095d6:	6008      	str	r0, [r1, #0]
 80095d8:	0628      	lsls	r0, r5, #24
 80095da:	d501      	bpl.n	80095e0 <_printf_i+0xec>
 80095dc:	681d      	ldr	r5, [r3, #0]
 80095de:	e002      	b.n	80095e6 <_printf_i+0xf2>
 80095e0:	0669      	lsls	r1, r5, #25
 80095e2:	d5fb      	bpl.n	80095dc <_printf_i+0xe8>
 80095e4:	881d      	ldrh	r5, [r3, #0]
 80095e6:	4854      	ldr	r0, [pc, #336]	; (8009738 <_printf_i+0x244>)
 80095e8:	2f6f      	cmp	r7, #111	; 0x6f
 80095ea:	bf0c      	ite	eq
 80095ec:	2308      	moveq	r3, #8
 80095ee:	230a      	movne	r3, #10
 80095f0:	2100      	movs	r1, #0
 80095f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095f6:	6866      	ldr	r6, [r4, #4]
 80095f8:	60a6      	str	r6, [r4, #8]
 80095fa:	2e00      	cmp	r6, #0
 80095fc:	bfa2      	ittt	ge
 80095fe:	6821      	ldrge	r1, [r4, #0]
 8009600:	f021 0104 	bicge.w	r1, r1, #4
 8009604:	6021      	strge	r1, [r4, #0]
 8009606:	b90d      	cbnz	r5, 800960c <_printf_i+0x118>
 8009608:	2e00      	cmp	r6, #0
 800960a:	d04d      	beq.n	80096a8 <_printf_i+0x1b4>
 800960c:	4616      	mov	r6, r2
 800960e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009612:	fb03 5711 	mls	r7, r3, r1, r5
 8009616:	5dc7      	ldrb	r7, [r0, r7]
 8009618:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800961c:	462f      	mov	r7, r5
 800961e:	42bb      	cmp	r3, r7
 8009620:	460d      	mov	r5, r1
 8009622:	d9f4      	bls.n	800960e <_printf_i+0x11a>
 8009624:	2b08      	cmp	r3, #8
 8009626:	d10b      	bne.n	8009640 <_printf_i+0x14c>
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	07df      	lsls	r7, r3, #31
 800962c:	d508      	bpl.n	8009640 <_printf_i+0x14c>
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	6861      	ldr	r1, [r4, #4]
 8009632:	4299      	cmp	r1, r3
 8009634:	bfde      	ittt	le
 8009636:	2330      	movle	r3, #48	; 0x30
 8009638:	f806 3c01 	strble.w	r3, [r6, #-1]
 800963c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009640:	1b92      	subs	r2, r2, r6
 8009642:	6122      	str	r2, [r4, #16]
 8009644:	f8cd a000 	str.w	sl, [sp]
 8009648:	464b      	mov	r3, r9
 800964a:	aa03      	add	r2, sp, #12
 800964c:	4621      	mov	r1, r4
 800964e:	4640      	mov	r0, r8
 8009650:	f7ff fee2 	bl	8009418 <_printf_common>
 8009654:	3001      	adds	r0, #1
 8009656:	d14c      	bne.n	80096f2 <_printf_i+0x1fe>
 8009658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800965c:	b004      	add	sp, #16
 800965e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009662:	4835      	ldr	r0, [pc, #212]	; (8009738 <_printf_i+0x244>)
 8009664:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	680e      	ldr	r6, [r1, #0]
 800966c:	061f      	lsls	r7, r3, #24
 800966e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009672:	600e      	str	r6, [r1, #0]
 8009674:	d514      	bpl.n	80096a0 <_printf_i+0x1ac>
 8009676:	07d9      	lsls	r1, r3, #31
 8009678:	bf44      	itt	mi
 800967a:	f043 0320 	orrmi.w	r3, r3, #32
 800967e:	6023      	strmi	r3, [r4, #0]
 8009680:	b91d      	cbnz	r5, 800968a <_printf_i+0x196>
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	f023 0320 	bic.w	r3, r3, #32
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	2310      	movs	r3, #16
 800968c:	e7b0      	b.n	80095f0 <_printf_i+0xfc>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	f043 0320 	orr.w	r3, r3, #32
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	2378      	movs	r3, #120	; 0x78
 8009698:	4828      	ldr	r0, [pc, #160]	; (800973c <_printf_i+0x248>)
 800969a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800969e:	e7e3      	b.n	8009668 <_printf_i+0x174>
 80096a0:	065e      	lsls	r6, r3, #25
 80096a2:	bf48      	it	mi
 80096a4:	b2ad      	uxthmi	r5, r5
 80096a6:	e7e6      	b.n	8009676 <_printf_i+0x182>
 80096a8:	4616      	mov	r6, r2
 80096aa:	e7bb      	b.n	8009624 <_printf_i+0x130>
 80096ac:	680b      	ldr	r3, [r1, #0]
 80096ae:	6826      	ldr	r6, [r4, #0]
 80096b0:	6960      	ldr	r0, [r4, #20]
 80096b2:	1d1d      	adds	r5, r3, #4
 80096b4:	600d      	str	r5, [r1, #0]
 80096b6:	0635      	lsls	r5, r6, #24
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	d501      	bpl.n	80096c0 <_printf_i+0x1cc>
 80096bc:	6018      	str	r0, [r3, #0]
 80096be:	e002      	b.n	80096c6 <_printf_i+0x1d2>
 80096c0:	0671      	lsls	r1, r6, #25
 80096c2:	d5fb      	bpl.n	80096bc <_printf_i+0x1c8>
 80096c4:	8018      	strh	r0, [r3, #0]
 80096c6:	2300      	movs	r3, #0
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	4616      	mov	r6, r2
 80096cc:	e7ba      	b.n	8009644 <_printf_i+0x150>
 80096ce:	680b      	ldr	r3, [r1, #0]
 80096d0:	1d1a      	adds	r2, r3, #4
 80096d2:	600a      	str	r2, [r1, #0]
 80096d4:	681e      	ldr	r6, [r3, #0]
 80096d6:	6862      	ldr	r2, [r4, #4]
 80096d8:	2100      	movs	r1, #0
 80096da:	4630      	mov	r0, r6
 80096dc:	f7f6 fd80 	bl	80001e0 <memchr>
 80096e0:	b108      	cbz	r0, 80096e6 <_printf_i+0x1f2>
 80096e2:	1b80      	subs	r0, r0, r6
 80096e4:	6060      	str	r0, [r4, #4]
 80096e6:	6863      	ldr	r3, [r4, #4]
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	2300      	movs	r3, #0
 80096ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096f0:	e7a8      	b.n	8009644 <_printf_i+0x150>
 80096f2:	6923      	ldr	r3, [r4, #16]
 80096f4:	4632      	mov	r2, r6
 80096f6:	4649      	mov	r1, r9
 80096f8:	4640      	mov	r0, r8
 80096fa:	47d0      	blx	sl
 80096fc:	3001      	adds	r0, #1
 80096fe:	d0ab      	beq.n	8009658 <_printf_i+0x164>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	079b      	lsls	r3, r3, #30
 8009704:	d413      	bmi.n	800972e <_printf_i+0x23a>
 8009706:	68e0      	ldr	r0, [r4, #12]
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	4298      	cmp	r0, r3
 800970c:	bfb8      	it	lt
 800970e:	4618      	movlt	r0, r3
 8009710:	e7a4      	b.n	800965c <_printf_i+0x168>
 8009712:	2301      	movs	r3, #1
 8009714:	4632      	mov	r2, r6
 8009716:	4649      	mov	r1, r9
 8009718:	4640      	mov	r0, r8
 800971a:	47d0      	blx	sl
 800971c:	3001      	adds	r0, #1
 800971e:	d09b      	beq.n	8009658 <_printf_i+0x164>
 8009720:	3501      	adds	r5, #1
 8009722:	68e3      	ldr	r3, [r4, #12]
 8009724:	9903      	ldr	r1, [sp, #12]
 8009726:	1a5b      	subs	r3, r3, r1
 8009728:	42ab      	cmp	r3, r5
 800972a:	dcf2      	bgt.n	8009712 <_printf_i+0x21e>
 800972c:	e7eb      	b.n	8009706 <_printf_i+0x212>
 800972e:	2500      	movs	r5, #0
 8009730:	f104 0619 	add.w	r6, r4, #25
 8009734:	e7f5      	b.n	8009722 <_printf_i+0x22e>
 8009736:	bf00      	nop
 8009738:	0800dae2 	.word	0x0800dae2
 800973c:	0800daf3 	.word	0x0800daf3

08009740 <_scanf_float>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	b087      	sub	sp, #28
 8009746:	4617      	mov	r7, r2
 8009748:	9303      	str	r3, [sp, #12]
 800974a:	688b      	ldr	r3, [r1, #8]
 800974c:	1e5a      	subs	r2, r3, #1
 800974e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009752:	bf83      	ittte	hi
 8009754:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009758:	195b      	addhi	r3, r3, r5
 800975a:	9302      	strhi	r3, [sp, #8]
 800975c:	2300      	movls	r3, #0
 800975e:	bf86      	itte	hi
 8009760:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009764:	608b      	strhi	r3, [r1, #8]
 8009766:	9302      	strls	r3, [sp, #8]
 8009768:	680b      	ldr	r3, [r1, #0]
 800976a:	468b      	mov	fp, r1
 800976c:	2500      	movs	r5, #0
 800976e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009772:	f84b 3b1c 	str.w	r3, [fp], #28
 8009776:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800977a:	4680      	mov	r8, r0
 800977c:	460c      	mov	r4, r1
 800977e:	465e      	mov	r6, fp
 8009780:	46aa      	mov	sl, r5
 8009782:	46a9      	mov	r9, r5
 8009784:	9501      	str	r5, [sp, #4]
 8009786:	68a2      	ldr	r2, [r4, #8]
 8009788:	b152      	cbz	r2, 80097a0 <_scanf_float+0x60>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	2b4e      	cmp	r3, #78	; 0x4e
 8009790:	d864      	bhi.n	800985c <_scanf_float+0x11c>
 8009792:	2b40      	cmp	r3, #64	; 0x40
 8009794:	d83c      	bhi.n	8009810 <_scanf_float+0xd0>
 8009796:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800979a:	b2c8      	uxtb	r0, r1
 800979c:	280e      	cmp	r0, #14
 800979e:	d93a      	bls.n	8009816 <_scanf_float+0xd6>
 80097a0:	f1b9 0f00 	cmp.w	r9, #0
 80097a4:	d003      	beq.n	80097ae <_scanf_float+0x6e>
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80097b2:	f1ba 0f01 	cmp.w	sl, #1
 80097b6:	f200 8113 	bhi.w	80099e0 <_scanf_float+0x2a0>
 80097ba:	455e      	cmp	r6, fp
 80097bc:	f200 8105 	bhi.w	80099ca <_scanf_float+0x28a>
 80097c0:	2501      	movs	r5, #1
 80097c2:	4628      	mov	r0, r5
 80097c4:	b007      	add	sp, #28
 80097c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80097ce:	2a0d      	cmp	r2, #13
 80097d0:	d8e6      	bhi.n	80097a0 <_scanf_float+0x60>
 80097d2:	a101      	add	r1, pc, #4	; (adr r1, 80097d8 <_scanf_float+0x98>)
 80097d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80097d8:	08009917 	.word	0x08009917
 80097dc:	080097a1 	.word	0x080097a1
 80097e0:	080097a1 	.word	0x080097a1
 80097e4:	080097a1 	.word	0x080097a1
 80097e8:	08009977 	.word	0x08009977
 80097ec:	0800994f 	.word	0x0800994f
 80097f0:	080097a1 	.word	0x080097a1
 80097f4:	080097a1 	.word	0x080097a1
 80097f8:	08009925 	.word	0x08009925
 80097fc:	080097a1 	.word	0x080097a1
 8009800:	080097a1 	.word	0x080097a1
 8009804:	080097a1 	.word	0x080097a1
 8009808:	080097a1 	.word	0x080097a1
 800980c:	080098dd 	.word	0x080098dd
 8009810:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009814:	e7db      	b.n	80097ce <_scanf_float+0x8e>
 8009816:	290e      	cmp	r1, #14
 8009818:	d8c2      	bhi.n	80097a0 <_scanf_float+0x60>
 800981a:	a001      	add	r0, pc, #4	; (adr r0, 8009820 <_scanf_float+0xe0>)
 800981c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009820:	080098cf 	.word	0x080098cf
 8009824:	080097a1 	.word	0x080097a1
 8009828:	080098cf 	.word	0x080098cf
 800982c:	08009963 	.word	0x08009963
 8009830:	080097a1 	.word	0x080097a1
 8009834:	0800987d 	.word	0x0800987d
 8009838:	080098b9 	.word	0x080098b9
 800983c:	080098b9 	.word	0x080098b9
 8009840:	080098b9 	.word	0x080098b9
 8009844:	080098b9 	.word	0x080098b9
 8009848:	080098b9 	.word	0x080098b9
 800984c:	080098b9 	.word	0x080098b9
 8009850:	080098b9 	.word	0x080098b9
 8009854:	080098b9 	.word	0x080098b9
 8009858:	080098b9 	.word	0x080098b9
 800985c:	2b6e      	cmp	r3, #110	; 0x6e
 800985e:	d809      	bhi.n	8009874 <_scanf_float+0x134>
 8009860:	2b60      	cmp	r3, #96	; 0x60
 8009862:	d8b2      	bhi.n	80097ca <_scanf_float+0x8a>
 8009864:	2b54      	cmp	r3, #84	; 0x54
 8009866:	d077      	beq.n	8009958 <_scanf_float+0x218>
 8009868:	2b59      	cmp	r3, #89	; 0x59
 800986a:	d199      	bne.n	80097a0 <_scanf_float+0x60>
 800986c:	2d07      	cmp	r5, #7
 800986e:	d197      	bne.n	80097a0 <_scanf_float+0x60>
 8009870:	2508      	movs	r5, #8
 8009872:	e029      	b.n	80098c8 <_scanf_float+0x188>
 8009874:	2b74      	cmp	r3, #116	; 0x74
 8009876:	d06f      	beq.n	8009958 <_scanf_float+0x218>
 8009878:	2b79      	cmp	r3, #121	; 0x79
 800987a:	e7f6      	b.n	800986a <_scanf_float+0x12a>
 800987c:	6821      	ldr	r1, [r4, #0]
 800987e:	05c8      	lsls	r0, r1, #23
 8009880:	d51a      	bpl.n	80098b8 <_scanf_float+0x178>
 8009882:	9b02      	ldr	r3, [sp, #8]
 8009884:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009888:	6021      	str	r1, [r4, #0]
 800988a:	f109 0901 	add.w	r9, r9, #1
 800988e:	b11b      	cbz	r3, 8009898 <_scanf_float+0x158>
 8009890:	3b01      	subs	r3, #1
 8009892:	3201      	adds	r2, #1
 8009894:	9302      	str	r3, [sp, #8]
 8009896:	60a2      	str	r2, [r4, #8]
 8009898:	68a3      	ldr	r3, [r4, #8]
 800989a:	3b01      	subs	r3, #1
 800989c:	60a3      	str	r3, [r4, #8]
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	3301      	adds	r3, #1
 80098a2:	6123      	str	r3, [r4, #16]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	607b      	str	r3, [r7, #4]
 80098ac:	f340 8084 	ble.w	80099b8 <_scanf_float+0x278>
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	3301      	adds	r3, #1
 80098b4:	603b      	str	r3, [r7, #0]
 80098b6:	e766      	b.n	8009786 <_scanf_float+0x46>
 80098b8:	eb1a 0f05 	cmn.w	sl, r5
 80098bc:	f47f af70 	bne.w	80097a0 <_scanf_float+0x60>
 80098c0:	6822      	ldr	r2, [r4, #0]
 80098c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80098c6:	6022      	str	r2, [r4, #0]
 80098c8:	f806 3b01 	strb.w	r3, [r6], #1
 80098cc:	e7e4      	b.n	8009898 <_scanf_float+0x158>
 80098ce:	6822      	ldr	r2, [r4, #0]
 80098d0:	0610      	lsls	r0, r2, #24
 80098d2:	f57f af65 	bpl.w	80097a0 <_scanf_float+0x60>
 80098d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098da:	e7f4      	b.n	80098c6 <_scanf_float+0x186>
 80098dc:	f1ba 0f00 	cmp.w	sl, #0
 80098e0:	d10e      	bne.n	8009900 <_scanf_float+0x1c0>
 80098e2:	f1b9 0f00 	cmp.w	r9, #0
 80098e6:	d10e      	bne.n	8009906 <_scanf_float+0x1c6>
 80098e8:	6822      	ldr	r2, [r4, #0]
 80098ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80098ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80098f2:	d108      	bne.n	8009906 <_scanf_float+0x1c6>
 80098f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80098f8:	6022      	str	r2, [r4, #0]
 80098fa:	f04f 0a01 	mov.w	sl, #1
 80098fe:	e7e3      	b.n	80098c8 <_scanf_float+0x188>
 8009900:	f1ba 0f02 	cmp.w	sl, #2
 8009904:	d055      	beq.n	80099b2 <_scanf_float+0x272>
 8009906:	2d01      	cmp	r5, #1
 8009908:	d002      	beq.n	8009910 <_scanf_float+0x1d0>
 800990a:	2d04      	cmp	r5, #4
 800990c:	f47f af48 	bne.w	80097a0 <_scanf_float+0x60>
 8009910:	3501      	adds	r5, #1
 8009912:	b2ed      	uxtb	r5, r5
 8009914:	e7d8      	b.n	80098c8 <_scanf_float+0x188>
 8009916:	f1ba 0f01 	cmp.w	sl, #1
 800991a:	f47f af41 	bne.w	80097a0 <_scanf_float+0x60>
 800991e:	f04f 0a02 	mov.w	sl, #2
 8009922:	e7d1      	b.n	80098c8 <_scanf_float+0x188>
 8009924:	b97d      	cbnz	r5, 8009946 <_scanf_float+0x206>
 8009926:	f1b9 0f00 	cmp.w	r9, #0
 800992a:	f47f af3c 	bne.w	80097a6 <_scanf_float+0x66>
 800992e:	6822      	ldr	r2, [r4, #0]
 8009930:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009934:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009938:	f47f af39 	bne.w	80097ae <_scanf_float+0x6e>
 800993c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009940:	6022      	str	r2, [r4, #0]
 8009942:	2501      	movs	r5, #1
 8009944:	e7c0      	b.n	80098c8 <_scanf_float+0x188>
 8009946:	2d03      	cmp	r5, #3
 8009948:	d0e2      	beq.n	8009910 <_scanf_float+0x1d0>
 800994a:	2d05      	cmp	r5, #5
 800994c:	e7de      	b.n	800990c <_scanf_float+0x1cc>
 800994e:	2d02      	cmp	r5, #2
 8009950:	f47f af26 	bne.w	80097a0 <_scanf_float+0x60>
 8009954:	2503      	movs	r5, #3
 8009956:	e7b7      	b.n	80098c8 <_scanf_float+0x188>
 8009958:	2d06      	cmp	r5, #6
 800995a:	f47f af21 	bne.w	80097a0 <_scanf_float+0x60>
 800995e:	2507      	movs	r5, #7
 8009960:	e7b2      	b.n	80098c8 <_scanf_float+0x188>
 8009962:	6822      	ldr	r2, [r4, #0]
 8009964:	0591      	lsls	r1, r2, #22
 8009966:	f57f af1b 	bpl.w	80097a0 <_scanf_float+0x60>
 800996a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800996e:	6022      	str	r2, [r4, #0]
 8009970:	f8cd 9004 	str.w	r9, [sp, #4]
 8009974:	e7a8      	b.n	80098c8 <_scanf_float+0x188>
 8009976:	6822      	ldr	r2, [r4, #0]
 8009978:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800997c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009980:	d006      	beq.n	8009990 <_scanf_float+0x250>
 8009982:	0550      	lsls	r0, r2, #21
 8009984:	f57f af0c 	bpl.w	80097a0 <_scanf_float+0x60>
 8009988:	f1b9 0f00 	cmp.w	r9, #0
 800998c:	f43f af0f 	beq.w	80097ae <_scanf_float+0x6e>
 8009990:	0591      	lsls	r1, r2, #22
 8009992:	bf58      	it	pl
 8009994:	9901      	ldrpl	r1, [sp, #4]
 8009996:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800999a:	bf58      	it	pl
 800999c:	eba9 0101 	subpl.w	r1, r9, r1
 80099a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80099a4:	bf58      	it	pl
 80099a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80099aa:	6022      	str	r2, [r4, #0]
 80099ac:	f04f 0900 	mov.w	r9, #0
 80099b0:	e78a      	b.n	80098c8 <_scanf_float+0x188>
 80099b2:	f04f 0a03 	mov.w	sl, #3
 80099b6:	e787      	b.n	80098c8 <_scanf_float+0x188>
 80099b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80099bc:	4639      	mov	r1, r7
 80099be:	4640      	mov	r0, r8
 80099c0:	4798      	blx	r3
 80099c2:	2800      	cmp	r0, #0
 80099c4:	f43f aedf 	beq.w	8009786 <_scanf_float+0x46>
 80099c8:	e6ea      	b.n	80097a0 <_scanf_float+0x60>
 80099ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099d2:	463a      	mov	r2, r7
 80099d4:	4640      	mov	r0, r8
 80099d6:	4798      	blx	r3
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	3b01      	subs	r3, #1
 80099dc:	6123      	str	r3, [r4, #16]
 80099de:	e6ec      	b.n	80097ba <_scanf_float+0x7a>
 80099e0:	1e6b      	subs	r3, r5, #1
 80099e2:	2b06      	cmp	r3, #6
 80099e4:	d825      	bhi.n	8009a32 <_scanf_float+0x2f2>
 80099e6:	2d02      	cmp	r5, #2
 80099e8:	d836      	bhi.n	8009a58 <_scanf_float+0x318>
 80099ea:	455e      	cmp	r6, fp
 80099ec:	f67f aee8 	bls.w	80097c0 <_scanf_float+0x80>
 80099f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099f8:	463a      	mov	r2, r7
 80099fa:	4640      	mov	r0, r8
 80099fc:	4798      	blx	r3
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	6123      	str	r3, [r4, #16]
 8009a04:	e7f1      	b.n	80099ea <_scanf_float+0x2aa>
 8009a06:	9802      	ldr	r0, [sp, #8]
 8009a08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a0c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009a10:	9002      	str	r0, [sp, #8]
 8009a12:	463a      	mov	r2, r7
 8009a14:	4640      	mov	r0, r8
 8009a16:	4798      	blx	r3
 8009a18:	6923      	ldr	r3, [r4, #16]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	6123      	str	r3, [r4, #16]
 8009a1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009a22:	fa5f fa8a 	uxtb.w	sl, sl
 8009a26:	f1ba 0f02 	cmp.w	sl, #2
 8009a2a:	d1ec      	bne.n	8009a06 <_scanf_float+0x2c6>
 8009a2c:	3d03      	subs	r5, #3
 8009a2e:	b2ed      	uxtb	r5, r5
 8009a30:	1b76      	subs	r6, r6, r5
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	05da      	lsls	r2, r3, #23
 8009a36:	d52f      	bpl.n	8009a98 <_scanf_float+0x358>
 8009a38:	055b      	lsls	r3, r3, #21
 8009a3a:	d510      	bpl.n	8009a5e <_scanf_float+0x31e>
 8009a3c:	455e      	cmp	r6, fp
 8009a3e:	f67f aebf 	bls.w	80097c0 <_scanf_float+0x80>
 8009a42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a4a:	463a      	mov	r2, r7
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	4798      	blx	r3
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	6123      	str	r3, [r4, #16]
 8009a56:	e7f1      	b.n	8009a3c <_scanf_float+0x2fc>
 8009a58:	46aa      	mov	sl, r5
 8009a5a:	9602      	str	r6, [sp, #8]
 8009a5c:	e7df      	b.n	8009a1e <_scanf_float+0x2de>
 8009a5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a62:	6923      	ldr	r3, [r4, #16]
 8009a64:	2965      	cmp	r1, #101	; 0x65
 8009a66:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009a6a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009a6e:	6123      	str	r3, [r4, #16]
 8009a70:	d00c      	beq.n	8009a8c <_scanf_float+0x34c>
 8009a72:	2945      	cmp	r1, #69	; 0x45
 8009a74:	d00a      	beq.n	8009a8c <_scanf_float+0x34c>
 8009a76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a7a:	463a      	mov	r2, r7
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	4798      	blx	r3
 8009a80:	6923      	ldr	r3, [r4, #16]
 8009a82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	1eb5      	subs	r5, r6, #2
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a90:	463a      	mov	r2, r7
 8009a92:	4640      	mov	r0, r8
 8009a94:	4798      	blx	r3
 8009a96:	462e      	mov	r6, r5
 8009a98:	6825      	ldr	r5, [r4, #0]
 8009a9a:	f015 0510 	ands.w	r5, r5, #16
 8009a9e:	d158      	bne.n	8009b52 <_scanf_float+0x412>
 8009aa0:	7035      	strb	r5, [r6, #0]
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aac:	d11c      	bne.n	8009ae8 <_scanf_float+0x3a8>
 8009aae:	9b01      	ldr	r3, [sp, #4]
 8009ab0:	454b      	cmp	r3, r9
 8009ab2:	eba3 0209 	sub.w	r2, r3, r9
 8009ab6:	d124      	bne.n	8009b02 <_scanf_float+0x3c2>
 8009ab8:	2200      	movs	r2, #0
 8009aba:	4659      	mov	r1, fp
 8009abc:	4640      	mov	r0, r8
 8009abe:	f000 ff29 	bl	800a914 <_strtod_r>
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	6821      	ldr	r1, [r4, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f011 0f02 	tst.w	r1, #2
 8009acc:	ec57 6b10 	vmov	r6, r7, d0
 8009ad0:	f103 0204 	add.w	r2, r3, #4
 8009ad4:	d020      	beq.n	8009b18 <_scanf_float+0x3d8>
 8009ad6:	9903      	ldr	r1, [sp, #12]
 8009ad8:	600a      	str	r2, [r1, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	e9c3 6700 	strd	r6, r7, [r3]
 8009ae0:	68e3      	ldr	r3, [r4, #12]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	60e3      	str	r3, [r4, #12]
 8009ae6:	e66c      	b.n	80097c2 <_scanf_float+0x82>
 8009ae8:	9b04      	ldr	r3, [sp, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0e4      	beq.n	8009ab8 <_scanf_float+0x378>
 8009aee:	9905      	ldr	r1, [sp, #20]
 8009af0:	230a      	movs	r3, #10
 8009af2:	462a      	mov	r2, r5
 8009af4:	3101      	adds	r1, #1
 8009af6:	4640      	mov	r0, r8
 8009af8:	f000 ff96 	bl	800aa28 <_strtol_r>
 8009afc:	9b04      	ldr	r3, [sp, #16]
 8009afe:	9e05      	ldr	r6, [sp, #20]
 8009b00:	1ac2      	subs	r2, r0, r3
 8009b02:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009b06:	429e      	cmp	r6, r3
 8009b08:	bf28      	it	cs
 8009b0a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009b0e:	4912      	ldr	r1, [pc, #72]	; (8009b58 <_scanf_float+0x418>)
 8009b10:	4630      	mov	r0, r6
 8009b12:	f000 f8b9 	bl	8009c88 <siprintf>
 8009b16:	e7cf      	b.n	8009ab8 <_scanf_float+0x378>
 8009b18:	f011 0f04 	tst.w	r1, #4
 8009b1c:	9903      	ldr	r1, [sp, #12]
 8009b1e:	600a      	str	r2, [r1, #0]
 8009b20:	d1db      	bne.n	8009ada <_scanf_float+0x39a>
 8009b22:	f8d3 8000 	ldr.w	r8, [r3]
 8009b26:	ee10 2a10 	vmov	r2, s0
 8009b2a:	ee10 0a10 	vmov	r0, s0
 8009b2e:	463b      	mov	r3, r7
 8009b30:	4639      	mov	r1, r7
 8009b32:	f7f6 fffb 	bl	8000b2c <__aeabi_dcmpun>
 8009b36:	b128      	cbz	r0, 8009b44 <_scanf_float+0x404>
 8009b38:	4808      	ldr	r0, [pc, #32]	; (8009b5c <_scanf_float+0x41c>)
 8009b3a:	f000 f89f 	bl	8009c7c <nanf>
 8009b3e:	ed88 0a00 	vstr	s0, [r8]
 8009b42:	e7cd      	b.n	8009ae0 <_scanf_float+0x3a0>
 8009b44:	4630      	mov	r0, r6
 8009b46:	4639      	mov	r1, r7
 8009b48:	f7f7 f84e 	bl	8000be8 <__aeabi_d2f>
 8009b4c:	f8c8 0000 	str.w	r0, [r8]
 8009b50:	e7c6      	b.n	8009ae0 <_scanf_float+0x3a0>
 8009b52:	2500      	movs	r5, #0
 8009b54:	e635      	b.n	80097c2 <_scanf_float+0x82>
 8009b56:	bf00      	nop
 8009b58:	0800db04 	.word	0x0800db04
 8009b5c:	0800df80 	.word	0x0800df80

08009b60 <iprintf>:
 8009b60:	b40f      	push	{r0, r1, r2, r3}
 8009b62:	4b0a      	ldr	r3, [pc, #40]	; (8009b8c <iprintf+0x2c>)
 8009b64:	b513      	push	{r0, r1, r4, lr}
 8009b66:	681c      	ldr	r4, [r3, #0]
 8009b68:	b124      	cbz	r4, 8009b74 <iprintf+0x14>
 8009b6a:	69a3      	ldr	r3, [r4, #24]
 8009b6c:	b913      	cbnz	r3, 8009b74 <iprintf+0x14>
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f001 ffb0 	bl	800bad4 <__sinit>
 8009b74:	ab05      	add	r3, sp, #20
 8009b76:	9a04      	ldr	r2, [sp, #16]
 8009b78:	68a1      	ldr	r1, [r4, #8]
 8009b7a:	9301      	str	r3, [sp, #4]
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f003 fb35 	bl	800d1ec <_vfiprintf_r>
 8009b82:	b002      	add	sp, #8
 8009b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b88:	b004      	add	sp, #16
 8009b8a:	4770      	bx	lr
 8009b8c:	20000010 	.word	0x20000010

08009b90 <_puts_r>:
 8009b90:	b570      	push	{r4, r5, r6, lr}
 8009b92:	460e      	mov	r6, r1
 8009b94:	4605      	mov	r5, r0
 8009b96:	b118      	cbz	r0, 8009ba0 <_puts_r+0x10>
 8009b98:	6983      	ldr	r3, [r0, #24]
 8009b9a:	b90b      	cbnz	r3, 8009ba0 <_puts_r+0x10>
 8009b9c:	f001 ff9a 	bl	800bad4 <__sinit>
 8009ba0:	69ab      	ldr	r3, [r5, #24]
 8009ba2:	68ac      	ldr	r4, [r5, #8]
 8009ba4:	b913      	cbnz	r3, 8009bac <_puts_r+0x1c>
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f001 ff94 	bl	800bad4 <__sinit>
 8009bac:	4b2c      	ldr	r3, [pc, #176]	; (8009c60 <_puts_r+0xd0>)
 8009bae:	429c      	cmp	r4, r3
 8009bb0:	d120      	bne.n	8009bf4 <_puts_r+0x64>
 8009bb2:	686c      	ldr	r4, [r5, #4]
 8009bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bb6:	07db      	lsls	r3, r3, #31
 8009bb8:	d405      	bmi.n	8009bc6 <_puts_r+0x36>
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	0598      	lsls	r0, r3, #22
 8009bbe:	d402      	bmi.n	8009bc6 <_puts_r+0x36>
 8009bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bc2:	f002 fb98 	bl	800c2f6 <__retarget_lock_acquire_recursive>
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	0719      	lsls	r1, r3, #28
 8009bca:	d51d      	bpl.n	8009c08 <_puts_r+0x78>
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	b1db      	cbz	r3, 8009c08 <_puts_r+0x78>
 8009bd0:	3e01      	subs	r6, #1
 8009bd2:	68a3      	ldr	r3, [r4, #8]
 8009bd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	60a3      	str	r3, [r4, #8]
 8009bdc:	bb39      	cbnz	r1, 8009c2e <_puts_r+0x9e>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	da38      	bge.n	8009c54 <_puts_r+0xc4>
 8009be2:	4622      	mov	r2, r4
 8009be4:	210a      	movs	r1, #10
 8009be6:	4628      	mov	r0, r5
 8009be8:	f000 ff20 	bl	800aa2c <__swbuf_r>
 8009bec:	3001      	adds	r0, #1
 8009bee:	d011      	beq.n	8009c14 <_puts_r+0x84>
 8009bf0:	250a      	movs	r5, #10
 8009bf2:	e011      	b.n	8009c18 <_puts_r+0x88>
 8009bf4:	4b1b      	ldr	r3, [pc, #108]	; (8009c64 <_puts_r+0xd4>)
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	d101      	bne.n	8009bfe <_puts_r+0x6e>
 8009bfa:	68ac      	ldr	r4, [r5, #8]
 8009bfc:	e7da      	b.n	8009bb4 <_puts_r+0x24>
 8009bfe:	4b1a      	ldr	r3, [pc, #104]	; (8009c68 <_puts_r+0xd8>)
 8009c00:	429c      	cmp	r4, r3
 8009c02:	bf08      	it	eq
 8009c04:	68ec      	ldreq	r4, [r5, #12]
 8009c06:	e7d5      	b.n	8009bb4 <_puts_r+0x24>
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	f000 ff60 	bl	800aad0 <__swsetup_r>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d0dd      	beq.n	8009bd0 <_puts_r+0x40>
 8009c14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009c18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c1a:	07da      	lsls	r2, r3, #31
 8009c1c:	d405      	bmi.n	8009c2a <_puts_r+0x9a>
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	059b      	lsls	r3, r3, #22
 8009c22:	d402      	bmi.n	8009c2a <_puts_r+0x9a>
 8009c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c26:	f002 fb67 	bl	800c2f8 <__retarget_lock_release_recursive>
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	bd70      	pop	{r4, r5, r6, pc}
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	da04      	bge.n	8009c3c <_puts_r+0xac>
 8009c32:	69a2      	ldr	r2, [r4, #24]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	dc06      	bgt.n	8009c46 <_puts_r+0xb6>
 8009c38:	290a      	cmp	r1, #10
 8009c3a:	d004      	beq.n	8009c46 <_puts_r+0xb6>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	6022      	str	r2, [r4, #0]
 8009c42:	7019      	strb	r1, [r3, #0]
 8009c44:	e7c5      	b.n	8009bd2 <_puts_r+0x42>
 8009c46:	4622      	mov	r2, r4
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f000 feef 	bl	800aa2c <__swbuf_r>
 8009c4e:	3001      	adds	r0, #1
 8009c50:	d1bf      	bne.n	8009bd2 <_puts_r+0x42>
 8009c52:	e7df      	b.n	8009c14 <_puts_r+0x84>
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	250a      	movs	r5, #10
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	6022      	str	r2, [r4, #0]
 8009c5c:	701d      	strb	r5, [r3, #0]
 8009c5e:	e7db      	b.n	8009c18 <_puts_r+0x88>
 8009c60:	0800dd18 	.word	0x0800dd18
 8009c64:	0800dd38 	.word	0x0800dd38
 8009c68:	0800dcf8 	.word	0x0800dcf8

08009c6c <puts>:
 8009c6c:	4b02      	ldr	r3, [pc, #8]	; (8009c78 <puts+0xc>)
 8009c6e:	4601      	mov	r1, r0
 8009c70:	6818      	ldr	r0, [r3, #0]
 8009c72:	f7ff bf8d 	b.w	8009b90 <_puts_r>
 8009c76:	bf00      	nop
 8009c78:	20000010 	.word	0x20000010

08009c7c <nanf>:
 8009c7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009c84 <nanf+0x8>
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	7fc00000 	.word	0x7fc00000

08009c88 <siprintf>:
 8009c88:	b40e      	push	{r1, r2, r3}
 8009c8a:	b500      	push	{lr}
 8009c8c:	b09c      	sub	sp, #112	; 0x70
 8009c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c90:	9002      	str	r0, [sp, #8]
 8009c92:	9006      	str	r0, [sp, #24]
 8009c94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c98:	4809      	ldr	r0, [pc, #36]	; (8009cc0 <siprintf+0x38>)
 8009c9a:	9107      	str	r1, [sp, #28]
 8009c9c:	9104      	str	r1, [sp, #16]
 8009c9e:	4909      	ldr	r1, [pc, #36]	; (8009cc4 <siprintf+0x3c>)
 8009ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca4:	9105      	str	r1, [sp, #20]
 8009ca6:	6800      	ldr	r0, [r0, #0]
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	a902      	add	r1, sp, #8
 8009cac:	f003 f974 	bl	800cf98 <_svfiprintf_r>
 8009cb0:	9b02      	ldr	r3, [sp, #8]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	701a      	strb	r2, [r3, #0]
 8009cb6:	b01c      	add	sp, #112	; 0x70
 8009cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cbc:	b003      	add	sp, #12
 8009cbe:	4770      	bx	lr
 8009cc0:	20000010 	.word	0x20000010
 8009cc4:	ffff0208 	.word	0xffff0208

08009cc8 <sulp>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	4604      	mov	r4, r0
 8009ccc:	460d      	mov	r5, r1
 8009cce:	ec45 4b10 	vmov	d0, r4, r5
 8009cd2:	4616      	mov	r6, r2
 8009cd4:	f002 fefc 	bl	800cad0 <__ulp>
 8009cd8:	ec51 0b10 	vmov	r0, r1, d0
 8009cdc:	b17e      	cbz	r6, 8009cfe <sulp+0x36>
 8009cde:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009ce2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	dd09      	ble.n	8009cfe <sulp+0x36>
 8009cea:	051b      	lsls	r3, r3, #20
 8009cec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009cf0:	2400      	movs	r4, #0
 8009cf2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	f7f6 fc7d 	bl	80005f8 <__aeabi_dmul>
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}

08009d00 <_strtod_l>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	b0a3      	sub	sp, #140	; 0x8c
 8009d06:	461f      	mov	r7, r3
 8009d08:	2300      	movs	r3, #0
 8009d0a:	931e      	str	r3, [sp, #120]	; 0x78
 8009d0c:	4ba4      	ldr	r3, [pc, #656]	; (8009fa0 <_strtod_l+0x2a0>)
 8009d0e:	9219      	str	r2, [sp, #100]	; 0x64
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	9307      	str	r3, [sp, #28]
 8009d14:	4604      	mov	r4, r0
 8009d16:	4618      	mov	r0, r3
 8009d18:	4688      	mov	r8, r1
 8009d1a:	f7f6 fa59 	bl	80001d0 <strlen>
 8009d1e:	f04f 0a00 	mov.w	sl, #0
 8009d22:	4605      	mov	r5, r0
 8009d24:	f04f 0b00 	mov.w	fp, #0
 8009d28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009d2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d2e:	781a      	ldrb	r2, [r3, #0]
 8009d30:	2a2b      	cmp	r2, #43	; 0x2b
 8009d32:	d04c      	beq.n	8009dce <_strtod_l+0xce>
 8009d34:	d839      	bhi.n	8009daa <_strtod_l+0xaa>
 8009d36:	2a0d      	cmp	r2, #13
 8009d38:	d832      	bhi.n	8009da0 <_strtod_l+0xa0>
 8009d3a:	2a08      	cmp	r2, #8
 8009d3c:	d832      	bhi.n	8009da4 <_strtod_l+0xa4>
 8009d3e:	2a00      	cmp	r2, #0
 8009d40:	d03c      	beq.n	8009dbc <_strtod_l+0xbc>
 8009d42:	2300      	movs	r3, #0
 8009d44:	930e      	str	r3, [sp, #56]	; 0x38
 8009d46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009d48:	7833      	ldrb	r3, [r6, #0]
 8009d4a:	2b30      	cmp	r3, #48	; 0x30
 8009d4c:	f040 80b4 	bne.w	8009eb8 <_strtod_l+0x1b8>
 8009d50:	7873      	ldrb	r3, [r6, #1]
 8009d52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d56:	2b58      	cmp	r3, #88	; 0x58
 8009d58:	d16c      	bne.n	8009e34 <_strtod_l+0x134>
 8009d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	ab1e      	add	r3, sp, #120	; 0x78
 8009d60:	9702      	str	r7, [sp, #8]
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	4a8f      	ldr	r2, [pc, #572]	; (8009fa4 <_strtod_l+0x2a4>)
 8009d66:	ab1f      	add	r3, sp, #124	; 0x7c
 8009d68:	a91d      	add	r1, sp, #116	; 0x74
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f001 ffb6 	bl	800bcdc <__gethex>
 8009d70:	f010 0707 	ands.w	r7, r0, #7
 8009d74:	4605      	mov	r5, r0
 8009d76:	d005      	beq.n	8009d84 <_strtod_l+0x84>
 8009d78:	2f06      	cmp	r7, #6
 8009d7a:	d12a      	bne.n	8009dd2 <_strtod_l+0xd2>
 8009d7c:	3601      	adds	r6, #1
 8009d7e:	2300      	movs	r3, #0
 8009d80:	961d      	str	r6, [sp, #116]	; 0x74
 8009d82:	930e      	str	r3, [sp, #56]	; 0x38
 8009d84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f040 8596 	bne.w	800a8b8 <_strtod_l+0xbb8>
 8009d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d8e:	b1db      	cbz	r3, 8009dc8 <_strtod_l+0xc8>
 8009d90:	4652      	mov	r2, sl
 8009d92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d96:	ec43 2b10 	vmov	d0, r2, r3
 8009d9a:	b023      	add	sp, #140	; 0x8c
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	2a20      	cmp	r2, #32
 8009da2:	d1ce      	bne.n	8009d42 <_strtod_l+0x42>
 8009da4:	3301      	adds	r3, #1
 8009da6:	931d      	str	r3, [sp, #116]	; 0x74
 8009da8:	e7c0      	b.n	8009d2c <_strtod_l+0x2c>
 8009daa:	2a2d      	cmp	r2, #45	; 0x2d
 8009dac:	d1c9      	bne.n	8009d42 <_strtod_l+0x42>
 8009dae:	2201      	movs	r2, #1
 8009db0:	920e      	str	r2, [sp, #56]	; 0x38
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	921d      	str	r2, [sp, #116]	; 0x74
 8009db6:	785b      	ldrb	r3, [r3, #1]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1c4      	bne.n	8009d46 <_strtod_l+0x46>
 8009dbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009dbe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f040 8576 	bne.w	800a8b4 <_strtod_l+0xbb4>
 8009dc8:	4652      	mov	r2, sl
 8009dca:	465b      	mov	r3, fp
 8009dcc:	e7e3      	b.n	8009d96 <_strtod_l+0x96>
 8009dce:	2200      	movs	r2, #0
 8009dd0:	e7ee      	b.n	8009db0 <_strtod_l+0xb0>
 8009dd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009dd4:	b13a      	cbz	r2, 8009de6 <_strtod_l+0xe6>
 8009dd6:	2135      	movs	r1, #53	; 0x35
 8009dd8:	a820      	add	r0, sp, #128	; 0x80
 8009dda:	f002 ff84 	bl	800cce6 <__copybits>
 8009dde:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009de0:	4620      	mov	r0, r4
 8009de2:	f002 fb49 	bl	800c478 <_Bfree>
 8009de6:	3f01      	subs	r7, #1
 8009de8:	2f05      	cmp	r7, #5
 8009dea:	d807      	bhi.n	8009dfc <_strtod_l+0xfc>
 8009dec:	e8df f007 	tbb	[pc, r7]
 8009df0:	1d180b0e 	.word	0x1d180b0e
 8009df4:	030e      	.short	0x030e
 8009df6:	f04f 0b00 	mov.w	fp, #0
 8009dfa:	46da      	mov	sl, fp
 8009dfc:	0728      	lsls	r0, r5, #28
 8009dfe:	d5c1      	bpl.n	8009d84 <_strtod_l+0x84>
 8009e00:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009e04:	e7be      	b.n	8009d84 <_strtod_l+0x84>
 8009e06:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009e0a:	e7f7      	b.n	8009dfc <_strtod_l+0xfc>
 8009e0c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009e10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009e12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009e1e:	e7ed      	b.n	8009dfc <_strtod_l+0xfc>
 8009e20:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009fa8 <_strtod_l+0x2a8>
 8009e24:	f04f 0a00 	mov.w	sl, #0
 8009e28:	e7e8      	b.n	8009dfc <_strtod_l+0xfc>
 8009e2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009e2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009e32:	e7e3      	b.n	8009dfc <_strtod_l+0xfc>
 8009e34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	921d      	str	r2, [sp, #116]	; 0x74
 8009e3a:	785b      	ldrb	r3, [r3, #1]
 8009e3c:	2b30      	cmp	r3, #48	; 0x30
 8009e3e:	d0f9      	beq.n	8009e34 <_strtod_l+0x134>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d09f      	beq.n	8009d84 <_strtod_l+0x84>
 8009e44:	2301      	movs	r3, #1
 8009e46:	f04f 0900 	mov.w	r9, #0
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009e54:	464f      	mov	r7, r9
 8009e56:	220a      	movs	r2, #10
 8009e58:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009e5a:	7806      	ldrb	r6, [r0, #0]
 8009e5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009e60:	b2d9      	uxtb	r1, r3
 8009e62:	2909      	cmp	r1, #9
 8009e64:	d92a      	bls.n	8009ebc <_strtod_l+0x1bc>
 8009e66:	9907      	ldr	r1, [sp, #28]
 8009e68:	462a      	mov	r2, r5
 8009e6a:	f003 fb4c 	bl	800d506 <strncmp>
 8009e6e:	b398      	cbz	r0, 8009ed8 <_strtod_l+0x1d8>
 8009e70:	2000      	movs	r0, #0
 8009e72:	4633      	mov	r3, r6
 8009e74:	463d      	mov	r5, r7
 8009e76:	9007      	str	r0, [sp, #28]
 8009e78:	4602      	mov	r2, r0
 8009e7a:	2b65      	cmp	r3, #101	; 0x65
 8009e7c:	d001      	beq.n	8009e82 <_strtod_l+0x182>
 8009e7e:	2b45      	cmp	r3, #69	; 0x45
 8009e80:	d118      	bne.n	8009eb4 <_strtod_l+0x1b4>
 8009e82:	b91d      	cbnz	r5, 8009e8c <_strtod_l+0x18c>
 8009e84:	9b04      	ldr	r3, [sp, #16]
 8009e86:	4303      	orrs	r3, r0
 8009e88:	d098      	beq.n	8009dbc <_strtod_l+0xbc>
 8009e8a:	2500      	movs	r5, #0
 8009e8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009e90:	f108 0301 	add.w	r3, r8, #1
 8009e94:	931d      	str	r3, [sp, #116]	; 0x74
 8009e96:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009e9a:	2b2b      	cmp	r3, #43	; 0x2b
 8009e9c:	d075      	beq.n	8009f8a <_strtod_l+0x28a>
 8009e9e:	2b2d      	cmp	r3, #45	; 0x2d
 8009ea0:	d07b      	beq.n	8009f9a <_strtod_l+0x29a>
 8009ea2:	f04f 0c00 	mov.w	ip, #0
 8009ea6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009eaa:	2909      	cmp	r1, #9
 8009eac:	f240 8082 	bls.w	8009fb4 <_strtod_l+0x2b4>
 8009eb0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009eb4:	2600      	movs	r6, #0
 8009eb6:	e09d      	b.n	8009ff4 <_strtod_l+0x2f4>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	e7c4      	b.n	8009e46 <_strtod_l+0x146>
 8009ebc:	2f08      	cmp	r7, #8
 8009ebe:	bfd8      	it	le
 8009ec0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009ec2:	f100 0001 	add.w	r0, r0, #1
 8009ec6:	bfda      	itte	le
 8009ec8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ecc:	9309      	strle	r3, [sp, #36]	; 0x24
 8009ece:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009ed2:	3701      	adds	r7, #1
 8009ed4:	901d      	str	r0, [sp, #116]	; 0x74
 8009ed6:	e7bf      	b.n	8009e58 <_strtod_l+0x158>
 8009ed8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009eda:	195a      	adds	r2, r3, r5
 8009edc:	921d      	str	r2, [sp, #116]	; 0x74
 8009ede:	5d5b      	ldrb	r3, [r3, r5]
 8009ee0:	2f00      	cmp	r7, #0
 8009ee2:	d037      	beq.n	8009f54 <_strtod_l+0x254>
 8009ee4:	9007      	str	r0, [sp, #28]
 8009ee6:	463d      	mov	r5, r7
 8009ee8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009eec:	2a09      	cmp	r2, #9
 8009eee:	d912      	bls.n	8009f16 <_strtod_l+0x216>
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	e7c2      	b.n	8009e7a <_strtod_l+0x17a>
 8009ef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	921d      	str	r2, [sp, #116]	; 0x74
 8009efa:	785b      	ldrb	r3, [r3, #1]
 8009efc:	3001      	adds	r0, #1
 8009efe:	2b30      	cmp	r3, #48	; 0x30
 8009f00:	d0f8      	beq.n	8009ef4 <_strtod_l+0x1f4>
 8009f02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009f06:	2a08      	cmp	r2, #8
 8009f08:	f200 84db 	bhi.w	800a8c2 <_strtod_l+0xbc2>
 8009f0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009f0e:	9007      	str	r0, [sp, #28]
 8009f10:	2000      	movs	r0, #0
 8009f12:	920a      	str	r2, [sp, #40]	; 0x28
 8009f14:	4605      	mov	r5, r0
 8009f16:	3b30      	subs	r3, #48	; 0x30
 8009f18:	f100 0201 	add.w	r2, r0, #1
 8009f1c:	d014      	beq.n	8009f48 <_strtod_l+0x248>
 8009f1e:	9907      	ldr	r1, [sp, #28]
 8009f20:	4411      	add	r1, r2
 8009f22:	9107      	str	r1, [sp, #28]
 8009f24:	462a      	mov	r2, r5
 8009f26:	eb00 0e05 	add.w	lr, r0, r5
 8009f2a:	210a      	movs	r1, #10
 8009f2c:	4572      	cmp	r2, lr
 8009f2e:	d113      	bne.n	8009f58 <_strtod_l+0x258>
 8009f30:	182a      	adds	r2, r5, r0
 8009f32:	2a08      	cmp	r2, #8
 8009f34:	f105 0501 	add.w	r5, r5, #1
 8009f38:	4405      	add	r5, r0
 8009f3a:	dc1c      	bgt.n	8009f76 <_strtod_l+0x276>
 8009f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f3e:	220a      	movs	r2, #10
 8009f40:	fb02 3301 	mla	r3, r2, r1, r3
 8009f44:	9309      	str	r3, [sp, #36]	; 0x24
 8009f46:	2200      	movs	r2, #0
 8009f48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f4a:	1c59      	adds	r1, r3, #1
 8009f4c:	911d      	str	r1, [sp, #116]	; 0x74
 8009f4e:	785b      	ldrb	r3, [r3, #1]
 8009f50:	4610      	mov	r0, r2
 8009f52:	e7c9      	b.n	8009ee8 <_strtod_l+0x1e8>
 8009f54:	4638      	mov	r0, r7
 8009f56:	e7d2      	b.n	8009efe <_strtod_l+0x1fe>
 8009f58:	2a08      	cmp	r2, #8
 8009f5a:	dc04      	bgt.n	8009f66 <_strtod_l+0x266>
 8009f5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f5e:	434e      	muls	r6, r1
 8009f60:	9609      	str	r6, [sp, #36]	; 0x24
 8009f62:	3201      	adds	r2, #1
 8009f64:	e7e2      	b.n	8009f2c <_strtod_l+0x22c>
 8009f66:	f102 0c01 	add.w	ip, r2, #1
 8009f6a:	f1bc 0f10 	cmp.w	ip, #16
 8009f6e:	bfd8      	it	le
 8009f70:	fb01 f909 	mulle.w	r9, r1, r9
 8009f74:	e7f5      	b.n	8009f62 <_strtod_l+0x262>
 8009f76:	2d10      	cmp	r5, #16
 8009f78:	bfdc      	itt	le
 8009f7a:	220a      	movle	r2, #10
 8009f7c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009f80:	e7e1      	b.n	8009f46 <_strtod_l+0x246>
 8009f82:	2300      	movs	r3, #0
 8009f84:	9307      	str	r3, [sp, #28]
 8009f86:	2201      	movs	r2, #1
 8009f88:	e77c      	b.n	8009e84 <_strtod_l+0x184>
 8009f8a:	f04f 0c00 	mov.w	ip, #0
 8009f8e:	f108 0302 	add.w	r3, r8, #2
 8009f92:	931d      	str	r3, [sp, #116]	; 0x74
 8009f94:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009f98:	e785      	b.n	8009ea6 <_strtod_l+0x1a6>
 8009f9a:	f04f 0c01 	mov.w	ip, #1
 8009f9e:	e7f6      	b.n	8009f8e <_strtod_l+0x28e>
 8009fa0:	0800ddc4 	.word	0x0800ddc4
 8009fa4:	0800db0c 	.word	0x0800db0c
 8009fa8:	7ff00000 	.word	0x7ff00000
 8009fac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fae:	1c59      	adds	r1, r3, #1
 8009fb0:	911d      	str	r1, [sp, #116]	; 0x74
 8009fb2:	785b      	ldrb	r3, [r3, #1]
 8009fb4:	2b30      	cmp	r3, #48	; 0x30
 8009fb6:	d0f9      	beq.n	8009fac <_strtod_l+0x2ac>
 8009fb8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009fbc:	2908      	cmp	r1, #8
 8009fbe:	f63f af79 	bhi.w	8009eb4 <_strtod_l+0x1b4>
 8009fc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009fc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fc8:	9308      	str	r3, [sp, #32]
 8009fca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fcc:	1c59      	adds	r1, r3, #1
 8009fce:	911d      	str	r1, [sp, #116]	; 0x74
 8009fd0:	785b      	ldrb	r3, [r3, #1]
 8009fd2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009fd6:	2e09      	cmp	r6, #9
 8009fd8:	d937      	bls.n	800a04a <_strtod_l+0x34a>
 8009fda:	9e08      	ldr	r6, [sp, #32]
 8009fdc:	1b89      	subs	r1, r1, r6
 8009fde:	2908      	cmp	r1, #8
 8009fe0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009fe4:	dc02      	bgt.n	8009fec <_strtod_l+0x2ec>
 8009fe6:	4576      	cmp	r6, lr
 8009fe8:	bfa8      	it	ge
 8009fea:	4676      	movge	r6, lr
 8009fec:	f1bc 0f00 	cmp.w	ip, #0
 8009ff0:	d000      	beq.n	8009ff4 <_strtod_l+0x2f4>
 8009ff2:	4276      	negs	r6, r6
 8009ff4:	2d00      	cmp	r5, #0
 8009ff6:	d14f      	bne.n	800a098 <_strtod_l+0x398>
 8009ff8:	9904      	ldr	r1, [sp, #16]
 8009ffa:	4301      	orrs	r1, r0
 8009ffc:	f47f aec2 	bne.w	8009d84 <_strtod_l+0x84>
 800a000:	2a00      	cmp	r2, #0
 800a002:	f47f aedb 	bne.w	8009dbc <_strtod_l+0xbc>
 800a006:	2b69      	cmp	r3, #105	; 0x69
 800a008:	d027      	beq.n	800a05a <_strtod_l+0x35a>
 800a00a:	dc24      	bgt.n	800a056 <_strtod_l+0x356>
 800a00c:	2b49      	cmp	r3, #73	; 0x49
 800a00e:	d024      	beq.n	800a05a <_strtod_l+0x35a>
 800a010:	2b4e      	cmp	r3, #78	; 0x4e
 800a012:	f47f aed3 	bne.w	8009dbc <_strtod_l+0xbc>
 800a016:	499e      	ldr	r1, [pc, #632]	; (800a290 <_strtod_l+0x590>)
 800a018:	a81d      	add	r0, sp, #116	; 0x74
 800a01a:	f002 f8b7 	bl	800c18c <__match>
 800a01e:	2800      	cmp	r0, #0
 800a020:	f43f aecc 	beq.w	8009dbc <_strtod_l+0xbc>
 800a024:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	2b28      	cmp	r3, #40	; 0x28
 800a02a:	d12d      	bne.n	800a088 <_strtod_l+0x388>
 800a02c:	4999      	ldr	r1, [pc, #612]	; (800a294 <_strtod_l+0x594>)
 800a02e:	aa20      	add	r2, sp, #128	; 0x80
 800a030:	a81d      	add	r0, sp, #116	; 0x74
 800a032:	f002 f8bf 	bl	800c1b4 <__hexnan>
 800a036:	2805      	cmp	r0, #5
 800a038:	d126      	bne.n	800a088 <_strtod_l+0x388>
 800a03a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a03c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a040:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a044:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a048:	e69c      	b.n	8009d84 <_strtod_l+0x84>
 800a04a:	210a      	movs	r1, #10
 800a04c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a050:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a054:	e7b9      	b.n	8009fca <_strtod_l+0x2ca>
 800a056:	2b6e      	cmp	r3, #110	; 0x6e
 800a058:	e7db      	b.n	800a012 <_strtod_l+0x312>
 800a05a:	498f      	ldr	r1, [pc, #572]	; (800a298 <_strtod_l+0x598>)
 800a05c:	a81d      	add	r0, sp, #116	; 0x74
 800a05e:	f002 f895 	bl	800c18c <__match>
 800a062:	2800      	cmp	r0, #0
 800a064:	f43f aeaa 	beq.w	8009dbc <_strtod_l+0xbc>
 800a068:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a06a:	498c      	ldr	r1, [pc, #560]	; (800a29c <_strtod_l+0x59c>)
 800a06c:	3b01      	subs	r3, #1
 800a06e:	a81d      	add	r0, sp, #116	; 0x74
 800a070:	931d      	str	r3, [sp, #116]	; 0x74
 800a072:	f002 f88b 	bl	800c18c <__match>
 800a076:	b910      	cbnz	r0, 800a07e <_strtod_l+0x37e>
 800a078:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a07a:	3301      	adds	r3, #1
 800a07c:	931d      	str	r3, [sp, #116]	; 0x74
 800a07e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a2ac <_strtod_l+0x5ac>
 800a082:	f04f 0a00 	mov.w	sl, #0
 800a086:	e67d      	b.n	8009d84 <_strtod_l+0x84>
 800a088:	4885      	ldr	r0, [pc, #532]	; (800a2a0 <_strtod_l+0x5a0>)
 800a08a:	f003 f9e1 	bl	800d450 <nan>
 800a08e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a092:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a096:	e675      	b.n	8009d84 <_strtod_l+0x84>
 800a098:	9b07      	ldr	r3, [sp, #28]
 800a09a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a09c:	1af3      	subs	r3, r6, r3
 800a09e:	2f00      	cmp	r7, #0
 800a0a0:	bf08      	it	eq
 800a0a2:	462f      	moveq	r7, r5
 800a0a4:	2d10      	cmp	r5, #16
 800a0a6:	9308      	str	r3, [sp, #32]
 800a0a8:	46a8      	mov	r8, r5
 800a0aa:	bfa8      	it	ge
 800a0ac:	f04f 0810 	movge.w	r8, #16
 800a0b0:	f7f6 fa28 	bl	8000504 <__aeabi_ui2d>
 800a0b4:	2d09      	cmp	r5, #9
 800a0b6:	4682      	mov	sl, r0
 800a0b8:	468b      	mov	fp, r1
 800a0ba:	dd13      	ble.n	800a0e4 <_strtod_l+0x3e4>
 800a0bc:	4b79      	ldr	r3, [pc, #484]	; (800a2a4 <_strtod_l+0x5a4>)
 800a0be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a0c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a0c6:	f7f6 fa97 	bl	80005f8 <__aeabi_dmul>
 800a0ca:	4682      	mov	sl, r0
 800a0cc:	4648      	mov	r0, r9
 800a0ce:	468b      	mov	fp, r1
 800a0d0:	f7f6 fa18 	bl	8000504 <__aeabi_ui2d>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4650      	mov	r0, sl
 800a0da:	4659      	mov	r1, fp
 800a0dc:	f7f6 f8d6 	bl	800028c <__adddf3>
 800a0e0:	4682      	mov	sl, r0
 800a0e2:	468b      	mov	fp, r1
 800a0e4:	2d0f      	cmp	r5, #15
 800a0e6:	dc38      	bgt.n	800a15a <_strtod_l+0x45a>
 800a0e8:	9b08      	ldr	r3, [sp, #32]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f43f ae4a 	beq.w	8009d84 <_strtod_l+0x84>
 800a0f0:	dd24      	ble.n	800a13c <_strtod_l+0x43c>
 800a0f2:	2b16      	cmp	r3, #22
 800a0f4:	dc0b      	bgt.n	800a10e <_strtod_l+0x40e>
 800a0f6:	4d6b      	ldr	r5, [pc, #428]	; (800a2a4 <_strtod_l+0x5a4>)
 800a0f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a0fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a100:	4652      	mov	r2, sl
 800a102:	465b      	mov	r3, fp
 800a104:	f7f6 fa78 	bl	80005f8 <__aeabi_dmul>
 800a108:	4682      	mov	sl, r0
 800a10a:	468b      	mov	fp, r1
 800a10c:	e63a      	b.n	8009d84 <_strtod_l+0x84>
 800a10e:	9a08      	ldr	r2, [sp, #32]
 800a110:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a114:	4293      	cmp	r3, r2
 800a116:	db20      	blt.n	800a15a <_strtod_l+0x45a>
 800a118:	4c62      	ldr	r4, [pc, #392]	; (800a2a4 <_strtod_l+0x5a4>)
 800a11a:	f1c5 050f 	rsb	r5, r5, #15
 800a11e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a122:	4652      	mov	r2, sl
 800a124:	465b      	mov	r3, fp
 800a126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a12a:	f7f6 fa65 	bl	80005f8 <__aeabi_dmul>
 800a12e:	9b08      	ldr	r3, [sp, #32]
 800a130:	1b5d      	subs	r5, r3, r5
 800a132:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a136:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a13a:	e7e3      	b.n	800a104 <_strtod_l+0x404>
 800a13c:	9b08      	ldr	r3, [sp, #32]
 800a13e:	3316      	adds	r3, #22
 800a140:	db0b      	blt.n	800a15a <_strtod_l+0x45a>
 800a142:	9b07      	ldr	r3, [sp, #28]
 800a144:	4a57      	ldr	r2, [pc, #348]	; (800a2a4 <_strtod_l+0x5a4>)
 800a146:	1b9e      	subs	r6, r3, r6
 800a148:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a14c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a150:	4650      	mov	r0, sl
 800a152:	4659      	mov	r1, fp
 800a154:	f7f6 fb7a 	bl	800084c <__aeabi_ddiv>
 800a158:	e7d6      	b.n	800a108 <_strtod_l+0x408>
 800a15a:	9b08      	ldr	r3, [sp, #32]
 800a15c:	eba5 0808 	sub.w	r8, r5, r8
 800a160:	4498      	add	r8, r3
 800a162:	f1b8 0f00 	cmp.w	r8, #0
 800a166:	dd71      	ble.n	800a24c <_strtod_l+0x54c>
 800a168:	f018 030f 	ands.w	r3, r8, #15
 800a16c:	d00a      	beq.n	800a184 <_strtod_l+0x484>
 800a16e:	494d      	ldr	r1, [pc, #308]	; (800a2a4 <_strtod_l+0x5a4>)
 800a170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a174:	4652      	mov	r2, sl
 800a176:	465b      	mov	r3, fp
 800a178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a17c:	f7f6 fa3c 	bl	80005f8 <__aeabi_dmul>
 800a180:	4682      	mov	sl, r0
 800a182:	468b      	mov	fp, r1
 800a184:	f038 080f 	bics.w	r8, r8, #15
 800a188:	d04d      	beq.n	800a226 <_strtod_l+0x526>
 800a18a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a18e:	dd22      	ble.n	800a1d6 <_strtod_l+0x4d6>
 800a190:	2500      	movs	r5, #0
 800a192:	462e      	mov	r6, r5
 800a194:	9509      	str	r5, [sp, #36]	; 0x24
 800a196:	9507      	str	r5, [sp, #28]
 800a198:	2322      	movs	r3, #34	; 0x22
 800a19a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a2ac <_strtod_l+0x5ac>
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	f04f 0a00 	mov.w	sl, #0
 800a1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f43f adec 	beq.w	8009d84 <_strtod_l+0x84>
 800a1ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f002 f962 	bl	800c478 <_Bfree>
 800a1b4:	9907      	ldr	r1, [sp, #28]
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f002 f95e 	bl	800c478 <_Bfree>
 800a1bc:	4631      	mov	r1, r6
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f002 f95a 	bl	800c478 <_Bfree>
 800a1c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f002 f956 	bl	800c478 <_Bfree>
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f002 f952 	bl	800c478 <_Bfree>
 800a1d4:	e5d6      	b.n	8009d84 <_strtod_l+0x84>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a1dc:	4650      	mov	r0, sl
 800a1de:	4659      	mov	r1, fp
 800a1e0:	4699      	mov	r9, r3
 800a1e2:	f1b8 0f01 	cmp.w	r8, #1
 800a1e6:	dc21      	bgt.n	800a22c <_strtod_l+0x52c>
 800a1e8:	b10b      	cbz	r3, 800a1ee <_strtod_l+0x4ee>
 800a1ea:	4682      	mov	sl, r0
 800a1ec:	468b      	mov	fp, r1
 800a1ee:	4b2e      	ldr	r3, [pc, #184]	; (800a2a8 <_strtod_l+0x5a8>)
 800a1f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a1f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a1f8:	4652      	mov	r2, sl
 800a1fa:	465b      	mov	r3, fp
 800a1fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a200:	f7f6 f9fa 	bl	80005f8 <__aeabi_dmul>
 800a204:	4b29      	ldr	r3, [pc, #164]	; (800a2ac <_strtod_l+0x5ac>)
 800a206:	460a      	mov	r2, r1
 800a208:	400b      	ands	r3, r1
 800a20a:	4929      	ldr	r1, [pc, #164]	; (800a2b0 <_strtod_l+0x5b0>)
 800a20c:	428b      	cmp	r3, r1
 800a20e:	4682      	mov	sl, r0
 800a210:	d8be      	bhi.n	800a190 <_strtod_l+0x490>
 800a212:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a216:	428b      	cmp	r3, r1
 800a218:	bf86      	itte	hi
 800a21a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a2b4 <_strtod_l+0x5b4>
 800a21e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a222:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a226:	2300      	movs	r3, #0
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	e081      	b.n	800a330 <_strtod_l+0x630>
 800a22c:	f018 0f01 	tst.w	r8, #1
 800a230:	d007      	beq.n	800a242 <_strtod_l+0x542>
 800a232:	4b1d      	ldr	r3, [pc, #116]	; (800a2a8 <_strtod_l+0x5a8>)
 800a234:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	f7f6 f9dc 	bl	80005f8 <__aeabi_dmul>
 800a240:	2301      	movs	r3, #1
 800a242:	f109 0901 	add.w	r9, r9, #1
 800a246:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a24a:	e7ca      	b.n	800a1e2 <_strtod_l+0x4e2>
 800a24c:	d0eb      	beq.n	800a226 <_strtod_l+0x526>
 800a24e:	f1c8 0800 	rsb	r8, r8, #0
 800a252:	f018 020f 	ands.w	r2, r8, #15
 800a256:	d00a      	beq.n	800a26e <_strtod_l+0x56e>
 800a258:	4b12      	ldr	r3, [pc, #72]	; (800a2a4 <_strtod_l+0x5a4>)
 800a25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a25e:	4650      	mov	r0, sl
 800a260:	4659      	mov	r1, fp
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	f7f6 faf1 	bl	800084c <__aeabi_ddiv>
 800a26a:	4682      	mov	sl, r0
 800a26c:	468b      	mov	fp, r1
 800a26e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a272:	d0d8      	beq.n	800a226 <_strtod_l+0x526>
 800a274:	f1b8 0f1f 	cmp.w	r8, #31
 800a278:	dd1e      	ble.n	800a2b8 <_strtod_l+0x5b8>
 800a27a:	2500      	movs	r5, #0
 800a27c:	462e      	mov	r6, r5
 800a27e:	9509      	str	r5, [sp, #36]	; 0x24
 800a280:	9507      	str	r5, [sp, #28]
 800a282:	2322      	movs	r3, #34	; 0x22
 800a284:	f04f 0a00 	mov.w	sl, #0
 800a288:	f04f 0b00 	mov.w	fp, #0
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	e789      	b.n	800a1a4 <_strtod_l+0x4a4>
 800a290:	0800dadd 	.word	0x0800dadd
 800a294:	0800db20 	.word	0x0800db20
 800a298:	0800dad5 	.word	0x0800dad5
 800a29c:	0800dc64 	.word	0x0800dc64
 800a2a0:	0800df80 	.word	0x0800df80
 800a2a4:	0800de60 	.word	0x0800de60
 800a2a8:	0800de38 	.word	0x0800de38
 800a2ac:	7ff00000 	.word	0x7ff00000
 800a2b0:	7ca00000 	.word	0x7ca00000
 800a2b4:	7fefffff 	.word	0x7fefffff
 800a2b8:	f018 0310 	ands.w	r3, r8, #16
 800a2bc:	bf18      	it	ne
 800a2be:	236a      	movne	r3, #106	; 0x6a
 800a2c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a678 <_strtod_l+0x978>
 800a2c4:	9304      	str	r3, [sp, #16]
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f018 0f01 	tst.w	r8, #1
 800a2d0:	d004      	beq.n	800a2dc <_strtod_l+0x5dc>
 800a2d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a2d6:	f7f6 f98f 	bl	80005f8 <__aeabi_dmul>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a2e0:	f109 0908 	add.w	r9, r9, #8
 800a2e4:	d1f2      	bne.n	800a2cc <_strtod_l+0x5cc>
 800a2e6:	b10b      	cbz	r3, 800a2ec <_strtod_l+0x5ec>
 800a2e8:	4682      	mov	sl, r0
 800a2ea:	468b      	mov	fp, r1
 800a2ec:	9b04      	ldr	r3, [sp, #16]
 800a2ee:	b1bb      	cbz	r3, 800a320 <_strtod_l+0x620>
 800a2f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a2f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	4659      	mov	r1, fp
 800a2fc:	dd10      	ble.n	800a320 <_strtod_l+0x620>
 800a2fe:	2b1f      	cmp	r3, #31
 800a300:	f340 8128 	ble.w	800a554 <_strtod_l+0x854>
 800a304:	2b34      	cmp	r3, #52	; 0x34
 800a306:	bfde      	ittt	le
 800a308:	3b20      	suble	r3, #32
 800a30a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800a30e:	fa02 f303 	lslle.w	r3, r2, r3
 800a312:	f04f 0a00 	mov.w	sl, #0
 800a316:	bfcc      	ite	gt
 800a318:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a31c:	ea03 0b01 	andle.w	fp, r3, r1
 800a320:	2200      	movs	r2, #0
 800a322:	2300      	movs	r3, #0
 800a324:	4650      	mov	r0, sl
 800a326:	4659      	mov	r1, fp
 800a328:	f7f6 fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d1a4      	bne.n	800a27a <_strtod_l+0x57a>
 800a330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a336:	462b      	mov	r3, r5
 800a338:	463a      	mov	r2, r7
 800a33a:	4620      	mov	r0, r4
 800a33c:	f002 f908 	bl	800c550 <__s2b>
 800a340:	9009      	str	r0, [sp, #36]	; 0x24
 800a342:	2800      	cmp	r0, #0
 800a344:	f43f af24 	beq.w	800a190 <_strtod_l+0x490>
 800a348:	9b07      	ldr	r3, [sp, #28]
 800a34a:	1b9e      	subs	r6, r3, r6
 800a34c:	9b08      	ldr	r3, [sp, #32]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	bfb4      	ite	lt
 800a352:	4633      	movlt	r3, r6
 800a354:	2300      	movge	r3, #0
 800a356:	9310      	str	r3, [sp, #64]	; 0x40
 800a358:	9b08      	ldr	r3, [sp, #32]
 800a35a:	2500      	movs	r5, #0
 800a35c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a360:	9318      	str	r3, [sp, #96]	; 0x60
 800a362:	462e      	mov	r6, r5
 800a364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a366:	4620      	mov	r0, r4
 800a368:	6859      	ldr	r1, [r3, #4]
 800a36a:	f002 f845 	bl	800c3f8 <_Balloc>
 800a36e:	9007      	str	r0, [sp, #28]
 800a370:	2800      	cmp	r0, #0
 800a372:	f43f af11 	beq.w	800a198 <_strtod_l+0x498>
 800a376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a378:	691a      	ldr	r2, [r3, #16]
 800a37a:	3202      	adds	r2, #2
 800a37c:	f103 010c 	add.w	r1, r3, #12
 800a380:	0092      	lsls	r2, r2, #2
 800a382:	300c      	adds	r0, #12
 800a384:	f7fe fd5c 	bl	8008e40 <memcpy>
 800a388:	ec4b ab10 	vmov	d0, sl, fp
 800a38c:	aa20      	add	r2, sp, #128	; 0x80
 800a38e:	a91f      	add	r1, sp, #124	; 0x7c
 800a390:	4620      	mov	r0, r4
 800a392:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a396:	f002 fc17 	bl	800cbc8 <__d2b>
 800a39a:	901e      	str	r0, [sp, #120]	; 0x78
 800a39c:	2800      	cmp	r0, #0
 800a39e:	f43f aefb 	beq.w	800a198 <_strtod_l+0x498>
 800a3a2:	2101      	movs	r1, #1
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f002 f96d 	bl	800c684 <__i2b>
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	f43f aef3 	beq.w	800a198 <_strtod_l+0x498>
 800a3b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3b4:	9904      	ldr	r1, [sp, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	bfab      	itete	ge
 800a3ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a3bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a3be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a3c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a3c4:	bfac      	ite	ge
 800a3c6:	eb03 0902 	addge.w	r9, r3, r2
 800a3ca:	1ad7      	sublt	r7, r2, r3
 800a3cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3ce:	eba3 0801 	sub.w	r8, r3, r1
 800a3d2:	4490      	add	r8, r2
 800a3d4:	4ba3      	ldr	r3, [pc, #652]	; (800a664 <_strtod_l+0x964>)
 800a3d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a3da:	4598      	cmp	r8, r3
 800a3dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a3e0:	f280 80cc 	bge.w	800a57c <_strtod_l+0x87c>
 800a3e4:	eba3 0308 	sub.w	r3, r3, r8
 800a3e8:	2b1f      	cmp	r3, #31
 800a3ea:	eba2 0203 	sub.w	r2, r2, r3
 800a3ee:	f04f 0101 	mov.w	r1, #1
 800a3f2:	f300 80b6 	bgt.w	800a562 <_strtod_l+0x862>
 800a3f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3fa:	9311      	str	r3, [sp, #68]	; 0x44
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	930c      	str	r3, [sp, #48]	; 0x30
 800a400:	eb09 0802 	add.w	r8, r9, r2
 800a404:	9b04      	ldr	r3, [sp, #16]
 800a406:	45c1      	cmp	r9, r8
 800a408:	4417      	add	r7, r2
 800a40a:	441f      	add	r7, r3
 800a40c:	464b      	mov	r3, r9
 800a40e:	bfa8      	it	ge
 800a410:	4643      	movge	r3, r8
 800a412:	42bb      	cmp	r3, r7
 800a414:	bfa8      	it	ge
 800a416:	463b      	movge	r3, r7
 800a418:	2b00      	cmp	r3, #0
 800a41a:	bfc2      	ittt	gt
 800a41c:	eba8 0803 	subgt.w	r8, r8, r3
 800a420:	1aff      	subgt	r7, r7, r3
 800a422:	eba9 0903 	subgt.w	r9, r9, r3
 800a426:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a428:	2b00      	cmp	r3, #0
 800a42a:	dd17      	ble.n	800a45c <_strtod_l+0x75c>
 800a42c:	4631      	mov	r1, r6
 800a42e:	461a      	mov	r2, r3
 800a430:	4620      	mov	r0, r4
 800a432:	f002 f9e3 	bl	800c7fc <__pow5mult>
 800a436:	4606      	mov	r6, r0
 800a438:	2800      	cmp	r0, #0
 800a43a:	f43f aead 	beq.w	800a198 <_strtod_l+0x498>
 800a43e:	4601      	mov	r1, r0
 800a440:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a442:	4620      	mov	r0, r4
 800a444:	f002 f934 	bl	800c6b0 <__multiply>
 800a448:	900f      	str	r0, [sp, #60]	; 0x3c
 800a44a:	2800      	cmp	r0, #0
 800a44c:	f43f aea4 	beq.w	800a198 <_strtod_l+0x498>
 800a450:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a452:	4620      	mov	r0, r4
 800a454:	f002 f810 	bl	800c478 <_Bfree>
 800a458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a45a:	931e      	str	r3, [sp, #120]	; 0x78
 800a45c:	f1b8 0f00 	cmp.w	r8, #0
 800a460:	f300 8091 	bgt.w	800a586 <_strtod_l+0x886>
 800a464:	9b08      	ldr	r3, [sp, #32]
 800a466:	2b00      	cmp	r3, #0
 800a468:	dd08      	ble.n	800a47c <_strtod_l+0x77c>
 800a46a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a46c:	9907      	ldr	r1, [sp, #28]
 800a46e:	4620      	mov	r0, r4
 800a470:	f002 f9c4 	bl	800c7fc <__pow5mult>
 800a474:	9007      	str	r0, [sp, #28]
 800a476:	2800      	cmp	r0, #0
 800a478:	f43f ae8e 	beq.w	800a198 <_strtod_l+0x498>
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	dd08      	ble.n	800a492 <_strtod_l+0x792>
 800a480:	9907      	ldr	r1, [sp, #28]
 800a482:	463a      	mov	r2, r7
 800a484:	4620      	mov	r0, r4
 800a486:	f002 fa13 	bl	800c8b0 <__lshift>
 800a48a:	9007      	str	r0, [sp, #28]
 800a48c:	2800      	cmp	r0, #0
 800a48e:	f43f ae83 	beq.w	800a198 <_strtod_l+0x498>
 800a492:	f1b9 0f00 	cmp.w	r9, #0
 800a496:	dd08      	ble.n	800a4aa <_strtod_l+0x7aa>
 800a498:	4631      	mov	r1, r6
 800a49a:	464a      	mov	r2, r9
 800a49c:	4620      	mov	r0, r4
 800a49e:	f002 fa07 	bl	800c8b0 <__lshift>
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f43f ae77 	beq.w	800a198 <_strtod_l+0x498>
 800a4aa:	9a07      	ldr	r2, [sp, #28]
 800a4ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f002 fa86 	bl	800c9c0 <__mdiff>
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	f43f ae6e 	beq.w	800a198 <_strtod_l+0x498>
 800a4bc:	68c3      	ldr	r3, [r0, #12]
 800a4be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60c3      	str	r3, [r0, #12]
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	f002 fa5f 	bl	800c988 <__mcmp>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	da65      	bge.n	800a59a <_strtod_l+0x89a>
 800a4ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4d0:	ea53 030a 	orrs.w	r3, r3, sl
 800a4d4:	f040 8087 	bne.w	800a5e6 <_strtod_l+0x8e6>
 800a4d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f040 8082 	bne.w	800a5e6 <_strtod_l+0x8e6>
 800a4e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4e6:	0d1b      	lsrs	r3, r3, #20
 800a4e8:	051b      	lsls	r3, r3, #20
 800a4ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a4ee:	d97a      	bls.n	800a5e6 <_strtod_l+0x8e6>
 800a4f0:	696b      	ldr	r3, [r5, #20]
 800a4f2:	b913      	cbnz	r3, 800a4fa <_strtod_l+0x7fa>
 800a4f4:	692b      	ldr	r3, [r5, #16]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	dd75      	ble.n	800a5e6 <_strtod_l+0x8e6>
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	4620      	mov	r0, r4
 800a500:	f002 f9d6 	bl	800c8b0 <__lshift>
 800a504:	4631      	mov	r1, r6
 800a506:	4605      	mov	r5, r0
 800a508:	f002 fa3e 	bl	800c988 <__mcmp>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	dd6a      	ble.n	800a5e6 <_strtod_l+0x8e6>
 800a510:	9904      	ldr	r1, [sp, #16]
 800a512:	4a55      	ldr	r2, [pc, #340]	; (800a668 <_strtod_l+0x968>)
 800a514:	465b      	mov	r3, fp
 800a516:	2900      	cmp	r1, #0
 800a518:	f000 8085 	beq.w	800a626 <_strtod_l+0x926>
 800a51c:	ea02 010b 	and.w	r1, r2, fp
 800a520:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a524:	dc7f      	bgt.n	800a626 <_strtod_l+0x926>
 800a526:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a52a:	f77f aeaa 	ble.w	800a282 <_strtod_l+0x582>
 800a52e:	4a4f      	ldr	r2, [pc, #316]	; (800a66c <_strtod_l+0x96c>)
 800a530:	2300      	movs	r3, #0
 800a532:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a536:	4650      	mov	r0, sl
 800a538:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a53c:	4659      	mov	r1, fp
 800a53e:	f7f6 f85b 	bl	80005f8 <__aeabi_dmul>
 800a542:	460b      	mov	r3, r1
 800a544:	4303      	orrs	r3, r0
 800a546:	bf08      	it	eq
 800a548:	2322      	moveq	r3, #34	; 0x22
 800a54a:	4682      	mov	sl, r0
 800a54c:	468b      	mov	fp, r1
 800a54e:	bf08      	it	eq
 800a550:	6023      	streq	r3, [r4, #0]
 800a552:	e62b      	b.n	800a1ac <_strtod_l+0x4ac>
 800a554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a558:	fa02 f303 	lsl.w	r3, r2, r3
 800a55c:	ea03 0a0a 	and.w	sl, r3, sl
 800a560:	e6de      	b.n	800a320 <_strtod_l+0x620>
 800a562:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a566:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a56a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a56e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a572:	fa01 f308 	lsl.w	r3, r1, r8
 800a576:	930c      	str	r3, [sp, #48]	; 0x30
 800a578:	9111      	str	r1, [sp, #68]	; 0x44
 800a57a:	e741      	b.n	800a400 <_strtod_l+0x700>
 800a57c:	2300      	movs	r3, #0
 800a57e:	930c      	str	r3, [sp, #48]	; 0x30
 800a580:	2301      	movs	r3, #1
 800a582:	9311      	str	r3, [sp, #68]	; 0x44
 800a584:	e73c      	b.n	800a400 <_strtod_l+0x700>
 800a586:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a588:	4642      	mov	r2, r8
 800a58a:	4620      	mov	r0, r4
 800a58c:	f002 f990 	bl	800c8b0 <__lshift>
 800a590:	901e      	str	r0, [sp, #120]	; 0x78
 800a592:	2800      	cmp	r0, #0
 800a594:	f47f af66 	bne.w	800a464 <_strtod_l+0x764>
 800a598:	e5fe      	b.n	800a198 <_strtod_l+0x498>
 800a59a:	465f      	mov	r7, fp
 800a59c:	d16e      	bne.n	800a67c <_strtod_l+0x97c>
 800a59e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5a4:	b342      	cbz	r2, 800a5f8 <_strtod_l+0x8f8>
 800a5a6:	4a32      	ldr	r2, [pc, #200]	; (800a670 <_strtod_l+0x970>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d128      	bne.n	800a5fe <_strtod_l+0x8fe>
 800a5ac:	9b04      	ldr	r3, [sp, #16]
 800a5ae:	4650      	mov	r0, sl
 800a5b0:	b1eb      	cbz	r3, 800a5ee <_strtod_l+0x8ee>
 800a5b2:	4a2d      	ldr	r2, [pc, #180]	; (800a668 <_strtod_l+0x968>)
 800a5b4:	403a      	ands	r2, r7
 800a5b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a5ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a5be:	d819      	bhi.n	800a5f4 <_strtod_l+0x8f4>
 800a5c0:	0d12      	lsrs	r2, r2, #20
 800a5c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a5c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ca:	4298      	cmp	r0, r3
 800a5cc:	d117      	bne.n	800a5fe <_strtod_l+0x8fe>
 800a5ce:	4b29      	ldr	r3, [pc, #164]	; (800a674 <_strtod_l+0x974>)
 800a5d0:	429f      	cmp	r7, r3
 800a5d2:	d102      	bne.n	800a5da <_strtod_l+0x8da>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	f43f addf 	beq.w	800a198 <_strtod_l+0x498>
 800a5da:	4b23      	ldr	r3, [pc, #140]	; (800a668 <_strtod_l+0x968>)
 800a5dc:	403b      	ands	r3, r7
 800a5de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a5e2:	f04f 0a00 	mov.w	sl, #0
 800a5e6:	9b04      	ldr	r3, [sp, #16]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1a0      	bne.n	800a52e <_strtod_l+0x82e>
 800a5ec:	e5de      	b.n	800a1ac <_strtod_l+0x4ac>
 800a5ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5f2:	e7ea      	b.n	800a5ca <_strtod_l+0x8ca>
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	e7e8      	b.n	800a5ca <_strtod_l+0x8ca>
 800a5f8:	ea53 030a 	orrs.w	r3, r3, sl
 800a5fc:	d088      	beq.n	800a510 <_strtod_l+0x810>
 800a5fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a600:	b1db      	cbz	r3, 800a63a <_strtod_l+0x93a>
 800a602:	423b      	tst	r3, r7
 800a604:	d0ef      	beq.n	800a5e6 <_strtod_l+0x8e6>
 800a606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a608:	9a04      	ldr	r2, [sp, #16]
 800a60a:	4650      	mov	r0, sl
 800a60c:	4659      	mov	r1, fp
 800a60e:	b1c3      	cbz	r3, 800a642 <_strtod_l+0x942>
 800a610:	f7ff fb5a 	bl	8009cc8 <sulp>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a61c:	f7f5 fe36 	bl	800028c <__adddf3>
 800a620:	4682      	mov	sl, r0
 800a622:	468b      	mov	fp, r1
 800a624:	e7df      	b.n	800a5e6 <_strtod_l+0x8e6>
 800a626:	4013      	ands	r3, r2
 800a628:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a62c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a630:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a634:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a638:	e7d5      	b.n	800a5e6 <_strtod_l+0x8e6>
 800a63a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a63c:	ea13 0f0a 	tst.w	r3, sl
 800a640:	e7e0      	b.n	800a604 <_strtod_l+0x904>
 800a642:	f7ff fb41 	bl	8009cc8 <sulp>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a64e:	f7f5 fe1b 	bl	8000288 <__aeabi_dsub>
 800a652:	2200      	movs	r2, #0
 800a654:	2300      	movs	r3, #0
 800a656:	4682      	mov	sl, r0
 800a658:	468b      	mov	fp, r1
 800a65a:	f7f6 fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d0c1      	beq.n	800a5e6 <_strtod_l+0x8e6>
 800a662:	e60e      	b.n	800a282 <_strtod_l+0x582>
 800a664:	fffffc02 	.word	0xfffffc02
 800a668:	7ff00000 	.word	0x7ff00000
 800a66c:	39500000 	.word	0x39500000
 800a670:	000fffff 	.word	0x000fffff
 800a674:	7fefffff 	.word	0x7fefffff
 800a678:	0800db38 	.word	0x0800db38
 800a67c:	4631      	mov	r1, r6
 800a67e:	4628      	mov	r0, r5
 800a680:	f002 fafe 	bl	800cc80 <__ratio>
 800a684:	ec59 8b10 	vmov	r8, r9, d0
 800a688:	ee10 0a10 	vmov	r0, s0
 800a68c:	2200      	movs	r2, #0
 800a68e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a692:	4649      	mov	r1, r9
 800a694:	f7f6 fa2c 	bl	8000af0 <__aeabi_dcmple>
 800a698:	2800      	cmp	r0, #0
 800a69a:	d07c      	beq.n	800a796 <_strtod_l+0xa96>
 800a69c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d04c      	beq.n	800a73c <_strtod_l+0xa3c>
 800a6a2:	4b95      	ldr	r3, [pc, #596]	; (800a8f8 <_strtod_l+0xbf8>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a6aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a8f8 <_strtod_l+0xbf8>
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	4b92      	ldr	r3, [pc, #584]	; (800a8fc <_strtod_l+0xbfc>)
 800a6b4:	403b      	ands	r3, r7
 800a6b6:	9311      	str	r3, [sp, #68]	; 0x44
 800a6b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6ba:	4b91      	ldr	r3, [pc, #580]	; (800a900 <_strtod_l+0xc00>)
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	f040 80b2 	bne.w	800a826 <_strtod_l+0xb26>
 800a6c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a6ce:	ec4b ab10 	vmov	d0, sl, fp
 800a6d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a6d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6da:	f002 f9f9 	bl	800cad0 <__ulp>
 800a6de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6e2:	ec53 2b10 	vmov	r2, r3, d0
 800a6e6:	f7f5 ff87 	bl	80005f8 <__aeabi_dmul>
 800a6ea:	4652      	mov	r2, sl
 800a6ec:	465b      	mov	r3, fp
 800a6ee:	f7f5 fdcd 	bl	800028c <__adddf3>
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4981      	ldr	r1, [pc, #516]	; (800a8fc <_strtod_l+0xbfc>)
 800a6f6:	4a83      	ldr	r2, [pc, #524]	; (800a904 <_strtod_l+0xc04>)
 800a6f8:	4019      	ands	r1, r3
 800a6fa:	4291      	cmp	r1, r2
 800a6fc:	4682      	mov	sl, r0
 800a6fe:	d95e      	bls.n	800a7be <_strtod_l+0xabe>
 800a700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a702:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a706:	4293      	cmp	r3, r2
 800a708:	d103      	bne.n	800a712 <_strtod_l+0xa12>
 800a70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a70c:	3301      	adds	r3, #1
 800a70e:	f43f ad43 	beq.w	800a198 <_strtod_l+0x498>
 800a712:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a910 <_strtod_l+0xc10>
 800a716:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a71a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a71c:	4620      	mov	r0, r4
 800a71e:	f001 feab 	bl	800c478 <_Bfree>
 800a722:	9907      	ldr	r1, [sp, #28]
 800a724:	4620      	mov	r0, r4
 800a726:	f001 fea7 	bl	800c478 <_Bfree>
 800a72a:	4631      	mov	r1, r6
 800a72c:	4620      	mov	r0, r4
 800a72e:	f001 fea3 	bl	800c478 <_Bfree>
 800a732:	4629      	mov	r1, r5
 800a734:	4620      	mov	r0, r4
 800a736:	f001 fe9f 	bl	800c478 <_Bfree>
 800a73a:	e613      	b.n	800a364 <_strtod_l+0x664>
 800a73c:	f1ba 0f00 	cmp.w	sl, #0
 800a740:	d11b      	bne.n	800a77a <_strtod_l+0xa7a>
 800a742:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a746:	b9f3      	cbnz	r3, 800a786 <_strtod_l+0xa86>
 800a748:	4b6b      	ldr	r3, [pc, #428]	; (800a8f8 <_strtod_l+0xbf8>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	4640      	mov	r0, r8
 800a74e:	4649      	mov	r1, r9
 800a750:	f7f6 f9c4 	bl	8000adc <__aeabi_dcmplt>
 800a754:	b9d0      	cbnz	r0, 800a78c <_strtod_l+0xa8c>
 800a756:	4640      	mov	r0, r8
 800a758:	4649      	mov	r1, r9
 800a75a:	4b6b      	ldr	r3, [pc, #428]	; (800a908 <_strtod_l+0xc08>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	f7f5 ff4b 	bl	80005f8 <__aeabi_dmul>
 800a762:	4680      	mov	r8, r0
 800a764:	4689      	mov	r9, r1
 800a766:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a76a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a76e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a770:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a774:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a778:	e79b      	b.n	800a6b2 <_strtod_l+0x9b2>
 800a77a:	f1ba 0f01 	cmp.w	sl, #1
 800a77e:	d102      	bne.n	800a786 <_strtod_l+0xa86>
 800a780:	2f00      	cmp	r7, #0
 800a782:	f43f ad7e 	beq.w	800a282 <_strtod_l+0x582>
 800a786:	4b61      	ldr	r3, [pc, #388]	; (800a90c <_strtod_l+0xc0c>)
 800a788:	2200      	movs	r2, #0
 800a78a:	e78c      	b.n	800a6a6 <_strtod_l+0x9a6>
 800a78c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a908 <_strtod_l+0xc08>
 800a790:	f04f 0800 	mov.w	r8, #0
 800a794:	e7e7      	b.n	800a766 <_strtod_l+0xa66>
 800a796:	4b5c      	ldr	r3, [pc, #368]	; (800a908 <_strtod_l+0xc08>)
 800a798:	4640      	mov	r0, r8
 800a79a:	4649      	mov	r1, r9
 800a79c:	2200      	movs	r2, #0
 800a79e:	f7f5 ff2b 	bl	80005f8 <__aeabi_dmul>
 800a7a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	4689      	mov	r9, r1
 800a7a8:	b933      	cbnz	r3, 800a7b8 <_strtod_l+0xab8>
 800a7aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7ae:	9012      	str	r0, [sp, #72]	; 0x48
 800a7b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a7b6:	e7dd      	b.n	800a774 <_strtod_l+0xa74>
 800a7b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a7bc:	e7f9      	b.n	800a7b2 <_strtod_l+0xab2>
 800a7be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a7c2:	9b04      	ldr	r3, [sp, #16]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1a8      	bne.n	800a71a <_strtod_l+0xa1a>
 800a7c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7ce:	0d1b      	lsrs	r3, r3, #20
 800a7d0:	051b      	lsls	r3, r3, #20
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d1a1      	bne.n	800a71a <_strtod_l+0xa1a>
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	4649      	mov	r1, r9
 800a7da:	f7f6 fa6d 	bl	8000cb8 <__aeabi_d2lz>
 800a7de:	f7f5 fedd 	bl	800059c <__aeabi_l2d>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	f7f5 fd4d 	bl	8000288 <__aeabi_dsub>
 800a7ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7f4:	ea43 030a 	orr.w	r3, r3, sl
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	4680      	mov	r8, r0
 800a7fc:	4689      	mov	r9, r1
 800a7fe:	d053      	beq.n	800a8a8 <_strtod_l+0xba8>
 800a800:	a335      	add	r3, pc, #212	; (adr r3, 800a8d8 <_strtod_l+0xbd8>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	f7f6 f969 	bl	8000adc <__aeabi_dcmplt>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f47f acce 	bne.w	800a1ac <_strtod_l+0x4ac>
 800a810:	a333      	add	r3, pc, #204	; (adr r3, 800a8e0 <_strtod_l+0xbe0>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	4640      	mov	r0, r8
 800a818:	4649      	mov	r1, r9
 800a81a:	f7f6 f97d 	bl	8000b18 <__aeabi_dcmpgt>
 800a81e:	2800      	cmp	r0, #0
 800a820:	f43f af7b 	beq.w	800a71a <_strtod_l+0xa1a>
 800a824:	e4c2      	b.n	800a1ac <_strtod_l+0x4ac>
 800a826:	9b04      	ldr	r3, [sp, #16]
 800a828:	b333      	cbz	r3, 800a878 <_strtod_l+0xb78>
 800a82a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a82c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a830:	d822      	bhi.n	800a878 <_strtod_l+0xb78>
 800a832:	a32d      	add	r3, pc, #180	; (adr r3, 800a8e8 <_strtod_l+0xbe8>)
 800a834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a838:	4640      	mov	r0, r8
 800a83a:	4649      	mov	r1, r9
 800a83c:	f7f6 f958 	bl	8000af0 <__aeabi_dcmple>
 800a840:	b1a0      	cbz	r0, 800a86c <_strtod_l+0xb6c>
 800a842:	4649      	mov	r1, r9
 800a844:	4640      	mov	r0, r8
 800a846:	f7f6 f9af 	bl	8000ba8 <__aeabi_d2uiz>
 800a84a:	2801      	cmp	r0, #1
 800a84c:	bf38      	it	cc
 800a84e:	2001      	movcc	r0, #1
 800a850:	f7f5 fe58 	bl	8000504 <__aeabi_ui2d>
 800a854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a856:	4680      	mov	r8, r0
 800a858:	4689      	mov	r9, r1
 800a85a:	bb13      	cbnz	r3, 800a8a2 <_strtod_l+0xba2>
 800a85c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a860:	9014      	str	r0, [sp, #80]	; 0x50
 800a862:	9315      	str	r3, [sp, #84]	; 0x54
 800a864:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a868:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a86c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a86e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a870:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a874:	1a9b      	subs	r3, r3, r2
 800a876:	930d      	str	r3, [sp, #52]	; 0x34
 800a878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a87c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a880:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a884:	f002 f924 	bl	800cad0 <__ulp>
 800a888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a88c:	ec53 2b10 	vmov	r2, r3, d0
 800a890:	f7f5 feb2 	bl	80005f8 <__aeabi_dmul>
 800a894:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a898:	f7f5 fcf8 	bl	800028c <__adddf3>
 800a89c:	4682      	mov	sl, r0
 800a89e:	468b      	mov	fp, r1
 800a8a0:	e78f      	b.n	800a7c2 <_strtod_l+0xac2>
 800a8a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a8a6:	e7dd      	b.n	800a864 <_strtod_l+0xb64>
 800a8a8:	a311      	add	r3, pc, #68	; (adr r3, 800a8f0 <_strtod_l+0xbf0>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f6 f915 	bl	8000adc <__aeabi_dcmplt>
 800a8b2:	e7b4      	b.n	800a81e <_strtod_l+0xb1e>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	930e      	str	r3, [sp, #56]	; 0x38
 800a8b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a8ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	f7ff ba65 	b.w	8009d8c <_strtod_l+0x8c>
 800a8c2:	2b65      	cmp	r3, #101	; 0x65
 800a8c4:	f43f ab5d 	beq.w	8009f82 <_strtod_l+0x282>
 800a8c8:	2b45      	cmp	r3, #69	; 0x45
 800a8ca:	f43f ab5a 	beq.w	8009f82 <_strtod_l+0x282>
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f7ff bb92 	b.w	8009ff8 <_strtod_l+0x2f8>
 800a8d4:	f3af 8000 	nop.w
 800a8d8:	94a03595 	.word	0x94a03595
 800a8dc:	3fdfffff 	.word	0x3fdfffff
 800a8e0:	35afe535 	.word	0x35afe535
 800a8e4:	3fe00000 	.word	0x3fe00000
 800a8e8:	ffc00000 	.word	0xffc00000
 800a8ec:	41dfffff 	.word	0x41dfffff
 800a8f0:	94a03595 	.word	0x94a03595
 800a8f4:	3fcfffff 	.word	0x3fcfffff
 800a8f8:	3ff00000 	.word	0x3ff00000
 800a8fc:	7ff00000 	.word	0x7ff00000
 800a900:	7fe00000 	.word	0x7fe00000
 800a904:	7c9fffff 	.word	0x7c9fffff
 800a908:	3fe00000 	.word	0x3fe00000
 800a90c:	bff00000 	.word	0xbff00000
 800a910:	7fefffff 	.word	0x7fefffff

0800a914 <_strtod_r>:
 800a914:	4b01      	ldr	r3, [pc, #4]	; (800a91c <_strtod_r+0x8>)
 800a916:	f7ff b9f3 	b.w	8009d00 <_strtod_l>
 800a91a:	bf00      	nop
 800a91c:	20000078 	.word	0x20000078

0800a920 <_strtol_l.isra.0>:
 800a920:	2b01      	cmp	r3, #1
 800a922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a926:	d001      	beq.n	800a92c <_strtol_l.isra.0+0xc>
 800a928:	2b24      	cmp	r3, #36	; 0x24
 800a92a:	d906      	bls.n	800a93a <_strtol_l.isra.0+0x1a>
 800a92c:	f7fe fa5e 	bl	8008dec <__errno>
 800a930:	2316      	movs	r3, #22
 800a932:	6003      	str	r3, [r0, #0]
 800a934:	2000      	movs	r0, #0
 800a936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a93a:	4f3a      	ldr	r7, [pc, #232]	; (800aa24 <_strtol_l.isra.0+0x104>)
 800a93c:	468e      	mov	lr, r1
 800a93e:	4676      	mov	r6, lr
 800a940:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a944:	5de5      	ldrb	r5, [r4, r7]
 800a946:	f015 0508 	ands.w	r5, r5, #8
 800a94a:	d1f8      	bne.n	800a93e <_strtol_l.isra.0+0x1e>
 800a94c:	2c2d      	cmp	r4, #45	; 0x2d
 800a94e:	d134      	bne.n	800a9ba <_strtol_l.isra.0+0x9a>
 800a950:	f89e 4000 	ldrb.w	r4, [lr]
 800a954:	f04f 0801 	mov.w	r8, #1
 800a958:	f106 0e02 	add.w	lr, r6, #2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d05c      	beq.n	800aa1a <_strtol_l.isra.0+0xfa>
 800a960:	2b10      	cmp	r3, #16
 800a962:	d10c      	bne.n	800a97e <_strtol_l.isra.0+0x5e>
 800a964:	2c30      	cmp	r4, #48	; 0x30
 800a966:	d10a      	bne.n	800a97e <_strtol_l.isra.0+0x5e>
 800a968:	f89e 4000 	ldrb.w	r4, [lr]
 800a96c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a970:	2c58      	cmp	r4, #88	; 0x58
 800a972:	d14d      	bne.n	800aa10 <_strtol_l.isra.0+0xf0>
 800a974:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a978:	2310      	movs	r3, #16
 800a97a:	f10e 0e02 	add.w	lr, lr, #2
 800a97e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a982:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a986:	2600      	movs	r6, #0
 800a988:	fbbc f9f3 	udiv	r9, ip, r3
 800a98c:	4635      	mov	r5, r6
 800a98e:	fb03 ca19 	mls	sl, r3, r9, ip
 800a992:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a996:	2f09      	cmp	r7, #9
 800a998:	d818      	bhi.n	800a9cc <_strtol_l.isra.0+0xac>
 800a99a:	463c      	mov	r4, r7
 800a99c:	42a3      	cmp	r3, r4
 800a99e:	dd24      	ble.n	800a9ea <_strtol_l.isra.0+0xca>
 800a9a0:	2e00      	cmp	r6, #0
 800a9a2:	db1f      	blt.n	800a9e4 <_strtol_l.isra.0+0xc4>
 800a9a4:	45a9      	cmp	r9, r5
 800a9a6:	d31d      	bcc.n	800a9e4 <_strtol_l.isra.0+0xc4>
 800a9a8:	d101      	bne.n	800a9ae <_strtol_l.isra.0+0x8e>
 800a9aa:	45a2      	cmp	sl, r4
 800a9ac:	db1a      	blt.n	800a9e4 <_strtol_l.isra.0+0xc4>
 800a9ae:	fb05 4503 	mla	r5, r5, r3, r4
 800a9b2:	2601      	movs	r6, #1
 800a9b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a9b8:	e7eb      	b.n	800a992 <_strtol_l.isra.0+0x72>
 800a9ba:	2c2b      	cmp	r4, #43	; 0x2b
 800a9bc:	bf08      	it	eq
 800a9be:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a9c2:	46a8      	mov	r8, r5
 800a9c4:	bf08      	it	eq
 800a9c6:	f106 0e02 	addeq.w	lr, r6, #2
 800a9ca:	e7c7      	b.n	800a95c <_strtol_l.isra.0+0x3c>
 800a9cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a9d0:	2f19      	cmp	r7, #25
 800a9d2:	d801      	bhi.n	800a9d8 <_strtol_l.isra.0+0xb8>
 800a9d4:	3c37      	subs	r4, #55	; 0x37
 800a9d6:	e7e1      	b.n	800a99c <_strtol_l.isra.0+0x7c>
 800a9d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a9dc:	2f19      	cmp	r7, #25
 800a9de:	d804      	bhi.n	800a9ea <_strtol_l.isra.0+0xca>
 800a9e0:	3c57      	subs	r4, #87	; 0x57
 800a9e2:	e7db      	b.n	800a99c <_strtol_l.isra.0+0x7c>
 800a9e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a9e8:	e7e4      	b.n	800a9b4 <_strtol_l.isra.0+0x94>
 800a9ea:	2e00      	cmp	r6, #0
 800a9ec:	da05      	bge.n	800a9fa <_strtol_l.isra.0+0xda>
 800a9ee:	2322      	movs	r3, #34	; 0x22
 800a9f0:	6003      	str	r3, [r0, #0]
 800a9f2:	4665      	mov	r5, ip
 800a9f4:	b942      	cbnz	r2, 800aa08 <_strtol_l.isra.0+0xe8>
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	e79d      	b.n	800a936 <_strtol_l.isra.0+0x16>
 800a9fa:	f1b8 0f00 	cmp.w	r8, #0
 800a9fe:	d000      	beq.n	800aa02 <_strtol_l.isra.0+0xe2>
 800aa00:	426d      	negs	r5, r5
 800aa02:	2a00      	cmp	r2, #0
 800aa04:	d0f7      	beq.n	800a9f6 <_strtol_l.isra.0+0xd6>
 800aa06:	b10e      	cbz	r6, 800aa0c <_strtol_l.isra.0+0xec>
 800aa08:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800aa0c:	6011      	str	r1, [r2, #0]
 800aa0e:	e7f2      	b.n	800a9f6 <_strtol_l.isra.0+0xd6>
 800aa10:	2430      	movs	r4, #48	; 0x30
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1b3      	bne.n	800a97e <_strtol_l.isra.0+0x5e>
 800aa16:	2308      	movs	r3, #8
 800aa18:	e7b1      	b.n	800a97e <_strtol_l.isra.0+0x5e>
 800aa1a:	2c30      	cmp	r4, #48	; 0x30
 800aa1c:	d0a4      	beq.n	800a968 <_strtol_l.isra.0+0x48>
 800aa1e:	230a      	movs	r3, #10
 800aa20:	e7ad      	b.n	800a97e <_strtol_l.isra.0+0x5e>
 800aa22:	bf00      	nop
 800aa24:	0800db61 	.word	0x0800db61

0800aa28 <_strtol_r>:
 800aa28:	f7ff bf7a 	b.w	800a920 <_strtol_l.isra.0>

0800aa2c <__swbuf_r>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	460e      	mov	r6, r1
 800aa30:	4614      	mov	r4, r2
 800aa32:	4605      	mov	r5, r0
 800aa34:	b118      	cbz	r0, 800aa3e <__swbuf_r+0x12>
 800aa36:	6983      	ldr	r3, [r0, #24]
 800aa38:	b90b      	cbnz	r3, 800aa3e <__swbuf_r+0x12>
 800aa3a:	f001 f84b 	bl	800bad4 <__sinit>
 800aa3e:	4b21      	ldr	r3, [pc, #132]	; (800aac4 <__swbuf_r+0x98>)
 800aa40:	429c      	cmp	r4, r3
 800aa42:	d12b      	bne.n	800aa9c <__swbuf_r+0x70>
 800aa44:	686c      	ldr	r4, [r5, #4]
 800aa46:	69a3      	ldr	r3, [r4, #24]
 800aa48:	60a3      	str	r3, [r4, #8]
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	071a      	lsls	r2, r3, #28
 800aa4e:	d52f      	bpl.n	800aab0 <__swbuf_r+0x84>
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	b36b      	cbz	r3, 800aab0 <__swbuf_r+0x84>
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	6820      	ldr	r0, [r4, #0]
 800aa58:	1ac0      	subs	r0, r0, r3
 800aa5a:	6963      	ldr	r3, [r4, #20]
 800aa5c:	b2f6      	uxtb	r6, r6
 800aa5e:	4283      	cmp	r3, r0
 800aa60:	4637      	mov	r7, r6
 800aa62:	dc04      	bgt.n	800aa6e <__swbuf_r+0x42>
 800aa64:	4621      	mov	r1, r4
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 ffa0 	bl	800b9ac <_fflush_r>
 800aa6c:	bb30      	cbnz	r0, 800aabc <__swbuf_r+0x90>
 800aa6e:	68a3      	ldr	r3, [r4, #8]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	60a3      	str	r3, [r4, #8]
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	6022      	str	r2, [r4, #0]
 800aa7a:	701e      	strb	r6, [r3, #0]
 800aa7c:	6963      	ldr	r3, [r4, #20]
 800aa7e:	3001      	adds	r0, #1
 800aa80:	4283      	cmp	r3, r0
 800aa82:	d004      	beq.n	800aa8e <__swbuf_r+0x62>
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	07db      	lsls	r3, r3, #31
 800aa88:	d506      	bpl.n	800aa98 <__swbuf_r+0x6c>
 800aa8a:	2e0a      	cmp	r6, #10
 800aa8c:	d104      	bne.n	800aa98 <__swbuf_r+0x6c>
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4628      	mov	r0, r5
 800aa92:	f000 ff8b 	bl	800b9ac <_fflush_r>
 800aa96:	b988      	cbnz	r0, 800aabc <__swbuf_r+0x90>
 800aa98:	4638      	mov	r0, r7
 800aa9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	; (800aac8 <__swbuf_r+0x9c>)
 800aa9e:	429c      	cmp	r4, r3
 800aaa0:	d101      	bne.n	800aaa6 <__swbuf_r+0x7a>
 800aaa2:	68ac      	ldr	r4, [r5, #8]
 800aaa4:	e7cf      	b.n	800aa46 <__swbuf_r+0x1a>
 800aaa6:	4b09      	ldr	r3, [pc, #36]	; (800aacc <__swbuf_r+0xa0>)
 800aaa8:	429c      	cmp	r4, r3
 800aaaa:	bf08      	it	eq
 800aaac:	68ec      	ldreq	r4, [r5, #12]
 800aaae:	e7ca      	b.n	800aa46 <__swbuf_r+0x1a>
 800aab0:	4621      	mov	r1, r4
 800aab2:	4628      	mov	r0, r5
 800aab4:	f000 f80c 	bl	800aad0 <__swsetup_r>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d0cb      	beq.n	800aa54 <__swbuf_r+0x28>
 800aabc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aac0:	e7ea      	b.n	800aa98 <__swbuf_r+0x6c>
 800aac2:	bf00      	nop
 800aac4:	0800dd18 	.word	0x0800dd18
 800aac8:	0800dd38 	.word	0x0800dd38
 800aacc:	0800dcf8 	.word	0x0800dcf8

0800aad0 <__swsetup_r>:
 800aad0:	4b32      	ldr	r3, [pc, #200]	; (800ab9c <__swsetup_r+0xcc>)
 800aad2:	b570      	push	{r4, r5, r6, lr}
 800aad4:	681d      	ldr	r5, [r3, #0]
 800aad6:	4606      	mov	r6, r0
 800aad8:	460c      	mov	r4, r1
 800aada:	b125      	cbz	r5, 800aae6 <__swsetup_r+0x16>
 800aadc:	69ab      	ldr	r3, [r5, #24]
 800aade:	b913      	cbnz	r3, 800aae6 <__swsetup_r+0x16>
 800aae0:	4628      	mov	r0, r5
 800aae2:	f000 fff7 	bl	800bad4 <__sinit>
 800aae6:	4b2e      	ldr	r3, [pc, #184]	; (800aba0 <__swsetup_r+0xd0>)
 800aae8:	429c      	cmp	r4, r3
 800aaea:	d10f      	bne.n	800ab0c <__swsetup_r+0x3c>
 800aaec:	686c      	ldr	r4, [r5, #4]
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaf4:	0719      	lsls	r1, r3, #28
 800aaf6:	d42c      	bmi.n	800ab52 <__swsetup_r+0x82>
 800aaf8:	06dd      	lsls	r5, r3, #27
 800aafa:	d411      	bmi.n	800ab20 <__swsetup_r+0x50>
 800aafc:	2309      	movs	r3, #9
 800aafe:	6033      	str	r3, [r6, #0]
 800ab00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab0a:	e03e      	b.n	800ab8a <__swsetup_r+0xba>
 800ab0c:	4b25      	ldr	r3, [pc, #148]	; (800aba4 <__swsetup_r+0xd4>)
 800ab0e:	429c      	cmp	r4, r3
 800ab10:	d101      	bne.n	800ab16 <__swsetup_r+0x46>
 800ab12:	68ac      	ldr	r4, [r5, #8]
 800ab14:	e7eb      	b.n	800aaee <__swsetup_r+0x1e>
 800ab16:	4b24      	ldr	r3, [pc, #144]	; (800aba8 <__swsetup_r+0xd8>)
 800ab18:	429c      	cmp	r4, r3
 800ab1a:	bf08      	it	eq
 800ab1c:	68ec      	ldreq	r4, [r5, #12]
 800ab1e:	e7e6      	b.n	800aaee <__swsetup_r+0x1e>
 800ab20:	0758      	lsls	r0, r3, #29
 800ab22:	d512      	bpl.n	800ab4a <__swsetup_r+0x7a>
 800ab24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab26:	b141      	cbz	r1, 800ab3a <__swsetup_r+0x6a>
 800ab28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	d002      	beq.n	800ab36 <__swsetup_r+0x66>
 800ab30:	4630      	mov	r0, r6
 800ab32:	f002 f92b 	bl	800cd8c <_free_r>
 800ab36:	2300      	movs	r3, #0
 800ab38:	6363      	str	r3, [r4, #52]	; 0x34
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	2300      	movs	r3, #0
 800ab44:	6063      	str	r3, [r4, #4]
 800ab46:	6923      	ldr	r3, [r4, #16]
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	f043 0308 	orr.w	r3, r3, #8
 800ab50:	81a3      	strh	r3, [r4, #12]
 800ab52:	6923      	ldr	r3, [r4, #16]
 800ab54:	b94b      	cbnz	r3, 800ab6a <__swsetup_r+0x9a>
 800ab56:	89a3      	ldrh	r3, [r4, #12]
 800ab58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab60:	d003      	beq.n	800ab6a <__swsetup_r+0x9a>
 800ab62:	4621      	mov	r1, r4
 800ab64:	4630      	mov	r0, r6
 800ab66:	f001 fbed 	bl	800c344 <__smakebuf_r>
 800ab6a:	89a0      	ldrh	r0, [r4, #12]
 800ab6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab70:	f010 0301 	ands.w	r3, r0, #1
 800ab74:	d00a      	beq.n	800ab8c <__swsetup_r+0xbc>
 800ab76:	2300      	movs	r3, #0
 800ab78:	60a3      	str	r3, [r4, #8]
 800ab7a:	6963      	ldr	r3, [r4, #20]
 800ab7c:	425b      	negs	r3, r3
 800ab7e:	61a3      	str	r3, [r4, #24]
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	b943      	cbnz	r3, 800ab96 <__swsetup_r+0xc6>
 800ab84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab88:	d1ba      	bne.n	800ab00 <__swsetup_r+0x30>
 800ab8a:	bd70      	pop	{r4, r5, r6, pc}
 800ab8c:	0781      	lsls	r1, r0, #30
 800ab8e:	bf58      	it	pl
 800ab90:	6963      	ldrpl	r3, [r4, #20]
 800ab92:	60a3      	str	r3, [r4, #8]
 800ab94:	e7f4      	b.n	800ab80 <__swsetup_r+0xb0>
 800ab96:	2000      	movs	r0, #0
 800ab98:	e7f7      	b.n	800ab8a <__swsetup_r+0xba>
 800ab9a:	bf00      	nop
 800ab9c:	20000010 	.word	0x20000010
 800aba0:	0800dd18 	.word	0x0800dd18
 800aba4:	0800dd38 	.word	0x0800dd38
 800aba8:	0800dcf8 	.word	0x0800dcf8

0800abac <quorem>:
 800abac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb0:	6903      	ldr	r3, [r0, #16]
 800abb2:	690c      	ldr	r4, [r1, #16]
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	4607      	mov	r7, r0
 800abb8:	f2c0 8081 	blt.w	800acbe <quorem+0x112>
 800abbc:	3c01      	subs	r4, #1
 800abbe:	f101 0814 	add.w	r8, r1, #20
 800abc2:	f100 0514 	add.w	r5, r0, #20
 800abc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abd4:	3301      	adds	r3, #1
 800abd6:	429a      	cmp	r2, r3
 800abd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800abdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abe0:	fbb2 f6f3 	udiv	r6, r2, r3
 800abe4:	d331      	bcc.n	800ac4a <quorem+0x9e>
 800abe6:	f04f 0e00 	mov.w	lr, #0
 800abea:	4640      	mov	r0, r8
 800abec:	46ac      	mov	ip, r5
 800abee:	46f2      	mov	sl, lr
 800abf0:	f850 2b04 	ldr.w	r2, [r0], #4
 800abf4:	b293      	uxth	r3, r2
 800abf6:	fb06 e303 	mla	r3, r6, r3, lr
 800abfa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	ebaa 0303 	sub.w	r3, sl, r3
 800ac04:	0c12      	lsrs	r2, r2, #16
 800ac06:	f8dc a000 	ldr.w	sl, [ip]
 800ac0a:	fb06 e202 	mla	r2, r6, r2, lr
 800ac0e:	fa13 f38a 	uxtah	r3, r3, sl
 800ac12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac16:	fa1f fa82 	uxth.w	sl, r2
 800ac1a:	f8dc 2000 	ldr.w	r2, [ip]
 800ac1e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ac22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac2c:	4581      	cmp	r9, r0
 800ac2e:	f84c 3b04 	str.w	r3, [ip], #4
 800ac32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac36:	d2db      	bcs.n	800abf0 <quorem+0x44>
 800ac38:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac3c:	b92b      	cbnz	r3, 800ac4a <quorem+0x9e>
 800ac3e:	9b01      	ldr	r3, [sp, #4]
 800ac40:	3b04      	subs	r3, #4
 800ac42:	429d      	cmp	r5, r3
 800ac44:	461a      	mov	r2, r3
 800ac46:	d32e      	bcc.n	800aca6 <quorem+0xfa>
 800ac48:	613c      	str	r4, [r7, #16]
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	f001 fe9c 	bl	800c988 <__mcmp>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	db24      	blt.n	800ac9e <quorem+0xf2>
 800ac54:	3601      	adds	r6, #1
 800ac56:	4628      	mov	r0, r5
 800ac58:	f04f 0c00 	mov.w	ip, #0
 800ac5c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac60:	f8d0 e000 	ldr.w	lr, [r0]
 800ac64:	b293      	uxth	r3, r2
 800ac66:	ebac 0303 	sub.w	r3, ip, r3
 800ac6a:	0c12      	lsrs	r2, r2, #16
 800ac6c:	fa13 f38e 	uxtah	r3, r3, lr
 800ac70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac7e:	45c1      	cmp	r9, r8
 800ac80:	f840 3b04 	str.w	r3, [r0], #4
 800ac84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac88:	d2e8      	bcs.n	800ac5c <quorem+0xb0>
 800ac8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac92:	b922      	cbnz	r2, 800ac9e <quorem+0xf2>
 800ac94:	3b04      	subs	r3, #4
 800ac96:	429d      	cmp	r5, r3
 800ac98:	461a      	mov	r2, r3
 800ac9a:	d30a      	bcc.n	800acb2 <quorem+0x106>
 800ac9c:	613c      	str	r4, [r7, #16]
 800ac9e:	4630      	mov	r0, r6
 800aca0:	b003      	add	sp, #12
 800aca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca6:	6812      	ldr	r2, [r2, #0]
 800aca8:	3b04      	subs	r3, #4
 800acaa:	2a00      	cmp	r2, #0
 800acac:	d1cc      	bne.n	800ac48 <quorem+0x9c>
 800acae:	3c01      	subs	r4, #1
 800acb0:	e7c7      	b.n	800ac42 <quorem+0x96>
 800acb2:	6812      	ldr	r2, [r2, #0]
 800acb4:	3b04      	subs	r3, #4
 800acb6:	2a00      	cmp	r2, #0
 800acb8:	d1f0      	bne.n	800ac9c <quorem+0xf0>
 800acba:	3c01      	subs	r4, #1
 800acbc:	e7eb      	b.n	800ac96 <quorem+0xea>
 800acbe:	2000      	movs	r0, #0
 800acc0:	e7ee      	b.n	800aca0 <quorem+0xf4>
 800acc2:	0000      	movs	r0, r0
 800acc4:	0000      	movs	r0, r0
	...

0800acc8 <_dtoa_r>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	ed2d 8b02 	vpush	{d8}
 800acd0:	ec57 6b10 	vmov	r6, r7, d0
 800acd4:	b095      	sub	sp, #84	; 0x54
 800acd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800acd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800acdc:	9105      	str	r1, [sp, #20]
 800acde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ace2:	4604      	mov	r4, r0
 800ace4:	9209      	str	r2, [sp, #36]	; 0x24
 800ace6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ace8:	b975      	cbnz	r5, 800ad08 <_dtoa_r+0x40>
 800acea:	2010      	movs	r0, #16
 800acec:	f001 fb6a 	bl	800c3c4 <malloc>
 800acf0:	4602      	mov	r2, r0
 800acf2:	6260      	str	r0, [r4, #36]	; 0x24
 800acf4:	b920      	cbnz	r0, 800ad00 <_dtoa_r+0x38>
 800acf6:	4bb2      	ldr	r3, [pc, #712]	; (800afc0 <_dtoa_r+0x2f8>)
 800acf8:	21ea      	movs	r1, #234	; 0xea
 800acfa:	48b2      	ldr	r0, [pc, #712]	; (800afc4 <_dtoa_r+0x2fc>)
 800acfc:	f002 fc34 	bl	800d568 <__assert_func>
 800ad00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad04:	6005      	str	r5, [r0, #0]
 800ad06:	60c5      	str	r5, [r0, #12]
 800ad08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad0a:	6819      	ldr	r1, [r3, #0]
 800ad0c:	b151      	cbz	r1, 800ad24 <_dtoa_r+0x5c>
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	604a      	str	r2, [r1, #4]
 800ad12:	2301      	movs	r3, #1
 800ad14:	4093      	lsls	r3, r2
 800ad16:	608b      	str	r3, [r1, #8]
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f001 fbad 	bl	800c478 <_Bfree>
 800ad1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad20:	2200      	movs	r2, #0
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	1e3b      	subs	r3, r7, #0
 800ad26:	bfb9      	ittee	lt
 800ad28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad2c:	9303      	strlt	r3, [sp, #12]
 800ad2e:	2300      	movge	r3, #0
 800ad30:	f8c8 3000 	strge.w	r3, [r8]
 800ad34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ad38:	4ba3      	ldr	r3, [pc, #652]	; (800afc8 <_dtoa_r+0x300>)
 800ad3a:	bfbc      	itt	lt
 800ad3c:	2201      	movlt	r2, #1
 800ad3e:	f8c8 2000 	strlt.w	r2, [r8]
 800ad42:	ea33 0309 	bics.w	r3, r3, r9
 800ad46:	d11b      	bne.n	800ad80 <_dtoa_r+0xb8>
 800ad48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad4a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad4e:	6013      	str	r3, [r2, #0]
 800ad50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad54:	4333      	orrs	r3, r6
 800ad56:	f000 857a 	beq.w	800b84e <_dtoa_r+0xb86>
 800ad5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad5c:	b963      	cbnz	r3, 800ad78 <_dtoa_r+0xb0>
 800ad5e:	4b9b      	ldr	r3, [pc, #620]	; (800afcc <_dtoa_r+0x304>)
 800ad60:	e024      	b.n	800adac <_dtoa_r+0xe4>
 800ad62:	4b9b      	ldr	r3, [pc, #620]	; (800afd0 <_dtoa_r+0x308>)
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	3308      	adds	r3, #8
 800ad68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	9800      	ldr	r0, [sp, #0]
 800ad6e:	b015      	add	sp, #84	; 0x54
 800ad70:	ecbd 8b02 	vpop	{d8}
 800ad74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad78:	4b94      	ldr	r3, [pc, #592]	; (800afcc <_dtoa_r+0x304>)
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	3303      	adds	r3, #3
 800ad7e:	e7f3      	b.n	800ad68 <_dtoa_r+0xa0>
 800ad80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad84:	2200      	movs	r2, #0
 800ad86:	ec51 0b17 	vmov	r0, r1, d7
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ad90:	f7f5 fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad94:	4680      	mov	r8, r0
 800ad96:	b158      	cbz	r0, 800adb0 <_dtoa_r+0xe8>
 800ad98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	6013      	str	r3, [r2, #0]
 800ad9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 8551 	beq.w	800b848 <_dtoa_r+0xb80>
 800ada6:	488b      	ldr	r0, [pc, #556]	; (800afd4 <_dtoa_r+0x30c>)
 800ada8:	6018      	str	r0, [r3, #0]
 800adaa:	1e43      	subs	r3, r0, #1
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	e7dd      	b.n	800ad6c <_dtoa_r+0xa4>
 800adb0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800adb4:	aa12      	add	r2, sp, #72	; 0x48
 800adb6:	a913      	add	r1, sp, #76	; 0x4c
 800adb8:	4620      	mov	r0, r4
 800adba:	f001 ff05 	bl	800cbc8 <__d2b>
 800adbe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800adc2:	4683      	mov	fp, r0
 800adc4:	2d00      	cmp	r5, #0
 800adc6:	d07c      	beq.n	800aec2 <_dtoa_r+0x1fa>
 800adc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800adce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800add2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800add6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800adda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800adde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ade2:	4b7d      	ldr	r3, [pc, #500]	; (800afd8 <_dtoa_r+0x310>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	4630      	mov	r0, r6
 800ade8:	4639      	mov	r1, r7
 800adea:	f7f5 fa4d 	bl	8000288 <__aeabi_dsub>
 800adee:	a36e      	add	r3, pc, #440	; (adr r3, 800afa8 <_dtoa_r+0x2e0>)
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	f7f5 fc00 	bl	80005f8 <__aeabi_dmul>
 800adf8:	a36d      	add	r3, pc, #436	; (adr r3, 800afb0 <_dtoa_r+0x2e8>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	f7f5 fa45 	bl	800028c <__adddf3>
 800ae02:	4606      	mov	r6, r0
 800ae04:	4628      	mov	r0, r5
 800ae06:	460f      	mov	r7, r1
 800ae08:	f7f5 fb8c 	bl	8000524 <__aeabi_i2d>
 800ae0c:	a36a      	add	r3, pc, #424	; (adr r3, 800afb8 <_dtoa_r+0x2f0>)
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	f7f5 fbf1 	bl	80005f8 <__aeabi_dmul>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	4639      	mov	r1, r7
 800ae1e:	f7f5 fa35 	bl	800028c <__adddf3>
 800ae22:	4606      	mov	r6, r0
 800ae24:	460f      	mov	r7, r1
 800ae26:	f7f5 fe97 	bl	8000b58 <__aeabi_d2iz>
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	4682      	mov	sl, r0
 800ae2e:	2300      	movs	r3, #0
 800ae30:	4630      	mov	r0, r6
 800ae32:	4639      	mov	r1, r7
 800ae34:	f7f5 fe52 	bl	8000adc <__aeabi_dcmplt>
 800ae38:	b148      	cbz	r0, 800ae4e <_dtoa_r+0x186>
 800ae3a:	4650      	mov	r0, sl
 800ae3c:	f7f5 fb72 	bl	8000524 <__aeabi_i2d>
 800ae40:	4632      	mov	r2, r6
 800ae42:	463b      	mov	r3, r7
 800ae44:	f7f5 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae48:	b908      	cbnz	r0, 800ae4e <_dtoa_r+0x186>
 800ae4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ae4e:	f1ba 0f16 	cmp.w	sl, #22
 800ae52:	d854      	bhi.n	800aefe <_dtoa_r+0x236>
 800ae54:	4b61      	ldr	r3, [pc, #388]	; (800afdc <_dtoa_r+0x314>)
 800ae56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae62:	f7f5 fe3b 	bl	8000adc <__aeabi_dcmplt>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d04b      	beq.n	800af02 <_dtoa_r+0x23a>
 800ae6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ae6e:	2300      	movs	r3, #0
 800ae70:	930e      	str	r3, [sp, #56]	; 0x38
 800ae72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae74:	1b5d      	subs	r5, r3, r5
 800ae76:	1e6b      	subs	r3, r5, #1
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	bf43      	ittte	mi
 800ae7c:	2300      	movmi	r3, #0
 800ae7e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ae82:	9304      	strmi	r3, [sp, #16]
 800ae84:	f04f 0800 	movpl.w	r8, #0
 800ae88:	f1ba 0f00 	cmp.w	sl, #0
 800ae8c:	db3b      	blt.n	800af06 <_dtoa_r+0x23e>
 800ae8e:	9b04      	ldr	r3, [sp, #16]
 800ae90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ae94:	4453      	add	r3, sl
 800ae96:	9304      	str	r3, [sp, #16]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	9306      	str	r3, [sp, #24]
 800ae9c:	9b05      	ldr	r3, [sp, #20]
 800ae9e:	2b09      	cmp	r3, #9
 800aea0:	d869      	bhi.n	800af76 <_dtoa_r+0x2ae>
 800aea2:	2b05      	cmp	r3, #5
 800aea4:	bfc4      	itt	gt
 800aea6:	3b04      	subgt	r3, #4
 800aea8:	9305      	strgt	r3, [sp, #20]
 800aeaa:	9b05      	ldr	r3, [sp, #20]
 800aeac:	f1a3 0302 	sub.w	r3, r3, #2
 800aeb0:	bfcc      	ite	gt
 800aeb2:	2500      	movgt	r5, #0
 800aeb4:	2501      	movle	r5, #1
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d869      	bhi.n	800af8e <_dtoa_r+0x2c6>
 800aeba:	e8df f003 	tbb	[pc, r3]
 800aebe:	4e2c      	.short	0x4e2c
 800aec0:	5a4c      	.short	0x5a4c
 800aec2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800aec6:	441d      	add	r5, r3
 800aec8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aecc:	2b20      	cmp	r3, #32
 800aece:	bfc1      	itttt	gt
 800aed0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aed4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aed8:	fa09 f303 	lslgt.w	r3, r9, r3
 800aedc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aee0:	bfda      	itte	le
 800aee2:	f1c3 0320 	rsble	r3, r3, #32
 800aee6:	fa06 f003 	lslle.w	r0, r6, r3
 800aeea:	4318      	orrgt	r0, r3
 800aeec:	f7f5 fb0a 	bl	8000504 <__aeabi_ui2d>
 800aef0:	2301      	movs	r3, #1
 800aef2:	4606      	mov	r6, r0
 800aef4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aef8:	3d01      	subs	r5, #1
 800aefa:	9310      	str	r3, [sp, #64]	; 0x40
 800aefc:	e771      	b.n	800ade2 <_dtoa_r+0x11a>
 800aefe:	2301      	movs	r3, #1
 800af00:	e7b6      	b.n	800ae70 <_dtoa_r+0x1a8>
 800af02:	900e      	str	r0, [sp, #56]	; 0x38
 800af04:	e7b5      	b.n	800ae72 <_dtoa_r+0x1aa>
 800af06:	f1ca 0300 	rsb	r3, sl, #0
 800af0a:	9306      	str	r3, [sp, #24]
 800af0c:	2300      	movs	r3, #0
 800af0e:	eba8 080a 	sub.w	r8, r8, sl
 800af12:	930d      	str	r3, [sp, #52]	; 0x34
 800af14:	e7c2      	b.n	800ae9c <_dtoa_r+0x1d4>
 800af16:	2300      	movs	r3, #0
 800af18:	9308      	str	r3, [sp, #32]
 800af1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	dc39      	bgt.n	800af94 <_dtoa_r+0x2cc>
 800af20:	f04f 0901 	mov.w	r9, #1
 800af24:	f8cd 9004 	str.w	r9, [sp, #4]
 800af28:	464b      	mov	r3, r9
 800af2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800af2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af30:	2200      	movs	r2, #0
 800af32:	6042      	str	r2, [r0, #4]
 800af34:	2204      	movs	r2, #4
 800af36:	f102 0614 	add.w	r6, r2, #20
 800af3a:	429e      	cmp	r6, r3
 800af3c:	6841      	ldr	r1, [r0, #4]
 800af3e:	d92f      	bls.n	800afa0 <_dtoa_r+0x2d8>
 800af40:	4620      	mov	r0, r4
 800af42:	f001 fa59 	bl	800c3f8 <_Balloc>
 800af46:	9000      	str	r0, [sp, #0]
 800af48:	2800      	cmp	r0, #0
 800af4a:	d14b      	bne.n	800afe4 <_dtoa_r+0x31c>
 800af4c:	4b24      	ldr	r3, [pc, #144]	; (800afe0 <_dtoa_r+0x318>)
 800af4e:	4602      	mov	r2, r0
 800af50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800af54:	e6d1      	b.n	800acfa <_dtoa_r+0x32>
 800af56:	2301      	movs	r3, #1
 800af58:	e7de      	b.n	800af18 <_dtoa_r+0x250>
 800af5a:	2300      	movs	r3, #0
 800af5c:	9308      	str	r3, [sp, #32]
 800af5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af60:	eb0a 0903 	add.w	r9, sl, r3
 800af64:	f109 0301 	add.w	r3, r9, #1
 800af68:	2b01      	cmp	r3, #1
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	bfb8      	it	lt
 800af6e:	2301      	movlt	r3, #1
 800af70:	e7dd      	b.n	800af2e <_dtoa_r+0x266>
 800af72:	2301      	movs	r3, #1
 800af74:	e7f2      	b.n	800af5c <_dtoa_r+0x294>
 800af76:	2501      	movs	r5, #1
 800af78:	2300      	movs	r3, #0
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	9508      	str	r5, [sp, #32]
 800af7e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800af82:	2200      	movs	r2, #0
 800af84:	f8cd 9004 	str.w	r9, [sp, #4]
 800af88:	2312      	movs	r3, #18
 800af8a:	9209      	str	r2, [sp, #36]	; 0x24
 800af8c:	e7cf      	b.n	800af2e <_dtoa_r+0x266>
 800af8e:	2301      	movs	r3, #1
 800af90:	9308      	str	r3, [sp, #32]
 800af92:	e7f4      	b.n	800af7e <_dtoa_r+0x2b6>
 800af94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800af98:	f8cd 9004 	str.w	r9, [sp, #4]
 800af9c:	464b      	mov	r3, r9
 800af9e:	e7c6      	b.n	800af2e <_dtoa_r+0x266>
 800afa0:	3101      	adds	r1, #1
 800afa2:	6041      	str	r1, [r0, #4]
 800afa4:	0052      	lsls	r2, r2, #1
 800afa6:	e7c6      	b.n	800af36 <_dtoa_r+0x26e>
 800afa8:	636f4361 	.word	0x636f4361
 800afac:	3fd287a7 	.word	0x3fd287a7
 800afb0:	8b60c8b3 	.word	0x8b60c8b3
 800afb4:	3fc68a28 	.word	0x3fc68a28
 800afb8:	509f79fb 	.word	0x509f79fb
 800afbc:	3fd34413 	.word	0x3fd34413
 800afc0:	0800dc6e 	.word	0x0800dc6e
 800afc4:	0800dc85 	.word	0x0800dc85
 800afc8:	7ff00000 	.word	0x7ff00000
 800afcc:	0800dc6a 	.word	0x0800dc6a
 800afd0:	0800dc61 	.word	0x0800dc61
 800afd4:	0800dae1 	.word	0x0800dae1
 800afd8:	3ff80000 	.word	0x3ff80000
 800afdc:	0800de60 	.word	0x0800de60
 800afe0:	0800dce4 	.word	0x0800dce4
 800afe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe6:	9a00      	ldr	r2, [sp, #0]
 800afe8:	601a      	str	r2, [r3, #0]
 800afea:	9b01      	ldr	r3, [sp, #4]
 800afec:	2b0e      	cmp	r3, #14
 800afee:	f200 80ad 	bhi.w	800b14c <_dtoa_r+0x484>
 800aff2:	2d00      	cmp	r5, #0
 800aff4:	f000 80aa 	beq.w	800b14c <_dtoa_r+0x484>
 800aff8:	f1ba 0f00 	cmp.w	sl, #0
 800affc:	dd36      	ble.n	800b06c <_dtoa_r+0x3a4>
 800affe:	4ac3      	ldr	r2, [pc, #780]	; (800b30c <_dtoa_r+0x644>)
 800b000:	f00a 030f 	and.w	r3, sl, #15
 800b004:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b008:	ed93 7b00 	vldr	d7, [r3]
 800b00c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b010:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b014:	eeb0 8a47 	vmov.f32	s16, s14
 800b018:	eef0 8a67 	vmov.f32	s17, s15
 800b01c:	d016      	beq.n	800b04c <_dtoa_r+0x384>
 800b01e:	4bbc      	ldr	r3, [pc, #752]	; (800b310 <_dtoa_r+0x648>)
 800b020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b028:	f7f5 fc10 	bl	800084c <__aeabi_ddiv>
 800b02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b030:	f007 070f 	and.w	r7, r7, #15
 800b034:	2503      	movs	r5, #3
 800b036:	4eb6      	ldr	r6, [pc, #728]	; (800b310 <_dtoa_r+0x648>)
 800b038:	b957      	cbnz	r7, 800b050 <_dtoa_r+0x388>
 800b03a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b03e:	ec53 2b18 	vmov	r2, r3, d8
 800b042:	f7f5 fc03 	bl	800084c <__aeabi_ddiv>
 800b046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b04a:	e029      	b.n	800b0a0 <_dtoa_r+0x3d8>
 800b04c:	2502      	movs	r5, #2
 800b04e:	e7f2      	b.n	800b036 <_dtoa_r+0x36e>
 800b050:	07f9      	lsls	r1, r7, #31
 800b052:	d508      	bpl.n	800b066 <_dtoa_r+0x39e>
 800b054:	ec51 0b18 	vmov	r0, r1, d8
 800b058:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b05c:	f7f5 facc 	bl	80005f8 <__aeabi_dmul>
 800b060:	ec41 0b18 	vmov	d8, r0, r1
 800b064:	3501      	adds	r5, #1
 800b066:	107f      	asrs	r7, r7, #1
 800b068:	3608      	adds	r6, #8
 800b06a:	e7e5      	b.n	800b038 <_dtoa_r+0x370>
 800b06c:	f000 80a6 	beq.w	800b1bc <_dtoa_r+0x4f4>
 800b070:	f1ca 0600 	rsb	r6, sl, #0
 800b074:	4ba5      	ldr	r3, [pc, #660]	; (800b30c <_dtoa_r+0x644>)
 800b076:	4fa6      	ldr	r7, [pc, #664]	; (800b310 <_dtoa_r+0x648>)
 800b078:	f006 020f 	and.w	r2, r6, #15
 800b07c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b088:	f7f5 fab6 	bl	80005f8 <__aeabi_dmul>
 800b08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b090:	1136      	asrs	r6, r6, #4
 800b092:	2300      	movs	r3, #0
 800b094:	2502      	movs	r5, #2
 800b096:	2e00      	cmp	r6, #0
 800b098:	f040 8085 	bne.w	800b1a6 <_dtoa_r+0x4de>
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1d2      	bne.n	800b046 <_dtoa_r+0x37e>
 800b0a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 808c 	beq.w	800b1c0 <_dtoa_r+0x4f8>
 800b0a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b0ac:	4b99      	ldr	r3, [pc, #612]	; (800b314 <_dtoa_r+0x64c>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	f7f5 fd12 	bl	8000adc <__aeabi_dcmplt>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	f000 8081 	beq.w	800b1c0 <_dtoa_r+0x4f8>
 800b0be:	9b01      	ldr	r3, [sp, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d07d      	beq.n	800b1c0 <_dtoa_r+0x4f8>
 800b0c4:	f1b9 0f00 	cmp.w	r9, #0
 800b0c8:	dd3c      	ble.n	800b144 <_dtoa_r+0x47c>
 800b0ca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b0ce:	9307      	str	r3, [sp, #28]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4b91      	ldr	r3, [pc, #580]	; (800b318 <_dtoa_r+0x650>)
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	4639      	mov	r1, r7
 800b0d8:	f7f5 fa8e 	bl	80005f8 <__aeabi_dmul>
 800b0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0e0:	3501      	adds	r5, #1
 800b0e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b0e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f7f5 fa1a 	bl	8000524 <__aeabi_i2d>
 800b0f0:	4632      	mov	r2, r6
 800b0f2:	463b      	mov	r3, r7
 800b0f4:	f7f5 fa80 	bl	80005f8 <__aeabi_dmul>
 800b0f8:	4b88      	ldr	r3, [pc, #544]	; (800b31c <_dtoa_r+0x654>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f7f5 f8c6 	bl	800028c <__adddf3>
 800b100:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b108:	9303      	str	r3, [sp, #12]
 800b10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d15c      	bne.n	800b1ca <_dtoa_r+0x502>
 800b110:	4b83      	ldr	r3, [pc, #524]	; (800b320 <_dtoa_r+0x658>)
 800b112:	2200      	movs	r2, #0
 800b114:	4630      	mov	r0, r6
 800b116:	4639      	mov	r1, r7
 800b118:	f7f5 f8b6 	bl	8000288 <__aeabi_dsub>
 800b11c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b120:	4606      	mov	r6, r0
 800b122:	460f      	mov	r7, r1
 800b124:	f7f5 fcf8 	bl	8000b18 <__aeabi_dcmpgt>
 800b128:	2800      	cmp	r0, #0
 800b12a:	f040 8296 	bne.w	800b65a <_dtoa_r+0x992>
 800b12e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b132:	4630      	mov	r0, r6
 800b134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b138:	4639      	mov	r1, r7
 800b13a:	f7f5 fccf 	bl	8000adc <__aeabi_dcmplt>
 800b13e:	2800      	cmp	r0, #0
 800b140:	f040 8288 	bne.w	800b654 <_dtoa_r+0x98c>
 800b144:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b148:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b14c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f2c0 8158 	blt.w	800b404 <_dtoa_r+0x73c>
 800b154:	f1ba 0f0e 	cmp.w	sl, #14
 800b158:	f300 8154 	bgt.w	800b404 <_dtoa_r+0x73c>
 800b15c:	4b6b      	ldr	r3, [pc, #428]	; (800b30c <_dtoa_r+0x644>)
 800b15e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b162:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f280 80e3 	bge.w	800b334 <_dtoa_r+0x66c>
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	f300 80df 	bgt.w	800b334 <_dtoa_r+0x66c>
 800b176:	f040 826d 	bne.w	800b654 <_dtoa_r+0x98c>
 800b17a:	4b69      	ldr	r3, [pc, #420]	; (800b320 <_dtoa_r+0x658>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	4640      	mov	r0, r8
 800b180:	4649      	mov	r1, r9
 800b182:	f7f5 fa39 	bl	80005f8 <__aeabi_dmul>
 800b186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b18a:	f7f5 fcbb 	bl	8000b04 <__aeabi_dcmpge>
 800b18e:	9e01      	ldr	r6, [sp, #4]
 800b190:	4637      	mov	r7, r6
 800b192:	2800      	cmp	r0, #0
 800b194:	f040 8243 	bne.w	800b61e <_dtoa_r+0x956>
 800b198:	9d00      	ldr	r5, [sp, #0]
 800b19a:	2331      	movs	r3, #49	; 0x31
 800b19c:	f805 3b01 	strb.w	r3, [r5], #1
 800b1a0:	f10a 0a01 	add.w	sl, sl, #1
 800b1a4:	e23f      	b.n	800b626 <_dtoa_r+0x95e>
 800b1a6:	07f2      	lsls	r2, r6, #31
 800b1a8:	d505      	bpl.n	800b1b6 <_dtoa_r+0x4ee>
 800b1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ae:	f7f5 fa23 	bl	80005f8 <__aeabi_dmul>
 800b1b2:	3501      	adds	r5, #1
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	1076      	asrs	r6, r6, #1
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	e76c      	b.n	800b096 <_dtoa_r+0x3ce>
 800b1bc:	2502      	movs	r5, #2
 800b1be:	e76f      	b.n	800b0a0 <_dtoa_r+0x3d8>
 800b1c0:	9b01      	ldr	r3, [sp, #4]
 800b1c2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b1c6:	930c      	str	r3, [sp, #48]	; 0x30
 800b1c8:	e78d      	b.n	800b0e6 <_dtoa_r+0x41e>
 800b1ca:	9900      	ldr	r1, [sp, #0]
 800b1cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b1ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1d0:	4b4e      	ldr	r3, [pc, #312]	; (800b30c <_dtoa_r+0x644>)
 800b1d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1d6:	4401      	add	r1, r0
 800b1d8:	9102      	str	r1, [sp, #8]
 800b1da:	9908      	ldr	r1, [sp, #32]
 800b1dc:	eeb0 8a47 	vmov.f32	s16, s14
 800b1e0:	eef0 8a67 	vmov.f32	s17, s15
 800b1e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	d045      	beq.n	800b27c <_dtoa_r+0x5b4>
 800b1f0:	494c      	ldr	r1, [pc, #304]	; (800b324 <_dtoa_r+0x65c>)
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	f7f5 fb2a 	bl	800084c <__aeabi_ddiv>
 800b1f8:	ec53 2b18 	vmov	r2, r3, d8
 800b1fc:	f7f5 f844 	bl	8000288 <__aeabi_dsub>
 800b200:	9d00      	ldr	r5, [sp, #0]
 800b202:	ec41 0b18 	vmov	d8, r0, r1
 800b206:	4639      	mov	r1, r7
 800b208:	4630      	mov	r0, r6
 800b20a:	f7f5 fca5 	bl	8000b58 <__aeabi_d2iz>
 800b20e:	900c      	str	r0, [sp, #48]	; 0x30
 800b210:	f7f5 f988 	bl	8000524 <__aeabi_i2d>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	4630      	mov	r0, r6
 800b21a:	4639      	mov	r1, r7
 800b21c:	f7f5 f834 	bl	8000288 <__aeabi_dsub>
 800b220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b222:	3330      	adds	r3, #48	; 0x30
 800b224:	f805 3b01 	strb.w	r3, [r5], #1
 800b228:	ec53 2b18 	vmov	r2, r3, d8
 800b22c:	4606      	mov	r6, r0
 800b22e:	460f      	mov	r7, r1
 800b230:	f7f5 fc54 	bl	8000adc <__aeabi_dcmplt>
 800b234:	2800      	cmp	r0, #0
 800b236:	d165      	bne.n	800b304 <_dtoa_r+0x63c>
 800b238:	4632      	mov	r2, r6
 800b23a:	463b      	mov	r3, r7
 800b23c:	4935      	ldr	r1, [pc, #212]	; (800b314 <_dtoa_r+0x64c>)
 800b23e:	2000      	movs	r0, #0
 800b240:	f7f5 f822 	bl	8000288 <__aeabi_dsub>
 800b244:	ec53 2b18 	vmov	r2, r3, d8
 800b248:	f7f5 fc48 	bl	8000adc <__aeabi_dcmplt>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	f040 80b9 	bne.w	800b3c4 <_dtoa_r+0x6fc>
 800b252:	9b02      	ldr	r3, [sp, #8]
 800b254:	429d      	cmp	r5, r3
 800b256:	f43f af75 	beq.w	800b144 <_dtoa_r+0x47c>
 800b25a:	4b2f      	ldr	r3, [pc, #188]	; (800b318 <_dtoa_r+0x650>)
 800b25c:	ec51 0b18 	vmov	r0, r1, d8
 800b260:	2200      	movs	r2, #0
 800b262:	f7f5 f9c9 	bl	80005f8 <__aeabi_dmul>
 800b266:	4b2c      	ldr	r3, [pc, #176]	; (800b318 <_dtoa_r+0x650>)
 800b268:	ec41 0b18 	vmov	d8, r0, r1
 800b26c:	2200      	movs	r2, #0
 800b26e:	4630      	mov	r0, r6
 800b270:	4639      	mov	r1, r7
 800b272:	f7f5 f9c1 	bl	80005f8 <__aeabi_dmul>
 800b276:	4606      	mov	r6, r0
 800b278:	460f      	mov	r7, r1
 800b27a:	e7c4      	b.n	800b206 <_dtoa_r+0x53e>
 800b27c:	ec51 0b17 	vmov	r0, r1, d7
 800b280:	f7f5 f9ba 	bl	80005f8 <__aeabi_dmul>
 800b284:	9b02      	ldr	r3, [sp, #8]
 800b286:	9d00      	ldr	r5, [sp, #0]
 800b288:	930c      	str	r3, [sp, #48]	; 0x30
 800b28a:	ec41 0b18 	vmov	d8, r0, r1
 800b28e:	4639      	mov	r1, r7
 800b290:	4630      	mov	r0, r6
 800b292:	f7f5 fc61 	bl	8000b58 <__aeabi_d2iz>
 800b296:	9011      	str	r0, [sp, #68]	; 0x44
 800b298:	f7f5 f944 	bl	8000524 <__aeabi_i2d>
 800b29c:	4602      	mov	r2, r0
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	4639      	mov	r1, r7
 800b2a4:	f7f4 fff0 	bl	8000288 <__aeabi_dsub>
 800b2a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2aa:	3330      	adds	r3, #48	; 0x30
 800b2ac:	f805 3b01 	strb.w	r3, [r5], #1
 800b2b0:	9b02      	ldr	r3, [sp, #8]
 800b2b2:	429d      	cmp	r5, r3
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	460f      	mov	r7, r1
 800b2b8:	f04f 0200 	mov.w	r2, #0
 800b2bc:	d134      	bne.n	800b328 <_dtoa_r+0x660>
 800b2be:	4b19      	ldr	r3, [pc, #100]	; (800b324 <_dtoa_r+0x65c>)
 800b2c0:	ec51 0b18 	vmov	r0, r1, d8
 800b2c4:	f7f4 ffe2 	bl	800028c <__adddf3>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	f7f5 fc22 	bl	8000b18 <__aeabi_dcmpgt>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d175      	bne.n	800b3c4 <_dtoa_r+0x6fc>
 800b2d8:	ec53 2b18 	vmov	r2, r3, d8
 800b2dc:	4911      	ldr	r1, [pc, #68]	; (800b324 <_dtoa_r+0x65c>)
 800b2de:	2000      	movs	r0, #0
 800b2e0:	f7f4 ffd2 	bl	8000288 <__aeabi_dsub>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	f7f5 fbf6 	bl	8000adc <__aeabi_dcmplt>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	f43f af27 	beq.w	800b144 <_dtoa_r+0x47c>
 800b2f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2f8:	1e6b      	subs	r3, r5, #1
 800b2fa:	930c      	str	r3, [sp, #48]	; 0x30
 800b2fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b300:	2b30      	cmp	r3, #48	; 0x30
 800b302:	d0f8      	beq.n	800b2f6 <_dtoa_r+0x62e>
 800b304:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b308:	e04a      	b.n	800b3a0 <_dtoa_r+0x6d8>
 800b30a:	bf00      	nop
 800b30c:	0800de60 	.word	0x0800de60
 800b310:	0800de38 	.word	0x0800de38
 800b314:	3ff00000 	.word	0x3ff00000
 800b318:	40240000 	.word	0x40240000
 800b31c:	401c0000 	.word	0x401c0000
 800b320:	40140000 	.word	0x40140000
 800b324:	3fe00000 	.word	0x3fe00000
 800b328:	4baf      	ldr	r3, [pc, #700]	; (800b5e8 <_dtoa_r+0x920>)
 800b32a:	f7f5 f965 	bl	80005f8 <__aeabi_dmul>
 800b32e:	4606      	mov	r6, r0
 800b330:	460f      	mov	r7, r1
 800b332:	e7ac      	b.n	800b28e <_dtoa_r+0x5c6>
 800b334:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b338:	9d00      	ldr	r5, [sp, #0]
 800b33a:	4642      	mov	r2, r8
 800b33c:	464b      	mov	r3, r9
 800b33e:	4630      	mov	r0, r6
 800b340:	4639      	mov	r1, r7
 800b342:	f7f5 fa83 	bl	800084c <__aeabi_ddiv>
 800b346:	f7f5 fc07 	bl	8000b58 <__aeabi_d2iz>
 800b34a:	9002      	str	r0, [sp, #8]
 800b34c:	f7f5 f8ea 	bl	8000524 <__aeabi_i2d>
 800b350:	4642      	mov	r2, r8
 800b352:	464b      	mov	r3, r9
 800b354:	f7f5 f950 	bl	80005f8 <__aeabi_dmul>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	4630      	mov	r0, r6
 800b35e:	4639      	mov	r1, r7
 800b360:	f7f4 ff92 	bl	8000288 <__aeabi_dsub>
 800b364:	9e02      	ldr	r6, [sp, #8]
 800b366:	9f01      	ldr	r7, [sp, #4]
 800b368:	3630      	adds	r6, #48	; 0x30
 800b36a:	f805 6b01 	strb.w	r6, [r5], #1
 800b36e:	9e00      	ldr	r6, [sp, #0]
 800b370:	1bae      	subs	r6, r5, r6
 800b372:	42b7      	cmp	r7, r6
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	d137      	bne.n	800b3ea <_dtoa_r+0x722>
 800b37a:	f7f4 ff87 	bl	800028c <__adddf3>
 800b37e:	4642      	mov	r2, r8
 800b380:	464b      	mov	r3, r9
 800b382:	4606      	mov	r6, r0
 800b384:	460f      	mov	r7, r1
 800b386:	f7f5 fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 800b38a:	b9c8      	cbnz	r0, 800b3c0 <_dtoa_r+0x6f8>
 800b38c:	4642      	mov	r2, r8
 800b38e:	464b      	mov	r3, r9
 800b390:	4630      	mov	r0, r6
 800b392:	4639      	mov	r1, r7
 800b394:	f7f5 fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 800b398:	b110      	cbz	r0, 800b3a0 <_dtoa_r+0x6d8>
 800b39a:	9b02      	ldr	r3, [sp, #8]
 800b39c:	07d9      	lsls	r1, r3, #31
 800b39e:	d40f      	bmi.n	800b3c0 <_dtoa_r+0x6f8>
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	4659      	mov	r1, fp
 800b3a4:	f001 f868 	bl	800c478 <_Bfree>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	702b      	strb	r3, [r5, #0]
 800b3ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3ae:	f10a 0001 	add.w	r0, sl, #1
 800b3b2:	6018      	str	r0, [r3, #0]
 800b3b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f43f acd8 	beq.w	800ad6c <_dtoa_r+0xa4>
 800b3bc:	601d      	str	r5, [r3, #0]
 800b3be:	e4d5      	b.n	800ad6c <_dtoa_r+0xa4>
 800b3c0:	f8cd a01c 	str.w	sl, [sp, #28]
 800b3c4:	462b      	mov	r3, r5
 800b3c6:	461d      	mov	r5, r3
 800b3c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3cc:	2a39      	cmp	r2, #57	; 0x39
 800b3ce:	d108      	bne.n	800b3e2 <_dtoa_r+0x71a>
 800b3d0:	9a00      	ldr	r2, [sp, #0]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d1f7      	bne.n	800b3c6 <_dtoa_r+0x6fe>
 800b3d6:	9a07      	ldr	r2, [sp, #28]
 800b3d8:	9900      	ldr	r1, [sp, #0]
 800b3da:	3201      	adds	r2, #1
 800b3dc:	9207      	str	r2, [sp, #28]
 800b3de:	2230      	movs	r2, #48	; 0x30
 800b3e0:	700a      	strb	r2, [r1, #0]
 800b3e2:	781a      	ldrb	r2, [r3, #0]
 800b3e4:	3201      	adds	r2, #1
 800b3e6:	701a      	strb	r2, [r3, #0]
 800b3e8:	e78c      	b.n	800b304 <_dtoa_r+0x63c>
 800b3ea:	4b7f      	ldr	r3, [pc, #508]	; (800b5e8 <_dtoa_r+0x920>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f7f5 f903 	bl	80005f8 <__aeabi_dmul>
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	f7f5 fb65 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d09b      	beq.n	800b33a <_dtoa_r+0x672>
 800b402:	e7cd      	b.n	800b3a0 <_dtoa_r+0x6d8>
 800b404:	9a08      	ldr	r2, [sp, #32]
 800b406:	2a00      	cmp	r2, #0
 800b408:	f000 80c4 	beq.w	800b594 <_dtoa_r+0x8cc>
 800b40c:	9a05      	ldr	r2, [sp, #20]
 800b40e:	2a01      	cmp	r2, #1
 800b410:	f300 80a8 	bgt.w	800b564 <_dtoa_r+0x89c>
 800b414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b416:	2a00      	cmp	r2, #0
 800b418:	f000 80a0 	beq.w	800b55c <_dtoa_r+0x894>
 800b41c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b420:	9e06      	ldr	r6, [sp, #24]
 800b422:	4645      	mov	r5, r8
 800b424:	9a04      	ldr	r2, [sp, #16]
 800b426:	2101      	movs	r1, #1
 800b428:	441a      	add	r2, r3
 800b42a:	4620      	mov	r0, r4
 800b42c:	4498      	add	r8, r3
 800b42e:	9204      	str	r2, [sp, #16]
 800b430:	f001 f928 	bl	800c684 <__i2b>
 800b434:	4607      	mov	r7, r0
 800b436:	2d00      	cmp	r5, #0
 800b438:	dd0b      	ble.n	800b452 <_dtoa_r+0x78a>
 800b43a:	9b04      	ldr	r3, [sp, #16]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	dd08      	ble.n	800b452 <_dtoa_r+0x78a>
 800b440:	42ab      	cmp	r3, r5
 800b442:	9a04      	ldr	r2, [sp, #16]
 800b444:	bfa8      	it	ge
 800b446:	462b      	movge	r3, r5
 800b448:	eba8 0803 	sub.w	r8, r8, r3
 800b44c:	1aed      	subs	r5, r5, r3
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	9b06      	ldr	r3, [sp, #24]
 800b454:	b1fb      	cbz	r3, 800b496 <_dtoa_r+0x7ce>
 800b456:	9b08      	ldr	r3, [sp, #32]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f000 809f 	beq.w	800b59c <_dtoa_r+0x8d4>
 800b45e:	2e00      	cmp	r6, #0
 800b460:	dd11      	ble.n	800b486 <_dtoa_r+0x7be>
 800b462:	4639      	mov	r1, r7
 800b464:	4632      	mov	r2, r6
 800b466:	4620      	mov	r0, r4
 800b468:	f001 f9c8 	bl	800c7fc <__pow5mult>
 800b46c:	465a      	mov	r2, fp
 800b46e:	4601      	mov	r1, r0
 800b470:	4607      	mov	r7, r0
 800b472:	4620      	mov	r0, r4
 800b474:	f001 f91c 	bl	800c6b0 <__multiply>
 800b478:	4659      	mov	r1, fp
 800b47a:	9007      	str	r0, [sp, #28]
 800b47c:	4620      	mov	r0, r4
 800b47e:	f000 fffb 	bl	800c478 <_Bfree>
 800b482:	9b07      	ldr	r3, [sp, #28]
 800b484:	469b      	mov	fp, r3
 800b486:	9b06      	ldr	r3, [sp, #24]
 800b488:	1b9a      	subs	r2, r3, r6
 800b48a:	d004      	beq.n	800b496 <_dtoa_r+0x7ce>
 800b48c:	4659      	mov	r1, fp
 800b48e:	4620      	mov	r0, r4
 800b490:	f001 f9b4 	bl	800c7fc <__pow5mult>
 800b494:	4683      	mov	fp, r0
 800b496:	2101      	movs	r1, #1
 800b498:	4620      	mov	r0, r4
 800b49a:	f001 f8f3 	bl	800c684 <__i2b>
 800b49e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	dd7c      	ble.n	800b5a0 <_dtoa_r+0x8d8>
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	4601      	mov	r1, r0
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f001 f9a6 	bl	800c7fc <__pow5mult>
 800b4b0:	9b05      	ldr	r3, [sp, #20]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	dd76      	ble.n	800b5a6 <_dtoa_r+0x8de>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	9306      	str	r3, [sp, #24]
 800b4bc:	6933      	ldr	r3, [r6, #16]
 800b4be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b4c2:	6918      	ldr	r0, [r3, #16]
 800b4c4:	f001 f88e 	bl	800c5e4 <__hi0bits>
 800b4c8:	f1c0 0020 	rsb	r0, r0, #32
 800b4cc:	9b04      	ldr	r3, [sp, #16]
 800b4ce:	4418      	add	r0, r3
 800b4d0:	f010 001f 	ands.w	r0, r0, #31
 800b4d4:	f000 8086 	beq.w	800b5e4 <_dtoa_r+0x91c>
 800b4d8:	f1c0 0320 	rsb	r3, r0, #32
 800b4dc:	2b04      	cmp	r3, #4
 800b4de:	dd7f      	ble.n	800b5e0 <_dtoa_r+0x918>
 800b4e0:	f1c0 001c 	rsb	r0, r0, #28
 800b4e4:	9b04      	ldr	r3, [sp, #16]
 800b4e6:	4403      	add	r3, r0
 800b4e8:	4480      	add	r8, r0
 800b4ea:	4405      	add	r5, r0
 800b4ec:	9304      	str	r3, [sp, #16]
 800b4ee:	f1b8 0f00 	cmp.w	r8, #0
 800b4f2:	dd05      	ble.n	800b500 <_dtoa_r+0x838>
 800b4f4:	4659      	mov	r1, fp
 800b4f6:	4642      	mov	r2, r8
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f001 f9d9 	bl	800c8b0 <__lshift>
 800b4fe:	4683      	mov	fp, r0
 800b500:	9b04      	ldr	r3, [sp, #16]
 800b502:	2b00      	cmp	r3, #0
 800b504:	dd05      	ble.n	800b512 <_dtoa_r+0x84a>
 800b506:	4631      	mov	r1, r6
 800b508:	461a      	mov	r2, r3
 800b50a:	4620      	mov	r0, r4
 800b50c:	f001 f9d0 	bl	800c8b0 <__lshift>
 800b510:	4606      	mov	r6, r0
 800b512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b514:	2b00      	cmp	r3, #0
 800b516:	d069      	beq.n	800b5ec <_dtoa_r+0x924>
 800b518:	4631      	mov	r1, r6
 800b51a:	4658      	mov	r0, fp
 800b51c:	f001 fa34 	bl	800c988 <__mcmp>
 800b520:	2800      	cmp	r0, #0
 800b522:	da63      	bge.n	800b5ec <_dtoa_r+0x924>
 800b524:	2300      	movs	r3, #0
 800b526:	4659      	mov	r1, fp
 800b528:	220a      	movs	r2, #10
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 ffc6 	bl	800c4bc <__multadd>
 800b530:	9b08      	ldr	r3, [sp, #32]
 800b532:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b536:	4683      	mov	fp, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f000 818f 	beq.w	800b85c <_dtoa_r+0xb94>
 800b53e:	4639      	mov	r1, r7
 800b540:	2300      	movs	r3, #0
 800b542:	220a      	movs	r2, #10
 800b544:	4620      	mov	r0, r4
 800b546:	f000 ffb9 	bl	800c4bc <__multadd>
 800b54a:	f1b9 0f00 	cmp.w	r9, #0
 800b54e:	4607      	mov	r7, r0
 800b550:	f300 808e 	bgt.w	800b670 <_dtoa_r+0x9a8>
 800b554:	9b05      	ldr	r3, [sp, #20]
 800b556:	2b02      	cmp	r3, #2
 800b558:	dc50      	bgt.n	800b5fc <_dtoa_r+0x934>
 800b55a:	e089      	b.n	800b670 <_dtoa_r+0x9a8>
 800b55c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b55e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b562:	e75d      	b.n	800b420 <_dtoa_r+0x758>
 800b564:	9b01      	ldr	r3, [sp, #4]
 800b566:	1e5e      	subs	r6, r3, #1
 800b568:	9b06      	ldr	r3, [sp, #24]
 800b56a:	42b3      	cmp	r3, r6
 800b56c:	bfbf      	itttt	lt
 800b56e:	9b06      	ldrlt	r3, [sp, #24]
 800b570:	9606      	strlt	r6, [sp, #24]
 800b572:	1af2      	sublt	r2, r6, r3
 800b574:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b576:	bfb6      	itet	lt
 800b578:	189b      	addlt	r3, r3, r2
 800b57a:	1b9e      	subge	r6, r3, r6
 800b57c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b57e:	9b01      	ldr	r3, [sp, #4]
 800b580:	bfb8      	it	lt
 800b582:	2600      	movlt	r6, #0
 800b584:	2b00      	cmp	r3, #0
 800b586:	bfb5      	itete	lt
 800b588:	eba8 0503 	sublt.w	r5, r8, r3
 800b58c:	9b01      	ldrge	r3, [sp, #4]
 800b58e:	2300      	movlt	r3, #0
 800b590:	4645      	movge	r5, r8
 800b592:	e747      	b.n	800b424 <_dtoa_r+0x75c>
 800b594:	9e06      	ldr	r6, [sp, #24]
 800b596:	9f08      	ldr	r7, [sp, #32]
 800b598:	4645      	mov	r5, r8
 800b59a:	e74c      	b.n	800b436 <_dtoa_r+0x76e>
 800b59c:	9a06      	ldr	r2, [sp, #24]
 800b59e:	e775      	b.n	800b48c <_dtoa_r+0x7c4>
 800b5a0:	9b05      	ldr	r3, [sp, #20]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	dc18      	bgt.n	800b5d8 <_dtoa_r+0x910>
 800b5a6:	9b02      	ldr	r3, [sp, #8]
 800b5a8:	b9b3      	cbnz	r3, 800b5d8 <_dtoa_r+0x910>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5b0:	b9a3      	cbnz	r3, 800b5dc <_dtoa_r+0x914>
 800b5b2:	9b03      	ldr	r3, [sp, #12]
 800b5b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5b8:	0d1b      	lsrs	r3, r3, #20
 800b5ba:	051b      	lsls	r3, r3, #20
 800b5bc:	b12b      	cbz	r3, 800b5ca <_dtoa_r+0x902>
 800b5be:	9b04      	ldr	r3, [sp, #16]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	9304      	str	r3, [sp, #16]
 800b5c4:	f108 0801 	add.w	r8, r8, #1
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	9306      	str	r3, [sp, #24]
 800b5cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f47f af74 	bne.w	800b4bc <_dtoa_r+0x7f4>
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	e779      	b.n	800b4cc <_dtoa_r+0x804>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	e7f6      	b.n	800b5ca <_dtoa_r+0x902>
 800b5dc:	9b02      	ldr	r3, [sp, #8]
 800b5de:	e7f4      	b.n	800b5ca <_dtoa_r+0x902>
 800b5e0:	d085      	beq.n	800b4ee <_dtoa_r+0x826>
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	301c      	adds	r0, #28
 800b5e6:	e77d      	b.n	800b4e4 <_dtoa_r+0x81c>
 800b5e8:	40240000 	.word	0x40240000
 800b5ec:	9b01      	ldr	r3, [sp, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	dc38      	bgt.n	800b664 <_dtoa_r+0x99c>
 800b5f2:	9b05      	ldr	r3, [sp, #20]
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	dd35      	ble.n	800b664 <_dtoa_r+0x99c>
 800b5f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b5fc:	f1b9 0f00 	cmp.w	r9, #0
 800b600:	d10d      	bne.n	800b61e <_dtoa_r+0x956>
 800b602:	4631      	mov	r1, r6
 800b604:	464b      	mov	r3, r9
 800b606:	2205      	movs	r2, #5
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 ff57 	bl	800c4bc <__multadd>
 800b60e:	4601      	mov	r1, r0
 800b610:	4606      	mov	r6, r0
 800b612:	4658      	mov	r0, fp
 800b614:	f001 f9b8 	bl	800c988 <__mcmp>
 800b618:	2800      	cmp	r0, #0
 800b61a:	f73f adbd 	bgt.w	800b198 <_dtoa_r+0x4d0>
 800b61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b620:	9d00      	ldr	r5, [sp, #0]
 800b622:	ea6f 0a03 	mvn.w	sl, r3
 800b626:	f04f 0800 	mov.w	r8, #0
 800b62a:	4631      	mov	r1, r6
 800b62c:	4620      	mov	r0, r4
 800b62e:	f000 ff23 	bl	800c478 <_Bfree>
 800b632:	2f00      	cmp	r7, #0
 800b634:	f43f aeb4 	beq.w	800b3a0 <_dtoa_r+0x6d8>
 800b638:	f1b8 0f00 	cmp.w	r8, #0
 800b63c:	d005      	beq.n	800b64a <_dtoa_r+0x982>
 800b63e:	45b8      	cmp	r8, r7
 800b640:	d003      	beq.n	800b64a <_dtoa_r+0x982>
 800b642:	4641      	mov	r1, r8
 800b644:	4620      	mov	r0, r4
 800b646:	f000 ff17 	bl	800c478 <_Bfree>
 800b64a:	4639      	mov	r1, r7
 800b64c:	4620      	mov	r0, r4
 800b64e:	f000 ff13 	bl	800c478 <_Bfree>
 800b652:	e6a5      	b.n	800b3a0 <_dtoa_r+0x6d8>
 800b654:	2600      	movs	r6, #0
 800b656:	4637      	mov	r7, r6
 800b658:	e7e1      	b.n	800b61e <_dtoa_r+0x956>
 800b65a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b65c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b660:	4637      	mov	r7, r6
 800b662:	e599      	b.n	800b198 <_dtoa_r+0x4d0>
 800b664:	9b08      	ldr	r3, [sp, #32]
 800b666:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 80fd 	beq.w	800b86a <_dtoa_r+0xba2>
 800b670:	2d00      	cmp	r5, #0
 800b672:	dd05      	ble.n	800b680 <_dtoa_r+0x9b8>
 800b674:	4639      	mov	r1, r7
 800b676:	462a      	mov	r2, r5
 800b678:	4620      	mov	r0, r4
 800b67a:	f001 f919 	bl	800c8b0 <__lshift>
 800b67e:	4607      	mov	r7, r0
 800b680:	9b06      	ldr	r3, [sp, #24]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d05c      	beq.n	800b740 <_dtoa_r+0xa78>
 800b686:	6879      	ldr	r1, [r7, #4]
 800b688:	4620      	mov	r0, r4
 800b68a:	f000 feb5 	bl	800c3f8 <_Balloc>
 800b68e:	4605      	mov	r5, r0
 800b690:	b928      	cbnz	r0, 800b69e <_dtoa_r+0x9d6>
 800b692:	4b80      	ldr	r3, [pc, #512]	; (800b894 <_dtoa_r+0xbcc>)
 800b694:	4602      	mov	r2, r0
 800b696:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b69a:	f7ff bb2e 	b.w	800acfa <_dtoa_r+0x32>
 800b69e:	693a      	ldr	r2, [r7, #16]
 800b6a0:	3202      	adds	r2, #2
 800b6a2:	0092      	lsls	r2, r2, #2
 800b6a4:	f107 010c 	add.w	r1, r7, #12
 800b6a8:	300c      	adds	r0, #12
 800b6aa:	f7fd fbc9 	bl	8008e40 <memcpy>
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f001 f8fc 	bl	800c8b0 <__lshift>
 800b6b8:	9b00      	ldr	r3, [sp, #0]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	9b00      	ldr	r3, [sp, #0]
 800b6c0:	444b      	add	r3, r9
 800b6c2:	9307      	str	r3, [sp, #28]
 800b6c4:	9b02      	ldr	r3, [sp, #8]
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	46b8      	mov	r8, r7
 800b6cc:	9306      	str	r3, [sp, #24]
 800b6ce:	4607      	mov	r7, r0
 800b6d0:	9b01      	ldr	r3, [sp, #4]
 800b6d2:	4631      	mov	r1, r6
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	4658      	mov	r0, fp
 800b6d8:	9302      	str	r3, [sp, #8]
 800b6da:	f7ff fa67 	bl	800abac <quorem>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	3330      	adds	r3, #48	; 0x30
 800b6e2:	9004      	str	r0, [sp, #16]
 800b6e4:	4641      	mov	r1, r8
 800b6e6:	4658      	mov	r0, fp
 800b6e8:	9308      	str	r3, [sp, #32]
 800b6ea:	f001 f94d 	bl	800c988 <__mcmp>
 800b6ee:	463a      	mov	r2, r7
 800b6f0:	4681      	mov	r9, r0
 800b6f2:	4631      	mov	r1, r6
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f001 f963 	bl	800c9c0 <__mdiff>
 800b6fa:	68c2      	ldr	r2, [r0, #12]
 800b6fc:	9b08      	ldr	r3, [sp, #32]
 800b6fe:	4605      	mov	r5, r0
 800b700:	bb02      	cbnz	r2, 800b744 <_dtoa_r+0xa7c>
 800b702:	4601      	mov	r1, r0
 800b704:	4658      	mov	r0, fp
 800b706:	f001 f93f 	bl	800c988 <__mcmp>
 800b70a:	9b08      	ldr	r3, [sp, #32]
 800b70c:	4602      	mov	r2, r0
 800b70e:	4629      	mov	r1, r5
 800b710:	4620      	mov	r0, r4
 800b712:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b716:	f000 feaf 	bl	800c478 <_Bfree>
 800b71a:	9b05      	ldr	r3, [sp, #20]
 800b71c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b71e:	9d01      	ldr	r5, [sp, #4]
 800b720:	ea43 0102 	orr.w	r1, r3, r2
 800b724:	9b06      	ldr	r3, [sp, #24]
 800b726:	430b      	orrs	r3, r1
 800b728:	9b08      	ldr	r3, [sp, #32]
 800b72a:	d10d      	bne.n	800b748 <_dtoa_r+0xa80>
 800b72c:	2b39      	cmp	r3, #57	; 0x39
 800b72e:	d029      	beq.n	800b784 <_dtoa_r+0xabc>
 800b730:	f1b9 0f00 	cmp.w	r9, #0
 800b734:	dd01      	ble.n	800b73a <_dtoa_r+0xa72>
 800b736:	9b04      	ldr	r3, [sp, #16]
 800b738:	3331      	adds	r3, #49	; 0x31
 800b73a:	9a02      	ldr	r2, [sp, #8]
 800b73c:	7013      	strb	r3, [r2, #0]
 800b73e:	e774      	b.n	800b62a <_dtoa_r+0x962>
 800b740:	4638      	mov	r0, r7
 800b742:	e7b9      	b.n	800b6b8 <_dtoa_r+0x9f0>
 800b744:	2201      	movs	r2, #1
 800b746:	e7e2      	b.n	800b70e <_dtoa_r+0xa46>
 800b748:	f1b9 0f00 	cmp.w	r9, #0
 800b74c:	db06      	blt.n	800b75c <_dtoa_r+0xa94>
 800b74e:	9905      	ldr	r1, [sp, #20]
 800b750:	ea41 0909 	orr.w	r9, r1, r9
 800b754:	9906      	ldr	r1, [sp, #24]
 800b756:	ea59 0101 	orrs.w	r1, r9, r1
 800b75a:	d120      	bne.n	800b79e <_dtoa_r+0xad6>
 800b75c:	2a00      	cmp	r2, #0
 800b75e:	ddec      	ble.n	800b73a <_dtoa_r+0xa72>
 800b760:	4659      	mov	r1, fp
 800b762:	2201      	movs	r2, #1
 800b764:	4620      	mov	r0, r4
 800b766:	9301      	str	r3, [sp, #4]
 800b768:	f001 f8a2 	bl	800c8b0 <__lshift>
 800b76c:	4631      	mov	r1, r6
 800b76e:	4683      	mov	fp, r0
 800b770:	f001 f90a 	bl	800c988 <__mcmp>
 800b774:	2800      	cmp	r0, #0
 800b776:	9b01      	ldr	r3, [sp, #4]
 800b778:	dc02      	bgt.n	800b780 <_dtoa_r+0xab8>
 800b77a:	d1de      	bne.n	800b73a <_dtoa_r+0xa72>
 800b77c:	07da      	lsls	r2, r3, #31
 800b77e:	d5dc      	bpl.n	800b73a <_dtoa_r+0xa72>
 800b780:	2b39      	cmp	r3, #57	; 0x39
 800b782:	d1d8      	bne.n	800b736 <_dtoa_r+0xa6e>
 800b784:	9a02      	ldr	r2, [sp, #8]
 800b786:	2339      	movs	r3, #57	; 0x39
 800b788:	7013      	strb	r3, [r2, #0]
 800b78a:	462b      	mov	r3, r5
 800b78c:	461d      	mov	r5, r3
 800b78e:	3b01      	subs	r3, #1
 800b790:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b794:	2a39      	cmp	r2, #57	; 0x39
 800b796:	d050      	beq.n	800b83a <_dtoa_r+0xb72>
 800b798:	3201      	adds	r2, #1
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	e745      	b.n	800b62a <_dtoa_r+0x962>
 800b79e:	2a00      	cmp	r2, #0
 800b7a0:	dd03      	ble.n	800b7aa <_dtoa_r+0xae2>
 800b7a2:	2b39      	cmp	r3, #57	; 0x39
 800b7a4:	d0ee      	beq.n	800b784 <_dtoa_r+0xabc>
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	e7c7      	b.n	800b73a <_dtoa_r+0xa72>
 800b7aa:	9a01      	ldr	r2, [sp, #4]
 800b7ac:	9907      	ldr	r1, [sp, #28]
 800b7ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b7b2:	428a      	cmp	r2, r1
 800b7b4:	d02a      	beq.n	800b80c <_dtoa_r+0xb44>
 800b7b6:	4659      	mov	r1, fp
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	220a      	movs	r2, #10
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f000 fe7d 	bl	800c4bc <__multadd>
 800b7c2:	45b8      	cmp	r8, r7
 800b7c4:	4683      	mov	fp, r0
 800b7c6:	f04f 0300 	mov.w	r3, #0
 800b7ca:	f04f 020a 	mov.w	r2, #10
 800b7ce:	4641      	mov	r1, r8
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	d107      	bne.n	800b7e4 <_dtoa_r+0xb1c>
 800b7d4:	f000 fe72 	bl	800c4bc <__multadd>
 800b7d8:	4680      	mov	r8, r0
 800b7da:	4607      	mov	r7, r0
 800b7dc:	9b01      	ldr	r3, [sp, #4]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	e775      	b.n	800b6d0 <_dtoa_r+0xa08>
 800b7e4:	f000 fe6a 	bl	800c4bc <__multadd>
 800b7e8:	4639      	mov	r1, r7
 800b7ea:	4680      	mov	r8, r0
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	220a      	movs	r2, #10
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 fe63 	bl	800c4bc <__multadd>
 800b7f6:	4607      	mov	r7, r0
 800b7f8:	e7f0      	b.n	800b7dc <_dtoa_r+0xb14>
 800b7fa:	f1b9 0f00 	cmp.w	r9, #0
 800b7fe:	9a00      	ldr	r2, [sp, #0]
 800b800:	bfcc      	ite	gt
 800b802:	464d      	movgt	r5, r9
 800b804:	2501      	movle	r5, #1
 800b806:	4415      	add	r5, r2
 800b808:	f04f 0800 	mov.w	r8, #0
 800b80c:	4659      	mov	r1, fp
 800b80e:	2201      	movs	r2, #1
 800b810:	4620      	mov	r0, r4
 800b812:	9301      	str	r3, [sp, #4]
 800b814:	f001 f84c 	bl	800c8b0 <__lshift>
 800b818:	4631      	mov	r1, r6
 800b81a:	4683      	mov	fp, r0
 800b81c:	f001 f8b4 	bl	800c988 <__mcmp>
 800b820:	2800      	cmp	r0, #0
 800b822:	dcb2      	bgt.n	800b78a <_dtoa_r+0xac2>
 800b824:	d102      	bne.n	800b82c <_dtoa_r+0xb64>
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	07db      	lsls	r3, r3, #31
 800b82a:	d4ae      	bmi.n	800b78a <_dtoa_r+0xac2>
 800b82c:	462b      	mov	r3, r5
 800b82e:	461d      	mov	r5, r3
 800b830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b834:	2a30      	cmp	r2, #48	; 0x30
 800b836:	d0fa      	beq.n	800b82e <_dtoa_r+0xb66>
 800b838:	e6f7      	b.n	800b62a <_dtoa_r+0x962>
 800b83a:	9a00      	ldr	r2, [sp, #0]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d1a5      	bne.n	800b78c <_dtoa_r+0xac4>
 800b840:	f10a 0a01 	add.w	sl, sl, #1
 800b844:	2331      	movs	r3, #49	; 0x31
 800b846:	e779      	b.n	800b73c <_dtoa_r+0xa74>
 800b848:	4b13      	ldr	r3, [pc, #76]	; (800b898 <_dtoa_r+0xbd0>)
 800b84a:	f7ff baaf 	b.w	800adac <_dtoa_r+0xe4>
 800b84e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b850:	2b00      	cmp	r3, #0
 800b852:	f47f aa86 	bne.w	800ad62 <_dtoa_r+0x9a>
 800b856:	4b11      	ldr	r3, [pc, #68]	; (800b89c <_dtoa_r+0xbd4>)
 800b858:	f7ff baa8 	b.w	800adac <_dtoa_r+0xe4>
 800b85c:	f1b9 0f00 	cmp.w	r9, #0
 800b860:	dc03      	bgt.n	800b86a <_dtoa_r+0xba2>
 800b862:	9b05      	ldr	r3, [sp, #20]
 800b864:	2b02      	cmp	r3, #2
 800b866:	f73f aec9 	bgt.w	800b5fc <_dtoa_r+0x934>
 800b86a:	9d00      	ldr	r5, [sp, #0]
 800b86c:	4631      	mov	r1, r6
 800b86e:	4658      	mov	r0, fp
 800b870:	f7ff f99c 	bl	800abac <quorem>
 800b874:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b878:	f805 3b01 	strb.w	r3, [r5], #1
 800b87c:	9a00      	ldr	r2, [sp, #0]
 800b87e:	1aaa      	subs	r2, r5, r2
 800b880:	4591      	cmp	r9, r2
 800b882:	ddba      	ble.n	800b7fa <_dtoa_r+0xb32>
 800b884:	4659      	mov	r1, fp
 800b886:	2300      	movs	r3, #0
 800b888:	220a      	movs	r2, #10
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 fe16 	bl	800c4bc <__multadd>
 800b890:	4683      	mov	fp, r0
 800b892:	e7eb      	b.n	800b86c <_dtoa_r+0xba4>
 800b894:	0800dce4 	.word	0x0800dce4
 800b898:	0800dae0 	.word	0x0800dae0
 800b89c:	0800dc61 	.word	0x0800dc61

0800b8a0 <__sflush_r>:
 800b8a0:	898a      	ldrh	r2, [r1, #12]
 800b8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	0710      	lsls	r0, r2, #28
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	d458      	bmi.n	800b960 <__sflush_r+0xc0>
 800b8ae:	684b      	ldr	r3, [r1, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	dc05      	bgt.n	800b8c0 <__sflush_r+0x20>
 800b8b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	dc02      	bgt.n	800b8c0 <__sflush_r+0x20>
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8c2:	2e00      	cmp	r6, #0
 800b8c4:	d0f9      	beq.n	800b8ba <__sflush_r+0x1a>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8cc:	682f      	ldr	r7, [r5, #0]
 800b8ce:	602b      	str	r3, [r5, #0]
 800b8d0:	d032      	beq.n	800b938 <__sflush_r+0x98>
 800b8d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	075a      	lsls	r2, r3, #29
 800b8d8:	d505      	bpl.n	800b8e6 <__sflush_r+0x46>
 800b8da:	6863      	ldr	r3, [r4, #4]
 800b8dc:	1ac0      	subs	r0, r0, r3
 800b8de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8e0:	b10b      	cbz	r3, 800b8e6 <__sflush_r+0x46>
 800b8e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8e4:	1ac0      	subs	r0, r0, r3
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8ec:	6a21      	ldr	r1, [r4, #32]
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	47b0      	blx	r6
 800b8f2:	1c43      	adds	r3, r0, #1
 800b8f4:	89a3      	ldrh	r3, [r4, #12]
 800b8f6:	d106      	bne.n	800b906 <__sflush_r+0x66>
 800b8f8:	6829      	ldr	r1, [r5, #0]
 800b8fa:	291d      	cmp	r1, #29
 800b8fc:	d82c      	bhi.n	800b958 <__sflush_r+0xb8>
 800b8fe:	4a2a      	ldr	r2, [pc, #168]	; (800b9a8 <__sflush_r+0x108>)
 800b900:	40ca      	lsrs	r2, r1
 800b902:	07d6      	lsls	r6, r2, #31
 800b904:	d528      	bpl.n	800b958 <__sflush_r+0xb8>
 800b906:	2200      	movs	r2, #0
 800b908:	6062      	str	r2, [r4, #4]
 800b90a:	04d9      	lsls	r1, r3, #19
 800b90c:	6922      	ldr	r2, [r4, #16]
 800b90e:	6022      	str	r2, [r4, #0]
 800b910:	d504      	bpl.n	800b91c <__sflush_r+0x7c>
 800b912:	1c42      	adds	r2, r0, #1
 800b914:	d101      	bne.n	800b91a <__sflush_r+0x7a>
 800b916:	682b      	ldr	r3, [r5, #0]
 800b918:	b903      	cbnz	r3, 800b91c <__sflush_r+0x7c>
 800b91a:	6560      	str	r0, [r4, #84]	; 0x54
 800b91c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b91e:	602f      	str	r7, [r5, #0]
 800b920:	2900      	cmp	r1, #0
 800b922:	d0ca      	beq.n	800b8ba <__sflush_r+0x1a>
 800b924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b928:	4299      	cmp	r1, r3
 800b92a:	d002      	beq.n	800b932 <__sflush_r+0x92>
 800b92c:	4628      	mov	r0, r5
 800b92e:	f001 fa2d 	bl	800cd8c <_free_r>
 800b932:	2000      	movs	r0, #0
 800b934:	6360      	str	r0, [r4, #52]	; 0x34
 800b936:	e7c1      	b.n	800b8bc <__sflush_r+0x1c>
 800b938:	6a21      	ldr	r1, [r4, #32]
 800b93a:	2301      	movs	r3, #1
 800b93c:	4628      	mov	r0, r5
 800b93e:	47b0      	blx	r6
 800b940:	1c41      	adds	r1, r0, #1
 800b942:	d1c7      	bne.n	800b8d4 <__sflush_r+0x34>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d0c4      	beq.n	800b8d4 <__sflush_r+0x34>
 800b94a:	2b1d      	cmp	r3, #29
 800b94c:	d001      	beq.n	800b952 <__sflush_r+0xb2>
 800b94e:	2b16      	cmp	r3, #22
 800b950:	d101      	bne.n	800b956 <__sflush_r+0xb6>
 800b952:	602f      	str	r7, [r5, #0]
 800b954:	e7b1      	b.n	800b8ba <__sflush_r+0x1a>
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b95c:	81a3      	strh	r3, [r4, #12]
 800b95e:	e7ad      	b.n	800b8bc <__sflush_r+0x1c>
 800b960:	690f      	ldr	r7, [r1, #16]
 800b962:	2f00      	cmp	r7, #0
 800b964:	d0a9      	beq.n	800b8ba <__sflush_r+0x1a>
 800b966:	0793      	lsls	r3, r2, #30
 800b968:	680e      	ldr	r6, [r1, #0]
 800b96a:	bf08      	it	eq
 800b96c:	694b      	ldreq	r3, [r1, #20]
 800b96e:	600f      	str	r7, [r1, #0]
 800b970:	bf18      	it	ne
 800b972:	2300      	movne	r3, #0
 800b974:	eba6 0807 	sub.w	r8, r6, r7
 800b978:	608b      	str	r3, [r1, #8]
 800b97a:	f1b8 0f00 	cmp.w	r8, #0
 800b97e:	dd9c      	ble.n	800b8ba <__sflush_r+0x1a>
 800b980:	6a21      	ldr	r1, [r4, #32]
 800b982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b984:	4643      	mov	r3, r8
 800b986:	463a      	mov	r2, r7
 800b988:	4628      	mov	r0, r5
 800b98a:	47b0      	blx	r6
 800b98c:	2800      	cmp	r0, #0
 800b98e:	dc06      	bgt.n	800b99e <__sflush_r+0xfe>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b996:	81a3      	strh	r3, [r4, #12]
 800b998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b99c:	e78e      	b.n	800b8bc <__sflush_r+0x1c>
 800b99e:	4407      	add	r7, r0
 800b9a0:	eba8 0800 	sub.w	r8, r8, r0
 800b9a4:	e7e9      	b.n	800b97a <__sflush_r+0xda>
 800b9a6:	bf00      	nop
 800b9a8:	20400001 	.word	0x20400001

0800b9ac <_fflush_r>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	690b      	ldr	r3, [r1, #16]
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	460c      	mov	r4, r1
 800b9b4:	b913      	cbnz	r3, 800b9bc <_fflush_r+0x10>
 800b9b6:	2500      	movs	r5, #0
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	b118      	cbz	r0, 800b9c6 <_fflush_r+0x1a>
 800b9be:	6983      	ldr	r3, [r0, #24]
 800b9c0:	b90b      	cbnz	r3, 800b9c6 <_fflush_r+0x1a>
 800b9c2:	f000 f887 	bl	800bad4 <__sinit>
 800b9c6:	4b14      	ldr	r3, [pc, #80]	; (800ba18 <_fflush_r+0x6c>)
 800b9c8:	429c      	cmp	r4, r3
 800b9ca:	d11b      	bne.n	800ba04 <_fflush_r+0x58>
 800b9cc:	686c      	ldr	r4, [r5, #4]
 800b9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d0ef      	beq.n	800b9b6 <_fflush_r+0xa>
 800b9d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9d8:	07d0      	lsls	r0, r2, #31
 800b9da:	d404      	bmi.n	800b9e6 <_fflush_r+0x3a>
 800b9dc:	0599      	lsls	r1, r3, #22
 800b9de:	d402      	bmi.n	800b9e6 <_fflush_r+0x3a>
 800b9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9e2:	f000 fc88 	bl	800c2f6 <__retarget_lock_acquire_recursive>
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	f7ff ff59 	bl	800b8a0 <__sflush_r>
 800b9ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9f0:	07da      	lsls	r2, r3, #31
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	d4e0      	bmi.n	800b9b8 <_fflush_r+0xc>
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	059b      	lsls	r3, r3, #22
 800b9fa:	d4dd      	bmi.n	800b9b8 <_fflush_r+0xc>
 800b9fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9fe:	f000 fc7b 	bl	800c2f8 <__retarget_lock_release_recursive>
 800ba02:	e7d9      	b.n	800b9b8 <_fflush_r+0xc>
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <_fflush_r+0x70>)
 800ba06:	429c      	cmp	r4, r3
 800ba08:	d101      	bne.n	800ba0e <_fflush_r+0x62>
 800ba0a:	68ac      	ldr	r4, [r5, #8]
 800ba0c:	e7df      	b.n	800b9ce <_fflush_r+0x22>
 800ba0e:	4b04      	ldr	r3, [pc, #16]	; (800ba20 <_fflush_r+0x74>)
 800ba10:	429c      	cmp	r4, r3
 800ba12:	bf08      	it	eq
 800ba14:	68ec      	ldreq	r4, [r5, #12]
 800ba16:	e7da      	b.n	800b9ce <_fflush_r+0x22>
 800ba18:	0800dd18 	.word	0x0800dd18
 800ba1c:	0800dd38 	.word	0x0800dd38
 800ba20:	0800dcf8 	.word	0x0800dcf8

0800ba24 <std>:
 800ba24:	2300      	movs	r3, #0
 800ba26:	b510      	push	{r4, lr}
 800ba28:	4604      	mov	r4, r0
 800ba2a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba32:	6083      	str	r3, [r0, #8]
 800ba34:	8181      	strh	r1, [r0, #12]
 800ba36:	6643      	str	r3, [r0, #100]	; 0x64
 800ba38:	81c2      	strh	r2, [r0, #14]
 800ba3a:	6183      	str	r3, [r0, #24]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	2208      	movs	r2, #8
 800ba40:	305c      	adds	r0, #92	; 0x5c
 800ba42:	f7fd fa0b 	bl	8008e5c <memset>
 800ba46:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <std+0x38>)
 800ba48:	6263      	str	r3, [r4, #36]	; 0x24
 800ba4a:	4b05      	ldr	r3, [pc, #20]	; (800ba60 <std+0x3c>)
 800ba4c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba4e:	4b05      	ldr	r3, [pc, #20]	; (800ba64 <std+0x40>)
 800ba50:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba52:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <std+0x44>)
 800ba54:	6224      	str	r4, [r4, #32]
 800ba56:	6323      	str	r3, [r4, #48]	; 0x30
 800ba58:	bd10      	pop	{r4, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800d481 	.word	0x0800d481
 800ba60:	0800d4a3 	.word	0x0800d4a3
 800ba64:	0800d4db 	.word	0x0800d4db
 800ba68:	0800d4ff 	.word	0x0800d4ff

0800ba6c <_cleanup_r>:
 800ba6c:	4901      	ldr	r1, [pc, #4]	; (800ba74 <_cleanup_r+0x8>)
 800ba6e:	f000 b8af 	b.w	800bbd0 <_fwalk_reent>
 800ba72:	bf00      	nop
 800ba74:	0800b9ad 	.word	0x0800b9ad

0800ba78 <__sfmoreglue>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	1e4a      	subs	r2, r1, #1
 800ba7c:	2568      	movs	r5, #104	; 0x68
 800ba7e:	4355      	muls	r5, r2
 800ba80:	460e      	mov	r6, r1
 800ba82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba86:	f001 f9d1 	bl	800ce2c <_malloc_r>
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	b140      	cbz	r0, 800baa0 <__sfmoreglue+0x28>
 800ba8e:	2100      	movs	r1, #0
 800ba90:	e9c0 1600 	strd	r1, r6, [r0]
 800ba94:	300c      	adds	r0, #12
 800ba96:	60a0      	str	r0, [r4, #8]
 800ba98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba9c:	f7fd f9de 	bl	8008e5c <memset>
 800baa0:	4620      	mov	r0, r4
 800baa2:	bd70      	pop	{r4, r5, r6, pc}

0800baa4 <__sfp_lock_acquire>:
 800baa4:	4801      	ldr	r0, [pc, #4]	; (800baac <__sfp_lock_acquire+0x8>)
 800baa6:	f000 bc26 	b.w	800c2f6 <__retarget_lock_acquire_recursive>
 800baaa:	bf00      	nop
 800baac:	20001c84 	.word	0x20001c84

0800bab0 <__sfp_lock_release>:
 800bab0:	4801      	ldr	r0, [pc, #4]	; (800bab8 <__sfp_lock_release+0x8>)
 800bab2:	f000 bc21 	b.w	800c2f8 <__retarget_lock_release_recursive>
 800bab6:	bf00      	nop
 800bab8:	20001c84 	.word	0x20001c84

0800babc <__sinit_lock_acquire>:
 800babc:	4801      	ldr	r0, [pc, #4]	; (800bac4 <__sinit_lock_acquire+0x8>)
 800babe:	f000 bc1a 	b.w	800c2f6 <__retarget_lock_acquire_recursive>
 800bac2:	bf00      	nop
 800bac4:	20001c7f 	.word	0x20001c7f

0800bac8 <__sinit_lock_release>:
 800bac8:	4801      	ldr	r0, [pc, #4]	; (800bad0 <__sinit_lock_release+0x8>)
 800baca:	f000 bc15 	b.w	800c2f8 <__retarget_lock_release_recursive>
 800bace:	bf00      	nop
 800bad0:	20001c7f 	.word	0x20001c7f

0800bad4 <__sinit>:
 800bad4:	b510      	push	{r4, lr}
 800bad6:	4604      	mov	r4, r0
 800bad8:	f7ff fff0 	bl	800babc <__sinit_lock_acquire>
 800badc:	69a3      	ldr	r3, [r4, #24]
 800bade:	b11b      	cbz	r3, 800bae8 <__sinit+0x14>
 800bae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bae4:	f7ff bff0 	b.w	800bac8 <__sinit_lock_release>
 800bae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800baec:	6523      	str	r3, [r4, #80]	; 0x50
 800baee:	4b13      	ldr	r3, [pc, #76]	; (800bb3c <__sinit+0x68>)
 800baf0:	4a13      	ldr	r2, [pc, #76]	; (800bb40 <__sinit+0x6c>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	62a2      	str	r2, [r4, #40]	; 0x28
 800baf6:	42a3      	cmp	r3, r4
 800baf8:	bf04      	itt	eq
 800bafa:	2301      	moveq	r3, #1
 800bafc:	61a3      	streq	r3, [r4, #24]
 800bafe:	4620      	mov	r0, r4
 800bb00:	f000 f820 	bl	800bb44 <__sfp>
 800bb04:	6060      	str	r0, [r4, #4]
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 f81c 	bl	800bb44 <__sfp>
 800bb0c:	60a0      	str	r0, [r4, #8]
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f000 f818 	bl	800bb44 <__sfp>
 800bb14:	2200      	movs	r2, #0
 800bb16:	60e0      	str	r0, [r4, #12]
 800bb18:	2104      	movs	r1, #4
 800bb1a:	6860      	ldr	r0, [r4, #4]
 800bb1c:	f7ff ff82 	bl	800ba24 <std>
 800bb20:	68a0      	ldr	r0, [r4, #8]
 800bb22:	2201      	movs	r2, #1
 800bb24:	2109      	movs	r1, #9
 800bb26:	f7ff ff7d 	bl	800ba24 <std>
 800bb2a:	68e0      	ldr	r0, [r4, #12]
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	2112      	movs	r1, #18
 800bb30:	f7ff ff78 	bl	800ba24 <std>
 800bb34:	2301      	movs	r3, #1
 800bb36:	61a3      	str	r3, [r4, #24]
 800bb38:	e7d2      	b.n	800bae0 <__sinit+0xc>
 800bb3a:	bf00      	nop
 800bb3c:	0800dacc 	.word	0x0800dacc
 800bb40:	0800ba6d 	.word	0x0800ba6d

0800bb44 <__sfp>:
 800bb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb46:	4607      	mov	r7, r0
 800bb48:	f7ff ffac 	bl	800baa4 <__sfp_lock_acquire>
 800bb4c:	4b1e      	ldr	r3, [pc, #120]	; (800bbc8 <__sfp+0x84>)
 800bb4e:	681e      	ldr	r6, [r3, #0]
 800bb50:	69b3      	ldr	r3, [r6, #24]
 800bb52:	b913      	cbnz	r3, 800bb5a <__sfp+0x16>
 800bb54:	4630      	mov	r0, r6
 800bb56:	f7ff ffbd 	bl	800bad4 <__sinit>
 800bb5a:	3648      	adds	r6, #72	; 0x48
 800bb5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	d503      	bpl.n	800bb6c <__sfp+0x28>
 800bb64:	6833      	ldr	r3, [r6, #0]
 800bb66:	b30b      	cbz	r3, 800bbac <__sfp+0x68>
 800bb68:	6836      	ldr	r6, [r6, #0]
 800bb6a:	e7f7      	b.n	800bb5c <__sfp+0x18>
 800bb6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb70:	b9d5      	cbnz	r5, 800bba8 <__sfp+0x64>
 800bb72:	4b16      	ldr	r3, [pc, #88]	; (800bbcc <__sfp+0x88>)
 800bb74:	60e3      	str	r3, [r4, #12]
 800bb76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb7a:	6665      	str	r5, [r4, #100]	; 0x64
 800bb7c:	f000 fbba 	bl	800c2f4 <__retarget_lock_init_recursive>
 800bb80:	f7ff ff96 	bl	800bab0 <__sfp_lock_release>
 800bb84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb8c:	6025      	str	r5, [r4, #0]
 800bb8e:	61a5      	str	r5, [r4, #24]
 800bb90:	2208      	movs	r2, #8
 800bb92:	4629      	mov	r1, r5
 800bb94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb98:	f7fd f960 	bl	8008e5c <memset>
 800bb9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bba4:	4620      	mov	r0, r4
 800bba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba8:	3468      	adds	r4, #104	; 0x68
 800bbaa:	e7d9      	b.n	800bb60 <__sfp+0x1c>
 800bbac:	2104      	movs	r1, #4
 800bbae:	4638      	mov	r0, r7
 800bbb0:	f7ff ff62 	bl	800ba78 <__sfmoreglue>
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	6030      	str	r0, [r6, #0]
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d1d5      	bne.n	800bb68 <__sfp+0x24>
 800bbbc:	f7ff ff78 	bl	800bab0 <__sfp_lock_release>
 800bbc0:	230c      	movs	r3, #12
 800bbc2:	603b      	str	r3, [r7, #0]
 800bbc4:	e7ee      	b.n	800bba4 <__sfp+0x60>
 800bbc6:	bf00      	nop
 800bbc8:	0800dacc 	.word	0x0800dacc
 800bbcc:	ffff0001 	.word	0xffff0001

0800bbd0 <_fwalk_reent>:
 800bbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd4:	4606      	mov	r6, r0
 800bbd6:	4688      	mov	r8, r1
 800bbd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bbdc:	2700      	movs	r7, #0
 800bbde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbe2:	f1b9 0901 	subs.w	r9, r9, #1
 800bbe6:	d505      	bpl.n	800bbf4 <_fwalk_reent+0x24>
 800bbe8:	6824      	ldr	r4, [r4, #0]
 800bbea:	2c00      	cmp	r4, #0
 800bbec:	d1f7      	bne.n	800bbde <_fwalk_reent+0xe>
 800bbee:	4638      	mov	r0, r7
 800bbf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf4:	89ab      	ldrh	r3, [r5, #12]
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d907      	bls.n	800bc0a <_fwalk_reent+0x3a>
 800bbfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	d003      	beq.n	800bc0a <_fwalk_reent+0x3a>
 800bc02:	4629      	mov	r1, r5
 800bc04:	4630      	mov	r0, r6
 800bc06:	47c0      	blx	r8
 800bc08:	4307      	orrs	r7, r0
 800bc0a:	3568      	adds	r5, #104	; 0x68
 800bc0c:	e7e9      	b.n	800bbe2 <_fwalk_reent+0x12>

0800bc0e <rshift>:
 800bc0e:	6903      	ldr	r3, [r0, #16]
 800bc10:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc18:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bc1c:	f100 0414 	add.w	r4, r0, #20
 800bc20:	dd45      	ble.n	800bcae <rshift+0xa0>
 800bc22:	f011 011f 	ands.w	r1, r1, #31
 800bc26:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc2a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc2e:	d10c      	bne.n	800bc4a <rshift+0x3c>
 800bc30:	f100 0710 	add.w	r7, r0, #16
 800bc34:	4629      	mov	r1, r5
 800bc36:	42b1      	cmp	r1, r6
 800bc38:	d334      	bcc.n	800bca4 <rshift+0x96>
 800bc3a:	1a9b      	subs	r3, r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	1eea      	subs	r2, r5, #3
 800bc40:	4296      	cmp	r6, r2
 800bc42:	bf38      	it	cc
 800bc44:	2300      	movcc	r3, #0
 800bc46:	4423      	add	r3, r4
 800bc48:	e015      	b.n	800bc76 <rshift+0x68>
 800bc4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc4e:	f1c1 0820 	rsb	r8, r1, #32
 800bc52:	40cf      	lsrs	r7, r1
 800bc54:	f105 0e04 	add.w	lr, r5, #4
 800bc58:	46a1      	mov	r9, r4
 800bc5a:	4576      	cmp	r6, lr
 800bc5c:	46f4      	mov	ip, lr
 800bc5e:	d815      	bhi.n	800bc8c <rshift+0x7e>
 800bc60:	1a9b      	subs	r3, r3, r2
 800bc62:	009a      	lsls	r2, r3, #2
 800bc64:	3a04      	subs	r2, #4
 800bc66:	3501      	adds	r5, #1
 800bc68:	42ae      	cmp	r6, r5
 800bc6a:	bf38      	it	cc
 800bc6c:	2200      	movcc	r2, #0
 800bc6e:	18a3      	adds	r3, r4, r2
 800bc70:	50a7      	str	r7, [r4, r2]
 800bc72:	b107      	cbz	r7, 800bc76 <rshift+0x68>
 800bc74:	3304      	adds	r3, #4
 800bc76:	1b1a      	subs	r2, r3, r4
 800bc78:	42a3      	cmp	r3, r4
 800bc7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc7e:	bf08      	it	eq
 800bc80:	2300      	moveq	r3, #0
 800bc82:	6102      	str	r2, [r0, #16]
 800bc84:	bf08      	it	eq
 800bc86:	6143      	streq	r3, [r0, #20]
 800bc88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc8c:	f8dc c000 	ldr.w	ip, [ip]
 800bc90:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc94:	ea4c 0707 	orr.w	r7, ip, r7
 800bc98:	f849 7b04 	str.w	r7, [r9], #4
 800bc9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bca0:	40cf      	lsrs	r7, r1
 800bca2:	e7da      	b.n	800bc5a <rshift+0x4c>
 800bca4:	f851 cb04 	ldr.w	ip, [r1], #4
 800bca8:	f847 cf04 	str.w	ip, [r7, #4]!
 800bcac:	e7c3      	b.n	800bc36 <rshift+0x28>
 800bcae:	4623      	mov	r3, r4
 800bcb0:	e7e1      	b.n	800bc76 <rshift+0x68>

0800bcb2 <__hexdig_fun>:
 800bcb2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bcb6:	2b09      	cmp	r3, #9
 800bcb8:	d802      	bhi.n	800bcc0 <__hexdig_fun+0xe>
 800bcba:	3820      	subs	r0, #32
 800bcbc:	b2c0      	uxtb	r0, r0
 800bcbe:	4770      	bx	lr
 800bcc0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bcc4:	2b05      	cmp	r3, #5
 800bcc6:	d801      	bhi.n	800bccc <__hexdig_fun+0x1a>
 800bcc8:	3847      	subs	r0, #71	; 0x47
 800bcca:	e7f7      	b.n	800bcbc <__hexdig_fun+0xa>
 800bccc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bcd0:	2b05      	cmp	r3, #5
 800bcd2:	d801      	bhi.n	800bcd8 <__hexdig_fun+0x26>
 800bcd4:	3827      	subs	r0, #39	; 0x27
 800bcd6:	e7f1      	b.n	800bcbc <__hexdig_fun+0xa>
 800bcd8:	2000      	movs	r0, #0
 800bcda:	4770      	bx	lr

0800bcdc <__gethex>:
 800bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce0:	ed2d 8b02 	vpush	{d8}
 800bce4:	b089      	sub	sp, #36	; 0x24
 800bce6:	ee08 0a10 	vmov	s16, r0
 800bcea:	9304      	str	r3, [sp, #16]
 800bcec:	4bbc      	ldr	r3, [pc, #752]	; (800bfe0 <__gethex+0x304>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	9301      	str	r3, [sp, #4]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	468b      	mov	fp, r1
 800bcf6:	4690      	mov	r8, r2
 800bcf8:	f7f4 fa6a 	bl	80001d0 <strlen>
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	f8db 2000 	ldr.w	r2, [fp]
 800bd02:	4403      	add	r3, r0
 800bd04:	4682      	mov	sl, r0
 800bd06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bd0a:	9305      	str	r3, [sp, #20]
 800bd0c:	1c93      	adds	r3, r2, #2
 800bd0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bd12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bd16:	32fe      	adds	r2, #254	; 0xfe
 800bd18:	18d1      	adds	r1, r2, r3
 800bd1a:	461f      	mov	r7, r3
 800bd1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd20:	9100      	str	r1, [sp, #0]
 800bd22:	2830      	cmp	r0, #48	; 0x30
 800bd24:	d0f8      	beq.n	800bd18 <__gethex+0x3c>
 800bd26:	f7ff ffc4 	bl	800bcb2 <__hexdig_fun>
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d13a      	bne.n	800bda6 <__gethex+0xca>
 800bd30:	9901      	ldr	r1, [sp, #4]
 800bd32:	4652      	mov	r2, sl
 800bd34:	4638      	mov	r0, r7
 800bd36:	f001 fbe6 	bl	800d506 <strncmp>
 800bd3a:	4605      	mov	r5, r0
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d168      	bne.n	800be12 <__gethex+0x136>
 800bd40:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bd44:	eb07 060a 	add.w	r6, r7, sl
 800bd48:	f7ff ffb3 	bl	800bcb2 <__hexdig_fun>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d062      	beq.n	800be16 <__gethex+0x13a>
 800bd50:	4633      	mov	r3, r6
 800bd52:	7818      	ldrb	r0, [r3, #0]
 800bd54:	2830      	cmp	r0, #48	; 0x30
 800bd56:	461f      	mov	r7, r3
 800bd58:	f103 0301 	add.w	r3, r3, #1
 800bd5c:	d0f9      	beq.n	800bd52 <__gethex+0x76>
 800bd5e:	f7ff ffa8 	bl	800bcb2 <__hexdig_fun>
 800bd62:	2301      	movs	r3, #1
 800bd64:	fab0 f480 	clz	r4, r0
 800bd68:	0964      	lsrs	r4, r4, #5
 800bd6a:	4635      	mov	r5, r6
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	463a      	mov	r2, r7
 800bd70:	4616      	mov	r6, r2
 800bd72:	3201      	adds	r2, #1
 800bd74:	7830      	ldrb	r0, [r6, #0]
 800bd76:	f7ff ff9c 	bl	800bcb2 <__hexdig_fun>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d1f8      	bne.n	800bd70 <__gethex+0x94>
 800bd7e:	9901      	ldr	r1, [sp, #4]
 800bd80:	4652      	mov	r2, sl
 800bd82:	4630      	mov	r0, r6
 800bd84:	f001 fbbf 	bl	800d506 <strncmp>
 800bd88:	b980      	cbnz	r0, 800bdac <__gethex+0xd0>
 800bd8a:	b94d      	cbnz	r5, 800bda0 <__gethex+0xc4>
 800bd8c:	eb06 050a 	add.w	r5, r6, sl
 800bd90:	462a      	mov	r2, r5
 800bd92:	4616      	mov	r6, r2
 800bd94:	3201      	adds	r2, #1
 800bd96:	7830      	ldrb	r0, [r6, #0]
 800bd98:	f7ff ff8b 	bl	800bcb2 <__hexdig_fun>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d1f8      	bne.n	800bd92 <__gethex+0xb6>
 800bda0:	1bad      	subs	r5, r5, r6
 800bda2:	00ad      	lsls	r5, r5, #2
 800bda4:	e004      	b.n	800bdb0 <__gethex+0xd4>
 800bda6:	2400      	movs	r4, #0
 800bda8:	4625      	mov	r5, r4
 800bdaa:	e7e0      	b.n	800bd6e <__gethex+0x92>
 800bdac:	2d00      	cmp	r5, #0
 800bdae:	d1f7      	bne.n	800bda0 <__gethex+0xc4>
 800bdb0:	7833      	ldrb	r3, [r6, #0]
 800bdb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bdb6:	2b50      	cmp	r3, #80	; 0x50
 800bdb8:	d13b      	bne.n	800be32 <__gethex+0x156>
 800bdba:	7873      	ldrb	r3, [r6, #1]
 800bdbc:	2b2b      	cmp	r3, #43	; 0x2b
 800bdbe:	d02c      	beq.n	800be1a <__gethex+0x13e>
 800bdc0:	2b2d      	cmp	r3, #45	; 0x2d
 800bdc2:	d02e      	beq.n	800be22 <__gethex+0x146>
 800bdc4:	1c71      	adds	r1, r6, #1
 800bdc6:	f04f 0900 	mov.w	r9, #0
 800bdca:	7808      	ldrb	r0, [r1, #0]
 800bdcc:	f7ff ff71 	bl	800bcb2 <__hexdig_fun>
 800bdd0:	1e43      	subs	r3, r0, #1
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b18      	cmp	r3, #24
 800bdd6:	d82c      	bhi.n	800be32 <__gethex+0x156>
 800bdd8:	f1a0 0210 	sub.w	r2, r0, #16
 800bddc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bde0:	f7ff ff67 	bl	800bcb2 <__hexdig_fun>
 800bde4:	1e43      	subs	r3, r0, #1
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b18      	cmp	r3, #24
 800bdea:	d91d      	bls.n	800be28 <__gethex+0x14c>
 800bdec:	f1b9 0f00 	cmp.w	r9, #0
 800bdf0:	d000      	beq.n	800bdf4 <__gethex+0x118>
 800bdf2:	4252      	negs	r2, r2
 800bdf4:	4415      	add	r5, r2
 800bdf6:	f8cb 1000 	str.w	r1, [fp]
 800bdfa:	b1e4      	cbz	r4, 800be36 <__gethex+0x15a>
 800bdfc:	9b00      	ldr	r3, [sp, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	bf14      	ite	ne
 800be02:	2700      	movne	r7, #0
 800be04:	2706      	moveq	r7, #6
 800be06:	4638      	mov	r0, r7
 800be08:	b009      	add	sp, #36	; 0x24
 800be0a:	ecbd 8b02 	vpop	{d8}
 800be0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be12:	463e      	mov	r6, r7
 800be14:	4625      	mov	r5, r4
 800be16:	2401      	movs	r4, #1
 800be18:	e7ca      	b.n	800bdb0 <__gethex+0xd4>
 800be1a:	f04f 0900 	mov.w	r9, #0
 800be1e:	1cb1      	adds	r1, r6, #2
 800be20:	e7d3      	b.n	800bdca <__gethex+0xee>
 800be22:	f04f 0901 	mov.w	r9, #1
 800be26:	e7fa      	b.n	800be1e <__gethex+0x142>
 800be28:	230a      	movs	r3, #10
 800be2a:	fb03 0202 	mla	r2, r3, r2, r0
 800be2e:	3a10      	subs	r2, #16
 800be30:	e7d4      	b.n	800bddc <__gethex+0x100>
 800be32:	4631      	mov	r1, r6
 800be34:	e7df      	b.n	800bdf6 <__gethex+0x11a>
 800be36:	1bf3      	subs	r3, r6, r7
 800be38:	3b01      	subs	r3, #1
 800be3a:	4621      	mov	r1, r4
 800be3c:	2b07      	cmp	r3, #7
 800be3e:	dc0b      	bgt.n	800be58 <__gethex+0x17c>
 800be40:	ee18 0a10 	vmov	r0, s16
 800be44:	f000 fad8 	bl	800c3f8 <_Balloc>
 800be48:	4604      	mov	r4, r0
 800be4a:	b940      	cbnz	r0, 800be5e <__gethex+0x182>
 800be4c:	4b65      	ldr	r3, [pc, #404]	; (800bfe4 <__gethex+0x308>)
 800be4e:	4602      	mov	r2, r0
 800be50:	21de      	movs	r1, #222	; 0xde
 800be52:	4865      	ldr	r0, [pc, #404]	; (800bfe8 <__gethex+0x30c>)
 800be54:	f001 fb88 	bl	800d568 <__assert_func>
 800be58:	3101      	adds	r1, #1
 800be5a:	105b      	asrs	r3, r3, #1
 800be5c:	e7ee      	b.n	800be3c <__gethex+0x160>
 800be5e:	f100 0914 	add.w	r9, r0, #20
 800be62:	f04f 0b00 	mov.w	fp, #0
 800be66:	f1ca 0301 	rsb	r3, sl, #1
 800be6a:	f8cd 9008 	str.w	r9, [sp, #8]
 800be6e:	f8cd b000 	str.w	fp, [sp]
 800be72:	9306      	str	r3, [sp, #24]
 800be74:	42b7      	cmp	r7, r6
 800be76:	d340      	bcc.n	800befa <__gethex+0x21e>
 800be78:	9802      	ldr	r0, [sp, #8]
 800be7a:	9b00      	ldr	r3, [sp, #0]
 800be7c:	f840 3b04 	str.w	r3, [r0], #4
 800be80:	eba0 0009 	sub.w	r0, r0, r9
 800be84:	1080      	asrs	r0, r0, #2
 800be86:	0146      	lsls	r6, r0, #5
 800be88:	6120      	str	r0, [r4, #16]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 fbaa 	bl	800c5e4 <__hi0bits>
 800be90:	1a30      	subs	r0, r6, r0
 800be92:	f8d8 6000 	ldr.w	r6, [r8]
 800be96:	42b0      	cmp	r0, r6
 800be98:	dd63      	ble.n	800bf62 <__gethex+0x286>
 800be9a:	1b87      	subs	r7, r0, r6
 800be9c:	4639      	mov	r1, r7
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 ff44 	bl	800cd2c <__any_on>
 800bea4:	4682      	mov	sl, r0
 800bea6:	b1a8      	cbz	r0, 800bed4 <__gethex+0x1f8>
 800bea8:	1e7b      	subs	r3, r7, #1
 800beaa:	1159      	asrs	r1, r3, #5
 800beac:	f003 021f 	and.w	r2, r3, #31
 800beb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800beb4:	f04f 0a01 	mov.w	sl, #1
 800beb8:	fa0a f202 	lsl.w	r2, sl, r2
 800bebc:	420a      	tst	r2, r1
 800bebe:	d009      	beq.n	800bed4 <__gethex+0x1f8>
 800bec0:	4553      	cmp	r3, sl
 800bec2:	dd05      	ble.n	800bed0 <__gethex+0x1f4>
 800bec4:	1eb9      	subs	r1, r7, #2
 800bec6:	4620      	mov	r0, r4
 800bec8:	f000 ff30 	bl	800cd2c <__any_on>
 800becc:	2800      	cmp	r0, #0
 800bece:	d145      	bne.n	800bf5c <__gethex+0x280>
 800bed0:	f04f 0a02 	mov.w	sl, #2
 800bed4:	4639      	mov	r1, r7
 800bed6:	4620      	mov	r0, r4
 800bed8:	f7ff fe99 	bl	800bc0e <rshift>
 800bedc:	443d      	add	r5, r7
 800bede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bee2:	42ab      	cmp	r3, r5
 800bee4:	da4c      	bge.n	800bf80 <__gethex+0x2a4>
 800bee6:	ee18 0a10 	vmov	r0, s16
 800beea:	4621      	mov	r1, r4
 800beec:	f000 fac4 	bl	800c478 <_Bfree>
 800bef0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bef2:	2300      	movs	r3, #0
 800bef4:	6013      	str	r3, [r2, #0]
 800bef6:	27a3      	movs	r7, #163	; 0xa3
 800bef8:	e785      	b.n	800be06 <__gethex+0x12a>
 800befa:	1e73      	subs	r3, r6, #1
 800befc:	9a05      	ldr	r2, [sp, #20]
 800befe:	9303      	str	r3, [sp, #12]
 800bf00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d019      	beq.n	800bf3c <__gethex+0x260>
 800bf08:	f1bb 0f20 	cmp.w	fp, #32
 800bf0c:	d107      	bne.n	800bf1e <__gethex+0x242>
 800bf0e:	9b02      	ldr	r3, [sp, #8]
 800bf10:	9a00      	ldr	r2, [sp, #0]
 800bf12:	f843 2b04 	str.w	r2, [r3], #4
 800bf16:	9302      	str	r3, [sp, #8]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	469b      	mov	fp, r3
 800bf1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bf22:	f7ff fec6 	bl	800bcb2 <__hexdig_fun>
 800bf26:	9b00      	ldr	r3, [sp, #0]
 800bf28:	f000 000f 	and.w	r0, r0, #15
 800bf2c:	fa00 f00b 	lsl.w	r0, r0, fp
 800bf30:	4303      	orrs	r3, r0
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	f10b 0b04 	add.w	fp, fp, #4
 800bf38:	9b03      	ldr	r3, [sp, #12]
 800bf3a:	e00d      	b.n	800bf58 <__gethex+0x27c>
 800bf3c:	9b03      	ldr	r3, [sp, #12]
 800bf3e:	9a06      	ldr	r2, [sp, #24]
 800bf40:	4413      	add	r3, r2
 800bf42:	42bb      	cmp	r3, r7
 800bf44:	d3e0      	bcc.n	800bf08 <__gethex+0x22c>
 800bf46:	4618      	mov	r0, r3
 800bf48:	9901      	ldr	r1, [sp, #4]
 800bf4a:	9307      	str	r3, [sp, #28]
 800bf4c:	4652      	mov	r2, sl
 800bf4e:	f001 fada 	bl	800d506 <strncmp>
 800bf52:	9b07      	ldr	r3, [sp, #28]
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d1d7      	bne.n	800bf08 <__gethex+0x22c>
 800bf58:	461e      	mov	r6, r3
 800bf5a:	e78b      	b.n	800be74 <__gethex+0x198>
 800bf5c:	f04f 0a03 	mov.w	sl, #3
 800bf60:	e7b8      	b.n	800bed4 <__gethex+0x1f8>
 800bf62:	da0a      	bge.n	800bf7a <__gethex+0x29e>
 800bf64:	1a37      	subs	r7, r6, r0
 800bf66:	4621      	mov	r1, r4
 800bf68:	ee18 0a10 	vmov	r0, s16
 800bf6c:	463a      	mov	r2, r7
 800bf6e:	f000 fc9f 	bl	800c8b0 <__lshift>
 800bf72:	1bed      	subs	r5, r5, r7
 800bf74:	4604      	mov	r4, r0
 800bf76:	f100 0914 	add.w	r9, r0, #20
 800bf7a:	f04f 0a00 	mov.w	sl, #0
 800bf7e:	e7ae      	b.n	800bede <__gethex+0x202>
 800bf80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bf84:	42a8      	cmp	r0, r5
 800bf86:	dd72      	ble.n	800c06e <__gethex+0x392>
 800bf88:	1b45      	subs	r5, r0, r5
 800bf8a:	42ae      	cmp	r6, r5
 800bf8c:	dc36      	bgt.n	800bffc <__gethex+0x320>
 800bf8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d02a      	beq.n	800bfec <__gethex+0x310>
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d02c      	beq.n	800bff4 <__gethex+0x318>
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d115      	bne.n	800bfca <__gethex+0x2ee>
 800bf9e:	42ae      	cmp	r6, r5
 800bfa0:	d113      	bne.n	800bfca <__gethex+0x2ee>
 800bfa2:	2e01      	cmp	r6, #1
 800bfa4:	d10b      	bne.n	800bfbe <__gethex+0x2e2>
 800bfa6:	9a04      	ldr	r2, [sp, #16]
 800bfa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	2301      	movs	r3, #1
 800bfb0:	6123      	str	r3, [r4, #16]
 800bfb2:	f8c9 3000 	str.w	r3, [r9]
 800bfb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfb8:	2762      	movs	r7, #98	; 0x62
 800bfba:	601c      	str	r4, [r3, #0]
 800bfbc:	e723      	b.n	800be06 <__gethex+0x12a>
 800bfbe:	1e71      	subs	r1, r6, #1
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 feb3 	bl	800cd2c <__any_on>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d1ed      	bne.n	800bfa6 <__gethex+0x2ca>
 800bfca:	ee18 0a10 	vmov	r0, s16
 800bfce:	4621      	mov	r1, r4
 800bfd0:	f000 fa52 	bl	800c478 <_Bfree>
 800bfd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	2750      	movs	r7, #80	; 0x50
 800bfdc:	e713      	b.n	800be06 <__gethex+0x12a>
 800bfde:	bf00      	nop
 800bfe0:	0800ddc4 	.word	0x0800ddc4
 800bfe4:	0800dce4 	.word	0x0800dce4
 800bfe8:	0800dd58 	.word	0x0800dd58
 800bfec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1eb      	bne.n	800bfca <__gethex+0x2ee>
 800bff2:	e7d8      	b.n	800bfa6 <__gethex+0x2ca>
 800bff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1d5      	bne.n	800bfa6 <__gethex+0x2ca>
 800bffa:	e7e6      	b.n	800bfca <__gethex+0x2ee>
 800bffc:	1e6f      	subs	r7, r5, #1
 800bffe:	f1ba 0f00 	cmp.w	sl, #0
 800c002:	d131      	bne.n	800c068 <__gethex+0x38c>
 800c004:	b127      	cbz	r7, 800c010 <__gethex+0x334>
 800c006:	4639      	mov	r1, r7
 800c008:	4620      	mov	r0, r4
 800c00a:	f000 fe8f 	bl	800cd2c <__any_on>
 800c00e:	4682      	mov	sl, r0
 800c010:	117b      	asrs	r3, r7, #5
 800c012:	2101      	movs	r1, #1
 800c014:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c018:	f007 071f 	and.w	r7, r7, #31
 800c01c:	fa01 f707 	lsl.w	r7, r1, r7
 800c020:	421f      	tst	r7, r3
 800c022:	4629      	mov	r1, r5
 800c024:	4620      	mov	r0, r4
 800c026:	bf18      	it	ne
 800c028:	f04a 0a02 	orrne.w	sl, sl, #2
 800c02c:	1b76      	subs	r6, r6, r5
 800c02e:	f7ff fdee 	bl	800bc0e <rshift>
 800c032:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c036:	2702      	movs	r7, #2
 800c038:	f1ba 0f00 	cmp.w	sl, #0
 800c03c:	d048      	beq.n	800c0d0 <__gethex+0x3f4>
 800c03e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c042:	2b02      	cmp	r3, #2
 800c044:	d015      	beq.n	800c072 <__gethex+0x396>
 800c046:	2b03      	cmp	r3, #3
 800c048:	d017      	beq.n	800c07a <__gethex+0x39e>
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d109      	bne.n	800c062 <__gethex+0x386>
 800c04e:	f01a 0f02 	tst.w	sl, #2
 800c052:	d006      	beq.n	800c062 <__gethex+0x386>
 800c054:	f8d9 0000 	ldr.w	r0, [r9]
 800c058:	ea4a 0a00 	orr.w	sl, sl, r0
 800c05c:	f01a 0f01 	tst.w	sl, #1
 800c060:	d10e      	bne.n	800c080 <__gethex+0x3a4>
 800c062:	f047 0710 	orr.w	r7, r7, #16
 800c066:	e033      	b.n	800c0d0 <__gethex+0x3f4>
 800c068:	f04f 0a01 	mov.w	sl, #1
 800c06c:	e7d0      	b.n	800c010 <__gethex+0x334>
 800c06e:	2701      	movs	r7, #1
 800c070:	e7e2      	b.n	800c038 <__gethex+0x35c>
 800c072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c074:	f1c3 0301 	rsb	r3, r3, #1
 800c078:	9315      	str	r3, [sp, #84]	; 0x54
 800c07a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d0f0      	beq.n	800c062 <__gethex+0x386>
 800c080:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c084:	f104 0314 	add.w	r3, r4, #20
 800c088:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c08c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c090:	f04f 0c00 	mov.w	ip, #0
 800c094:	4618      	mov	r0, r3
 800c096:	f853 2b04 	ldr.w	r2, [r3], #4
 800c09a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c09e:	d01c      	beq.n	800c0da <__gethex+0x3fe>
 800c0a0:	3201      	adds	r2, #1
 800c0a2:	6002      	str	r2, [r0, #0]
 800c0a4:	2f02      	cmp	r7, #2
 800c0a6:	f104 0314 	add.w	r3, r4, #20
 800c0aa:	d13f      	bne.n	800c12c <__gethex+0x450>
 800c0ac:	f8d8 2000 	ldr.w	r2, [r8]
 800c0b0:	3a01      	subs	r2, #1
 800c0b2:	42b2      	cmp	r2, r6
 800c0b4:	d10a      	bne.n	800c0cc <__gethex+0x3f0>
 800c0b6:	1171      	asrs	r1, r6, #5
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0be:	f006 061f 	and.w	r6, r6, #31
 800c0c2:	fa02 f606 	lsl.w	r6, r2, r6
 800c0c6:	421e      	tst	r6, r3
 800c0c8:	bf18      	it	ne
 800c0ca:	4617      	movne	r7, r2
 800c0cc:	f047 0720 	orr.w	r7, r7, #32
 800c0d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0d2:	601c      	str	r4, [r3, #0]
 800c0d4:	9b04      	ldr	r3, [sp, #16]
 800c0d6:	601d      	str	r5, [r3, #0]
 800c0d8:	e695      	b.n	800be06 <__gethex+0x12a>
 800c0da:	4299      	cmp	r1, r3
 800c0dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c0e0:	d8d8      	bhi.n	800c094 <__gethex+0x3b8>
 800c0e2:	68a3      	ldr	r3, [r4, #8]
 800c0e4:	459b      	cmp	fp, r3
 800c0e6:	db19      	blt.n	800c11c <__gethex+0x440>
 800c0e8:	6861      	ldr	r1, [r4, #4]
 800c0ea:	ee18 0a10 	vmov	r0, s16
 800c0ee:	3101      	adds	r1, #1
 800c0f0:	f000 f982 	bl	800c3f8 <_Balloc>
 800c0f4:	4681      	mov	r9, r0
 800c0f6:	b918      	cbnz	r0, 800c100 <__gethex+0x424>
 800c0f8:	4b1a      	ldr	r3, [pc, #104]	; (800c164 <__gethex+0x488>)
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	2184      	movs	r1, #132	; 0x84
 800c0fe:	e6a8      	b.n	800be52 <__gethex+0x176>
 800c100:	6922      	ldr	r2, [r4, #16]
 800c102:	3202      	adds	r2, #2
 800c104:	f104 010c 	add.w	r1, r4, #12
 800c108:	0092      	lsls	r2, r2, #2
 800c10a:	300c      	adds	r0, #12
 800c10c:	f7fc fe98 	bl	8008e40 <memcpy>
 800c110:	4621      	mov	r1, r4
 800c112:	ee18 0a10 	vmov	r0, s16
 800c116:	f000 f9af 	bl	800c478 <_Bfree>
 800c11a:	464c      	mov	r4, r9
 800c11c:	6923      	ldr	r3, [r4, #16]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c124:	6122      	str	r2, [r4, #16]
 800c126:	2201      	movs	r2, #1
 800c128:	615a      	str	r2, [r3, #20]
 800c12a:	e7bb      	b.n	800c0a4 <__gethex+0x3c8>
 800c12c:	6922      	ldr	r2, [r4, #16]
 800c12e:	455a      	cmp	r2, fp
 800c130:	dd0b      	ble.n	800c14a <__gethex+0x46e>
 800c132:	2101      	movs	r1, #1
 800c134:	4620      	mov	r0, r4
 800c136:	f7ff fd6a 	bl	800bc0e <rshift>
 800c13a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c13e:	3501      	adds	r5, #1
 800c140:	42ab      	cmp	r3, r5
 800c142:	f6ff aed0 	blt.w	800bee6 <__gethex+0x20a>
 800c146:	2701      	movs	r7, #1
 800c148:	e7c0      	b.n	800c0cc <__gethex+0x3f0>
 800c14a:	f016 061f 	ands.w	r6, r6, #31
 800c14e:	d0fa      	beq.n	800c146 <__gethex+0x46a>
 800c150:	449a      	add	sl, r3
 800c152:	f1c6 0620 	rsb	r6, r6, #32
 800c156:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c15a:	f000 fa43 	bl	800c5e4 <__hi0bits>
 800c15e:	42b0      	cmp	r0, r6
 800c160:	dbe7      	blt.n	800c132 <__gethex+0x456>
 800c162:	e7f0      	b.n	800c146 <__gethex+0x46a>
 800c164:	0800dce4 	.word	0x0800dce4

0800c168 <L_shift>:
 800c168:	f1c2 0208 	rsb	r2, r2, #8
 800c16c:	0092      	lsls	r2, r2, #2
 800c16e:	b570      	push	{r4, r5, r6, lr}
 800c170:	f1c2 0620 	rsb	r6, r2, #32
 800c174:	6843      	ldr	r3, [r0, #4]
 800c176:	6804      	ldr	r4, [r0, #0]
 800c178:	fa03 f506 	lsl.w	r5, r3, r6
 800c17c:	432c      	orrs	r4, r5
 800c17e:	40d3      	lsrs	r3, r2
 800c180:	6004      	str	r4, [r0, #0]
 800c182:	f840 3f04 	str.w	r3, [r0, #4]!
 800c186:	4288      	cmp	r0, r1
 800c188:	d3f4      	bcc.n	800c174 <L_shift+0xc>
 800c18a:	bd70      	pop	{r4, r5, r6, pc}

0800c18c <__match>:
 800c18c:	b530      	push	{r4, r5, lr}
 800c18e:	6803      	ldr	r3, [r0, #0]
 800c190:	3301      	adds	r3, #1
 800c192:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c196:	b914      	cbnz	r4, 800c19e <__match+0x12>
 800c198:	6003      	str	r3, [r0, #0]
 800c19a:	2001      	movs	r0, #1
 800c19c:	bd30      	pop	{r4, r5, pc}
 800c19e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c1a6:	2d19      	cmp	r5, #25
 800c1a8:	bf98      	it	ls
 800c1aa:	3220      	addls	r2, #32
 800c1ac:	42a2      	cmp	r2, r4
 800c1ae:	d0f0      	beq.n	800c192 <__match+0x6>
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	e7f3      	b.n	800c19c <__match+0x10>

0800c1b4 <__hexnan>:
 800c1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b8:	680b      	ldr	r3, [r1, #0]
 800c1ba:	6801      	ldr	r1, [r0, #0]
 800c1bc:	115e      	asrs	r6, r3, #5
 800c1be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c1c2:	f013 031f 	ands.w	r3, r3, #31
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	bf18      	it	ne
 800c1ca:	3604      	addne	r6, #4
 800c1cc:	2500      	movs	r5, #0
 800c1ce:	1f37      	subs	r7, r6, #4
 800c1d0:	4682      	mov	sl, r0
 800c1d2:	4690      	mov	r8, r2
 800c1d4:	9301      	str	r3, [sp, #4]
 800c1d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c1da:	46b9      	mov	r9, r7
 800c1dc:	463c      	mov	r4, r7
 800c1de:	9502      	str	r5, [sp, #8]
 800c1e0:	46ab      	mov	fp, r5
 800c1e2:	784a      	ldrb	r2, [r1, #1]
 800c1e4:	1c4b      	adds	r3, r1, #1
 800c1e6:	9303      	str	r3, [sp, #12]
 800c1e8:	b342      	cbz	r2, 800c23c <__hexnan+0x88>
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	9105      	str	r1, [sp, #20]
 800c1ee:	9204      	str	r2, [sp, #16]
 800c1f0:	f7ff fd5f 	bl	800bcb2 <__hexdig_fun>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d14f      	bne.n	800c298 <__hexnan+0xe4>
 800c1f8:	9a04      	ldr	r2, [sp, #16]
 800c1fa:	9905      	ldr	r1, [sp, #20]
 800c1fc:	2a20      	cmp	r2, #32
 800c1fe:	d818      	bhi.n	800c232 <__hexnan+0x7e>
 800c200:	9b02      	ldr	r3, [sp, #8]
 800c202:	459b      	cmp	fp, r3
 800c204:	dd13      	ble.n	800c22e <__hexnan+0x7a>
 800c206:	454c      	cmp	r4, r9
 800c208:	d206      	bcs.n	800c218 <__hexnan+0x64>
 800c20a:	2d07      	cmp	r5, #7
 800c20c:	dc04      	bgt.n	800c218 <__hexnan+0x64>
 800c20e:	462a      	mov	r2, r5
 800c210:	4649      	mov	r1, r9
 800c212:	4620      	mov	r0, r4
 800c214:	f7ff ffa8 	bl	800c168 <L_shift>
 800c218:	4544      	cmp	r4, r8
 800c21a:	d950      	bls.n	800c2be <__hexnan+0x10a>
 800c21c:	2300      	movs	r3, #0
 800c21e:	f1a4 0904 	sub.w	r9, r4, #4
 800c222:	f844 3c04 	str.w	r3, [r4, #-4]
 800c226:	f8cd b008 	str.w	fp, [sp, #8]
 800c22a:	464c      	mov	r4, r9
 800c22c:	461d      	mov	r5, r3
 800c22e:	9903      	ldr	r1, [sp, #12]
 800c230:	e7d7      	b.n	800c1e2 <__hexnan+0x2e>
 800c232:	2a29      	cmp	r2, #41	; 0x29
 800c234:	d156      	bne.n	800c2e4 <__hexnan+0x130>
 800c236:	3102      	adds	r1, #2
 800c238:	f8ca 1000 	str.w	r1, [sl]
 800c23c:	f1bb 0f00 	cmp.w	fp, #0
 800c240:	d050      	beq.n	800c2e4 <__hexnan+0x130>
 800c242:	454c      	cmp	r4, r9
 800c244:	d206      	bcs.n	800c254 <__hexnan+0xa0>
 800c246:	2d07      	cmp	r5, #7
 800c248:	dc04      	bgt.n	800c254 <__hexnan+0xa0>
 800c24a:	462a      	mov	r2, r5
 800c24c:	4649      	mov	r1, r9
 800c24e:	4620      	mov	r0, r4
 800c250:	f7ff ff8a 	bl	800c168 <L_shift>
 800c254:	4544      	cmp	r4, r8
 800c256:	d934      	bls.n	800c2c2 <__hexnan+0x10e>
 800c258:	f1a8 0204 	sub.w	r2, r8, #4
 800c25c:	4623      	mov	r3, r4
 800c25e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c262:	f842 1f04 	str.w	r1, [r2, #4]!
 800c266:	429f      	cmp	r7, r3
 800c268:	d2f9      	bcs.n	800c25e <__hexnan+0xaa>
 800c26a:	1b3b      	subs	r3, r7, r4
 800c26c:	f023 0303 	bic.w	r3, r3, #3
 800c270:	3304      	adds	r3, #4
 800c272:	3401      	adds	r4, #1
 800c274:	3e03      	subs	r6, #3
 800c276:	42b4      	cmp	r4, r6
 800c278:	bf88      	it	hi
 800c27a:	2304      	movhi	r3, #4
 800c27c:	4443      	add	r3, r8
 800c27e:	2200      	movs	r2, #0
 800c280:	f843 2b04 	str.w	r2, [r3], #4
 800c284:	429f      	cmp	r7, r3
 800c286:	d2fb      	bcs.n	800c280 <__hexnan+0xcc>
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	b91b      	cbnz	r3, 800c294 <__hexnan+0xe0>
 800c28c:	4547      	cmp	r7, r8
 800c28e:	d127      	bne.n	800c2e0 <__hexnan+0x12c>
 800c290:	2301      	movs	r3, #1
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	2005      	movs	r0, #5
 800c296:	e026      	b.n	800c2e6 <__hexnan+0x132>
 800c298:	3501      	adds	r5, #1
 800c29a:	2d08      	cmp	r5, #8
 800c29c:	f10b 0b01 	add.w	fp, fp, #1
 800c2a0:	dd06      	ble.n	800c2b0 <__hexnan+0xfc>
 800c2a2:	4544      	cmp	r4, r8
 800c2a4:	d9c3      	bls.n	800c22e <__hexnan+0x7a>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2ac:	2501      	movs	r5, #1
 800c2ae:	3c04      	subs	r4, #4
 800c2b0:	6822      	ldr	r2, [r4, #0]
 800c2b2:	f000 000f 	and.w	r0, r0, #15
 800c2b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c2ba:	6022      	str	r2, [r4, #0]
 800c2bc:	e7b7      	b.n	800c22e <__hexnan+0x7a>
 800c2be:	2508      	movs	r5, #8
 800c2c0:	e7b5      	b.n	800c22e <__hexnan+0x7a>
 800c2c2:	9b01      	ldr	r3, [sp, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d0df      	beq.n	800c288 <__hexnan+0xd4>
 800c2c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2cc:	f1c3 0320 	rsb	r3, r3, #32
 800c2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c2d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c2d8:	401a      	ands	r2, r3
 800c2da:	f846 2c04 	str.w	r2, [r6, #-4]
 800c2de:	e7d3      	b.n	800c288 <__hexnan+0xd4>
 800c2e0:	3f04      	subs	r7, #4
 800c2e2:	e7d1      	b.n	800c288 <__hexnan+0xd4>
 800c2e4:	2004      	movs	r0, #4
 800c2e6:	b007      	add	sp, #28
 800c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2ec <_localeconv_r>:
 800c2ec:	4800      	ldr	r0, [pc, #0]	; (800c2f0 <_localeconv_r+0x4>)
 800c2ee:	4770      	bx	lr
 800c2f0:	20000168 	.word	0x20000168

0800c2f4 <__retarget_lock_init_recursive>:
 800c2f4:	4770      	bx	lr

0800c2f6 <__retarget_lock_acquire_recursive>:
 800c2f6:	4770      	bx	lr

0800c2f8 <__retarget_lock_release_recursive>:
 800c2f8:	4770      	bx	lr

0800c2fa <__swhatbuf_r>:
 800c2fa:	b570      	push	{r4, r5, r6, lr}
 800c2fc:	460e      	mov	r6, r1
 800c2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c302:	2900      	cmp	r1, #0
 800c304:	b096      	sub	sp, #88	; 0x58
 800c306:	4614      	mov	r4, r2
 800c308:	461d      	mov	r5, r3
 800c30a:	da07      	bge.n	800c31c <__swhatbuf_r+0x22>
 800c30c:	2300      	movs	r3, #0
 800c30e:	602b      	str	r3, [r5, #0]
 800c310:	89b3      	ldrh	r3, [r6, #12]
 800c312:	061a      	lsls	r2, r3, #24
 800c314:	d410      	bmi.n	800c338 <__swhatbuf_r+0x3e>
 800c316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c31a:	e00e      	b.n	800c33a <__swhatbuf_r+0x40>
 800c31c:	466a      	mov	r2, sp
 800c31e:	f001 f963 	bl	800d5e8 <_fstat_r>
 800c322:	2800      	cmp	r0, #0
 800c324:	dbf2      	blt.n	800c30c <__swhatbuf_r+0x12>
 800c326:	9a01      	ldr	r2, [sp, #4]
 800c328:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c32c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c330:	425a      	negs	r2, r3
 800c332:	415a      	adcs	r2, r3
 800c334:	602a      	str	r2, [r5, #0]
 800c336:	e7ee      	b.n	800c316 <__swhatbuf_r+0x1c>
 800c338:	2340      	movs	r3, #64	; 0x40
 800c33a:	2000      	movs	r0, #0
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	b016      	add	sp, #88	; 0x58
 800c340:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c344 <__smakebuf_r>:
 800c344:	898b      	ldrh	r3, [r1, #12]
 800c346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c348:	079d      	lsls	r5, r3, #30
 800c34a:	4606      	mov	r6, r0
 800c34c:	460c      	mov	r4, r1
 800c34e:	d507      	bpl.n	800c360 <__smakebuf_r+0x1c>
 800c350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	6123      	str	r3, [r4, #16]
 800c358:	2301      	movs	r3, #1
 800c35a:	6163      	str	r3, [r4, #20]
 800c35c:	b002      	add	sp, #8
 800c35e:	bd70      	pop	{r4, r5, r6, pc}
 800c360:	ab01      	add	r3, sp, #4
 800c362:	466a      	mov	r2, sp
 800c364:	f7ff ffc9 	bl	800c2fa <__swhatbuf_r>
 800c368:	9900      	ldr	r1, [sp, #0]
 800c36a:	4605      	mov	r5, r0
 800c36c:	4630      	mov	r0, r6
 800c36e:	f000 fd5d 	bl	800ce2c <_malloc_r>
 800c372:	b948      	cbnz	r0, 800c388 <__smakebuf_r+0x44>
 800c374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c378:	059a      	lsls	r2, r3, #22
 800c37a:	d4ef      	bmi.n	800c35c <__smakebuf_r+0x18>
 800c37c:	f023 0303 	bic.w	r3, r3, #3
 800c380:	f043 0302 	orr.w	r3, r3, #2
 800c384:	81a3      	strh	r3, [r4, #12]
 800c386:	e7e3      	b.n	800c350 <__smakebuf_r+0xc>
 800c388:	4b0d      	ldr	r3, [pc, #52]	; (800c3c0 <__smakebuf_r+0x7c>)
 800c38a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	6020      	str	r0, [r4, #0]
 800c390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c394:	81a3      	strh	r3, [r4, #12]
 800c396:	9b00      	ldr	r3, [sp, #0]
 800c398:	6163      	str	r3, [r4, #20]
 800c39a:	9b01      	ldr	r3, [sp, #4]
 800c39c:	6120      	str	r0, [r4, #16]
 800c39e:	b15b      	cbz	r3, 800c3b8 <__smakebuf_r+0x74>
 800c3a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f001 f931 	bl	800d60c <_isatty_r>
 800c3aa:	b128      	cbz	r0, 800c3b8 <__smakebuf_r+0x74>
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	f023 0303 	bic.w	r3, r3, #3
 800c3b2:	f043 0301 	orr.w	r3, r3, #1
 800c3b6:	81a3      	strh	r3, [r4, #12]
 800c3b8:	89a0      	ldrh	r0, [r4, #12]
 800c3ba:	4305      	orrs	r5, r0
 800c3bc:	81a5      	strh	r5, [r4, #12]
 800c3be:	e7cd      	b.n	800c35c <__smakebuf_r+0x18>
 800c3c0:	0800ba6d 	.word	0x0800ba6d

0800c3c4 <malloc>:
 800c3c4:	4b02      	ldr	r3, [pc, #8]	; (800c3d0 <malloc+0xc>)
 800c3c6:	4601      	mov	r1, r0
 800c3c8:	6818      	ldr	r0, [r3, #0]
 800c3ca:	f000 bd2f 	b.w	800ce2c <_malloc_r>
 800c3ce:	bf00      	nop
 800c3d0:	20000010 	.word	0x20000010

0800c3d4 <__ascii_mbtowc>:
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	b901      	cbnz	r1, 800c3da <__ascii_mbtowc+0x6>
 800c3d8:	a901      	add	r1, sp, #4
 800c3da:	b142      	cbz	r2, 800c3ee <__ascii_mbtowc+0x1a>
 800c3dc:	b14b      	cbz	r3, 800c3f2 <__ascii_mbtowc+0x1e>
 800c3de:	7813      	ldrb	r3, [r2, #0]
 800c3e0:	600b      	str	r3, [r1, #0]
 800c3e2:	7812      	ldrb	r2, [r2, #0]
 800c3e4:	1e10      	subs	r0, r2, #0
 800c3e6:	bf18      	it	ne
 800c3e8:	2001      	movne	r0, #1
 800c3ea:	b002      	add	sp, #8
 800c3ec:	4770      	bx	lr
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	e7fb      	b.n	800c3ea <__ascii_mbtowc+0x16>
 800c3f2:	f06f 0001 	mvn.w	r0, #1
 800c3f6:	e7f8      	b.n	800c3ea <__ascii_mbtowc+0x16>

0800c3f8 <_Balloc>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	460d      	mov	r5, r1
 800c400:	b976      	cbnz	r6, 800c420 <_Balloc+0x28>
 800c402:	2010      	movs	r0, #16
 800c404:	f7ff ffde 	bl	800c3c4 <malloc>
 800c408:	4602      	mov	r2, r0
 800c40a:	6260      	str	r0, [r4, #36]	; 0x24
 800c40c:	b920      	cbnz	r0, 800c418 <_Balloc+0x20>
 800c40e:	4b18      	ldr	r3, [pc, #96]	; (800c470 <_Balloc+0x78>)
 800c410:	4818      	ldr	r0, [pc, #96]	; (800c474 <_Balloc+0x7c>)
 800c412:	2166      	movs	r1, #102	; 0x66
 800c414:	f001 f8a8 	bl	800d568 <__assert_func>
 800c418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c41c:	6006      	str	r6, [r0, #0]
 800c41e:	60c6      	str	r6, [r0, #12]
 800c420:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c422:	68f3      	ldr	r3, [r6, #12]
 800c424:	b183      	cbz	r3, 800c448 <_Balloc+0x50>
 800c426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c42e:	b9b8      	cbnz	r0, 800c460 <_Balloc+0x68>
 800c430:	2101      	movs	r1, #1
 800c432:	fa01 f605 	lsl.w	r6, r1, r5
 800c436:	1d72      	adds	r2, r6, #5
 800c438:	0092      	lsls	r2, r2, #2
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 fc97 	bl	800cd6e <_calloc_r>
 800c440:	b160      	cbz	r0, 800c45c <_Balloc+0x64>
 800c442:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c446:	e00e      	b.n	800c466 <_Balloc+0x6e>
 800c448:	2221      	movs	r2, #33	; 0x21
 800c44a:	2104      	movs	r1, #4
 800c44c:	4620      	mov	r0, r4
 800c44e:	f000 fc8e 	bl	800cd6e <_calloc_r>
 800c452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c454:	60f0      	str	r0, [r6, #12]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1e4      	bne.n	800c426 <_Balloc+0x2e>
 800c45c:	2000      	movs	r0, #0
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
 800c460:	6802      	ldr	r2, [r0, #0]
 800c462:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c466:	2300      	movs	r3, #0
 800c468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c46c:	e7f7      	b.n	800c45e <_Balloc+0x66>
 800c46e:	bf00      	nop
 800c470:	0800dc6e 	.word	0x0800dc6e
 800c474:	0800ddd8 	.word	0x0800ddd8

0800c478 <_Bfree>:
 800c478:	b570      	push	{r4, r5, r6, lr}
 800c47a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c47c:	4605      	mov	r5, r0
 800c47e:	460c      	mov	r4, r1
 800c480:	b976      	cbnz	r6, 800c4a0 <_Bfree+0x28>
 800c482:	2010      	movs	r0, #16
 800c484:	f7ff ff9e 	bl	800c3c4 <malloc>
 800c488:	4602      	mov	r2, r0
 800c48a:	6268      	str	r0, [r5, #36]	; 0x24
 800c48c:	b920      	cbnz	r0, 800c498 <_Bfree+0x20>
 800c48e:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <_Bfree+0x3c>)
 800c490:	4809      	ldr	r0, [pc, #36]	; (800c4b8 <_Bfree+0x40>)
 800c492:	218a      	movs	r1, #138	; 0x8a
 800c494:	f001 f868 	bl	800d568 <__assert_func>
 800c498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c49c:	6006      	str	r6, [r0, #0]
 800c49e:	60c6      	str	r6, [r0, #12]
 800c4a0:	b13c      	cbz	r4, 800c4b2 <_Bfree+0x3a>
 800c4a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4a4:	6862      	ldr	r2, [r4, #4]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4ac:	6021      	str	r1, [r4, #0]
 800c4ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}
 800c4b4:	0800dc6e 	.word	0x0800dc6e
 800c4b8:	0800ddd8 	.word	0x0800ddd8

0800c4bc <__multadd>:
 800c4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c0:	690e      	ldr	r6, [r1, #16]
 800c4c2:	4607      	mov	r7, r0
 800c4c4:	4698      	mov	r8, r3
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	f101 0014 	add.w	r0, r1, #20
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	6805      	ldr	r5, [r0, #0]
 800c4d0:	b2a9      	uxth	r1, r5
 800c4d2:	fb02 8101 	mla	r1, r2, r1, r8
 800c4d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c4da:	0c2d      	lsrs	r5, r5, #16
 800c4dc:	fb02 c505 	mla	r5, r2, r5, ip
 800c4e0:	b289      	uxth	r1, r1
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c4e8:	429e      	cmp	r6, r3
 800c4ea:	f840 1b04 	str.w	r1, [r0], #4
 800c4ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c4f2:	dcec      	bgt.n	800c4ce <__multadd+0x12>
 800c4f4:	f1b8 0f00 	cmp.w	r8, #0
 800c4f8:	d022      	beq.n	800c540 <__multadd+0x84>
 800c4fa:	68a3      	ldr	r3, [r4, #8]
 800c4fc:	42b3      	cmp	r3, r6
 800c4fe:	dc19      	bgt.n	800c534 <__multadd+0x78>
 800c500:	6861      	ldr	r1, [r4, #4]
 800c502:	4638      	mov	r0, r7
 800c504:	3101      	adds	r1, #1
 800c506:	f7ff ff77 	bl	800c3f8 <_Balloc>
 800c50a:	4605      	mov	r5, r0
 800c50c:	b928      	cbnz	r0, 800c51a <__multadd+0x5e>
 800c50e:	4602      	mov	r2, r0
 800c510:	4b0d      	ldr	r3, [pc, #52]	; (800c548 <__multadd+0x8c>)
 800c512:	480e      	ldr	r0, [pc, #56]	; (800c54c <__multadd+0x90>)
 800c514:	21b5      	movs	r1, #181	; 0xb5
 800c516:	f001 f827 	bl	800d568 <__assert_func>
 800c51a:	6922      	ldr	r2, [r4, #16]
 800c51c:	3202      	adds	r2, #2
 800c51e:	f104 010c 	add.w	r1, r4, #12
 800c522:	0092      	lsls	r2, r2, #2
 800c524:	300c      	adds	r0, #12
 800c526:	f7fc fc8b 	bl	8008e40 <memcpy>
 800c52a:	4621      	mov	r1, r4
 800c52c:	4638      	mov	r0, r7
 800c52e:	f7ff ffa3 	bl	800c478 <_Bfree>
 800c532:	462c      	mov	r4, r5
 800c534:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c538:	3601      	adds	r6, #1
 800c53a:	f8c3 8014 	str.w	r8, [r3, #20]
 800c53e:	6126      	str	r6, [r4, #16]
 800c540:	4620      	mov	r0, r4
 800c542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c546:	bf00      	nop
 800c548:	0800dce4 	.word	0x0800dce4
 800c54c:	0800ddd8 	.word	0x0800ddd8

0800c550 <__s2b>:
 800c550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c554:	460c      	mov	r4, r1
 800c556:	4615      	mov	r5, r2
 800c558:	461f      	mov	r7, r3
 800c55a:	2209      	movs	r2, #9
 800c55c:	3308      	adds	r3, #8
 800c55e:	4606      	mov	r6, r0
 800c560:	fb93 f3f2 	sdiv	r3, r3, r2
 800c564:	2100      	movs	r1, #0
 800c566:	2201      	movs	r2, #1
 800c568:	429a      	cmp	r2, r3
 800c56a:	db09      	blt.n	800c580 <__s2b+0x30>
 800c56c:	4630      	mov	r0, r6
 800c56e:	f7ff ff43 	bl	800c3f8 <_Balloc>
 800c572:	b940      	cbnz	r0, 800c586 <__s2b+0x36>
 800c574:	4602      	mov	r2, r0
 800c576:	4b19      	ldr	r3, [pc, #100]	; (800c5dc <__s2b+0x8c>)
 800c578:	4819      	ldr	r0, [pc, #100]	; (800c5e0 <__s2b+0x90>)
 800c57a:	21ce      	movs	r1, #206	; 0xce
 800c57c:	f000 fff4 	bl	800d568 <__assert_func>
 800c580:	0052      	lsls	r2, r2, #1
 800c582:	3101      	adds	r1, #1
 800c584:	e7f0      	b.n	800c568 <__s2b+0x18>
 800c586:	9b08      	ldr	r3, [sp, #32]
 800c588:	6143      	str	r3, [r0, #20]
 800c58a:	2d09      	cmp	r5, #9
 800c58c:	f04f 0301 	mov.w	r3, #1
 800c590:	6103      	str	r3, [r0, #16]
 800c592:	dd16      	ble.n	800c5c2 <__s2b+0x72>
 800c594:	f104 0909 	add.w	r9, r4, #9
 800c598:	46c8      	mov	r8, r9
 800c59a:	442c      	add	r4, r5
 800c59c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	3b30      	subs	r3, #48	; 0x30
 800c5a4:	220a      	movs	r2, #10
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f7ff ff88 	bl	800c4bc <__multadd>
 800c5ac:	45a0      	cmp	r8, r4
 800c5ae:	d1f5      	bne.n	800c59c <__s2b+0x4c>
 800c5b0:	f1a5 0408 	sub.w	r4, r5, #8
 800c5b4:	444c      	add	r4, r9
 800c5b6:	1b2d      	subs	r5, r5, r4
 800c5b8:	1963      	adds	r3, r4, r5
 800c5ba:	42bb      	cmp	r3, r7
 800c5bc:	db04      	blt.n	800c5c8 <__s2b+0x78>
 800c5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5c2:	340a      	adds	r4, #10
 800c5c4:	2509      	movs	r5, #9
 800c5c6:	e7f6      	b.n	800c5b6 <__s2b+0x66>
 800c5c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	3b30      	subs	r3, #48	; 0x30
 800c5d0:	220a      	movs	r2, #10
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f7ff ff72 	bl	800c4bc <__multadd>
 800c5d8:	e7ee      	b.n	800c5b8 <__s2b+0x68>
 800c5da:	bf00      	nop
 800c5dc:	0800dce4 	.word	0x0800dce4
 800c5e0:	0800ddd8 	.word	0x0800ddd8

0800c5e4 <__hi0bits>:
 800c5e4:	0c03      	lsrs	r3, r0, #16
 800c5e6:	041b      	lsls	r3, r3, #16
 800c5e8:	b9d3      	cbnz	r3, 800c620 <__hi0bits+0x3c>
 800c5ea:	0400      	lsls	r0, r0, #16
 800c5ec:	2310      	movs	r3, #16
 800c5ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c5f2:	bf04      	itt	eq
 800c5f4:	0200      	lsleq	r0, r0, #8
 800c5f6:	3308      	addeq	r3, #8
 800c5f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c5fc:	bf04      	itt	eq
 800c5fe:	0100      	lsleq	r0, r0, #4
 800c600:	3304      	addeq	r3, #4
 800c602:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c606:	bf04      	itt	eq
 800c608:	0080      	lsleq	r0, r0, #2
 800c60a:	3302      	addeq	r3, #2
 800c60c:	2800      	cmp	r0, #0
 800c60e:	db05      	blt.n	800c61c <__hi0bits+0x38>
 800c610:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c614:	f103 0301 	add.w	r3, r3, #1
 800c618:	bf08      	it	eq
 800c61a:	2320      	moveq	r3, #32
 800c61c:	4618      	mov	r0, r3
 800c61e:	4770      	bx	lr
 800c620:	2300      	movs	r3, #0
 800c622:	e7e4      	b.n	800c5ee <__hi0bits+0xa>

0800c624 <__lo0bits>:
 800c624:	6803      	ldr	r3, [r0, #0]
 800c626:	f013 0207 	ands.w	r2, r3, #7
 800c62a:	4601      	mov	r1, r0
 800c62c:	d00b      	beq.n	800c646 <__lo0bits+0x22>
 800c62e:	07da      	lsls	r2, r3, #31
 800c630:	d424      	bmi.n	800c67c <__lo0bits+0x58>
 800c632:	0798      	lsls	r0, r3, #30
 800c634:	bf49      	itett	mi
 800c636:	085b      	lsrmi	r3, r3, #1
 800c638:	089b      	lsrpl	r3, r3, #2
 800c63a:	2001      	movmi	r0, #1
 800c63c:	600b      	strmi	r3, [r1, #0]
 800c63e:	bf5c      	itt	pl
 800c640:	600b      	strpl	r3, [r1, #0]
 800c642:	2002      	movpl	r0, #2
 800c644:	4770      	bx	lr
 800c646:	b298      	uxth	r0, r3
 800c648:	b9b0      	cbnz	r0, 800c678 <__lo0bits+0x54>
 800c64a:	0c1b      	lsrs	r3, r3, #16
 800c64c:	2010      	movs	r0, #16
 800c64e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c652:	bf04      	itt	eq
 800c654:	0a1b      	lsreq	r3, r3, #8
 800c656:	3008      	addeq	r0, #8
 800c658:	071a      	lsls	r2, r3, #28
 800c65a:	bf04      	itt	eq
 800c65c:	091b      	lsreq	r3, r3, #4
 800c65e:	3004      	addeq	r0, #4
 800c660:	079a      	lsls	r2, r3, #30
 800c662:	bf04      	itt	eq
 800c664:	089b      	lsreq	r3, r3, #2
 800c666:	3002      	addeq	r0, #2
 800c668:	07da      	lsls	r2, r3, #31
 800c66a:	d403      	bmi.n	800c674 <__lo0bits+0x50>
 800c66c:	085b      	lsrs	r3, r3, #1
 800c66e:	f100 0001 	add.w	r0, r0, #1
 800c672:	d005      	beq.n	800c680 <__lo0bits+0x5c>
 800c674:	600b      	str	r3, [r1, #0]
 800c676:	4770      	bx	lr
 800c678:	4610      	mov	r0, r2
 800c67a:	e7e8      	b.n	800c64e <__lo0bits+0x2a>
 800c67c:	2000      	movs	r0, #0
 800c67e:	4770      	bx	lr
 800c680:	2020      	movs	r0, #32
 800c682:	4770      	bx	lr

0800c684 <__i2b>:
 800c684:	b510      	push	{r4, lr}
 800c686:	460c      	mov	r4, r1
 800c688:	2101      	movs	r1, #1
 800c68a:	f7ff feb5 	bl	800c3f8 <_Balloc>
 800c68e:	4602      	mov	r2, r0
 800c690:	b928      	cbnz	r0, 800c69e <__i2b+0x1a>
 800c692:	4b05      	ldr	r3, [pc, #20]	; (800c6a8 <__i2b+0x24>)
 800c694:	4805      	ldr	r0, [pc, #20]	; (800c6ac <__i2b+0x28>)
 800c696:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c69a:	f000 ff65 	bl	800d568 <__assert_func>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	6144      	str	r4, [r0, #20]
 800c6a2:	6103      	str	r3, [r0, #16]
 800c6a4:	bd10      	pop	{r4, pc}
 800c6a6:	bf00      	nop
 800c6a8:	0800dce4 	.word	0x0800dce4
 800c6ac:	0800ddd8 	.word	0x0800ddd8

0800c6b0 <__multiply>:
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	4614      	mov	r4, r2
 800c6b6:	690a      	ldr	r2, [r1, #16]
 800c6b8:	6923      	ldr	r3, [r4, #16]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	bfb8      	it	lt
 800c6be:	460b      	movlt	r3, r1
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	bfbc      	itt	lt
 800c6c4:	4625      	movlt	r5, r4
 800c6c6:	461c      	movlt	r4, r3
 800c6c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c6cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c6d0:	68ab      	ldr	r3, [r5, #8]
 800c6d2:	6869      	ldr	r1, [r5, #4]
 800c6d4:	eb0a 0709 	add.w	r7, sl, r9
 800c6d8:	42bb      	cmp	r3, r7
 800c6da:	b085      	sub	sp, #20
 800c6dc:	bfb8      	it	lt
 800c6de:	3101      	addlt	r1, #1
 800c6e0:	f7ff fe8a 	bl	800c3f8 <_Balloc>
 800c6e4:	b930      	cbnz	r0, 800c6f4 <__multiply+0x44>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	4b42      	ldr	r3, [pc, #264]	; (800c7f4 <__multiply+0x144>)
 800c6ea:	4843      	ldr	r0, [pc, #268]	; (800c7f8 <__multiply+0x148>)
 800c6ec:	f240 115d 	movw	r1, #349	; 0x15d
 800c6f0:	f000 ff3a 	bl	800d568 <__assert_func>
 800c6f4:	f100 0614 	add.w	r6, r0, #20
 800c6f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c6fc:	4633      	mov	r3, r6
 800c6fe:	2200      	movs	r2, #0
 800c700:	4543      	cmp	r3, r8
 800c702:	d31e      	bcc.n	800c742 <__multiply+0x92>
 800c704:	f105 0c14 	add.w	ip, r5, #20
 800c708:	f104 0314 	add.w	r3, r4, #20
 800c70c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c710:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c714:	9202      	str	r2, [sp, #8]
 800c716:	ebac 0205 	sub.w	r2, ip, r5
 800c71a:	3a15      	subs	r2, #21
 800c71c:	f022 0203 	bic.w	r2, r2, #3
 800c720:	3204      	adds	r2, #4
 800c722:	f105 0115 	add.w	r1, r5, #21
 800c726:	458c      	cmp	ip, r1
 800c728:	bf38      	it	cc
 800c72a:	2204      	movcc	r2, #4
 800c72c:	9201      	str	r2, [sp, #4]
 800c72e:	9a02      	ldr	r2, [sp, #8]
 800c730:	9303      	str	r3, [sp, #12]
 800c732:	429a      	cmp	r2, r3
 800c734:	d808      	bhi.n	800c748 <__multiply+0x98>
 800c736:	2f00      	cmp	r7, #0
 800c738:	dc55      	bgt.n	800c7e6 <__multiply+0x136>
 800c73a:	6107      	str	r7, [r0, #16]
 800c73c:	b005      	add	sp, #20
 800c73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c742:	f843 2b04 	str.w	r2, [r3], #4
 800c746:	e7db      	b.n	800c700 <__multiply+0x50>
 800c748:	f8b3 a000 	ldrh.w	sl, [r3]
 800c74c:	f1ba 0f00 	cmp.w	sl, #0
 800c750:	d020      	beq.n	800c794 <__multiply+0xe4>
 800c752:	f105 0e14 	add.w	lr, r5, #20
 800c756:	46b1      	mov	r9, r6
 800c758:	2200      	movs	r2, #0
 800c75a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c75e:	f8d9 b000 	ldr.w	fp, [r9]
 800c762:	b2a1      	uxth	r1, r4
 800c764:	fa1f fb8b 	uxth.w	fp, fp
 800c768:	fb0a b101 	mla	r1, sl, r1, fp
 800c76c:	4411      	add	r1, r2
 800c76e:	f8d9 2000 	ldr.w	r2, [r9]
 800c772:	0c24      	lsrs	r4, r4, #16
 800c774:	0c12      	lsrs	r2, r2, #16
 800c776:	fb0a 2404 	mla	r4, sl, r4, r2
 800c77a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c77e:	b289      	uxth	r1, r1
 800c780:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c784:	45f4      	cmp	ip, lr
 800c786:	f849 1b04 	str.w	r1, [r9], #4
 800c78a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c78e:	d8e4      	bhi.n	800c75a <__multiply+0xaa>
 800c790:	9901      	ldr	r1, [sp, #4]
 800c792:	5072      	str	r2, [r6, r1]
 800c794:	9a03      	ldr	r2, [sp, #12]
 800c796:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c79a:	3304      	adds	r3, #4
 800c79c:	f1b9 0f00 	cmp.w	r9, #0
 800c7a0:	d01f      	beq.n	800c7e2 <__multiply+0x132>
 800c7a2:	6834      	ldr	r4, [r6, #0]
 800c7a4:	f105 0114 	add.w	r1, r5, #20
 800c7a8:	46b6      	mov	lr, r6
 800c7aa:	f04f 0a00 	mov.w	sl, #0
 800c7ae:	880a      	ldrh	r2, [r1, #0]
 800c7b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c7b4:	fb09 b202 	mla	r2, r9, r2, fp
 800c7b8:	4492      	add	sl, r2
 800c7ba:	b2a4      	uxth	r4, r4
 800c7bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c7c0:	f84e 4b04 	str.w	r4, [lr], #4
 800c7c4:	f851 4b04 	ldr.w	r4, [r1], #4
 800c7c8:	f8be 2000 	ldrh.w	r2, [lr]
 800c7cc:	0c24      	lsrs	r4, r4, #16
 800c7ce:	fb09 2404 	mla	r4, r9, r4, r2
 800c7d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c7d6:	458c      	cmp	ip, r1
 800c7d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c7dc:	d8e7      	bhi.n	800c7ae <__multiply+0xfe>
 800c7de:	9a01      	ldr	r2, [sp, #4]
 800c7e0:	50b4      	str	r4, [r6, r2]
 800c7e2:	3604      	adds	r6, #4
 800c7e4:	e7a3      	b.n	800c72e <__multiply+0x7e>
 800c7e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1a5      	bne.n	800c73a <__multiply+0x8a>
 800c7ee:	3f01      	subs	r7, #1
 800c7f0:	e7a1      	b.n	800c736 <__multiply+0x86>
 800c7f2:	bf00      	nop
 800c7f4:	0800dce4 	.word	0x0800dce4
 800c7f8:	0800ddd8 	.word	0x0800ddd8

0800c7fc <__pow5mult>:
 800c7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c800:	4615      	mov	r5, r2
 800c802:	f012 0203 	ands.w	r2, r2, #3
 800c806:	4606      	mov	r6, r0
 800c808:	460f      	mov	r7, r1
 800c80a:	d007      	beq.n	800c81c <__pow5mult+0x20>
 800c80c:	4c25      	ldr	r4, [pc, #148]	; (800c8a4 <__pow5mult+0xa8>)
 800c80e:	3a01      	subs	r2, #1
 800c810:	2300      	movs	r3, #0
 800c812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c816:	f7ff fe51 	bl	800c4bc <__multadd>
 800c81a:	4607      	mov	r7, r0
 800c81c:	10ad      	asrs	r5, r5, #2
 800c81e:	d03d      	beq.n	800c89c <__pow5mult+0xa0>
 800c820:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c822:	b97c      	cbnz	r4, 800c844 <__pow5mult+0x48>
 800c824:	2010      	movs	r0, #16
 800c826:	f7ff fdcd 	bl	800c3c4 <malloc>
 800c82a:	4602      	mov	r2, r0
 800c82c:	6270      	str	r0, [r6, #36]	; 0x24
 800c82e:	b928      	cbnz	r0, 800c83c <__pow5mult+0x40>
 800c830:	4b1d      	ldr	r3, [pc, #116]	; (800c8a8 <__pow5mult+0xac>)
 800c832:	481e      	ldr	r0, [pc, #120]	; (800c8ac <__pow5mult+0xb0>)
 800c834:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c838:	f000 fe96 	bl	800d568 <__assert_func>
 800c83c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c840:	6004      	str	r4, [r0, #0]
 800c842:	60c4      	str	r4, [r0, #12]
 800c844:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c84c:	b94c      	cbnz	r4, 800c862 <__pow5mult+0x66>
 800c84e:	f240 2171 	movw	r1, #625	; 0x271
 800c852:	4630      	mov	r0, r6
 800c854:	f7ff ff16 	bl	800c684 <__i2b>
 800c858:	2300      	movs	r3, #0
 800c85a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c85e:	4604      	mov	r4, r0
 800c860:	6003      	str	r3, [r0, #0]
 800c862:	f04f 0900 	mov.w	r9, #0
 800c866:	07eb      	lsls	r3, r5, #31
 800c868:	d50a      	bpl.n	800c880 <__pow5mult+0x84>
 800c86a:	4639      	mov	r1, r7
 800c86c:	4622      	mov	r2, r4
 800c86e:	4630      	mov	r0, r6
 800c870:	f7ff ff1e 	bl	800c6b0 <__multiply>
 800c874:	4639      	mov	r1, r7
 800c876:	4680      	mov	r8, r0
 800c878:	4630      	mov	r0, r6
 800c87a:	f7ff fdfd 	bl	800c478 <_Bfree>
 800c87e:	4647      	mov	r7, r8
 800c880:	106d      	asrs	r5, r5, #1
 800c882:	d00b      	beq.n	800c89c <__pow5mult+0xa0>
 800c884:	6820      	ldr	r0, [r4, #0]
 800c886:	b938      	cbnz	r0, 800c898 <__pow5mult+0x9c>
 800c888:	4622      	mov	r2, r4
 800c88a:	4621      	mov	r1, r4
 800c88c:	4630      	mov	r0, r6
 800c88e:	f7ff ff0f 	bl	800c6b0 <__multiply>
 800c892:	6020      	str	r0, [r4, #0]
 800c894:	f8c0 9000 	str.w	r9, [r0]
 800c898:	4604      	mov	r4, r0
 800c89a:	e7e4      	b.n	800c866 <__pow5mult+0x6a>
 800c89c:	4638      	mov	r0, r7
 800c89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8a2:	bf00      	nop
 800c8a4:	0800df28 	.word	0x0800df28
 800c8a8:	0800dc6e 	.word	0x0800dc6e
 800c8ac:	0800ddd8 	.word	0x0800ddd8

0800c8b0 <__lshift>:
 800c8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b4:	460c      	mov	r4, r1
 800c8b6:	6849      	ldr	r1, [r1, #4]
 800c8b8:	6923      	ldr	r3, [r4, #16]
 800c8ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8be:	68a3      	ldr	r3, [r4, #8]
 800c8c0:	4607      	mov	r7, r0
 800c8c2:	4691      	mov	r9, r2
 800c8c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8c8:	f108 0601 	add.w	r6, r8, #1
 800c8cc:	42b3      	cmp	r3, r6
 800c8ce:	db0b      	blt.n	800c8e8 <__lshift+0x38>
 800c8d0:	4638      	mov	r0, r7
 800c8d2:	f7ff fd91 	bl	800c3f8 <_Balloc>
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	b948      	cbnz	r0, 800c8ee <__lshift+0x3e>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	4b28      	ldr	r3, [pc, #160]	; (800c980 <__lshift+0xd0>)
 800c8de:	4829      	ldr	r0, [pc, #164]	; (800c984 <__lshift+0xd4>)
 800c8e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c8e4:	f000 fe40 	bl	800d568 <__assert_func>
 800c8e8:	3101      	adds	r1, #1
 800c8ea:	005b      	lsls	r3, r3, #1
 800c8ec:	e7ee      	b.n	800c8cc <__lshift+0x1c>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f100 0114 	add.w	r1, r0, #20
 800c8f4:	f100 0210 	add.w	r2, r0, #16
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	4553      	cmp	r3, sl
 800c8fc:	db33      	blt.n	800c966 <__lshift+0xb6>
 800c8fe:	6920      	ldr	r0, [r4, #16]
 800c900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c904:	f104 0314 	add.w	r3, r4, #20
 800c908:	f019 091f 	ands.w	r9, r9, #31
 800c90c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c910:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c914:	d02b      	beq.n	800c96e <__lshift+0xbe>
 800c916:	f1c9 0e20 	rsb	lr, r9, #32
 800c91a:	468a      	mov	sl, r1
 800c91c:	2200      	movs	r2, #0
 800c91e:	6818      	ldr	r0, [r3, #0]
 800c920:	fa00 f009 	lsl.w	r0, r0, r9
 800c924:	4302      	orrs	r2, r0
 800c926:	f84a 2b04 	str.w	r2, [sl], #4
 800c92a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c92e:	459c      	cmp	ip, r3
 800c930:	fa22 f20e 	lsr.w	r2, r2, lr
 800c934:	d8f3      	bhi.n	800c91e <__lshift+0x6e>
 800c936:	ebac 0304 	sub.w	r3, ip, r4
 800c93a:	3b15      	subs	r3, #21
 800c93c:	f023 0303 	bic.w	r3, r3, #3
 800c940:	3304      	adds	r3, #4
 800c942:	f104 0015 	add.w	r0, r4, #21
 800c946:	4584      	cmp	ip, r0
 800c948:	bf38      	it	cc
 800c94a:	2304      	movcc	r3, #4
 800c94c:	50ca      	str	r2, [r1, r3]
 800c94e:	b10a      	cbz	r2, 800c954 <__lshift+0xa4>
 800c950:	f108 0602 	add.w	r6, r8, #2
 800c954:	3e01      	subs	r6, #1
 800c956:	4638      	mov	r0, r7
 800c958:	612e      	str	r6, [r5, #16]
 800c95a:	4621      	mov	r1, r4
 800c95c:	f7ff fd8c 	bl	800c478 <_Bfree>
 800c960:	4628      	mov	r0, r5
 800c962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c966:	f842 0f04 	str.w	r0, [r2, #4]!
 800c96a:	3301      	adds	r3, #1
 800c96c:	e7c5      	b.n	800c8fa <__lshift+0x4a>
 800c96e:	3904      	subs	r1, #4
 800c970:	f853 2b04 	ldr.w	r2, [r3], #4
 800c974:	f841 2f04 	str.w	r2, [r1, #4]!
 800c978:	459c      	cmp	ip, r3
 800c97a:	d8f9      	bhi.n	800c970 <__lshift+0xc0>
 800c97c:	e7ea      	b.n	800c954 <__lshift+0xa4>
 800c97e:	bf00      	nop
 800c980:	0800dce4 	.word	0x0800dce4
 800c984:	0800ddd8 	.word	0x0800ddd8

0800c988 <__mcmp>:
 800c988:	b530      	push	{r4, r5, lr}
 800c98a:	6902      	ldr	r2, [r0, #16]
 800c98c:	690c      	ldr	r4, [r1, #16]
 800c98e:	1b12      	subs	r2, r2, r4
 800c990:	d10e      	bne.n	800c9b0 <__mcmp+0x28>
 800c992:	f100 0314 	add.w	r3, r0, #20
 800c996:	3114      	adds	r1, #20
 800c998:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c99c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9a8:	42a5      	cmp	r5, r4
 800c9aa:	d003      	beq.n	800c9b4 <__mcmp+0x2c>
 800c9ac:	d305      	bcc.n	800c9ba <__mcmp+0x32>
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	bd30      	pop	{r4, r5, pc}
 800c9b4:	4283      	cmp	r3, r0
 800c9b6:	d3f3      	bcc.n	800c9a0 <__mcmp+0x18>
 800c9b8:	e7fa      	b.n	800c9b0 <__mcmp+0x28>
 800c9ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9be:	e7f7      	b.n	800c9b0 <__mcmp+0x28>

0800c9c0 <__mdiff>:
 800c9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	460c      	mov	r4, r1
 800c9c6:	4606      	mov	r6, r0
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	4617      	mov	r7, r2
 800c9ce:	f7ff ffdb 	bl	800c988 <__mcmp>
 800c9d2:	1e05      	subs	r5, r0, #0
 800c9d4:	d110      	bne.n	800c9f8 <__mdiff+0x38>
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	4630      	mov	r0, r6
 800c9da:	f7ff fd0d 	bl	800c3f8 <_Balloc>
 800c9de:	b930      	cbnz	r0, 800c9ee <__mdiff+0x2e>
 800c9e0:	4b39      	ldr	r3, [pc, #228]	; (800cac8 <__mdiff+0x108>)
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	f240 2132 	movw	r1, #562	; 0x232
 800c9e8:	4838      	ldr	r0, [pc, #224]	; (800cacc <__mdiff+0x10c>)
 800c9ea:	f000 fdbd 	bl	800d568 <__assert_func>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f8:	bfa4      	itt	ge
 800c9fa:	463b      	movge	r3, r7
 800c9fc:	4627      	movge	r7, r4
 800c9fe:	4630      	mov	r0, r6
 800ca00:	6879      	ldr	r1, [r7, #4]
 800ca02:	bfa6      	itte	ge
 800ca04:	461c      	movge	r4, r3
 800ca06:	2500      	movge	r5, #0
 800ca08:	2501      	movlt	r5, #1
 800ca0a:	f7ff fcf5 	bl	800c3f8 <_Balloc>
 800ca0e:	b920      	cbnz	r0, 800ca1a <__mdiff+0x5a>
 800ca10:	4b2d      	ldr	r3, [pc, #180]	; (800cac8 <__mdiff+0x108>)
 800ca12:	4602      	mov	r2, r0
 800ca14:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca18:	e7e6      	b.n	800c9e8 <__mdiff+0x28>
 800ca1a:	693e      	ldr	r6, [r7, #16]
 800ca1c:	60c5      	str	r5, [r0, #12]
 800ca1e:	6925      	ldr	r5, [r4, #16]
 800ca20:	f107 0114 	add.w	r1, r7, #20
 800ca24:	f104 0914 	add.w	r9, r4, #20
 800ca28:	f100 0e14 	add.w	lr, r0, #20
 800ca2c:	f107 0210 	add.w	r2, r7, #16
 800ca30:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ca34:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ca38:	46f2      	mov	sl, lr
 800ca3a:	2700      	movs	r7, #0
 800ca3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca44:	fa1f f883 	uxth.w	r8, r3
 800ca48:	fa17 f78b 	uxtah	r7, r7, fp
 800ca4c:	0c1b      	lsrs	r3, r3, #16
 800ca4e:	eba7 0808 	sub.w	r8, r7, r8
 800ca52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca5a:	fa1f f888 	uxth.w	r8, r8
 800ca5e:	141f      	asrs	r7, r3, #16
 800ca60:	454d      	cmp	r5, r9
 800ca62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca66:	f84a 3b04 	str.w	r3, [sl], #4
 800ca6a:	d8e7      	bhi.n	800ca3c <__mdiff+0x7c>
 800ca6c:	1b2b      	subs	r3, r5, r4
 800ca6e:	3b15      	subs	r3, #21
 800ca70:	f023 0303 	bic.w	r3, r3, #3
 800ca74:	3304      	adds	r3, #4
 800ca76:	3415      	adds	r4, #21
 800ca78:	42a5      	cmp	r5, r4
 800ca7a:	bf38      	it	cc
 800ca7c:	2304      	movcc	r3, #4
 800ca7e:	4419      	add	r1, r3
 800ca80:	4473      	add	r3, lr
 800ca82:	469e      	mov	lr, r3
 800ca84:	460d      	mov	r5, r1
 800ca86:	4565      	cmp	r5, ip
 800ca88:	d30e      	bcc.n	800caa8 <__mdiff+0xe8>
 800ca8a:	f10c 0203 	add.w	r2, ip, #3
 800ca8e:	1a52      	subs	r2, r2, r1
 800ca90:	f022 0203 	bic.w	r2, r2, #3
 800ca94:	3903      	subs	r1, #3
 800ca96:	458c      	cmp	ip, r1
 800ca98:	bf38      	it	cc
 800ca9a:	2200      	movcc	r2, #0
 800ca9c:	441a      	add	r2, r3
 800ca9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800caa2:	b17b      	cbz	r3, 800cac4 <__mdiff+0x104>
 800caa4:	6106      	str	r6, [r0, #16]
 800caa6:	e7a5      	b.n	800c9f4 <__mdiff+0x34>
 800caa8:	f855 8b04 	ldr.w	r8, [r5], #4
 800caac:	fa17 f488 	uxtah	r4, r7, r8
 800cab0:	1422      	asrs	r2, r4, #16
 800cab2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cab6:	b2a4      	uxth	r4, r4
 800cab8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cabc:	f84e 4b04 	str.w	r4, [lr], #4
 800cac0:	1417      	asrs	r7, r2, #16
 800cac2:	e7e0      	b.n	800ca86 <__mdiff+0xc6>
 800cac4:	3e01      	subs	r6, #1
 800cac6:	e7ea      	b.n	800ca9e <__mdiff+0xde>
 800cac8:	0800dce4 	.word	0x0800dce4
 800cacc:	0800ddd8 	.word	0x0800ddd8

0800cad0 <__ulp>:
 800cad0:	b082      	sub	sp, #8
 800cad2:	ed8d 0b00 	vstr	d0, [sp]
 800cad6:	9b01      	ldr	r3, [sp, #4]
 800cad8:	4912      	ldr	r1, [pc, #72]	; (800cb24 <__ulp+0x54>)
 800cada:	4019      	ands	r1, r3
 800cadc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cae0:	2900      	cmp	r1, #0
 800cae2:	dd05      	ble.n	800caf0 <__ulp+0x20>
 800cae4:	2200      	movs	r2, #0
 800cae6:	460b      	mov	r3, r1
 800cae8:	ec43 2b10 	vmov	d0, r2, r3
 800caec:	b002      	add	sp, #8
 800caee:	4770      	bx	lr
 800caf0:	4249      	negs	r1, r1
 800caf2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800caf6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cafa:	f04f 0200 	mov.w	r2, #0
 800cafe:	f04f 0300 	mov.w	r3, #0
 800cb02:	da04      	bge.n	800cb0e <__ulp+0x3e>
 800cb04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cb08:	fa41 f300 	asr.w	r3, r1, r0
 800cb0c:	e7ec      	b.n	800cae8 <__ulp+0x18>
 800cb0e:	f1a0 0114 	sub.w	r1, r0, #20
 800cb12:	291e      	cmp	r1, #30
 800cb14:	bfda      	itte	le
 800cb16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cb1a:	fa20 f101 	lsrle.w	r1, r0, r1
 800cb1e:	2101      	movgt	r1, #1
 800cb20:	460a      	mov	r2, r1
 800cb22:	e7e1      	b.n	800cae8 <__ulp+0x18>
 800cb24:	7ff00000 	.word	0x7ff00000

0800cb28 <__b2d>:
 800cb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb2a:	6905      	ldr	r5, [r0, #16]
 800cb2c:	f100 0714 	add.w	r7, r0, #20
 800cb30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cb34:	1f2e      	subs	r6, r5, #4
 800cb36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f7ff fd52 	bl	800c5e4 <__hi0bits>
 800cb40:	f1c0 0320 	rsb	r3, r0, #32
 800cb44:	280a      	cmp	r0, #10
 800cb46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cbc4 <__b2d+0x9c>
 800cb4a:	600b      	str	r3, [r1, #0]
 800cb4c:	dc14      	bgt.n	800cb78 <__b2d+0x50>
 800cb4e:	f1c0 0e0b 	rsb	lr, r0, #11
 800cb52:	fa24 f10e 	lsr.w	r1, r4, lr
 800cb56:	42b7      	cmp	r7, r6
 800cb58:	ea41 030c 	orr.w	r3, r1, ip
 800cb5c:	bf34      	ite	cc
 800cb5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cb62:	2100      	movcs	r1, #0
 800cb64:	3015      	adds	r0, #21
 800cb66:	fa04 f000 	lsl.w	r0, r4, r0
 800cb6a:	fa21 f10e 	lsr.w	r1, r1, lr
 800cb6e:	ea40 0201 	orr.w	r2, r0, r1
 800cb72:	ec43 2b10 	vmov	d0, r2, r3
 800cb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb78:	42b7      	cmp	r7, r6
 800cb7a:	bf3a      	itte	cc
 800cb7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cb80:	f1a5 0608 	subcc.w	r6, r5, #8
 800cb84:	2100      	movcs	r1, #0
 800cb86:	380b      	subs	r0, #11
 800cb88:	d017      	beq.n	800cbba <__b2d+0x92>
 800cb8a:	f1c0 0c20 	rsb	ip, r0, #32
 800cb8e:	fa04 f500 	lsl.w	r5, r4, r0
 800cb92:	42be      	cmp	r6, r7
 800cb94:	fa21 f40c 	lsr.w	r4, r1, ip
 800cb98:	ea45 0504 	orr.w	r5, r5, r4
 800cb9c:	bf8c      	ite	hi
 800cb9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cba2:	2400      	movls	r4, #0
 800cba4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cba8:	fa01 f000 	lsl.w	r0, r1, r0
 800cbac:	fa24 f40c 	lsr.w	r4, r4, ip
 800cbb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cbb4:	ea40 0204 	orr.w	r2, r0, r4
 800cbb8:	e7db      	b.n	800cb72 <__b2d+0x4a>
 800cbba:	ea44 030c 	orr.w	r3, r4, ip
 800cbbe:	460a      	mov	r2, r1
 800cbc0:	e7d7      	b.n	800cb72 <__b2d+0x4a>
 800cbc2:	bf00      	nop
 800cbc4:	3ff00000 	.word	0x3ff00000

0800cbc8 <__d2b>:
 800cbc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbcc:	4689      	mov	r9, r1
 800cbce:	2101      	movs	r1, #1
 800cbd0:	ec57 6b10 	vmov	r6, r7, d0
 800cbd4:	4690      	mov	r8, r2
 800cbd6:	f7ff fc0f 	bl	800c3f8 <_Balloc>
 800cbda:	4604      	mov	r4, r0
 800cbdc:	b930      	cbnz	r0, 800cbec <__d2b+0x24>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	4b25      	ldr	r3, [pc, #148]	; (800cc78 <__d2b+0xb0>)
 800cbe2:	4826      	ldr	r0, [pc, #152]	; (800cc7c <__d2b+0xb4>)
 800cbe4:	f240 310a 	movw	r1, #778	; 0x30a
 800cbe8:	f000 fcbe 	bl	800d568 <__assert_func>
 800cbec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cbf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cbf4:	bb35      	cbnz	r5, 800cc44 <__d2b+0x7c>
 800cbf6:	2e00      	cmp	r6, #0
 800cbf8:	9301      	str	r3, [sp, #4]
 800cbfa:	d028      	beq.n	800cc4e <__d2b+0x86>
 800cbfc:	4668      	mov	r0, sp
 800cbfe:	9600      	str	r6, [sp, #0]
 800cc00:	f7ff fd10 	bl	800c624 <__lo0bits>
 800cc04:	9900      	ldr	r1, [sp, #0]
 800cc06:	b300      	cbz	r0, 800cc4a <__d2b+0x82>
 800cc08:	9a01      	ldr	r2, [sp, #4]
 800cc0a:	f1c0 0320 	rsb	r3, r0, #32
 800cc0e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc12:	430b      	orrs	r3, r1
 800cc14:	40c2      	lsrs	r2, r0
 800cc16:	6163      	str	r3, [r4, #20]
 800cc18:	9201      	str	r2, [sp, #4]
 800cc1a:	9b01      	ldr	r3, [sp, #4]
 800cc1c:	61a3      	str	r3, [r4, #24]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	bf14      	ite	ne
 800cc22:	2202      	movne	r2, #2
 800cc24:	2201      	moveq	r2, #1
 800cc26:	6122      	str	r2, [r4, #16]
 800cc28:	b1d5      	cbz	r5, 800cc60 <__d2b+0x98>
 800cc2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc2e:	4405      	add	r5, r0
 800cc30:	f8c9 5000 	str.w	r5, [r9]
 800cc34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc38:	f8c8 0000 	str.w	r0, [r8]
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	b003      	add	sp, #12
 800cc40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc48:	e7d5      	b.n	800cbf6 <__d2b+0x2e>
 800cc4a:	6161      	str	r1, [r4, #20]
 800cc4c:	e7e5      	b.n	800cc1a <__d2b+0x52>
 800cc4e:	a801      	add	r0, sp, #4
 800cc50:	f7ff fce8 	bl	800c624 <__lo0bits>
 800cc54:	9b01      	ldr	r3, [sp, #4]
 800cc56:	6163      	str	r3, [r4, #20]
 800cc58:	2201      	movs	r2, #1
 800cc5a:	6122      	str	r2, [r4, #16]
 800cc5c:	3020      	adds	r0, #32
 800cc5e:	e7e3      	b.n	800cc28 <__d2b+0x60>
 800cc60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc68:	f8c9 0000 	str.w	r0, [r9]
 800cc6c:	6918      	ldr	r0, [r3, #16]
 800cc6e:	f7ff fcb9 	bl	800c5e4 <__hi0bits>
 800cc72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc76:	e7df      	b.n	800cc38 <__d2b+0x70>
 800cc78:	0800dce4 	.word	0x0800dce4
 800cc7c:	0800ddd8 	.word	0x0800ddd8

0800cc80 <__ratio>:
 800cc80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc84:	4688      	mov	r8, r1
 800cc86:	4669      	mov	r1, sp
 800cc88:	4681      	mov	r9, r0
 800cc8a:	f7ff ff4d 	bl	800cb28 <__b2d>
 800cc8e:	a901      	add	r1, sp, #4
 800cc90:	4640      	mov	r0, r8
 800cc92:	ec55 4b10 	vmov	r4, r5, d0
 800cc96:	f7ff ff47 	bl	800cb28 <__b2d>
 800cc9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cca2:	eba3 0c02 	sub.w	ip, r3, r2
 800cca6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ccaa:	1a9b      	subs	r3, r3, r2
 800ccac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ccb0:	ec51 0b10 	vmov	r0, r1, d0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	bfd6      	itet	le
 800ccb8:	460a      	movle	r2, r1
 800ccba:	462a      	movgt	r2, r5
 800ccbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ccc0:	468b      	mov	fp, r1
 800ccc2:	462f      	mov	r7, r5
 800ccc4:	bfd4      	ite	le
 800ccc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ccca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ccce:	4620      	mov	r0, r4
 800ccd0:	ee10 2a10 	vmov	r2, s0
 800ccd4:	465b      	mov	r3, fp
 800ccd6:	4639      	mov	r1, r7
 800ccd8:	f7f3 fdb8 	bl	800084c <__aeabi_ddiv>
 800ccdc:	ec41 0b10 	vmov	d0, r0, r1
 800cce0:	b003      	add	sp, #12
 800cce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cce6 <__copybits>:
 800cce6:	3901      	subs	r1, #1
 800cce8:	b570      	push	{r4, r5, r6, lr}
 800ccea:	1149      	asrs	r1, r1, #5
 800ccec:	6914      	ldr	r4, [r2, #16]
 800ccee:	3101      	adds	r1, #1
 800ccf0:	f102 0314 	add.w	r3, r2, #20
 800ccf4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ccf8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ccfc:	1f05      	subs	r5, r0, #4
 800ccfe:	42a3      	cmp	r3, r4
 800cd00:	d30c      	bcc.n	800cd1c <__copybits+0x36>
 800cd02:	1aa3      	subs	r3, r4, r2
 800cd04:	3b11      	subs	r3, #17
 800cd06:	f023 0303 	bic.w	r3, r3, #3
 800cd0a:	3211      	adds	r2, #17
 800cd0c:	42a2      	cmp	r2, r4
 800cd0e:	bf88      	it	hi
 800cd10:	2300      	movhi	r3, #0
 800cd12:	4418      	add	r0, r3
 800cd14:	2300      	movs	r3, #0
 800cd16:	4288      	cmp	r0, r1
 800cd18:	d305      	bcc.n	800cd26 <__copybits+0x40>
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd20:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd24:	e7eb      	b.n	800ccfe <__copybits+0x18>
 800cd26:	f840 3b04 	str.w	r3, [r0], #4
 800cd2a:	e7f4      	b.n	800cd16 <__copybits+0x30>

0800cd2c <__any_on>:
 800cd2c:	f100 0214 	add.w	r2, r0, #20
 800cd30:	6900      	ldr	r0, [r0, #16]
 800cd32:	114b      	asrs	r3, r1, #5
 800cd34:	4298      	cmp	r0, r3
 800cd36:	b510      	push	{r4, lr}
 800cd38:	db11      	blt.n	800cd5e <__any_on+0x32>
 800cd3a:	dd0a      	ble.n	800cd52 <__any_on+0x26>
 800cd3c:	f011 011f 	ands.w	r1, r1, #31
 800cd40:	d007      	beq.n	800cd52 <__any_on+0x26>
 800cd42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cd46:	fa24 f001 	lsr.w	r0, r4, r1
 800cd4a:	fa00 f101 	lsl.w	r1, r0, r1
 800cd4e:	428c      	cmp	r4, r1
 800cd50:	d10b      	bne.n	800cd6a <__any_on+0x3e>
 800cd52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d803      	bhi.n	800cd62 <__any_on+0x36>
 800cd5a:	2000      	movs	r0, #0
 800cd5c:	bd10      	pop	{r4, pc}
 800cd5e:	4603      	mov	r3, r0
 800cd60:	e7f7      	b.n	800cd52 <__any_on+0x26>
 800cd62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd66:	2900      	cmp	r1, #0
 800cd68:	d0f5      	beq.n	800cd56 <__any_on+0x2a>
 800cd6a:	2001      	movs	r0, #1
 800cd6c:	e7f6      	b.n	800cd5c <__any_on+0x30>

0800cd6e <_calloc_r>:
 800cd6e:	b513      	push	{r0, r1, r4, lr}
 800cd70:	434a      	muls	r2, r1
 800cd72:	4611      	mov	r1, r2
 800cd74:	9201      	str	r2, [sp, #4]
 800cd76:	f000 f859 	bl	800ce2c <_malloc_r>
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	b118      	cbz	r0, 800cd86 <_calloc_r+0x18>
 800cd7e:	9a01      	ldr	r2, [sp, #4]
 800cd80:	2100      	movs	r1, #0
 800cd82:	f7fc f86b 	bl	8008e5c <memset>
 800cd86:	4620      	mov	r0, r4
 800cd88:	b002      	add	sp, #8
 800cd8a:	bd10      	pop	{r4, pc}

0800cd8c <_free_r>:
 800cd8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd8e:	2900      	cmp	r1, #0
 800cd90:	d048      	beq.n	800ce24 <_free_r+0x98>
 800cd92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd96:	9001      	str	r0, [sp, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f1a1 0404 	sub.w	r4, r1, #4
 800cd9e:	bfb8      	it	lt
 800cda0:	18e4      	addlt	r4, r4, r3
 800cda2:	f000 fc6f 	bl	800d684 <__malloc_lock>
 800cda6:	4a20      	ldr	r2, [pc, #128]	; (800ce28 <_free_r+0x9c>)
 800cda8:	9801      	ldr	r0, [sp, #4]
 800cdaa:	6813      	ldr	r3, [r2, #0]
 800cdac:	4615      	mov	r5, r2
 800cdae:	b933      	cbnz	r3, 800cdbe <_free_r+0x32>
 800cdb0:	6063      	str	r3, [r4, #4]
 800cdb2:	6014      	str	r4, [r2, #0]
 800cdb4:	b003      	add	sp, #12
 800cdb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdba:	f000 bc69 	b.w	800d690 <__malloc_unlock>
 800cdbe:	42a3      	cmp	r3, r4
 800cdc0:	d90b      	bls.n	800cdda <_free_r+0x4e>
 800cdc2:	6821      	ldr	r1, [r4, #0]
 800cdc4:	1862      	adds	r2, r4, r1
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	bf04      	itt	eq
 800cdca:	681a      	ldreq	r2, [r3, #0]
 800cdcc:	685b      	ldreq	r3, [r3, #4]
 800cdce:	6063      	str	r3, [r4, #4]
 800cdd0:	bf04      	itt	eq
 800cdd2:	1852      	addeq	r2, r2, r1
 800cdd4:	6022      	streq	r2, [r4, #0]
 800cdd6:	602c      	str	r4, [r5, #0]
 800cdd8:	e7ec      	b.n	800cdb4 <_free_r+0x28>
 800cdda:	461a      	mov	r2, r3
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	b10b      	cbz	r3, 800cde4 <_free_r+0x58>
 800cde0:	42a3      	cmp	r3, r4
 800cde2:	d9fa      	bls.n	800cdda <_free_r+0x4e>
 800cde4:	6811      	ldr	r1, [r2, #0]
 800cde6:	1855      	adds	r5, r2, r1
 800cde8:	42a5      	cmp	r5, r4
 800cdea:	d10b      	bne.n	800ce04 <_free_r+0x78>
 800cdec:	6824      	ldr	r4, [r4, #0]
 800cdee:	4421      	add	r1, r4
 800cdf0:	1854      	adds	r4, r2, r1
 800cdf2:	42a3      	cmp	r3, r4
 800cdf4:	6011      	str	r1, [r2, #0]
 800cdf6:	d1dd      	bne.n	800cdb4 <_free_r+0x28>
 800cdf8:	681c      	ldr	r4, [r3, #0]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	6053      	str	r3, [r2, #4]
 800cdfe:	4421      	add	r1, r4
 800ce00:	6011      	str	r1, [r2, #0]
 800ce02:	e7d7      	b.n	800cdb4 <_free_r+0x28>
 800ce04:	d902      	bls.n	800ce0c <_free_r+0x80>
 800ce06:	230c      	movs	r3, #12
 800ce08:	6003      	str	r3, [r0, #0]
 800ce0a:	e7d3      	b.n	800cdb4 <_free_r+0x28>
 800ce0c:	6825      	ldr	r5, [r4, #0]
 800ce0e:	1961      	adds	r1, r4, r5
 800ce10:	428b      	cmp	r3, r1
 800ce12:	bf04      	itt	eq
 800ce14:	6819      	ldreq	r1, [r3, #0]
 800ce16:	685b      	ldreq	r3, [r3, #4]
 800ce18:	6063      	str	r3, [r4, #4]
 800ce1a:	bf04      	itt	eq
 800ce1c:	1949      	addeq	r1, r1, r5
 800ce1e:	6021      	streq	r1, [r4, #0]
 800ce20:	6054      	str	r4, [r2, #4]
 800ce22:	e7c7      	b.n	800cdb4 <_free_r+0x28>
 800ce24:	b003      	add	sp, #12
 800ce26:	bd30      	pop	{r4, r5, pc}
 800ce28:	20001acc 	.word	0x20001acc

0800ce2c <_malloc_r>:
 800ce2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2e:	1ccd      	adds	r5, r1, #3
 800ce30:	f025 0503 	bic.w	r5, r5, #3
 800ce34:	3508      	adds	r5, #8
 800ce36:	2d0c      	cmp	r5, #12
 800ce38:	bf38      	it	cc
 800ce3a:	250c      	movcc	r5, #12
 800ce3c:	2d00      	cmp	r5, #0
 800ce3e:	4606      	mov	r6, r0
 800ce40:	db01      	blt.n	800ce46 <_malloc_r+0x1a>
 800ce42:	42a9      	cmp	r1, r5
 800ce44:	d903      	bls.n	800ce4e <_malloc_r+0x22>
 800ce46:	230c      	movs	r3, #12
 800ce48:	6033      	str	r3, [r6, #0]
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce4e:	f000 fc19 	bl	800d684 <__malloc_lock>
 800ce52:	4921      	ldr	r1, [pc, #132]	; (800ced8 <_malloc_r+0xac>)
 800ce54:	680a      	ldr	r2, [r1, #0]
 800ce56:	4614      	mov	r4, r2
 800ce58:	b99c      	cbnz	r4, 800ce82 <_malloc_r+0x56>
 800ce5a:	4f20      	ldr	r7, [pc, #128]	; (800cedc <_malloc_r+0xb0>)
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	b923      	cbnz	r3, 800ce6a <_malloc_r+0x3e>
 800ce60:	4621      	mov	r1, r4
 800ce62:	4630      	mov	r0, r6
 800ce64:	f000 fafc 	bl	800d460 <_sbrk_r>
 800ce68:	6038      	str	r0, [r7, #0]
 800ce6a:	4629      	mov	r1, r5
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f000 faf7 	bl	800d460 <_sbrk_r>
 800ce72:	1c43      	adds	r3, r0, #1
 800ce74:	d123      	bne.n	800cebe <_malloc_r+0x92>
 800ce76:	230c      	movs	r3, #12
 800ce78:	6033      	str	r3, [r6, #0]
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f000 fc08 	bl	800d690 <__malloc_unlock>
 800ce80:	e7e3      	b.n	800ce4a <_malloc_r+0x1e>
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	1b5b      	subs	r3, r3, r5
 800ce86:	d417      	bmi.n	800ceb8 <_malloc_r+0x8c>
 800ce88:	2b0b      	cmp	r3, #11
 800ce8a:	d903      	bls.n	800ce94 <_malloc_r+0x68>
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	441c      	add	r4, r3
 800ce90:	6025      	str	r5, [r4, #0]
 800ce92:	e004      	b.n	800ce9e <_malloc_r+0x72>
 800ce94:	6863      	ldr	r3, [r4, #4]
 800ce96:	42a2      	cmp	r2, r4
 800ce98:	bf0c      	ite	eq
 800ce9a:	600b      	streq	r3, [r1, #0]
 800ce9c:	6053      	strne	r3, [r2, #4]
 800ce9e:	4630      	mov	r0, r6
 800cea0:	f000 fbf6 	bl	800d690 <__malloc_unlock>
 800cea4:	f104 000b 	add.w	r0, r4, #11
 800cea8:	1d23      	adds	r3, r4, #4
 800ceaa:	f020 0007 	bic.w	r0, r0, #7
 800ceae:	1ac2      	subs	r2, r0, r3
 800ceb0:	d0cc      	beq.n	800ce4c <_malloc_r+0x20>
 800ceb2:	1a1b      	subs	r3, r3, r0
 800ceb4:	50a3      	str	r3, [r4, r2]
 800ceb6:	e7c9      	b.n	800ce4c <_malloc_r+0x20>
 800ceb8:	4622      	mov	r2, r4
 800ceba:	6864      	ldr	r4, [r4, #4]
 800cebc:	e7cc      	b.n	800ce58 <_malloc_r+0x2c>
 800cebe:	1cc4      	adds	r4, r0, #3
 800cec0:	f024 0403 	bic.w	r4, r4, #3
 800cec4:	42a0      	cmp	r0, r4
 800cec6:	d0e3      	beq.n	800ce90 <_malloc_r+0x64>
 800cec8:	1a21      	subs	r1, r4, r0
 800ceca:	4630      	mov	r0, r6
 800cecc:	f000 fac8 	bl	800d460 <_sbrk_r>
 800ced0:	3001      	adds	r0, #1
 800ced2:	d1dd      	bne.n	800ce90 <_malloc_r+0x64>
 800ced4:	e7cf      	b.n	800ce76 <_malloc_r+0x4a>
 800ced6:	bf00      	nop
 800ced8:	20001acc 	.word	0x20001acc
 800cedc:	20001ad0 	.word	0x20001ad0

0800cee0 <__ssputs_r>:
 800cee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee4:	688e      	ldr	r6, [r1, #8]
 800cee6:	429e      	cmp	r6, r3
 800cee8:	4682      	mov	sl, r0
 800ceea:	460c      	mov	r4, r1
 800ceec:	4690      	mov	r8, r2
 800ceee:	461f      	mov	r7, r3
 800cef0:	d838      	bhi.n	800cf64 <__ssputs_r+0x84>
 800cef2:	898a      	ldrh	r2, [r1, #12]
 800cef4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cef8:	d032      	beq.n	800cf60 <__ssputs_r+0x80>
 800cefa:	6825      	ldr	r5, [r4, #0]
 800cefc:	6909      	ldr	r1, [r1, #16]
 800cefe:	eba5 0901 	sub.w	r9, r5, r1
 800cf02:	6965      	ldr	r5, [r4, #20]
 800cf04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	444b      	add	r3, r9
 800cf10:	106d      	asrs	r5, r5, #1
 800cf12:	429d      	cmp	r5, r3
 800cf14:	bf38      	it	cc
 800cf16:	461d      	movcc	r5, r3
 800cf18:	0553      	lsls	r3, r2, #21
 800cf1a:	d531      	bpl.n	800cf80 <__ssputs_r+0xa0>
 800cf1c:	4629      	mov	r1, r5
 800cf1e:	f7ff ff85 	bl	800ce2c <_malloc_r>
 800cf22:	4606      	mov	r6, r0
 800cf24:	b950      	cbnz	r0, 800cf3c <__ssputs_r+0x5c>
 800cf26:	230c      	movs	r3, #12
 800cf28:	f8ca 3000 	str.w	r3, [sl]
 800cf2c:	89a3      	ldrh	r3, [r4, #12]
 800cf2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf32:	81a3      	strh	r3, [r4, #12]
 800cf34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf3c:	6921      	ldr	r1, [r4, #16]
 800cf3e:	464a      	mov	r2, r9
 800cf40:	f7fb ff7e 	bl	8008e40 <memcpy>
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf4e:	81a3      	strh	r3, [r4, #12]
 800cf50:	6126      	str	r6, [r4, #16]
 800cf52:	6165      	str	r5, [r4, #20]
 800cf54:	444e      	add	r6, r9
 800cf56:	eba5 0509 	sub.w	r5, r5, r9
 800cf5a:	6026      	str	r6, [r4, #0]
 800cf5c:	60a5      	str	r5, [r4, #8]
 800cf5e:	463e      	mov	r6, r7
 800cf60:	42be      	cmp	r6, r7
 800cf62:	d900      	bls.n	800cf66 <__ssputs_r+0x86>
 800cf64:	463e      	mov	r6, r7
 800cf66:	4632      	mov	r2, r6
 800cf68:	6820      	ldr	r0, [r4, #0]
 800cf6a:	4641      	mov	r1, r8
 800cf6c:	f000 fb70 	bl	800d650 <memmove>
 800cf70:	68a3      	ldr	r3, [r4, #8]
 800cf72:	6822      	ldr	r2, [r4, #0]
 800cf74:	1b9b      	subs	r3, r3, r6
 800cf76:	4432      	add	r2, r6
 800cf78:	60a3      	str	r3, [r4, #8]
 800cf7a:	6022      	str	r2, [r4, #0]
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	e7db      	b.n	800cf38 <__ssputs_r+0x58>
 800cf80:	462a      	mov	r2, r5
 800cf82:	f000 fb8b 	bl	800d69c <_realloc_r>
 800cf86:	4606      	mov	r6, r0
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d1e1      	bne.n	800cf50 <__ssputs_r+0x70>
 800cf8c:	6921      	ldr	r1, [r4, #16]
 800cf8e:	4650      	mov	r0, sl
 800cf90:	f7ff fefc 	bl	800cd8c <_free_r>
 800cf94:	e7c7      	b.n	800cf26 <__ssputs_r+0x46>
	...

0800cf98 <_svfiprintf_r>:
 800cf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf9c:	4698      	mov	r8, r3
 800cf9e:	898b      	ldrh	r3, [r1, #12]
 800cfa0:	061b      	lsls	r3, r3, #24
 800cfa2:	b09d      	sub	sp, #116	; 0x74
 800cfa4:	4607      	mov	r7, r0
 800cfa6:	460d      	mov	r5, r1
 800cfa8:	4614      	mov	r4, r2
 800cfaa:	d50e      	bpl.n	800cfca <_svfiprintf_r+0x32>
 800cfac:	690b      	ldr	r3, [r1, #16]
 800cfae:	b963      	cbnz	r3, 800cfca <_svfiprintf_r+0x32>
 800cfb0:	2140      	movs	r1, #64	; 0x40
 800cfb2:	f7ff ff3b 	bl	800ce2c <_malloc_r>
 800cfb6:	6028      	str	r0, [r5, #0]
 800cfb8:	6128      	str	r0, [r5, #16]
 800cfba:	b920      	cbnz	r0, 800cfc6 <_svfiprintf_r+0x2e>
 800cfbc:	230c      	movs	r3, #12
 800cfbe:	603b      	str	r3, [r7, #0]
 800cfc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfc4:	e0d1      	b.n	800d16a <_svfiprintf_r+0x1d2>
 800cfc6:	2340      	movs	r3, #64	; 0x40
 800cfc8:	616b      	str	r3, [r5, #20]
 800cfca:	2300      	movs	r3, #0
 800cfcc:	9309      	str	r3, [sp, #36]	; 0x24
 800cfce:	2320      	movs	r3, #32
 800cfd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfd8:	2330      	movs	r3, #48	; 0x30
 800cfda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d184 <_svfiprintf_r+0x1ec>
 800cfde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfe2:	f04f 0901 	mov.w	r9, #1
 800cfe6:	4623      	mov	r3, r4
 800cfe8:	469a      	mov	sl, r3
 800cfea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfee:	b10a      	cbz	r2, 800cff4 <_svfiprintf_r+0x5c>
 800cff0:	2a25      	cmp	r2, #37	; 0x25
 800cff2:	d1f9      	bne.n	800cfe8 <_svfiprintf_r+0x50>
 800cff4:	ebba 0b04 	subs.w	fp, sl, r4
 800cff8:	d00b      	beq.n	800d012 <_svfiprintf_r+0x7a>
 800cffa:	465b      	mov	r3, fp
 800cffc:	4622      	mov	r2, r4
 800cffe:	4629      	mov	r1, r5
 800d000:	4638      	mov	r0, r7
 800d002:	f7ff ff6d 	bl	800cee0 <__ssputs_r>
 800d006:	3001      	adds	r0, #1
 800d008:	f000 80aa 	beq.w	800d160 <_svfiprintf_r+0x1c8>
 800d00c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d00e:	445a      	add	r2, fp
 800d010:	9209      	str	r2, [sp, #36]	; 0x24
 800d012:	f89a 3000 	ldrb.w	r3, [sl]
 800d016:	2b00      	cmp	r3, #0
 800d018:	f000 80a2 	beq.w	800d160 <_svfiprintf_r+0x1c8>
 800d01c:	2300      	movs	r3, #0
 800d01e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d026:	f10a 0a01 	add.w	sl, sl, #1
 800d02a:	9304      	str	r3, [sp, #16]
 800d02c:	9307      	str	r3, [sp, #28]
 800d02e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d032:	931a      	str	r3, [sp, #104]	; 0x68
 800d034:	4654      	mov	r4, sl
 800d036:	2205      	movs	r2, #5
 800d038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d03c:	4851      	ldr	r0, [pc, #324]	; (800d184 <_svfiprintf_r+0x1ec>)
 800d03e:	f7f3 f8cf 	bl	80001e0 <memchr>
 800d042:	9a04      	ldr	r2, [sp, #16]
 800d044:	b9d8      	cbnz	r0, 800d07e <_svfiprintf_r+0xe6>
 800d046:	06d0      	lsls	r0, r2, #27
 800d048:	bf44      	itt	mi
 800d04a:	2320      	movmi	r3, #32
 800d04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d050:	0711      	lsls	r1, r2, #28
 800d052:	bf44      	itt	mi
 800d054:	232b      	movmi	r3, #43	; 0x2b
 800d056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d05a:	f89a 3000 	ldrb.w	r3, [sl]
 800d05e:	2b2a      	cmp	r3, #42	; 0x2a
 800d060:	d015      	beq.n	800d08e <_svfiprintf_r+0xf6>
 800d062:	9a07      	ldr	r2, [sp, #28]
 800d064:	4654      	mov	r4, sl
 800d066:	2000      	movs	r0, #0
 800d068:	f04f 0c0a 	mov.w	ip, #10
 800d06c:	4621      	mov	r1, r4
 800d06e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d072:	3b30      	subs	r3, #48	; 0x30
 800d074:	2b09      	cmp	r3, #9
 800d076:	d94e      	bls.n	800d116 <_svfiprintf_r+0x17e>
 800d078:	b1b0      	cbz	r0, 800d0a8 <_svfiprintf_r+0x110>
 800d07a:	9207      	str	r2, [sp, #28]
 800d07c:	e014      	b.n	800d0a8 <_svfiprintf_r+0x110>
 800d07e:	eba0 0308 	sub.w	r3, r0, r8
 800d082:	fa09 f303 	lsl.w	r3, r9, r3
 800d086:	4313      	orrs	r3, r2
 800d088:	9304      	str	r3, [sp, #16]
 800d08a:	46a2      	mov	sl, r4
 800d08c:	e7d2      	b.n	800d034 <_svfiprintf_r+0x9c>
 800d08e:	9b03      	ldr	r3, [sp, #12]
 800d090:	1d19      	adds	r1, r3, #4
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	9103      	str	r1, [sp, #12]
 800d096:	2b00      	cmp	r3, #0
 800d098:	bfbb      	ittet	lt
 800d09a:	425b      	neglt	r3, r3
 800d09c:	f042 0202 	orrlt.w	r2, r2, #2
 800d0a0:	9307      	strge	r3, [sp, #28]
 800d0a2:	9307      	strlt	r3, [sp, #28]
 800d0a4:	bfb8      	it	lt
 800d0a6:	9204      	strlt	r2, [sp, #16]
 800d0a8:	7823      	ldrb	r3, [r4, #0]
 800d0aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ac:	d10c      	bne.n	800d0c8 <_svfiprintf_r+0x130>
 800d0ae:	7863      	ldrb	r3, [r4, #1]
 800d0b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0b2:	d135      	bne.n	800d120 <_svfiprintf_r+0x188>
 800d0b4:	9b03      	ldr	r3, [sp, #12]
 800d0b6:	1d1a      	adds	r2, r3, #4
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	9203      	str	r2, [sp, #12]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	bfb8      	it	lt
 800d0c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d0c4:	3402      	adds	r4, #2
 800d0c6:	9305      	str	r3, [sp, #20]
 800d0c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d194 <_svfiprintf_r+0x1fc>
 800d0cc:	7821      	ldrb	r1, [r4, #0]
 800d0ce:	2203      	movs	r2, #3
 800d0d0:	4650      	mov	r0, sl
 800d0d2:	f7f3 f885 	bl	80001e0 <memchr>
 800d0d6:	b140      	cbz	r0, 800d0ea <_svfiprintf_r+0x152>
 800d0d8:	2340      	movs	r3, #64	; 0x40
 800d0da:	eba0 000a 	sub.w	r0, r0, sl
 800d0de:	fa03 f000 	lsl.w	r0, r3, r0
 800d0e2:	9b04      	ldr	r3, [sp, #16]
 800d0e4:	4303      	orrs	r3, r0
 800d0e6:	3401      	adds	r4, #1
 800d0e8:	9304      	str	r3, [sp, #16]
 800d0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ee:	4826      	ldr	r0, [pc, #152]	; (800d188 <_svfiprintf_r+0x1f0>)
 800d0f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0f4:	2206      	movs	r2, #6
 800d0f6:	f7f3 f873 	bl	80001e0 <memchr>
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	d038      	beq.n	800d170 <_svfiprintf_r+0x1d8>
 800d0fe:	4b23      	ldr	r3, [pc, #140]	; (800d18c <_svfiprintf_r+0x1f4>)
 800d100:	bb1b      	cbnz	r3, 800d14a <_svfiprintf_r+0x1b2>
 800d102:	9b03      	ldr	r3, [sp, #12]
 800d104:	3307      	adds	r3, #7
 800d106:	f023 0307 	bic.w	r3, r3, #7
 800d10a:	3308      	adds	r3, #8
 800d10c:	9303      	str	r3, [sp, #12]
 800d10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d110:	4433      	add	r3, r6
 800d112:	9309      	str	r3, [sp, #36]	; 0x24
 800d114:	e767      	b.n	800cfe6 <_svfiprintf_r+0x4e>
 800d116:	fb0c 3202 	mla	r2, ip, r2, r3
 800d11a:	460c      	mov	r4, r1
 800d11c:	2001      	movs	r0, #1
 800d11e:	e7a5      	b.n	800d06c <_svfiprintf_r+0xd4>
 800d120:	2300      	movs	r3, #0
 800d122:	3401      	adds	r4, #1
 800d124:	9305      	str	r3, [sp, #20]
 800d126:	4619      	mov	r1, r3
 800d128:	f04f 0c0a 	mov.w	ip, #10
 800d12c:	4620      	mov	r0, r4
 800d12e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d132:	3a30      	subs	r2, #48	; 0x30
 800d134:	2a09      	cmp	r2, #9
 800d136:	d903      	bls.n	800d140 <_svfiprintf_r+0x1a8>
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d0c5      	beq.n	800d0c8 <_svfiprintf_r+0x130>
 800d13c:	9105      	str	r1, [sp, #20]
 800d13e:	e7c3      	b.n	800d0c8 <_svfiprintf_r+0x130>
 800d140:	fb0c 2101 	mla	r1, ip, r1, r2
 800d144:	4604      	mov	r4, r0
 800d146:	2301      	movs	r3, #1
 800d148:	e7f0      	b.n	800d12c <_svfiprintf_r+0x194>
 800d14a:	ab03      	add	r3, sp, #12
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	462a      	mov	r2, r5
 800d150:	4b0f      	ldr	r3, [pc, #60]	; (800d190 <_svfiprintf_r+0x1f8>)
 800d152:	a904      	add	r1, sp, #16
 800d154:	4638      	mov	r0, r7
 800d156:	f7fb ff29 	bl	8008fac <_printf_float>
 800d15a:	1c42      	adds	r2, r0, #1
 800d15c:	4606      	mov	r6, r0
 800d15e:	d1d6      	bne.n	800d10e <_svfiprintf_r+0x176>
 800d160:	89ab      	ldrh	r3, [r5, #12]
 800d162:	065b      	lsls	r3, r3, #25
 800d164:	f53f af2c 	bmi.w	800cfc0 <_svfiprintf_r+0x28>
 800d168:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d16a:	b01d      	add	sp, #116	; 0x74
 800d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d170:	ab03      	add	r3, sp, #12
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	462a      	mov	r2, r5
 800d176:	4b06      	ldr	r3, [pc, #24]	; (800d190 <_svfiprintf_r+0x1f8>)
 800d178:	a904      	add	r1, sp, #16
 800d17a:	4638      	mov	r0, r7
 800d17c:	f7fc f9ba 	bl	80094f4 <_printf_i>
 800d180:	e7eb      	b.n	800d15a <_svfiprintf_r+0x1c2>
 800d182:	bf00      	nop
 800d184:	0800df34 	.word	0x0800df34
 800d188:	0800df3e 	.word	0x0800df3e
 800d18c:	08008fad 	.word	0x08008fad
 800d190:	0800cee1 	.word	0x0800cee1
 800d194:	0800df3a 	.word	0x0800df3a

0800d198 <__sfputc_r>:
 800d198:	6893      	ldr	r3, [r2, #8]
 800d19a:	3b01      	subs	r3, #1
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	b410      	push	{r4}
 800d1a0:	6093      	str	r3, [r2, #8]
 800d1a2:	da08      	bge.n	800d1b6 <__sfputc_r+0x1e>
 800d1a4:	6994      	ldr	r4, [r2, #24]
 800d1a6:	42a3      	cmp	r3, r4
 800d1a8:	db01      	blt.n	800d1ae <__sfputc_r+0x16>
 800d1aa:	290a      	cmp	r1, #10
 800d1ac:	d103      	bne.n	800d1b6 <__sfputc_r+0x1e>
 800d1ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1b2:	f7fd bc3b 	b.w	800aa2c <__swbuf_r>
 800d1b6:	6813      	ldr	r3, [r2, #0]
 800d1b8:	1c58      	adds	r0, r3, #1
 800d1ba:	6010      	str	r0, [r2, #0]
 800d1bc:	7019      	strb	r1, [r3, #0]
 800d1be:	4608      	mov	r0, r1
 800d1c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <__sfputs_r>:
 800d1c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	460f      	mov	r7, r1
 800d1cc:	4614      	mov	r4, r2
 800d1ce:	18d5      	adds	r5, r2, r3
 800d1d0:	42ac      	cmp	r4, r5
 800d1d2:	d101      	bne.n	800d1d8 <__sfputs_r+0x12>
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	e007      	b.n	800d1e8 <__sfputs_r+0x22>
 800d1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1dc:	463a      	mov	r2, r7
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f7ff ffda 	bl	800d198 <__sfputc_r>
 800d1e4:	1c43      	adds	r3, r0, #1
 800d1e6:	d1f3      	bne.n	800d1d0 <__sfputs_r+0xa>
 800d1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1ec <_vfiprintf_r>:
 800d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	460d      	mov	r5, r1
 800d1f2:	b09d      	sub	sp, #116	; 0x74
 800d1f4:	4614      	mov	r4, r2
 800d1f6:	4698      	mov	r8, r3
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	b118      	cbz	r0, 800d204 <_vfiprintf_r+0x18>
 800d1fc:	6983      	ldr	r3, [r0, #24]
 800d1fe:	b90b      	cbnz	r3, 800d204 <_vfiprintf_r+0x18>
 800d200:	f7fe fc68 	bl	800bad4 <__sinit>
 800d204:	4b89      	ldr	r3, [pc, #548]	; (800d42c <_vfiprintf_r+0x240>)
 800d206:	429d      	cmp	r5, r3
 800d208:	d11b      	bne.n	800d242 <_vfiprintf_r+0x56>
 800d20a:	6875      	ldr	r5, [r6, #4]
 800d20c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d20e:	07d9      	lsls	r1, r3, #31
 800d210:	d405      	bmi.n	800d21e <_vfiprintf_r+0x32>
 800d212:	89ab      	ldrh	r3, [r5, #12]
 800d214:	059a      	lsls	r2, r3, #22
 800d216:	d402      	bmi.n	800d21e <_vfiprintf_r+0x32>
 800d218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d21a:	f7ff f86c 	bl	800c2f6 <__retarget_lock_acquire_recursive>
 800d21e:	89ab      	ldrh	r3, [r5, #12]
 800d220:	071b      	lsls	r3, r3, #28
 800d222:	d501      	bpl.n	800d228 <_vfiprintf_r+0x3c>
 800d224:	692b      	ldr	r3, [r5, #16]
 800d226:	b9eb      	cbnz	r3, 800d264 <_vfiprintf_r+0x78>
 800d228:	4629      	mov	r1, r5
 800d22a:	4630      	mov	r0, r6
 800d22c:	f7fd fc50 	bl	800aad0 <__swsetup_r>
 800d230:	b1c0      	cbz	r0, 800d264 <_vfiprintf_r+0x78>
 800d232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d234:	07dc      	lsls	r4, r3, #31
 800d236:	d50e      	bpl.n	800d256 <_vfiprintf_r+0x6a>
 800d238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d23c:	b01d      	add	sp, #116	; 0x74
 800d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d242:	4b7b      	ldr	r3, [pc, #492]	; (800d430 <_vfiprintf_r+0x244>)
 800d244:	429d      	cmp	r5, r3
 800d246:	d101      	bne.n	800d24c <_vfiprintf_r+0x60>
 800d248:	68b5      	ldr	r5, [r6, #8]
 800d24a:	e7df      	b.n	800d20c <_vfiprintf_r+0x20>
 800d24c:	4b79      	ldr	r3, [pc, #484]	; (800d434 <_vfiprintf_r+0x248>)
 800d24e:	429d      	cmp	r5, r3
 800d250:	bf08      	it	eq
 800d252:	68f5      	ldreq	r5, [r6, #12]
 800d254:	e7da      	b.n	800d20c <_vfiprintf_r+0x20>
 800d256:	89ab      	ldrh	r3, [r5, #12]
 800d258:	0598      	lsls	r0, r3, #22
 800d25a:	d4ed      	bmi.n	800d238 <_vfiprintf_r+0x4c>
 800d25c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d25e:	f7ff f84b 	bl	800c2f8 <__retarget_lock_release_recursive>
 800d262:	e7e9      	b.n	800d238 <_vfiprintf_r+0x4c>
 800d264:	2300      	movs	r3, #0
 800d266:	9309      	str	r3, [sp, #36]	; 0x24
 800d268:	2320      	movs	r3, #32
 800d26a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d26e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d272:	2330      	movs	r3, #48	; 0x30
 800d274:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d438 <_vfiprintf_r+0x24c>
 800d278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d27c:	f04f 0901 	mov.w	r9, #1
 800d280:	4623      	mov	r3, r4
 800d282:	469a      	mov	sl, r3
 800d284:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d288:	b10a      	cbz	r2, 800d28e <_vfiprintf_r+0xa2>
 800d28a:	2a25      	cmp	r2, #37	; 0x25
 800d28c:	d1f9      	bne.n	800d282 <_vfiprintf_r+0x96>
 800d28e:	ebba 0b04 	subs.w	fp, sl, r4
 800d292:	d00b      	beq.n	800d2ac <_vfiprintf_r+0xc0>
 800d294:	465b      	mov	r3, fp
 800d296:	4622      	mov	r2, r4
 800d298:	4629      	mov	r1, r5
 800d29a:	4630      	mov	r0, r6
 800d29c:	f7ff ff93 	bl	800d1c6 <__sfputs_r>
 800d2a0:	3001      	adds	r0, #1
 800d2a2:	f000 80aa 	beq.w	800d3fa <_vfiprintf_r+0x20e>
 800d2a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2a8:	445a      	add	r2, fp
 800d2aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f000 80a2 	beq.w	800d3fa <_vfiprintf_r+0x20e>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2c0:	f10a 0a01 	add.w	sl, sl, #1
 800d2c4:	9304      	str	r3, [sp, #16]
 800d2c6:	9307      	str	r3, [sp, #28]
 800d2c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2cc:	931a      	str	r3, [sp, #104]	; 0x68
 800d2ce:	4654      	mov	r4, sl
 800d2d0:	2205      	movs	r2, #5
 800d2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2d6:	4858      	ldr	r0, [pc, #352]	; (800d438 <_vfiprintf_r+0x24c>)
 800d2d8:	f7f2 ff82 	bl	80001e0 <memchr>
 800d2dc:	9a04      	ldr	r2, [sp, #16]
 800d2de:	b9d8      	cbnz	r0, 800d318 <_vfiprintf_r+0x12c>
 800d2e0:	06d1      	lsls	r1, r2, #27
 800d2e2:	bf44      	itt	mi
 800d2e4:	2320      	movmi	r3, #32
 800d2e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2ea:	0713      	lsls	r3, r2, #28
 800d2ec:	bf44      	itt	mi
 800d2ee:	232b      	movmi	r3, #43	; 0x2b
 800d2f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d2fa:	d015      	beq.n	800d328 <_vfiprintf_r+0x13c>
 800d2fc:	9a07      	ldr	r2, [sp, #28]
 800d2fe:	4654      	mov	r4, sl
 800d300:	2000      	movs	r0, #0
 800d302:	f04f 0c0a 	mov.w	ip, #10
 800d306:	4621      	mov	r1, r4
 800d308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d30c:	3b30      	subs	r3, #48	; 0x30
 800d30e:	2b09      	cmp	r3, #9
 800d310:	d94e      	bls.n	800d3b0 <_vfiprintf_r+0x1c4>
 800d312:	b1b0      	cbz	r0, 800d342 <_vfiprintf_r+0x156>
 800d314:	9207      	str	r2, [sp, #28]
 800d316:	e014      	b.n	800d342 <_vfiprintf_r+0x156>
 800d318:	eba0 0308 	sub.w	r3, r0, r8
 800d31c:	fa09 f303 	lsl.w	r3, r9, r3
 800d320:	4313      	orrs	r3, r2
 800d322:	9304      	str	r3, [sp, #16]
 800d324:	46a2      	mov	sl, r4
 800d326:	e7d2      	b.n	800d2ce <_vfiprintf_r+0xe2>
 800d328:	9b03      	ldr	r3, [sp, #12]
 800d32a:	1d19      	adds	r1, r3, #4
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	9103      	str	r1, [sp, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	bfbb      	ittet	lt
 800d334:	425b      	neglt	r3, r3
 800d336:	f042 0202 	orrlt.w	r2, r2, #2
 800d33a:	9307      	strge	r3, [sp, #28]
 800d33c:	9307      	strlt	r3, [sp, #28]
 800d33e:	bfb8      	it	lt
 800d340:	9204      	strlt	r2, [sp, #16]
 800d342:	7823      	ldrb	r3, [r4, #0]
 800d344:	2b2e      	cmp	r3, #46	; 0x2e
 800d346:	d10c      	bne.n	800d362 <_vfiprintf_r+0x176>
 800d348:	7863      	ldrb	r3, [r4, #1]
 800d34a:	2b2a      	cmp	r3, #42	; 0x2a
 800d34c:	d135      	bne.n	800d3ba <_vfiprintf_r+0x1ce>
 800d34e:	9b03      	ldr	r3, [sp, #12]
 800d350:	1d1a      	adds	r2, r3, #4
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	9203      	str	r2, [sp, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	bfb8      	it	lt
 800d35a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d35e:	3402      	adds	r4, #2
 800d360:	9305      	str	r3, [sp, #20]
 800d362:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d448 <_vfiprintf_r+0x25c>
 800d366:	7821      	ldrb	r1, [r4, #0]
 800d368:	2203      	movs	r2, #3
 800d36a:	4650      	mov	r0, sl
 800d36c:	f7f2 ff38 	bl	80001e0 <memchr>
 800d370:	b140      	cbz	r0, 800d384 <_vfiprintf_r+0x198>
 800d372:	2340      	movs	r3, #64	; 0x40
 800d374:	eba0 000a 	sub.w	r0, r0, sl
 800d378:	fa03 f000 	lsl.w	r0, r3, r0
 800d37c:	9b04      	ldr	r3, [sp, #16]
 800d37e:	4303      	orrs	r3, r0
 800d380:	3401      	adds	r4, #1
 800d382:	9304      	str	r3, [sp, #16]
 800d384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d388:	482c      	ldr	r0, [pc, #176]	; (800d43c <_vfiprintf_r+0x250>)
 800d38a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d38e:	2206      	movs	r2, #6
 800d390:	f7f2 ff26 	bl	80001e0 <memchr>
 800d394:	2800      	cmp	r0, #0
 800d396:	d03f      	beq.n	800d418 <_vfiprintf_r+0x22c>
 800d398:	4b29      	ldr	r3, [pc, #164]	; (800d440 <_vfiprintf_r+0x254>)
 800d39a:	bb1b      	cbnz	r3, 800d3e4 <_vfiprintf_r+0x1f8>
 800d39c:	9b03      	ldr	r3, [sp, #12]
 800d39e:	3307      	adds	r3, #7
 800d3a0:	f023 0307 	bic.w	r3, r3, #7
 800d3a4:	3308      	adds	r3, #8
 800d3a6:	9303      	str	r3, [sp, #12]
 800d3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3aa:	443b      	add	r3, r7
 800d3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ae:	e767      	b.n	800d280 <_vfiprintf_r+0x94>
 800d3b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3b4:	460c      	mov	r4, r1
 800d3b6:	2001      	movs	r0, #1
 800d3b8:	e7a5      	b.n	800d306 <_vfiprintf_r+0x11a>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	3401      	adds	r4, #1
 800d3be:	9305      	str	r3, [sp, #20]
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	f04f 0c0a 	mov.w	ip, #10
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3cc:	3a30      	subs	r2, #48	; 0x30
 800d3ce:	2a09      	cmp	r2, #9
 800d3d0:	d903      	bls.n	800d3da <_vfiprintf_r+0x1ee>
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d0c5      	beq.n	800d362 <_vfiprintf_r+0x176>
 800d3d6:	9105      	str	r1, [sp, #20]
 800d3d8:	e7c3      	b.n	800d362 <_vfiprintf_r+0x176>
 800d3da:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3de:	4604      	mov	r4, r0
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e7f0      	b.n	800d3c6 <_vfiprintf_r+0x1da>
 800d3e4:	ab03      	add	r3, sp, #12
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	462a      	mov	r2, r5
 800d3ea:	4b16      	ldr	r3, [pc, #88]	; (800d444 <_vfiprintf_r+0x258>)
 800d3ec:	a904      	add	r1, sp, #16
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f7fb fddc 	bl	8008fac <_printf_float>
 800d3f4:	4607      	mov	r7, r0
 800d3f6:	1c78      	adds	r0, r7, #1
 800d3f8:	d1d6      	bne.n	800d3a8 <_vfiprintf_r+0x1bc>
 800d3fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3fc:	07d9      	lsls	r1, r3, #31
 800d3fe:	d405      	bmi.n	800d40c <_vfiprintf_r+0x220>
 800d400:	89ab      	ldrh	r3, [r5, #12]
 800d402:	059a      	lsls	r2, r3, #22
 800d404:	d402      	bmi.n	800d40c <_vfiprintf_r+0x220>
 800d406:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d408:	f7fe ff76 	bl	800c2f8 <__retarget_lock_release_recursive>
 800d40c:	89ab      	ldrh	r3, [r5, #12]
 800d40e:	065b      	lsls	r3, r3, #25
 800d410:	f53f af12 	bmi.w	800d238 <_vfiprintf_r+0x4c>
 800d414:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d416:	e711      	b.n	800d23c <_vfiprintf_r+0x50>
 800d418:	ab03      	add	r3, sp, #12
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	462a      	mov	r2, r5
 800d41e:	4b09      	ldr	r3, [pc, #36]	; (800d444 <_vfiprintf_r+0x258>)
 800d420:	a904      	add	r1, sp, #16
 800d422:	4630      	mov	r0, r6
 800d424:	f7fc f866 	bl	80094f4 <_printf_i>
 800d428:	e7e4      	b.n	800d3f4 <_vfiprintf_r+0x208>
 800d42a:	bf00      	nop
 800d42c:	0800dd18 	.word	0x0800dd18
 800d430:	0800dd38 	.word	0x0800dd38
 800d434:	0800dcf8 	.word	0x0800dcf8
 800d438:	0800df34 	.word	0x0800df34
 800d43c:	0800df3e 	.word	0x0800df3e
 800d440:	08008fad 	.word	0x08008fad
 800d444:	0800d1c7 	.word	0x0800d1c7
 800d448:	0800df3a 	.word	0x0800df3a
 800d44c:	00000000 	.word	0x00000000

0800d450 <nan>:
 800d450:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d458 <nan+0x8>
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	00000000 	.word	0x00000000
 800d45c:	7ff80000 	.word	0x7ff80000

0800d460 <_sbrk_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d06      	ldr	r5, [pc, #24]	; (800d47c <_sbrk_r+0x1c>)
 800d464:	2300      	movs	r3, #0
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	602b      	str	r3, [r5, #0]
 800d46c:	f7f4 fdb0 	bl	8001fd0 <_sbrk>
 800d470:	1c43      	adds	r3, r0, #1
 800d472:	d102      	bne.n	800d47a <_sbrk_r+0x1a>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	b103      	cbz	r3, 800d47a <_sbrk_r+0x1a>
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	bd38      	pop	{r3, r4, r5, pc}
 800d47c:	20001c88 	.word	0x20001c88

0800d480 <__sread>:
 800d480:	b510      	push	{r4, lr}
 800d482:	460c      	mov	r4, r1
 800d484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d488:	f000 f92e 	bl	800d6e8 <_read_r>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	bfab      	itete	ge
 800d490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d492:	89a3      	ldrhlt	r3, [r4, #12]
 800d494:	181b      	addge	r3, r3, r0
 800d496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d49a:	bfac      	ite	ge
 800d49c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d49e:	81a3      	strhlt	r3, [r4, #12]
 800d4a0:	bd10      	pop	{r4, pc}

0800d4a2 <__swrite>:
 800d4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a6:	461f      	mov	r7, r3
 800d4a8:	898b      	ldrh	r3, [r1, #12]
 800d4aa:	05db      	lsls	r3, r3, #23
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	4616      	mov	r6, r2
 800d4b2:	d505      	bpl.n	800d4c0 <__swrite+0x1e>
 800d4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4b8:	2302      	movs	r3, #2
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f000 f8b6 	bl	800d62c <_lseek_r>
 800d4c0:	89a3      	ldrh	r3, [r4, #12]
 800d4c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4ca:	81a3      	strh	r3, [r4, #12]
 800d4cc:	4632      	mov	r2, r6
 800d4ce:	463b      	mov	r3, r7
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d6:	f000 b835 	b.w	800d544 <_write_r>

0800d4da <__sseek>:
 800d4da:	b510      	push	{r4, lr}
 800d4dc:	460c      	mov	r4, r1
 800d4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4e2:	f000 f8a3 	bl	800d62c <_lseek_r>
 800d4e6:	1c43      	adds	r3, r0, #1
 800d4e8:	89a3      	ldrh	r3, [r4, #12]
 800d4ea:	bf15      	itete	ne
 800d4ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4f6:	81a3      	strheq	r3, [r4, #12]
 800d4f8:	bf18      	it	ne
 800d4fa:	81a3      	strhne	r3, [r4, #12]
 800d4fc:	bd10      	pop	{r4, pc}

0800d4fe <__sclose>:
 800d4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d502:	f000 b84f 	b.w	800d5a4 <_close_r>

0800d506 <strncmp>:
 800d506:	b510      	push	{r4, lr}
 800d508:	b16a      	cbz	r2, 800d526 <strncmp+0x20>
 800d50a:	3901      	subs	r1, #1
 800d50c:	1884      	adds	r4, r0, r2
 800d50e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d512:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d516:	4293      	cmp	r3, r2
 800d518:	d103      	bne.n	800d522 <strncmp+0x1c>
 800d51a:	42a0      	cmp	r0, r4
 800d51c:	d001      	beq.n	800d522 <strncmp+0x1c>
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1f5      	bne.n	800d50e <strncmp+0x8>
 800d522:	1a98      	subs	r0, r3, r2
 800d524:	bd10      	pop	{r4, pc}
 800d526:	4610      	mov	r0, r2
 800d528:	e7fc      	b.n	800d524 <strncmp+0x1e>

0800d52a <__ascii_wctomb>:
 800d52a:	b149      	cbz	r1, 800d540 <__ascii_wctomb+0x16>
 800d52c:	2aff      	cmp	r2, #255	; 0xff
 800d52e:	bf85      	ittet	hi
 800d530:	238a      	movhi	r3, #138	; 0x8a
 800d532:	6003      	strhi	r3, [r0, #0]
 800d534:	700a      	strbls	r2, [r1, #0]
 800d536:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d53a:	bf98      	it	ls
 800d53c:	2001      	movls	r0, #1
 800d53e:	4770      	bx	lr
 800d540:	4608      	mov	r0, r1
 800d542:	4770      	bx	lr

0800d544 <_write_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4d07      	ldr	r5, [pc, #28]	; (800d564 <_write_r+0x20>)
 800d548:	4604      	mov	r4, r0
 800d54a:	4608      	mov	r0, r1
 800d54c:	4611      	mov	r1, r2
 800d54e:	2200      	movs	r2, #0
 800d550:	602a      	str	r2, [r5, #0]
 800d552:	461a      	mov	r2, r3
 800d554:	f7f4 fceb 	bl	8001f2e <_write>
 800d558:	1c43      	adds	r3, r0, #1
 800d55a:	d102      	bne.n	800d562 <_write_r+0x1e>
 800d55c:	682b      	ldr	r3, [r5, #0]
 800d55e:	b103      	cbz	r3, 800d562 <_write_r+0x1e>
 800d560:	6023      	str	r3, [r4, #0]
 800d562:	bd38      	pop	{r3, r4, r5, pc}
 800d564:	20001c88 	.word	0x20001c88

0800d568 <__assert_func>:
 800d568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d56a:	4614      	mov	r4, r2
 800d56c:	461a      	mov	r2, r3
 800d56e:	4b09      	ldr	r3, [pc, #36]	; (800d594 <__assert_func+0x2c>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4605      	mov	r5, r0
 800d574:	68d8      	ldr	r0, [r3, #12]
 800d576:	b14c      	cbz	r4, 800d58c <__assert_func+0x24>
 800d578:	4b07      	ldr	r3, [pc, #28]	; (800d598 <__assert_func+0x30>)
 800d57a:	9100      	str	r1, [sp, #0]
 800d57c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d580:	4906      	ldr	r1, [pc, #24]	; (800d59c <__assert_func+0x34>)
 800d582:	462b      	mov	r3, r5
 800d584:	f000 f81e 	bl	800d5c4 <fiprintf>
 800d588:	f000 f8c0 	bl	800d70c <abort>
 800d58c:	4b04      	ldr	r3, [pc, #16]	; (800d5a0 <__assert_func+0x38>)
 800d58e:	461c      	mov	r4, r3
 800d590:	e7f3      	b.n	800d57a <__assert_func+0x12>
 800d592:	bf00      	nop
 800d594:	20000010 	.word	0x20000010
 800d598:	0800df45 	.word	0x0800df45
 800d59c:	0800df52 	.word	0x0800df52
 800d5a0:	0800df80 	.word	0x0800df80

0800d5a4 <_close_r>:
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	4d06      	ldr	r5, [pc, #24]	; (800d5c0 <_close_r+0x1c>)
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	4608      	mov	r0, r1
 800d5ae:	602b      	str	r3, [r5, #0]
 800d5b0:	f7f4 fcd9 	bl	8001f66 <_close>
 800d5b4:	1c43      	adds	r3, r0, #1
 800d5b6:	d102      	bne.n	800d5be <_close_r+0x1a>
 800d5b8:	682b      	ldr	r3, [r5, #0]
 800d5ba:	b103      	cbz	r3, 800d5be <_close_r+0x1a>
 800d5bc:	6023      	str	r3, [r4, #0]
 800d5be:	bd38      	pop	{r3, r4, r5, pc}
 800d5c0:	20001c88 	.word	0x20001c88

0800d5c4 <fiprintf>:
 800d5c4:	b40e      	push	{r1, r2, r3}
 800d5c6:	b503      	push	{r0, r1, lr}
 800d5c8:	4601      	mov	r1, r0
 800d5ca:	ab03      	add	r3, sp, #12
 800d5cc:	4805      	ldr	r0, [pc, #20]	; (800d5e4 <fiprintf+0x20>)
 800d5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5d2:	6800      	ldr	r0, [r0, #0]
 800d5d4:	9301      	str	r3, [sp, #4]
 800d5d6:	f7ff fe09 	bl	800d1ec <_vfiprintf_r>
 800d5da:	b002      	add	sp, #8
 800d5dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5e0:	b003      	add	sp, #12
 800d5e2:	4770      	bx	lr
 800d5e4:	20000010 	.word	0x20000010

0800d5e8 <_fstat_r>:
 800d5e8:	b538      	push	{r3, r4, r5, lr}
 800d5ea:	4d07      	ldr	r5, [pc, #28]	; (800d608 <_fstat_r+0x20>)
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	4608      	mov	r0, r1
 800d5f2:	4611      	mov	r1, r2
 800d5f4:	602b      	str	r3, [r5, #0]
 800d5f6:	f7f4 fcc2 	bl	8001f7e <_fstat>
 800d5fa:	1c43      	adds	r3, r0, #1
 800d5fc:	d102      	bne.n	800d604 <_fstat_r+0x1c>
 800d5fe:	682b      	ldr	r3, [r5, #0]
 800d600:	b103      	cbz	r3, 800d604 <_fstat_r+0x1c>
 800d602:	6023      	str	r3, [r4, #0]
 800d604:	bd38      	pop	{r3, r4, r5, pc}
 800d606:	bf00      	nop
 800d608:	20001c88 	.word	0x20001c88

0800d60c <_isatty_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	4d06      	ldr	r5, [pc, #24]	; (800d628 <_isatty_r+0x1c>)
 800d610:	2300      	movs	r3, #0
 800d612:	4604      	mov	r4, r0
 800d614:	4608      	mov	r0, r1
 800d616:	602b      	str	r3, [r5, #0]
 800d618:	f7f4 fcc1 	bl	8001f9e <_isatty>
 800d61c:	1c43      	adds	r3, r0, #1
 800d61e:	d102      	bne.n	800d626 <_isatty_r+0x1a>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	b103      	cbz	r3, 800d626 <_isatty_r+0x1a>
 800d624:	6023      	str	r3, [r4, #0]
 800d626:	bd38      	pop	{r3, r4, r5, pc}
 800d628:	20001c88 	.word	0x20001c88

0800d62c <_lseek_r>:
 800d62c:	b538      	push	{r3, r4, r5, lr}
 800d62e:	4d07      	ldr	r5, [pc, #28]	; (800d64c <_lseek_r+0x20>)
 800d630:	4604      	mov	r4, r0
 800d632:	4608      	mov	r0, r1
 800d634:	4611      	mov	r1, r2
 800d636:	2200      	movs	r2, #0
 800d638:	602a      	str	r2, [r5, #0]
 800d63a:	461a      	mov	r2, r3
 800d63c:	f7f4 fcba 	bl	8001fb4 <_lseek>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d102      	bne.n	800d64a <_lseek_r+0x1e>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b103      	cbz	r3, 800d64a <_lseek_r+0x1e>
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	20001c88 	.word	0x20001c88

0800d650 <memmove>:
 800d650:	4288      	cmp	r0, r1
 800d652:	b510      	push	{r4, lr}
 800d654:	eb01 0402 	add.w	r4, r1, r2
 800d658:	d902      	bls.n	800d660 <memmove+0x10>
 800d65a:	4284      	cmp	r4, r0
 800d65c:	4623      	mov	r3, r4
 800d65e:	d807      	bhi.n	800d670 <memmove+0x20>
 800d660:	1e43      	subs	r3, r0, #1
 800d662:	42a1      	cmp	r1, r4
 800d664:	d008      	beq.n	800d678 <memmove+0x28>
 800d666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d66a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d66e:	e7f8      	b.n	800d662 <memmove+0x12>
 800d670:	4402      	add	r2, r0
 800d672:	4601      	mov	r1, r0
 800d674:	428a      	cmp	r2, r1
 800d676:	d100      	bne.n	800d67a <memmove+0x2a>
 800d678:	bd10      	pop	{r4, pc}
 800d67a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d67e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d682:	e7f7      	b.n	800d674 <memmove+0x24>

0800d684 <__malloc_lock>:
 800d684:	4801      	ldr	r0, [pc, #4]	; (800d68c <__malloc_lock+0x8>)
 800d686:	f7fe be36 	b.w	800c2f6 <__retarget_lock_acquire_recursive>
 800d68a:	bf00      	nop
 800d68c:	20001c80 	.word	0x20001c80

0800d690 <__malloc_unlock>:
 800d690:	4801      	ldr	r0, [pc, #4]	; (800d698 <__malloc_unlock+0x8>)
 800d692:	f7fe be31 	b.w	800c2f8 <__retarget_lock_release_recursive>
 800d696:	bf00      	nop
 800d698:	20001c80 	.word	0x20001c80

0800d69c <_realloc_r>:
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69e:	4607      	mov	r7, r0
 800d6a0:	4614      	mov	r4, r2
 800d6a2:	460e      	mov	r6, r1
 800d6a4:	b921      	cbnz	r1, 800d6b0 <_realloc_r+0x14>
 800d6a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d6aa:	4611      	mov	r1, r2
 800d6ac:	f7ff bbbe 	b.w	800ce2c <_malloc_r>
 800d6b0:	b922      	cbnz	r2, 800d6bc <_realloc_r+0x20>
 800d6b2:	f7ff fb6b 	bl	800cd8c <_free_r>
 800d6b6:	4625      	mov	r5, r4
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6bc:	f000 f82d 	bl	800d71a <_malloc_usable_size_r>
 800d6c0:	42a0      	cmp	r0, r4
 800d6c2:	d20f      	bcs.n	800d6e4 <_realloc_r+0x48>
 800d6c4:	4621      	mov	r1, r4
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	f7ff fbb0 	bl	800ce2c <_malloc_r>
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d0f2      	beq.n	800d6b8 <_realloc_r+0x1c>
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	4622      	mov	r2, r4
 800d6d6:	f7fb fbb3 	bl	8008e40 <memcpy>
 800d6da:	4631      	mov	r1, r6
 800d6dc:	4638      	mov	r0, r7
 800d6de:	f7ff fb55 	bl	800cd8c <_free_r>
 800d6e2:	e7e9      	b.n	800d6b8 <_realloc_r+0x1c>
 800d6e4:	4635      	mov	r5, r6
 800d6e6:	e7e7      	b.n	800d6b8 <_realloc_r+0x1c>

0800d6e8 <_read_r>:
 800d6e8:	b538      	push	{r3, r4, r5, lr}
 800d6ea:	4d07      	ldr	r5, [pc, #28]	; (800d708 <_read_r+0x20>)
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	4608      	mov	r0, r1
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	602a      	str	r2, [r5, #0]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	f7f4 fbfc 	bl	8001ef4 <_read>
 800d6fc:	1c43      	adds	r3, r0, #1
 800d6fe:	d102      	bne.n	800d706 <_read_r+0x1e>
 800d700:	682b      	ldr	r3, [r5, #0]
 800d702:	b103      	cbz	r3, 800d706 <_read_r+0x1e>
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	bd38      	pop	{r3, r4, r5, pc}
 800d708:	20001c88 	.word	0x20001c88

0800d70c <abort>:
 800d70c:	b508      	push	{r3, lr}
 800d70e:	2006      	movs	r0, #6
 800d710:	f000 f834 	bl	800d77c <raise>
 800d714:	2001      	movs	r0, #1
 800d716:	f7f4 fbe3 	bl	8001ee0 <_exit>

0800d71a <_malloc_usable_size_r>:
 800d71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d71e:	1f18      	subs	r0, r3, #4
 800d720:	2b00      	cmp	r3, #0
 800d722:	bfbc      	itt	lt
 800d724:	580b      	ldrlt	r3, [r1, r0]
 800d726:	18c0      	addlt	r0, r0, r3
 800d728:	4770      	bx	lr

0800d72a <_raise_r>:
 800d72a:	291f      	cmp	r1, #31
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	4604      	mov	r4, r0
 800d730:	460d      	mov	r5, r1
 800d732:	d904      	bls.n	800d73e <_raise_r+0x14>
 800d734:	2316      	movs	r3, #22
 800d736:	6003      	str	r3, [r0, #0]
 800d738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d73c:	bd38      	pop	{r3, r4, r5, pc}
 800d73e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d740:	b112      	cbz	r2, 800d748 <_raise_r+0x1e>
 800d742:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d746:	b94b      	cbnz	r3, 800d75c <_raise_r+0x32>
 800d748:	4620      	mov	r0, r4
 800d74a:	f000 f831 	bl	800d7b0 <_getpid_r>
 800d74e:	462a      	mov	r2, r5
 800d750:	4601      	mov	r1, r0
 800d752:	4620      	mov	r0, r4
 800d754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d758:	f000 b818 	b.w	800d78c <_kill_r>
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d00a      	beq.n	800d776 <_raise_r+0x4c>
 800d760:	1c59      	adds	r1, r3, #1
 800d762:	d103      	bne.n	800d76c <_raise_r+0x42>
 800d764:	2316      	movs	r3, #22
 800d766:	6003      	str	r3, [r0, #0]
 800d768:	2001      	movs	r0, #1
 800d76a:	e7e7      	b.n	800d73c <_raise_r+0x12>
 800d76c:	2400      	movs	r4, #0
 800d76e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d772:	4628      	mov	r0, r5
 800d774:	4798      	blx	r3
 800d776:	2000      	movs	r0, #0
 800d778:	e7e0      	b.n	800d73c <_raise_r+0x12>
	...

0800d77c <raise>:
 800d77c:	4b02      	ldr	r3, [pc, #8]	; (800d788 <raise+0xc>)
 800d77e:	4601      	mov	r1, r0
 800d780:	6818      	ldr	r0, [r3, #0]
 800d782:	f7ff bfd2 	b.w	800d72a <_raise_r>
 800d786:	bf00      	nop
 800d788:	20000010 	.word	0x20000010

0800d78c <_kill_r>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	4d07      	ldr	r5, [pc, #28]	; (800d7ac <_kill_r+0x20>)
 800d790:	2300      	movs	r3, #0
 800d792:	4604      	mov	r4, r0
 800d794:	4608      	mov	r0, r1
 800d796:	4611      	mov	r1, r2
 800d798:	602b      	str	r3, [r5, #0]
 800d79a:	f7f4 fb91 	bl	8001ec0 <_kill>
 800d79e:	1c43      	adds	r3, r0, #1
 800d7a0:	d102      	bne.n	800d7a8 <_kill_r+0x1c>
 800d7a2:	682b      	ldr	r3, [r5, #0]
 800d7a4:	b103      	cbz	r3, 800d7a8 <_kill_r+0x1c>
 800d7a6:	6023      	str	r3, [r4, #0]
 800d7a8:	bd38      	pop	{r3, r4, r5, pc}
 800d7aa:	bf00      	nop
 800d7ac:	20001c88 	.word	0x20001c88

0800d7b0 <_getpid_r>:
 800d7b0:	f7f4 bb7e 	b.w	8001eb0 <_getpid>

0800d7b4 <_init>:
 800d7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b6:	bf00      	nop
 800d7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ba:	bc08      	pop	{r3}
 800d7bc:	469e      	mov	lr, r3
 800d7be:	4770      	bx	lr

0800d7c0 <_fini>:
 800d7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c2:	bf00      	nop
 800d7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7c6:	bc08      	pop	{r3}
 800d7c8:	469e      	mov	lr, r3
 800d7ca:	4770      	bx	lr
