
hello_bme280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800887c  0800887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a04  08008a04  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008a04  08008a04  00018a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a0c  08008a0c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a94  20000074  08008a88  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b08  08008a88  00021b08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022403  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f5a  00000000  00000000  000424a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  00046408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001918  00000000  00000000  00047e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005632  00000000  00000000  000497b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3ed  00000000  00000000  0004ede2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100e59  00000000  00000000  0006b1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007898  00000000  00000000  0016c07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008864 	.word	0x08008864

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008864 	.word	0x08008864

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <BME280_vInit>:


void BME280_vInit(BME280Handle_t *pxBME280,
		I2C_HandleTypeDef *pxI2CHandle,
		uint8_t uI2CSlaveAddress )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	4613      	mov	r3, r2
 8000574:	71fb      	strb	r3, [r7, #7]
	pxBME280->pxI2CHandle = pxI2CHandle;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	601a      	str	r2, [r3, #0]
	pxBME280->uI2CSlaveAddress = uI2CSlaveAddress;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	79fa      	ldrb	r2, [r7, #7]
 8000580:	711a      	strb	r2, [r3, #4]

	pxBME280->xMeasureRegData = xDefaultMeasureRegData;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4908      	ldr	r1, [pc, #32]	; (80005a8 <BME280_vInit+0x40>)
 8000586:	1d5a      	adds	r2, r3, #5
 8000588:	460b      	mov	r3, r1
 800058a:	cb03      	ldmia	r3!, {r0, r1}
 800058c:	6010      	str	r0, [r2, #0]
 800058e:	6051      	str	r1, [r2, #4]
	pxBME280->xMeasureRawData = xDefaultMeasureRawData;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <BME280_vInit+0x44>)
 8000594:	3310      	adds	r3, #16
 8000596:	ca07      	ldmia	r2, {r0, r1, r2}
 8000598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000090 	.word	0x20000090
 80005ac:	20000098 	.word	0x20000098

080005b0 <BME280_vMeasureRawData>:

/* Read the raw register data [pressure, temperature, humidity] and cast 20-bit, 20-bit, 16-bit to the respective raw data */
void BME280_vMeasureRawData(BME280Handle_t *pxBME280)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af04      	add	r7, sp, #16
 80005b6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(pxBME280->pxI2CHandle, (uint16_t)(pxBME280->uI2CSlaveAddress << 1), (uint16_t)BME280_DATA_ADDRESS, 1, (uint8_t *)&(pxBME280->xMeasureRegData), 8, 50);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	b299      	uxth	r1, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3305      	adds	r3, #5
 80005ca:	2232      	movs	r2, #50	; 0x32
 80005cc:	9202      	str	r2, [sp, #8]
 80005ce:	2208      	movs	r2, #8
 80005d0:	9201      	str	r2, [sp, #4]
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	22f7      	movs	r2, #247	; 0xf7
 80005d8:	f000 ffce 	bl	8001578 <HAL_I2C_Mem_Read>

	pxBME280->xMeasureRawData.ulPressureRawData =
			(pxBME280->xMeasureRegData.xPressureRegData.uMSB << 12) +
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	795b      	ldrb	r3, [r3, #5]
 80005e0:	031a      	lsls	r2, r3, #12
			(pxBME280->xMeasureRegData.xPressureRegData.uLSB << 4) +
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	799b      	ldrb	r3, [r3, #6]
 80005e6:	011b      	lsls	r3, r3, #4
			(pxBME280->xMeasureRegData.xPressureRegData.uMSB << 12) +
 80005e8:	4413      	add	r3, r2
			(pxBME280->xMeasureRegData.xPressureRegData.uXLSB >> 4);
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	79d2      	ldrb	r2, [r2, #7]
 80005ee:	0912      	lsrs	r2, r2, #4
 80005f0:	b2d2      	uxtb	r2, r2
			(pxBME280->xMeasureRegData.xPressureRegData.uLSB << 4) +
 80005f2:	4413      	add	r3, r2
 80005f4:	461a      	mov	r2, r3
	pxBME280->xMeasureRawData.ulPressureRawData =
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	611a      	str	r2, [r3, #16]

	pxBME280->xMeasureRawData.ulTemperatureRawData =
			(pxBME280->xMeasureRegData.xTemperatureRegData.uMSB << 12) +
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7a1b      	ldrb	r3, [r3, #8]
 80005fe:	031a      	lsls	r2, r3, #12
			(pxBME280->xMeasureRegData.xTemperatureRegData.uLSB << 4) +
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7a5b      	ldrb	r3, [r3, #9]
 8000604:	011b      	lsls	r3, r3, #4
			(pxBME280->xMeasureRegData.xTemperatureRegData.uMSB << 12) +
 8000606:	4413      	add	r3, r2
			(pxBME280->xMeasureRegData.xTemperatureRegData.uXLSB >> 4);
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7a92      	ldrb	r2, [r2, #10]
 800060c:	0912      	lsrs	r2, r2, #4
 800060e:	b2d2      	uxtb	r2, r2
			(pxBME280->xMeasureRegData.xTemperatureRegData.uLSB << 4) +
 8000610:	4413      	add	r3, r2
 8000612:	461a      	mov	r2, r3
	pxBME280->xMeasureRawData.ulTemperatureRawData =
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	615a      	str	r2, [r3, #20]

	pxBME280->xMeasureRawData.uHumidityRawData =
			(pxBME280->xMeasureRegData.xTemperatureRegData.uMSB << 8) +
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	7a1b      	ldrb	r3, [r3, #8]
 800061c:	b29b      	uxth	r3, r3
 800061e:	021b      	lsls	r3, r3, #8
 8000620:	b29a      	uxth	r2, r3
			(pxBME280->xMeasureRegData.xTemperatureRegData.uLSB);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7a5b      	ldrb	r3, [r3, #9]
 8000626:	b29b      	uxth	r3, r3
			(pxBME280->xMeasureRegData.xTemperatureRegData.uMSB << 8) +
 8000628:	4413      	add	r3, r2
 800062a:	b29a      	uxth	r2, r3
	pxBME280->xMeasureRawData.uHumidityRawData =
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	831a      	strh	r2, [r3, #24]
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <BME280_vPrintRawData>:


/* DEBUG */
void BME280_vPrintRawData(BME280Handle_t *pxBME280)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	printf("Pressure Raw Data: %lu\r\n", pxBME280->xMeasureRawData.ulPressureRawData);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	4619      	mov	r1, r3
 8000646:	4809      	ldr	r0, [pc, #36]	; (800066c <BME280_vPrintRawData+0x34>)
 8000648:	f007 f940 	bl	80078cc <iprintf>
	printf("Temperature Raw Data: %lu\r\n", pxBME280->xMeasureRawData.ulTemperatureRawData);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4619      	mov	r1, r3
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <BME280_vPrintRawData+0x38>)
 8000654:	f007 f93a 	bl	80078cc <iprintf>
	printf("Humidity Raw Data: %u\r\n", pxBME280->xMeasureRawData.uHumidityRawData);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	8b1b      	ldrh	r3, [r3, #24]
 800065c:	4619      	mov	r1, r3
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <BME280_vPrintRawData+0x3c>)
 8000660:	f007 f934 	bl	80078cc <iprintf>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	0800887c 	.word	0x0800887c
 8000670:	08008898 	.word	0x08008898
 8000674:	080088b4 	.word	0x080088b4

08000678 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000680:	1d39      	adds	r1, r7, #4
 8000682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000686:	2201      	movs	r2, #1
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <__io_putchar+0x20>)
 800068a:	f003 fec1 	bl	8004410 <HAL_UART_Transmit>
	return ch;
 800068e:	687b      	ldr	r3, [r7, #4]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200019e4 	.word	0x200019e4

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 fbbe 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f822 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f000 f908 	bl	80008bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ac:	f000 f8d6 	bl	800085c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006b0:	f000 f894 	bl	80007dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BME280_vInit(&xBME280, &hi2c1, BME280_I2C_SLAVE_ADDRESS_A);
 80006b4:	2276      	movs	r2, #118	; 0x76
 80006b6:	4908      	ldr	r1, [pc, #32]	; (80006d8 <main+0x3c>)
 80006b8:	4808      	ldr	r0, [pc, #32]	; (80006dc <main+0x40>)
 80006ba:	f7ff ff55 	bl	8000568 <BME280_vInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006be:	f004 fb71 	bl	8004da4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006c2:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <main+0x44>)
 80006c4:	2100      	movs	r1, #0
 80006c6:	4807      	ldr	r0, [pc, #28]	; (80006e4 <main+0x48>)
 80006c8:	f004 fbb6 	bl	8004e38 <osThreadNew>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <main+0x4c>)
 80006d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006d2:	f004 fb8b 	bl	8004dec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <main+0x3a>
 80006d8:	20001998 	.word	0x20001998
 80006dc:	2000197c 	.word	0x2000197c
 80006e0:	08008900 	.word	0x08008900
 80006e4:	08000935 	.word	0x08000935
 80006e8:	20001978 	.word	0x20001978

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0b8      	sub	sp, #224	; 0xe0
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006f6:	2244      	movs	r2, #68	; 0x44
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f007 f8de 	bl	80078bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2288      	movs	r2, #136	; 0x88
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f007 f8d0 	bl	80078bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072a:	2310      	movs	r3, #16
 800072c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000736:	2302      	movs	r3, #2
 8000738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000742:	230a      	movs	r3, #10
 8000744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000748:	2307      	movs	r3, #7
 800074a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800075e:	4618      	mov	r0, r3
 8000760:	f002 f85c 	bl	800281c <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800076a:	f000 f90b 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2303      	movs	r3, #3
 8000776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800078c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000790:	2104      	movs	r1, #4
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fc28 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800079e:	f000 f8f1 	bl	8000984 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80007a2:	2342      	movs	r3, #66	; 0x42
 80007a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fe51 	bl	8003458 <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007bc:	f000 f8e2 	bl	8000984 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c4:	f001 ffd4 	bl	8002770 <HAL_PWREx_ControlVoltageScaling>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80007ce:	f000 f8d9 	bl	8000984 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	37e0      	adds	r7, #224	; 0xe0
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_I2C1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_I2C1_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_I2C1_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <MX_I2C1_Init+0x74>)
 8000818:	f000 fe1e 	bl	8001458 <HAL_I2C_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000822:	f000 f8af 	bl	8000984 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <MX_I2C1_Init+0x74>)
 800082a:	f001 fefb 	bl	8002624 <HAL_I2CEx_ConfigAnalogFilter>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 f8a6 	bl	8000984 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_I2C1_Init+0x74>)
 800083c:	f001 ff3d 	bl	80026ba <HAL_I2CEx_ConfigDigitalFilter>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 f89d 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20001998 	.word	0x20001998
 8000854:	40005400 	.word	0x40005400
 8000858:	10909cec 	.word	0x10909cec

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <MX_USART2_UART_Init+0x5c>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 80008a0:	f003 fd68 	bl	8004374 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f86b 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200019e4 	.word	0x200019e4
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_GPIO_Init+0x74>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a1a      	ldr	r2, [pc, #104]	; (8000930 <MX_GPIO_Init+0x74>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_GPIO_Init+0x74>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_GPIO_Init+0x74>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a14      	ldr	r2, [pc, #80]	; (8000930 <MX_GPIO_Init+0x74>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_GPIO_Init+0x74>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_GPIO_Init+0x74>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <MX_GPIO_Init+0x74>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_GPIO_Init+0x74>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_GPIO_Init+0x74>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <MX_GPIO_Init+0x74>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_GPIO_Init+0x74>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
  	printf("hello, world!\r\n");
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <StartDefaultTask+0x24>)
 800093e:	f007 f84b 	bl	80079d8 <puts>



  	//HAL_I2C_Mem_Read(&hi2c1, (0x76<<1), BME280_DATA_ADDRESS, 1, &(xBME280.xRawData), 8, 50);

  	BME280_vMeasureRawData(&xBME280);
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <StartDefaultTask+0x28>)
 8000944:	f7ff fe34 	bl	80005b0 <BME280_vMeasureRawData>
  	BME280_vPrintRawData(&xBME280);
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <StartDefaultTask+0x28>)
 800094a:	f7ff fe75 	bl	8000638 <BME280_vPrintRawData>

  	//HAL_I2C_Master_Transmit(&hi2c, DevAddress, pData, Size, 1000);
    osDelay(2000);
 800094e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000952:	f004 fb03 	bl	8004f5c <osDelay>
  	printf("hello, world!\r\n");
 8000956:	e7f1      	b.n	800093c <StartDefaultTask+0x8>
 8000958:	080088d8 	.word	0x080088d8
 800095c:	2000197c 	.word	0x2000197c

08000960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000972:	f000 fa75 	bl	8000e60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40001000 	.word	0x40001000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_MspInit+0x4c>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6613      	str	r3, [r2, #96]	; 0x60
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_MspInit+0x4c>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_MspInit+0x4c>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	f06f 0001 	mvn.w	r0, #1
 80009ce:	f000 fb1f 	bl	8001010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1f      	ldr	r2, [pc, #124]	; (8000a7c <HAL_I2C_MspInit+0x9c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d138      	bne.n	8000a74 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_I2C_MspInit+0xa0>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <HAL_I2C_MspInit+0xa0>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_I2C_MspInit+0xa0>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a20:	2312      	movs	r3, #18
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4813      	ldr	r0, [pc, #76]	; (8000a84 <HAL_I2C_MspInit+0xa4>)
 8000a38:	f000 fb64 	bl	8001104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_I2C_MspInit+0xa0>)
 8000a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a40:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <HAL_I2C_MspInit+0xa0>)
 8000a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a46:	6593      	str	r3, [r2, #88]	; 0x58
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_I2C_MspInit+0xa0>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2105      	movs	r1, #5
 8000a58:	201f      	movs	r0, #31
 8000a5a:	f000 fad9 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a5e:	201f      	movs	r0, #31
 8000a60:	f000 faf2 	bl	8001048 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2105      	movs	r1, #5
 8000a68:	2020      	movs	r0, #32
 8000a6a:	f000 fad1 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a6e:	2020      	movs	r0, #32
 8000a70:	f000 faea 	bl	8001048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	; 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000400 	.word	0x48000400

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_UART_MspInit+0x7c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d128      	bne.n	8000afc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_UART_MspInit+0x80>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ada:	230c      	movs	r3, #12
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aea:	2307      	movs	r3, #7
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fb04 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40004400 	.word	0x40004400
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2036      	movs	r0, #54	; 0x36
 8000b22:	f000 fa75 	bl	8001010 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b26:	2036      	movs	r0, #54	; 0x36
 8000b28:	f000 fa8e 	bl	8001048 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <HAL_InitTick+0x9c>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <HAL_InitTick+0x9c>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6593      	str	r3, [r2, #88]	; 0x58
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_InitTick+0x9c>)
 8000b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3c:	f003 0310 	and.w	r3, r3, #16
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b44:	f107 0210 	add.w	r2, r7, #16
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fbf0 	bl	8003334 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b54:	f002 fbc2 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8000b58:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <HAL_InitTick+0xa0>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9b      	lsrs	r3, r3, #18
 8000b64:	3b01      	subs	r3, #1
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b8a:	f003 f921 	bl	8003dd0 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d104      	bne.n	8000b9e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b94:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b96:	f003 f97d 	bl	8003e94 <HAL_TIM_Base_Start_IT>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	431bde83 	.word	0x431bde83
 8000bb0:	20001a68 	.word	0x20001a68
 8000bb4:	40001000 	.word	0x40001000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <I2C1_EV_IRQHandler+0x10>)
 8000bea:	f000 fddf 	bl	80017ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20001998 	.word	0x20001998

08000bf8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <I2C1_ER_IRQHandler+0x10>)
 8000bfe:	f000 fdef 	bl	80017e0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20001998 	.word	0x20001998

08000c0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM6_DAC_IRQHandler+0x10>)
 8000c12:	f003 f9af 	bl	8003f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20001a68 	.word	0x20001a68

08000c20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e00a      	b.n	8000c48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c32:	f3af 8000 	nop.w
 8000c36:	4601      	mov	r1, r0
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf0      	blt.n	8000c32 <_read+0x12>
	}

return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	e009      	b.n	8000c80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fcff 	bl	8000678 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbf1      	blt.n	8000c6c <_write+0x12>
	}
	return len;
 8000c88:	687b      	ldr	r3, [r7, #4]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_close>:

int _close(int file)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	return -1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cba:	605a      	str	r2, [r3, #4]
	return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <_isatty>:

int _isatty(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f006 fd8e 	bl	800784c <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20018000 	.word	0x20018000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	200000a4 	.word	0x200000a4
 8000d64:	20001b08 	.word	0x20001b08

08000d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <SystemInit+0x5c>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <SystemInit+0x5c>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <SystemInit+0x60>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a11      	ldr	r2, [pc, #68]	; (8000dc8 <SystemInit+0x60>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <SystemInit+0x60>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <SystemInit+0x60>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <SystemInit+0x60>)
 8000d94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <SystemInit+0x60>)
 8000da0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000da4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <SystemInit+0x60>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <SystemInit+0x60>)
 8000dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SystemInit+0x60>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00
 8000dc8:	40021000 	.word	0x40021000

08000dcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd0:	f7ff ffca 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000dd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dd6:	e003      	b.n	8000de0 <LoopCopyDataInit>

08000dd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ddc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dde:	3104      	adds	r1, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000de4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000de6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000de8:	d3f6      	bcc.n	8000dd8 <CopyDataInit>
	ldr	r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000dec:	e002      	b.n	8000df4 <LoopFillZerobss>

08000dee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000df0:	f842 3b04 	str.w	r3, [r2], #4

08000df4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <LoopForever+0x16>)
	cmp	r2, r3
 8000df6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000df8:	d3f9      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f006 fd2d 	bl	8007858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dfe:	f7ff fc4d 	bl	800069c <main>

08000e02 <LoopForever>:

LoopForever:
    b LoopForever
 8000e02:	e7fe      	b.n	8000e02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e04:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e08:	08008a14 	.word	0x08008a14
	ldr	r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e10:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000e14:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000e18:	20001b08 	.word	0x20001b08

08000e1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC1_2_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_Init+0x3c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <HAL_Init+0x3c>)
 8000e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 f8df 	bl	8000ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fe65 	bl	8000b0c <HAL_InitTick>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	e001      	b.n	8000e52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e4e:	f7ff fd9f 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40022000 	.word	0x40022000

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20001ab4 	.word	0x20001ab4

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20001ab4 	.word	0x20001ab4

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff4c 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001022:	f7ff ff61 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 8001026:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	6978      	ldr	r0, [r7, #20]
 800102e:	f7ff ffb1 	bl	8000f94 <NVIC_EncodePriority>
 8001032:	4602      	mov	r2, r0
 8001034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff80 	bl	8000f40 <__NVIC_SetPriority>
}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff54 	bl	8000f04 <__NVIC_EnableIRQ>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d005      	beq.n	8001088 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2204      	movs	r2, #4
 8001080:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e029      	b.n	80010dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 020e 	bic.w	r2, r2, #14
 8001096:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0201 	bic.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ac:	f003 021c 	and.w	r2, r3, #28
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	2101      	movs	r1, #1
 80010b6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	4798      	blx	r3
    }
  }
  return status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010f4:	b2db      	uxtb	r3, r3
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001112:	e17f      	b.n	8001414 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8171 	beq.w	800140e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d00b      	beq.n	800114c <HAL_GPIO_Init+0x48>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d007      	beq.n	800114c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001140:	2b11      	cmp	r3, #17
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b12      	cmp	r3, #18
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 0201 	and.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d118      	bne.n	80011ec <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x128>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b12      	cmp	r3, #18
 800122a:	d123      	bne.n	8001274 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	6939      	ldr	r1, [r7, #16]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80ac 	beq.w	800140e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <HAL_GPIO_Init+0x330>)
 80012b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ba:	4a5e      	ldr	r2, [pc, #376]	; (8001434 <HAL_GPIO_Init+0x330>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6613      	str	r3, [r2, #96]	; 0x60
 80012c2:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <HAL_GPIO_Init+0x330>)
 80012c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ce:	4a5a      	ldr	r2, [pc, #360]	; (8001438 <HAL_GPIO_Init+0x334>)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	220f      	movs	r2, #15
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012f8:	d025      	beq.n	8001346 <HAL_GPIO_Init+0x242>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_GPIO_Init+0x338>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <HAL_GPIO_Init+0x23e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4e      	ldr	r2, [pc, #312]	; (8001440 <HAL_GPIO_Init+0x33c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x23a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4d      	ldr	r2, [pc, #308]	; (8001444 <HAL_GPIO_Init+0x340>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x236>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <HAL_GPIO_Init+0x344>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x232>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4b      	ldr	r2, [pc, #300]	; (800144c <HAL_GPIO_Init+0x348>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x22e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4a      	ldr	r2, [pc, #296]	; (8001450 <HAL_GPIO_Init+0x34c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x22a>
 800132a:	2306      	movs	r3, #6
 800132c:	e00c      	b.n	8001348 <HAL_GPIO_Init+0x244>
 800132e:	2307      	movs	r3, #7
 8001330:	e00a      	b.n	8001348 <HAL_GPIO_Init+0x244>
 8001332:	2305      	movs	r3, #5
 8001334:	e008      	b.n	8001348 <HAL_GPIO_Init+0x244>
 8001336:	2304      	movs	r3, #4
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x244>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <HAL_GPIO_Init+0x244>
 800133e:	2302      	movs	r3, #2
 8001340:	e002      	b.n	8001348 <HAL_GPIO_Init+0x244>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x244>
 8001346:	2300      	movs	r3, #0
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	f002 0203 	and.w	r2, r2, #3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4093      	lsls	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001358:	4937      	ldr	r1, [pc, #220]	; (8001438 <HAL_GPIO_Init+0x334>)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001366:	4b3b      	ldr	r3, [pc, #236]	; (8001454 <HAL_GPIO_Init+0x350>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800138a:	4a32      	ldr	r2, [pc, #200]	; (8001454 <HAL_GPIO_Init+0x350>)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001390:	4b30      	ldr	r3, [pc, #192]	; (8001454 <HAL_GPIO_Init+0x350>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b4:	4a27      	ldr	r2, [pc, #156]	; (8001454 <HAL_GPIO_Init+0x350>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_GPIO_Init+0x350>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013de:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_GPIO_Init+0x350>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_GPIO_Init+0x350>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_GPIO_Init+0x350>)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa22 f303 	lsr.w	r3, r2, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	f47f ae78 	bne.w	8001114 <HAL_GPIO_Init+0x10>
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	371c      	adds	r7, #28
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	40010000 	.word	0x40010000
 800143c:	48000400 	.word	0x48000400
 8001440:	48000800 	.word	0x48000800
 8001444:	48000c00 	.word	0x48000c00
 8001448:	48001000 	.word	0x48001000
 800144c:	48001400 	.word	0x48001400
 8001450:	48001800 	.word	0x48001800
 8001454:	40010400 	.word	0x40010400

08001458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e081      	b.n	800156e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff faae 	bl	80009e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2224      	movs	r2, #36	; 0x24
 8001488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	e006      	b.n	80014e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d104      	bne.n	80014f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001504:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001514:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	ea42 0103 	orr.w	r1, r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	021a      	lsls	r2, r3, #8
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69d9      	ldr	r1, [r3, #28]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1a      	ldr	r2, [r3, #32]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2220      	movs	r2, #32
 800155a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af02      	add	r7, sp, #8
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	4608      	mov	r0, r1
 8001582:	4611      	mov	r1, r2
 8001584:	461a      	mov	r2, r3
 8001586:	4603      	mov	r3, r0
 8001588:	817b      	strh	r3, [r7, #10]
 800158a:	460b      	mov	r3, r1
 800158c:	813b      	strh	r3, [r7, #8]
 800158e:	4613      	mov	r3, r2
 8001590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b20      	cmp	r3, #32
 800159c:	f040 80fd 	bne.w	800179a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <HAL_I2C_Mem_Read+0x34>
 80015a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0f1      	b.n	800179c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_I2C_Mem_Read+0x4e>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e0ea      	b.n	800179c <HAL_I2C_Mem_Read+0x224>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015ce:	f7ff fc5b 	bl	8000e88 <HAL_GetTick>
 80015d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2319      	movs	r3, #25
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fe70 	bl	80022c6 <I2C_WaitOnFlagUntilTimeout>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0d5      	b.n	800179c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2222      	movs	r2, #34	; 0x22
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2240      	movs	r2, #64	; 0x40
 80015fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001618:	88f8      	ldrh	r0, [r7, #6]
 800161a:	893a      	ldrh	r2, [r7, #8]
 800161c:	8979      	ldrh	r1, [r7, #10]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	4603      	mov	r3, r0
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 fa7d 	bl	8001b28 <I2C_RequestMemoryRead>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0ad      	b.n	800179c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29b      	uxth	r3, r3
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d90e      	bls.n	8001668 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	22ff      	movs	r2, #255	; 0xff
 800164e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001654:	b2da      	uxtb	r2, r3
 8001656:	8979      	ldrh	r1, [r7, #10]
 8001658:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <HAL_I2C_Mem_Read+0x22c>)
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 ff53 	bl	800250c <I2C_TransferConfig>
 8001666:	e00f      	b.n	8001688 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166c:	b29a      	uxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001676:	b2da      	uxtb	r2, r3
 8001678:	8979      	ldrh	r1, [r7, #10]
 800167a:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_I2C_Mem_Read+0x22c>)
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 ff42 	bl	800250c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168e:	2200      	movs	r2, #0
 8001690:	2104      	movs	r1, #4
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fe17 	bl	80022c6 <I2C_WaitOnFlagUntilTimeout>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e07c      	b.n	800179c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d034      	beq.n	8001748 <HAL_I2C_Mem_Read+0x1d0>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d130      	bne.n	8001748 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ec:	2200      	movs	r2, #0
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 fde8 	bl	80022c6 <I2C_WaitOnFlagUntilTimeout>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e04d      	b.n	800179c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	2bff      	cmp	r3, #255	; 0xff
 8001708:	d90e      	bls.n	8001728 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	22ff      	movs	r2, #255	; 0xff
 800170e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001714:	b2da      	uxtb	r2, r3
 8001716:	8979      	ldrh	r1, [r7, #10]
 8001718:	2300      	movs	r3, #0
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 fef3 	bl	800250c <I2C_TransferConfig>
 8001726:	e00f      	b.n	8001748 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172c:	b29a      	uxth	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001736:	b2da      	uxtb	r2, r3
 8001738:	8979      	ldrh	r1, [r7, #10]
 800173a:	2300      	movs	r3, #0
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 fee2 	bl	800250c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174c:	b29b      	uxth	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d19a      	bne.n	8001688 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 fe35 	bl	80023c6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e01a      	b.n	800179c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2220      	movs	r2, #32
 800176c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_I2C_Mem_Read+0x230>)
 800177a:	400b      	ands	r3, r1
 800177c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2220      	movs	r2, #32
 8001782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800179a:	2302      	movs	r3, #2
  }
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	80002400 	.word	0x80002400
 80017a8:	fe00e800 	.word	0xfe00e800

080017ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	68f9      	ldr	r1, [r7, #12]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
  }
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d010      	beq.n	8001826 <HAL_I2C_ER_IRQHandler+0x46>
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	09db      	lsrs	r3, r3, #7
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00a      	beq.n	8001826 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001824:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	0a9b      	lsrs	r3, r3, #10
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d010      	beq.n	8001854 <HAL_I2C_ER_IRQHandler+0x74>
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	09db      	lsrs	r3, r3, #7
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00a      	beq.n	8001854 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f043 0208 	orr.w	r2, r3, #8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001852:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	0a5b      	lsrs	r3, r3, #9
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d010      	beq.n	8001882 <HAL_I2C_ER_IRQHandler+0xa2>
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	09db      	lsrs	r3, r3, #7
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	f043 0202 	orr.w	r2, r3, #2
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001880:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 030b 	and.w	r3, r3, #11
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001892:	68f9      	ldr	r1, [r7, #12]
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fbdd 	bl	8002054 <I2C_ITError>
  }
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	70fb      	strb	r3, [r7, #3]
 80018d6:	4613      	mov	r3, r2
 80018d8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <I2C_Slave_ISR_IT+0x24>
 8001942:	2302      	movs	r3, #2
 8001944:	e0ec      	b.n	8001b20 <I2C_Slave_ISR_IT+0x1fe>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <I2C_Slave_ISR_IT+0x4c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	095b      	lsrs	r3, r3, #5
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001966:	6939      	ldr	r1, [r7, #16]
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 fa13 	bl	8001d94 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d04d      	beq.n	8001a16 <I2C_Slave_ISR_IT+0xf4>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d047      	beq.n	8001a16 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198a:	b29b      	uxth	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d128      	bne.n	80019e2 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b28      	cmp	r3, #40	; 0x28
 800199a:	d108      	bne.n	80019ae <I2C_Slave_ISR_IT+0x8c>
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019a2:	d104      	bne.n	80019ae <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80019a4:	6939      	ldr	r1, [r7, #16]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 fafe 	bl	8001fa8 <I2C_ITListenCplt>
 80019ac:	e032      	b.n	8001a14 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b29      	cmp	r3, #41	; 0x29
 80019b8:	d10e      	bne.n	80019d8 <I2C_Slave_ISR_IT+0xb6>
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019c0:	d00a      	beq.n	80019d8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2210      	movs	r2, #16
 80019c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fc39 	bl	8002242 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 f981 	bl	8001cd8 <I2C_ITSlaveSeqCplt>
 80019d6:	e01d      	b.n	8001a14 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2210      	movs	r2, #16
 80019de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80019e0:	e096      	b.n	8001b10 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2210      	movs	r2, #16
 80019e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f043 0204 	orr.w	r2, r3, #4
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <I2C_Slave_ISR_IT+0xe4>
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a02:	f040 8085 	bne.w	8001b10 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 fb21 	bl	8002054 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a12:	e07d      	b.n	8001b10 <I2C_Slave_ISR_IT+0x1ee>
 8001a14:	e07c      	b.n	8001b10 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d030      	beq.n	8001a84 <I2C_Slave_ISR_IT+0x162>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d02a      	beq.n	8001a84 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d018      	beq.n	8001a6a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d14f      	bne.n	8001b14 <I2C_Slave_ISR_IT+0x1f2>
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a7a:	d04b      	beq.n	8001b14 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f92b 	bl	8001cd8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001a82:	e047      	b.n	8001b14 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	08db      	lsrs	r3, r3, #3
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00a      	beq.n	8001aa6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	08db      	lsrs	r3, r3, #3
 8001a94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001a9c:	6939      	ldr	r1, [r7, #16]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f896 	bl	8001bd0 <I2C_ITAddrCplt>
 8001aa4:	e037      	b.n	8001b16 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	085b      	lsrs	r3, r3, #1
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d031      	beq.n	8001b16 <I2C_Slave_ISR_IT+0x1f4>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d02b      	beq.n	8001b16 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d018      	beq.n	8001afa <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	; 0x28
 8001af8:	e00d      	b.n	8001b16 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b00:	d002      	beq.n	8001b08 <I2C_Slave_ISR_IT+0x1e6>
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d106      	bne.n	8001b16 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f8e5 	bl	8001cd8 <I2C_ITSlaveSeqCplt>
 8001b0e:	e002      	b.n	8001b16 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001b10:	bf00      	nop
 8001b12:	e000      	b.n	8001b16 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001b14:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	4608      	mov	r0, r1
 8001b32:	4611      	mov	r1, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	4603      	mov	r3, r0
 8001b38:	817b      	strh	r3, [r7, #10]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	813b      	strh	r3, [r7, #8]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	8979      	ldrh	r1, [r7, #10]
 8001b48:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <I2C_RequestMemoryRead+0xa4>)
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fcdc 	bl	800250c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	69b9      	ldr	r1, [r7, #24]
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fbf4 	bl	8002346 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e02c      	b.n	8001bc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d105      	bne.n	8001b7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b6e:	893b      	ldrh	r3, [r7, #8]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28
 8001b78:	e015      	b.n	8001ba6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b7a:	893b      	ldrh	r3, [r7, #8]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fbda 	bl	8002346 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e012      	b.n	8001bc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b9c:	893b      	ldrh	r3, [r7, #8]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2200      	movs	r2, #0
 8001bae:	2140      	movs	r1, #64	; 0x40
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 fb88 	bl	80022c6 <I2C_WaitOnFlagUntilTimeout>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	80002000 	.word	0x80002000

08001bd0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001be6:	2b28      	cmp	r3, #40	; 0x28
 8001be8:	d16a      	bne.n	8001cc0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	0c1b      	lsrs	r3, r3, #16
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001c08:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c16:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001c24:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d138      	bne.n	8001ca0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001c2e:	897b      	ldrh	r3, [r7, #10]
 8001c30:	09db      	lsrs	r3, r3, #7
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	89bb      	ldrh	r3, [r7, #12]
 8001c36:	4053      	eors	r3, r2
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	f003 0306 	and.w	r3, r3, #6
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d11c      	bne.n	8001c7c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d13b      	bne.n	8001cd0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2208      	movs	r2, #8
 8001c64:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c6e:	89ba      	ldrh	r2, [r7, #12]
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fe28 	bl	80018ca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001c7a:	e029      	b.n	8001cd0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001c7c:	893b      	ldrh	r3, [r7, #8]
 8001c7e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fc6f 	bl	8002568 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c92:	89ba      	ldrh	r2, [r7, #12]
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fe16 	bl	80018ca <HAL_I2C_AddrCallback>
}
 8001c9e:	e017      	b.n	8001cd0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fc5f 	bl	8002568 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cb2:	89ba      	ldrh	r2, [r7, #12]
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fe06 	bl	80018ca <HAL_I2C_AddrCallback>
}
 8001cbe:	e007      	b.n	8001cd0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	0b9b      	lsrs	r3, r3, #14
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e00d      	b.n	8001d2a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	0bdb      	lsrs	r3, r3, #15
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b29      	cmp	r3, #41	; 0x29
 8001d34:	d112      	bne.n	8001d5c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2228      	movs	r2, #40	; 0x28
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2221      	movs	r2, #33	; 0x21
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d44:	2101      	movs	r1, #1
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fc0e 	bl	8002568 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fda4 	bl	80018a2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001d5a:	e017      	b.n	8001d8c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b2a      	cmp	r3, #42	; 0x2a
 8001d66:	d111      	bne.n	8001d8c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2228      	movs	r2, #40	; 0x28
 8001d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2222      	movs	r2, #34	; 0x22
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d76:	2102      	movs	r1, #2
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 fbf5 	bl	8002568 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fd95 	bl	80018b6 <HAL_I2C_SlaveRxCpltCallback>
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2220      	movs	r2, #32
 8001db8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b21      	cmp	r3, #33	; 0x21
 8001dbe:	d002      	beq.n	8001dc6 <I2C_ITSlaveCplt+0x32>
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b29      	cmp	r3, #41	; 0x29
 8001dc4:	d108      	bne.n	8001dd8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001dc6:	f248 0101 	movw	r1, #32769	; 0x8001
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fbcc 	bl	8002568 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2221      	movs	r2, #33	; 0x21
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd6:	e00d      	b.n	8001df4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b22      	cmp	r3, #34	; 0x22
 8001ddc:	d002      	beq.n	8001de4 <I2C_ITSlaveCplt+0x50>
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	2b2a      	cmp	r3, #42	; 0x2a
 8001de2:	d107      	bne.n	8001df4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001de4:	f248 0102 	movw	r1, #32770	; 0x8002
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fbbd 	bl	8002568 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2222      	movs	r2, #34	; 0x22
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e02:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b64      	ldr	r3, [pc, #400]	; (8001fa0 <I2C_ITSlaveCplt+0x20c>)
 8001e10:	400b      	ands	r3, r1
 8001e12:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fa14 	bl	8002242 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	0b9b      	lsrs	r3, r3, #14
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d013      	beq.n	8001e4e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e34:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d020      	beq.n	8001e80 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e4c:	e018      	b.n	8001e80 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	0bdb      	lsrs	r3, r3, #15
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d012      	beq.n	8001e80 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e68:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d006      	beq.n	8001e80 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f023 0304 	bic.w	r3, r3, #4
 8001e92:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00c      	beq.n	8001ece <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	f043 0204 	orr.w	r2, r3, #4
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d010      	beq.n	8001f1c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	4619      	mov	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8a7 	bl	8002054 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b28      	cmp	r3, #40	; 0x28
 8001f10:	d141      	bne.n	8001f96 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f12:	6979      	ldr	r1, [r7, #20]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f847 	bl	8001fa8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f1a:	e03c      	b.n	8001f96 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f24:	d014      	beq.n	8001f50 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fed6 	bl	8001cd8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <I2C_ITSlaveCplt+0x210>)
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff fccc 	bl	80018e6 <HAL_I2C_ListenCpltCallback>
}
 8001f4e:	e022      	b.n	8001f96 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b22      	cmp	r3, #34	; 0x22
 8001f5a:	d10e      	bne.n	8001f7a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fc9f 	bl	80018b6 <HAL_I2C_SlaveRxCpltCallback>
}
 8001f78:	e00d      	b.n	8001f96 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff fc86 	bl	80018a2 <HAL_I2C_SlaveTxCpltCallback>
}
 8001f96:	bf00      	nop
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	fe00e800 	.word	0xfe00e800
 8001fa4:	ffff0000 	.word	0xffff0000

08001fa8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a26      	ldr	r2, [pc, #152]	; (8002050 <I2C_ITListenCplt+0xa8>)
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d022      	beq.n	8002026 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d012      	beq.n	8002026 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f043 0204 	orr.w	r2, r3, #4
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002026:	f248 0103 	movw	r1, #32771	; 0x8003
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fa9c 	bl	8002568 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2210      	movs	r2, #16
 8002036:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fc50 	bl	80018e6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	ffff0000 	.word	0xffff0000

08002054 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a5d      	ldr	r2, [pc, #372]	; (80021e8 <I2C_ITError+0x194>)
 8002072:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b28      	cmp	r3, #40	; 0x28
 800208a:	d005      	beq.n	8002098 <I2C_ITError+0x44>
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b29      	cmp	r3, #41	; 0x29
 8002090:	d002      	beq.n	8002098 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	2b2a      	cmp	r3, #42	; 0x2a
 8002096:	d10b      	bne.n	80020b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002098:	2103      	movs	r1, #3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa64 	bl	8002568 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2228      	movs	r2, #40	; 0x28
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a50      	ldr	r2, [pc, #320]	; (80021ec <I2C_ITError+0x198>)
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34
 80020ae:	e011      	b.n	80020d4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80020b0:	f248 0103 	movw	r1, #32771	; 0x8003
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fa57 	bl	8002568 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b60      	cmp	r3, #96	; 0x60
 80020c4:	d003      	beq.n	80020ce <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d039      	beq.n	8002156 <I2C_ITError+0x102>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b11      	cmp	r3, #17
 80020e6:	d002      	beq.n	80020ee <I2C_ITError+0x9a>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b21      	cmp	r3, #33	; 0x21
 80020ec:	d133      	bne.n	8002156 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020fc:	d107      	bne.n	800210e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800210c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe ffe7 	bl	80010e6 <HAL_DMA_GetState>
 8002118:	4603      	mov	r3, r0
 800211a:	2b01      	cmp	r3, #1
 800211c:	d017      	beq.n	800214e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	4a33      	ldr	r2, [pc, #204]	; (80021f0 <I2C_ITError+0x19c>)
 8002124:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe ff96 	bl	8001064 <HAL_DMA_Abort_IT>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d04d      	beq.n	80021da <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002148:	4610      	mov	r0, r2
 800214a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800214c:	e045      	b.n	80021da <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f850 	bl	80021f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002154:	e041      	b.n	80021da <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d039      	beq.n	80021d2 <I2C_ITError+0x17e>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b12      	cmp	r3, #18
 8002162:	d002      	beq.n	800216a <I2C_ITError+0x116>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b22      	cmp	r3, #34	; 0x22
 8002168:	d133      	bne.n	80021d2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002178:	d107      	bne.n	800218a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002188:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe ffa9 	bl	80010e6 <HAL_DMA_GetState>
 8002194:	4603      	mov	r3, r0
 8002196:	2b01      	cmp	r3, #1
 8002198:	d017      	beq.n	80021ca <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <I2C_ITError+0x19c>)
 80021a0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe ff58 	bl	8001064 <HAL_DMA_Abort_IT>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d011      	beq.n	80021de <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021c4:	4610      	mov	r0, r2
 80021c6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021c8:	e009      	b.n	80021de <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f812 	bl	80021f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021d0:	e005      	b.n	80021de <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f80e 	bl	80021f4 <I2C_TreatErrorCallback>
  }
}
 80021d8:	e002      	b.n	80021e0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021da:	bf00      	nop
 80021dc:	e000      	b.n	80021e0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021de:	bf00      	nop
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	ffff0000 	.word	0xffff0000
 80021ec:	08001923 	.word	0x08001923
 80021f0:	0800228b 	.word	0x0800228b

080021f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b60      	cmp	r3, #96	; 0x60
 8002206:	d10e      	bne.n	8002226 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fb75 	bl	800190e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002224:	e009      	b.n	800223a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff fb60 	bl	80018fa <HAL_I2C_ErrorCallback>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b02      	cmp	r3, #2
 8002256:	d103      	bne.n	8002260 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b01      	cmp	r3, #1
 800226c:	d007      	beq.n	800227e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699a      	ldr	r2, [r3, #24]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0201 	orr.w	r2, r2, #1
 800227c:	619a      	str	r2, [r3, #24]
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	2200      	movs	r2, #0
 80022a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	2200      	movs	r2, #0
 80022b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7ff ff9b 	bl	80021f4 <I2C_TreatErrorCallback>
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	4613      	mov	r3, r2
 80022d4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d6:	e022      	b.n	800231e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022de:	d01e      	beq.n	800231e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e0:	f7fe fdd2 	bl	8000e88 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d302      	bcc.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d113      	bne.n	800231e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f043 0220 	orr.w	r2, r3, #32
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4013      	ands	r3, r2
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	bf0c      	ite	eq
 800232e:	2301      	moveq	r3, #1
 8002330:	2300      	movne	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	429a      	cmp	r2, r3
 800233a:	d0cd      	beq.n	80022d8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002352:	e02c      	b.n	80023ae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f871 	bl	8002440 <I2C_IsAcknowledgeFailed>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e02a      	b.n	80023be <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800236e:	d01e      	beq.n	80023ae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002370:	f7fe fd8a 	bl	8000e88 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	d302      	bcc.n	8002386 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d113      	bne.n	80023ae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f043 0220 	orr.w	r2, r3, #32
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e007      	b.n	80023be <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d1cb      	bne.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d2:	e028      	b.n	8002426 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f831 	bl	8002440 <I2C_IsAcknowledgeFailed>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e026      	b.n	8002436 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e8:	f7fe fd4e 	bl	8000e88 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d302      	bcc.n	80023fe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d113      	bne.n	8002426 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e007      	b.n	8002436 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b20      	cmp	r3, #32
 8002432:	d1cf      	bne.n	80023d4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b10      	cmp	r3, #16
 8002458:	d151      	bne.n	80024fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800245a:	e022      	b.n	80024a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002462:	d01e      	beq.n	80024a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002464:	f7fe fd10 	bl	8000e88 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	429a      	cmp	r2, r3
 8002472:	d302      	bcc.n	800247a <I2C_IsAcknowledgeFailed+0x3a>
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d113      	bne.n	80024a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f043 0220 	orr.w	r2, r3, #32
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e02e      	b.n	8002500 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d1d5      	bne.n	800245c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2210      	movs	r2, #16
 80024b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2220      	movs	r2, #32
 80024be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff febe 	bl	8002242 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <I2C_IsAcknowledgeFailed+0xc8>)
 80024d2:	400b      	ands	r3, r1
 80024d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f043 0204 	orr.w	r2, r3, #4
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	fe00e800 	.word	0xfe00e800

0800250c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	817b      	strh	r3, [r7, #10]
 800251a:	4613      	mov	r3, r2
 800251c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	0d5b      	lsrs	r3, r3, #21
 8002528:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <I2C_TransferConfig+0x58>)
 800252e:	430b      	orrs	r3, r1
 8002530:	43db      	mvns	r3, r3
 8002532:	ea02 0103 	and.w	r1, r2, r3
 8002536:	897b      	ldrh	r3, [r7, #10]
 8002538:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800253c:	7a7b      	ldrb	r3, [r7, #9]
 800253e:	041b      	lsls	r3, r3, #16
 8002540:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	431a      	orrs	r2, r3
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	431a      	orrs	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	03ff63ff 	.word	0x03ff63ff

08002568 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00f      	beq.n	80025a2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002588:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002596:	2b28      	cmp	r3, #40	; 0x28
 8002598:	d003      	beq.n	80025a2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80025a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00f      	beq.n	80025cc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80025b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025c0:	2b28      	cmp	r3, #40	; 0x28
 80025c2:	d003      	beq.n	80025cc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80025ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80025cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da03      	bge.n	80025dc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80025da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d103      	bne.n	80025ea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d103      	bne.n	80025f8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f043 0320 	orr.w	r3, r3, #32
 80025f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d103      	bne.n	8002606 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002604:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43da      	mvns	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b20      	cmp	r3, #32
 8002638:	d138      	bne.n	80026ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002644:	2302      	movs	r3, #2
 8002646:	e032      	b.n	80026ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	; 0x24
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002676:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d139      	bne.n	8002744 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026da:	2302      	movs	r3, #2
 80026dc:	e033      	b.n	8002746 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2224      	movs	r2, #36	; 0x24
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800270c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002744:	2302      	movs	r3, #2
  }
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <HAL_PWREx_GetVoltageRange+0x18>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40007000 	.word	0x40007000

08002770 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800277e:	d130      	bne.n	80027e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278c:	d038      	beq.n	8002800 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002796:	4a1e      	ldr	r2, [pc, #120]	; (8002810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2232      	movs	r2, #50	; 0x32
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	4a1b      	ldr	r2, [pc, #108]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	0c9b      	lsrs	r3, r3, #18
 80027b0:	3301      	adds	r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027b4:	e002      	b.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c8:	d102      	bne.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f2      	bne.n	80027b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027dc:	d110      	bne.n	8002800 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e00f      	b.n	8002802 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ee:	d007      	beq.n	8002800 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027f8:	4a05      	ldr	r2, [pc, #20]	; (8002810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40007000 	.word	0x40007000
 8002814:	20000000 	.word	0x20000000
 8002818:	431bde83 	.word	0x431bde83

0800281c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e3d4      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282e:	4ba1      	ldr	r3, [pc, #644]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002838:	4b9e      	ldr	r3, [pc, #632]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80e4 	beq.w	8002a18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_RCC_OscConfig+0x4a>
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	f040 808b 	bne.w	8002974 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b01      	cmp	r3, #1
 8002862:	f040 8087 	bne.w	8002974 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002866:	4b93      	ldr	r3, [pc, #588]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_RCC_OscConfig+0x62>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e3ac      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1a      	ldr	r2, [r3, #32]
 8002882:	4b8c      	ldr	r3, [pc, #560]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <HAL_RCC_OscConfig+0x7c>
 800288e:	4b89      	ldr	r3, [pc, #548]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002896:	e005      	b.n	80028a4 <HAL_RCC_OscConfig+0x88>
 8002898:	4b86      	ldr	r3, [pc, #536]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 800289a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d223      	bcs.n	80028f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fd73 	bl	8003398 <RCC_SetFlashLatencyFromMSIRange>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e38d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028bc:	4b7d      	ldr	r3, [pc, #500]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a7c      	ldr	r2, [pc, #496]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80028c2:	f043 0308 	orr.w	r3, r3, #8
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b7a      	ldr	r3, [pc, #488]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4977      	ldr	r1, [pc, #476]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	4972      	ldr	r1, [pc, #456]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
 80028ee:	e025      	b.n	800293c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028f0:	4b70      	ldr	r3, [pc, #448]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6f      	ldr	r2, [pc, #444]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80028f6:	f043 0308 	orr.w	r3, r3, #8
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b6d      	ldr	r3, [pc, #436]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	496a      	ldr	r1, [pc, #424]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800290e:	4b69      	ldr	r3, [pc, #420]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	4965      	ldr	r1, [pc, #404]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fd33 	bl	8003398 <RCC_SetFlashLatencyFromMSIRange>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e34d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800293c:	f000 fc36 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b5c      	ldr	r3, [pc, #368]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	495a      	ldr	r1, [pc, #360]	; (8002ab8 <HAL_RCC_OscConfig+0x29c>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
 8002958:	4a58      	ldr	r2, [pc, #352]	; (8002abc <HAL_RCC_OscConfig+0x2a0>)
 800295a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800295c:	4b58      	ldr	r3, [pc, #352]	; (8002ac0 <HAL_RCC_OscConfig+0x2a4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe f8d3 	bl	8000b0c <HAL_InitTick>
 8002966:	4603      	mov	r3, r0
 8002968:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d052      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	e331      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d032      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800297c:	4b4d      	ldr	r3, [pc, #308]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a4c      	ldr	r2, [pc, #304]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002988:	f7fe fa7e 	bl	8000e88 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002990:	f7fe fa7a 	bl	8000e88 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e31a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029a2:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a40      	ldr	r2, [pc, #256]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b3e      	ldr	r3, [pc, #248]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	493b      	ldr	r1, [pc, #236]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029cc:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	4936      	ldr	r1, [pc, #216]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
 80029e0:	e01a      	b.n	8002a18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029e2:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a33      	ldr	r2, [pc, #204]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029ee:	f7fe fa4b 	bl	8000e88 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029f6:	f7fe fa47 	bl	8000e88 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e2e7      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a08:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f0      	bne.n	80029f6 <HAL_RCC_OscConfig+0x1da>
 8002a14:	e000      	b.n	8002a18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d074      	beq.n	8002b0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d005      	beq.n	8002a36 <HAL_RCC_OscConfig+0x21a>
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	d10e      	bne.n	8002a4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d10b      	bne.n	8002a4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d064      	beq.n	8002b0c <HAL_RCC_OscConfig+0x2f0>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d160      	bne.n	8002b0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e2c4      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_OscConfig+0x24a>
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	e01d      	b.n	8002aa2 <HAL_RCC_OscConfig+0x286>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6e:	d10c      	bne.n	8002a8a <HAL_RCC_OscConfig+0x26e>
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e00b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x286>
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a06      	ldr	r2, [pc, #24]	; (8002ab4 <HAL_RCC_OscConfig+0x298>)
 8002a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01c      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe f9ed 	bl	8000e88 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab0:	e011      	b.n	8002ad6 <HAL_RCC_OscConfig+0x2ba>
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08008924 	.word	0x08008924
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fe f9e0 	bl	8000e88 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e280      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ad6:	4baf      	ldr	r3, [pc, #700]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x2a8>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe f9d0 	bl	8000e88 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe f9cc 	bl	8000e88 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e26c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002afe:	4ba5      	ldr	r3, [pc, #660]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x2d0>
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d060      	beq.n	8002bdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_OscConfig+0x310>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d119      	bne.n	8002b5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d116      	bne.n	8002b5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b2c:	4b99      	ldr	r3, [pc, #612]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_OscConfig+0x328>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e249      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4b93      	ldr	r3, [pc, #588]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	4990      	ldr	r1, [pc, #576]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b58:	e040      	b.n	8002bdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d023      	beq.n	8002baa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b62:	4b8c      	ldr	r3, [pc, #560]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a8b      	ldr	r2, [pc, #556]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7fe f98b 	bl	8000e88 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b76:	f7fe f987 	bl	8000e88 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e227      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b88:	4b82      	ldr	r3, [pc, #520]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b94:	4b7f      	ldr	r3, [pc, #508]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	497c      	ldr	r1, [pc, #496]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
 8002ba8:	e018      	b.n	8002bdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002baa:	4b7a      	ldr	r3, [pc, #488]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a79      	ldr	r2, [pc, #484]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe f967 	bl	8000e88 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fe f963 	bl	8000e88 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e203      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bd0:	4b70      	ldr	r3, [pc, #448]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d03c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01c      	beq.n	8002c2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf0:	4b68      	ldr	r3, [pc, #416]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf6:	4a67      	ldr	r2, [pc, #412]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe f942 	bl	8000e88 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c08:	f7fe f93e 	bl	8000e88 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1de      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c1a:	4b5e      	ldr	r3, [pc, #376]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ef      	beq.n	8002c08 <HAL_RCC_OscConfig+0x3ec>
 8002c28:	e01b      	b.n	8002c62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2a:	4b5a      	ldr	r3, [pc, #360]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c30:	4a58      	ldr	r2, [pc, #352]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fe f925 	bl	8000e88 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c42:	f7fe f921 	bl	8000e88 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e1c1      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c54:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ef      	bne.n	8002c42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80a6 	beq.w	8002dbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c70:	2300      	movs	r3, #0
 8002c72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c74:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10d      	bne.n	8002c9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c80:	4b44      	ldr	r3, [pc, #272]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	4a43      	ldr	r2, [pc, #268]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c8c:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c9c:	4b3e      	ldr	r3, [pc, #248]	; (8002d98 <HAL_RCC_OscConfig+0x57c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d118      	bne.n	8002cda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCC_OscConfig+0x57c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3a      	ldr	r2, [pc, #232]	; (8002d98 <HAL_RCC_OscConfig+0x57c>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb4:	f7fe f8e8 	bl	8000e88 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbc:	f7fe f8e4 	bl	8000e88 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e184      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cce:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_RCC_OscConfig+0x57c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4d8>
 8002ce2:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce8:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf2:	e024      	b.n	8002d3e <HAL_RCC_OscConfig+0x522>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d110      	bne.n	8002d1e <HAL_RCC_OscConfig+0x502>
 8002cfc:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d0c:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d1c:	e00f      	b.n	8002d3e <HAL_RCC_OscConfig+0x522>
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d24:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	4a17      	ldr	r2, [pc, #92]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002d36:	f023 0304 	bic.w	r3, r3, #4
 8002d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d016      	beq.n	8002d74 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7fe f89f 	bl	8000e88 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fe f89b 	bl	8000e88 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e139      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_OscConfig+0x578>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0ed      	beq.n	8002d4e <HAL_RCC_OscConfig+0x532>
 8002d72:	e01a      	b.n	8002daa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe f888 	bl	8000e88 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d7a:	e00f      	b.n	8002d9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f7fe f884 	bl	8000e88 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d906      	bls.n	8002d9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e122      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d9c:	4b90      	ldr	r3, [pc, #576]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e8      	bne.n	8002d7c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002daa:	7ffb      	ldrb	r3, [r7, #31]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d105      	bne.n	8002dbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db0:	4b8b      	ldr	r3, [pc, #556]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	4a8a      	ldr	r2, [pc, #552]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8108 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	f040 80d0 	bne.w	8002f70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dd0:	4b83      	ldr	r3, [pc, #524]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f003 0203 	and.w	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d130      	bne.n	8002e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	3b01      	subs	r3, #1
 8002df0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d127      	bne.n	8002e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d11f      	bne.n	8002e46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e10:	2a07      	cmp	r2, #7
 8002e12:	bf14      	ite	ne
 8002e14:	2201      	movne	r2, #1
 8002e16:	2200      	moveq	r2, #0
 8002e18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d113      	bne.n	8002e46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d06e      	beq.n	8002f24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b0c      	cmp	r3, #12
 8002e4a:	d069      	beq.n	8002f20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e4c:	4b64      	ldr	r3, [pc, #400]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e58:	4b61      	ldr	r3, [pc, #388]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0b7      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e68:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5c      	ldr	r2, [pc, #368]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e74:	f7fe f808 	bl	8000e88 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe f804 	bl	8000e88 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0a4      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8e:	4b54      	ldr	r3, [pc, #336]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e9a:	4b51      	ldr	r3, [pc, #324]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	4b51      	ldr	r3, [pc, #324]	; (8002fe4 <HAL_RCC_OscConfig+0x7c8>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002eaa:	3a01      	subs	r2, #1
 8002eac:	0112      	lsls	r2, r2, #4
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eb4:	0212      	lsls	r2, r2, #8
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ebc:	0852      	lsrs	r2, r2, #1
 8002ebe:	3a01      	subs	r2, #1
 8002ec0:	0552      	lsls	r2, r2, #21
 8002ec2:	4311      	orrs	r1, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ec8:	0852      	lsrs	r2, r2, #1
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	0652      	lsls	r2, r2, #25
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ed4:	0912      	lsrs	r2, r2, #4
 8002ed6:	0452      	lsls	r2, r2, #17
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	4941      	ldr	r1, [pc, #260]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a3e      	ldr	r2, [pc, #248]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eec:	4b3c      	ldr	r3, [pc, #240]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a3b      	ldr	r2, [pc, #236]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ef8:	f7fd ffc6 	bl	8000e88 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fd ffc2 	bl	8000e88 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e062      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f12:	4b33      	ldr	r3, [pc, #204]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f1e:	e05a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e059      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f24:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d152      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f30:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a2a      	ldr	r2, [pc, #168]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f3c:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a27      	ldr	r2, [pc, #156]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f48:	f7fd ff9e 	bl	8000e88 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fd ff9a 	bl	8000e88 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e03a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f62:	4b1f      	ldr	r3, [pc, #124]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x734>
 8002f6e:	e032      	b.n	8002fd6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d02d      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f76:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f82:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d105      	bne.n	8002f9a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f94:	f023 0303 	bic.w	r3, r3, #3
 8002f98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4a10      	ldr	r2, [pc, #64]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002fa0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fd ff6d 	bl	8000e88 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7fd ff69 	bl	8000e88 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e009      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_RCC_OscConfig+0x7c4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x796>
 8002fd0:	e001      	b.n	8002fd6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	f99d808c 	.word	0xf99d808c

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0c8      	b.n	800318e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b66      	ldr	r3, [pc, #408]	; (8003198 <HAL_RCC_ClockConfig+0x1b0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d910      	bls.n	800302c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_RCC_ClockConfig+0x1b0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0207 	bic.w	r2, r3, #7
 8003012:	4961      	ldr	r1, [pc, #388]	; (8003198 <HAL_RCC_ClockConfig+0x1b0>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b5f      	ldr	r3, [pc, #380]	; (8003198 <HAL_RCC_ClockConfig+0x1b0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0b0      	b.n	800318e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d04c      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d107      	bne.n	8003050 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003040:	4b56      	ldr	r3, [pc, #344]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d121      	bne.n	8003090 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e09e      	b.n	800318e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d107      	bne.n	8003068 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003058:	4b50      	ldr	r3, [pc, #320]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d115      	bne.n	8003090 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e092      	b.n	800318e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003070:	4b4a      	ldr	r3, [pc, #296]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e086      	b.n	800318e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003080:	4b46      	ldr	r3, [pc, #280]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e07e      	b.n	800318e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003090:	4b42      	ldr	r3, [pc, #264]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 0203 	bic.w	r2, r3, #3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	493f      	ldr	r1, [pc, #252]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a2:	f7fd fef1 	bl	8000e88 <HAL_GetTick>
 80030a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030aa:	f7fd feed 	bl	8000e88 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e066      	b.n	800318e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c0:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 020c 	and.w	r2, r3, #12
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d1eb      	bne.n	80030aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030de:	4b2f      	ldr	r3, [pc, #188]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	492c      	ldr	r1, [pc, #176]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b29      	ldr	r3, [pc, #164]	; (8003198 <HAL_RCC_ClockConfig+0x1b0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d210      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b26      	ldr	r3, [pc, #152]	; (8003198 <HAL_RCC_ClockConfig+0x1b0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 0207 	bic.w	r2, r3, #7
 8003106:	4924      	ldr	r1, [pc, #144]	; (8003198 <HAL_RCC_ClockConfig+0x1b0>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <HAL_RCC_ClockConfig+0x1b0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e036      	b.n	800318e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4918      	ldr	r1, [pc, #96]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4910      	ldr	r1, [pc, #64]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800315e:	f000 f825 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 8003162:	4602      	mov	r2, r0
 8003164:	4b0d      	ldr	r3, [pc, #52]	; (800319c <HAL_RCC_ClockConfig+0x1b4>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	490c      	ldr	r1, [pc, #48]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	5ccb      	ldrb	r3, [r1, r3]
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	fa22 f303 	lsr.w	r3, r2, r3
 800317a:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd fcc2 	bl	8000b0c <HAL_InitTick>
 8003188:	4603      	mov	r3, r0
 800318a:	72fb      	strb	r3, [r7, #11]

  return status;
 800318c:	7afb      	ldrb	r3, [r7, #11]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40022000 	.word	0x40022000
 800319c:	40021000 	.word	0x40021000
 80031a0:	08008924 	.word	0x08008924
 80031a4:	20000000 	.word	0x20000000
 80031a8:	20000004 	.word	0x20000004

080031ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ba:	4b3e      	ldr	r3, [pc, #248]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c4:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x34>
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d121      	bne.n	800321e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d11e      	bne.n	800321e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031e0:	4b34      	ldr	r3, [pc, #208]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031ec:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	e005      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031fc:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003208:	4a2b      	ldr	r2, [pc, #172]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003210:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10d      	bne.n	8003234 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800321c:	e00a      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d102      	bne.n	800322a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	e004      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d101      	bne.n	8003234 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003230:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003232:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d134      	bne.n	80032a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800323a:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0xa6>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d003      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0xac>
 8003250:	e005      	b.n	800325e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003254:	617b      	str	r3, [r7, #20]
      break;
 8003256:	e005      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800325a:	617b      	str	r3, [r7, #20]
      break;
 800325c:	e002      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	617b      	str	r3, [r7, #20]
      break;
 8003262:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	3301      	adds	r3, #1
 8003270:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	fb02 f203 	mul.w	r2, r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	0e5b      	lsrs	r3, r3, #25
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	3301      	adds	r3, #1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032a4:	69bb      	ldr	r3, [r7, #24]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3724      	adds	r7, #36	; 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	0800893c 	.word	0x0800893c
 80032bc:	00f42400 	.word	0x00f42400
 80032c0:	007a1200 	.word	0x007a1200

080032c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000000 	.word	0x20000000

080032dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032e0:	f7ff fff0 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4904      	ldr	r1, [pc, #16]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	08008934 	.word	0x08008934

08003308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800330c:	f7ff ffda 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0adb      	lsrs	r3, r3, #11
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4904      	ldr	r1, [pc, #16]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	08008934 	.word	0x08008934

08003334 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	220f      	movs	r2, #15
 8003342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_RCC_GetClockConfig+0x5c>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0203 	and.w	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <HAL_RCC_GetClockConfig+0x5c>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <HAL_RCC_GetClockConfig+0x5c>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_RCC_GetClockConfig+0x5c>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	08db      	lsrs	r3, r3, #3
 800336e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003376:	4b07      	ldr	r3, [pc, #28]	; (8003394 <HAL_RCC_GetClockConfig+0x60>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0207 	and.w	r2, r3, #7
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	601a      	str	r2, [r3, #0]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	40022000 	.word	0x40022000

08003398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033a4:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033b0:	f7ff f9d0 	bl	8002754 <HAL_PWREx_GetVoltageRange>
 80033b4:	6178      	str	r0, [r7, #20]
 80033b6:	e014      	b.n	80033e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	4a24      	ldr	r2, [pc, #144]	; (8003450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	6593      	str	r3, [r2, #88]	; 0x58
 80033c4:	4b22      	ldr	r3, [pc, #136]	; (8003450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033d0:	f7ff f9c0 	bl	8002754 <HAL_PWREx_GetVoltageRange>
 80033d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e8:	d10b      	bne.n	8003402 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b80      	cmp	r3, #128	; 0x80
 80033ee:	d919      	bls.n	8003424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2ba0      	cmp	r3, #160	; 0xa0
 80033f4:	d902      	bls.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033f6:	2302      	movs	r3, #2
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	e013      	b.n	8003424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033fc:	2301      	movs	r3, #1
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	e010      	b.n	8003424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b80      	cmp	r3, #128	; 0x80
 8003406:	d902      	bls.n	800340e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003408:	2303      	movs	r3, #3
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	e00a      	b.n	8003424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b80      	cmp	r3, #128	; 0x80
 8003412:	d102      	bne.n	800341a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003414:	2302      	movs	r3, #2
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	e004      	b.n	8003424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b70      	cmp	r3, #112	; 0x70
 800341e:	d101      	bne.n	8003424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003420:	2301      	movs	r3, #1
 8003422:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 0207 	bic.w	r2, r3, #7
 800342c:	4909      	ldr	r1, [pc, #36]	; (8003454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	429a      	cmp	r2, r3
 8003440:	d001      	beq.n	8003446 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	40022000 	.word	0x40022000

08003458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003460:	2300      	movs	r3, #0
 8003462:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003464:	2300      	movs	r3, #0
 8003466:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003470:	2b00      	cmp	r3, #0
 8003472:	d041      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003478:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800347c:	d02a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800347e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003482:	d824      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003484:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003488:	d008      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800348a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800348e:	d81e      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003498:	d010      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800349a:	e018      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800349c:	4b86      	ldr	r3, [pc, #536]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a85      	ldr	r2, [pc, #532]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034a8:	e015      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fabb 	bl	8003a2c <RCCEx_PLLSAI1_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034ba:	e00c      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3320      	adds	r3, #32
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fba6 	bl	8003c14 <RCCEx_PLLSAI2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034cc:	e003      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	74fb      	strb	r3, [r7, #19]
      break;
 80034d2:	e000      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034dc:	4b76      	ldr	r3, [pc, #472]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ea:	4973      	ldr	r1, [pc, #460]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034f2:	e001      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d041      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003508:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800350c:	d02a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800350e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003512:	d824      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003518:	d008      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800351a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800351e:	d81e      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003528:	d010      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800352a:	e018      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800352c:	4b62      	ldr	r3, [pc, #392]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a61      	ldr	r2, [pc, #388]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003538:	e015      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3304      	adds	r3, #4
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fa73 	bl	8003a2c <RCCEx_PLLSAI1_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800354a:	e00c      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3320      	adds	r3, #32
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fb5e 	bl	8003c14 <RCCEx_PLLSAI2_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800355c:	e003      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	74fb      	strb	r3, [r7, #19]
      break;
 8003562:	e000      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800356c:	4b52      	ldr	r3, [pc, #328]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357a:	494f      	ldr	r1, [pc, #316]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003582:	e001      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80a0 	beq.w	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003596:	2300      	movs	r3, #0
 8003598:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035aa:	2300      	movs	r3, #0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b0:	4b41      	ldr	r3, [pc, #260]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	4a40      	ldr	r2, [pc, #256]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6593      	str	r3, [r2, #88]	; 0x58
 80035bc:	4b3e      	ldr	r3, [pc, #248]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c8:	2301      	movs	r3, #1
 80035ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035cc:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a3a      	ldr	r2, [pc, #232]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035d8:	f7fd fc56 	bl	8000e88 <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035de:	e009      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e0:	f7fd fc52 	bl	8000e88 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d902      	bls.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	74fb      	strb	r3, [r7, #19]
        break;
 80035f2:	e005      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035f4:	4b31      	ldr	r3, [pc, #196]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ef      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d15c      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003606:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003610:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01f      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	429a      	cmp	r2, r3
 8003622:	d019      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003624:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003630:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	4a20      	ldr	r2, [pc, #128]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003650:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fd fc11 	bl	8000e88 <HAL_GetTick>
 8003666:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003668:	e00b      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366a:	f7fd fc0d 	bl	8000e88 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	f241 3288 	movw	r2, #5000	; 0x1388
 8003678:	4293      	cmp	r3, r2
 800367a:	d902      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	74fb      	strb	r3, [r7, #19]
            break;
 8003680:	e006      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ec      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10c      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a6:	4904      	ldr	r1, [pc, #16]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036ae:	e009      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
 80036b4:	e006      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036c4:	7c7b      	ldrb	r3, [r7, #17]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d105      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ca:	4b9e      	ldr	r3, [pc, #632]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	4a9d      	ldr	r2, [pc, #628]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036e2:	4b98      	ldr	r3, [pc, #608]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	f023 0203 	bic.w	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	4994      	ldr	r1, [pc, #592]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003704:	4b8f      	ldr	r3, [pc, #572]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f023 020c 	bic.w	r2, r3, #12
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	498c      	ldr	r1, [pc, #560]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003726:	4b87      	ldr	r3, [pc, #540]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	4983      	ldr	r1, [pc, #524]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003748:	4b7e      	ldr	r3, [pc, #504]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	497b      	ldr	r1, [pc, #492]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800376a:	4b76      	ldr	r3, [pc, #472]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003778:	4972      	ldr	r1, [pc, #456]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800378c:	4b6d      	ldr	r3, [pc, #436]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379a:	496a      	ldr	r1, [pc, #424]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ae:	4b65      	ldr	r3, [pc, #404]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037bc:	4961      	ldr	r1, [pc, #388]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037d0:	4b5c      	ldr	r3, [pc, #368]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037de:	4959      	ldr	r1, [pc, #356]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037f2:	4b54      	ldr	r3, [pc, #336]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003800:	4950      	ldr	r1, [pc, #320]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003814:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	4948      	ldr	r1, [pc, #288]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003836:	4b43      	ldr	r3, [pc, #268]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	493f      	ldr	r1, [pc, #252]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d028      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003858:	4b3a      	ldr	r3, [pc, #232]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003866:	4937      	ldr	r1, [pc, #220]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003876:	d106      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003878:	4b32      	ldr	r3, [pc, #200]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4a31      	ldr	r2, [pc, #196]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003882:	60d3      	str	r3, [r2, #12]
 8003884:	e011      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800388a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800388e:	d10c      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	2101      	movs	r1, #1
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f8c8 	bl	8003a2c <RCCEx_PLLSAI1_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d028      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	491f      	ldr	r1, [pc, #124]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d4:	d106      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038e0:	60d3      	str	r3, [r2, #12]
 80038e2:	e011      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ec:	d10c      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3304      	adds	r3, #4
 80038f2:	2101      	movs	r1, #1
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f899 	bl	8003a2c <RCCEx_PLLSAI1_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d02b      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003922:	4908      	ldr	r1, [pc, #32]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003932:	d109      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4a02      	ldr	r2, [pc, #8]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800393e:	60d3      	str	r3, [r2, #12]
 8003940:	e014      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003950:	d10c      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	2101      	movs	r1, #1
 8003958:	4618      	mov	r0, r3
 800395a:	f000 f867 	bl	8003a2c <RCCEx_PLLSAI1_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003962:	7cfb      	ldrb	r3, [r7, #19]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02f      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003978:	4b2b      	ldr	r3, [pc, #172]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003986:	4928      	ldr	r1, [pc, #160]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003992:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003996:	d10d      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	2102      	movs	r1, #2
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f844 	bl	8003a2c <RCCEx_PLLSAI1_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039a8:	7cfb      	ldrb	r3, [r7, #19]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d014      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	74bb      	strb	r3, [r7, #18]
 80039b2:	e011      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3320      	adds	r3, #32
 80039c2:	2102      	movs	r1, #2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 f925 	bl	8003c14 <RCCEx_PLLSAI2_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ce:	7cfb      	ldrb	r3, [r7, #19]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039e4:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039f2:	490d      	ldr	r1, [pc, #52]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a16:	4904      	ldr	r1, [pc, #16]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000

08003a2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a3a:	4b75      	ldr	r3, [pc, #468]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d018      	beq.n	8003a78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a46:	4b72      	ldr	r3, [pc, #456]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0203 	and.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d10d      	bne.n	8003a72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
       ||
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a5e:	4b6c      	ldr	r3, [pc, #432]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d047      	beq.n	8003b02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
 8003a76:	e044      	b.n	8003b02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d018      	beq.n	8003ab2 <RCCEx_PLLSAI1_Config+0x86>
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d825      	bhi.n	8003ad0 <RCCEx_PLLSAI1_Config+0xa4>
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d002      	beq.n	8003a8e <RCCEx_PLLSAI1_Config+0x62>
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d009      	beq.n	8003aa0 <RCCEx_PLLSAI1_Config+0x74>
 8003a8c:	e020      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a8e:	4b60      	ldr	r3, [pc, #384]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11d      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9e:	e01a      	b.n	8003ad6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aa0:	4b5b      	ldr	r3, [pc, #364]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d116      	bne.n	8003ada <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab0:	e013      	b.n	8003ada <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ab2:	4b57      	ldr	r3, [pc, #348]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003abe:	4b54      	ldr	r3, [pc, #336]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ace:	e006      	b.n	8003ade <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad4:	e004      	b.n	8003ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e002      	b.n	8003ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ade:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10d      	bne.n	8003b02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ae6:	4b4a      	ldr	r3, [pc, #296]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	430b      	orrs	r3, r1
 8003afc:	4944      	ldr	r1, [pc, #272]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d17d      	bne.n	8003c04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b08:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a40      	ldr	r2, [pc, #256]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b14:	f7fd f9b8 	bl	8000e88 <HAL_GetTick>
 8003b18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b1a:	e009      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b1c:	f7fd f9b4 	bl	8000e88 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b2e:	e005      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b30:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1ef      	bne.n	8003b1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d160      	bne.n	8003c04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d111      	bne.n	8003b6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b48:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6892      	ldr	r2, [r2, #8]
 8003b58:	0211      	lsls	r1, r2, #8
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68d2      	ldr	r2, [r2, #12]
 8003b5e:	0912      	lsrs	r2, r2, #4
 8003b60:	0452      	lsls	r2, r2, #17
 8003b62:	430a      	orrs	r2, r1
 8003b64:	492a      	ldr	r1, [pc, #168]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	610b      	str	r3, [r1, #16]
 8003b6a:	e027      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d112      	bne.n	8003b98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b72:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6892      	ldr	r2, [r2, #8]
 8003b82:	0211      	lsls	r1, r2, #8
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6912      	ldr	r2, [r2, #16]
 8003b88:	0852      	lsrs	r2, r2, #1
 8003b8a:	3a01      	subs	r2, #1
 8003b8c:	0552      	lsls	r2, r2, #21
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	491f      	ldr	r1, [pc, #124]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	610b      	str	r3, [r1, #16]
 8003b96:	e011      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b98:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ba0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6892      	ldr	r2, [r2, #8]
 8003ba8:	0211      	lsls	r1, r2, #8
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6952      	ldr	r2, [r2, #20]
 8003bae:	0852      	lsrs	r2, r2, #1
 8003bb0:	3a01      	subs	r2, #1
 8003bb2:	0652      	lsls	r2, r2, #25
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	4916      	ldr	r1, [pc, #88]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a13      	ldr	r2, [pc, #76]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fd f95e 	bl	8000e88 <HAL_GetTick>
 8003bcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bce:	e009      	b.n	8003be4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bd0:	f7fd f95a 	bl	8000e88 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d902      	bls.n	8003be4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	73fb      	strb	r3, [r7, #15]
          break;
 8003be2:	e005      	b.n	8003bf0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ef      	beq.n	8003bd0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	4904      	ldr	r1, [pc, #16]	; (8003c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000

08003c14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c22:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d018      	beq.n	8003c60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c2e:	4b67      	ldr	r3, [pc, #412]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0203 	and.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d10d      	bne.n	8003c5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
       ||
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c46:	4b61      	ldr	r3, [pc, #388]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	091b      	lsrs	r3, r3, #4
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
       ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d047      	beq.n	8003cea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	e044      	b.n	8003cea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d018      	beq.n	8003c9a <RCCEx_PLLSAI2_Config+0x86>
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d825      	bhi.n	8003cb8 <RCCEx_PLLSAI2_Config+0xa4>
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d002      	beq.n	8003c76 <RCCEx_PLLSAI2_Config+0x62>
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d009      	beq.n	8003c88 <RCCEx_PLLSAI2_Config+0x74>
 8003c74:	e020      	b.n	8003cb8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c76:	4b55      	ldr	r3, [pc, #340]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d11d      	bne.n	8003cbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c86:	e01a      	b.n	8003cbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c88:	4b50      	ldr	r3, [pc, #320]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d116      	bne.n	8003cc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c98:	e013      	b.n	8003cc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c9a:	4b4c      	ldr	r3, [pc, #304]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ca6:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cb6:	e006      	b.n	8003cc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbc:	e004      	b.n	8003cc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e002      	b.n	8003cc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10d      	bne.n	8003cea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cce:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	4939      	ldr	r1, [pc, #228]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d167      	bne.n	8003dc0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a35      	ldr	r2, [pc, #212]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfc:	f7fd f8c4 	bl	8000e88 <HAL_GetTick>
 8003d00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d02:	e009      	b.n	8003d18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d04:	f7fd f8c0 	bl	8000e88 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d902      	bls.n	8003d18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	73fb      	strb	r3, [r7, #15]
        break;
 8003d16:	e005      	b.n	8003d24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d18:	4b2c      	ldr	r3, [pc, #176]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ef      	bne.n	8003d04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d14a      	bne.n	8003dc0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d111      	bne.n	8003d54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6892      	ldr	r2, [r2, #8]
 8003d40:	0211      	lsls	r1, r2, #8
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68d2      	ldr	r2, [r2, #12]
 8003d46:	0912      	lsrs	r2, r2, #4
 8003d48:	0452      	lsls	r2, r2, #17
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	491f      	ldr	r1, [pc, #124]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	614b      	str	r3, [r1, #20]
 8003d52:	e011      	b.n	8003d78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d54:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6892      	ldr	r2, [r2, #8]
 8003d64:	0211      	lsls	r1, r2, #8
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6912      	ldr	r2, [r2, #16]
 8003d6a:	0852      	lsrs	r2, r2, #1
 8003d6c:	3a01      	subs	r2, #1
 8003d6e:	0652      	lsls	r2, r2, #25
 8003d70:	430a      	orrs	r2, r1
 8003d72:	4916      	ldr	r1, [pc, #88]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d78:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fd f880 	bl	8000e88 <HAL_GetTick>
 8003d88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d8a:	e009      	b.n	8003da0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d8c:	f7fd f87c 	bl	8000e88 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d902      	bls.n	8003da0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d9e:	e005      	b.n	8003dac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ef      	beq.n	8003d8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	4904      	ldr	r1, [pc, #16]	; (8003dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e049      	b.n	8003e76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f841 	bl	8003e7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f000 f9f8 	bl	8004204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d001      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e04f      	b.n	8003f4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a23      	ldr	r2, [pc, #140]	; (8003f58 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01d      	beq.n	8003f0a <HAL_TIM_Base_Start_IT+0x76>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d018      	beq.n	8003f0a <HAL_TIM_Base_Start_IT+0x76>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1f      	ldr	r2, [pc, #124]	; (8003f5c <HAL_TIM_Base_Start_IT+0xc8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <HAL_TIM_Base_Start_IT+0x76>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1e      	ldr	r2, [pc, #120]	; (8003f60 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <HAL_TIM_Base_Start_IT+0x76>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_TIM_Base_Start_IT+0x76>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1b      	ldr	r2, [pc, #108]	; (8003f68 <HAL_TIM_Base_Start_IT+0xd4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_TIM_Base_Start_IT+0x76>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a19      	ldr	r2, [pc, #100]	; (8003f6c <HAL_TIM_Base_Start_IT+0xd8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d115      	bne.n	8003f36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b06      	cmp	r3, #6
 8003f1a:	d015      	beq.n	8003f48 <HAL_TIM_Base_Start_IT+0xb4>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f22:	d011      	beq.n	8003f48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f34:	e008      	b.n	8003f48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e000      	b.n	8003f4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40013400 	.word	0x40013400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	00010007 	.word	0x00010007

08003f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d122      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d11b      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0202 	mvn.w	r2, #2
 8003fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f905 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8f7 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f908 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d122      	bne.n	8004024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d11b      	bne.n	8004024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0204 	mvn.w	r2, #4
 8003ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8db 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8004010:	e005      	b.n	800401e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8cd 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f8de 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b08      	cmp	r3, #8
 8004030:	d122      	bne.n	8004078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b08      	cmp	r3, #8
 800403e:	d11b      	bne.n	8004078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0208 	mvn.w	r2, #8
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2204      	movs	r2, #4
 800404e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8b1 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f8a3 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f8b4 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b10      	cmp	r3, #16
 8004084:	d122      	bne.n	80040cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b10      	cmp	r3, #16
 8004092:	d11b      	bne.n	80040cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0210 	mvn.w	r2, #16
 800409c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2208      	movs	r2, #8
 80040a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f887 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 80040b8:	e005      	b.n	80040c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f879 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f88a 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d107      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0201 	mvn.w	r2, #1
 80040f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fc fc34 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d10e      	bne.n	8004124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b80      	cmp	r3, #128	; 0x80
 8004112:	d107      	bne.n	8004124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f914 	bl	800434c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004132:	d10e      	bne.n	8004152 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413e:	2b80      	cmp	r3, #128	; 0x80
 8004140:	d107      	bne.n	8004152 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800414a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f907 	bl	8004360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	d10e      	bne.n	800417e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d107      	bne.n	800417e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f838 	bl	80041ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b20      	cmp	r3, #32
 800418a:	d10e      	bne.n	80041aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b20      	cmp	r3, #32
 8004198:	d107      	bne.n	80041aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f06f 0220 	mvn.w	r2, #32
 80041a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f8c7 	bl	8004338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a40      	ldr	r2, [pc, #256]	; (8004318 <TIM_Base_SetConfig+0x114>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004222:	d00f      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3d      	ldr	r2, [pc, #244]	; (800431c <TIM_Base_SetConfig+0x118>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <TIM_Base_SetConfig+0x11c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <TIM_Base_SetConfig+0x120>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <TIM_Base_SetConfig+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d108      	bne.n	8004256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2f      	ldr	r2, [pc, #188]	; (8004318 <TIM_Base_SetConfig+0x114>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004264:	d01b      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2c      	ldr	r2, [pc, #176]	; (800431c <TIM_Base_SetConfig+0x118>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d017      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <TIM_Base_SetConfig+0x11c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2a      	ldr	r2, [pc, #168]	; (8004324 <TIM_Base_SetConfig+0x120>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a29      	ldr	r2, [pc, #164]	; (8004328 <TIM_Base_SetConfig+0x124>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a28      	ldr	r2, [pc, #160]	; (800432c <TIM_Base_SetConfig+0x128>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <TIM_Base_SetConfig+0x12c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <TIM_Base_SetConfig+0x130>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <TIM_Base_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00f      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <TIM_Base_SetConfig+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00b      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a11      	ldr	r2, [pc, #68]	; (800432c <TIM_Base_SetConfig+0x128>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <TIM_Base_SetConfig+0x12c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a0f      	ldr	r2, [pc, #60]	; (8004334 <TIM_Base_SetConfig+0x130>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00
 8004328:	40013400 	.word	0x40013400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e040      	b.n	8004408 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fc fb76 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0201 	bic.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f8c0 	bl	8004538 <UART_SetConfig>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e022      	b.n	8004408 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fb3e 	bl	8004a4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fbc5 	bl	8004b90 <UART_CheckIdleState>
 8004406:	4603      	mov	r3, r0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004424:	2b20      	cmp	r3, #32
 8004426:	f040 8082 	bne.w	800452e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_UART_Transmit+0x26>
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e07a      	b.n	8004530 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_UART_Transmit+0x38>
 8004444:	2302      	movs	r3, #2
 8004446:	e073      	b.n	8004530 <HAL_UART_Transmit+0x120>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2221      	movs	r2, #33	; 0x21
 800445c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800445e:	f7fc fd13 	bl	8000e88 <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447c:	d108      	bne.n	8004490 <HAL_UART_Transmit+0x80>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	e003      	b.n	8004498 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80044a0:	e02d      	b.n	80044fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2200      	movs	r2, #0
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fbb8 	bl	8004c22 <UART_WaitOnFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e039      	b.n	8004530 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	881a      	ldrh	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ce:	b292      	uxth	r2, r2
 80044d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	3302      	adds	r3, #2
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	e008      	b.n	80044ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	781a      	ldrb	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	b292      	uxth	r2, r2
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3301      	adds	r3, #1
 80044ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1cb      	bne.n	80044a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	2140      	movs	r1, #64	; 0x40
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fb84 	bl	8004c22 <UART_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e005      	b.n	8004530 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004538:	b5b0      	push	{r4, r5, r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4313      	orrs	r3, r2
 800455a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4bad      	ldr	r3, [pc, #692]	; (8004818 <UART_SetConfig+0x2e0>)
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	69f9      	ldr	r1, [r7, #28]
 800456c:	430b      	orrs	r3, r1
 800456e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4aa2      	ldr	r2, [pc, #648]	; (800481c <UART_SetConfig+0x2e4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	4313      	orrs	r3, r2
 800459e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a99      	ldr	r2, [pc, #612]	; (8004820 <UART_SetConfig+0x2e8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d121      	bne.n	8004602 <UART_SetConfig+0xca>
 80045be:	4b99      	ldr	r3, [pc, #612]	; (8004824 <UART_SetConfig+0x2ec>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d817      	bhi.n	80045fc <UART_SetConfig+0xc4>
 80045cc:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <UART_SetConfig+0x9c>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	080045e5 	.word	0x080045e5
 80045d8:	080045f1 	.word	0x080045f1
 80045dc:	080045eb 	.word	0x080045eb
 80045e0:	080045f7 	.word	0x080045f7
 80045e4:	2301      	movs	r3, #1
 80045e6:	76fb      	strb	r3, [r7, #27]
 80045e8:	e0e7      	b.n	80047ba <UART_SetConfig+0x282>
 80045ea:	2302      	movs	r3, #2
 80045ec:	76fb      	strb	r3, [r7, #27]
 80045ee:	e0e4      	b.n	80047ba <UART_SetConfig+0x282>
 80045f0:	2304      	movs	r3, #4
 80045f2:	76fb      	strb	r3, [r7, #27]
 80045f4:	e0e1      	b.n	80047ba <UART_SetConfig+0x282>
 80045f6:	2308      	movs	r3, #8
 80045f8:	76fb      	strb	r3, [r7, #27]
 80045fa:	e0de      	b.n	80047ba <UART_SetConfig+0x282>
 80045fc:	2310      	movs	r3, #16
 80045fe:	76fb      	strb	r3, [r7, #27]
 8004600:	e0db      	b.n	80047ba <UART_SetConfig+0x282>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a88      	ldr	r2, [pc, #544]	; (8004828 <UART_SetConfig+0x2f0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d132      	bne.n	8004672 <UART_SetConfig+0x13a>
 800460c:	4b85      	ldr	r3, [pc, #532]	; (8004824 <UART_SetConfig+0x2ec>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b0c      	cmp	r3, #12
 8004618:	d828      	bhi.n	800466c <UART_SetConfig+0x134>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <UART_SetConfig+0xe8>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004655 	.word	0x08004655
 8004624:	0800466d 	.word	0x0800466d
 8004628:	0800466d 	.word	0x0800466d
 800462c:	0800466d 	.word	0x0800466d
 8004630:	08004661 	.word	0x08004661
 8004634:	0800466d 	.word	0x0800466d
 8004638:	0800466d 	.word	0x0800466d
 800463c:	0800466d 	.word	0x0800466d
 8004640:	0800465b 	.word	0x0800465b
 8004644:	0800466d 	.word	0x0800466d
 8004648:	0800466d 	.word	0x0800466d
 800464c:	0800466d 	.word	0x0800466d
 8004650:	08004667 	.word	0x08004667
 8004654:	2300      	movs	r3, #0
 8004656:	76fb      	strb	r3, [r7, #27]
 8004658:	e0af      	b.n	80047ba <UART_SetConfig+0x282>
 800465a:	2302      	movs	r3, #2
 800465c:	76fb      	strb	r3, [r7, #27]
 800465e:	e0ac      	b.n	80047ba <UART_SetConfig+0x282>
 8004660:	2304      	movs	r3, #4
 8004662:	76fb      	strb	r3, [r7, #27]
 8004664:	e0a9      	b.n	80047ba <UART_SetConfig+0x282>
 8004666:	2308      	movs	r3, #8
 8004668:	76fb      	strb	r3, [r7, #27]
 800466a:	e0a6      	b.n	80047ba <UART_SetConfig+0x282>
 800466c:	2310      	movs	r3, #16
 800466e:	76fb      	strb	r3, [r7, #27]
 8004670:	e0a3      	b.n	80047ba <UART_SetConfig+0x282>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6d      	ldr	r2, [pc, #436]	; (800482c <UART_SetConfig+0x2f4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d120      	bne.n	80046be <UART_SetConfig+0x186>
 800467c:	4b69      	ldr	r3, [pc, #420]	; (8004824 <UART_SetConfig+0x2ec>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004686:	2b30      	cmp	r3, #48	; 0x30
 8004688:	d013      	beq.n	80046b2 <UART_SetConfig+0x17a>
 800468a:	2b30      	cmp	r3, #48	; 0x30
 800468c:	d814      	bhi.n	80046b8 <UART_SetConfig+0x180>
 800468e:	2b20      	cmp	r3, #32
 8004690:	d009      	beq.n	80046a6 <UART_SetConfig+0x16e>
 8004692:	2b20      	cmp	r3, #32
 8004694:	d810      	bhi.n	80046b8 <UART_SetConfig+0x180>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <UART_SetConfig+0x168>
 800469a:	2b10      	cmp	r3, #16
 800469c:	d006      	beq.n	80046ac <UART_SetConfig+0x174>
 800469e:	e00b      	b.n	80046b8 <UART_SetConfig+0x180>
 80046a0:	2300      	movs	r3, #0
 80046a2:	76fb      	strb	r3, [r7, #27]
 80046a4:	e089      	b.n	80047ba <UART_SetConfig+0x282>
 80046a6:	2302      	movs	r3, #2
 80046a8:	76fb      	strb	r3, [r7, #27]
 80046aa:	e086      	b.n	80047ba <UART_SetConfig+0x282>
 80046ac:	2304      	movs	r3, #4
 80046ae:	76fb      	strb	r3, [r7, #27]
 80046b0:	e083      	b.n	80047ba <UART_SetConfig+0x282>
 80046b2:	2308      	movs	r3, #8
 80046b4:	76fb      	strb	r3, [r7, #27]
 80046b6:	e080      	b.n	80047ba <UART_SetConfig+0x282>
 80046b8:	2310      	movs	r3, #16
 80046ba:	76fb      	strb	r3, [r7, #27]
 80046bc:	e07d      	b.n	80047ba <UART_SetConfig+0x282>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a5b      	ldr	r2, [pc, #364]	; (8004830 <UART_SetConfig+0x2f8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d120      	bne.n	800470a <UART_SetConfig+0x1d2>
 80046c8:	4b56      	ldr	r3, [pc, #344]	; (8004824 <UART_SetConfig+0x2ec>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046d2:	2bc0      	cmp	r3, #192	; 0xc0
 80046d4:	d013      	beq.n	80046fe <UART_SetConfig+0x1c6>
 80046d6:	2bc0      	cmp	r3, #192	; 0xc0
 80046d8:	d814      	bhi.n	8004704 <UART_SetConfig+0x1cc>
 80046da:	2b80      	cmp	r3, #128	; 0x80
 80046dc:	d009      	beq.n	80046f2 <UART_SetConfig+0x1ba>
 80046de:	2b80      	cmp	r3, #128	; 0x80
 80046e0:	d810      	bhi.n	8004704 <UART_SetConfig+0x1cc>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <UART_SetConfig+0x1b4>
 80046e6:	2b40      	cmp	r3, #64	; 0x40
 80046e8:	d006      	beq.n	80046f8 <UART_SetConfig+0x1c0>
 80046ea:	e00b      	b.n	8004704 <UART_SetConfig+0x1cc>
 80046ec:	2300      	movs	r3, #0
 80046ee:	76fb      	strb	r3, [r7, #27]
 80046f0:	e063      	b.n	80047ba <UART_SetConfig+0x282>
 80046f2:	2302      	movs	r3, #2
 80046f4:	76fb      	strb	r3, [r7, #27]
 80046f6:	e060      	b.n	80047ba <UART_SetConfig+0x282>
 80046f8:	2304      	movs	r3, #4
 80046fa:	76fb      	strb	r3, [r7, #27]
 80046fc:	e05d      	b.n	80047ba <UART_SetConfig+0x282>
 80046fe:	2308      	movs	r3, #8
 8004700:	76fb      	strb	r3, [r7, #27]
 8004702:	e05a      	b.n	80047ba <UART_SetConfig+0x282>
 8004704:	2310      	movs	r3, #16
 8004706:	76fb      	strb	r3, [r7, #27]
 8004708:	e057      	b.n	80047ba <UART_SetConfig+0x282>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a49      	ldr	r2, [pc, #292]	; (8004834 <UART_SetConfig+0x2fc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d125      	bne.n	8004760 <UART_SetConfig+0x228>
 8004714:	4b43      	ldr	r3, [pc, #268]	; (8004824 <UART_SetConfig+0x2ec>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004722:	d017      	beq.n	8004754 <UART_SetConfig+0x21c>
 8004724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004728:	d817      	bhi.n	800475a <UART_SetConfig+0x222>
 800472a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800472e:	d00b      	beq.n	8004748 <UART_SetConfig+0x210>
 8004730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004734:	d811      	bhi.n	800475a <UART_SetConfig+0x222>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <UART_SetConfig+0x20a>
 800473a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473e:	d006      	beq.n	800474e <UART_SetConfig+0x216>
 8004740:	e00b      	b.n	800475a <UART_SetConfig+0x222>
 8004742:	2300      	movs	r3, #0
 8004744:	76fb      	strb	r3, [r7, #27]
 8004746:	e038      	b.n	80047ba <UART_SetConfig+0x282>
 8004748:	2302      	movs	r3, #2
 800474a:	76fb      	strb	r3, [r7, #27]
 800474c:	e035      	b.n	80047ba <UART_SetConfig+0x282>
 800474e:	2304      	movs	r3, #4
 8004750:	76fb      	strb	r3, [r7, #27]
 8004752:	e032      	b.n	80047ba <UART_SetConfig+0x282>
 8004754:	2308      	movs	r3, #8
 8004756:	76fb      	strb	r3, [r7, #27]
 8004758:	e02f      	b.n	80047ba <UART_SetConfig+0x282>
 800475a:	2310      	movs	r3, #16
 800475c:	76fb      	strb	r3, [r7, #27]
 800475e:	e02c      	b.n	80047ba <UART_SetConfig+0x282>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2d      	ldr	r2, [pc, #180]	; (800481c <UART_SetConfig+0x2e4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d125      	bne.n	80047b6 <UART_SetConfig+0x27e>
 800476a:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <UART_SetConfig+0x2ec>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004778:	d017      	beq.n	80047aa <UART_SetConfig+0x272>
 800477a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800477e:	d817      	bhi.n	80047b0 <UART_SetConfig+0x278>
 8004780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004784:	d00b      	beq.n	800479e <UART_SetConfig+0x266>
 8004786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478a:	d811      	bhi.n	80047b0 <UART_SetConfig+0x278>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <UART_SetConfig+0x260>
 8004790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004794:	d006      	beq.n	80047a4 <UART_SetConfig+0x26c>
 8004796:	e00b      	b.n	80047b0 <UART_SetConfig+0x278>
 8004798:	2300      	movs	r3, #0
 800479a:	76fb      	strb	r3, [r7, #27]
 800479c:	e00d      	b.n	80047ba <UART_SetConfig+0x282>
 800479e:	2302      	movs	r3, #2
 80047a0:	76fb      	strb	r3, [r7, #27]
 80047a2:	e00a      	b.n	80047ba <UART_SetConfig+0x282>
 80047a4:	2304      	movs	r3, #4
 80047a6:	76fb      	strb	r3, [r7, #27]
 80047a8:	e007      	b.n	80047ba <UART_SetConfig+0x282>
 80047aa:	2308      	movs	r3, #8
 80047ac:	76fb      	strb	r3, [r7, #27]
 80047ae:	e004      	b.n	80047ba <UART_SetConfig+0x282>
 80047b0:	2310      	movs	r3, #16
 80047b2:	76fb      	strb	r3, [r7, #27]
 80047b4:	e001      	b.n	80047ba <UART_SetConfig+0x282>
 80047b6:	2310      	movs	r3, #16
 80047b8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a17      	ldr	r2, [pc, #92]	; (800481c <UART_SetConfig+0x2e4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	f040 8087 	bne.w	80048d4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047c6:	7efb      	ldrb	r3, [r7, #27]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d837      	bhi.n	800483c <UART_SetConfig+0x304>
 80047cc:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <UART_SetConfig+0x29c>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	080047f9 	.word	0x080047f9
 80047d8:	0800483d 	.word	0x0800483d
 80047dc:	08004801 	.word	0x08004801
 80047e0:	0800483d 	.word	0x0800483d
 80047e4:	08004807 	.word	0x08004807
 80047e8:	0800483d 	.word	0x0800483d
 80047ec:	0800483d 	.word	0x0800483d
 80047f0:	0800483d 	.word	0x0800483d
 80047f4:	0800480f 	.word	0x0800480f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f8:	f7fe fd70 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 80047fc:	6178      	str	r0, [r7, #20]
        break;
 80047fe:	e022      	b.n	8004846 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004800:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <UART_SetConfig+0x300>)
 8004802:	617b      	str	r3, [r7, #20]
        break;
 8004804:	e01f      	b.n	8004846 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004806:	f7fe fcd1 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 800480a:	6178      	str	r0, [r7, #20]
        break;
 800480c:	e01b      	b.n	8004846 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004812:	617b      	str	r3, [r7, #20]
        break;
 8004814:	e017      	b.n	8004846 <UART_SetConfig+0x30e>
 8004816:	bf00      	nop
 8004818:	efff69f3 	.word	0xefff69f3
 800481c:	40008000 	.word	0x40008000
 8004820:	40013800 	.word	0x40013800
 8004824:	40021000 	.word	0x40021000
 8004828:	40004400 	.word	0x40004400
 800482c:	40004800 	.word	0x40004800
 8004830:	40004c00 	.word	0x40004c00
 8004834:	40005000 	.word	0x40005000
 8004838:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	76bb      	strb	r3, [r7, #26]
        break;
 8004844:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80f1 	beq.w	8004a30 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	429a      	cmp	r2, r3
 800485c:	d305      	bcc.n	800486a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	429a      	cmp	r2, r3
 8004868:	d902      	bls.n	8004870 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	76bb      	strb	r3, [r7, #26]
 800486e:	e0df      	b.n	8004a30 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	4618      	mov	r0, r3
 8004874:	f04f 0100 	mov.w	r1, #0
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	020b      	lsls	r3, r1, #8
 8004882:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004886:	0202      	lsls	r2, r0, #8
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	6849      	ldr	r1, [r1, #4]
 800488c:	0849      	lsrs	r1, r1, #1
 800488e:	4608      	mov	r0, r1
 8004890:	f04f 0100 	mov.w	r1, #0
 8004894:	1814      	adds	r4, r2, r0
 8004896:	eb43 0501 	adc.w	r5, r3, r1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	461a      	mov	r2, r3
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	4620      	mov	r0, r4
 80048a6:	4629      	mov	r1, r5
 80048a8:	f7fb fce2 	bl	8000270 <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4613      	mov	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ba:	d308      	bcc.n	80048ce <UART_SetConfig+0x396>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c2:	d204      	bcs.n	80048ce <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	60da      	str	r2, [r3, #12]
 80048cc:	e0b0      	b.n	8004a30 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	76bb      	strb	r3, [r7, #26]
 80048d2:	e0ad      	b.n	8004a30 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048dc:	d15c      	bne.n	8004998 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80048de:	7efb      	ldrb	r3, [r7, #27]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d828      	bhi.n	8004936 <UART_SetConfig+0x3fe>
 80048e4:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0x3b4>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004927 	.word	0x08004927
 8004900:	08004937 	.word	0x08004937
 8004904:	08004937 	.word	0x08004937
 8004908:	08004937 	.word	0x08004937
 800490c:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7fe fce4 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8004914:	6178      	str	r0, [r7, #20]
        break;
 8004916:	e013      	b.n	8004940 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe fcf6 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 800491c:	6178      	str	r0, [r7, #20]
        break;
 800491e:	e00f      	b.n	8004940 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b49      	ldr	r3, [pc, #292]	; (8004a48 <UART_SetConfig+0x510>)
 8004922:	617b      	str	r3, [r7, #20]
        break;
 8004924:	e00c      	b.n	8004940 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe fc41 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 800492a:	6178      	str	r0, [r7, #20]
        break;
 800492c:	e008      	b.n	8004940 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	617b      	str	r3, [r7, #20]
        break;
 8004934:	e004      	b.n	8004940 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	76bb      	strb	r3, [r7, #26]
        break;
 800493e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d074      	beq.n	8004a30 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	005a      	lsls	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b0f      	cmp	r3, #15
 8004962:	d916      	bls.n	8004992 <UART_SetConfig+0x45a>
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496a:	d212      	bcs.n	8004992 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f023 030f 	bic.w	r3, r3, #15
 8004974:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	b29b      	uxth	r3, r3
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	b29a      	uxth	r2, r3
 8004982:	89fb      	ldrh	r3, [r7, #14]
 8004984:	4313      	orrs	r3, r2
 8004986:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	89fa      	ldrh	r2, [r7, #14]
 800498e:	60da      	str	r2, [r3, #12]
 8004990:	e04e      	b.n	8004a30 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	76bb      	strb	r3, [r7, #26]
 8004996:	e04b      	b.n	8004a30 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004998:	7efb      	ldrb	r3, [r7, #27]
 800499a:	2b08      	cmp	r3, #8
 800499c:	d827      	bhi.n	80049ee <UART_SetConfig+0x4b6>
 800499e:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <UART_SetConfig+0x46c>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	080049ef 	.word	0x080049ef
 80049b4:	080049df 	.word	0x080049df
 80049b8:	080049ef 	.word	0x080049ef
 80049bc:	080049ef 	.word	0x080049ef
 80049c0:	080049ef 	.word	0x080049ef
 80049c4:	080049e7 	.word	0x080049e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c8:	f7fe fc88 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 80049cc:	6178      	str	r0, [r7, #20]
        break;
 80049ce:	e013      	b.n	80049f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d0:	f7fe fc9a 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 80049d4:	6178      	str	r0, [r7, #20]
        break;
 80049d6:	e00f      	b.n	80049f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d8:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <UART_SetConfig+0x510>)
 80049da:	617b      	str	r3, [r7, #20]
        break;
 80049dc:	e00c      	b.n	80049f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049de:	f7fe fbe5 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 80049e2:	6178      	str	r0, [r7, #20]
        break;
 80049e4:	e008      	b.n	80049f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ea:	617b      	str	r3, [r7, #20]
        break;
 80049ec:	e004      	b.n	80049f8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	76bb      	strb	r3, [r7, #26]
        break;
 80049f6:	bf00      	nop
    }

    if (pclk != 0U)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d018      	beq.n	8004a30 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	085a      	lsrs	r2, r3, #1
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	441a      	add	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b0f      	cmp	r3, #15
 8004a18:	d908      	bls.n	8004a2c <UART_SetConfig+0x4f4>
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a20:	d204      	bcs.n	8004a2c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	60da      	str	r2, [r3, #12]
 8004a2a:	e001      	b.n	8004a30 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a3c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bdb0      	pop	{r4, r5, r7, pc}
 8004a46:	bf00      	nop
 8004a48:	00f42400 	.word	0x00f42400

08004a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01a      	beq.n	8004b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b4a:	d10a      	bne.n	8004b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
  }
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ba0:	f7fc f972 	bl	8000e88 <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d10e      	bne.n	8004bd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f82d 	bl	8004c22 <UART_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e023      	b.n	8004c1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d10e      	bne.n	8004bfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f817 	bl	8004c22 <UART_WaitOnFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e00d      	b.n	8004c1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c32:	e05e      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c3a:	d05a      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3c:	f7fc f924 	bl	8000e88 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d302      	bcc.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d11b      	bne.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c60:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e043      	b.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02c      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca6:	d124      	bne.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cc0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e00f      	b.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d091      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <__NVIC_SetPriority>:
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	6039      	str	r1, [r7, #0]
 8004d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	db0a      	blt.n	8004d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	490c      	ldr	r1, [pc, #48]	; (8004d68 <__NVIC_SetPriority+0x4c>)
 8004d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3a:	0112      	lsls	r2, r2, #4
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	440b      	add	r3, r1
 8004d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d44:	e00a      	b.n	8004d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	4908      	ldr	r1, [pc, #32]	; (8004d6c <__NVIC_SetPriority+0x50>)
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	3b04      	subs	r3, #4
 8004d54:	0112      	lsls	r2, r2, #4
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	440b      	add	r3, r1
 8004d5a:	761a      	strb	r2, [r3, #24]
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	e000e100 	.word	0xe000e100
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <SysTick_Handler+0x1c>)
 8004d76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004d78:	f001 fcfe 	bl	8006778 <xTaskGetSchedulerState>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d001      	beq.n	8004d86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004d82:	f002 fae9 	bl	8007358 <xPortSysTickHandler>
  }
}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	e000e010 	.word	0xe000e010

08004d90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d94:	2100      	movs	r1, #0
 8004d96:	f06f 0004 	mvn.w	r0, #4
 8004d9a:	f7ff ffbf 	bl	8004d1c <__NVIC_SetPriority>
#endif
}
 8004d9e:	bf00      	nop
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004daa:	f3ef 8305 	mrs	r3, IPSR
 8004dae:	603b      	str	r3, [r7, #0]
  return(result);
 8004db0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004db6:	f06f 0305 	mvn.w	r3, #5
 8004dba:	607b      	str	r3, [r7, #4]
 8004dbc:	e00c      	b.n	8004dd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <osKernelInitialize+0x44>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d105      	bne.n	8004dd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004dc6:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <osKernelInitialize+0x44>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	e002      	b.n	8004dd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004dd8:	687b      	ldr	r3, [r7, #4]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	200000a8 	.word	0x200000a8

08004dec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df2:	f3ef 8305 	mrs	r3, IPSR
 8004df6:	603b      	str	r3, [r7, #0]
  return(result);
 8004df8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004dfe:	f06f 0305 	mvn.w	r3, #5
 8004e02:	607b      	str	r3, [r7, #4]
 8004e04:	e010      	b.n	8004e28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e06:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <osKernelStart+0x48>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d109      	bne.n	8004e22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e0e:	f7ff ffbf 	bl	8004d90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e12:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <osKernelStart+0x48>)
 8004e14:	2202      	movs	r2, #2
 8004e16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e18:	f001 f866 	bl	8005ee8 <vTaskStartScheduler>
      stat = osOK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	607b      	str	r3, [r7, #4]
 8004e20:	e002      	b.n	8004e28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e28:	687b      	ldr	r3, [r7, #4]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	200000a8 	.word	0x200000a8

08004e38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08e      	sub	sp, #56	; 0x38
 8004e3c:	af04      	add	r7, sp, #16
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e48:	f3ef 8305 	mrs	r3, IPSR
 8004e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8004e4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d17e      	bne.n	8004f52 <osThreadNew+0x11a>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d07b      	beq.n	8004f52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e5a:	2380      	movs	r3, #128	; 0x80
 8004e5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e5e:	2318      	movs	r3, #24
 8004e60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d045      	beq.n	8004efe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <osThreadNew+0x48>
        name = attr->name;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <osThreadNew+0x6e>
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	2b38      	cmp	r3, #56	; 0x38
 8004e98:	d805      	bhi.n	8004ea6 <osThreadNew+0x6e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <osThreadNew+0x72>
        return (NULL);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e054      	b.n	8004f54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	089b      	lsrs	r3, r3, #2
 8004eb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00e      	beq.n	8004ee0 <osThreadNew+0xa8>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b5b      	cmp	r3, #91	; 0x5b
 8004ec8:	d90a      	bls.n	8004ee0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d006      	beq.n	8004ee0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <osThreadNew+0xa8>
        mem = 1;
 8004eda:	2301      	movs	r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e010      	b.n	8004f02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10c      	bne.n	8004f02 <osThreadNew+0xca>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d108      	bne.n	8004f02 <osThreadNew+0xca>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <osThreadNew+0xca>
          mem = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	e001      	b.n	8004f02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d110      	bne.n	8004f2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f10:	9202      	str	r2, [sp, #8]
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6a3a      	ldr	r2, [r7, #32]
 8004f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fe0c 	bl	8005b3c <xTaskCreateStatic>
 8004f24:	4603      	mov	r3, r0
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	e013      	b.n	8004f52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d110      	bne.n	8004f52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	f107 0310 	add.w	r3, r7, #16
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fe57 	bl	8005bf6 <xTaskCreate>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d001      	beq.n	8004f52 <osThreadNew+0x11a>
            hTask = NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f52:	693b      	ldr	r3, [r7, #16]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3728      	adds	r7, #40	; 0x28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f64:	f3ef 8305 	mrs	r3, IPSR
 8004f68:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <osDelay+0x1c>
    stat = osErrorISR;
 8004f70:	f06f 0305 	mvn.w	r3, #5
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	e007      	b.n	8004f88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 ff7c 	bl	8005e80 <vTaskDelay>
    }
  }

  return (stat);
 8004f88:	68fb      	ldr	r3, [r7, #12]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a07      	ldr	r2, [pc, #28]	; (8004fc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004fa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4a06      	ldr	r2, [pc, #24]	; (8004fc4 <vApplicationGetIdleTaskMemory+0x30>)
 8004faa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2280      	movs	r2, #128	; 0x80
 8004fb0:	601a      	str	r2, [r3, #0]
}
 8004fb2:	bf00      	nop
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	200000ac 	.word	0x200000ac
 8004fc4:	20000108 	.word	0x20000108

08004fc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4a07      	ldr	r2, [pc, #28]	; (8004ff4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004fd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4a06      	ldr	r2, [pc, #24]	; (8004ff8 <vApplicationGetTimerTaskMemory+0x30>)
 8004fde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fe6:	601a      	str	r2, [r3, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	20000308 	.word	0x20000308
 8004ff8:	20000364 	.word	0x20000364

08004ffc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f103 0208 	add.w	r2, r3, #8
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005014:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f103 0208 	add.w	r2, r3, #8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f103 0208 	add.w	r2, r3, #8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	601a      	str	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b4:	d103      	bne.n	80050be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e00c      	b.n	80050d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3308      	adds	r3, #8
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	e002      	b.n	80050cc <vListInsert+0x2e>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d2f6      	bcs.n	80050c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	601a      	str	r2, [r3, #0]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6892      	ldr	r2, [r2, #8]
 8005126:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6852      	ldr	r2, [r2, #4]
 8005130:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	429a      	cmp	r2, r3
 800513a:	d103      	bne.n	8005144 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	1e5a      	subs	r2, r3, #1
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800518e:	f002 f851 	bl	8007234 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	441a      	add	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	3b01      	subs	r3, #1
 80051c0:	68f9      	ldr	r1, [r7, #12]
 80051c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	441a      	add	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	22ff      	movs	r2, #255	; 0xff
 80051d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	22ff      	movs	r2, #255	; 0xff
 80051da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d114      	bne.n	800520e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01a      	beq.n	8005222 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3310      	adds	r3, #16
 80051f0:	4618      	mov	r0, r3
 80051f2:	f001 f903 	bl	80063fc <xTaskRemoveFromEventList>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051fc:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <xQueueGenericReset+0xcc>)
 80051fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	e009      	b.n	8005222 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3310      	adds	r3, #16
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fef2 	bl	8004ffc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3324      	adds	r3, #36	; 0x24
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff feed 	bl	8004ffc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005222:	f002 f837 	bl	8007294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005226:	2301      	movs	r3, #1
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	e000ed04 	.word	0xe000ed04

08005234 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08e      	sub	sp, #56	; 0x38
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <xQueueGenericCreateStatic+0x52>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <xQueueGenericCreateStatic+0x56>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <xQueueGenericCreateStatic+0x58>
 800528a:	2300      	movs	r3, #0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	623b      	str	r3, [r7, #32]
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <xQueueGenericCreateStatic+0x7e>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <xQueueGenericCreateStatic+0x82>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <xQueueGenericCreateStatic+0x84>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	61fb      	str	r3, [r7, #28]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052d2:	2350      	movs	r3, #80	; 0x50
 80052d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b50      	cmp	r3, #80	; 0x50
 80052da:	d00a      	beq.n	80052f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61bb      	str	r3, [r7, #24]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00d      	beq.n	800531a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005306:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	4613      	mov	r3, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f805 	bl	8005324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800531c:	4618      	mov	r0, r3
 800531e:	3730      	adds	r7, #48	; 0x30
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e002      	b.n	8005346 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005352:	2101      	movs	r1, #1
 8005354:	69b8      	ldr	r0, [r7, #24]
 8005356:	f7ff ff05 	bl	8005164 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	; 0x38
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800537a:	2300      	movs	r3, #0
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xQueueGenericSend+0x32>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <xQueueGenericSend+0x40>
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <xQueueGenericSend+0x44>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <xQueueGenericSend+0x46>
 80053b0:	2300      	movs	r3, #0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10a      	bne.n	80053cc <xQueueGenericSend+0x60>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053c8:	bf00      	nop
 80053ca:	e7fe      	b.n	80053ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d103      	bne.n	80053da <xQueueGenericSend+0x6e>
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <xQueueGenericSend+0x72>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <xQueueGenericSend+0x74>
 80053de:	2300      	movs	r3, #0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <xQueueGenericSend+0x8e>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	623b      	str	r3, [r7, #32]
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053fa:	f001 f9bd 	bl	8006778 <xTaskGetSchedulerState>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <xQueueGenericSend+0x9e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <xQueueGenericSend+0xa2>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <xQueueGenericSend+0xa4>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <xQueueGenericSend+0xbe>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	61fb      	str	r3, [r7, #28]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800542a:	f001 ff03 	bl	8007234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <xQueueGenericSend+0xd4>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d129      	bne.n	8005494 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005446:	f000 fa0b 	bl	8005860 <prvCopyDataToQueue>
 800544a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d010      	beq.n	8005476 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	3324      	adds	r3, #36	; 0x24
 8005458:	4618      	mov	r0, r3
 800545a:	f000 ffcf 	bl	80063fc <xTaskRemoveFromEventList>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d013      	beq.n	800548c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005464:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <xQueueGenericSend+0x1f8>)
 8005466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	e00a      	b.n	800548c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800547c:	4b39      	ldr	r3, [pc, #228]	; (8005564 <xQueueGenericSend+0x1f8>)
 800547e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800548c:	f001 ff02 	bl	8007294 <vPortExitCritical>
				return pdPASS;
 8005490:	2301      	movs	r3, #1
 8005492:	e063      	b.n	800555c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800549a:	f001 fefb 	bl	8007294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	e05c      	b.n	800555c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d106      	bne.n	80054b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054a8:	f107 0314 	add.w	r3, r7, #20
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 f809 	bl	80064c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054b2:	2301      	movs	r3, #1
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054b6:	f001 feed 	bl	8007294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054ba:	f000 fd7b 	bl	8005fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054be:	f001 feb9 	bl	8007234 <vPortEnterCritical>
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054c8:	b25b      	sxtb	r3, r3
 80054ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ce:	d103      	bne.n	80054d8 <xQueueGenericSend+0x16c>
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054de:	b25b      	sxtb	r3, r3
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e4:	d103      	bne.n	80054ee <xQueueGenericSend+0x182>
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054ee:	f001 fed1 	bl	8007294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054f2:	1d3a      	adds	r2, r7, #4
 80054f4:	f107 0314 	add.w	r3, r7, #20
 80054f8:	4611      	mov	r1, r2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fff8 	bl	80064f0 <xTaskCheckForTimeOut>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d124      	bne.n	8005550 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005508:	f000 faa2 	bl	8005a50 <prvIsQueueFull>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d018      	beq.n	8005544 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	3310      	adds	r3, #16
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4611      	mov	r1, r2
 800551a:	4618      	mov	r0, r3
 800551c:	f000 ff1e 	bl	800635c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005522:	f000 fa2d 	bl	8005980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005526:	f000 fd53 	bl	8005fd0 <xTaskResumeAll>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	f47f af7c 	bne.w	800542a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005532:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <xQueueGenericSend+0x1f8>)
 8005534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	e772      	b.n	800542a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005546:	f000 fa1b 	bl	8005980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800554a:	f000 fd41 	bl	8005fd0 <xTaskResumeAll>
 800554e:	e76c      	b.n	800542a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005552:	f000 fa15 	bl	8005980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005556:	f000 fd3b 	bl	8005fd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800555a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800555c:	4618      	mov	r0, r3
 800555e:	3738      	adds	r7, #56	; 0x38
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	e000ed04 	.word	0xe000ed04

08005568 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b090      	sub	sp, #64	; 0x40
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d103      	bne.n	80055a4 <xQueueGenericSendFromISR+0x3c>
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <xQueueGenericSendFromISR+0x40>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <xQueueGenericSendFromISR+0x42>
 80055a8:	2300      	movs	r3, #0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055c0:	bf00      	nop
 80055c2:	e7fe      	b.n	80055c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d103      	bne.n	80055d2 <xQueueGenericSendFromISR+0x6a>
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <xQueueGenericSendFromISR+0x6e>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <xQueueGenericSendFromISR+0x70>
 80055d6:	2300      	movs	r3, #0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	623b      	str	r3, [r7, #32]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055f2:	f001 ff01 	bl	80073f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055f6:	f3ef 8211 	mrs	r2, BASEPRI
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	61fa      	str	r2, [r7, #28]
 800560c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800560e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005610:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <xQueueGenericSendFromISR+0xbc>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d12f      	bne.n	8005684 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800562a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800563a:	f000 f911 	bl	8005860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800563e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005646:	d112      	bne.n	800566e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d016      	beq.n	800567e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	3324      	adds	r3, #36	; 0x24
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fed1 	bl	80063fc <xTaskRemoveFromEventList>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00e      	beq.n	800567e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e007      	b.n	800567e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800566e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005672:	3301      	adds	r3, #1
 8005674:	b2db      	uxtb	r3, r3
 8005676:	b25a      	sxtb	r2, r3
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800567e:	2301      	movs	r3, #1
 8005680:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005682:	e001      	b.n	8005688 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005684:	2300      	movs	r3, #0
 8005686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005692:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005696:	4618      	mov	r0, r3
 8005698:	3740      	adds	r7, #64	; 0x40
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08c      	sub	sp, #48	; 0x30
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <xQueueReceive+0x30>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	623b      	str	r3, [r7, #32]
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <xQueueReceive+0x3e>
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <xQueueReceive+0x42>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <xQueueReceive+0x44>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueReceive+0x5e>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	61fb      	str	r3, [r7, #28]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056fe:	f001 f83b 	bl	8006778 <xTaskGetSchedulerState>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <xQueueReceive+0x6e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <xQueueReceive+0x72>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <xQueueReceive+0x74>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xQueueReceive+0x8e>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	61bb      	str	r3, [r7, #24]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800572e:	f001 fd81 	bl	8007234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	d01f      	beq.n	800577e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005742:	f000 f8f7 	bl	8005934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	1e5a      	subs	r2, r3, #1
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00f      	beq.n	8005776 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	3310      	adds	r3, #16
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fe4e 	bl	80063fc <xTaskRemoveFromEventList>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005766:	4b3d      	ldr	r3, [pc, #244]	; (800585c <xQueueReceive+0x1bc>)
 8005768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005776:	f001 fd8d 	bl	8007294 <vPortExitCritical>
				return pdPASS;
 800577a:	2301      	movs	r3, #1
 800577c:	e069      	b.n	8005852 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d103      	bne.n	800578c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005784:	f001 fd86 	bl	8007294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005788:	2300      	movs	r3, #0
 800578a:	e062      	b.n	8005852 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005792:	f107 0310 	add.w	r3, r7, #16
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fe94 	bl	80064c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800579c:	2301      	movs	r3, #1
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057a0:	f001 fd78 	bl	8007294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057a4:	f000 fc06 	bl	8005fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057a8:	f001 fd44 	bl	8007234 <vPortEnterCritical>
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057b2:	b25b      	sxtb	r3, r3
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b8:	d103      	bne.n	80057c2 <xQueueReceive+0x122>
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057c8:	b25b      	sxtb	r3, r3
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ce:	d103      	bne.n	80057d8 <xQueueReceive+0x138>
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d8:	f001 fd5c 	bl	8007294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057dc:	1d3a      	adds	r2, r7, #4
 80057de:	f107 0310 	add.w	r3, r7, #16
 80057e2:	4611      	mov	r1, r2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fe83 	bl	80064f0 <xTaskCheckForTimeOut>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d123      	bne.n	8005838 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f2:	f000 f917 	bl	8005a24 <prvIsQueueEmpty>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d017      	beq.n	800582c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	3324      	adds	r3, #36	; 0x24
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	4611      	mov	r1, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fda9 	bl	800635c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800580a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580c:	f000 f8b8 	bl	8005980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005810:	f000 fbde 	bl	8005fd0 <xTaskResumeAll>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d189      	bne.n	800572e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800581a:	4b10      	ldr	r3, [pc, #64]	; (800585c <xQueueReceive+0x1bc>)
 800581c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	e780      	b.n	800572e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800582c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800582e:	f000 f8a7 	bl	8005980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005832:	f000 fbcd 	bl	8005fd0 <xTaskResumeAll>
 8005836:	e77a      	b.n	800572e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800583a:	f000 f8a1 	bl	8005980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800583e:	f000 fbc7 	bl	8005fd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005844:	f000 f8ee 	bl	8005a24 <prvIsQueueEmpty>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	f43f af6f 	beq.w	800572e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005850:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005852:	4618      	mov	r0, r3
 8005854:	3730      	adds	r7, #48	; 0x30
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	e000ed04 	.word	0xe000ed04

08005860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10d      	bne.n	800589a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d14d      	bne.n	8005922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	4618      	mov	r0, r3
 800588c:	f000 ff92 	bl	80067b4 <xTaskPriorityDisinherit>
 8005890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	609a      	str	r2, [r3, #8]
 8005898:	e043      	b.n	8005922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d119      	bne.n	80058d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6858      	ldr	r0, [r3, #4]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	461a      	mov	r2, r3
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	f001 fff8 	bl	80078a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	441a      	add	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d32b      	bcc.n	8005922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	e026      	b.n	8005922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68d8      	ldr	r0, [r3, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	461a      	mov	r2, r3
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	f001 ffde 	bl	80078a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	425b      	negs	r3, r3
 80058ee:	441a      	add	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d207      	bcs.n	8005910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	425b      	negs	r3, r3
 800590a:	441a      	add	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d105      	bne.n	8005922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	3b01      	subs	r3, #1
 8005920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800592a:	697b      	ldr	r3, [r7, #20]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d018      	beq.n	8005978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	441a      	add	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	429a      	cmp	r2, r3
 800595e:	d303      	bcc.n	8005968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68d9      	ldr	r1, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	461a      	mov	r2, r3
 8005972:	6838      	ldr	r0, [r7, #0]
 8005974:	f001 ff94 	bl	80078a0 <memcpy>
	}
}
 8005978:	bf00      	nop
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005988:	f001 fc54 	bl	8007234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005994:	e011      	b.n	80059ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b00      	cmp	r3, #0
 800599c:	d012      	beq.n	80059c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3324      	adds	r3, #36	; 0x24
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fd2a 	bl	80063fc <xTaskRemoveFromEventList>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059ae:	f000 fe01 	bl	80065b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dce9      	bgt.n	8005996 <prvUnlockQueue+0x16>
 80059c2:	e000      	b.n	80059c6 <prvUnlockQueue+0x46>
					break;
 80059c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	22ff      	movs	r2, #255	; 0xff
 80059ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80059ce:	f001 fc61 	bl	8007294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80059d2:	f001 fc2f 	bl	8007234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059de:	e011      	b.n	8005a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d012      	beq.n	8005a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3310      	adds	r3, #16
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fd05 	bl	80063fc <xTaskRemoveFromEventList>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059f8:	f000 fddc 	bl	80065b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059fc:	7bbb      	ldrb	r3, [r7, #14]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	dce9      	bgt.n	80059e0 <prvUnlockQueue+0x60>
 8005a0c:	e000      	b.n	8005a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	22ff      	movs	r2, #255	; 0xff
 8005a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a18:	f001 fc3c 	bl	8007294 <vPortExitCritical>
}
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a2c:	f001 fc02 	bl	8007234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e001      	b.n	8005a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a42:	f001 fc27 	bl	8007294 <vPortExitCritical>

	return xReturn;
 8005a46:	68fb      	ldr	r3, [r7, #12]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a58:	f001 fbec 	bl	8007234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d102      	bne.n	8005a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	e001      	b.n	8005a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a72:	f001 fc0f 	bl	8007294 <vPortExitCritical>

	return xReturn;
 8005a76:	68fb      	ldr	r3, [r7, #12]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	e014      	b.n	8005aba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a90:	4a0f      	ldr	r2, [pc, #60]	; (8005ad0 <vQueueAddToRegistry+0x50>)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10b      	bne.n	8005ab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a9c:	490c      	ldr	r1, [pc, #48]	; (8005ad0 <vQueueAddToRegistry+0x50>)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005aa6:	4a0a      	ldr	r2, [pc, #40]	; (8005ad0 <vQueueAddToRegistry+0x50>)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	4413      	add	r3, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ab2:	e006      	b.n	8005ac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b07      	cmp	r3, #7
 8005abe:	d9e7      	bls.n	8005a90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	20001ab8 	.word	0x20001ab8

08005ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ae4:	f001 fba6 	bl	8007234 <vPortEnterCritical>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aee:	b25b      	sxtb	r3, r3
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005af4:	d103      	bne.n	8005afe <vQueueWaitForMessageRestricted+0x2a>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b04:	b25b      	sxtb	r3, r3
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b0a:	d103      	bne.n	8005b14 <vQueueWaitForMessageRestricted+0x40>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b14:	f001 fbbe 	bl	8007294 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d106      	bne.n	8005b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	3324      	adds	r3, #36	; 0x24
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fc3b 	bl	80063a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b2e:	6978      	ldr	r0, [r7, #20]
 8005b30:	f7ff ff26 	bl	8005980 <prvUnlockQueue>
	}
 8005b34:	bf00      	nop
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08e      	sub	sp, #56	; 0x38
 8005b40:	af04      	add	r7, sp, #16
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	623b      	str	r3, [r7, #32]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	61fb      	str	r3, [r7, #28]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b82:	235c      	movs	r3, #92	; 0x5c
 8005b84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b5c      	cmp	r3, #92	; 0x5c
 8005b8a:	d00a      	beq.n	8005ba2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	61bb      	str	r3, [r7, #24]
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ba2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d01e      	beq.n	8005be8 <xTaskCreateStatic+0xac>
 8005baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01b      	beq.n	8005be8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	9303      	str	r3, [sp, #12]
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	9302      	str	r3, [sp, #8]
 8005bca:	f107 0314 	add.w	r3, r7, #20
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f850 	bl	8005c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005be2:	f000 f8dd 	bl	8005da0 <prvAddNewTaskToReadyList>
 8005be6:	e001      	b.n	8005bec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bec:	697b      	ldr	r3, [r7, #20]
	}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3728      	adds	r7, #40	; 0x28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b08c      	sub	sp, #48	; 0x30
 8005bfa:	af04      	add	r7, sp, #16
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	603b      	str	r3, [r7, #0]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 fc34 	bl	8007478 <pvPortMalloc>
 8005c10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00e      	beq.n	8005c36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c18:	205c      	movs	r0, #92	; 0x5c
 8005c1a:	f001 fc2d 	bl	8007478 <pvPortMalloc>
 8005c1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c2c:	e005      	b.n	8005c3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c2e:	6978      	ldr	r0, [r7, #20]
 8005c30:	f001 fcee 	bl	8007610 <vPortFree>
 8005c34:	e001      	b.n	8005c3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d017      	beq.n	8005c70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c48:	88fa      	ldrh	r2, [r7, #6]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	9303      	str	r3, [sp, #12]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	9302      	str	r3, [sp, #8]
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f80e 	bl	8005c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c64:	69f8      	ldr	r0, [r7, #28]
 8005c66:	f000 f89b 	bl	8005da0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	e002      	b.n	8005c76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c76:	69bb      	ldr	r3, [r7, #24]
	}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3720      	adds	r7, #32
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	461a      	mov	r2, r3
 8005c98:	21a5      	movs	r1, #165	; 0xa5
 8005c9a:	f001 fe0f 	bl	80078bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	f023 0307 	bic.w	r3, r3, #7
 8005cb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	617b      	str	r3, [r7, #20]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01f      	beq.n	8005d1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	e012      	b.n	8005d0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	7819      	ldrb	r1, [r3, #0]
 8005cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3334      	adds	r3, #52	; 0x34
 8005cf4:	460a      	mov	r2, r1
 8005cf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d006      	beq.n	8005d12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	3301      	adds	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	2b0f      	cmp	r3, #15
 8005d0e:	d9e9      	bls.n	8005ce4 <prvInitialiseNewTask+0x64>
 8005d10:	e000      	b.n	8005d14 <prvInitialiseNewTask+0x94>
			{
				break;
 8005d12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d1c:	e003      	b.n	8005d26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2b37      	cmp	r3, #55	; 0x37
 8005d2a:	d901      	bls.n	8005d30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d2c:	2337      	movs	r3, #55	; 0x37
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	2200      	movs	r2, #0
 8005d40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	3304      	adds	r3, #4
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff f978 	bl	800503c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	3318      	adds	r3, #24
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff f973 	bl	800503c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	2200      	movs	r2, #0
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	68f9      	ldr	r1, [r7, #12]
 8005d7e:	69b8      	ldr	r0, [r7, #24]
 8005d80:	f001 f928 	bl	8006fd4 <pxPortInitialiseStack>
 8005d84:	4602      	mov	r2, r0
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d96:	bf00      	nop
 8005d98:	3720      	adds	r7, #32
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005da8:	f001 fa44 	bl	8007234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dac:	4b2d      	ldr	r3, [pc, #180]	; (8005e64 <prvAddNewTaskToReadyList+0xc4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3301      	adds	r3, #1
 8005db2:	4a2c      	ldr	r2, [pc, #176]	; (8005e64 <prvAddNewTaskToReadyList+0xc4>)
 8005db4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005db6:	4b2c      	ldr	r3, [pc, #176]	; (8005e68 <prvAddNewTaskToReadyList+0xc8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dbe:	4a2a      	ldr	r2, [pc, #168]	; (8005e68 <prvAddNewTaskToReadyList+0xc8>)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dc4:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <prvAddNewTaskToReadyList+0xc4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d110      	bne.n	8005dee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dcc:	f000 fc16 	bl	80065fc <prvInitialiseTaskLists>
 8005dd0:	e00d      	b.n	8005dee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dd2:	4b26      	ldr	r3, [pc, #152]	; (8005e6c <prvAddNewTaskToReadyList+0xcc>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dda:	4b23      	ldr	r3, [pc, #140]	; (8005e68 <prvAddNewTaskToReadyList+0xc8>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d802      	bhi.n	8005dee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005de8:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <prvAddNewTaskToReadyList+0xc8>)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dee:	4b20      	ldr	r3, [pc, #128]	; (8005e70 <prvAddNewTaskToReadyList+0xd0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	4a1e      	ldr	r2, [pc, #120]	; (8005e70 <prvAddNewTaskToReadyList+0xd0>)
 8005df6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005df8:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <prvAddNewTaskToReadyList+0xd0>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e04:	4b1b      	ldr	r3, [pc, #108]	; (8005e74 <prvAddNewTaskToReadyList+0xd4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d903      	bls.n	8005e14 <prvAddNewTaskToReadyList+0x74>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	4a18      	ldr	r2, [pc, #96]	; (8005e74 <prvAddNewTaskToReadyList+0xd4>)
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4a15      	ldr	r2, [pc, #84]	; (8005e78 <prvAddNewTaskToReadyList+0xd8>)
 8005e22:	441a      	add	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f7ff f913 	bl	8005056 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e30:	f001 fa30 	bl	8007294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e34:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <prvAddNewTaskToReadyList+0xcc>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00e      	beq.n	8005e5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <prvAddNewTaskToReadyList+0xc8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d207      	bcs.n	8005e5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e4a:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <prvAddNewTaskToReadyList+0xdc>)
 8005e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20000c38 	.word	0x20000c38
 8005e68:	20000764 	.word	0x20000764
 8005e6c:	20000c44 	.word	0x20000c44
 8005e70:	20000c54 	.word	0x20000c54
 8005e74:	20000c40 	.word	0x20000c40
 8005e78:	20000768 	.word	0x20000768
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d017      	beq.n	8005ec2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e92:	4b13      	ldr	r3, [pc, #76]	; (8005ee0 <vTaskDelay+0x60>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <vTaskDelay+0x30>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	60bb      	str	r3, [r7, #8]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005eb0:	f000 f880 	bl	8005fb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fcea 	bl	8006890 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ebc:	f000 f888 	bl	8005fd0 <xTaskResumeAll>
 8005ec0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d107      	bne.n	8005ed8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <vTaskDelay+0x64>)
 8005eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000c60 	.word	0x20000c60
 8005ee4:	e000ed04 	.word	0xe000ed04

08005ee8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	; 0x28
 8005eec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ef6:	463a      	mov	r2, r7
 8005ef8:	1d39      	adds	r1, r7, #4
 8005efa:	f107 0308 	add.w	r3, r7, #8
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff f848 	bl	8004f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	9202      	str	r2, [sp, #8]
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	2300      	movs	r3, #0
 8005f14:	460a      	mov	r2, r1
 8005f16:	4921      	ldr	r1, [pc, #132]	; (8005f9c <vTaskStartScheduler+0xb4>)
 8005f18:	4821      	ldr	r0, [pc, #132]	; (8005fa0 <vTaskStartScheduler+0xb8>)
 8005f1a:	f7ff fe0f 	bl	8005b3c <xTaskCreateStatic>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4a20      	ldr	r2, [pc, #128]	; (8005fa4 <vTaskStartScheduler+0xbc>)
 8005f22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f24:	4b1f      	ldr	r3, [pc, #124]	; (8005fa4 <vTaskStartScheduler+0xbc>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e001      	b.n	8005f36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d102      	bne.n	8005f42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f3c:	f000 fcfc 	bl	8006938 <xTimerCreateTimerTask>
 8005f40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d116      	bne.n	8005f76 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	613b      	str	r3, [r7, #16]
}
 8005f5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f5c:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <vTaskStartScheduler+0xc0>)
 8005f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f64:	4b11      	ldr	r3, [pc, #68]	; (8005fac <vTaskStartScheduler+0xc4>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f6a:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <vTaskStartScheduler+0xc8>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f70:	f001 f8be 	bl	80070f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f74:	e00e      	b.n	8005f94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f7c:	d10a      	bne.n	8005f94 <vTaskStartScheduler+0xac>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	60fb      	str	r3, [r7, #12]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <vTaskStartScheduler+0xaa>
}
 8005f94:	bf00      	nop
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	080088e8 	.word	0x080088e8
 8005fa0:	080065cd 	.word	0x080065cd
 8005fa4:	20000c5c 	.word	0x20000c5c
 8005fa8:	20000c58 	.word	0x20000c58
 8005fac:	20000c44 	.word	0x20000c44
 8005fb0:	20000c3c 	.word	0x20000c3c

08005fb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <vTaskSuspendAll+0x18>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	4a03      	ldr	r2, [pc, #12]	; (8005fcc <vTaskSuspendAll+0x18>)
 8005fc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005fc2:	bf00      	nop
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	20000c60 	.word	0x20000c60

08005fd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fde:	4b42      	ldr	r3, [pc, #264]	; (80060e8 <xTaskResumeAll+0x118>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <xTaskResumeAll+0x2c>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	603b      	str	r3, [r7, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	e7fe      	b.n	8005ffa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ffc:	f001 f91a 	bl	8007234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006000:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <xTaskResumeAll+0x118>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3b01      	subs	r3, #1
 8006006:	4a38      	ldr	r2, [pc, #224]	; (80060e8 <xTaskResumeAll+0x118>)
 8006008:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800600a:	4b37      	ldr	r3, [pc, #220]	; (80060e8 <xTaskResumeAll+0x118>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d162      	bne.n	80060d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006012:	4b36      	ldr	r3, [pc, #216]	; (80060ec <xTaskResumeAll+0x11c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d05e      	beq.n	80060d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800601a:	e02f      	b.n	800607c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800601c:	4b34      	ldr	r3, [pc, #208]	; (80060f0 <xTaskResumeAll+0x120>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3318      	adds	r3, #24
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff f871 	bl	8005110 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3304      	adds	r3, #4
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff f86c 	bl	8005110 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	4b2d      	ldr	r3, [pc, #180]	; (80060f4 <xTaskResumeAll+0x124>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d903      	bls.n	800604c <xTaskResumeAll+0x7c>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <xTaskResumeAll+0x124>)
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4a27      	ldr	r2, [pc, #156]	; (80060f8 <xTaskResumeAll+0x128>)
 800605a:	441a      	add	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3304      	adds	r3, #4
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f7fe fff7 	bl	8005056 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606c:	4b23      	ldr	r3, [pc, #140]	; (80060fc <xTaskResumeAll+0x12c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	429a      	cmp	r2, r3
 8006074:	d302      	bcc.n	800607c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006076:	4b22      	ldr	r3, [pc, #136]	; (8006100 <xTaskResumeAll+0x130>)
 8006078:	2201      	movs	r2, #1
 800607a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800607c:	4b1c      	ldr	r3, [pc, #112]	; (80060f0 <xTaskResumeAll+0x120>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1cb      	bne.n	800601c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800608a:	f000 fb55 	bl	8006738 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800608e:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <xTaskResumeAll+0x134>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d010      	beq.n	80060bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800609a:	f000 f847 	bl	800612c <xTaskIncrementTick>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80060a4:	4b16      	ldr	r3, [pc, #88]	; (8006100 <xTaskResumeAll+0x130>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f1      	bne.n	800609a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80060b6:	4b13      	ldr	r3, [pc, #76]	; (8006104 <xTaskResumeAll+0x134>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060bc:	4b10      	ldr	r3, [pc, #64]	; (8006100 <xTaskResumeAll+0x130>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d009      	beq.n	80060d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060c4:	2301      	movs	r3, #1
 80060c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060c8:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <xTaskResumeAll+0x138>)
 80060ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060d8:	f001 f8dc 	bl	8007294 <vPortExitCritical>

	return xAlreadyYielded;
 80060dc:	68bb      	ldr	r3, [r7, #8]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000c60 	.word	0x20000c60
 80060ec:	20000c38 	.word	0x20000c38
 80060f0:	20000bf8 	.word	0x20000bf8
 80060f4:	20000c40 	.word	0x20000c40
 80060f8:	20000768 	.word	0x20000768
 80060fc:	20000764 	.word	0x20000764
 8006100:	20000c4c 	.word	0x20000c4c
 8006104:	20000c48 	.word	0x20000c48
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006112:	4b05      	ldr	r3, [pc, #20]	; (8006128 <xTaskGetTickCount+0x1c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006118:	687b      	ldr	r3, [r7, #4]
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20000c3c 	.word	0x20000c3c

0800612c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006132:	2300      	movs	r3, #0
 8006134:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006136:	4b4f      	ldr	r3, [pc, #316]	; (8006274 <xTaskIncrementTick+0x148>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	f040 808f 	bne.w	800625e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006140:	4b4d      	ldr	r3, [pc, #308]	; (8006278 <xTaskIncrementTick+0x14c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3301      	adds	r3, #1
 8006146:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006148:	4a4b      	ldr	r2, [pc, #300]	; (8006278 <xTaskIncrementTick+0x14c>)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d120      	bne.n	8006196 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006154:	4b49      	ldr	r3, [pc, #292]	; (800627c <xTaskIncrementTick+0x150>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <xTaskIncrementTick+0x48>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	603b      	str	r3, [r7, #0]
}
 8006170:	bf00      	nop
 8006172:	e7fe      	b.n	8006172 <xTaskIncrementTick+0x46>
 8006174:	4b41      	ldr	r3, [pc, #260]	; (800627c <xTaskIncrementTick+0x150>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	4b41      	ldr	r3, [pc, #260]	; (8006280 <xTaskIncrementTick+0x154>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a3f      	ldr	r2, [pc, #252]	; (800627c <xTaskIncrementTick+0x150>)
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	4a3f      	ldr	r2, [pc, #252]	; (8006280 <xTaskIncrementTick+0x154>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	4b3e      	ldr	r3, [pc, #248]	; (8006284 <xTaskIncrementTick+0x158>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	4a3d      	ldr	r2, [pc, #244]	; (8006284 <xTaskIncrementTick+0x158>)
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	f000 fad1 	bl	8006738 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006196:	4b3c      	ldr	r3, [pc, #240]	; (8006288 <xTaskIncrementTick+0x15c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	429a      	cmp	r2, r3
 800619e:	d349      	bcc.n	8006234 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a0:	4b36      	ldr	r3, [pc, #216]	; (800627c <xTaskIncrementTick+0x150>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d104      	bne.n	80061b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061aa:	4b37      	ldr	r3, [pc, #220]	; (8006288 <xTaskIncrementTick+0x15c>)
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061b0:	601a      	str	r2, [r3, #0]
					break;
 80061b2:	e03f      	b.n	8006234 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b4:	4b31      	ldr	r3, [pc, #196]	; (800627c <xTaskIncrementTick+0x150>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d203      	bcs.n	80061d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061cc:	4a2e      	ldr	r2, [pc, #184]	; (8006288 <xTaskIncrementTick+0x15c>)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061d2:	e02f      	b.n	8006234 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe ff99 	bl	8005110 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d004      	beq.n	80061f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	3318      	adds	r3, #24
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe ff90 	bl	8005110 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	4b25      	ldr	r3, [pc, #148]	; (800628c <xTaskIncrementTick+0x160>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d903      	bls.n	8006204 <xTaskIncrementTick+0xd8>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	4a22      	ldr	r2, [pc, #136]	; (800628c <xTaskIncrementTick+0x160>)
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <xTaskIncrementTick+0x164>)
 8006212:	441a      	add	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f7fe ff1b 	bl	8005056 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006224:	4b1b      	ldr	r3, [pc, #108]	; (8006294 <xTaskIncrementTick+0x168>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	429a      	cmp	r2, r3
 800622c:	d3b8      	bcc.n	80061a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800622e:	2301      	movs	r3, #1
 8006230:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006232:	e7b5      	b.n	80061a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006234:	4b17      	ldr	r3, [pc, #92]	; (8006294 <xTaskIncrementTick+0x168>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623a:	4915      	ldr	r1, [pc, #84]	; (8006290 <xTaskIncrementTick+0x164>)
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d901      	bls.n	8006250 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800624c:	2301      	movs	r3, #1
 800624e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006250:	4b11      	ldr	r3, [pc, #68]	; (8006298 <xTaskIncrementTick+0x16c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e004      	b.n	8006268 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800625e:	4b0f      	ldr	r3, [pc, #60]	; (800629c <xTaskIncrementTick+0x170>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3301      	adds	r3, #1
 8006264:	4a0d      	ldr	r2, [pc, #52]	; (800629c <xTaskIncrementTick+0x170>)
 8006266:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006268:	697b      	ldr	r3, [r7, #20]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000c60 	.word	0x20000c60
 8006278:	20000c3c 	.word	0x20000c3c
 800627c:	20000bf0 	.word	0x20000bf0
 8006280:	20000bf4 	.word	0x20000bf4
 8006284:	20000c50 	.word	0x20000c50
 8006288:	20000c58 	.word	0x20000c58
 800628c:	20000c40 	.word	0x20000c40
 8006290:	20000768 	.word	0x20000768
 8006294:	20000764 	.word	0x20000764
 8006298:	20000c4c 	.word	0x20000c4c
 800629c:	20000c48 	.word	0x20000c48

080062a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062a6:	4b28      	ldr	r3, [pc, #160]	; (8006348 <vTaskSwitchContext+0xa8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062ae:	4b27      	ldr	r3, [pc, #156]	; (800634c <vTaskSwitchContext+0xac>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062b4:	e041      	b.n	800633a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80062b6:	4b25      	ldr	r3, [pc, #148]	; (800634c <vTaskSwitchContext+0xac>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062bc:	4b24      	ldr	r3, [pc, #144]	; (8006350 <vTaskSwitchContext+0xb0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	e010      	b.n	80062e6 <vTaskSwitchContext+0x46>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	607b      	str	r3, [r7, #4]
}
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <vTaskSwitchContext+0x3e>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	491b      	ldr	r1, [pc, #108]	; (8006354 <vTaskSwitchContext+0xb4>)
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0e4      	beq.n	80062c4 <vTaskSwitchContext+0x24>
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4a13      	ldr	r2, [pc, #76]	; (8006354 <vTaskSwitchContext+0xb4>)
 8006306:	4413      	add	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	605a      	str	r2, [r3, #4]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	3308      	adds	r3, #8
 800631c:	429a      	cmp	r2, r3
 800631e:	d104      	bne.n	800632a <vTaskSwitchContext+0x8a>
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	4a09      	ldr	r2, [pc, #36]	; (8006358 <vTaskSwitchContext+0xb8>)
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	4a06      	ldr	r2, [pc, #24]	; (8006350 <vTaskSwitchContext+0xb0>)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6013      	str	r3, [r2, #0]
}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000c60 	.word	0x20000c60
 800634c:	20000c4c 	.word	0x20000c4c
 8006350:	20000c40 	.word	0x20000c40
 8006354:	20000768 	.word	0x20000768
 8006358:	20000764 	.word	0x20000764

0800635c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	60fb      	str	r3, [r7, #12]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006382:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <vTaskPlaceOnEventList+0x44>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3318      	adds	r3, #24
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fe fe87 	bl	800509e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006390:	2101      	movs	r1, #1
 8006392:	6838      	ldr	r0, [r7, #0]
 8006394:	f000 fa7c 	bl	8006890 <prvAddCurrentTaskToDelayedList>
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000764 	.word	0x20000764

080063a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10a      	bne.n	80063cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	617b      	str	r3, [r7, #20]
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063cc:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3318      	adds	r3, #24
 80063d2:	4619      	mov	r1, r3
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7fe fe3e 	bl	8005056 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80063e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	68b8      	ldr	r0, [r7, #8]
 80063ea:	f000 fa51 	bl	8006890 <prvAddCurrentTaskToDelayedList>
	}
 80063ee:	bf00      	nop
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000764 	.word	0x20000764

080063fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	60fb      	str	r3, [r7, #12]
}
 8006424:	bf00      	nop
 8006426:	e7fe      	b.n	8006426 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	3318      	adds	r3, #24
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe fe6f 	bl	8005110 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006432:	4b1e      	ldr	r3, [pc, #120]	; (80064ac <xTaskRemoveFromEventList+0xb0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d11d      	bne.n	8006476 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3304      	adds	r3, #4
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe fe66 	bl	8005110 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	4b19      	ldr	r3, [pc, #100]	; (80064b0 <xTaskRemoveFromEventList+0xb4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d903      	bls.n	8006458 <xTaskRemoveFromEventList+0x5c>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a16      	ldr	r2, [pc, #88]	; (80064b0 <xTaskRemoveFromEventList+0xb4>)
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4a13      	ldr	r2, [pc, #76]	; (80064b4 <xTaskRemoveFromEventList+0xb8>)
 8006466:	441a      	add	r2, r3
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	3304      	adds	r3, #4
 800646c:	4619      	mov	r1, r3
 800646e:	4610      	mov	r0, r2
 8006470:	f7fe fdf1 	bl	8005056 <vListInsertEnd>
 8006474:	e005      	b.n	8006482 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	3318      	adds	r3, #24
 800647a:	4619      	mov	r1, r3
 800647c:	480e      	ldr	r0, [pc, #56]	; (80064b8 <xTaskRemoveFromEventList+0xbc>)
 800647e:	f7fe fdea 	bl	8005056 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	4b0d      	ldr	r3, [pc, #52]	; (80064bc <xTaskRemoveFromEventList+0xc0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	429a      	cmp	r2, r3
 800648e:	d905      	bls.n	800649c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006490:	2301      	movs	r3, #1
 8006492:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006494:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <xTaskRemoveFromEventList+0xc4>)
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	e001      	b.n	80064a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80064a0:	697b      	ldr	r3, [r7, #20]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000c60 	.word	0x20000c60
 80064b0:	20000c40 	.word	0x20000c40
 80064b4:	20000768 	.word	0x20000768
 80064b8:	20000bf8 	.word	0x20000bf8
 80064bc:	20000764 	.word	0x20000764
 80064c0:	20000c4c 	.word	0x20000c4c

080064c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <vTaskInternalSetTimeOutState+0x24>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064d4:	4b05      	ldr	r3, [pc, #20]	; (80064ec <vTaskInternalSetTimeOutState+0x28>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	605a      	str	r2, [r3, #4]
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	20000c50 	.word	0x20000c50
 80064ec:	20000c3c 	.word	0x20000c3c

080064f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	613b      	str	r3, [r7, #16]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60fb      	str	r3, [r7, #12]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006532:	f000 fe7f 	bl	8007234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006536:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <xTaskCheckForTimeOut+0xbc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800654e:	d102      	bne.n	8006556 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006550:	2300      	movs	r3, #0
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	e023      	b.n	800659e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <xTaskCheckForTimeOut+0xc0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d007      	beq.n	8006572 <xTaskCheckForTimeOut+0x82>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	429a      	cmp	r2, r3
 800656a:	d302      	bcc.n	8006572 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800656c:	2301      	movs	r3, #1
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	e015      	b.n	800659e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	429a      	cmp	r2, r3
 800657a:	d20b      	bcs.n	8006594 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	1ad2      	subs	r2, r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7ff ff9b 	bl	80064c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800658e:	2300      	movs	r3, #0
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	e004      	b.n	800659e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800659a:	2301      	movs	r3, #1
 800659c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800659e:	f000 fe79 	bl	8007294 <vPortExitCritical>

	return xReturn;
 80065a2:	69fb      	ldr	r3, [r7, #28]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3720      	adds	r7, #32
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20000c3c 	.word	0x20000c3c
 80065b0:	20000c50 	.word	0x20000c50

080065b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065b8:	4b03      	ldr	r3, [pc, #12]	; (80065c8 <vTaskMissedYield+0x14>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
}
 80065be:	bf00      	nop
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	20000c4c 	.word	0x20000c4c

080065cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065d4:	f000 f852 	bl	800667c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <prvIdleTask+0x28>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d9f9      	bls.n	80065d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <prvIdleTask+0x2c>)
 80065e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065f0:	e7f0      	b.n	80065d4 <prvIdleTask+0x8>
 80065f2:	bf00      	nop
 80065f4:	20000768 	.word	0x20000768
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006602:	2300      	movs	r3, #0
 8006604:	607b      	str	r3, [r7, #4]
 8006606:	e00c      	b.n	8006622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4a12      	ldr	r2, [pc, #72]	; (800665c <prvInitialiseTaskLists+0x60>)
 8006614:	4413      	add	r3, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe fcf0 	bl	8004ffc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3301      	adds	r3, #1
 8006620:	607b      	str	r3, [r7, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b37      	cmp	r3, #55	; 0x37
 8006626:	d9ef      	bls.n	8006608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006628:	480d      	ldr	r0, [pc, #52]	; (8006660 <prvInitialiseTaskLists+0x64>)
 800662a:	f7fe fce7 	bl	8004ffc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800662e:	480d      	ldr	r0, [pc, #52]	; (8006664 <prvInitialiseTaskLists+0x68>)
 8006630:	f7fe fce4 	bl	8004ffc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006634:	480c      	ldr	r0, [pc, #48]	; (8006668 <prvInitialiseTaskLists+0x6c>)
 8006636:	f7fe fce1 	bl	8004ffc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800663a:	480c      	ldr	r0, [pc, #48]	; (800666c <prvInitialiseTaskLists+0x70>)
 800663c:	f7fe fcde 	bl	8004ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006640:	480b      	ldr	r0, [pc, #44]	; (8006670 <prvInitialiseTaskLists+0x74>)
 8006642:	f7fe fcdb 	bl	8004ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006646:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <prvInitialiseTaskLists+0x78>)
 8006648:	4a05      	ldr	r2, [pc, #20]	; (8006660 <prvInitialiseTaskLists+0x64>)
 800664a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800664c:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <prvInitialiseTaskLists+0x7c>)
 800664e:	4a05      	ldr	r2, [pc, #20]	; (8006664 <prvInitialiseTaskLists+0x68>)
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000768 	.word	0x20000768
 8006660:	20000bc8 	.word	0x20000bc8
 8006664:	20000bdc 	.word	0x20000bdc
 8006668:	20000bf8 	.word	0x20000bf8
 800666c:	20000c0c 	.word	0x20000c0c
 8006670:	20000c24 	.word	0x20000c24
 8006674:	20000bf0 	.word	0x20000bf0
 8006678:	20000bf4 	.word	0x20000bf4

0800667c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006682:	e019      	b.n	80066b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006684:	f000 fdd6 	bl	8007234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006688:	4b10      	ldr	r3, [pc, #64]	; (80066cc <prvCheckTasksWaitingTermination+0x50>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3304      	adds	r3, #4
 8006694:	4618      	mov	r0, r3
 8006696:	f7fe fd3b 	bl	8005110 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800669a:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <prvCheckTasksWaitingTermination+0x54>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3b01      	subs	r3, #1
 80066a0:	4a0b      	ldr	r2, [pc, #44]	; (80066d0 <prvCheckTasksWaitingTermination+0x54>)
 80066a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <prvCheckTasksWaitingTermination+0x58>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	4a0a      	ldr	r2, [pc, #40]	; (80066d4 <prvCheckTasksWaitingTermination+0x58>)
 80066ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066ae:	f000 fdf1 	bl	8007294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f810 	bl	80066d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <prvCheckTasksWaitingTermination+0x58>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e1      	bne.n	8006684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000c0c 	.word	0x20000c0c
 80066d0:	20000c38 	.word	0x20000c38
 80066d4:	20000c20 	.word	0x20000c20

080066d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d108      	bne.n	80066fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 ff8e 	bl	8007610 <vPortFree>
				vPortFree( pxTCB );
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 ff8b 	bl	8007610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066fa:	e018      	b.n	800672e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006702:	2b01      	cmp	r3, #1
 8006704:	d103      	bne.n	800670e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 ff82 	bl	8007610 <vPortFree>
	}
 800670c:	e00f      	b.n	800672e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006714:	2b02      	cmp	r3, #2
 8006716:	d00a      	beq.n	800672e <prvDeleteTCB+0x56>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	60fb      	str	r3, [r7, #12]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <prvDeleteTCB+0x54>
	}
 800672e:	bf00      	nop
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800673e:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <prvResetNextTaskUnblockTime+0x38>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <prvResetNextTaskUnblockTime+0x3c>)
 800674a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800674e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006750:	e008      	b.n	8006764 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006752:	4b07      	ldr	r3, [pc, #28]	; (8006770 <prvResetNextTaskUnblockTime+0x38>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	4a04      	ldr	r2, [pc, #16]	; (8006774 <prvResetNextTaskUnblockTime+0x3c>)
 8006762:	6013      	str	r3, [r2, #0]
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	20000bf0 	.word	0x20000bf0
 8006774:	20000c58 	.word	0x20000c58

08006778 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800677e:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <xTaskGetSchedulerState+0x34>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d102      	bne.n	800678c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006786:	2301      	movs	r3, #1
 8006788:	607b      	str	r3, [r7, #4]
 800678a:	e008      	b.n	800679e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678c:	4b08      	ldr	r3, [pc, #32]	; (80067b0 <xTaskGetSchedulerState+0x38>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d102      	bne.n	800679a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006794:	2302      	movs	r3, #2
 8006796:	607b      	str	r3, [r7, #4]
 8006798:	e001      	b.n	800679e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800679a:	2300      	movs	r3, #0
 800679c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800679e:	687b      	ldr	r3, [r7, #4]
	}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	20000c44 	.word	0x20000c44
 80067b0:	20000c60 	.word	0x20000c60

080067b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d056      	beq.n	8006878 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067ca:	4b2e      	ldr	r3, [pc, #184]	; (8006884 <xTaskPriorityDisinherit+0xd0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d00a      	beq.n	80067ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	60fb      	str	r3, [r7, #12]
}
 80067e6:	bf00      	nop
 80067e8:	e7fe      	b.n	80067e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	60bb      	str	r3, [r7, #8]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680c:	1e5a      	subs	r2, r3, #1
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681a:	429a      	cmp	r2, r3
 800681c:	d02c      	beq.n	8006878 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006822:	2b00      	cmp	r3, #0
 8006824:	d128      	bne.n	8006878 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3304      	adds	r3, #4
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe fc70 	bl	8005110 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <xTaskPriorityDisinherit+0xd4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d903      	bls.n	8006858 <xTaskPriorityDisinherit+0xa4>
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4a0c      	ldr	r2, [pc, #48]	; (8006888 <xTaskPriorityDisinherit+0xd4>)
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685c:	4613      	mov	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4a09      	ldr	r2, [pc, #36]	; (800688c <xTaskPriorityDisinherit+0xd8>)
 8006866:	441a      	add	r2, r3
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f7fe fbf1 	bl	8005056 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006874:	2301      	movs	r3, #1
 8006876:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006878:	697b      	ldr	r3, [r7, #20]
	}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000764 	.word	0x20000764
 8006888:	20000c40 	.word	0x20000c40
 800688c:	20000768 	.word	0x20000768

08006890 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800689a:	4b21      	ldr	r3, [pc, #132]	; (8006920 <prvAddCurrentTaskToDelayedList+0x90>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068a0:	4b20      	ldr	r3, [pc, #128]	; (8006924 <prvAddCurrentTaskToDelayedList+0x94>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe fc32 	bl	8005110 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068b2:	d10a      	bne.n	80068ca <prvAddCurrentTaskToDelayedList+0x3a>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d007      	beq.n	80068ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ba:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <prvAddCurrentTaskToDelayedList+0x94>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3304      	adds	r3, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	4819      	ldr	r0, [pc, #100]	; (8006928 <prvAddCurrentTaskToDelayedList+0x98>)
 80068c4:	f7fe fbc7 	bl	8005056 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068c8:	e026      	b.n	8006918 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4413      	add	r3, r2
 80068d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068d2:	4b14      	ldr	r3, [pc, #80]	; (8006924 <prvAddCurrentTaskToDelayedList+0x94>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d209      	bcs.n	80068f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068e2:	4b12      	ldr	r3, [pc, #72]	; (800692c <prvAddCurrentTaskToDelayedList+0x9c>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <prvAddCurrentTaskToDelayedList+0x94>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f7fe fbd5 	bl	800509e <vListInsert>
}
 80068f4:	e010      	b.n	8006918 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068f6:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <prvAddCurrentTaskToDelayedList+0x94>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3304      	adds	r3, #4
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f7fe fbcb 	bl	800509e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <prvAddCurrentTaskToDelayedList+0xa4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	429a      	cmp	r2, r3
 8006910:	d202      	bcs.n	8006918 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006912:	4a08      	ldr	r2, [pc, #32]	; (8006934 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	6013      	str	r3, [r2, #0]
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000c3c 	.word	0x20000c3c
 8006924:	20000764 	.word	0x20000764
 8006928:	20000c24 	.word	0x20000c24
 800692c:	20000bf4 	.word	0x20000bf4
 8006930:	20000bf0 	.word	0x20000bf0
 8006934:	20000c58 	.word	0x20000c58

08006938 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08a      	sub	sp, #40	; 0x28
 800693c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006942:	f000 fb07 	bl	8006f54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006946:	4b1c      	ldr	r3, [pc, #112]	; (80069b8 <xTimerCreateTimerTask+0x80>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d021      	beq.n	8006992 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006952:	2300      	movs	r3, #0
 8006954:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006956:	1d3a      	adds	r2, r7, #4
 8006958:	f107 0108 	add.w	r1, r7, #8
 800695c:	f107 030c 	add.w	r3, r7, #12
 8006960:	4618      	mov	r0, r3
 8006962:	f7fe fb31 	bl	8004fc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	9202      	str	r2, [sp, #8]
 800696e:	9301      	str	r3, [sp, #4]
 8006970:	2302      	movs	r3, #2
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	2300      	movs	r3, #0
 8006976:	460a      	mov	r2, r1
 8006978:	4910      	ldr	r1, [pc, #64]	; (80069bc <xTimerCreateTimerTask+0x84>)
 800697a:	4811      	ldr	r0, [pc, #68]	; (80069c0 <xTimerCreateTimerTask+0x88>)
 800697c:	f7ff f8de 	bl	8005b3c <xTaskCreateStatic>
 8006980:	4603      	mov	r3, r0
 8006982:	4a10      	ldr	r2, [pc, #64]	; (80069c4 <xTimerCreateTimerTask+0x8c>)
 8006984:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006986:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <xTimerCreateTimerTask+0x8c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800698e:	2301      	movs	r3, #1
 8006990:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	613b      	str	r3, [r7, #16]
}
 80069aa:	bf00      	nop
 80069ac:	e7fe      	b.n	80069ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80069ae:	697b      	ldr	r3, [r7, #20]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000c94 	.word	0x20000c94
 80069bc:	080088f0 	.word	0x080088f0
 80069c0:	08006afd 	.word	0x08006afd
 80069c4:	20000c98 	.word	0x20000c98

080069c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	623b      	str	r3, [r7, #32]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069f6:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <xTimerGenericCommand+0x98>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d02a      	beq.n	8006a54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b05      	cmp	r3, #5
 8006a0e:	dc18      	bgt.n	8006a42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a10:	f7ff feb2 	bl	8006778 <xTaskGetSchedulerState>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d109      	bne.n	8006a2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a1a:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <xTimerGenericCommand+0x98>)
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	f107 0110 	add.w	r1, r7, #16
 8006a22:	2300      	movs	r3, #0
 8006a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a26:	f7fe fca1 	bl	800536c <xQueueGenericSend>
 8006a2a:	6278      	str	r0, [r7, #36]	; 0x24
 8006a2c:	e012      	b.n	8006a54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <xTimerGenericCommand+0x98>)
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	f107 0110 	add.w	r1, r7, #16
 8006a36:	2300      	movs	r3, #0
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f7fe fc97 	bl	800536c <xQueueGenericSend>
 8006a3e:	6278      	str	r0, [r7, #36]	; 0x24
 8006a40:	e008      	b.n	8006a54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a42:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <xTimerGenericCommand+0x98>)
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	f107 0110 	add.w	r1, r7, #16
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	f7fe fd8b 	bl	8005568 <xQueueGenericSendFromISR>
 8006a52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3728      	adds	r7, #40	; 0x28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000c94 	.word	0x20000c94

08006a64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af02      	add	r7, sp, #8
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6e:	4b22      	ldr	r3, [pc, #136]	; (8006af8 <prvProcessExpiredTimer+0x94>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fe fb47 	bl	8005110 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d022      	beq.n	8006ad6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	699a      	ldr	r2, [r3, #24]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	18d1      	adds	r1, r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	6978      	ldr	r0, [r7, #20]
 8006a9e:	f000 f8d1 	bl	8006c44 <prvInsertTimerInActiveList>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01f      	beq.n	8006ae8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	2300      	movs	r3, #0
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	6978      	ldr	r0, [r7, #20]
 8006ab4:	f7ff ff88 	bl	80069c8 <xTimerGenericCommand>
 8006ab8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d113      	bne.n	8006ae8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60fb      	str	r3, [r7, #12]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	6978      	ldr	r0, [r7, #20]
 8006aee:	4798      	blx	r3
}
 8006af0:	bf00      	nop
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000c8c 	.word	0x20000c8c

08006afc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b04:	f107 0308 	add.w	r3, r7, #8
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 f857 	bl	8006bbc <prvGetNextExpireTime>
 8006b0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4619      	mov	r1, r3
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f803 	bl	8006b20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b1a:	f000 f8d5 	bl	8006cc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b1e:	e7f1      	b.n	8006b04 <prvTimerTask+0x8>

08006b20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006b2a:	f7ff fa43 	bl	8005fb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b2e:	f107 0308 	add.w	r3, r7, #8
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 f866 	bl	8006c04 <prvSampleTimeNow>
 8006b38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d130      	bne.n	8006ba2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <prvProcessTimerOrBlockTask+0x3c>
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d806      	bhi.n	8006b5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b4e:	f7ff fa3f 	bl	8005fd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b52:	68f9      	ldr	r1, [r7, #12]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff ff85 	bl	8006a64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b5a:	e024      	b.n	8006ba6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d008      	beq.n	8006b74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b62:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <prvProcessTimerOrBlockTask+0x90>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <prvProcessTimerOrBlockTask+0x50>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <prvProcessTimerOrBlockTask+0x52>
 8006b70:	2300      	movs	r3, #0
 8006b72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b74:	4b0f      	ldr	r3, [pc, #60]	; (8006bb4 <prvProcessTimerOrBlockTask+0x94>)
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	4619      	mov	r1, r3
 8006b82:	f7fe ffa7 	bl	8005ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b86:	f7ff fa23 	bl	8005fd0 <xTaskResumeAll>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b90:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <prvProcessTimerOrBlockTask+0x98>)
 8006b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	f3bf 8f6f 	isb	sy
}
 8006ba0:	e001      	b.n	8006ba6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ba2:	f7ff fa15 	bl	8005fd0 <xTaskResumeAll>
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000c90 	.word	0x20000c90
 8006bb4:	20000c94 	.word	0x20000c94
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <prvGetNextExpireTime+0x44>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <prvGetNextExpireTime+0x16>
 8006bce:	2201      	movs	r2, #1
 8006bd0:	e000      	b.n	8006bd4 <prvGetNextExpireTime+0x18>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d105      	bne.n	8006bec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <prvGetNextExpireTime+0x44>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e001      	b.n	8006bf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	20000c8c 	.word	0x20000c8c

08006c04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c0c:	f7ff fa7e 	bl	800610c <xTaskGetTickCount>
 8006c10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c12:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <prvSampleTimeNow+0x3c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d205      	bcs.n	8006c28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c1c:	f000 f936 	bl	8006e8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	e002      	b.n	8006c2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c2e:	4a04      	ldr	r2, [pc, #16]	; (8006c40 <prvSampleTimeNow+0x3c>)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c34:	68fb      	ldr	r3, [r7, #12]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000c9c 	.word	0x20000c9c

08006c44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d812      	bhi.n	8006c90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d302      	bcc.n	8006c7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e01b      	b.n	8006cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c7e:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <prvInsertTimerInActiveList+0x7c>)
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f7fe fa08 	bl	800509e <vListInsert>
 8006c8e:	e012      	b.n	8006cb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d206      	bcs.n	8006ca6 <prvInsertTimerInActiveList+0x62>
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d302      	bcc.n	8006ca6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e007      	b.n	8006cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ca6:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <prvInsertTimerInActiveList+0x80>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3304      	adds	r3, #4
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	f7fe f9f4 	bl	800509e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006cb6:	697b      	ldr	r3, [r7, #20]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000c90 	.word	0x20000c90
 8006cc4:	20000c8c 	.word	0x20000c8c

08006cc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08e      	sub	sp, #56	; 0x38
 8006ccc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cce:	e0ca      	b.n	8006e66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da18      	bge.n	8006d08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006cd6:	1d3b      	adds	r3, r7, #4
 8006cd8:	3304      	adds	r3, #4
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	61fb      	str	r3, [r7, #28]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cfe:	6850      	ldr	r0, [r2, #4]
 8006d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d02:	6892      	ldr	r2, [r2, #8]
 8006d04:	4611      	mov	r1, r2
 8006d06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f2c0 80aa 	blt.w	8006e64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d004      	beq.n	8006d26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fe f9f5 	bl	8005110 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d26:	463b      	mov	r3, r7
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff ff6b 	bl	8006c04 <prvSampleTimeNow>
 8006d2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b09      	cmp	r3, #9
 8006d34:	f200 8097 	bhi.w	8006e66 <prvProcessReceivedCommands+0x19e>
 8006d38:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <prvProcessReceivedCommands+0x78>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006d69 	.word	0x08006d69
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d69 	.word	0x08006d69
 8006d4c:	08006ddd 	.word	0x08006ddd
 8006d50:	08006df1 	.word	0x08006df1
 8006d54:	08006e3b 	.word	0x08006e3b
 8006d58:	08006d69 	.word	0x08006d69
 8006d5c:	08006d69 	.word	0x08006d69
 8006d60:	08006ddd 	.word	0x08006ddd
 8006d64:	08006df1 	.word	0x08006df1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d6e:	f043 0301 	orr.w	r3, r3, #1
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	18d1      	adds	r1, r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d88:	f7ff ff5c 	bl	8006c44 <prvInsertTimerInActiveList>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d069      	beq.n	8006e66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d05e      	beq.n	8006e66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	441a      	add	r2, r3
 8006db0:	2300      	movs	r3, #0
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	2300      	movs	r3, #0
 8006db6:	2100      	movs	r1, #0
 8006db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dba:	f7ff fe05 	bl	80069c8 <xTimerGenericCommand>
 8006dbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d14f      	bne.n	8006e66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	61bb      	str	r3, [r7, #24]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006dee:	e03a      	b.n	8006e66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006df6:	f043 0301 	orr.w	r3, r3, #1
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	617b      	str	r3, [r7, #20]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	18d1      	adds	r1, r2, r3
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e34:	f7ff ff06 	bl	8006c44 <prvInsertTimerInActiveList>
					break;
 8006e38:	e015      	b.n	8006e66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d103      	bne.n	8006e50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4a:	f000 fbe1 	bl	8007610 <vPortFree>
 8006e4e:	e00a      	b.n	8006e66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e56:	f023 0301 	bic.w	r3, r3, #1
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e62:	e000      	b.n	8006e66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e66:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <prvProcessReceivedCommands+0x1c0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	1d39      	adds	r1, r7, #4
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe fc16 	bl	80056a0 <xQueueReceive>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f47f af2a 	bne.w	8006cd0 <prvProcessReceivedCommands+0x8>
	}
}
 8006e7c:	bf00      	nop
 8006e7e:	bf00      	nop
 8006e80:	3730      	adds	r7, #48	; 0x30
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000c94 	.word	0x20000c94

08006e8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e92:	e048      	b.n	8006f26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e94:	4b2d      	ldr	r3, [pc, #180]	; (8006f4c <prvSwitchTimerLists+0xc0>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e9e:	4b2b      	ldr	r3, [pc, #172]	; (8006f4c <prvSwitchTimerLists+0xc0>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fe f92f 	bl	8005110 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d02e      	beq.n	8006f26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4413      	add	r3, r2
 8006ed0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d90e      	bls.n	8006ef8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ee6:	4b19      	ldr	r3, [pc, #100]	; (8006f4c <prvSwitchTimerLists+0xc0>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f7fe f8d4 	bl	800509e <vListInsert>
 8006ef6:	e016      	b.n	8006f26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ef8:	2300      	movs	r3, #0
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	2300      	movs	r3, #0
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	2100      	movs	r1, #0
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff fd60 	bl	80069c8 <xTimerGenericCommand>
 8006f08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10a      	bne.n	8006f26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	603b      	str	r3, [r7, #0]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <prvSwitchTimerLists+0xc0>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1b1      	bne.n	8006e94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f30:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <prvSwitchTimerLists+0xc0>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f36:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <prvSwitchTimerLists+0xc4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a04      	ldr	r2, [pc, #16]	; (8006f4c <prvSwitchTimerLists+0xc0>)
 8006f3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f3e:	4a04      	ldr	r2, [pc, #16]	; (8006f50 <prvSwitchTimerLists+0xc4>)
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	6013      	str	r3, [r2, #0]
}
 8006f44:	bf00      	nop
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000c8c 	.word	0x20000c8c
 8006f50:	20000c90 	.word	0x20000c90

08006f54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f5a:	f000 f96b 	bl	8007234 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f5e:	4b15      	ldr	r3, [pc, #84]	; (8006fb4 <prvCheckForValidListAndQueue+0x60>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d120      	bne.n	8006fa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f66:	4814      	ldr	r0, [pc, #80]	; (8006fb8 <prvCheckForValidListAndQueue+0x64>)
 8006f68:	f7fe f848 	bl	8004ffc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f6c:	4813      	ldr	r0, [pc, #76]	; (8006fbc <prvCheckForValidListAndQueue+0x68>)
 8006f6e:	f7fe f845 	bl	8004ffc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f72:	4b13      	ldr	r3, [pc, #76]	; (8006fc0 <prvCheckForValidListAndQueue+0x6c>)
 8006f74:	4a10      	ldr	r2, [pc, #64]	; (8006fb8 <prvCheckForValidListAndQueue+0x64>)
 8006f76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f78:	4b12      	ldr	r3, [pc, #72]	; (8006fc4 <prvCheckForValidListAndQueue+0x70>)
 8006f7a:	4a10      	ldr	r2, [pc, #64]	; (8006fbc <prvCheckForValidListAndQueue+0x68>)
 8006f7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <prvCheckForValidListAndQueue+0x74>)
 8006f84:	4a11      	ldr	r2, [pc, #68]	; (8006fcc <prvCheckForValidListAndQueue+0x78>)
 8006f86:	2110      	movs	r1, #16
 8006f88:	200a      	movs	r0, #10
 8006f8a:	f7fe f953 	bl	8005234 <xQueueGenericCreateStatic>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4a08      	ldr	r2, [pc, #32]	; (8006fb4 <prvCheckForValidListAndQueue+0x60>)
 8006f92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f94:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <prvCheckForValidListAndQueue+0x60>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f9c:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <prvCheckForValidListAndQueue+0x60>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	490b      	ldr	r1, [pc, #44]	; (8006fd0 <prvCheckForValidListAndQueue+0x7c>)
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe fd6c 	bl	8005a80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fa8:	f000 f974 	bl	8007294 <vPortExitCritical>
}
 8006fac:	bf00      	nop
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000c94 	.word	0x20000c94
 8006fb8:	20000c64 	.word	0x20000c64
 8006fbc:	20000c78 	.word	0x20000c78
 8006fc0:	20000c8c 	.word	0x20000c8c
 8006fc4:	20000c90 	.word	0x20000c90
 8006fc8:	20000d40 	.word	0x20000d40
 8006fcc:	20000ca0 	.word	0x20000ca0
 8006fd0:	080088f8 	.word	0x080088f8

08006fd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3b04      	subs	r3, #4
 8006fe4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3b04      	subs	r3, #4
 8006ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f023 0201 	bic.w	r2, r3, #1
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3b04      	subs	r3, #4
 8007002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007004:	4a0c      	ldr	r2, [pc, #48]	; (8007038 <pxPortInitialiseStack+0x64>)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3b14      	subs	r3, #20
 800700e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3b04      	subs	r3, #4
 800701a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f06f 0202 	mvn.w	r2, #2
 8007022:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3b20      	subs	r3, #32
 8007028:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800702a:	68fb      	ldr	r3, [r7, #12]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	0800703d 	.word	0x0800703d

0800703c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007046:	4b12      	ldr	r3, [pc, #72]	; (8007090 <prvTaskExitError+0x54>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800704e:	d00a      	beq.n	8007066 <prvTaskExitError+0x2a>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	60fb      	str	r3, [r7, #12]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <prvTaskExitError+0x28>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	60bb      	str	r3, [r7, #8]
}
 8007078:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800707a:	bf00      	nop
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0fc      	beq.n	800707c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	2000000c 	.word	0x2000000c
	...

080070a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070a0:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <pxCurrentTCBConst2>)
 80070a2:	6819      	ldr	r1, [r3, #0]
 80070a4:	6808      	ldr	r0, [r1, #0]
 80070a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070aa:	f380 8809 	msr	PSP, r0
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f04f 0000 	mov.w	r0, #0
 80070b6:	f380 8811 	msr	BASEPRI, r0
 80070ba:	4770      	bx	lr
 80070bc:	f3af 8000 	nop.w

080070c0 <pxCurrentTCBConst2>:
 80070c0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop

080070c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070c8:	4808      	ldr	r0, [pc, #32]	; (80070ec <prvPortStartFirstTask+0x24>)
 80070ca:	6800      	ldr	r0, [r0, #0]
 80070cc:	6800      	ldr	r0, [r0, #0]
 80070ce:	f380 8808 	msr	MSP, r0
 80070d2:	f04f 0000 	mov.w	r0, #0
 80070d6:	f380 8814 	msr	CONTROL, r0
 80070da:	b662      	cpsie	i
 80070dc:	b661      	cpsie	f
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	df00      	svc	0
 80070e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ea:	bf00      	nop
 80070ec:	e000ed08 	.word	0xe000ed08

080070f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070f6:	4b46      	ldr	r3, [pc, #280]	; (8007210 <xPortStartScheduler+0x120>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a46      	ldr	r2, [pc, #280]	; (8007214 <xPortStartScheduler+0x124>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d10a      	bne.n	8007116 <xPortStartScheduler+0x26>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	613b      	str	r3, [r7, #16]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007116:	4b3e      	ldr	r3, [pc, #248]	; (8007210 <xPortStartScheduler+0x120>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3f      	ldr	r2, [pc, #252]	; (8007218 <xPortStartScheduler+0x128>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d10a      	bne.n	8007136 <xPortStartScheduler+0x46>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007136:	4b39      	ldr	r3, [pc, #228]	; (800721c <xPortStartScheduler+0x12c>)
 8007138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	22ff      	movs	r2, #255	; 0xff
 8007146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007158:	b2da      	uxtb	r2, r3
 800715a:	4b31      	ldr	r3, [pc, #196]	; (8007220 <xPortStartScheduler+0x130>)
 800715c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800715e:	4b31      	ldr	r3, [pc, #196]	; (8007224 <xPortStartScheduler+0x134>)
 8007160:	2207      	movs	r2, #7
 8007162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007164:	e009      	b.n	800717a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007166:	4b2f      	ldr	r3, [pc, #188]	; (8007224 <xPortStartScheduler+0x134>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3b01      	subs	r3, #1
 800716c:	4a2d      	ldr	r2, [pc, #180]	; (8007224 <xPortStartScheduler+0x134>)
 800716e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007170:	78fb      	ldrb	r3, [r7, #3]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800717a:	78fb      	ldrb	r3, [r7, #3]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007182:	2b80      	cmp	r3, #128	; 0x80
 8007184:	d0ef      	beq.n	8007166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007186:	4b27      	ldr	r3, [pc, #156]	; (8007224 <xPortStartScheduler+0x134>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f1c3 0307 	rsb	r3, r3, #7
 800718e:	2b04      	cmp	r3, #4
 8007190:	d00a      	beq.n	80071a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	60bb      	str	r3, [r7, #8]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071a8:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <xPortStartScheduler+0x134>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <xPortStartScheduler+0x134>)
 80071b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071b2:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <xPortStartScheduler+0x134>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071ba:	4a1a      	ldr	r2, [pc, #104]	; (8007224 <xPortStartScheduler+0x134>)
 80071bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071c6:	4b18      	ldr	r3, [pc, #96]	; (8007228 <xPortStartScheduler+0x138>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a17      	ldr	r2, [pc, #92]	; (8007228 <xPortStartScheduler+0x138>)
 80071cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071d2:	4b15      	ldr	r3, [pc, #84]	; (8007228 <xPortStartScheduler+0x138>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a14      	ldr	r2, [pc, #80]	; (8007228 <xPortStartScheduler+0x138>)
 80071d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071de:	f000 f8dd 	bl	800739c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <xPortStartScheduler+0x13c>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071e8:	f000 f8fc 	bl	80073e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071ec:	4b10      	ldr	r3, [pc, #64]	; (8007230 <xPortStartScheduler+0x140>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a0f      	ldr	r2, [pc, #60]	; (8007230 <xPortStartScheduler+0x140>)
 80071f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071f8:	f7ff ff66 	bl	80070c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071fc:	f7ff f850 	bl	80062a0 <vTaskSwitchContext>
	prvTaskExitError();
 8007200:	f7ff ff1c 	bl	800703c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	e000ed00 	.word	0xe000ed00
 8007214:	410fc271 	.word	0x410fc271
 8007218:	410fc270 	.word	0x410fc270
 800721c:	e000e400 	.word	0xe000e400
 8007220:	20000d90 	.word	0x20000d90
 8007224:	20000d94 	.word	0x20000d94
 8007228:	e000ed20 	.word	0xe000ed20
 800722c:	2000000c 	.word	0x2000000c
 8007230:	e000ef34 	.word	0xe000ef34

08007234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	607b      	str	r3, [r7, #4]
}
 800724c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800724e:	4b0f      	ldr	r3, [pc, #60]	; (800728c <vPortEnterCritical+0x58>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3301      	adds	r3, #1
 8007254:	4a0d      	ldr	r2, [pc, #52]	; (800728c <vPortEnterCritical+0x58>)
 8007256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <vPortEnterCritical+0x58>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d10f      	bne.n	8007280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <vPortEnterCritical+0x5c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <vPortEnterCritical+0x4c>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	603b      	str	r3, [r7, #0]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <vPortEnterCritical+0x4a>
	}
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	2000000c 	.word	0x2000000c
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <vPortExitCritical+0x50>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10a      	bne.n	80072b8 <vPortExitCritical+0x24>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	607b      	str	r3, [r7, #4]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <vPortExitCritical+0x50>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3b01      	subs	r3, #1
 80072be:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <vPortExitCritical+0x50>)
 80072c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072c2:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <vPortExitCritical+0x50>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <vPortExitCritical+0x42>
 80072ca:	2300      	movs	r3, #0
 80072cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	f383 8811 	msr	BASEPRI, r3
}
 80072d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	2000000c 	.word	0x2000000c
	...

080072f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072f0:	f3ef 8009 	mrs	r0, PSP
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	4b15      	ldr	r3, [pc, #84]	; (8007350 <pxCurrentTCBConst>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	f01e 0f10 	tst.w	lr, #16
 8007300:	bf08      	it	eq
 8007302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730a:	6010      	str	r0, [r2, #0]
 800730c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007314:	f380 8811 	msr	BASEPRI, r0
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f7fe ffbe 	bl	80062a0 <vTaskSwitchContext>
 8007324:	f04f 0000 	mov.w	r0, #0
 8007328:	f380 8811 	msr	BASEPRI, r0
 800732c:	bc09      	pop	{r0, r3}
 800732e:	6819      	ldr	r1, [r3, #0]
 8007330:	6808      	ldr	r0, [r1, #0]
 8007332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007336:	f01e 0f10 	tst.w	lr, #16
 800733a:	bf08      	it	eq
 800733c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007340:	f380 8809 	msr	PSP, r0
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	f3af 8000 	nop.w

08007350 <pxCurrentTCBConst>:
 8007350:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop

08007358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	607b      	str	r3, [r7, #4]
}
 8007370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007372:	f7fe fedb 	bl	800612c <xTaskIncrementTick>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800737c:	4b06      	ldr	r3, [pc, #24]	; (8007398 <xPortSysTickHandler+0x40>)
 800737e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	2300      	movs	r3, #0
 8007386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f383 8811 	msr	BASEPRI, r3
}
 800738e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <vPortSetupTimerInterrupt+0x34>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <vPortSetupTimerInterrupt+0x38>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <vPortSetupTimerInterrupt+0x3c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a0a      	ldr	r2, [pc, #40]	; (80073dc <vPortSetupTimerInterrupt+0x40>)
 80073b2:	fba2 2303 	umull	r2, r3, r2, r3
 80073b6:	099b      	lsrs	r3, r3, #6
 80073b8:	4a09      	ldr	r2, [pc, #36]	; (80073e0 <vPortSetupTimerInterrupt+0x44>)
 80073ba:	3b01      	subs	r3, #1
 80073bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073be:	4b04      	ldr	r3, [pc, #16]	; (80073d0 <vPortSetupTimerInterrupt+0x34>)
 80073c0:	2207      	movs	r2, #7
 80073c2:	601a      	str	r2, [r3, #0]
}
 80073c4:	bf00      	nop
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	e000e010 	.word	0xe000e010
 80073d4:	e000e018 	.word	0xe000e018
 80073d8:	20000000 	.word	0x20000000
 80073dc:	10624dd3 	.word	0x10624dd3
 80073e0:	e000e014 	.word	0xe000e014

080073e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073f4 <vPortEnableVFP+0x10>
 80073e8:	6801      	ldr	r1, [r0, #0]
 80073ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073ee:	6001      	str	r1, [r0, #0]
 80073f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073f2:	bf00      	nop
 80073f4:	e000ed88 	.word	0xe000ed88

080073f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073fe:	f3ef 8305 	mrs	r3, IPSR
 8007402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b0f      	cmp	r3, #15
 8007408:	d914      	bls.n	8007434 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800740a:	4a17      	ldr	r2, [pc, #92]	; (8007468 <vPortValidateInterruptPriority+0x70>)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007414:	4b15      	ldr	r3, [pc, #84]	; (800746c <vPortValidateInterruptPriority+0x74>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	7afa      	ldrb	r2, [r7, #11]
 800741a:	429a      	cmp	r2, r3
 800741c:	d20a      	bcs.n	8007434 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	607b      	str	r3, [r7, #4]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007434:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <vPortValidateInterruptPriority+0x78>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800743c:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <vPortValidateInterruptPriority+0x7c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d90a      	bls.n	800745a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	603b      	str	r3, [r7, #0]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <vPortValidateInterruptPriority+0x60>
	}
 800745a:	bf00      	nop
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	e000e3f0 	.word	0xe000e3f0
 800746c:	20000d90 	.word	0x20000d90
 8007470:	e000ed0c 	.word	0xe000ed0c
 8007474:	20000d94 	.word	0x20000d94

08007478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	; 0x28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007480:	2300      	movs	r3, #0
 8007482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007484:	f7fe fd96 	bl	8005fb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007488:	4b5b      	ldr	r3, [pc, #364]	; (80075f8 <pvPortMalloc+0x180>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007490:	f000 f920 	bl	80076d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007494:	4b59      	ldr	r3, [pc, #356]	; (80075fc <pvPortMalloc+0x184>)
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4013      	ands	r3, r2
 800749c:	2b00      	cmp	r3, #0
 800749e:	f040 8093 	bne.w	80075c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d01d      	beq.n	80074e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80074a8:	2208      	movs	r2, #8
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4413      	add	r3, r2
 80074ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d014      	beq.n	80074e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f023 0307 	bic.w	r3, r3, #7
 80074c0:	3308      	adds	r3, #8
 80074c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <pvPortMalloc+0x6c>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	617b      	str	r3, [r7, #20]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d06e      	beq.n	80075c8 <pvPortMalloc+0x150>
 80074ea:	4b45      	ldr	r3, [pc, #276]	; (8007600 <pvPortMalloc+0x188>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d869      	bhi.n	80075c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074f4:	4b43      	ldr	r3, [pc, #268]	; (8007604 <pvPortMalloc+0x18c>)
 80074f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074f8:	4b42      	ldr	r3, [pc, #264]	; (8007604 <pvPortMalloc+0x18c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074fe:	e004      	b.n	800750a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	d903      	bls.n	800751c <pvPortMalloc+0xa4>
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f1      	bne.n	8007500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800751c:	4b36      	ldr	r3, [pc, #216]	; (80075f8 <pvPortMalloc+0x180>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007522:	429a      	cmp	r2, r3
 8007524:	d050      	beq.n	80075c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2208      	movs	r2, #8
 800752c:	4413      	add	r3, r2
 800752e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	1ad2      	subs	r2, r2, r3
 8007540:	2308      	movs	r3, #8
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	429a      	cmp	r2, r3
 8007546:	d91f      	bls.n	8007588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4413      	add	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <pvPortMalloc+0xf8>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	613b      	str	r3, [r7, #16]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	1ad2      	subs	r2, r2, r3
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007582:	69b8      	ldr	r0, [r7, #24]
 8007584:	f000 f908 	bl	8007798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007588:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <pvPortMalloc+0x188>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	4a1b      	ldr	r2, [pc, #108]	; (8007600 <pvPortMalloc+0x188>)
 8007594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007596:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <pvPortMalloc+0x188>)
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <pvPortMalloc+0x190>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d203      	bcs.n	80075aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075a2:	4b17      	ldr	r3, [pc, #92]	; (8007600 <pvPortMalloc+0x188>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a18      	ldr	r2, [pc, #96]	; (8007608 <pvPortMalloc+0x190>)
 80075a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	4b13      	ldr	r3, [pc, #76]	; (80075fc <pvPortMalloc+0x184>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80075be:	4b13      	ldr	r3, [pc, #76]	; (800760c <pvPortMalloc+0x194>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	4a11      	ldr	r2, [pc, #68]	; (800760c <pvPortMalloc+0x194>)
 80075c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075c8:	f7fe fd02 	bl	8005fd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <pvPortMalloc+0x174>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	60fb      	str	r3, [r7, #12]
}
 80075e8:	bf00      	nop
 80075ea:	e7fe      	b.n	80075ea <pvPortMalloc+0x172>
	return pvReturn;
 80075ec:	69fb      	ldr	r3, [r7, #28]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3728      	adds	r7, #40	; 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20001958 	.word	0x20001958
 80075fc:	2000196c 	.word	0x2000196c
 8007600:	2000195c 	.word	0x2000195c
 8007604:	20001950 	.word	0x20001950
 8007608:	20001960 	.word	0x20001960
 800760c:	20001964 	.word	0x20001964

08007610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d04d      	beq.n	80076be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007622:	2308      	movs	r3, #8
 8007624:	425b      	negs	r3, r3
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	4413      	add	r3, r2
 800762a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	4b24      	ldr	r3, [pc, #144]	; (80076c8 <vPortFree+0xb8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4013      	ands	r3, r2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <vPortFree+0x44>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	60fb      	str	r3, [r7, #12]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00a      	beq.n	8007672 <vPortFree+0x62>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	60bb      	str	r3, [r7, #8]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	4b14      	ldr	r3, [pc, #80]	; (80076c8 <vPortFree+0xb8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4013      	ands	r3, r2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01e      	beq.n	80076be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11a      	bne.n	80076be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <vPortFree+0xb8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	43db      	mvns	r3, r3
 8007692:	401a      	ands	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007698:	f7fe fc8c 	bl	8005fb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <vPortFree+0xbc>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4413      	add	r3, r2
 80076a6:	4a09      	ldr	r2, [pc, #36]	; (80076cc <vPortFree+0xbc>)
 80076a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076aa:	6938      	ldr	r0, [r7, #16]
 80076ac:	f000 f874 	bl	8007798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076b0:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <vPortFree+0xc0>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3301      	adds	r3, #1
 80076b6:	4a06      	ldr	r2, [pc, #24]	; (80076d0 <vPortFree+0xc0>)
 80076b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80076ba:	f7fe fc89 	bl	8005fd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076be:	bf00      	nop
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	2000196c 	.word	0x2000196c
 80076cc:	2000195c 	.word	0x2000195c
 80076d0:	20001968 	.word	0x20001968

080076d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80076de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076e0:	4b27      	ldr	r3, [pc, #156]	; (8007780 <prvHeapInit+0xac>)
 80076e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00c      	beq.n	8007708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3307      	adds	r3, #7
 80076f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0307 	bic.w	r3, r3, #7
 80076fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	4a1f      	ldr	r2, [pc, #124]	; (8007780 <prvHeapInit+0xac>)
 8007704:	4413      	add	r3, r2
 8007706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800770c:	4a1d      	ldr	r2, [pc, #116]	; (8007784 <prvHeapInit+0xb0>)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007712:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <prvHeapInit+0xb0>)
 8007714:	2200      	movs	r2, #0
 8007716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007720:	2208      	movs	r2, #8
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0307 	bic.w	r3, r3, #7
 800772e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4a15      	ldr	r2, [pc, #84]	; (8007788 <prvHeapInit+0xb4>)
 8007734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007736:	4b14      	ldr	r3, [pc, #80]	; (8007788 <prvHeapInit+0xb4>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2200      	movs	r2, #0
 800773c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800773e:	4b12      	ldr	r3, [pc, #72]	; (8007788 <prvHeapInit+0xb4>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007754:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <prvHeapInit+0xb4>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	4a0a      	ldr	r2, [pc, #40]	; (800778c <prvHeapInit+0xb8>)
 8007762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	4a09      	ldr	r2, [pc, #36]	; (8007790 <prvHeapInit+0xbc>)
 800776a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800776c:	4b09      	ldr	r3, [pc, #36]	; (8007794 <prvHeapInit+0xc0>)
 800776e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007772:	601a      	str	r2, [r3, #0]
}
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	20000d98 	.word	0x20000d98
 8007784:	20001950 	.word	0x20001950
 8007788:	20001958 	.word	0x20001958
 800778c:	20001960 	.word	0x20001960
 8007790:	2000195c 	.word	0x2000195c
 8007794:	2000196c 	.word	0x2000196c

08007798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077a0:	4b28      	ldr	r3, [pc, #160]	; (8007844 <prvInsertBlockIntoFreeList+0xac>)
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e002      	b.n	80077ac <prvInsertBlockIntoFreeList+0x14>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d8f7      	bhi.n	80077a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	4413      	add	r3, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d108      	bne.n	80077da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	441a      	add	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	441a      	add	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d118      	bne.n	8007820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	4b15      	ldr	r3, [pc, #84]	; (8007848 <prvInsertBlockIntoFreeList+0xb0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d00d      	beq.n	8007816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	441a      	add	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	e008      	b.n	8007828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007816:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <prvInsertBlockIntoFreeList+0xb0>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	e003      	b.n	8007828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	429a      	cmp	r2, r3
 800782e:	d002      	beq.n	8007836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	20001950 	.word	0x20001950
 8007848:	20001958 	.word	0x20001958

0800784c <__errno>:
 800784c:	4b01      	ldr	r3, [pc, #4]	; (8007854 <__errno+0x8>)
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20000010 	.word	0x20000010

08007858 <__libc_init_array>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	4d0d      	ldr	r5, [pc, #52]	; (8007890 <__libc_init_array+0x38>)
 800785c:	4c0d      	ldr	r4, [pc, #52]	; (8007894 <__libc_init_array+0x3c>)
 800785e:	1b64      	subs	r4, r4, r5
 8007860:	10a4      	asrs	r4, r4, #2
 8007862:	2600      	movs	r6, #0
 8007864:	42a6      	cmp	r6, r4
 8007866:	d109      	bne.n	800787c <__libc_init_array+0x24>
 8007868:	4d0b      	ldr	r5, [pc, #44]	; (8007898 <__libc_init_array+0x40>)
 800786a:	4c0c      	ldr	r4, [pc, #48]	; (800789c <__libc_init_array+0x44>)
 800786c:	f000 fffa 	bl	8008864 <_init>
 8007870:	1b64      	subs	r4, r4, r5
 8007872:	10a4      	asrs	r4, r4, #2
 8007874:	2600      	movs	r6, #0
 8007876:	42a6      	cmp	r6, r4
 8007878:	d105      	bne.n	8007886 <__libc_init_array+0x2e>
 800787a:	bd70      	pop	{r4, r5, r6, pc}
 800787c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007880:	4798      	blx	r3
 8007882:	3601      	adds	r6, #1
 8007884:	e7ee      	b.n	8007864 <__libc_init_array+0xc>
 8007886:	f855 3b04 	ldr.w	r3, [r5], #4
 800788a:	4798      	blx	r3
 800788c:	3601      	adds	r6, #1
 800788e:	e7f2      	b.n	8007876 <__libc_init_array+0x1e>
 8007890:	08008a0c 	.word	0x08008a0c
 8007894:	08008a0c 	.word	0x08008a0c
 8007898:	08008a0c 	.word	0x08008a0c
 800789c:	08008a10 	.word	0x08008a10

080078a0 <memcpy>:
 80078a0:	440a      	add	r2, r1
 80078a2:	4291      	cmp	r1, r2
 80078a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078a8:	d100      	bne.n	80078ac <memcpy+0xc>
 80078aa:	4770      	bx	lr
 80078ac:	b510      	push	{r4, lr}
 80078ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078b6:	4291      	cmp	r1, r2
 80078b8:	d1f9      	bne.n	80078ae <memcpy+0xe>
 80078ba:	bd10      	pop	{r4, pc}

080078bc <memset>:
 80078bc:	4402      	add	r2, r0
 80078be:	4603      	mov	r3, r0
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d100      	bne.n	80078c6 <memset+0xa>
 80078c4:	4770      	bx	lr
 80078c6:	f803 1b01 	strb.w	r1, [r3], #1
 80078ca:	e7f9      	b.n	80078c0 <memset+0x4>

080078cc <iprintf>:
 80078cc:	b40f      	push	{r0, r1, r2, r3}
 80078ce:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <iprintf+0x2c>)
 80078d0:	b513      	push	{r0, r1, r4, lr}
 80078d2:	681c      	ldr	r4, [r3, #0]
 80078d4:	b124      	cbz	r4, 80078e0 <iprintf+0x14>
 80078d6:	69a3      	ldr	r3, [r4, #24]
 80078d8:	b913      	cbnz	r3, 80078e0 <iprintf+0x14>
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 fa5e 	bl	8007d9c <__sinit>
 80078e0:	ab05      	add	r3, sp, #20
 80078e2:	9a04      	ldr	r2, [sp, #16]
 80078e4:	68a1      	ldr	r1, [r4, #8]
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 fc2f 	bl	800814c <_vfiprintf_r>
 80078ee:	b002      	add	sp, #8
 80078f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078f4:	b004      	add	sp, #16
 80078f6:	4770      	bx	lr
 80078f8:	20000010 	.word	0x20000010

080078fc <_puts_r>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	460e      	mov	r6, r1
 8007900:	4605      	mov	r5, r0
 8007902:	b118      	cbz	r0, 800790c <_puts_r+0x10>
 8007904:	6983      	ldr	r3, [r0, #24]
 8007906:	b90b      	cbnz	r3, 800790c <_puts_r+0x10>
 8007908:	f000 fa48 	bl	8007d9c <__sinit>
 800790c:	69ab      	ldr	r3, [r5, #24]
 800790e:	68ac      	ldr	r4, [r5, #8]
 8007910:	b913      	cbnz	r3, 8007918 <_puts_r+0x1c>
 8007912:	4628      	mov	r0, r5
 8007914:	f000 fa42 	bl	8007d9c <__sinit>
 8007918:	4b2c      	ldr	r3, [pc, #176]	; (80079cc <_puts_r+0xd0>)
 800791a:	429c      	cmp	r4, r3
 800791c:	d120      	bne.n	8007960 <_puts_r+0x64>
 800791e:	686c      	ldr	r4, [r5, #4]
 8007920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007922:	07db      	lsls	r3, r3, #31
 8007924:	d405      	bmi.n	8007932 <_puts_r+0x36>
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	0598      	lsls	r0, r3, #22
 800792a:	d402      	bmi.n	8007932 <_puts_r+0x36>
 800792c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800792e:	f000 fad3 	bl	8007ed8 <__retarget_lock_acquire_recursive>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	0719      	lsls	r1, r3, #28
 8007936:	d51d      	bpl.n	8007974 <_puts_r+0x78>
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	b1db      	cbz	r3, 8007974 <_puts_r+0x78>
 800793c:	3e01      	subs	r6, #1
 800793e:	68a3      	ldr	r3, [r4, #8]
 8007940:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007944:	3b01      	subs	r3, #1
 8007946:	60a3      	str	r3, [r4, #8]
 8007948:	bb39      	cbnz	r1, 800799a <_puts_r+0x9e>
 800794a:	2b00      	cmp	r3, #0
 800794c:	da38      	bge.n	80079c0 <_puts_r+0xc4>
 800794e:	4622      	mov	r2, r4
 8007950:	210a      	movs	r1, #10
 8007952:	4628      	mov	r0, r5
 8007954:	f000 f848 	bl	80079e8 <__swbuf_r>
 8007958:	3001      	adds	r0, #1
 800795a:	d011      	beq.n	8007980 <_puts_r+0x84>
 800795c:	250a      	movs	r5, #10
 800795e:	e011      	b.n	8007984 <_puts_r+0x88>
 8007960:	4b1b      	ldr	r3, [pc, #108]	; (80079d0 <_puts_r+0xd4>)
 8007962:	429c      	cmp	r4, r3
 8007964:	d101      	bne.n	800796a <_puts_r+0x6e>
 8007966:	68ac      	ldr	r4, [r5, #8]
 8007968:	e7da      	b.n	8007920 <_puts_r+0x24>
 800796a:	4b1a      	ldr	r3, [pc, #104]	; (80079d4 <_puts_r+0xd8>)
 800796c:	429c      	cmp	r4, r3
 800796e:	bf08      	it	eq
 8007970:	68ec      	ldreq	r4, [r5, #12]
 8007972:	e7d5      	b.n	8007920 <_puts_r+0x24>
 8007974:	4621      	mov	r1, r4
 8007976:	4628      	mov	r0, r5
 8007978:	f000 f888 	bl	8007a8c <__swsetup_r>
 800797c:	2800      	cmp	r0, #0
 800797e:	d0dd      	beq.n	800793c <_puts_r+0x40>
 8007980:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007986:	07da      	lsls	r2, r3, #31
 8007988:	d405      	bmi.n	8007996 <_puts_r+0x9a>
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	059b      	lsls	r3, r3, #22
 800798e:	d402      	bmi.n	8007996 <_puts_r+0x9a>
 8007990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007992:	f000 faa2 	bl	8007eda <__retarget_lock_release_recursive>
 8007996:	4628      	mov	r0, r5
 8007998:	bd70      	pop	{r4, r5, r6, pc}
 800799a:	2b00      	cmp	r3, #0
 800799c:	da04      	bge.n	80079a8 <_puts_r+0xac>
 800799e:	69a2      	ldr	r2, [r4, #24]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	dc06      	bgt.n	80079b2 <_puts_r+0xb6>
 80079a4:	290a      	cmp	r1, #10
 80079a6:	d004      	beq.n	80079b2 <_puts_r+0xb6>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	6022      	str	r2, [r4, #0]
 80079ae:	7019      	strb	r1, [r3, #0]
 80079b0:	e7c5      	b.n	800793e <_puts_r+0x42>
 80079b2:	4622      	mov	r2, r4
 80079b4:	4628      	mov	r0, r5
 80079b6:	f000 f817 	bl	80079e8 <__swbuf_r>
 80079ba:	3001      	adds	r0, #1
 80079bc:	d1bf      	bne.n	800793e <_puts_r+0x42>
 80079be:	e7df      	b.n	8007980 <_puts_r+0x84>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	250a      	movs	r5, #10
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	6022      	str	r2, [r4, #0]
 80079c8:	701d      	strb	r5, [r3, #0]
 80079ca:	e7db      	b.n	8007984 <_puts_r+0x88>
 80079cc:	08008990 	.word	0x08008990
 80079d0:	080089b0 	.word	0x080089b0
 80079d4:	08008970 	.word	0x08008970

080079d8 <puts>:
 80079d8:	4b02      	ldr	r3, [pc, #8]	; (80079e4 <puts+0xc>)
 80079da:	4601      	mov	r1, r0
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	f7ff bf8d 	b.w	80078fc <_puts_r>
 80079e2:	bf00      	nop
 80079e4:	20000010 	.word	0x20000010

080079e8 <__swbuf_r>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	460e      	mov	r6, r1
 80079ec:	4614      	mov	r4, r2
 80079ee:	4605      	mov	r5, r0
 80079f0:	b118      	cbz	r0, 80079fa <__swbuf_r+0x12>
 80079f2:	6983      	ldr	r3, [r0, #24]
 80079f4:	b90b      	cbnz	r3, 80079fa <__swbuf_r+0x12>
 80079f6:	f000 f9d1 	bl	8007d9c <__sinit>
 80079fa:	4b21      	ldr	r3, [pc, #132]	; (8007a80 <__swbuf_r+0x98>)
 80079fc:	429c      	cmp	r4, r3
 80079fe:	d12b      	bne.n	8007a58 <__swbuf_r+0x70>
 8007a00:	686c      	ldr	r4, [r5, #4]
 8007a02:	69a3      	ldr	r3, [r4, #24]
 8007a04:	60a3      	str	r3, [r4, #8]
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	071a      	lsls	r2, r3, #28
 8007a0a:	d52f      	bpl.n	8007a6c <__swbuf_r+0x84>
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	b36b      	cbz	r3, 8007a6c <__swbuf_r+0x84>
 8007a10:	6923      	ldr	r3, [r4, #16]
 8007a12:	6820      	ldr	r0, [r4, #0]
 8007a14:	1ac0      	subs	r0, r0, r3
 8007a16:	6963      	ldr	r3, [r4, #20]
 8007a18:	b2f6      	uxtb	r6, r6
 8007a1a:	4283      	cmp	r3, r0
 8007a1c:	4637      	mov	r7, r6
 8007a1e:	dc04      	bgt.n	8007a2a <__swbuf_r+0x42>
 8007a20:	4621      	mov	r1, r4
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 f926 	bl	8007c74 <_fflush_r>
 8007a28:	bb30      	cbnz	r0, 8007a78 <__swbuf_r+0x90>
 8007a2a:	68a3      	ldr	r3, [r4, #8]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	60a3      	str	r3, [r4, #8]
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	6022      	str	r2, [r4, #0]
 8007a36:	701e      	strb	r6, [r3, #0]
 8007a38:	6963      	ldr	r3, [r4, #20]
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	4283      	cmp	r3, r0
 8007a3e:	d004      	beq.n	8007a4a <__swbuf_r+0x62>
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	07db      	lsls	r3, r3, #31
 8007a44:	d506      	bpl.n	8007a54 <__swbuf_r+0x6c>
 8007a46:	2e0a      	cmp	r6, #10
 8007a48:	d104      	bne.n	8007a54 <__swbuf_r+0x6c>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f000 f911 	bl	8007c74 <_fflush_r>
 8007a52:	b988      	cbnz	r0, 8007a78 <__swbuf_r+0x90>
 8007a54:	4638      	mov	r0, r7
 8007a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a58:	4b0a      	ldr	r3, [pc, #40]	; (8007a84 <__swbuf_r+0x9c>)
 8007a5a:	429c      	cmp	r4, r3
 8007a5c:	d101      	bne.n	8007a62 <__swbuf_r+0x7a>
 8007a5e:	68ac      	ldr	r4, [r5, #8]
 8007a60:	e7cf      	b.n	8007a02 <__swbuf_r+0x1a>
 8007a62:	4b09      	ldr	r3, [pc, #36]	; (8007a88 <__swbuf_r+0xa0>)
 8007a64:	429c      	cmp	r4, r3
 8007a66:	bf08      	it	eq
 8007a68:	68ec      	ldreq	r4, [r5, #12]
 8007a6a:	e7ca      	b.n	8007a02 <__swbuf_r+0x1a>
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f000 f80c 	bl	8007a8c <__swsetup_r>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d0cb      	beq.n	8007a10 <__swbuf_r+0x28>
 8007a78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a7c:	e7ea      	b.n	8007a54 <__swbuf_r+0x6c>
 8007a7e:	bf00      	nop
 8007a80:	08008990 	.word	0x08008990
 8007a84:	080089b0 	.word	0x080089b0
 8007a88:	08008970 	.word	0x08008970

08007a8c <__swsetup_r>:
 8007a8c:	4b32      	ldr	r3, [pc, #200]	; (8007b58 <__swsetup_r+0xcc>)
 8007a8e:	b570      	push	{r4, r5, r6, lr}
 8007a90:	681d      	ldr	r5, [r3, #0]
 8007a92:	4606      	mov	r6, r0
 8007a94:	460c      	mov	r4, r1
 8007a96:	b125      	cbz	r5, 8007aa2 <__swsetup_r+0x16>
 8007a98:	69ab      	ldr	r3, [r5, #24]
 8007a9a:	b913      	cbnz	r3, 8007aa2 <__swsetup_r+0x16>
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f000 f97d 	bl	8007d9c <__sinit>
 8007aa2:	4b2e      	ldr	r3, [pc, #184]	; (8007b5c <__swsetup_r+0xd0>)
 8007aa4:	429c      	cmp	r4, r3
 8007aa6:	d10f      	bne.n	8007ac8 <__swsetup_r+0x3c>
 8007aa8:	686c      	ldr	r4, [r5, #4]
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ab0:	0719      	lsls	r1, r3, #28
 8007ab2:	d42c      	bmi.n	8007b0e <__swsetup_r+0x82>
 8007ab4:	06dd      	lsls	r5, r3, #27
 8007ab6:	d411      	bmi.n	8007adc <__swsetup_r+0x50>
 8007ab8:	2309      	movs	r3, #9
 8007aba:	6033      	str	r3, [r6, #0]
 8007abc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ac6:	e03e      	b.n	8007b46 <__swsetup_r+0xba>
 8007ac8:	4b25      	ldr	r3, [pc, #148]	; (8007b60 <__swsetup_r+0xd4>)
 8007aca:	429c      	cmp	r4, r3
 8007acc:	d101      	bne.n	8007ad2 <__swsetup_r+0x46>
 8007ace:	68ac      	ldr	r4, [r5, #8]
 8007ad0:	e7eb      	b.n	8007aaa <__swsetup_r+0x1e>
 8007ad2:	4b24      	ldr	r3, [pc, #144]	; (8007b64 <__swsetup_r+0xd8>)
 8007ad4:	429c      	cmp	r4, r3
 8007ad6:	bf08      	it	eq
 8007ad8:	68ec      	ldreq	r4, [r5, #12]
 8007ada:	e7e6      	b.n	8007aaa <__swsetup_r+0x1e>
 8007adc:	0758      	lsls	r0, r3, #29
 8007ade:	d512      	bpl.n	8007b06 <__swsetup_r+0x7a>
 8007ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ae2:	b141      	cbz	r1, 8007af6 <__swsetup_r+0x6a>
 8007ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae8:	4299      	cmp	r1, r3
 8007aea:	d002      	beq.n	8007af2 <__swsetup_r+0x66>
 8007aec:	4630      	mov	r0, r6
 8007aee:	f000 fa59 	bl	8007fa4 <_free_r>
 8007af2:	2300      	movs	r3, #0
 8007af4:	6363      	str	r3, [r4, #52]	; 0x34
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	2300      	movs	r3, #0
 8007b00:	6063      	str	r3, [r4, #4]
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	f043 0308 	orr.w	r3, r3, #8
 8007b0c:	81a3      	strh	r3, [r4, #12]
 8007b0e:	6923      	ldr	r3, [r4, #16]
 8007b10:	b94b      	cbnz	r3, 8007b26 <__swsetup_r+0x9a>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b1c:	d003      	beq.n	8007b26 <__swsetup_r+0x9a>
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4630      	mov	r0, r6
 8007b22:	f000 f9ff 	bl	8007f24 <__smakebuf_r>
 8007b26:	89a0      	ldrh	r0, [r4, #12]
 8007b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b2c:	f010 0301 	ands.w	r3, r0, #1
 8007b30:	d00a      	beq.n	8007b48 <__swsetup_r+0xbc>
 8007b32:	2300      	movs	r3, #0
 8007b34:	60a3      	str	r3, [r4, #8]
 8007b36:	6963      	ldr	r3, [r4, #20]
 8007b38:	425b      	negs	r3, r3
 8007b3a:	61a3      	str	r3, [r4, #24]
 8007b3c:	6923      	ldr	r3, [r4, #16]
 8007b3e:	b943      	cbnz	r3, 8007b52 <__swsetup_r+0xc6>
 8007b40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b44:	d1ba      	bne.n	8007abc <__swsetup_r+0x30>
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	0781      	lsls	r1, r0, #30
 8007b4a:	bf58      	it	pl
 8007b4c:	6963      	ldrpl	r3, [r4, #20]
 8007b4e:	60a3      	str	r3, [r4, #8]
 8007b50:	e7f4      	b.n	8007b3c <__swsetup_r+0xb0>
 8007b52:	2000      	movs	r0, #0
 8007b54:	e7f7      	b.n	8007b46 <__swsetup_r+0xba>
 8007b56:	bf00      	nop
 8007b58:	20000010 	.word	0x20000010
 8007b5c:	08008990 	.word	0x08008990
 8007b60:	080089b0 	.word	0x080089b0
 8007b64:	08008970 	.word	0x08008970

08007b68 <__sflush_r>:
 8007b68:	898a      	ldrh	r2, [r1, #12]
 8007b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6e:	4605      	mov	r5, r0
 8007b70:	0710      	lsls	r0, r2, #28
 8007b72:	460c      	mov	r4, r1
 8007b74:	d458      	bmi.n	8007c28 <__sflush_r+0xc0>
 8007b76:	684b      	ldr	r3, [r1, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	dc05      	bgt.n	8007b88 <__sflush_r+0x20>
 8007b7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	dc02      	bgt.n	8007b88 <__sflush_r+0x20>
 8007b82:	2000      	movs	r0, #0
 8007b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b8a:	2e00      	cmp	r6, #0
 8007b8c:	d0f9      	beq.n	8007b82 <__sflush_r+0x1a>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b94:	682f      	ldr	r7, [r5, #0]
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	d032      	beq.n	8007c00 <__sflush_r+0x98>
 8007b9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	075a      	lsls	r2, r3, #29
 8007ba0:	d505      	bpl.n	8007bae <__sflush_r+0x46>
 8007ba2:	6863      	ldr	r3, [r4, #4]
 8007ba4:	1ac0      	subs	r0, r0, r3
 8007ba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ba8:	b10b      	cbz	r3, 8007bae <__sflush_r+0x46>
 8007baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bac:	1ac0      	subs	r0, r0, r3
 8007bae:	2300      	movs	r3, #0
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bb4:	6a21      	ldr	r1, [r4, #32]
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b0      	blx	r6
 8007bba:	1c43      	adds	r3, r0, #1
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	d106      	bne.n	8007bce <__sflush_r+0x66>
 8007bc0:	6829      	ldr	r1, [r5, #0]
 8007bc2:	291d      	cmp	r1, #29
 8007bc4:	d82c      	bhi.n	8007c20 <__sflush_r+0xb8>
 8007bc6:	4a2a      	ldr	r2, [pc, #168]	; (8007c70 <__sflush_r+0x108>)
 8007bc8:	40ca      	lsrs	r2, r1
 8007bca:	07d6      	lsls	r6, r2, #31
 8007bcc:	d528      	bpl.n	8007c20 <__sflush_r+0xb8>
 8007bce:	2200      	movs	r2, #0
 8007bd0:	6062      	str	r2, [r4, #4]
 8007bd2:	04d9      	lsls	r1, r3, #19
 8007bd4:	6922      	ldr	r2, [r4, #16]
 8007bd6:	6022      	str	r2, [r4, #0]
 8007bd8:	d504      	bpl.n	8007be4 <__sflush_r+0x7c>
 8007bda:	1c42      	adds	r2, r0, #1
 8007bdc:	d101      	bne.n	8007be2 <__sflush_r+0x7a>
 8007bde:	682b      	ldr	r3, [r5, #0]
 8007be0:	b903      	cbnz	r3, 8007be4 <__sflush_r+0x7c>
 8007be2:	6560      	str	r0, [r4, #84]	; 0x54
 8007be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007be6:	602f      	str	r7, [r5, #0]
 8007be8:	2900      	cmp	r1, #0
 8007bea:	d0ca      	beq.n	8007b82 <__sflush_r+0x1a>
 8007bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	d002      	beq.n	8007bfa <__sflush_r+0x92>
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f000 f9d5 	bl	8007fa4 <_free_r>
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	6360      	str	r0, [r4, #52]	; 0x34
 8007bfe:	e7c1      	b.n	8007b84 <__sflush_r+0x1c>
 8007c00:	6a21      	ldr	r1, [r4, #32]
 8007c02:	2301      	movs	r3, #1
 8007c04:	4628      	mov	r0, r5
 8007c06:	47b0      	blx	r6
 8007c08:	1c41      	adds	r1, r0, #1
 8007c0a:	d1c7      	bne.n	8007b9c <__sflush_r+0x34>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0c4      	beq.n	8007b9c <__sflush_r+0x34>
 8007c12:	2b1d      	cmp	r3, #29
 8007c14:	d001      	beq.n	8007c1a <__sflush_r+0xb2>
 8007c16:	2b16      	cmp	r3, #22
 8007c18:	d101      	bne.n	8007c1e <__sflush_r+0xb6>
 8007c1a:	602f      	str	r7, [r5, #0]
 8007c1c:	e7b1      	b.n	8007b82 <__sflush_r+0x1a>
 8007c1e:	89a3      	ldrh	r3, [r4, #12]
 8007c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	e7ad      	b.n	8007b84 <__sflush_r+0x1c>
 8007c28:	690f      	ldr	r7, [r1, #16]
 8007c2a:	2f00      	cmp	r7, #0
 8007c2c:	d0a9      	beq.n	8007b82 <__sflush_r+0x1a>
 8007c2e:	0793      	lsls	r3, r2, #30
 8007c30:	680e      	ldr	r6, [r1, #0]
 8007c32:	bf08      	it	eq
 8007c34:	694b      	ldreq	r3, [r1, #20]
 8007c36:	600f      	str	r7, [r1, #0]
 8007c38:	bf18      	it	ne
 8007c3a:	2300      	movne	r3, #0
 8007c3c:	eba6 0807 	sub.w	r8, r6, r7
 8007c40:	608b      	str	r3, [r1, #8]
 8007c42:	f1b8 0f00 	cmp.w	r8, #0
 8007c46:	dd9c      	ble.n	8007b82 <__sflush_r+0x1a>
 8007c48:	6a21      	ldr	r1, [r4, #32]
 8007c4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c4c:	4643      	mov	r3, r8
 8007c4e:	463a      	mov	r2, r7
 8007c50:	4628      	mov	r0, r5
 8007c52:	47b0      	blx	r6
 8007c54:	2800      	cmp	r0, #0
 8007c56:	dc06      	bgt.n	8007c66 <__sflush_r+0xfe>
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c5e:	81a3      	strh	r3, [r4, #12]
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c64:	e78e      	b.n	8007b84 <__sflush_r+0x1c>
 8007c66:	4407      	add	r7, r0
 8007c68:	eba8 0800 	sub.w	r8, r8, r0
 8007c6c:	e7e9      	b.n	8007c42 <__sflush_r+0xda>
 8007c6e:	bf00      	nop
 8007c70:	20400001 	.word	0x20400001

08007c74 <_fflush_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	690b      	ldr	r3, [r1, #16]
 8007c78:	4605      	mov	r5, r0
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	b913      	cbnz	r3, 8007c84 <_fflush_r+0x10>
 8007c7e:	2500      	movs	r5, #0
 8007c80:	4628      	mov	r0, r5
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	b118      	cbz	r0, 8007c8e <_fflush_r+0x1a>
 8007c86:	6983      	ldr	r3, [r0, #24]
 8007c88:	b90b      	cbnz	r3, 8007c8e <_fflush_r+0x1a>
 8007c8a:	f000 f887 	bl	8007d9c <__sinit>
 8007c8e:	4b14      	ldr	r3, [pc, #80]	; (8007ce0 <_fflush_r+0x6c>)
 8007c90:	429c      	cmp	r4, r3
 8007c92:	d11b      	bne.n	8007ccc <_fflush_r+0x58>
 8007c94:	686c      	ldr	r4, [r5, #4]
 8007c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0ef      	beq.n	8007c7e <_fflush_r+0xa>
 8007c9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ca0:	07d0      	lsls	r0, r2, #31
 8007ca2:	d404      	bmi.n	8007cae <_fflush_r+0x3a>
 8007ca4:	0599      	lsls	r1, r3, #22
 8007ca6:	d402      	bmi.n	8007cae <_fflush_r+0x3a>
 8007ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007caa:	f000 f915 	bl	8007ed8 <__retarget_lock_acquire_recursive>
 8007cae:	4628      	mov	r0, r5
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	f7ff ff59 	bl	8007b68 <__sflush_r>
 8007cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cb8:	07da      	lsls	r2, r3, #31
 8007cba:	4605      	mov	r5, r0
 8007cbc:	d4e0      	bmi.n	8007c80 <_fflush_r+0xc>
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	059b      	lsls	r3, r3, #22
 8007cc2:	d4dd      	bmi.n	8007c80 <_fflush_r+0xc>
 8007cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cc6:	f000 f908 	bl	8007eda <__retarget_lock_release_recursive>
 8007cca:	e7d9      	b.n	8007c80 <_fflush_r+0xc>
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <_fflush_r+0x70>)
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	d101      	bne.n	8007cd6 <_fflush_r+0x62>
 8007cd2:	68ac      	ldr	r4, [r5, #8]
 8007cd4:	e7df      	b.n	8007c96 <_fflush_r+0x22>
 8007cd6:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <_fflush_r+0x74>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	bf08      	it	eq
 8007cdc:	68ec      	ldreq	r4, [r5, #12]
 8007cde:	e7da      	b.n	8007c96 <_fflush_r+0x22>
 8007ce0:	08008990 	.word	0x08008990
 8007ce4:	080089b0 	.word	0x080089b0
 8007ce8:	08008970 	.word	0x08008970

08007cec <std>:
 8007cec:	2300      	movs	r3, #0
 8007cee:	b510      	push	{r4, lr}
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8007cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cfa:	6083      	str	r3, [r0, #8]
 8007cfc:	8181      	strh	r1, [r0, #12]
 8007cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8007d00:	81c2      	strh	r2, [r0, #14]
 8007d02:	6183      	str	r3, [r0, #24]
 8007d04:	4619      	mov	r1, r3
 8007d06:	2208      	movs	r2, #8
 8007d08:	305c      	adds	r0, #92	; 0x5c
 8007d0a:	f7ff fdd7 	bl	80078bc <memset>
 8007d0e:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <std+0x38>)
 8007d10:	6263      	str	r3, [r4, #36]	; 0x24
 8007d12:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <std+0x3c>)
 8007d14:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d16:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <std+0x40>)
 8007d18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d1a:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <std+0x44>)
 8007d1c:	6224      	str	r4, [r4, #32]
 8007d1e:	6323      	str	r3, [r4, #48]	; 0x30
 8007d20:	bd10      	pop	{r4, pc}
 8007d22:	bf00      	nop
 8007d24:	080086f5 	.word	0x080086f5
 8007d28:	08008717 	.word	0x08008717
 8007d2c:	0800874f 	.word	0x0800874f
 8007d30:	08008773 	.word	0x08008773

08007d34 <_cleanup_r>:
 8007d34:	4901      	ldr	r1, [pc, #4]	; (8007d3c <_cleanup_r+0x8>)
 8007d36:	f000 b8af 	b.w	8007e98 <_fwalk_reent>
 8007d3a:	bf00      	nop
 8007d3c:	08007c75 	.word	0x08007c75

08007d40 <__sfmoreglue>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	1e4a      	subs	r2, r1, #1
 8007d44:	2568      	movs	r5, #104	; 0x68
 8007d46:	4355      	muls	r5, r2
 8007d48:	460e      	mov	r6, r1
 8007d4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d4e:	f000 f979 	bl	8008044 <_malloc_r>
 8007d52:	4604      	mov	r4, r0
 8007d54:	b140      	cbz	r0, 8007d68 <__sfmoreglue+0x28>
 8007d56:	2100      	movs	r1, #0
 8007d58:	e9c0 1600 	strd	r1, r6, [r0]
 8007d5c:	300c      	adds	r0, #12
 8007d5e:	60a0      	str	r0, [r4, #8]
 8007d60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d64:	f7ff fdaa 	bl	80078bc <memset>
 8007d68:	4620      	mov	r0, r4
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}

08007d6c <__sfp_lock_acquire>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	; (8007d74 <__sfp_lock_acquire+0x8>)
 8007d6e:	f000 b8b3 	b.w	8007ed8 <__retarget_lock_acquire_recursive>
 8007d72:	bf00      	nop
 8007d74:	20001b00 	.word	0x20001b00

08007d78 <__sfp_lock_release>:
 8007d78:	4801      	ldr	r0, [pc, #4]	; (8007d80 <__sfp_lock_release+0x8>)
 8007d7a:	f000 b8ae 	b.w	8007eda <__retarget_lock_release_recursive>
 8007d7e:	bf00      	nop
 8007d80:	20001b00 	.word	0x20001b00

08007d84 <__sinit_lock_acquire>:
 8007d84:	4801      	ldr	r0, [pc, #4]	; (8007d8c <__sinit_lock_acquire+0x8>)
 8007d86:	f000 b8a7 	b.w	8007ed8 <__retarget_lock_acquire_recursive>
 8007d8a:	bf00      	nop
 8007d8c:	20001afb 	.word	0x20001afb

08007d90 <__sinit_lock_release>:
 8007d90:	4801      	ldr	r0, [pc, #4]	; (8007d98 <__sinit_lock_release+0x8>)
 8007d92:	f000 b8a2 	b.w	8007eda <__retarget_lock_release_recursive>
 8007d96:	bf00      	nop
 8007d98:	20001afb 	.word	0x20001afb

08007d9c <__sinit>:
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	4604      	mov	r4, r0
 8007da0:	f7ff fff0 	bl	8007d84 <__sinit_lock_acquire>
 8007da4:	69a3      	ldr	r3, [r4, #24]
 8007da6:	b11b      	cbz	r3, 8007db0 <__sinit+0x14>
 8007da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dac:	f7ff bff0 	b.w	8007d90 <__sinit_lock_release>
 8007db0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007db4:	6523      	str	r3, [r4, #80]	; 0x50
 8007db6:	4b13      	ldr	r3, [pc, #76]	; (8007e04 <__sinit+0x68>)
 8007db8:	4a13      	ldr	r2, [pc, #76]	; (8007e08 <__sinit+0x6c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007dbe:	42a3      	cmp	r3, r4
 8007dc0:	bf04      	itt	eq
 8007dc2:	2301      	moveq	r3, #1
 8007dc4:	61a3      	streq	r3, [r4, #24]
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 f820 	bl	8007e0c <__sfp>
 8007dcc:	6060      	str	r0, [r4, #4]
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 f81c 	bl	8007e0c <__sfp>
 8007dd4:	60a0      	str	r0, [r4, #8]
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f000 f818 	bl	8007e0c <__sfp>
 8007ddc:	2200      	movs	r2, #0
 8007dde:	60e0      	str	r0, [r4, #12]
 8007de0:	2104      	movs	r1, #4
 8007de2:	6860      	ldr	r0, [r4, #4]
 8007de4:	f7ff ff82 	bl	8007cec <std>
 8007de8:	68a0      	ldr	r0, [r4, #8]
 8007dea:	2201      	movs	r2, #1
 8007dec:	2109      	movs	r1, #9
 8007dee:	f7ff ff7d 	bl	8007cec <std>
 8007df2:	68e0      	ldr	r0, [r4, #12]
 8007df4:	2202      	movs	r2, #2
 8007df6:	2112      	movs	r1, #18
 8007df8:	f7ff ff78 	bl	8007cec <std>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	61a3      	str	r3, [r4, #24]
 8007e00:	e7d2      	b.n	8007da8 <__sinit+0xc>
 8007e02:	bf00      	nop
 8007e04:	0800896c 	.word	0x0800896c
 8007e08:	08007d35 	.word	0x08007d35

08007e0c <__sfp>:
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0e:	4607      	mov	r7, r0
 8007e10:	f7ff ffac 	bl	8007d6c <__sfp_lock_acquire>
 8007e14:	4b1e      	ldr	r3, [pc, #120]	; (8007e90 <__sfp+0x84>)
 8007e16:	681e      	ldr	r6, [r3, #0]
 8007e18:	69b3      	ldr	r3, [r6, #24]
 8007e1a:	b913      	cbnz	r3, 8007e22 <__sfp+0x16>
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff ffbd 	bl	8007d9c <__sinit>
 8007e22:	3648      	adds	r6, #72	; 0x48
 8007e24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	d503      	bpl.n	8007e34 <__sfp+0x28>
 8007e2c:	6833      	ldr	r3, [r6, #0]
 8007e2e:	b30b      	cbz	r3, 8007e74 <__sfp+0x68>
 8007e30:	6836      	ldr	r6, [r6, #0]
 8007e32:	e7f7      	b.n	8007e24 <__sfp+0x18>
 8007e34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e38:	b9d5      	cbnz	r5, 8007e70 <__sfp+0x64>
 8007e3a:	4b16      	ldr	r3, [pc, #88]	; (8007e94 <__sfp+0x88>)
 8007e3c:	60e3      	str	r3, [r4, #12]
 8007e3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e42:	6665      	str	r5, [r4, #100]	; 0x64
 8007e44:	f000 f847 	bl	8007ed6 <__retarget_lock_init_recursive>
 8007e48:	f7ff ff96 	bl	8007d78 <__sfp_lock_release>
 8007e4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e54:	6025      	str	r5, [r4, #0]
 8007e56:	61a5      	str	r5, [r4, #24]
 8007e58:	2208      	movs	r2, #8
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e60:	f7ff fd2c 	bl	80078bc <memset>
 8007e64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e70:	3468      	adds	r4, #104	; 0x68
 8007e72:	e7d9      	b.n	8007e28 <__sfp+0x1c>
 8007e74:	2104      	movs	r1, #4
 8007e76:	4638      	mov	r0, r7
 8007e78:	f7ff ff62 	bl	8007d40 <__sfmoreglue>
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	6030      	str	r0, [r6, #0]
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d1d5      	bne.n	8007e30 <__sfp+0x24>
 8007e84:	f7ff ff78 	bl	8007d78 <__sfp_lock_release>
 8007e88:	230c      	movs	r3, #12
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	e7ee      	b.n	8007e6c <__sfp+0x60>
 8007e8e:	bf00      	nop
 8007e90:	0800896c 	.word	0x0800896c
 8007e94:	ffff0001 	.word	0xffff0001

08007e98 <_fwalk_reent>:
 8007e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	4688      	mov	r8, r1
 8007ea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ea4:	2700      	movs	r7, #0
 8007ea6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007eaa:	f1b9 0901 	subs.w	r9, r9, #1
 8007eae:	d505      	bpl.n	8007ebc <_fwalk_reent+0x24>
 8007eb0:	6824      	ldr	r4, [r4, #0]
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	d1f7      	bne.n	8007ea6 <_fwalk_reent+0xe>
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ebc:	89ab      	ldrh	r3, [r5, #12]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d907      	bls.n	8007ed2 <_fwalk_reent+0x3a>
 8007ec2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	d003      	beq.n	8007ed2 <_fwalk_reent+0x3a>
 8007eca:	4629      	mov	r1, r5
 8007ecc:	4630      	mov	r0, r6
 8007ece:	47c0      	blx	r8
 8007ed0:	4307      	orrs	r7, r0
 8007ed2:	3568      	adds	r5, #104	; 0x68
 8007ed4:	e7e9      	b.n	8007eaa <_fwalk_reent+0x12>

08007ed6 <__retarget_lock_init_recursive>:
 8007ed6:	4770      	bx	lr

08007ed8 <__retarget_lock_acquire_recursive>:
 8007ed8:	4770      	bx	lr

08007eda <__retarget_lock_release_recursive>:
 8007eda:	4770      	bx	lr

08007edc <__swhatbuf_r>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	460e      	mov	r6, r1
 8007ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	b096      	sub	sp, #88	; 0x58
 8007ee8:	4614      	mov	r4, r2
 8007eea:	461d      	mov	r5, r3
 8007eec:	da07      	bge.n	8007efe <__swhatbuf_r+0x22>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	602b      	str	r3, [r5, #0]
 8007ef2:	89b3      	ldrh	r3, [r6, #12]
 8007ef4:	061a      	lsls	r2, r3, #24
 8007ef6:	d410      	bmi.n	8007f1a <__swhatbuf_r+0x3e>
 8007ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007efc:	e00e      	b.n	8007f1c <__swhatbuf_r+0x40>
 8007efe:	466a      	mov	r2, sp
 8007f00:	f000 fc5e 	bl	80087c0 <_fstat_r>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	dbf2      	blt.n	8007eee <__swhatbuf_r+0x12>
 8007f08:	9a01      	ldr	r2, [sp, #4]
 8007f0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f12:	425a      	negs	r2, r3
 8007f14:	415a      	adcs	r2, r3
 8007f16:	602a      	str	r2, [r5, #0]
 8007f18:	e7ee      	b.n	8007ef8 <__swhatbuf_r+0x1c>
 8007f1a:	2340      	movs	r3, #64	; 0x40
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	6023      	str	r3, [r4, #0]
 8007f20:	b016      	add	sp, #88	; 0x58
 8007f22:	bd70      	pop	{r4, r5, r6, pc}

08007f24 <__smakebuf_r>:
 8007f24:	898b      	ldrh	r3, [r1, #12]
 8007f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f28:	079d      	lsls	r5, r3, #30
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	d507      	bpl.n	8007f40 <__smakebuf_r+0x1c>
 8007f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	2301      	movs	r3, #1
 8007f3a:	6163      	str	r3, [r4, #20]
 8007f3c:	b002      	add	sp, #8
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
 8007f40:	ab01      	add	r3, sp, #4
 8007f42:	466a      	mov	r2, sp
 8007f44:	f7ff ffca 	bl	8007edc <__swhatbuf_r>
 8007f48:	9900      	ldr	r1, [sp, #0]
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f000 f879 	bl	8008044 <_malloc_r>
 8007f52:	b948      	cbnz	r0, 8007f68 <__smakebuf_r+0x44>
 8007f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f58:	059a      	lsls	r2, r3, #22
 8007f5a:	d4ef      	bmi.n	8007f3c <__smakebuf_r+0x18>
 8007f5c:	f023 0303 	bic.w	r3, r3, #3
 8007f60:	f043 0302 	orr.w	r3, r3, #2
 8007f64:	81a3      	strh	r3, [r4, #12]
 8007f66:	e7e3      	b.n	8007f30 <__smakebuf_r+0xc>
 8007f68:	4b0d      	ldr	r3, [pc, #52]	; (8007fa0 <__smakebuf_r+0x7c>)
 8007f6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	6020      	str	r0, [r4, #0]
 8007f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f74:	81a3      	strh	r3, [r4, #12]
 8007f76:	9b00      	ldr	r3, [sp, #0]
 8007f78:	6163      	str	r3, [r4, #20]
 8007f7a:	9b01      	ldr	r3, [sp, #4]
 8007f7c:	6120      	str	r0, [r4, #16]
 8007f7e:	b15b      	cbz	r3, 8007f98 <__smakebuf_r+0x74>
 8007f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f84:	4630      	mov	r0, r6
 8007f86:	f000 fc2d 	bl	80087e4 <_isatty_r>
 8007f8a:	b128      	cbz	r0, 8007f98 <__smakebuf_r+0x74>
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	f023 0303 	bic.w	r3, r3, #3
 8007f92:	f043 0301 	orr.w	r3, r3, #1
 8007f96:	81a3      	strh	r3, [r4, #12]
 8007f98:	89a0      	ldrh	r0, [r4, #12]
 8007f9a:	4305      	orrs	r5, r0
 8007f9c:	81a5      	strh	r5, [r4, #12]
 8007f9e:	e7cd      	b.n	8007f3c <__smakebuf_r+0x18>
 8007fa0:	08007d35 	.word	0x08007d35

08007fa4 <_free_r>:
 8007fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fa6:	2900      	cmp	r1, #0
 8007fa8:	d048      	beq.n	800803c <_free_r+0x98>
 8007faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fae:	9001      	str	r0, [sp, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8007fb6:	bfb8      	it	lt
 8007fb8:	18e4      	addlt	r4, r4, r3
 8007fba:	f000 fc35 	bl	8008828 <__malloc_lock>
 8007fbe:	4a20      	ldr	r2, [pc, #128]	; (8008040 <_free_r+0x9c>)
 8007fc0:	9801      	ldr	r0, [sp, #4]
 8007fc2:	6813      	ldr	r3, [r2, #0]
 8007fc4:	4615      	mov	r5, r2
 8007fc6:	b933      	cbnz	r3, 8007fd6 <_free_r+0x32>
 8007fc8:	6063      	str	r3, [r4, #4]
 8007fca:	6014      	str	r4, [r2, #0]
 8007fcc:	b003      	add	sp, #12
 8007fce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fd2:	f000 bc2f 	b.w	8008834 <__malloc_unlock>
 8007fd6:	42a3      	cmp	r3, r4
 8007fd8:	d90b      	bls.n	8007ff2 <_free_r+0x4e>
 8007fda:	6821      	ldr	r1, [r4, #0]
 8007fdc:	1862      	adds	r2, r4, r1
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	bf04      	itt	eq
 8007fe2:	681a      	ldreq	r2, [r3, #0]
 8007fe4:	685b      	ldreq	r3, [r3, #4]
 8007fe6:	6063      	str	r3, [r4, #4]
 8007fe8:	bf04      	itt	eq
 8007fea:	1852      	addeq	r2, r2, r1
 8007fec:	6022      	streq	r2, [r4, #0]
 8007fee:	602c      	str	r4, [r5, #0]
 8007ff0:	e7ec      	b.n	8007fcc <_free_r+0x28>
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	b10b      	cbz	r3, 8007ffc <_free_r+0x58>
 8007ff8:	42a3      	cmp	r3, r4
 8007ffa:	d9fa      	bls.n	8007ff2 <_free_r+0x4e>
 8007ffc:	6811      	ldr	r1, [r2, #0]
 8007ffe:	1855      	adds	r5, r2, r1
 8008000:	42a5      	cmp	r5, r4
 8008002:	d10b      	bne.n	800801c <_free_r+0x78>
 8008004:	6824      	ldr	r4, [r4, #0]
 8008006:	4421      	add	r1, r4
 8008008:	1854      	adds	r4, r2, r1
 800800a:	42a3      	cmp	r3, r4
 800800c:	6011      	str	r1, [r2, #0]
 800800e:	d1dd      	bne.n	8007fcc <_free_r+0x28>
 8008010:	681c      	ldr	r4, [r3, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	6053      	str	r3, [r2, #4]
 8008016:	4421      	add	r1, r4
 8008018:	6011      	str	r1, [r2, #0]
 800801a:	e7d7      	b.n	8007fcc <_free_r+0x28>
 800801c:	d902      	bls.n	8008024 <_free_r+0x80>
 800801e:	230c      	movs	r3, #12
 8008020:	6003      	str	r3, [r0, #0]
 8008022:	e7d3      	b.n	8007fcc <_free_r+0x28>
 8008024:	6825      	ldr	r5, [r4, #0]
 8008026:	1961      	adds	r1, r4, r5
 8008028:	428b      	cmp	r3, r1
 800802a:	bf04      	itt	eq
 800802c:	6819      	ldreq	r1, [r3, #0]
 800802e:	685b      	ldreq	r3, [r3, #4]
 8008030:	6063      	str	r3, [r4, #4]
 8008032:	bf04      	itt	eq
 8008034:	1949      	addeq	r1, r1, r5
 8008036:	6021      	streq	r1, [r4, #0]
 8008038:	6054      	str	r4, [r2, #4]
 800803a:	e7c7      	b.n	8007fcc <_free_r+0x28>
 800803c:	b003      	add	sp, #12
 800803e:	bd30      	pop	{r4, r5, pc}
 8008040:	20001970 	.word	0x20001970

08008044 <_malloc_r>:
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	1ccd      	adds	r5, r1, #3
 8008048:	f025 0503 	bic.w	r5, r5, #3
 800804c:	3508      	adds	r5, #8
 800804e:	2d0c      	cmp	r5, #12
 8008050:	bf38      	it	cc
 8008052:	250c      	movcc	r5, #12
 8008054:	2d00      	cmp	r5, #0
 8008056:	4606      	mov	r6, r0
 8008058:	db01      	blt.n	800805e <_malloc_r+0x1a>
 800805a:	42a9      	cmp	r1, r5
 800805c:	d903      	bls.n	8008066 <_malloc_r+0x22>
 800805e:	230c      	movs	r3, #12
 8008060:	6033      	str	r3, [r6, #0]
 8008062:	2000      	movs	r0, #0
 8008064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008066:	f000 fbdf 	bl	8008828 <__malloc_lock>
 800806a:	4921      	ldr	r1, [pc, #132]	; (80080f0 <_malloc_r+0xac>)
 800806c:	680a      	ldr	r2, [r1, #0]
 800806e:	4614      	mov	r4, r2
 8008070:	b99c      	cbnz	r4, 800809a <_malloc_r+0x56>
 8008072:	4f20      	ldr	r7, [pc, #128]	; (80080f4 <_malloc_r+0xb0>)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	b923      	cbnz	r3, 8008082 <_malloc_r+0x3e>
 8008078:	4621      	mov	r1, r4
 800807a:	4630      	mov	r0, r6
 800807c:	f000 fb2a 	bl	80086d4 <_sbrk_r>
 8008080:	6038      	str	r0, [r7, #0]
 8008082:	4629      	mov	r1, r5
 8008084:	4630      	mov	r0, r6
 8008086:	f000 fb25 	bl	80086d4 <_sbrk_r>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	d123      	bne.n	80080d6 <_malloc_r+0x92>
 800808e:	230c      	movs	r3, #12
 8008090:	6033      	str	r3, [r6, #0]
 8008092:	4630      	mov	r0, r6
 8008094:	f000 fbce 	bl	8008834 <__malloc_unlock>
 8008098:	e7e3      	b.n	8008062 <_malloc_r+0x1e>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	1b5b      	subs	r3, r3, r5
 800809e:	d417      	bmi.n	80080d0 <_malloc_r+0x8c>
 80080a0:	2b0b      	cmp	r3, #11
 80080a2:	d903      	bls.n	80080ac <_malloc_r+0x68>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	441c      	add	r4, r3
 80080a8:	6025      	str	r5, [r4, #0]
 80080aa:	e004      	b.n	80080b6 <_malloc_r+0x72>
 80080ac:	6863      	ldr	r3, [r4, #4]
 80080ae:	42a2      	cmp	r2, r4
 80080b0:	bf0c      	ite	eq
 80080b2:	600b      	streq	r3, [r1, #0]
 80080b4:	6053      	strne	r3, [r2, #4]
 80080b6:	4630      	mov	r0, r6
 80080b8:	f000 fbbc 	bl	8008834 <__malloc_unlock>
 80080bc:	f104 000b 	add.w	r0, r4, #11
 80080c0:	1d23      	adds	r3, r4, #4
 80080c2:	f020 0007 	bic.w	r0, r0, #7
 80080c6:	1ac2      	subs	r2, r0, r3
 80080c8:	d0cc      	beq.n	8008064 <_malloc_r+0x20>
 80080ca:	1a1b      	subs	r3, r3, r0
 80080cc:	50a3      	str	r3, [r4, r2]
 80080ce:	e7c9      	b.n	8008064 <_malloc_r+0x20>
 80080d0:	4622      	mov	r2, r4
 80080d2:	6864      	ldr	r4, [r4, #4]
 80080d4:	e7cc      	b.n	8008070 <_malloc_r+0x2c>
 80080d6:	1cc4      	adds	r4, r0, #3
 80080d8:	f024 0403 	bic.w	r4, r4, #3
 80080dc:	42a0      	cmp	r0, r4
 80080de:	d0e3      	beq.n	80080a8 <_malloc_r+0x64>
 80080e0:	1a21      	subs	r1, r4, r0
 80080e2:	4630      	mov	r0, r6
 80080e4:	f000 faf6 	bl	80086d4 <_sbrk_r>
 80080e8:	3001      	adds	r0, #1
 80080ea:	d1dd      	bne.n	80080a8 <_malloc_r+0x64>
 80080ec:	e7cf      	b.n	800808e <_malloc_r+0x4a>
 80080ee:	bf00      	nop
 80080f0:	20001970 	.word	0x20001970
 80080f4:	20001974 	.word	0x20001974

080080f8 <__sfputc_r>:
 80080f8:	6893      	ldr	r3, [r2, #8]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	b410      	push	{r4}
 8008100:	6093      	str	r3, [r2, #8]
 8008102:	da08      	bge.n	8008116 <__sfputc_r+0x1e>
 8008104:	6994      	ldr	r4, [r2, #24]
 8008106:	42a3      	cmp	r3, r4
 8008108:	db01      	blt.n	800810e <__sfputc_r+0x16>
 800810a:	290a      	cmp	r1, #10
 800810c:	d103      	bne.n	8008116 <__sfputc_r+0x1e>
 800810e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008112:	f7ff bc69 	b.w	80079e8 <__swbuf_r>
 8008116:	6813      	ldr	r3, [r2, #0]
 8008118:	1c58      	adds	r0, r3, #1
 800811a:	6010      	str	r0, [r2, #0]
 800811c:	7019      	strb	r1, [r3, #0]
 800811e:	4608      	mov	r0, r1
 8008120:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008124:	4770      	bx	lr

08008126 <__sfputs_r>:
 8008126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008128:	4606      	mov	r6, r0
 800812a:	460f      	mov	r7, r1
 800812c:	4614      	mov	r4, r2
 800812e:	18d5      	adds	r5, r2, r3
 8008130:	42ac      	cmp	r4, r5
 8008132:	d101      	bne.n	8008138 <__sfputs_r+0x12>
 8008134:	2000      	movs	r0, #0
 8008136:	e007      	b.n	8008148 <__sfputs_r+0x22>
 8008138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800813c:	463a      	mov	r2, r7
 800813e:	4630      	mov	r0, r6
 8008140:	f7ff ffda 	bl	80080f8 <__sfputc_r>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d1f3      	bne.n	8008130 <__sfputs_r+0xa>
 8008148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800814c <_vfiprintf_r>:
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	460d      	mov	r5, r1
 8008152:	b09d      	sub	sp, #116	; 0x74
 8008154:	4614      	mov	r4, r2
 8008156:	4698      	mov	r8, r3
 8008158:	4606      	mov	r6, r0
 800815a:	b118      	cbz	r0, 8008164 <_vfiprintf_r+0x18>
 800815c:	6983      	ldr	r3, [r0, #24]
 800815e:	b90b      	cbnz	r3, 8008164 <_vfiprintf_r+0x18>
 8008160:	f7ff fe1c 	bl	8007d9c <__sinit>
 8008164:	4b89      	ldr	r3, [pc, #548]	; (800838c <_vfiprintf_r+0x240>)
 8008166:	429d      	cmp	r5, r3
 8008168:	d11b      	bne.n	80081a2 <_vfiprintf_r+0x56>
 800816a:	6875      	ldr	r5, [r6, #4]
 800816c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800816e:	07d9      	lsls	r1, r3, #31
 8008170:	d405      	bmi.n	800817e <_vfiprintf_r+0x32>
 8008172:	89ab      	ldrh	r3, [r5, #12]
 8008174:	059a      	lsls	r2, r3, #22
 8008176:	d402      	bmi.n	800817e <_vfiprintf_r+0x32>
 8008178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800817a:	f7ff fead 	bl	8007ed8 <__retarget_lock_acquire_recursive>
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	071b      	lsls	r3, r3, #28
 8008182:	d501      	bpl.n	8008188 <_vfiprintf_r+0x3c>
 8008184:	692b      	ldr	r3, [r5, #16]
 8008186:	b9eb      	cbnz	r3, 80081c4 <_vfiprintf_r+0x78>
 8008188:	4629      	mov	r1, r5
 800818a:	4630      	mov	r0, r6
 800818c:	f7ff fc7e 	bl	8007a8c <__swsetup_r>
 8008190:	b1c0      	cbz	r0, 80081c4 <_vfiprintf_r+0x78>
 8008192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008194:	07dc      	lsls	r4, r3, #31
 8008196:	d50e      	bpl.n	80081b6 <_vfiprintf_r+0x6a>
 8008198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800819c:	b01d      	add	sp, #116	; 0x74
 800819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a2:	4b7b      	ldr	r3, [pc, #492]	; (8008390 <_vfiprintf_r+0x244>)
 80081a4:	429d      	cmp	r5, r3
 80081a6:	d101      	bne.n	80081ac <_vfiprintf_r+0x60>
 80081a8:	68b5      	ldr	r5, [r6, #8]
 80081aa:	e7df      	b.n	800816c <_vfiprintf_r+0x20>
 80081ac:	4b79      	ldr	r3, [pc, #484]	; (8008394 <_vfiprintf_r+0x248>)
 80081ae:	429d      	cmp	r5, r3
 80081b0:	bf08      	it	eq
 80081b2:	68f5      	ldreq	r5, [r6, #12]
 80081b4:	e7da      	b.n	800816c <_vfiprintf_r+0x20>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	0598      	lsls	r0, r3, #22
 80081ba:	d4ed      	bmi.n	8008198 <_vfiprintf_r+0x4c>
 80081bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081be:	f7ff fe8c 	bl	8007eda <__retarget_lock_release_recursive>
 80081c2:	e7e9      	b.n	8008198 <_vfiprintf_r+0x4c>
 80081c4:	2300      	movs	r3, #0
 80081c6:	9309      	str	r3, [sp, #36]	; 0x24
 80081c8:	2320      	movs	r3, #32
 80081ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80081d2:	2330      	movs	r3, #48	; 0x30
 80081d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008398 <_vfiprintf_r+0x24c>
 80081d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081dc:	f04f 0901 	mov.w	r9, #1
 80081e0:	4623      	mov	r3, r4
 80081e2:	469a      	mov	sl, r3
 80081e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e8:	b10a      	cbz	r2, 80081ee <_vfiprintf_r+0xa2>
 80081ea:	2a25      	cmp	r2, #37	; 0x25
 80081ec:	d1f9      	bne.n	80081e2 <_vfiprintf_r+0x96>
 80081ee:	ebba 0b04 	subs.w	fp, sl, r4
 80081f2:	d00b      	beq.n	800820c <_vfiprintf_r+0xc0>
 80081f4:	465b      	mov	r3, fp
 80081f6:	4622      	mov	r2, r4
 80081f8:	4629      	mov	r1, r5
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7ff ff93 	bl	8008126 <__sfputs_r>
 8008200:	3001      	adds	r0, #1
 8008202:	f000 80aa 	beq.w	800835a <_vfiprintf_r+0x20e>
 8008206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008208:	445a      	add	r2, fp
 800820a:	9209      	str	r2, [sp, #36]	; 0x24
 800820c:	f89a 3000 	ldrb.w	r3, [sl]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 80a2 	beq.w	800835a <_vfiprintf_r+0x20e>
 8008216:	2300      	movs	r3, #0
 8008218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800821c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008220:	f10a 0a01 	add.w	sl, sl, #1
 8008224:	9304      	str	r3, [sp, #16]
 8008226:	9307      	str	r3, [sp, #28]
 8008228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800822c:	931a      	str	r3, [sp, #104]	; 0x68
 800822e:	4654      	mov	r4, sl
 8008230:	2205      	movs	r2, #5
 8008232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008236:	4858      	ldr	r0, [pc, #352]	; (8008398 <_vfiprintf_r+0x24c>)
 8008238:	f7f7 ffca 	bl	80001d0 <memchr>
 800823c:	9a04      	ldr	r2, [sp, #16]
 800823e:	b9d8      	cbnz	r0, 8008278 <_vfiprintf_r+0x12c>
 8008240:	06d1      	lsls	r1, r2, #27
 8008242:	bf44      	itt	mi
 8008244:	2320      	movmi	r3, #32
 8008246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800824a:	0713      	lsls	r3, r2, #28
 800824c:	bf44      	itt	mi
 800824e:	232b      	movmi	r3, #43	; 0x2b
 8008250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008254:	f89a 3000 	ldrb.w	r3, [sl]
 8008258:	2b2a      	cmp	r3, #42	; 0x2a
 800825a:	d015      	beq.n	8008288 <_vfiprintf_r+0x13c>
 800825c:	9a07      	ldr	r2, [sp, #28]
 800825e:	4654      	mov	r4, sl
 8008260:	2000      	movs	r0, #0
 8008262:	f04f 0c0a 	mov.w	ip, #10
 8008266:	4621      	mov	r1, r4
 8008268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800826c:	3b30      	subs	r3, #48	; 0x30
 800826e:	2b09      	cmp	r3, #9
 8008270:	d94e      	bls.n	8008310 <_vfiprintf_r+0x1c4>
 8008272:	b1b0      	cbz	r0, 80082a2 <_vfiprintf_r+0x156>
 8008274:	9207      	str	r2, [sp, #28]
 8008276:	e014      	b.n	80082a2 <_vfiprintf_r+0x156>
 8008278:	eba0 0308 	sub.w	r3, r0, r8
 800827c:	fa09 f303 	lsl.w	r3, r9, r3
 8008280:	4313      	orrs	r3, r2
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	46a2      	mov	sl, r4
 8008286:	e7d2      	b.n	800822e <_vfiprintf_r+0xe2>
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	1d19      	adds	r1, r3, #4
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	9103      	str	r1, [sp, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	bfbb      	ittet	lt
 8008294:	425b      	neglt	r3, r3
 8008296:	f042 0202 	orrlt.w	r2, r2, #2
 800829a:	9307      	strge	r3, [sp, #28]
 800829c:	9307      	strlt	r3, [sp, #28]
 800829e:	bfb8      	it	lt
 80082a0:	9204      	strlt	r2, [sp, #16]
 80082a2:	7823      	ldrb	r3, [r4, #0]
 80082a4:	2b2e      	cmp	r3, #46	; 0x2e
 80082a6:	d10c      	bne.n	80082c2 <_vfiprintf_r+0x176>
 80082a8:	7863      	ldrb	r3, [r4, #1]
 80082aa:	2b2a      	cmp	r3, #42	; 0x2a
 80082ac:	d135      	bne.n	800831a <_vfiprintf_r+0x1ce>
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	1d1a      	adds	r2, r3, #4
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	9203      	str	r2, [sp, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	bfb8      	it	lt
 80082ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80082be:	3402      	adds	r4, #2
 80082c0:	9305      	str	r3, [sp, #20]
 80082c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083a8 <_vfiprintf_r+0x25c>
 80082c6:	7821      	ldrb	r1, [r4, #0]
 80082c8:	2203      	movs	r2, #3
 80082ca:	4650      	mov	r0, sl
 80082cc:	f7f7 ff80 	bl	80001d0 <memchr>
 80082d0:	b140      	cbz	r0, 80082e4 <_vfiprintf_r+0x198>
 80082d2:	2340      	movs	r3, #64	; 0x40
 80082d4:	eba0 000a 	sub.w	r0, r0, sl
 80082d8:	fa03 f000 	lsl.w	r0, r3, r0
 80082dc:	9b04      	ldr	r3, [sp, #16]
 80082de:	4303      	orrs	r3, r0
 80082e0:	3401      	adds	r4, #1
 80082e2:	9304      	str	r3, [sp, #16]
 80082e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e8:	482c      	ldr	r0, [pc, #176]	; (800839c <_vfiprintf_r+0x250>)
 80082ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082ee:	2206      	movs	r2, #6
 80082f0:	f7f7 ff6e 	bl	80001d0 <memchr>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d03f      	beq.n	8008378 <_vfiprintf_r+0x22c>
 80082f8:	4b29      	ldr	r3, [pc, #164]	; (80083a0 <_vfiprintf_r+0x254>)
 80082fa:	bb1b      	cbnz	r3, 8008344 <_vfiprintf_r+0x1f8>
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	3307      	adds	r3, #7
 8008300:	f023 0307 	bic.w	r3, r3, #7
 8008304:	3308      	adds	r3, #8
 8008306:	9303      	str	r3, [sp, #12]
 8008308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830a:	443b      	add	r3, r7
 800830c:	9309      	str	r3, [sp, #36]	; 0x24
 800830e:	e767      	b.n	80081e0 <_vfiprintf_r+0x94>
 8008310:	fb0c 3202 	mla	r2, ip, r2, r3
 8008314:	460c      	mov	r4, r1
 8008316:	2001      	movs	r0, #1
 8008318:	e7a5      	b.n	8008266 <_vfiprintf_r+0x11a>
 800831a:	2300      	movs	r3, #0
 800831c:	3401      	adds	r4, #1
 800831e:	9305      	str	r3, [sp, #20]
 8008320:	4619      	mov	r1, r3
 8008322:	f04f 0c0a 	mov.w	ip, #10
 8008326:	4620      	mov	r0, r4
 8008328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800832c:	3a30      	subs	r2, #48	; 0x30
 800832e:	2a09      	cmp	r2, #9
 8008330:	d903      	bls.n	800833a <_vfiprintf_r+0x1ee>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0c5      	beq.n	80082c2 <_vfiprintf_r+0x176>
 8008336:	9105      	str	r1, [sp, #20]
 8008338:	e7c3      	b.n	80082c2 <_vfiprintf_r+0x176>
 800833a:	fb0c 2101 	mla	r1, ip, r1, r2
 800833e:	4604      	mov	r4, r0
 8008340:	2301      	movs	r3, #1
 8008342:	e7f0      	b.n	8008326 <_vfiprintf_r+0x1da>
 8008344:	ab03      	add	r3, sp, #12
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	462a      	mov	r2, r5
 800834a:	4b16      	ldr	r3, [pc, #88]	; (80083a4 <_vfiprintf_r+0x258>)
 800834c:	a904      	add	r1, sp, #16
 800834e:	4630      	mov	r0, r6
 8008350:	f3af 8000 	nop.w
 8008354:	4607      	mov	r7, r0
 8008356:	1c78      	adds	r0, r7, #1
 8008358:	d1d6      	bne.n	8008308 <_vfiprintf_r+0x1bc>
 800835a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800835c:	07d9      	lsls	r1, r3, #31
 800835e:	d405      	bmi.n	800836c <_vfiprintf_r+0x220>
 8008360:	89ab      	ldrh	r3, [r5, #12]
 8008362:	059a      	lsls	r2, r3, #22
 8008364:	d402      	bmi.n	800836c <_vfiprintf_r+0x220>
 8008366:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008368:	f7ff fdb7 	bl	8007eda <__retarget_lock_release_recursive>
 800836c:	89ab      	ldrh	r3, [r5, #12]
 800836e:	065b      	lsls	r3, r3, #25
 8008370:	f53f af12 	bmi.w	8008198 <_vfiprintf_r+0x4c>
 8008374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008376:	e711      	b.n	800819c <_vfiprintf_r+0x50>
 8008378:	ab03      	add	r3, sp, #12
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	462a      	mov	r2, r5
 800837e:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <_vfiprintf_r+0x258>)
 8008380:	a904      	add	r1, sp, #16
 8008382:	4630      	mov	r0, r6
 8008384:	f000 f880 	bl	8008488 <_printf_i>
 8008388:	e7e4      	b.n	8008354 <_vfiprintf_r+0x208>
 800838a:	bf00      	nop
 800838c:	08008990 	.word	0x08008990
 8008390:	080089b0 	.word	0x080089b0
 8008394:	08008970 	.word	0x08008970
 8008398:	080089d0 	.word	0x080089d0
 800839c:	080089da 	.word	0x080089da
 80083a0:	00000000 	.word	0x00000000
 80083a4:	08008127 	.word	0x08008127
 80083a8:	080089d6 	.word	0x080089d6

080083ac <_printf_common>:
 80083ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b0:	4616      	mov	r6, r2
 80083b2:	4699      	mov	r9, r3
 80083b4:	688a      	ldr	r2, [r1, #8]
 80083b6:	690b      	ldr	r3, [r1, #16]
 80083b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083bc:	4293      	cmp	r3, r2
 80083be:	bfb8      	it	lt
 80083c0:	4613      	movlt	r3, r2
 80083c2:	6033      	str	r3, [r6, #0]
 80083c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083c8:	4607      	mov	r7, r0
 80083ca:	460c      	mov	r4, r1
 80083cc:	b10a      	cbz	r2, 80083d2 <_printf_common+0x26>
 80083ce:	3301      	adds	r3, #1
 80083d0:	6033      	str	r3, [r6, #0]
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	0699      	lsls	r1, r3, #26
 80083d6:	bf42      	ittt	mi
 80083d8:	6833      	ldrmi	r3, [r6, #0]
 80083da:	3302      	addmi	r3, #2
 80083dc:	6033      	strmi	r3, [r6, #0]
 80083de:	6825      	ldr	r5, [r4, #0]
 80083e0:	f015 0506 	ands.w	r5, r5, #6
 80083e4:	d106      	bne.n	80083f4 <_printf_common+0x48>
 80083e6:	f104 0a19 	add.w	sl, r4, #25
 80083ea:	68e3      	ldr	r3, [r4, #12]
 80083ec:	6832      	ldr	r2, [r6, #0]
 80083ee:	1a9b      	subs	r3, r3, r2
 80083f0:	42ab      	cmp	r3, r5
 80083f2:	dc26      	bgt.n	8008442 <_printf_common+0x96>
 80083f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083f8:	1e13      	subs	r3, r2, #0
 80083fa:	6822      	ldr	r2, [r4, #0]
 80083fc:	bf18      	it	ne
 80083fe:	2301      	movne	r3, #1
 8008400:	0692      	lsls	r2, r2, #26
 8008402:	d42b      	bmi.n	800845c <_printf_common+0xb0>
 8008404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008408:	4649      	mov	r1, r9
 800840a:	4638      	mov	r0, r7
 800840c:	47c0      	blx	r8
 800840e:	3001      	adds	r0, #1
 8008410:	d01e      	beq.n	8008450 <_printf_common+0xa4>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	68e5      	ldr	r5, [r4, #12]
 8008416:	6832      	ldr	r2, [r6, #0]
 8008418:	f003 0306 	and.w	r3, r3, #6
 800841c:	2b04      	cmp	r3, #4
 800841e:	bf08      	it	eq
 8008420:	1aad      	subeq	r5, r5, r2
 8008422:	68a3      	ldr	r3, [r4, #8]
 8008424:	6922      	ldr	r2, [r4, #16]
 8008426:	bf0c      	ite	eq
 8008428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800842c:	2500      	movne	r5, #0
 800842e:	4293      	cmp	r3, r2
 8008430:	bfc4      	itt	gt
 8008432:	1a9b      	subgt	r3, r3, r2
 8008434:	18ed      	addgt	r5, r5, r3
 8008436:	2600      	movs	r6, #0
 8008438:	341a      	adds	r4, #26
 800843a:	42b5      	cmp	r5, r6
 800843c:	d11a      	bne.n	8008474 <_printf_common+0xc8>
 800843e:	2000      	movs	r0, #0
 8008440:	e008      	b.n	8008454 <_printf_common+0xa8>
 8008442:	2301      	movs	r3, #1
 8008444:	4652      	mov	r2, sl
 8008446:	4649      	mov	r1, r9
 8008448:	4638      	mov	r0, r7
 800844a:	47c0      	blx	r8
 800844c:	3001      	adds	r0, #1
 800844e:	d103      	bne.n	8008458 <_printf_common+0xac>
 8008450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008458:	3501      	adds	r5, #1
 800845a:	e7c6      	b.n	80083ea <_printf_common+0x3e>
 800845c:	18e1      	adds	r1, r4, r3
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	2030      	movs	r0, #48	; 0x30
 8008462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008466:	4422      	add	r2, r4
 8008468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800846c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008470:	3302      	adds	r3, #2
 8008472:	e7c7      	b.n	8008404 <_printf_common+0x58>
 8008474:	2301      	movs	r3, #1
 8008476:	4622      	mov	r2, r4
 8008478:	4649      	mov	r1, r9
 800847a:	4638      	mov	r0, r7
 800847c:	47c0      	blx	r8
 800847e:	3001      	adds	r0, #1
 8008480:	d0e6      	beq.n	8008450 <_printf_common+0xa4>
 8008482:	3601      	adds	r6, #1
 8008484:	e7d9      	b.n	800843a <_printf_common+0x8e>
	...

08008488 <_printf_i>:
 8008488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800848c:	460c      	mov	r4, r1
 800848e:	4691      	mov	r9, r2
 8008490:	7e27      	ldrb	r7, [r4, #24]
 8008492:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008494:	2f78      	cmp	r7, #120	; 0x78
 8008496:	4680      	mov	r8, r0
 8008498:	469a      	mov	sl, r3
 800849a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800849e:	d807      	bhi.n	80084b0 <_printf_i+0x28>
 80084a0:	2f62      	cmp	r7, #98	; 0x62
 80084a2:	d80a      	bhi.n	80084ba <_printf_i+0x32>
 80084a4:	2f00      	cmp	r7, #0
 80084a6:	f000 80d8 	beq.w	800865a <_printf_i+0x1d2>
 80084aa:	2f58      	cmp	r7, #88	; 0x58
 80084ac:	f000 80a3 	beq.w	80085f6 <_printf_i+0x16e>
 80084b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084b8:	e03a      	b.n	8008530 <_printf_i+0xa8>
 80084ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084be:	2b15      	cmp	r3, #21
 80084c0:	d8f6      	bhi.n	80084b0 <_printf_i+0x28>
 80084c2:	a001      	add	r0, pc, #4	; (adr r0, 80084c8 <_printf_i+0x40>)
 80084c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084c8:	08008521 	.word	0x08008521
 80084cc:	08008535 	.word	0x08008535
 80084d0:	080084b1 	.word	0x080084b1
 80084d4:	080084b1 	.word	0x080084b1
 80084d8:	080084b1 	.word	0x080084b1
 80084dc:	080084b1 	.word	0x080084b1
 80084e0:	08008535 	.word	0x08008535
 80084e4:	080084b1 	.word	0x080084b1
 80084e8:	080084b1 	.word	0x080084b1
 80084ec:	080084b1 	.word	0x080084b1
 80084f0:	080084b1 	.word	0x080084b1
 80084f4:	08008641 	.word	0x08008641
 80084f8:	08008565 	.word	0x08008565
 80084fc:	08008623 	.word	0x08008623
 8008500:	080084b1 	.word	0x080084b1
 8008504:	080084b1 	.word	0x080084b1
 8008508:	08008663 	.word	0x08008663
 800850c:	080084b1 	.word	0x080084b1
 8008510:	08008565 	.word	0x08008565
 8008514:	080084b1 	.word	0x080084b1
 8008518:	080084b1 	.word	0x080084b1
 800851c:	0800862b 	.word	0x0800862b
 8008520:	680b      	ldr	r3, [r1, #0]
 8008522:	1d1a      	adds	r2, r3, #4
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	600a      	str	r2, [r1, #0]
 8008528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800852c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008530:	2301      	movs	r3, #1
 8008532:	e0a3      	b.n	800867c <_printf_i+0x1f4>
 8008534:	6825      	ldr	r5, [r4, #0]
 8008536:	6808      	ldr	r0, [r1, #0]
 8008538:	062e      	lsls	r6, r5, #24
 800853a:	f100 0304 	add.w	r3, r0, #4
 800853e:	d50a      	bpl.n	8008556 <_printf_i+0xce>
 8008540:	6805      	ldr	r5, [r0, #0]
 8008542:	600b      	str	r3, [r1, #0]
 8008544:	2d00      	cmp	r5, #0
 8008546:	da03      	bge.n	8008550 <_printf_i+0xc8>
 8008548:	232d      	movs	r3, #45	; 0x2d
 800854a:	426d      	negs	r5, r5
 800854c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008550:	485e      	ldr	r0, [pc, #376]	; (80086cc <_printf_i+0x244>)
 8008552:	230a      	movs	r3, #10
 8008554:	e019      	b.n	800858a <_printf_i+0x102>
 8008556:	f015 0f40 	tst.w	r5, #64	; 0x40
 800855a:	6805      	ldr	r5, [r0, #0]
 800855c:	600b      	str	r3, [r1, #0]
 800855e:	bf18      	it	ne
 8008560:	b22d      	sxthne	r5, r5
 8008562:	e7ef      	b.n	8008544 <_printf_i+0xbc>
 8008564:	680b      	ldr	r3, [r1, #0]
 8008566:	6825      	ldr	r5, [r4, #0]
 8008568:	1d18      	adds	r0, r3, #4
 800856a:	6008      	str	r0, [r1, #0]
 800856c:	0628      	lsls	r0, r5, #24
 800856e:	d501      	bpl.n	8008574 <_printf_i+0xec>
 8008570:	681d      	ldr	r5, [r3, #0]
 8008572:	e002      	b.n	800857a <_printf_i+0xf2>
 8008574:	0669      	lsls	r1, r5, #25
 8008576:	d5fb      	bpl.n	8008570 <_printf_i+0xe8>
 8008578:	881d      	ldrh	r5, [r3, #0]
 800857a:	4854      	ldr	r0, [pc, #336]	; (80086cc <_printf_i+0x244>)
 800857c:	2f6f      	cmp	r7, #111	; 0x6f
 800857e:	bf0c      	ite	eq
 8008580:	2308      	moveq	r3, #8
 8008582:	230a      	movne	r3, #10
 8008584:	2100      	movs	r1, #0
 8008586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800858a:	6866      	ldr	r6, [r4, #4]
 800858c:	60a6      	str	r6, [r4, #8]
 800858e:	2e00      	cmp	r6, #0
 8008590:	bfa2      	ittt	ge
 8008592:	6821      	ldrge	r1, [r4, #0]
 8008594:	f021 0104 	bicge.w	r1, r1, #4
 8008598:	6021      	strge	r1, [r4, #0]
 800859a:	b90d      	cbnz	r5, 80085a0 <_printf_i+0x118>
 800859c:	2e00      	cmp	r6, #0
 800859e:	d04d      	beq.n	800863c <_printf_i+0x1b4>
 80085a0:	4616      	mov	r6, r2
 80085a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80085a6:	fb03 5711 	mls	r7, r3, r1, r5
 80085aa:	5dc7      	ldrb	r7, [r0, r7]
 80085ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085b0:	462f      	mov	r7, r5
 80085b2:	42bb      	cmp	r3, r7
 80085b4:	460d      	mov	r5, r1
 80085b6:	d9f4      	bls.n	80085a2 <_printf_i+0x11a>
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d10b      	bne.n	80085d4 <_printf_i+0x14c>
 80085bc:	6823      	ldr	r3, [r4, #0]
 80085be:	07df      	lsls	r7, r3, #31
 80085c0:	d508      	bpl.n	80085d4 <_printf_i+0x14c>
 80085c2:	6923      	ldr	r3, [r4, #16]
 80085c4:	6861      	ldr	r1, [r4, #4]
 80085c6:	4299      	cmp	r1, r3
 80085c8:	bfde      	ittt	le
 80085ca:	2330      	movle	r3, #48	; 0x30
 80085cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085d0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80085d4:	1b92      	subs	r2, r2, r6
 80085d6:	6122      	str	r2, [r4, #16]
 80085d8:	f8cd a000 	str.w	sl, [sp]
 80085dc:	464b      	mov	r3, r9
 80085de:	aa03      	add	r2, sp, #12
 80085e0:	4621      	mov	r1, r4
 80085e2:	4640      	mov	r0, r8
 80085e4:	f7ff fee2 	bl	80083ac <_printf_common>
 80085e8:	3001      	adds	r0, #1
 80085ea:	d14c      	bne.n	8008686 <_printf_i+0x1fe>
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085f0:	b004      	add	sp, #16
 80085f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f6:	4835      	ldr	r0, [pc, #212]	; (80086cc <_printf_i+0x244>)
 80085f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	680e      	ldr	r6, [r1, #0]
 8008600:	061f      	lsls	r7, r3, #24
 8008602:	f856 5b04 	ldr.w	r5, [r6], #4
 8008606:	600e      	str	r6, [r1, #0]
 8008608:	d514      	bpl.n	8008634 <_printf_i+0x1ac>
 800860a:	07d9      	lsls	r1, r3, #31
 800860c:	bf44      	itt	mi
 800860e:	f043 0320 	orrmi.w	r3, r3, #32
 8008612:	6023      	strmi	r3, [r4, #0]
 8008614:	b91d      	cbnz	r5, 800861e <_printf_i+0x196>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	f023 0320 	bic.w	r3, r3, #32
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	2310      	movs	r3, #16
 8008620:	e7b0      	b.n	8008584 <_printf_i+0xfc>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	f043 0320 	orr.w	r3, r3, #32
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	2378      	movs	r3, #120	; 0x78
 800862c:	4828      	ldr	r0, [pc, #160]	; (80086d0 <_printf_i+0x248>)
 800862e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008632:	e7e3      	b.n	80085fc <_printf_i+0x174>
 8008634:	065e      	lsls	r6, r3, #25
 8008636:	bf48      	it	mi
 8008638:	b2ad      	uxthmi	r5, r5
 800863a:	e7e6      	b.n	800860a <_printf_i+0x182>
 800863c:	4616      	mov	r6, r2
 800863e:	e7bb      	b.n	80085b8 <_printf_i+0x130>
 8008640:	680b      	ldr	r3, [r1, #0]
 8008642:	6826      	ldr	r6, [r4, #0]
 8008644:	6960      	ldr	r0, [r4, #20]
 8008646:	1d1d      	adds	r5, r3, #4
 8008648:	600d      	str	r5, [r1, #0]
 800864a:	0635      	lsls	r5, r6, #24
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	d501      	bpl.n	8008654 <_printf_i+0x1cc>
 8008650:	6018      	str	r0, [r3, #0]
 8008652:	e002      	b.n	800865a <_printf_i+0x1d2>
 8008654:	0671      	lsls	r1, r6, #25
 8008656:	d5fb      	bpl.n	8008650 <_printf_i+0x1c8>
 8008658:	8018      	strh	r0, [r3, #0]
 800865a:	2300      	movs	r3, #0
 800865c:	6123      	str	r3, [r4, #16]
 800865e:	4616      	mov	r6, r2
 8008660:	e7ba      	b.n	80085d8 <_printf_i+0x150>
 8008662:	680b      	ldr	r3, [r1, #0]
 8008664:	1d1a      	adds	r2, r3, #4
 8008666:	600a      	str	r2, [r1, #0]
 8008668:	681e      	ldr	r6, [r3, #0]
 800866a:	6862      	ldr	r2, [r4, #4]
 800866c:	2100      	movs	r1, #0
 800866e:	4630      	mov	r0, r6
 8008670:	f7f7 fdae 	bl	80001d0 <memchr>
 8008674:	b108      	cbz	r0, 800867a <_printf_i+0x1f2>
 8008676:	1b80      	subs	r0, r0, r6
 8008678:	6060      	str	r0, [r4, #4]
 800867a:	6863      	ldr	r3, [r4, #4]
 800867c:	6123      	str	r3, [r4, #16]
 800867e:	2300      	movs	r3, #0
 8008680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008684:	e7a8      	b.n	80085d8 <_printf_i+0x150>
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	4632      	mov	r2, r6
 800868a:	4649      	mov	r1, r9
 800868c:	4640      	mov	r0, r8
 800868e:	47d0      	blx	sl
 8008690:	3001      	adds	r0, #1
 8008692:	d0ab      	beq.n	80085ec <_printf_i+0x164>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	079b      	lsls	r3, r3, #30
 8008698:	d413      	bmi.n	80086c2 <_printf_i+0x23a>
 800869a:	68e0      	ldr	r0, [r4, #12]
 800869c:	9b03      	ldr	r3, [sp, #12]
 800869e:	4298      	cmp	r0, r3
 80086a0:	bfb8      	it	lt
 80086a2:	4618      	movlt	r0, r3
 80086a4:	e7a4      	b.n	80085f0 <_printf_i+0x168>
 80086a6:	2301      	movs	r3, #1
 80086a8:	4632      	mov	r2, r6
 80086aa:	4649      	mov	r1, r9
 80086ac:	4640      	mov	r0, r8
 80086ae:	47d0      	blx	sl
 80086b0:	3001      	adds	r0, #1
 80086b2:	d09b      	beq.n	80085ec <_printf_i+0x164>
 80086b4:	3501      	adds	r5, #1
 80086b6:	68e3      	ldr	r3, [r4, #12]
 80086b8:	9903      	ldr	r1, [sp, #12]
 80086ba:	1a5b      	subs	r3, r3, r1
 80086bc:	42ab      	cmp	r3, r5
 80086be:	dcf2      	bgt.n	80086a6 <_printf_i+0x21e>
 80086c0:	e7eb      	b.n	800869a <_printf_i+0x212>
 80086c2:	2500      	movs	r5, #0
 80086c4:	f104 0619 	add.w	r6, r4, #25
 80086c8:	e7f5      	b.n	80086b6 <_printf_i+0x22e>
 80086ca:	bf00      	nop
 80086cc:	080089e1 	.word	0x080089e1
 80086d0:	080089f2 	.word	0x080089f2

080086d4 <_sbrk_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d06      	ldr	r5, [pc, #24]	; (80086f0 <_sbrk_r+0x1c>)
 80086d8:	2300      	movs	r3, #0
 80086da:	4604      	mov	r4, r0
 80086dc:	4608      	mov	r0, r1
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	f7f8 fb0c 	bl	8000cfc <_sbrk>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_sbrk_r+0x1a>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_sbrk_r+0x1a>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20001b04 	.word	0x20001b04

080086f4 <__sread>:
 80086f4:	b510      	push	{r4, lr}
 80086f6:	460c      	mov	r4, r1
 80086f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fc:	f000 f8a0 	bl	8008840 <_read_r>
 8008700:	2800      	cmp	r0, #0
 8008702:	bfab      	itete	ge
 8008704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008706:	89a3      	ldrhlt	r3, [r4, #12]
 8008708:	181b      	addge	r3, r3, r0
 800870a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800870e:	bfac      	ite	ge
 8008710:	6563      	strge	r3, [r4, #84]	; 0x54
 8008712:	81a3      	strhlt	r3, [r4, #12]
 8008714:	bd10      	pop	{r4, pc}

08008716 <__swrite>:
 8008716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800871a:	461f      	mov	r7, r3
 800871c:	898b      	ldrh	r3, [r1, #12]
 800871e:	05db      	lsls	r3, r3, #23
 8008720:	4605      	mov	r5, r0
 8008722:	460c      	mov	r4, r1
 8008724:	4616      	mov	r6, r2
 8008726:	d505      	bpl.n	8008734 <__swrite+0x1e>
 8008728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872c:	2302      	movs	r3, #2
 800872e:	2200      	movs	r2, #0
 8008730:	f000 f868 	bl	8008804 <_lseek_r>
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800873a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800873e:	81a3      	strh	r3, [r4, #12]
 8008740:	4632      	mov	r2, r6
 8008742:	463b      	mov	r3, r7
 8008744:	4628      	mov	r0, r5
 8008746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800874a:	f000 b817 	b.w	800877c <_write_r>

0800874e <__sseek>:
 800874e:	b510      	push	{r4, lr}
 8008750:	460c      	mov	r4, r1
 8008752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008756:	f000 f855 	bl	8008804 <_lseek_r>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	bf15      	itete	ne
 8008760:	6560      	strne	r0, [r4, #84]	; 0x54
 8008762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800876a:	81a3      	strheq	r3, [r4, #12]
 800876c:	bf18      	it	ne
 800876e:	81a3      	strhne	r3, [r4, #12]
 8008770:	bd10      	pop	{r4, pc}

08008772 <__sclose>:
 8008772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008776:	f000 b813 	b.w	80087a0 <_close_r>
	...

0800877c <_write_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d07      	ldr	r5, [pc, #28]	; (800879c <_write_r+0x20>)
 8008780:	4604      	mov	r4, r0
 8008782:	4608      	mov	r0, r1
 8008784:	4611      	mov	r1, r2
 8008786:	2200      	movs	r2, #0
 8008788:	602a      	str	r2, [r5, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	f7f8 fa65 	bl	8000c5a <_write>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d102      	bne.n	800879a <_write_r+0x1e>
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	b103      	cbz	r3, 800879a <_write_r+0x1e>
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	20001b04 	.word	0x20001b04

080087a0 <_close_r>:
 80087a0:	b538      	push	{r3, r4, r5, lr}
 80087a2:	4d06      	ldr	r5, [pc, #24]	; (80087bc <_close_r+0x1c>)
 80087a4:	2300      	movs	r3, #0
 80087a6:	4604      	mov	r4, r0
 80087a8:	4608      	mov	r0, r1
 80087aa:	602b      	str	r3, [r5, #0]
 80087ac:	f7f8 fa71 	bl	8000c92 <_close>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d102      	bne.n	80087ba <_close_r+0x1a>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	b103      	cbz	r3, 80087ba <_close_r+0x1a>
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	20001b04 	.word	0x20001b04

080087c0 <_fstat_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d07      	ldr	r5, [pc, #28]	; (80087e0 <_fstat_r+0x20>)
 80087c4:	2300      	movs	r3, #0
 80087c6:	4604      	mov	r4, r0
 80087c8:	4608      	mov	r0, r1
 80087ca:	4611      	mov	r1, r2
 80087cc:	602b      	str	r3, [r5, #0]
 80087ce:	f7f8 fa6c 	bl	8000caa <_fstat>
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	d102      	bne.n	80087dc <_fstat_r+0x1c>
 80087d6:	682b      	ldr	r3, [r5, #0]
 80087d8:	b103      	cbz	r3, 80087dc <_fstat_r+0x1c>
 80087da:	6023      	str	r3, [r4, #0]
 80087dc:	bd38      	pop	{r3, r4, r5, pc}
 80087de:	bf00      	nop
 80087e0:	20001b04 	.word	0x20001b04

080087e4 <_isatty_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d06      	ldr	r5, [pc, #24]	; (8008800 <_isatty_r+0x1c>)
 80087e8:	2300      	movs	r3, #0
 80087ea:	4604      	mov	r4, r0
 80087ec:	4608      	mov	r0, r1
 80087ee:	602b      	str	r3, [r5, #0]
 80087f0:	f7f8 fa6b 	bl	8000cca <_isatty>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_isatty_r+0x1a>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_isatty_r+0x1a>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20001b04 	.word	0x20001b04

08008804 <_lseek_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d07      	ldr	r5, [pc, #28]	; (8008824 <_lseek_r+0x20>)
 8008808:	4604      	mov	r4, r0
 800880a:	4608      	mov	r0, r1
 800880c:	4611      	mov	r1, r2
 800880e:	2200      	movs	r2, #0
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f7f8 fa64 	bl	8000ce0 <_lseek>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_lseek_r+0x1e>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_lseek_r+0x1e>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	20001b04 	.word	0x20001b04

08008828 <__malloc_lock>:
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <__malloc_lock+0x8>)
 800882a:	f7ff bb55 	b.w	8007ed8 <__retarget_lock_acquire_recursive>
 800882e:	bf00      	nop
 8008830:	20001afc 	.word	0x20001afc

08008834 <__malloc_unlock>:
 8008834:	4801      	ldr	r0, [pc, #4]	; (800883c <__malloc_unlock+0x8>)
 8008836:	f7ff bb50 	b.w	8007eda <__retarget_lock_release_recursive>
 800883a:	bf00      	nop
 800883c:	20001afc 	.word	0x20001afc

08008840 <_read_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4d07      	ldr	r5, [pc, #28]	; (8008860 <_read_r+0x20>)
 8008844:	4604      	mov	r4, r0
 8008846:	4608      	mov	r0, r1
 8008848:	4611      	mov	r1, r2
 800884a:	2200      	movs	r2, #0
 800884c:	602a      	str	r2, [r5, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	f7f8 f9e6 	bl	8000c20 <_read>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_read_r+0x1e>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_read_r+0x1e>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	20001b04 	.word	0x20001b04

08008864 <_init>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	bf00      	nop
 8008868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886a:	bc08      	pop	{r3}
 800886c:	469e      	mov	lr, r3
 800886e:	4770      	bx	lr

08008870 <_fini>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	bf00      	nop
 8008874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008876:	bc08      	pop	{r3}
 8008878:	469e      	mov	lr, r3
 800887a:	4770      	bx	lr
