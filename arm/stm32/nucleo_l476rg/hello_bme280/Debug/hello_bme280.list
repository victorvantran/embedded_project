
hello_bme280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e16c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800e300  0800e300  0001e300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eac4  0800eac4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eac4  0800eac4  0001eac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eacc  0800eacc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eacc  0800eacc  0001eacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ead0  0800ead0  0001ead0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ead4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b18  200001e4  0800ecb8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cfc  0800ecb8  00021cfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026785  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004475  00000000  00000000  00046999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d40  00000000  00000000  0004ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba8  00000000  00000000  0004cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a57f  00000000  00000000  0004e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f722  00000000  00000000  00078c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103a36  00000000  00000000  00098399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019bdcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092b4  00000000  00000000  0019be24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e2e4 	.word	0x0800e2e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800e2e4 	.word	0x0800e2e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <BME280_SPI_vInit>:

/* SPI */
void BME280_SPI_vInit(BME280Handle_t *pxBME280,
		SPI_HandleTypeDef *pxSPIHandle,
		GPIO_TypeDef *pxSPICSGPIO, uint16_t uSPICSGPIOPIN)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	807b      	strh	r3, [r7, #2]
	pxBME280->pxI2CHandle = NULL;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
	pxBME280->uI2CSlaveAddress = 0;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	711a      	strb	r2, [r3, #4]

	pxBME280->pxSPIHandle = pxSPIHandle;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	609a      	str	r2, [r3, #8]
	pxBME280->pxSPICSGPIO = pxSPICSGPIO;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	60da      	str	r2, [r3, #12]
	pxBME280->uSPICSGPIOPIN = uSPICSGPIOPIN;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	821a      	strh	r2, [r3, #16]

	pxBME280->xMeasureRegData = xDefaultMeasureRegData;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	333c      	adds	r3, #60	; 0x3c
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
	pxBME280->xMeasureRawData = xDefaultMeasureRawData;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3344      	adds	r3, #68	; 0x44
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]

	BME280_SPI_vReadCalibrationData(pxBME280);
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f000 f836 	bl	80010a0 <BME280_SPI_vReadCalibrationData>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <BME280_SPI_vSetMode>:


HAL_StatusTypeDef BME280_SPI_vSetMode(BME280Handle_t *pxBME280)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	if (pxBME280->pxSPIHandle->Init.CLKPolarity == BME280_SPI_CPOL && pxBME280->pxSPIHandle->Init.CLKPhase == BME280_SPI_CPHA) return HAL_OK;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d106      	bne.n	800105c <BME280_SPI_vSetMode+0x20>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <BME280_SPI_vSetMode+0x20>
 8001058:	2300      	movs	r3, #0
 800105a:	e01c      	b.n	8001096 <BME280_SPI_vSetMode+0x5a>

	/* Reinit SPI with proper clock speed and spi mode for the peripheral */
	if (HAL_SPI_DeInit(pxBME280->pxSPIHandle) != HAL_OK) return HAL_ERROR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4618      	mov	r0, r3
 8001062:	f004 f890 	bl	8005186 <HAL_SPI_DeInit>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <BME280_SPI_vSetMode+0x34>
 800106c:	2301      	movs	r3, #1
 800106e:	e012      	b.n	8001096 <BME280_SPI_vSetMode+0x5a>
	/* [!] Change clock speed based on baud prescaler given FCPU and BME280_SPI_FCLK_KHZ */
	// pxBME280->pxSPIHandle->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
	pxBME280->pxSPIHandle->Init.CLKPolarity = BME280_SPI_CPOL;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
	pxBME280->pxSPIHandle->Init.CLKPhase = BME280_SPI_CPHA;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
	if (HAL_SPI_Init(pxBME280->pxSPIHandle) != HAL_OK) return HAL_ERROR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4618      	mov	r0, r3
 8001086:	f003 ffdb 	bl	8005040 <HAL_SPI_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <BME280_SPI_vSetMode+0x58>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <BME280_SPI_vSetMode+0x5a>

	return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <BME280_SPI_vReadCalibrationData>:
	printf("Chip ID: %d\r\n", (int16_t)ucChipID);
}


void BME280_SPI_vReadCalibrationData(BME280Handle_t *pxBME280)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	static const uint8_t ucReadCalibrateAddressA = BME280_SPI_READ | (BME280_CALIBRATE_ADDRESS_A & 0x7F);
	static const uint8_t ucReadCalibrateAddressB = BME280_SPI_READ | (BME280_CALIBRATE_ADDRESS_B & 0x7F);

	BME280_SPI_vSetMode(pxBME280);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ffc7 	bl	800103c <BME280_SPI_vSetMode>
	HAL_GPIO_WritePin(pxBME280->pxSPICSGPIO, pxBME280->uSPICSGPIOPIN, GPIO_PIN_RESET);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68d8      	ldr	r0, [r3, #12]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	8a1b      	ldrh	r3, [r3, #16]
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	f001 fdad 	bl	8002c18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pxBME280->pxSPIHandle, &ucReadCalibrateAddressA, sizeof(ucReadCalibrateAddressA), 50);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6898      	ldr	r0, [r3, #8]
 80010c2:	2332      	movs	r3, #50	; 0x32
 80010c4:	2201      	movs	r2, #1
 80010c6:	4937      	ldr	r1, [pc, #220]	; (80011a4 <BME280_SPI_vReadCalibrationData+0x104>)
 80010c8:	f004 f885 	bl	80051d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(pxBME280->pxSPIHandle, (uint8_t *)&(pxBME280->xCalibrationData), BME280_CALIBRATE_BYTE_SIZE_A, 50);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6898      	ldr	r0, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f103 0114 	add.w	r1, r3, #20
 80010d6:	2332      	movs	r3, #50	; 0x32
 80010d8:	2219      	movs	r2, #25
 80010da:	f004 f9ea 	bl	80054b2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(pxBME280->pxSPICSGPIO, pxBME280->uSPICSGPIOPIN, GPIO_PIN_SET);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68d8      	ldr	r0, [r3, #12]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	8a1b      	ldrh	r3, [r3, #16]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4619      	mov	r1, r3
 80010ea:	f001 fd95 	bl	8002c18 <HAL_GPIO_WritePin>

	BME280CalibrationBRegData xCalibrationBRegData = {0};
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	f8c3 2003 	str.w	r2, [r3, #3]
	BME280_SPI_vSetMode(pxBME280);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff9e 	bl	800103c <BME280_SPI_vSetMode>
	HAL_GPIO_WritePin(pxBME280->pxSPICSGPIO, pxBME280->uSPICSGPIOPIN, GPIO_PIN_RESET);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68d8      	ldr	r0, [r3, #12]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	8a1b      	ldrh	r3, [r3, #16]
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	f001 fd84 	bl	8002c18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pxBME280->pxSPIHandle, &ucReadCalibrateAddressB, sizeof(ucReadCalibrateAddressB), 50);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6898      	ldr	r0, [r3, #8]
 8001114:	2332      	movs	r3, #50	; 0x32
 8001116:	2201      	movs	r2, #1
 8001118:	4923      	ldr	r1, [pc, #140]	; (80011a8 <BME280_SPI_vReadCalibrationData+0x108>)
 800111a:	f004 f85c 	bl	80051d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(pxBME280->pxSPIHandle, (uint8_t *)&xCalibrationBRegData, BME280_CALIBRATE_BYTE_SIZE_B, 50);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6898      	ldr	r0, [r3, #8]
 8001122:	f107 0108 	add.w	r1, r7, #8
 8001126:	2332      	movs	r3, #50	; 0x32
 8001128:	2208      	movs	r2, #8
 800112a:	f004 f9c2 	bl	80054b2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(pxBME280->pxSPICSGPIO, pxBME280->uSPICSGPIOPIN, GPIO_PIN_SET);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68d8      	ldr	r0, [r3, #12]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	8a1b      	ldrh	r3, [r3, #16]
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	f001 fd6d 	bl	8002c18 <HAL_GPIO_WritePin>

	/* Realign */
	pxBME280->xCalibrationData.xDigH.usH2 = ((uint16_t)xCalibrationBRegData.uc0xE2 << 8) + ((uint16_t)xCalibrationBRegData.uc0xE1);
 800113e:	7a7b      	ldrb	r3, [r7, #9]
 8001140:	b29b      	uxth	r3, r3
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b29a      	uxth	r2, r3
 8001146:	7a3b      	ldrb	r3, [r7, #8]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4413      	add	r3, r2
 800114c:	b29b      	uxth	r3, r3
 800114e:	b21a      	sxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	85da      	strh	r2, [r3, #46]	; 0x2e
	pxBME280->xCalibrationData.xDigH.ucH3 = xCalibrationBRegData.uc0xE3;
 8001154:	7aba      	ldrb	r2, [r7, #10]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pxBME280->xCalibrationData.xDigH.sH4 = ((uint16_t)xCalibrationBRegData.uc0xE4 << 4) + ((uint16_t)(xCalibrationBRegData.uc0xE5 & 0x0F));
 800115c:	7afb      	ldrb	r3, [r7, #11]
 800115e:	b29b      	uxth	r3, r3
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	b29a      	uxth	r2, r3
 8001164:	7b3b      	ldrb	r3, [r7, #12]
 8001166:	b29b      	uxth	r3, r3
 8001168:	f003 030f 	and.w	r3, r3, #15
 800116c:	b29b      	uxth	r3, r3
 800116e:	4413      	add	r3, r2
 8001170:	b29b      	uxth	r3, r3
 8001172:	b21a      	sxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	865a      	strh	r2, [r3, #50]	; 0x32
	pxBME280->xCalibrationData.xDigH.sH5 = ((uint16_t)(xCalibrationBRegData.uc0xE6) << 4) + ((uint16_t)((xCalibrationBRegData.uc0xE5 & 0xF0) >> 4));
 8001178:	7b7b      	ldrb	r3, [r7, #13]
 800117a:	b29b      	uxth	r3, r3
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	b29a      	uxth	r2, r3
 8001180:	7b3b      	ldrb	r3, [r7, #12]
 8001182:	091b      	lsrs	r3, r3, #4
 8001184:	b2db      	uxtb	r3, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	4413      	add	r3, r2
 800118a:	b29b      	uxth	r3, r3
 800118c:	b21a      	sxth	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	869a      	strh	r2, [r3, #52]	; 0x34
	pxBME280->xCalibrationData.xDigH.cH6 = ((int8_t)(xCalibrationBRegData.uc0xE7));
 8001192:	7bbb      	ldrb	r3, [r7, #14]
 8001194:	b25a      	sxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	0800e585 	.word	0x0800e585
 80011a8:	0800e586 	.word	0x0800e586

080011ac <BME280_SPI_vMeasureForced>:

void BME280_SPI_vMeasureForced(BME280Handle_t *pxBME280,
		uint8_t uPressureOversample,
		uint8_t uTemperatureOversample,
		uint8_t uHumidityOversample)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4608      	mov	r0, r1
 80011b6:	4611      	mov	r1, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	70fb      	strb	r3, [r7, #3]
 80011be:	460b      	mov	r3, r1
 80011c0:	70bb      	strb	r3, [r7, #2]
 80011c2:	4613      	mov	r3, r2
 80011c4:	707b      	strb	r3, [r7, #1]
	static const uint8_t ucControlWriteCtrlHum = BME280_SPI_WRITE | (BME280_CTRL_HUM_ADDRESS & 0x7F);
	uint8_t uDataWriteCtrlHum 	= (0b00000111 & uHumidityOversample);
 80011c6:	787b      	ldrb	r3, [r7, #1]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	73fb      	strb	r3, [r7, #15]

	static const uint8_t ucControlWriteCtrlMeas = BME280_SPI_WRITE | (BME280_CTRL_MEAS_ADDRESS & 0x7F);
	uint8_t uDataWriteCtrlMeas	=	(uTemperatureOversample << 5) | (uPressureOversample << 2) | (BME280_FORCED_MODE);
 80011d0:	78bb      	ldrb	r3, [r7, #2]
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	b25a      	sxtb	r2, r3
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	73bb      	strb	r3, [r7, #14]

	BME280_SPI_vSetMode(pxBME280);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff26 	bl	800103c <BME280_SPI_vSetMode>
	HAL_GPIO_WritePin(pxBME280->pxSPICSGPIO, pxBME280->uSPICSGPIOPIN, GPIO_PIN_RESET);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68d8      	ldr	r0, [r3, #12]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	8a1b      	ldrh	r3, [r3, #16]
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	f001 fd0c 	bl	8002c18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pxBME280->pxSPIHandle, &ucControlWriteCtrlHum, sizeof(ucControlWriteCtrlHum), 50);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6898      	ldr	r0, [r3, #8]
 8001204:	2332      	movs	r3, #50	; 0x32
 8001206:	2201      	movs	r2, #1
 8001208:	491c      	ldr	r1, [pc, #112]	; (800127c <BME280_SPI_vMeasureForced+0xd0>)
 800120a:	f003 ffe4 	bl	80051d6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(pxBME280->pxSPIHandle, &uDataWriteCtrlHum, sizeof(uDataWriteCtrlHum), 50);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6898      	ldr	r0, [r3, #8]
 8001212:	f107 010f 	add.w	r1, r7, #15
 8001216:	2332      	movs	r3, #50	; 0x32
 8001218:	2201      	movs	r2, #1
 800121a:	f003 ffdc 	bl	80051d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(pxBME280->pxSPICSGPIO, pxBME280->uSPICSGPIOPIN, GPIO_PIN_SET);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68d8      	ldr	r0, [r3, #12]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	8a1b      	ldrh	r3, [r3, #16]
 8001226:	2201      	movs	r2, #1
 8001228:	4619      	mov	r1, r3
 800122a:	f001 fcf5 	bl	8002c18 <HAL_GPIO_WritePin>

	BME280_SPI_vSetMode(pxBME280);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff04 	bl	800103c <BME280_SPI_vSetMode>
	HAL_GPIO_WritePin(pxBME280->pxSPICSGPIO, pxBME280->uSPICSGPIOPIN, GPIO_PIN_RESET);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68d8      	ldr	r0, [r3, #12]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	8a1b      	ldrh	r3, [r3, #16]
 800123c:	2200      	movs	r2, #0
 800123e:	4619      	mov	r1, r3
 8001240:	f001 fcea 	bl	8002c18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pxBME280->pxSPIHandle, &ucControlWriteCtrlMeas, sizeof(ucControlWriteCtrlMeas), 50);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6898      	ldr	r0, [r3, #8]
 8001248:	2332      	movs	r3, #50	; 0x32
 800124a:	2201      	movs	r2, #1
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <BME280_SPI_vMeasureForced+0xd4>)
 800124e:	f003 ffc2 	bl	80051d6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(pxBME280->pxSPIHandle, &uDataWriteCtrlMeas, sizeof(uDataWriteCtrlMeas), 50);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6898      	ldr	r0, [r3, #8]
 8001256:	f107 010e 	add.w	r1, r7, #14
 800125a:	2332      	movs	r3, #50	; 0x32
 800125c:	2201      	movs	r2, #1
 800125e:	f003 ffba 	bl	80051d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(pxBME280->pxSPICSGPIO, pxBME280->uSPICSGPIOPIN, GPIO_PIN_SET);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68d8      	ldr	r0, [r3, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	8a1b      	ldrh	r3, [r3, #16]
 800126a:	2201      	movs	r2, #1
 800126c:	4619      	mov	r1, r3
 800126e:	f001 fcd3 	bl	8002c18 <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	0800e587 	.word	0x0800e587
 8001280:	0800e588 	.word	0x0800e588

08001284 <BME280_SPI_vMeasureAllForced>:



void BME280_SPI_vMeasureAllForced(BME280Handle_t *pxBME280)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	return BME280_SPI_vMeasureForced(pxBME280, 1, 1, 1);
 800128c:	2301      	movs	r3, #1
 800128e:	2201      	movs	r2, #1
 8001290:	2101      	movs	r1, #1
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff8a 	bl	80011ac <BME280_SPI_vMeasureForced>
}
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <BME280_SPI_vReadRawData>:



void BME280_SPI_vReadRawData(BME280Handle_t *pxBME280)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	static const uint8_t ucControlReadMeasureData = BME280_SPI_READ | (BME280_MEASURE_DATA_ADDRESS & 0x7F);

	BME280_SPI_vSetMode(pxBME280);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fec7 	bl	800103c <BME280_SPI_vSetMode>
	HAL_GPIO_WritePin(pxBME280->pxSPICSGPIO, pxBME280->uSPICSGPIOPIN, GPIO_PIN_RESET);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68d8      	ldr	r0, [r3, #12]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	8a1b      	ldrh	r3, [r3, #16]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	f001 fcad 	bl	8002c18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pxBME280->pxSPIHandle, &ucControlReadMeasureData, sizeof(ucControlReadMeasureData), 50);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6898      	ldr	r0, [r3, #8]
 80012c2:	2332      	movs	r3, #50	; 0x32
 80012c4:	2201      	movs	r2, #1
 80012c6:	4925      	ldr	r1, [pc, #148]	; (800135c <BME280_SPI_vReadRawData+0xbc>)
 80012c8:	f003 ff85 	bl	80051d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(pxBME280->pxSPIHandle, (uint8_t *)&(pxBME280->xMeasureRegData), BME280_MEASURE_DATA_BYTE_SIZE, 50);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6898      	ldr	r0, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80012d6:	2332      	movs	r3, #50	; 0x32
 80012d8:	2208      	movs	r2, #8
 80012da:	f004 f8ea 	bl	80054b2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(pxBME280->pxSPICSGPIO, pxBME280->uSPICSGPIOPIN, GPIO_PIN_SET);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68d8      	ldr	r0, [r3, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	8a1b      	ldrh	r3, [r3, #16]
 80012e6:	2201      	movs	r2, #1
 80012e8:	4619      	mov	r1, r3
 80012ea:	f001 fc95 	bl	8002c18 <HAL_GPIO_WritePin>

	pxBME280->xMeasureRawData.ulPressureRawData =
			(pxBME280->xMeasureRegData.xPressureRegData.uMSB << 12) +
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f4:	031a      	lsls	r2, r3, #12
			(pxBME280->xMeasureRegData.xPressureRegData.uLSB << 4) +
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012fc:	011b      	lsls	r3, r3, #4
			(pxBME280->xMeasureRegData.xPressureRegData.uMSB << 12) +
 80012fe:	4413      	add	r3, r2
			(pxBME280->xMeasureRegData.xPressureRegData.uXLSB >> 4);
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001306:	0912      	lsrs	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
			(pxBME280->xMeasureRegData.xPressureRegData.uLSB << 4) +
 800130a:	4413      	add	r3, r2
 800130c:	461a      	mov	r2, r3
	pxBME280->xMeasureRawData.ulPressureRawData =
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	645a      	str	r2, [r3, #68]	; 0x44

	pxBME280->xMeasureRawData.ulTemperatureRawData =
			(pxBME280->xMeasureRegData.xTemperatureRegData.uMSB << 12) +
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001318:	031a      	lsls	r2, r3, #12
			(pxBME280->xMeasureRegData.xTemperatureRegData.uLSB << 4) +
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001320:	011b      	lsls	r3, r3, #4
			(pxBME280->xMeasureRegData.xTemperatureRegData.uMSB << 12) +
 8001322:	4413      	add	r3, r2
			(pxBME280->xMeasureRegData.xTemperatureRegData.uXLSB >> 4);
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 800132a:	0912      	lsrs	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
			(pxBME280->xMeasureRegData.xTemperatureRegData.uLSB << 4) +
 800132e:	4413      	add	r3, r2
 8001330:	461a      	mov	r2, r3
	pxBME280->xMeasureRawData.ulTemperatureRawData =
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	649a      	str	r2, [r3, #72]	; 0x48

	pxBME280->xMeasureRawData.uHumidityRawData =
			(pxBME280->xMeasureRegData.xHumidityRegData.uMSB << 8) +
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800133c:	b29b      	uxth	r3, r3
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b29a      	uxth	r2, r3
			(pxBME280->xMeasureRegData.xHumidityRegData.uLSB);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001348:	b29b      	uxth	r3, r3
			(pxBME280->xMeasureRegData.xHumidityRegData.uMSB << 8) +
 800134a:	4413      	add	r3, r2
 800134c:	b29a      	uxth	r2, r3
	pxBME280->xMeasureRawData.uHumidityRawData =
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0800e589 	.word	0x0800e589

08001360 <BME280_lCalculateTemperatureFine>:
}



int32_t BME280_lCalculateTemperatureFine(BME280Handle_t *pxBME280)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	int32_t lTemperatureRaw = pxBME280->xMeasureRawData.ulTemperatureRawData;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136c:	61fb      	str	r3, [r7, #28]
	int32_t lDigT1 = pxBME280->xCalibrationData.xDigT.usT1;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	8a9b      	ldrh	r3, [r3, #20]
 8001372:	61bb      	str	r3, [r7, #24]
	int32_t lDigT2 = pxBME280->xCalibrationData.xDigT.sT2;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800137a:	617b      	str	r3, [r7, #20]
	int32_t lDigT3 = pxBME280->xCalibrationData.xDigT.sT3;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001382:	613b      	str	r3, [r7, #16]

	int32_t lVar1;
	int32_t lVar2;

	lVar1 = (int32_t)((lTemperatureRaw >> 3) - (lDigT1 << 1));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	10da      	asrs	r2, r3, #3
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	60fb      	str	r3, [r7, #12]
	lVar1 = (lVar1 * lDigT2) >> 11;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	12db      	asrs	r3, r3, #11
 800139a:	60fb      	str	r3, [r7, #12]
	lVar2 = (int32_t)((lTemperatureRaw >> 4) - lDigT1);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	111a      	asrs	r2, r3, #4
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	60bb      	str	r3, [r7, #8]
	lVar2 = (((lVar2 * lVar2) >> 12) * lDigT3) >> 14;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	fb03 f303 	mul.w	r3, r3, r3
 80013ac:	131b      	asrs	r3, r3, #12
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	139b      	asrs	r3, r3, #14
 80013b6:	60bb      	str	r3, [r7, #8]
	pxBME280->xCalibrationData.lTemperatureFine = lVar1 + lVar2;
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	441a      	add	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	639a      	str	r2, [r3, #56]	; 0x38

	return pxBME280->xCalibrationData.lTemperatureFine;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <BME280_fCompensateTemperatureData>:
}



float BME280_fCompensateTemperatureData(BME280Handle_t *pxBME280)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	static const float fTemperatureMin = -40.0f;
	static const float fTemperatureMax = 85.0f;

	float fTemperature;

	fTemperature = (float)(BME280_lCalculateTemperatureFine(pxBME280)) / 5120.0f;
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ffbf 	bl	8001360 <BME280_lCalculateTemperatureFine>
 80013e2:	ee07 0a90 	vmov	s15, r0
 80013e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ea:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001444 <BME280_fCompensateTemperatureData+0x70>
 80013ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f2:	edc7 7a03 	vstr	s15, [r7, #12]
	fTemperature = fTemperature < fTemperatureMin ? fTemperatureMin : fTemperature;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <BME280_fCompensateTemperatureData+0x74>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001400:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	d502      	bpl.n	8001410 <BME280_fCompensateTemperatureData+0x3c>
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <BME280_fCompensateTemperatureData+0x74>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	e000      	b.n	8001412 <BME280_fCompensateTemperatureData+0x3e>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	60fb      	str	r3, [r7, #12]
	fTemperature = fTemperature > fTemperatureMax ? fTemperatureMax : fTemperature;
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <BME280_fCompensateTemperatureData+0x78>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	ed97 7a03 	vldr	s14, [r7, #12]
 800141e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	dd02      	ble.n	800142e <BME280_fCompensateTemperatureData+0x5a>
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <BME280_fCompensateTemperatureData+0x78>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	e000      	b.n	8001430 <BME280_fCompensateTemperatureData+0x5c>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	60fb      	str	r3, [r7, #12]

	return fTemperature;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	ee07 3a90 	vmov	s15, r3
}
 8001438:	eeb0 0a67 	vmov.f32	s0, s15
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	45a00000 	.word	0x45a00000
 8001448:	0800e58c 	.word	0x0800e58c
 800144c:	0800e590 	.word	0x0800e590

08001450 <BME280_fCompensatePressureData>:



float BME280_fCompensatePressureData(BME280Handle_t *pxBME280)
{
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b090      	sub	sp, #64	; 0x40
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	static const float fPressureMin = 30000.0f;
	static const float fPressureMax = 110000.0f;

	int32_t lPressureRaw = (int32_t)pxBME280->xMeasureRawData.ulPressureRawData;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t lTemperatureFine = pxBME280->xCalibrationData.lTemperatureFine;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	63bb      	str	r3, [r7, #56]	; 0x38
	float fDigP1 = (float)pxBME280->xCalibrationData.xDigP.usP1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	8b5b      	ldrh	r3, [r3, #26]
 8001468:	ee07 3a90 	vmov	s15, r3
 800146c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001470:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float fDigP2 = (float)pxBME280->xCalibrationData.xDigP.sP2;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001482:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float fDigP3 = (float)pxBME280->xCalibrationData.xDigP.sP3;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001494:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float fDigP4 = (float)pxBME280->xCalibrationData.xDigP.sP4;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float fDigP5 = (float)pxBME280->xCalibrationData.xDigP.sP5;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float fDigP6 = (float)pxBME280->xCalibrationData.xDigP.sP6;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	edc7 7a08 	vstr	s15, [r7, #32]
	float fDigP7 = (float)pxBME280->xCalibrationData.xDigP.sP7;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014dc:	edc7 7a07 	vstr	s15, [r7, #28]
	float fDigP8 = (float)pxBME280->xCalibrationData.xDigP.sP8;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ee:	edc7 7a06 	vstr	s15, [r7, #24]
	float fDigP9 = (float)pxBME280->xCalibrationData.xDigP.sP9;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001500:	edc7 7a05 	vstr	s15, [r7, #20]

	float fVar1, fVar2, fPressure;
	fVar1 = ((float)lTemperatureFine / 2.0f) - 64000.0f;
 8001504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001516:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80017c8 <BME280_fCompensatePressureData+0x378>
 800151a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800151e:	edc7 7a04 	vstr	s15, [r7, #16]
	fVar2 = fVar1 * fVar1 * (fDigP6) / 32768.0;
 8001522:	edd7 7a04 	vldr	s15, [r7, #16]
 8001526:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800152a:	edd7 7a08 	vldr	s15, [r7, #32]
 800152e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001532:	eddf 6aa6 	vldr	s13, [pc, #664]	; 80017cc <BME280_fCompensatePressureData+0x37c>
 8001536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153a:	edc7 7a03 	vstr	s15, [r7, #12]
	fVar2 = fVar2 + fVar1 * (fDigP5) * 2.0;
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff f802 	bl	8000548 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	ed97 7a04 	vldr	s14, [r7, #16]
 800154c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001554:	ee17 0a90 	vmov	r0, s15
 8001558:	f7fe fff6 	bl	8000548 <__aeabi_f2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	f7fe fe94 	bl	800028c <__adddf3>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7fe fe8e 	bl	800028c <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fb36 	bl	8000be8 <__aeabi_d2f>
 800157c:	4603      	mov	r3, r0
 800157e:	60fb      	str	r3, [r7, #12]
	fVar2 = (fVar2 / 4.0) + ((fDigP4) * 65536.0);
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7fe ffe1 	bl	8000548 <__aeabi_f2d>
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b91      	ldr	r3, [pc, #580]	; (80017d0 <BME280_fCompensatePressureData+0x380>)
 800158c:	f7ff f95e 	bl	800084c <__aeabi_ddiv>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4614      	mov	r4, r2
 8001596:	461d      	mov	r5, r3
 8001598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800159a:	f7fe ffd5 	bl	8000548 <__aeabi_f2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b8c      	ldr	r3, [pc, #560]	; (80017d4 <BME280_fCompensatePressureData+0x384>)
 80015a4:	f7ff f828 	bl	80005f8 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fe6c 	bl	800028c <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fb14 	bl	8000be8 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]
	fVar1 = ((fDigP3) * fVar1 * fVar1 / 524288.0 + (fDigP2) * fVar1) / 524288.0;
 80015c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d8:	ee17 0a90 	vmov	r0, s15
 80015dc:	f7fe ffb4 	bl	8000548 <__aeabi_f2d>
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b7c      	ldr	r3, [pc, #496]	; (80017d8 <BME280_fCompensatePressureData+0x388>)
 80015e6:	f7ff f931 	bl	800084c <__aeabi_ddiv>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4614      	mov	r4, r2
 80015f0:	461d      	mov	r5, r3
 80015f2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80015f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80015fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fe:	ee17 0a90 	vmov	r0, s15
 8001602:	f7fe ffa1 	bl	8000548 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4620      	mov	r0, r4
 800160c:	4629      	mov	r1, r5
 800160e:	f7fe fe3d 	bl	800028c <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b6e      	ldr	r3, [pc, #440]	; (80017d8 <BME280_fCompensatePressureData+0x388>)
 8001620:	f7ff f914 	bl	800084c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff fadc 	bl	8000be8 <__aeabi_d2f>
 8001630:	4603      	mov	r3, r0
 8001632:	613b      	str	r3, [r7, #16]
	fVar1 = (1.0 + fVar1 / 32768.0) * (fDigP1);
 8001634:	6938      	ldr	r0, [r7, #16]
 8001636:	f7fe ff87 	bl	8000548 <__aeabi_f2d>
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b67      	ldr	r3, [pc, #412]	; (80017dc <BME280_fCompensatePressureData+0x38c>)
 8001640:	f7ff f904 	bl	800084c <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <BME280_fCompensatePressureData+0x390>)
 8001652:	f7fe fe1b 	bl	800028c <__adddf3>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4614      	mov	r4, r2
 800165c:	461d      	mov	r5, r3
 800165e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001660:	f7fe ff72 	bl	8000548 <__aeabi_f2d>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4620      	mov	r0, r4
 800166a:	4629      	mov	r1, r5
 800166c:	f7fe ffc4 	bl	80005f8 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f7ff fab6 	bl	8000be8 <__aeabi_d2f>
 800167c:	4603      	mov	r3, r0
 800167e:	613b      	str	r3, [r7, #16]

	if (fVar1 == 0.0) return fPressureMin; /* Account for divide by zero */
 8001680:	edd7 7a04 	vldr	s15, [r7, #16]
 8001684:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	d102      	bne.n	8001694 <BME280_fCompensatePressureData+0x244>
 800168e:	4b55      	ldr	r3, [pc, #340]	; (80017e4 <BME280_fCompensatePressureData+0x394>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	e08d      	b.n	80017b0 <BME280_fCompensatePressureData+0x360>

	fPressure = 1048576.0 - (float)lPressureRaw;
 8001694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80017e8 <BME280_fCompensatePressureData+0x398>
 80016a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a6:	edc7 7a02 	vstr	s15, [r7, #8]
	fPressure = (fPressure - (fVar2 / 4096.0)) * 6250.0 / fVar1;
 80016aa:	68b8      	ldr	r0, [r7, #8]
 80016ac:	f7fe ff4c 	bl	8000548 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7fe ff47 	bl	8000548 <__aeabi_f2d>
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <BME280_fCompensatePressureData+0x39c>)
 80016c0:	f7ff f8c4 	bl	800084c <__aeabi_ddiv>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4620      	mov	r0, r4
 80016ca:	4629      	mov	r1, r5
 80016cc:	f7fe fddc 	bl	8000288 <__aeabi_dsub>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	a339      	add	r3, pc, #228	; (adr r3, 80017c0 <BME280_fCompensatePressureData+0x370>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe ff8b 	bl	80005f8 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4614      	mov	r4, r2
 80016e8:	461d      	mov	r5, r3
 80016ea:	6938      	ldr	r0, [r7, #16]
 80016ec:	f7fe ff2c 	bl	8000548 <__aeabi_f2d>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4620      	mov	r0, r4
 80016f6:	4629      	mov	r1, r5
 80016f8:	f7ff f8a8 	bl	800084c <__aeabi_ddiv>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa70 	bl	8000be8 <__aeabi_d2f>
 8001708:	4603      	mov	r3, r0
 800170a:	60bb      	str	r3, [r7, #8]
	fVar1 = (fDigP9) * fPressure * fPressure / 2147483648.0;
 800170c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001710:	edd7 7a02 	vldr	s15, [r7, #8]
 8001714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001718:	edd7 7a02 	vldr	s15, [r7, #8]
 800171c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001720:	eddf 6a33 	vldr	s13, [pc, #204]	; 80017f0 <BME280_fCompensatePressureData+0x3a0>
 8001724:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001728:	edc7 7a04 	vstr	s15, [r7, #16]
	fVar2 = fPressure * (fDigP8) / 32768.0;
 800172c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001730:	edd7 7a06 	vldr	s15, [r7, #24]
 8001734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001738:	eddf 6a24 	vldr	s13, [pc, #144]	; 80017cc <BME280_fCompensatePressureData+0x37c>
 800173c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001740:	edc7 7a03 	vstr	s15, [r7, #12]
	fPressure = fPressure + (fVar1 + fVar2 + (fDigP7)) / 16.0;
 8001744:	68b8      	ldr	r0, [r7, #8]
 8001746:	f7fe feff 	bl	8000548 <__aeabi_f2d>
 800174a:	4604      	mov	r4, r0
 800174c:	460d      	mov	r5, r1
 800174e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001752:	edd7 7a03 	vldr	s15, [r7, #12]
 8001756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800175a:	edd7 7a07 	vldr	s15, [r7, #28]
 800175e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001762:	ee17 0a90 	vmov	r0, s15
 8001766:	f7fe feef 	bl	8000548 <__aeabi_f2d>
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <BME280_fCompensatePressureData+0x3a4>)
 8001770:	f7ff f86c 	bl	800084c <__aeabi_ddiv>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4620      	mov	r0, r4
 800177a:	4629      	mov	r1, r5
 800177c:	f7fe fd86 	bl	800028c <__adddf3>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff fa2e 	bl	8000be8 <__aeabi_d2f>
 800178c:	4603      	mov	r3, r0
 800178e:	60bb      	str	r3, [r7, #8]

	fPressure = fPressure > fPressureMax ? fPressureMax : fPressure;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <BME280_fCompensatePressureData+0x3a8>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	ed97 7a02 	vldr	s14, [r7, #8]
 800179a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	dd02      	ble.n	80017aa <BME280_fCompensatePressureData+0x35a>
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <BME280_fCompensatePressureData+0x3a8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	e000      	b.n	80017ac <BME280_fCompensatePressureData+0x35c>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	60bb      	str	r3, [r7, #8]

	return fPressure;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	ee07 3a90 	vmov	s15, r3
}
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	3740      	adds	r7, #64	; 0x40
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdb0      	pop	{r4, r5, r7, pc}
 80017be:	bf00      	nop
 80017c0:	00000000 	.word	0x00000000
 80017c4:	40b86a00 	.word	0x40b86a00
 80017c8:	477a0000 	.word	0x477a0000
 80017cc:	47000000 	.word	0x47000000
 80017d0:	40100000 	.word	0x40100000
 80017d4:	40f00000 	.word	0x40f00000
 80017d8:	41200000 	.word	0x41200000
 80017dc:	40e00000 	.word	0x40e00000
 80017e0:	3ff00000 	.word	0x3ff00000
 80017e4:	0800e594 	.word	0x0800e594
 80017e8:	49800000 	.word	0x49800000
 80017ec:	40b00000 	.word	0x40b00000
 80017f0:	4f000000 	.word	0x4f000000
 80017f4:	40300000 	.word	0x40300000
 80017f8:	0800e598 	.word	0x0800e598

080017fc <BME280_fCompensateHumidityData>:


float BME280_fCompensateHumidityData(BME280Handle_t *pxBME280)
{
 80017fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001800:	b08c      	sub	sp, #48	; 0x30
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
	static const float fHumidityMin = 0.0f;
	static const float fHumidityMax = 100.0f;

	int32_t lHumidityRaw = (int32_t)pxBME280->xMeasureRawData.uHumidityRawData;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t lTemperatureFine = pxBME280->xCalibrationData.lTemperatureFine;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
	float fDigH1 = (float)pxBME280->xCalibrationData.xDigH.ucH1;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001822:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float fDigH2 = (float)pxBME280->xCalibrationData.xDigH.usH2;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001834:	edc7 7a08 	vstr	s15, [r7, #32]
	float fDigH3 = (float)pxBME280->xCalibrationData.xDigH.ucH3;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001846:	edc7 7a07 	vstr	s15, [r7, #28]
	float fDigH4 = (float)pxBME280->xCalibrationData.xDigH.sH4;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001858:	edc7 7a06 	vstr	s15, [r7, #24]
	float fDigH5 = (float)pxBME280->xCalibrationData.xDigH.sH5;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186a:	edc7 7a05 	vstr	s15, [r7, #20]
	float fDigH6 = (float)pxBME280->xCalibrationData.xDigH.cH6;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187c:	edc7 7a04 	vstr	s15, [r7, #16]

	float fHumidity;
	fHumidity = (((float)lTemperatureFine) - 76800.0f);
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80019f0 <BME280_fCompensateHumidityData+0x1f4>
 800188e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001892:	edc7 7a03 	vstr	s15, [r7, #12]
	fHumidity = (lHumidityRaw - ((fDigH4) * 64.0f + (fDigH5) / 16384.0f *
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018a4:	eddf 6a53 	vldr	s13, [pc, #332]	; 80019f4 <BME280_fCompensateHumidityData+0x1f8>
 80018a8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80018ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b0:	eddf 5a51 	vldr	s11, [pc, #324]	; 80019f8 <BME280_fCompensateHumidityData+0x1fc>
 80018b4:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80018b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c8:	ee17 0a90 	vmov	r0, s15
 80018cc:	f7fe fe3c 	bl	8000548 <__aeabi_f2d>
 80018d0:	4604      	mov	r4, r0
 80018d2:	460d      	mov	r5, r1
	fHumidity)) * ((fDigH2) / 65536.0f * (1.0f + (fDigH6) /
 80018d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80018d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80019fc <BME280_fCompensateHumidityData+0x200>
 80018dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018e0:	ee16 0a90 	vmov	r0, s13
 80018e4:	f7fe fe30 	bl	8000548 <__aeabi_f2d>
 80018e8:	4680      	mov	r8, r0
 80018ea:	4689      	mov	r9, r1
 80018ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f0:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001a00 <BME280_fCompensateHumidityData+0x204>
 80018f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	67108864.0f * fHumidity *
 80018f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001900:	ee17 0a90 	vmov	r0, s15
 8001904:	f7fe fe20 	bl	8000548 <__aeabi_f2d>
 8001908:	4682      	mov	sl, r0
 800190a:	468b      	mov	fp, r1
	(1.0 + (fDigH3) / 67108864.0f * fHumidity)));
 800190c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001910:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001a00 <BME280_fCompensateHumidityData+0x204>
 8001914:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001918:	edd7 7a03 	vldr	s15, [r7, #12]
 800191c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001920:	ee17 0a90 	vmov	r0, s15
 8001924:	f7fe fe10 	bl	8000548 <__aeabi_f2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <BME280_fCompensateHumidityData+0x208>)
 800192e:	f7fe fcad 	bl	800028c <__adddf3>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
	67108864.0f * fHumidity *
 8001936:	4650      	mov	r0, sl
 8001938:	4659      	mov	r1, fp
 800193a:	f7fe fe5d 	bl	80005f8 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
	fHumidity)) * ((fDigH2) / 65536.0f * (1.0f + (fDigH6) /
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <BME280_fCompensateHumidityData+0x208>)
 800194c:	f7fe fc9e 	bl	800028c <__adddf3>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4640      	mov	r0, r8
 8001956:	4649      	mov	r1, r9
 8001958:	f7fe fe4e 	bl	80005f8 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4620      	mov	r0, r4
 8001962:	4629      	mov	r1, r5
 8001964:	f7fe fe48 	bl	80005f8 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
	fHumidity = (lHumidityRaw - ((fDigH4) * 64.0f + (fDigH5) / 16384.0f *
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f93a 	bl	8000be8 <__aeabi_d2f>
 8001974:	4603      	mov	r3, r0
 8001976:	60fb      	str	r3, [r7, #12]
	fHumidity = fHumidity * (1.0f - (fDigH1) * fHumidity / 524288.0f);
 8001978:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800197c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001984:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001a08 <BME280_fCompensateHumidityData+0x20c>
 8001988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001994:	ed97 7a03 	vldr	s14, [r7, #12]
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199c:	edc7 7a03 	vstr	s15, [r7, #12]
	fHumidity = fHumidity < fHumidityMin ? fHumidityMin : fHumidity;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <BME280_fCompensateHumidityData+0x210>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80019aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	d502      	bpl.n	80019ba <BME280_fCompensateHumidityData+0x1be>
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <BME280_fCompensateHumidityData+0x210>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e000      	b.n	80019bc <BME280_fCompensateHumidityData+0x1c0>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	60fb      	str	r3, [r7, #12]
	fHumidity = fHumidity > fHumidityMax ? fHumidityMax : fHumidity;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <BME280_fCompensateHumidityData+0x214>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80019c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	dd02      	ble.n	80019d8 <BME280_fCompensateHumidityData+0x1dc>
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <BME280_fCompensateHumidityData+0x214>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	e000      	b.n	80019da <BME280_fCompensateHumidityData+0x1de>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	60fb      	str	r3, [r7, #12]

	return fHumidity;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	ee07 3a90 	vmov	s15, r3
}
 80019e2:	eeb0 0a67 	vmov.f32	s0, s15
 80019e6:	3730      	adds	r7, #48	; 0x30
 80019e8:	46bd      	mov	sp, r7
 80019ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ee:	bf00      	nop
 80019f0:	47960000 	.word	0x47960000
 80019f4:	42800000 	.word	0x42800000
 80019f8:	46800000 	.word	0x46800000
 80019fc:	47800000 	.word	0x47800000
 8001a00:	4c800000 	.word	0x4c800000
 8001a04:	3ff00000 	.word	0x3ff00000
 8001a08:	49000000 	.word	0x49000000
 8001a0c:	0800e59c 	.word	0x0800e59c
 8001a10:	0800e5a0 	.word	0x0800e5a0

08001a14 <BME280_Debug_vPrintfCompensatedData>:
}



void BME280_Debug_vPrintfCompensatedData(BME280Handle_t *pxBME280)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	float fCompensatedTemperatureData = BME280_fCompensateTemperatureData(pxBME280);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fcd9 	bl	80013d4 <BME280_fCompensateTemperatureData>
 8001a22:	ed87 0a05 	vstr	s0, [r7, #20]
	float fCompensatedPressureData = BME280_fCompensatePressureData(pxBME280);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fd12 	bl	8001450 <BME280_fCompensatePressureData>
 8001a2c:	ed87 0a04 	vstr	s0, [r7, #16]
	float fCompensatedHumidityData = BME280_fCompensateHumidityData(pxBME280);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff fee3 	bl	80017fc <BME280_fCompensateHumidityData>
 8001a36:	ed87 0a03 	vstr	s0, [r7, #12]

	printf("fTemperature Calibrated Data: %.8fC\r\n", fCompensatedTemperatureData);
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7fe fd84 	bl	8000548 <__aeabi_f2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <BME280_Debug_vPrintfCompensatedData+0x60>)
 8001a46:	f008 fe23 	bl	800a690 <iprintf>
	printf("fPressure Calibrated Data: %.8fPa\r\n", fCompensatedPressureData);
 8001a4a:	6938      	ldr	r0, [r7, #16]
 8001a4c:	f7fe fd7c 	bl	8000548 <__aeabi_f2d>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4808      	ldr	r0, [pc, #32]	; (8001a78 <BME280_Debug_vPrintfCompensatedData+0x64>)
 8001a56:	f008 fe1b 	bl	800a690 <iprintf>
	printf("fHumidity Calibrated Data: %.8f%%\r\n", fCompensatedHumidityData);
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7fe fd74 	bl	8000548 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <BME280_Debug_vPrintfCompensatedData+0x68>)
 8001a66:	f008 fe13 	bl	800a690 <iprintf>
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	0800e4e4 	.word	0x0800e4e4
 8001a78:	0800e50c 	.word	0x0800e50c
 8001a7c:	0800e530 	.word	0x0800e530

08001a80 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001a88:	1d39      	adds	r1, r7, #4
 8001a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <__io_putchar+0x20>)
 8001a92:	f004 fd29 	bl	80064e8 <HAL_UART_Transmit>
	return ch;
 8001a96:	687b      	ldr	r3, [r7, #4]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20001bd8 	.word	0x20001bd8

08001aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa8:	f000 fca6 	bl	80023f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aac:	f000 f828 	bl	8001b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab0:	f000 f94c 	bl	8001d4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ab4:	f000 f91a 	bl	8001cec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ab8:	f000 f89a 	bl	8001bf0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001abc:	f000 f8d8 	bl	8001c70 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //BME280_I2C_vInit(&xBME280, &hi2c1, BME280_I2C_SLAVE_ADDRESS_A);
  BME280_SPI_vInit(&xBME280, &hspi1, GPIOB, GPIO_PIN_6);
 8001ac0:	2340      	movs	r3, #64	; 0x40
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <main+0x44>)
 8001ac4:	4909      	ldr	r1, [pc, #36]	; (8001aec <main+0x48>)
 8001ac6:	480a      	ldr	r0, [pc, #40]	; (8001af0 <main+0x4c>)
 8001ac8:	f7ff fa90 	bl	8000fec <BME280_SPI_vInit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001acc:	f005 f9d6 	bl	8006e7c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ad0:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <main+0x50>)
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4808      	ldr	r0, [pc, #32]	; (8001af8 <main+0x54>)
 8001ad6:	f005 fa1b 	bl	8006f10 <osThreadNew>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <main+0x58>)
 8001ade:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ae0:	f005 f9f0 	bl	8006ec4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <main+0x40>
 8001ae6:	bf00      	nop
 8001ae8:	48000400 	.word	0x48000400
 8001aec:	20001b74 	.word	0x20001b74
 8001af0:	20001ad8 	.word	0x20001ad8
 8001af4:	0800e5a4 	.word	0x0800e5a4
 8001af8:	08001df9 	.word	0x08001df9
 8001afc:	20001ad4 	.word	0x20001ad4

08001b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0b8      	sub	sp, #224	; 0xe0
 8001b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0a:	2244      	movs	r2, #68	; 0x44
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f007 ff3c 	bl	800998c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2288      	movs	r2, #136	; 0x88
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f007 ff2e 	bl	800998c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b30:	2302      	movs	r3, #2
 8001b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b3e:	2310      	movs	r3, #16
 8001b40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b44:	2302      	movs	r3, #2
 8001b46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b56:	230a      	movs	r3, #10
 8001b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b72:	4618      	mov	r0, r3
 8001b74:	f001 ff8a 	bl	8003a8c <HAL_RCC_OscConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b7e:	f000 f96d 	bl	8001e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b82:	230f      	movs	r3, #15
 8001b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ba0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fb56 	bl	8004258 <HAL_RCC_ClockConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001bb2:	f000 f953 	bl	8001e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001bb6:	2342      	movs	r3, #66	; 0x42
 8001bb8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fd7f 	bl	80046c8 <HAL_RCCEx_PeriphCLKConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001bd0:	f000 f944 	bl	8001e5c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bd4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bd8:	f001 ff02 	bl	80039e0 <HAL_PWREx_ControlVoltageScaling>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001be2:	f000 f93b 	bl	8001e5c <Error_Handler>
  }
}
 8001be6:	bf00      	nop
 8001be8:	37e0      	adds	r7, #224	; 0xe0
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <MX_I2C1_Init+0x78>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <MX_I2C1_Init+0x7c>)
 8001bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c2a:	480e      	ldr	r0, [pc, #56]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c2c:	f001 f80c 	bl	8002c48 <HAL_I2C_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c36:	f000 f911 	bl	8001e5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c3e:	f001 fe2a 	bl	8003896 <HAL_I2CEx_ConfigAnalogFilter>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c48:	f000 f908 	bl	8001e5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c50:	f001 fe6c 	bl	800392c <HAL_I2CEx_ConfigDigitalFilter>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c5a:	f000 f8ff 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20001b28 	.word	0x20001b28
 8001c68:	40005400 	.word	0x40005400
 8001c6c:	10909cec 	.word	0x10909cec

08001c70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001c76:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <MX_SPI1_Init+0x78>)
 8001c78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001c8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001ca6:	2228      	movs	r2, #40	; 0x28
 8001ca8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001cca:	2208      	movs	r2, #8
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_SPI1_Init+0x74>)
 8001cd0:	f003 f9b6 	bl	8005040 <HAL_SPI_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cda:	f000 f8bf 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20001b74 	.word	0x20001b74
 8001ce8:	40013000 	.word	0x40013000

08001cec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001cf2:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d30:	f004 fb8c 	bl	800644c <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d3a:	f000 f88f 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20001bd8 	.word	0x20001bd8
 8001d48:	40004400 	.word	0x40004400

08001d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a16      	ldr	r2, [pc, #88]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <MX_GPIO_Init+0xa4>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2140      	movs	r1, #64	; 0x40
 8001dc6:	480b      	ldr	r0, [pc, #44]	; (8001df4 <MX_GPIO_Init+0xa8>)
 8001dc8:	f000 ff26 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dcc:	2340      	movs	r3, #64	; 0x40
 8001dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_GPIO_Init+0xa8>)
 8001de4:	f000 fc7a 	bl	80026dc <HAL_GPIO_Init>

}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	48000400 	.word	0x48000400

08001df8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
 8001e02:	2140      	movs	r1, #64	; 0x40
 8001e04:	4809      	ldr	r0, [pc, #36]	; (8001e2c <StartDefaultTask+0x34>)
 8001e06:	f000 ff07 	bl	8002c18 <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
  	printf("hello, world!\r\n");
 8001e0a:	4809      	ldr	r0, [pc, #36]	; (8001e30 <StartDefaultTask+0x38>)
 8001e0c:	f008 fcc6 	bl	800a79c <puts>


  	//BME280_SPI_vReadChipID(&xBME280);
  	//BME280_SPI_vReadCalibrationData(&xBME280);
  	//BME280_Debug_vPrintCalibrationData(&xBME280);
  	BME280_SPI_vMeasureAllForced(&xBME280);
 8001e10:	4808      	ldr	r0, [pc, #32]	; (8001e34 <StartDefaultTask+0x3c>)
 8001e12:	f7ff fa37 	bl	8001284 <BME280_SPI_vMeasureAllForced>
  	BME280_SPI_vReadRawData(&xBME280);
 8001e16:	4807      	ldr	r0, [pc, #28]	; (8001e34 <StartDefaultTask+0x3c>)
 8001e18:	f7ff fa42 	bl	80012a0 <BME280_SPI_vReadRawData>
  	//BME280_Debug_vPrintlCompensatedData(&xBME280);
  	BME280_Debug_vPrintfCompensatedData(&xBME280);
 8001e1c:	4805      	ldr	r0, [pc, #20]	; (8001e34 <StartDefaultTask+0x3c>)
 8001e1e:	f7ff fdf9 	bl	8001a14 <BME280_Debug_vPrintfCompensatedData>
  	//BME280_Debug_vPrintRawData(&xBME280);


    osDelay(2000);
 8001e22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e26:	f005 f905 	bl	8007034 <osDelay>
  	printf("hello, world!\r\n");
 8001e2a:	e7ee      	b.n	8001e0a <StartDefaultTask+0x12>
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	0800e560 	.word	0x0800e560
 8001e34:	20001ad8 	.word	0x20001ad8

08001e38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e4a:	f000 faf5 	bl	8002438 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40001000 	.word	0x40001000

08001e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e60:	b672      	cpsid	i
}
 8001e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <Error_Handler+0x8>
	...

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6613      	str	r3, [r2, #96]	; 0x60
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	210f      	movs	r1, #15
 8001ea2:	f06f 0001 	mvn.w	r0, #1
 8001ea6:	f000 fb9f 	bl	80025e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <HAL_I2C_MspInit+0x9c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d138      	bne.n	8001f4c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <HAL_I2C_MspInit+0xa0>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_I2C_MspInit+0xa0>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <HAL_I2C_MspInit+0xa0>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef8:	2312      	movs	r3, #18
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f04:	2304      	movs	r3, #4
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4813      	ldr	r0, [pc, #76]	; (8001f5c <HAL_I2C_MspInit+0xa4>)
 8001f10:	f000 fbe4 	bl	80026dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_I2C_MspInit+0xa0>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <HAL_I2C_MspInit+0xa0>)
 8001f1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_I2C_MspInit+0xa0>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2105      	movs	r1, #5
 8001f30:	201f      	movs	r0, #31
 8001f32:	f000 fb59 	bl	80025e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f36:	201f      	movs	r0, #31
 8001f38:	f000 fb72 	bl	8002620 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2105      	movs	r1, #5
 8001f40:	2020      	movs	r0, #32
 8001f42:	f000 fb51 	bl	80025e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f46:	2020      	movs	r0, #32
 8001f48:	f000 fb6a 	bl	8002620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40005400 	.word	0x40005400
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000400 	.word	0x48000400

08001f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <HAL_SPI_MspInit+0x7c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d128      	bne.n	8001fd4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fb2:	23e0      	movs	r3, #224	; 0xe0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd0:	f000 fb84 	bl	80026dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40013000 	.word	0x40013000
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a08      	ldr	r2, [pc, #32]	; (8002014 <HAL_SPI_MspDeInit+0x30>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10a      	bne.n	800200c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_SPI_MspDeInit+0x34>)
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffa:	4a07      	ldr	r2, [pc, #28]	; (8002018 <HAL_SPI_MspDeInit+0x34>)
 8001ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002000:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8002002:	21e0      	movs	r1, #224	; 0xe0
 8002004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002008:	f000 fd12 	bl	8002a30 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40013000 	.word	0x40013000
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a17      	ldr	r2, [pc, #92]	; (8002098 <HAL_UART_MspInit+0x7c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d128      	bne.n	8002090 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_UART_MspInit+0x80>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_UART_MspInit+0x80>)
 8002044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_UART_MspInit+0x80>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_UART_MspInit+0x80>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	4a10      	ldr	r2, [pc, #64]	; (800209c <HAL_UART_MspInit+0x80>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_UART_MspInit+0x80>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800206e:	230c      	movs	r3, #12
 8002070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800207e:	2307      	movs	r3, #7
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208c:	f000 fb26 	bl	80026dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3728      	adds	r7, #40	; 0x28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40004400 	.word	0x40004400
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	2036      	movs	r0, #54	; 0x36
 80020b6:	f000 fa97 	bl	80025e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020ba:	2036      	movs	r0, #54	; 0x36
 80020bc:	f000 fab0 	bl	8002620 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_InitTick+0x9c>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	4a1d      	ldr	r2, [pc, #116]	; (800213c <HAL_InitTick+0x9c>)
 80020c6:	f043 0310 	orr.w	r3, r3, #16
 80020ca:	6593      	str	r3, [r2, #88]	; 0x58
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_InitTick+0x9c>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020d8:	f107 0210 	add.w	r2, r7, #16
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f002 fa5e 	bl	80045a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020e8:	f002 fa30 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 80020ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f0:	4a13      	ldr	r2, [pc, #76]	; (8002140 <HAL_InitTick+0xa0>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0c9b      	lsrs	r3, r3, #18
 80020f8:	3b01      	subs	r3, #1
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_InitTick+0xa4>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <HAL_InitTick+0xa8>)
 8002100:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_InitTick+0xa4>)
 8002104:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002108:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800210a:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_InitTick+0xa4>)
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_InitTick+0xa4>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_InitTick+0xa4>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <HAL_InitTick+0xa4>)
 800211e:	f003 fec3 	bl	8005ea8 <HAL_TIM_Base_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d104      	bne.n	8002132 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002128:	4806      	ldr	r0, [pc, #24]	; (8002144 <HAL_InitTick+0xa4>)
 800212a:	f003 ff1f 	bl	8005f6c <HAL_TIM_Base_Start_IT>
 800212e:	4603      	mov	r3, r0
 8002130:	e000      	b.n	8002134 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	3730      	adds	r7, #48	; 0x30
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	431bde83 	.word	0x431bde83
 8002144:	20001c5c 	.word	0x20001c5c
 8002148:	40001000 	.word	0x40001000

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <NMI_Handler+0x4>

08002152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <HardFault_Handler+0x4>

08002158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <MemManage_Handler+0x4>

0800215e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <BusFault_Handler+0x4>

08002164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <UsageFault_Handler+0x4>

0800216a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <I2C1_EV_IRQHandler+0x10>)
 800217e:	f000 fdf2 	bl	8002d66 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20001b28 	.word	0x20001b28

0800218c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <I2C1_ER_IRQHandler+0x10>)
 8002192:	f000 fe02 	bl	8002d9a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20001b28 	.word	0x20001b28

080021a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <TIM6_DAC_IRQHandler+0x10>)
 80021a6:	f003 ff51 	bl	800604c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20001c5c 	.word	0x20001c5c

080021b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	return 1;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_kill>:

int _kill(int pid, int sig)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021ce:	f007 fba5 	bl	800991c <__errno>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2216      	movs	r2, #22
 80021d6:	601a      	str	r2, [r3, #0]
	return -1;
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_exit>:

void _exit (int status)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ffe7 	bl	80021c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021f6:	e7fe      	b.n	80021f6 <_exit+0x12>

080021f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e00a      	b.n	8002220 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800220a:	f3af 8000 	nop.w
 800220e:	4601      	mov	r1, r0
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	60ba      	str	r2, [r7, #8]
 8002216:	b2ca      	uxtb	r2, r1
 8002218:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3301      	adds	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	dbf0      	blt.n	800220a <_read+0x12>
	}

return len;
 8002228:	687b      	ldr	r3, [r7, #4]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e009      	b.n	8002258 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	60ba      	str	r2, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fc17 	bl	8001a80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	dbf1      	blt.n	8002244 <_write+0x12>
	}
	return len;
 8002260:	687b      	ldr	r3, [r7, #4]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_close>:

int _close(int file)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
	return -1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002292:	605a      	str	r2, [r3, #4]
	return 0;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_isatty>:

int _isatty(int file)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
	return 1;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
	return 0;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f007 fb0a 	bl	800991c <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20018000 	.word	0x20018000
 8002334:	00000400 	.word	0x00000400
 8002338:	20000200 	.word	0x20000200
 800233c:	20001d00 	.word	0x20001d00

08002340 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <SystemInit+0x5c>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	4a14      	ldr	r2, [pc, #80]	; (800239c <SystemInit+0x5c>)
 800234c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <SystemInit+0x60>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <SystemInit+0x60>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <SystemInit+0x60>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <SystemInit+0x60>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <SystemInit+0x60>)
 800236c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002370:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002374:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <SystemInit+0x60>)
 8002378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800237c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <SystemInit+0x60>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <SystemInit+0x60>)
 8002384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <SystemInit+0x60>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00
 80023a0:	40021000 	.word	0x40021000

080023a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023a8:	f7ff ffca 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023ae:	e003      	b.n	80023b8 <LoopCopyDataInit>

080023b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023b6:	3104      	adds	r1, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023b8:	480a      	ldr	r0, [pc, #40]	; (80023e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80023bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023c0:	d3f6      	bcc.n	80023b0 <CopyDataInit>
	ldr	r2, =_sbss
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80023c4:	e002      	b.n	80023cc <LoopFillZerobss>

080023c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023c8:	f842 3b04 	str.w	r3, [r2], #4

080023cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <LoopForever+0x16>)
	cmp	r2, r3
 80023ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023d0:	d3f9      	bcc.n	80023c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023d2:	f007 faa9 	bl	8009928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023d6:	f7ff fb65 	bl	8001aa4 <main>

080023da <LoopForever>:

LoopForever:
    b LoopForever
 80023da:	e7fe      	b.n	80023da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023dc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80023e0:	0800ead4 	.word	0x0800ead4
	ldr	r0, =_sdata
 80023e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023e8:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 80023ec:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 80023f0:	20001cfc 	.word	0x20001cfc

080023f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC1_2_IRQHandler>
	...

080023f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <HAL_Init+0x3c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <HAL_Init+0x3c>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240e:	2003      	movs	r0, #3
 8002410:	f000 f8df 	bl	80025d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002414:	2000      	movs	r0, #0
 8002416:	f7ff fe43 	bl	80020a0 <HAL_InitTick>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	71fb      	strb	r3, [r7, #7]
 8002424:	e001      	b.n	800242a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002426:	f7ff fd1f 	bl	8001e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800242a:	79fb      	ldrb	r3, [r7, #7]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40022000 	.word	0x40022000

08002438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_IncTick+0x20>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_IncTick+0x24>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_IncTick+0x24>)
 800244a:	6013      	str	r3, [r2, #0]
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000008 	.word	0x20000008
 800245c:	20001ca8 	.word	0x20001ca8

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_GetTick+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20001ca8 	.word	0x20001ca8

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <__NVIC_EnableIRQ+0x38>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff4c 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025fa:	f7ff ff61 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 80025fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	6978      	ldr	r0, [r7, #20]
 8002606:	f7ff ffb1 	bl	800256c <NVIC_EncodePriority>
 800260a:	4602      	mov	r2, r0
 800260c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff80 	bl	8002518 <__NVIC_SetPriority>
}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff54 	bl	80024dc <__NVIC_EnableIRQ>
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d005      	beq.n	8002660 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2204      	movs	r2, #4
 8002658:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	e029      	b.n	80026b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 020e 	bic.w	r2, r2, #14
 800266e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	f003 021c 	and.w	r2, r3, #28
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	2101      	movs	r1, #1
 800268e:	fa01 f202 	lsl.w	r2, r1, r2
 8002692:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
    }
  }
  return status;
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026cc:	b2db      	uxtb	r3, r3
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ea:	e17f      	b.n	80029ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	2101      	movs	r1, #1
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8171 	beq.w	80029e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d00b      	beq.n	8002724 <HAL_GPIO_Init+0x48>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d007      	beq.n	8002724 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002718:	2b11      	cmp	r3, #17
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b12      	cmp	r3, #18
 8002722:	d130      	bne.n	8002786 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800275a:	2201      	movs	r2, #1
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	f003 0201 	and.w	r2, r3, #1
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b03      	cmp	r3, #3
 8002790:	d118      	bne.n	80027c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002798:	2201      	movs	r2, #1
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	08db      	lsrs	r3, r3, #3
 80027ae:	f003 0201 	and.w	r2, r3, #1
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	2203      	movs	r2, #3
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x128>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b12      	cmp	r3, #18
 8002802:	d123      	bne.n	800284c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	08da      	lsrs	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3208      	adds	r2, #8
 800280c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	220f      	movs	r2, #15
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	08da      	lsrs	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3208      	adds	r2, #8
 8002846:	6939      	ldr	r1, [r7, #16]
 8002848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0203 	and.w	r2, r3, #3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80ac 	beq.w	80029e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <HAL_GPIO_Init+0x330>)
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	4a5e      	ldr	r2, [pc, #376]	; (8002a0c <HAL_GPIO_Init+0x330>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6613      	str	r3, [r2, #96]	; 0x60
 800289a:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <HAL_GPIO_Init+0x330>)
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028a6:	4a5a      	ldr	r2, [pc, #360]	; (8002a10 <HAL_GPIO_Init+0x334>)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	220f      	movs	r2, #15
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028d0:	d025      	beq.n	800291e <HAL_GPIO_Init+0x242>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4f      	ldr	r2, [pc, #316]	; (8002a14 <HAL_GPIO_Init+0x338>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01f      	beq.n	800291a <HAL_GPIO_Init+0x23e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4e      	ldr	r2, [pc, #312]	; (8002a18 <HAL_GPIO_Init+0x33c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d019      	beq.n	8002916 <HAL_GPIO_Init+0x23a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4d      	ldr	r2, [pc, #308]	; (8002a1c <HAL_GPIO_Init+0x340>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d013      	beq.n	8002912 <HAL_GPIO_Init+0x236>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a4c      	ldr	r2, [pc, #304]	; (8002a20 <HAL_GPIO_Init+0x344>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00d      	beq.n	800290e <HAL_GPIO_Init+0x232>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4b      	ldr	r2, [pc, #300]	; (8002a24 <HAL_GPIO_Init+0x348>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d007      	beq.n	800290a <HAL_GPIO_Init+0x22e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4a      	ldr	r2, [pc, #296]	; (8002a28 <HAL_GPIO_Init+0x34c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d101      	bne.n	8002906 <HAL_GPIO_Init+0x22a>
 8002902:	2306      	movs	r3, #6
 8002904:	e00c      	b.n	8002920 <HAL_GPIO_Init+0x244>
 8002906:	2307      	movs	r3, #7
 8002908:	e00a      	b.n	8002920 <HAL_GPIO_Init+0x244>
 800290a:	2305      	movs	r3, #5
 800290c:	e008      	b.n	8002920 <HAL_GPIO_Init+0x244>
 800290e:	2304      	movs	r3, #4
 8002910:	e006      	b.n	8002920 <HAL_GPIO_Init+0x244>
 8002912:	2303      	movs	r3, #3
 8002914:	e004      	b.n	8002920 <HAL_GPIO_Init+0x244>
 8002916:	2302      	movs	r3, #2
 8002918:	e002      	b.n	8002920 <HAL_GPIO_Init+0x244>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_GPIO_Init+0x244>
 800291e:	2300      	movs	r3, #0
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	f002 0203 	and.w	r2, r2, #3
 8002926:	0092      	lsls	r2, r2, #2
 8002928:	4093      	lsls	r3, r2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002930:	4937      	ldr	r1, [pc, #220]	; (8002a10 <HAL_GPIO_Init+0x334>)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800293e:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <HAL_GPIO_Init+0x350>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002962:	4a32      	ldr	r2, [pc, #200]	; (8002a2c <HAL_GPIO_Init+0x350>)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002968:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <HAL_GPIO_Init+0x350>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800298c:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <HAL_GPIO_Init+0x350>)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <HAL_GPIO_Init+0x350>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_GPIO_Init+0x350>)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_GPIO_Init+0x350>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_GPIO_Init+0x350>)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3301      	adds	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f47f ae78 	bne.w	80026ec <HAL_GPIO_Init+0x10>
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010000 	.word	0x40010000
 8002a14:	48000400 	.word	0x48000400
 8002a18:	48000800 	.word	0x48000800
 8002a1c:	48000c00 	.word	0x48000c00
 8002a20:	48001000 	.word	0x48001000
 8002a24:	48001400 	.word	0x48001400
 8002a28:	48001800 	.word	0x48001800
 8002a2c:	40010400 	.word	0x40010400

08002a30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002a3e:	e0cd      	b.n	8002bdc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a40:	2201      	movs	r2, #1
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80c0 	beq.w	8002bd6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002a56:	4a68      	ldr	r2, [pc, #416]	; (8002bf8 <HAL_GPIO_DeInit+0x1c8>)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a62:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a7e:	d025      	beq.n	8002acc <HAL_GPIO_DeInit+0x9c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a5e      	ldr	r2, [pc, #376]	; (8002bfc <HAL_GPIO_DeInit+0x1cc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01f      	beq.n	8002ac8 <HAL_GPIO_DeInit+0x98>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a5d      	ldr	r2, [pc, #372]	; (8002c00 <HAL_GPIO_DeInit+0x1d0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d019      	beq.n	8002ac4 <HAL_GPIO_DeInit+0x94>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a5c      	ldr	r2, [pc, #368]	; (8002c04 <HAL_GPIO_DeInit+0x1d4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d013      	beq.n	8002ac0 <HAL_GPIO_DeInit+0x90>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a5b      	ldr	r2, [pc, #364]	; (8002c08 <HAL_GPIO_DeInit+0x1d8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00d      	beq.n	8002abc <HAL_GPIO_DeInit+0x8c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a5a      	ldr	r2, [pc, #360]	; (8002c0c <HAL_GPIO_DeInit+0x1dc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d007      	beq.n	8002ab8 <HAL_GPIO_DeInit+0x88>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a59      	ldr	r2, [pc, #356]	; (8002c10 <HAL_GPIO_DeInit+0x1e0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_GPIO_DeInit+0x84>
 8002ab0:	2306      	movs	r3, #6
 8002ab2:	e00c      	b.n	8002ace <HAL_GPIO_DeInit+0x9e>
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	e00a      	b.n	8002ace <HAL_GPIO_DeInit+0x9e>
 8002ab8:	2305      	movs	r3, #5
 8002aba:	e008      	b.n	8002ace <HAL_GPIO_DeInit+0x9e>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e006      	b.n	8002ace <HAL_GPIO_DeInit+0x9e>
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e004      	b.n	8002ace <HAL_GPIO_DeInit+0x9e>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e002      	b.n	8002ace <HAL_GPIO_DeInit+0x9e>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_GPIO_DeInit+0x9e>
 8002acc:	2300      	movs	r3, #0
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	f002 0203 	and.w	r2, r2, #3
 8002ad4:	0092      	lsls	r2, r2, #2
 8002ad6:	4093      	lsls	r3, r2
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d132      	bne.n	8002b44 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002ade:	4b4d      	ldr	r3, [pc, #308]	; (8002c14 <HAL_GPIO_DeInit+0x1e4>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	494b      	ldr	r1, [pc, #300]	; (8002c14 <HAL_GPIO_DeInit+0x1e4>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002aec:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_GPIO_DeInit+0x1e4>)
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	4947      	ldr	r1, [pc, #284]	; (8002c14 <HAL_GPIO_DeInit+0x1e4>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002afa:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_GPIO_DeInit+0x1e4>)
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	4944      	ldr	r1, [pc, #272]	; (8002c14 <HAL_GPIO_DeInit+0x1e4>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002b08:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <HAL_GPIO_DeInit+0x1e4>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	4940      	ldr	r1, [pc, #256]	; (8002c14 <HAL_GPIO_DeInit+0x1e4>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	220f      	movs	r2, #15
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002b26:	4a34      	ldr	r2, [pc, #208]	; (8002bf8 <HAL_GPIO_DeInit+0x1c8>)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	43da      	mvns	r2, r3
 8002b36:	4830      	ldr	r0, [pc, #192]	; (8002bf8 <HAL_GPIO_DeInit+0x1c8>)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	3302      	adds	r3, #2
 8002b40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2103      	movs	r1, #3
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	08da      	lsrs	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3208      	adds	r2, #8
 8002b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	08d2      	lsrs	r2, r2, #3
 8002b78:	4019      	ands	r1, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3208      	adds	r2, #8
 8002b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2103      	movs	r1, #3
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	401a      	ands	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2103      	movs	r1, #3
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f47f af2b 	bne.w	8002a40 <HAL_GPIO_DeInit+0x10>
  }
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	48000400 	.word	0x48000400
 8002c00:	48000800 	.word	0x48000800
 8002c04:	48000c00 	.word	0x48000c00
 8002c08:	48001000 	.word	0x48001000
 8002c0c:	48001400 	.word	0x48001400
 8002c10:	48001800 	.word	0x48001800
 8002c14:	40010400 	.word	0x40010400

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c34:	e002      	b.n	8002c3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e081      	b.n	8002d5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff f922 	bl	8001eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2224      	movs	r2, #36	; 0x24
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d107      	bne.n	8002cc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	e006      	b.n	8002cd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d104      	bne.n	8002ce2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	ea42 0103 	orr.w	r1, r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	021a      	lsls	r2, r3, #8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69d9      	ldr	r1, [r3, #28]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1a      	ldr	r2, [r3, #32]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	68f9      	ldr	r1, [r7, #12]
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
  }
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d010      	beq.n	8002de0 <HAL_I2C_ER_IRQHandler+0x46>
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	09db      	lsrs	r3, r3, #7
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dde:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	0a9b      	lsrs	r3, r3, #10
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d010      	beq.n	8002e0e <HAL_I2C_ER_IRQHandler+0x74>
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	09db      	lsrs	r3, r3, #7
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f043 0208 	orr.w	r2, r3, #8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e0c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	0a5b      	lsrs	r3, r3, #9
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d010      	beq.n	8002e3c <HAL_I2C_ER_IRQHandler+0xa2>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	09db      	lsrs	r3, r3, #7
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f043 0202 	orr.w	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 030b 	and.w	r3, r3, #11
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002e4c:	68f9      	ldr	r1, [r7, #12]
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fb8a 	bl	8003568 <I2C_ITError>
  }
}
 8002e54:	bf00      	nop
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
 8002e90:	4613      	mov	r3, r2
 8002e92:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <I2C_Slave_ISR_IT+0x24>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0ec      	b.n	80030da <I2C_Slave_ISR_IT+0x1fe>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <I2C_Slave_ISR_IT+0x4c>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002f20:	6939      	ldr	r1, [r7, #16]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f9c0 	bl	80032a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d04d      	beq.n	8002fd0 <I2C_Slave_ISR_IT+0xf4>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d047      	beq.n	8002fd0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d128      	bne.n	8002f9c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b28      	cmp	r3, #40	; 0x28
 8002f54:	d108      	bne.n	8002f68 <I2C_Slave_ISR_IT+0x8c>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f5c:	d104      	bne.n	8002f68 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f5e:	6939      	ldr	r1, [r7, #16]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 faab 	bl	80034bc <I2C_ITListenCplt>
 8002f66:	e032      	b.n	8002fce <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b29      	cmp	r3, #41	; 0x29
 8002f72:	d10e      	bne.n	8002f92 <I2C_Slave_ISR_IT+0xb6>
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f7a:	d00a      	beq.n	8002f92 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2210      	movs	r2, #16
 8002f82:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fbe6 	bl	8003756 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f92d 	bl	80031ea <I2C_ITSlaveSeqCplt>
 8002f90:	e01d      	b.n	8002fce <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2210      	movs	r2, #16
 8002f98:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f9a:	e096      	b.n	80030ca <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	f043 0204 	orr.w	r2, r3, #4
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <I2C_Slave_ISR_IT+0xe4>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fbc:	f040 8085 	bne.w	80030ca <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 face 	bl	8003568 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002fcc:	e07d      	b.n	80030ca <I2C_Slave_ISR_IT+0x1ee>
 8002fce:	e07c      	b.n	80030ca <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d030      	beq.n	800303e <I2C_Slave_ISR_IT+0x162>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02a      	beq.n	800303e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d018      	beq.n	8003024 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d14f      	bne.n	80030ce <I2C_Slave_ISR_IT+0x1f2>
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003034:	d04b      	beq.n	80030ce <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f8d7 	bl	80031ea <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800303c:	e047      	b.n	80030ce <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	08db      	lsrs	r3, r3, #3
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003056:	6939      	ldr	r1, [r7, #16]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f842 	bl	80030e2 <I2C_ITAddrCplt>
 800305e:	e037      	b.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d031      	beq.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d02b      	beq.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d018      	beq.n	80030b4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80030b2:	e00d      	b.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ba:	d002      	beq.n	80030c2 <I2C_Slave_ISR_IT+0x1e6>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f891 	bl	80031ea <I2C_ITSlaveSeqCplt>
 80030c8:	e002      	b.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80030ce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030f8:	2b28      	cmp	r3, #40	; 0x28
 80030fa:	d16a      	bne.n	80031d2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	0c1b      	lsrs	r3, r3, #16
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	0c1b      	lsrs	r3, r3, #16
 8003114:	b29b      	uxth	r3, r3
 8003116:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800311a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	b29b      	uxth	r3, r3
 8003124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003128:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003136:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d138      	bne.n	80031b2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003140:	897b      	ldrh	r3, [r7, #10]
 8003142:	09db      	lsrs	r3, r3, #7
 8003144:	b29a      	uxth	r2, r3
 8003146:	89bb      	ldrh	r3, [r7, #12]
 8003148:	4053      	eors	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	f003 0306 	and.w	r3, r3, #6
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11c      	bne.n	800318e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003154:	897b      	ldrh	r3, [r7, #10]
 8003156:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003166:	2b02      	cmp	r3, #2
 8003168:	d13b      	bne.n	80031e2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2208      	movs	r2, #8
 8003176:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003180:	89ba      	ldrh	r2, [r7, #12]
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	4619      	mov	r1, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fe7c 	bl	8002e84 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800318c:	e029      	b.n	80031e2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800318e:	893b      	ldrh	r3, [r7, #8]
 8003190:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fb1f 	bl	80037da <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031a4:	89ba      	ldrh	r2, [r7, #12]
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	4619      	mov	r1, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff fe6a 	bl	8002e84 <HAL_I2C_AddrCallback>
}
 80031b0:	e017      	b.n	80031e2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80031b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fb0f 	bl	80037da <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031c4:	89ba      	ldrh	r2, [r7, #12]
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fe5a 	bl	8002e84 <HAL_I2C_AddrCallback>
}
 80031d0:	e007      	b.n	80031e2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2208      	movs	r2, #8
 80031d8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	0b9b      	lsrs	r3, r3, #14
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e00d      	b.n	800323c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	0bdb      	lsrs	r3, r3, #15
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b29      	cmp	r3, #41	; 0x29
 8003246:	d112      	bne.n	800326e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2228      	movs	r2, #40	; 0x28
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2221      	movs	r2, #33	; 0x21
 8003254:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003256:	2101      	movs	r1, #1
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fabe 	bl	80037da <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff fdf8 	bl	8002e5c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800326c:	e017      	b.n	800329e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b2a      	cmp	r3, #42	; 0x2a
 8003278:	d111      	bne.n	800329e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2228      	movs	r2, #40	; 0x28
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2222      	movs	r2, #34	; 0x22
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003288:	2102      	movs	r1, #2
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 faa5 	bl	80037da <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff fde9 	bl	8002e70 <HAL_I2C_SlaveRxCpltCallback>
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2220      	movs	r2, #32
 80032cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	2b21      	cmp	r3, #33	; 0x21
 80032d2:	d002      	beq.n	80032da <I2C_ITSlaveCplt+0x32>
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b29      	cmp	r3, #41	; 0x29
 80032d8:	d108      	bne.n	80032ec <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80032da:	f248 0101 	movw	r1, #32769	; 0x8001
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fa7b 	bl	80037da <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2221      	movs	r2, #33	; 0x21
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
 80032ea:	e00d      	b.n	8003308 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b22      	cmp	r3, #34	; 0x22
 80032f0:	d002      	beq.n	80032f8 <I2C_ITSlaveCplt+0x50>
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b2a      	cmp	r3, #42	; 0x2a
 80032f6:	d107      	bne.n	8003308 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032f8:	f248 0102 	movw	r1, #32770	; 0x8002
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fa6c 	bl	80037da <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2222      	movs	r2, #34	; 0x22
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003316:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b64      	ldr	r3, [pc, #400]	; (80034b4 <I2C_ITSlaveCplt+0x20c>)
 8003324:	400b      	ands	r3, r1
 8003326:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fa14 	bl	8003756 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	0b9b      	lsrs	r3, r3, #14
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d013      	beq.n	8003362 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003348:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	2b00      	cmp	r3, #0
 8003350:	d020      	beq.n	8003394 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003360:	e018      	b.n	8003394 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	0bdb      	lsrs	r3, r3, #15
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d012      	beq.n	8003394 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800337c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d020      	beq.n	80033e2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0304 	bic.w	r3, r3, #4
 80033a6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00c      	beq.n	80033e2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	f043 0204 	orr.w	r2, r3, #4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	2b00      	cmp	r3, #0
 800340c:	d010      	beq.n	8003430 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f8a7 	bl	8003568 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b28      	cmp	r3, #40	; 0x28
 8003424:	d141      	bne.n	80034aa <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003426:	6979      	ldr	r1, [r7, #20]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f847 	bl	80034bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800342e:	e03c      	b.n	80034aa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003438:	d014      	beq.n	8003464 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fed5 	bl	80031ea <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <I2C_ITSlaveCplt+0x210>)
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff fd1f 	bl	8002ea0 <HAL_I2C_ListenCpltCallback>
}
 8003462:	e022      	b.n	80034aa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b22      	cmp	r3, #34	; 0x22
 800346e:	d10e      	bne.n	800348e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff fcf2 	bl	8002e70 <HAL_I2C_SlaveRxCpltCallback>
}
 800348c:	e00d      	b.n	80034aa <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff fcd9 	bl	8002e5c <HAL_I2C_SlaveTxCpltCallback>
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	fe00e800 	.word	0xfe00e800
 80034b8:	ffff0000 	.word	0xffff0000

080034bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a26      	ldr	r2, [pc, #152]	; (8003564 <I2C_ITListenCplt+0xa8>)
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d022      	beq.n	800353a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d012      	beq.n	800353a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f043 0204 	orr.w	r2, r3, #4
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800353a:	f248 0103 	movw	r1, #32771	; 0x8003
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f94b 	bl	80037da <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2210      	movs	r2, #16
 800354a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fca3 	bl	8002ea0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	ffff0000 	.word	0xffff0000

08003568 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a5d      	ldr	r2, [pc, #372]	; (80036fc <I2C_ITError+0x194>)
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b28      	cmp	r3, #40	; 0x28
 800359e:	d005      	beq.n	80035ac <I2C_ITError+0x44>
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b29      	cmp	r3, #41	; 0x29
 80035a4:	d002      	beq.n	80035ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b2a      	cmp	r3, #42	; 0x2a
 80035aa:	d10b      	bne.n	80035c4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035ac:	2103      	movs	r1, #3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f913 	bl	80037da <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2228      	movs	r2, #40	; 0x28
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a50      	ldr	r2, [pc, #320]	; (8003700 <I2C_ITError+0x198>)
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34
 80035c2:	e011      	b.n	80035e8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035c4:	f248 0103 	movw	r1, #32771	; 0x8003
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f906 	bl	80037da <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b60      	cmp	r3, #96	; 0x60
 80035d8:	d003      	beq.n	80035e2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d039      	beq.n	800366a <I2C_ITError+0x102>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b11      	cmp	r3, #17
 80035fa:	d002      	beq.n	8003602 <I2C_ITError+0x9a>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b21      	cmp	r3, #33	; 0x21
 8003600:	d133      	bne.n	800366a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800360c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003610:	d107      	bne.n	8003622 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003620:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff f849 	bl	80026be <HAL_DMA_GetState>
 800362c:	4603      	mov	r3, r0
 800362e:	2b01      	cmp	r3, #1
 8003630:	d017      	beq.n	8003662 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	4a33      	ldr	r2, [pc, #204]	; (8003704 <I2C_ITError+0x19c>)
 8003638:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fff8 	bl	800263c <HAL_DMA_Abort_IT>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d04d      	beq.n	80036ee <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800365c:	4610      	mov	r0, r2
 800365e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003660:	e045      	b.n	80036ee <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f850 	bl	8003708 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003668:	e041      	b.n	80036ee <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d039      	beq.n	80036e6 <I2C_ITError+0x17e>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b12      	cmp	r3, #18
 8003676:	d002      	beq.n	800367e <I2C_ITError+0x116>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b22      	cmp	r3, #34	; 0x22
 800367c:	d133      	bne.n	80036e6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368c:	d107      	bne.n	800369e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800369c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff f80b 	bl	80026be <HAL_DMA_GetState>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d017      	beq.n	80036de <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	4a14      	ldr	r2, [pc, #80]	; (8003704 <I2C_ITError+0x19c>)
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe ffba 	bl	800263c <HAL_DMA_Abort_IT>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d011      	beq.n	80036f2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036d8:	4610      	mov	r0, r2
 80036da:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036dc:	e009      	b.n	80036f2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f812 	bl	8003708 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036e4:	e005      	b.n	80036f2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f80e 	bl	8003708 <I2C_TreatErrorCallback>
  }
}
 80036ec:	e002      	b.n	80036f4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036f2:	bf00      	nop
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	ffff0000 	.word	0xffff0000
 8003700:	08002edd 	.word	0x08002edd
 8003704:	0800379f 	.word	0x0800379f

08003708 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b60      	cmp	r3, #96	; 0x60
 800371a:	d10e      	bne.n	800373a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fbc8 	bl	8002ec8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003738:	e009      	b.n	800374e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff fbb3 	bl	8002eb4 <HAL_I2C_ErrorCallback>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b02      	cmp	r3, #2
 800376a:	d103      	bne.n	8003774 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2200      	movs	r2, #0
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d007      	beq.n	8003792 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699a      	ldr	r2, [r3, #24]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	619a      	str	r2, [r3, #24]
  }
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	2200      	movs	r2, #0
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	2200      	movs	r2, #0
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff ff9b 	bl	8003708 <I2C_TreatErrorCallback>
}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	460b      	mov	r3, r1
 80037e4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80037ea:	887b      	ldrh	r3, [r7, #2]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00f      	beq.n	8003814 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80037fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003808:	2b28      	cmp	r3, #40	; 0x28
 800380a:	d003      	beq.n	8003814 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003812:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003814:	887b      	ldrh	r3, [r7, #2]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00f      	beq.n	800383e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003824:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003832:	2b28      	cmp	r3, #40	; 0x28
 8003834:	d003      	beq.n	800383e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800383c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800383e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003842:	2b00      	cmp	r3, #0
 8003844:	da03      	bge.n	800384e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800384c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800384e:	887b      	ldrh	r3, [r7, #2]
 8003850:	2b10      	cmp	r3, #16
 8003852:	d103      	bne.n	800385c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800385a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	2b20      	cmp	r3, #32
 8003860:	d103      	bne.n	800386a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f043 0320 	orr.w	r3, r3, #32
 8003868:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	d103      	bne.n	8003878 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6819      	ldr	r1, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	43da      	mvns	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	400a      	ands	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
}
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d138      	bne.n	800391e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e032      	b.n	8003920 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2224      	movs	r2, #36	; 0x24
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0201 	bic.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b20      	cmp	r3, #32
 8003940:	d139      	bne.n	80039b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800394c:	2302      	movs	r3, #2
 800394e:	e033      	b.n	80039b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	; 0x24
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800397e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e000      	b.n	80039b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
  }
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <HAL_PWREx_GetVoltageRange+0x18>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40007000 	.word	0x40007000

080039e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ee:	d130      	bne.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039f0:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039fc:	d038      	beq.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2232      	movs	r2, #50	; 0x32
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	0c9b      	lsrs	r3, r3, #18
 8003a20:	3301      	adds	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a24:	e002      	b.n	8003a2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a38:	d102      	bne.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f2      	bne.n	8003a26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4c:	d110      	bne.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e00f      	b.n	8003a72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d007      	beq.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a60:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a68:	4a05      	ldr	r2, [pc, #20]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40007000 	.word	0x40007000
 8003a84:	20000000 	.word	0x20000000
 8003a88:	431bde83 	.word	0x431bde83

08003a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e3d4      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9e:	4ba1      	ldr	r3, [pc, #644]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa8:	4b9e      	ldr	r3, [pc, #632]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80e4 	beq.w	8003c88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x4a>
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	f040 808b 	bne.w	8003be4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	f040 8087 	bne.w	8003be4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ad6:	4b93      	ldr	r3, [pc, #588]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_RCC_OscConfig+0x62>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e3ac      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1a      	ldr	r2, [r3, #32]
 8003af2:	4b8c      	ldr	r3, [pc, #560]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <HAL_RCC_OscConfig+0x7c>
 8003afe:	4b89      	ldr	r3, [pc, #548]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b06:	e005      	b.n	8003b14 <HAL_RCC_OscConfig+0x88>
 8003b08:	4b86      	ldr	r3, [pc, #536]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0e:	091b      	lsrs	r3, r3, #4
 8003b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d223      	bcs.n	8003b60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fd73 	bl	8004608 <RCC_SetFlashLatencyFromMSIRange>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e38d      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b2c:	4b7d      	ldr	r3, [pc, #500]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a7c      	ldr	r2, [pc, #496]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b32:	f043 0308 	orr.w	r3, r3, #8
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b7a      	ldr	r3, [pc, #488]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	4977      	ldr	r1, [pc, #476]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b4a:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	4972      	ldr	r1, [pc, #456]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
 8003b5e:	e025      	b.n	8003bac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b60:	4b70      	ldr	r3, [pc, #448]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a6f      	ldr	r2, [pc, #444]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b66:	f043 0308 	orr.w	r3, r3, #8
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	496a      	ldr	r1, [pc, #424]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b7e:	4b69      	ldr	r3, [pc, #420]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	4965      	ldr	r1, [pc, #404]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fd33 	bl	8004608 <RCC_SetFlashLatencyFromMSIRange>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e34d      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bac:	f000 fc36 	bl	800441c <HAL_RCC_GetSysClockFreq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b5c      	ldr	r3, [pc, #368]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	495a      	ldr	r1, [pc, #360]	; (8003d28 <HAL_RCC_OscConfig+0x29c>)
 8003bbe:	5ccb      	ldrb	r3, [r1, r3]
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc8:	4a58      	ldr	r2, [pc, #352]	; (8003d2c <HAL_RCC_OscConfig+0x2a0>)
 8003bca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bcc:	4b58      	ldr	r3, [pc, #352]	; (8003d30 <HAL_RCC_OscConfig+0x2a4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fa65 	bl	80020a0 <HAL_InitTick>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d052      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	e331      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d032      	beq.n	8003c52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bec:	4b4d      	ldr	r3, [pc, #308]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a4c      	ldr	r2, [pc, #304]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fc32 	bl	8002460 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c00:	f7fe fc2e 	bl	8002460 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e31a      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c12:	4b44      	ldr	r3, [pc, #272]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a40      	ldr	r2, [pc, #256]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003c24:	f043 0308 	orr.w	r3, r3, #8
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	493b      	ldr	r1, [pc, #236]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c3c:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	4936      	ldr	r1, [pc, #216]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
 8003c50:	e01a      	b.n	8003c88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a33      	ldr	r2, [pc, #204]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c5e:	f7fe fbff 	bl	8002460 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c66:	f7fe fbfb 	bl	8002460 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e2e7      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c78:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f0      	bne.n	8003c66 <HAL_RCC_OscConfig+0x1da>
 8003c84:	e000      	b.n	8003c88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d074      	beq.n	8003d7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d005      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x21a>
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	d10e      	bne.n	8003cbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d10b      	bne.n	8003cbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d064      	beq.n	8003d7c <HAL_RCC_OscConfig+0x2f0>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d160      	bne.n	8003d7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e2c4      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc6:	d106      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x24a>
 8003cc8:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	e01d      	b.n	8003d12 <HAL_RCC_OscConfig+0x286>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cde:	d10c      	bne.n	8003cfa <HAL_RCC_OscConfig+0x26e>
 8003ce0:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0f      	ldr	r2, [pc, #60]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003ce6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	e00b      	b.n	8003d12 <HAL_RCC_OscConfig+0x286>
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a06      	ldr	r2, [pc, #24]	; (8003d24 <HAL_RCC_OscConfig+0x298>)
 8003d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01c      	beq.n	8003d54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1a:	f7fe fba1 	bl	8002460 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d20:	e011      	b.n	8003d46 <HAL_RCC_OscConfig+0x2ba>
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	0800e5c8 	.word	0x0800e5c8
 8003d2c:	20000000 	.word	0x20000000
 8003d30:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fe fb94 	bl	8002460 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e280      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d46:	4baf      	ldr	r3, [pc, #700]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x2a8>
 8003d52:	e014      	b.n	8003d7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fe fb84 	bl	8002460 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fe fb80 	bl	8002460 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e26c      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d6e:	4ba5      	ldr	r3, [pc, #660]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x2d0>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d060      	beq.n	8003e4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_OscConfig+0x310>
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d119      	bne.n	8003dca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d116      	bne.n	8003dca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d9c:	4b99      	ldr	r3, [pc, #612]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_OscConfig+0x328>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e249      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4b93      	ldr	r3, [pc, #588]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	4990      	ldr	r1, [pc, #576]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc8:	e040      	b.n	8003e4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d023      	beq.n	8003e1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd2:	4b8c      	ldr	r3, [pc, #560]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a8b      	ldr	r2, [pc, #556]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fe fb3f 	bl	8002460 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de6:	f7fe fb3b 	bl	8002460 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e227      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003df8:	4b82      	ldr	r3, [pc, #520]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e04:	4b7f      	ldr	r3, [pc, #508]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	497c      	ldr	r1, [pc, #496]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
 8003e18:	e018      	b.n	8003e4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e1a:	4b7a      	ldr	r3, [pc, #488]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a79      	ldr	r2, [pc, #484]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e26:	f7fe fb1b 	bl	8002460 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2e:	f7fe fb17 	bl	8002460 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e203      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e40:	4b70      	ldr	r3, [pc, #448]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d03c      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01c      	beq.n	8003e9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e60:	4b68      	ldr	r3, [pc, #416]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e66:	4a67      	ldr	r2, [pc, #412]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fe faf6 	bl	8002460 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e78:	f7fe faf2 	bl	8002460 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e1de      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e8a:	4b5e      	ldr	r3, [pc, #376]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ef      	beq.n	8003e78 <HAL_RCC_OscConfig+0x3ec>
 8003e98:	e01b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e9a:	4b5a      	ldr	r3, [pc, #360]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea0:	4a58      	ldr	r2, [pc, #352]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eaa:	f7fe fad9 	bl	8002460 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb2:	f7fe fad5 	bl	8002460 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e1c1      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ec4:	4b4f      	ldr	r3, [pc, #316]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1ef      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80a6 	beq.w	800402c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ee4:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10d      	bne.n	8003f0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef0:	4b44      	ldr	r3, [pc, #272]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	4a43      	ldr	r2, [pc, #268]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efa:	6593      	str	r3, [r2, #88]	; 0x58
 8003efc:	4b41      	ldr	r3, [pc, #260]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f0c:	4b3e      	ldr	r3, [pc, #248]	; (8004008 <HAL_RCC_OscConfig+0x57c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d118      	bne.n	8003f4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f18:	4b3b      	ldr	r3, [pc, #236]	; (8004008 <HAL_RCC_OscConfig+0x57c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a3a      	ldr	r2, [pc, #232]	; (8004008 <HAL_RCC_OscConfig+0x57c>)
 8003f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f24:	f7fe fa9c 	bl	8002460 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2c:	f7fe fa98 	bl	8002460 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e184      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3e:	4b32      	ldr	r3, [pc, #200]	; (8004008 <HAL_RCC_OscConfig+0x57c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d108      	bne.n	8003f64 <HAL_RCC_OscConfig+0x4d8>
 8003f52:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f58:	4a2a      	ldr	r2, [pc, #168]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f62:	e024      	b.n	8003fae <HAL_RCC_OscConfig+0x522>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d110      	bne.n	8003f8e <HAL_RCC_OscConfig+0x502>
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	4a24      	ldr	r2, [pc, #144]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003f74:	f043 0304 	orr.w	r3, r3, #4
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f7c:	4b21      	ldr	r3, [pc, #132]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	4a20      	ldr	r2, [pc, #128]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f8c:	e00f      	b.n	8003fae <HAL_RCC_OscConfig+0x522>
 8003f8e:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f9e:	4b19      	ldr	r3, [pc, #100]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	4a17      	ldr	r2, [pc, #92]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003fa6:	f023 0304 	bic.w	r3, r3, #4
 8003faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb6:	f7fe fa53 	bl	8002460 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fe fa4f 	bl	8002460 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e139      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_OscConfig+0x578>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0ed      	beq.n	8003fbe <HAL_RCC_OscConfig+0x532>
 8003fe2:	e01a      	b.n	800401a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fe fa3c 	bl	8002460 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fea:	e00f      	b.n	800400c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fec:	f7fe fa38 	bl	8002460 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d906      	bls.n	800400c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e122      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000
 8004008:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800400c:	4b90      	ldr	r3, [pc, #576]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e8      	bne.n	8003fec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800401a:	7ffb      	ldrb	r3, [r7, #31]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004020:	4b8b      	ldr	r3, [pc, #556]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	4a8a      	ldr	r2, [pc, #552]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8108 	beq.w	8004246 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	2b02      	cmp	r3, #2
 800403c:	f040 80d0 	bne.w	80041e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004040:	4b83      	ldr	r3, [pc, #524]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0203 	and.w	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	429a      	cmp	r2, r3
 8004052:	d130      	bne.n	80040b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	3b01      	subs	r3, #1
 8004060:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d127      	bne.n	80040b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d11f      	bne.n	80040b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004080:	2a07      	cmp	r2, #7
 8004082:	bf14      	ite	ne
 8004084:	2201      	movne	r2, #1
 8004086:	2200      	moveq	r2, #0
 8004088:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800408a:	4293      	cmp	r3, r2
 800408c:	d113      	bne.n	80040b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	3b01      	subs	r3, #1
 800409c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d109      	bne.n	80040b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	3b01      	subs	r3, #1
 80040b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d06e      	beq.n	8004194 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	d069      	beq.n	8004190 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040bc:	4b64      	ldr	r3, [pc, #400]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040c8:	4b61      	ldr	r3, [pc, #388]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0b7      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040d8:	4b5d      	ldr	r3, [pc, #372]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a5c      	ldr	r2, [pc, #368]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80040de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040e4:	f7fe f9bc 	bl	8002460 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fe f9b8 	bl	8002460 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e0a4      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040fe:	4b54      	ldr	r3, [pc, #336]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800410a:	4b51      	ldr	r3, [pc, #324]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	4b51      	ldr	r3, [pc, #324]	; (8004254 <HAL_RCC_OscConfig+0x7c8>)
 8004110:	4013      	ands	r3, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800411a:	3a01      	subs	r2, #1
 800411c:	0112      	lsls	r2, r2, #4
 800411e:	4311      	orrs	r1, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004124:	0212      	lsls	r2, r2, #8
 8004126:	4311      	orrs	r1, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800412c:	0852      	lsrs	r2, r2, #1
 800412e:	3a01      	subs	r2, #1
 8004130:	0552      	lsls	r2, r2, #21
 8004132:	4311      	orrs	r1, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004138:	0852      	lsrs	r2, r2, #1
 800413a:	3a01      	subs	r2, #1
 800413c:	0652      	lsls	r2, r2, #25
 800413e:	4311      	orrs	r1, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004144:	0912      	lsrs	r2, r2, #4
 8004146:	0452      	lsls	r2, r2, #17
 8004148:	430a      	orrs	r2, r1
 800414a:	4941      	ldr	r1, [pc, #260]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004150:	4b3f      	ldr	r3, [pc, #252]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a3e      	ldr	r2, [pc, #248]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800415a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800415c:	4b3c      	ldr	r3, [pc, #240]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a3b      	ldr	r2, [pc, #236]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004166:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004168:	f7fe f97a 	bl	8002460 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fe f976 	bl	8002460 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e062      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004182:	4b33      	ldr	r3, [pc, #204]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800418e:	e05a      	b.n	8004246 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e059      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004194:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d152      	bne.n	8004246 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041a0:	4b2b      	ldr	r3, [pc, #172]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a2a      	ldr	r2, [pc, #168]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80041a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041ac:	4b28      	ldr	r3, [pc, #160]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4a27      	ldr	r2, [pc, #156]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80041b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041b8:	f7fe f952 	bl	8002460 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fe f94e 	bl	8002460 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e03a      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d2:	4b1f      	ldr	r3, [pc, #124]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x734>
 80041de:	e032      	b.n	8004246 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b0c      	cmp	r3, #12
 80041e4:	d02d      	beq.n	8004242 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a19      	ldr	r2, [pc, #100]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80041ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80041f2:	4b17      	ldr	r3, [pc, #92]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d105      	bne.n	800420a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80041fe:	4b14      	ldr	r3, [pc, #80]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	4a13      	ldr	r2, [pc, #76]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004204:	f023 0303 	bic.w	r3, r3, #3
 8004208:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800420a:	4b11      	ldr	r3, [pc, #68]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	4a10      	ldr	r2, [pc, #64]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004210:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004218:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fe f921 	bl	8002460 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004222:	f7fe f91d 	bl	8002460 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e009      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_RCC_OscConfig+0x7c4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f0      	bne.n	8004222 <HAL_RCC_OscConfig+0x796>
 8004240:	e001      	b.n	8004246 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000
 8004254:	f99d808c 	.word	0xf99d808c

08004258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0c8      	b.n	80043fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800426c:	4b66      	ldr	r3, [pc, #408]	; (8004408 <HAL_RCC_ClockConfig+0x1b0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d910      	bls.n	800429c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b63      	ldr	r3, [pc, #396]	; (8004408 <HAL_RCC_ClockConfig+0x1b0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 0207 	bic.w	r2, r3, #7
 8004282:	4961      	ldr	r1, [pc, #388]	; (8004408 <HAL_RCC_ClockConfig+0x1b0>)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b5f      	ldr	r3, [pc, #380]	; (8004408 <HAL_RCC_ClockConfig+0x1b0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0b0      	b.n	80043fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d04c      	beq.n	8004342 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b0:	4b56      	ldr	r3, [pc, #344]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d121      	bne.n	8004300 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e09e      	b.n	80043fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d107      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c8:	4b50      	ldr	r3, [pc, #320]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d115      	bne.n	8004300 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e092      	b.n	80043fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d107      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042e0:	4b4a      	ldr	r3, [pc, #296]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e086      	b.n	80043fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f0:	4b46      	ldr	r3, [pc, #280]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e07e      	b.n	80043fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004300:	4b42      	ldr	r3, [pc, #264]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f023 0203 	bic.w	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	493f      	ldr	r1, [pc, #252]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004312:	f7fe f8a5 	bl	8002460 <HAL_GetTick>
 8004316:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004318:	e00a      	b.n	8004330 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800431a:	f7fe f8a1 	bl	8002460 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e066      	b.n	80043fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004330:	4b36      	ldr	r3, [pc, #216]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 020c 	and.w	r2, r3, #12
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	429a      	cmp	r2, r3
 8004340:	d1eb      	bne.n	800431a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434e:	4b2f      	ldr	r3, [pc, #188]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	492c      	ldr	r1, [pc, #176]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 800435c:	4313      	orrs	r3, r2
 800435e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004360:	4b29      	ldr	r3, [pc, #164]	; (8004408 <HAL_RCC_ClockConfig+0x1b0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d210      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b26      	ldr	r3, [pc, #152]	; (8004408 <HAL_RCC_ClockConfig+0x1b0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 0207 	bic.w	r2, r3, #7
 8004376:	4924      	ldr	r1, [pc, #144]	; (8004408 <HAL_RCC_ClockConfig+0x1b0>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b22      	ldr	r3, [pc, #136]	; (8004408 <HAL_RCC_ClockConfig+0x1b0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e036      	b.n	80043fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4918      	ldr	r1, [pc, #96]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4910      	ldr	r1, [pc, #64]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ce:	f000 f825 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80043d2:	4602      	mov	r2, r0
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <HAL_RCC_ClockConfig+0x1b4>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	490c      	ldr	r1, [pc, #48]	; (8004410 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	5ccb      	ldrb	r3, [r1, r3]
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043ee:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fd fe54 	bl	80020a0 <HAL_InitTick>
 80043f8:	4603      	mov	r3, r0
 80043fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80043fc:	7afb      	ldrb	r3, [r7, #11]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40022000 	.word	0x40022000
 800440c:	40021000 	.word	0x40021000
 8004410:	0800e5c8 	.word	0x0800e5c8
 8004414:	20000000 	.word	0x20000000
 8004418:	20000004 	.word	0x20000004

0800441c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800441c:	b480      	push	{r7}
 800441e:	b089      	sub	sp, #36	; 0x24
 8004420:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800442a:	4b3e      	ldr	r3, [pc, #248]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004434:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x34>
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b0c      	cmp	r3, #12
 8004448:	d121      	bne.n	800448e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d11e      	bne.n	800448e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004450:	4b34      	ldr	r3, [pc, #208]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d107      	bne.n	800446c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800445c:	4b31      	ldr	r3, [pc, #196]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 800445e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004462:	0a1b      	lsrs	r3, r3, #8
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	e005      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800446c:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004478:	4a2b      	ldr	r2, [pc, #172]	; (8004528 <HAL_RCC_GetSysClockFreq+0x10c>)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004480:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800448c:	e00a      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b04      	cmp	r3, #4
 8004492:	d102      	bne.n	800449a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004494:	4b25      	ldr	r3, [pc, #148]	; (800452c <HAL_RCC_GetSysClockFreq+0x110>)
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	e004      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044a0:	4b23      	ldr	r3, [pc, #140]	; (8004530 <HAL_RCC_GetSysClockFreq+0x114>)
 80044a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d134      	bne.n	8004514 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044aa:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d003      	beq.n	80044c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d003      	beq.n	80044c8 <HAL_RCC_GetSysClockFreq+0xac>
 80044c0:	e005      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044c2:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_RCC_GetSysClockFreq+0x110>)
 80044c4:	617b      	str	r3, [r7, #20]
      break;
 80044c6:	e005      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044c8:	4b19      	ldr	r3, [pc, #100]	; (8004530 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ca:	617b      	str	r3, [r7, #20]
      break;
 80044cc:	e002      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	617b      	str	r3, [r7, #20]
      break;
 80044d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	3301      	adds	r3, #1
 80044e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	fb02 f203 	mul.w	r2, r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	0e5b      	lsrs	r3, r3, #25
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	3301      	adds	r3, #1
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004514:	69bb      	ldr	r3, [r7, #24]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3724      	adds	r7, #36	; 0x24
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	0800e5e0 	.word	0x0800e5e0
 800452c:	00f42400 	.word	0x00f42400
 8004530:	007a1200 	.word	0x007a1200

08004534 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004538:	4b03      	ldr	r3, [pc, #12]	; (8004548 <HAL_RCC_GetHCLKFreq+0x14>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000000 	.word	0x20000000

0800454c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004550:	f7ff fff0 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	0a1b      	lsrs	r3, r3, #8
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4904      	ldr	r1, [pc, #16]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000
 8004574:	0800e5d8 	.word	0x0800e5d8

08004578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800457c:	f7ff ffda 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b06      	ldr	r3, [pc, #24]	; (800459c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0adb      	lsrs	r3, r3, #11
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4904      	ldr	r1, [pc, #16]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40021000 	.word	0x40021000
 80045a0:	0800e5d8 	.word	0x0800e5d8

080045a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	220f      	movs	r2, #15
 80045b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0203 	and.w	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <HAL_RCC_GetClockConfig+0x60>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0207 	and.w	r2, r3, #7
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	40022000 	.word	0x40022000

08004608 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004614:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004620:	f7ff f9d0 	bl	80039c4 <HAL_PWREx_GetVoltageRange>
 8004624:	6178      	str	r0, [r7, #20]
 8004626:	e014      	b.n	8004652 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004628:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462c:	4a24      	ldr	r2, [pc, #144]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800462e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004632:	6593      	str	r3, [r2, #88]	; 0x58
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004640:	f7ff f9c0 	bl	80039c4 <HAL_PWREx_GetVoltageRange>
 8004644:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004646:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464a:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004650:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004658:	d10b      	bne.n	8004672 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b80      	cmp	r3, #128	; 0x80
 800465e:	d919      	bls.n	8004694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2ba0      	cmp	r3, #160	; 0xa0
 8004664:	d902      	bls.n	800466c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004666:	2302      	movs	r3, #2
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	e013      	b.n	8004694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800466c:	2301      	movs	r3, #1
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	e010      	b.n	8004694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b80      	cmp	r3, #128	; 0x80
 8004676:	d902      	bls.n	800467e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004678:	2303      	movs	r3, #3
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	e00a      	b.n	8004694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b80      	cmp	r3, #128	; 0x80
 8004682:	d102      	bne.n	800468a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004684:	2302      	movs	r3, #2
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	e004      	b.n	8004694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b70      	cmp	r3, #112	; 0x70
 800468e:	d101      	bne.n	8004694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004690:	2301      	movs	r3, #1
 8004692:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f023 0207 	bic.w	r2, r3, #7
 800469c:	4909      	ldr	r1, [pc, #36]	; (80046c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046a4:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d001      	beq.n	80046b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40022000 	.word	0x40022000

080046c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046d0:	2300      	movs	r3, #0
 80046d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d4:	2300      	movs	r3, #0
 80046d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d041      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046ec:	d02a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046f2:	d824      	bhi.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046f8:	d008      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046fe:	d81e      	bhi.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004708:	d010      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800470a:	e018      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800470c:	4b86      	ldr	r3, [pc, #536]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a85      	ldr	r2, [pc, #532]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004716:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004718:	e015      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fabb 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800472a:	e00c      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3320      	adds	r3, #32
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fba6 	bl	8004e84 <RCCEx_PLLSAI2_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800473c:	e003      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	74fb      	strb	r3, [r7, #19]
      break;
 8004742:	e000      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004746:	7cfb      	ldrb	r3, [r7, #19]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10b      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800474c:	4b76      	ldr	r3, [pc, #472]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800475a:	4973      	ldr	r1, [pc, #460]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004762:	e001      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	7cfb      	ldrb	r3, [r7, #19]
 8004766:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d041      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004778:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800477c:	d02a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800477e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004782:	d824      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004788:	d008      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800478a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800478e:	d81e      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004798:	d010      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800479a:	e018      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800479c:	4b62      	ldr	r3, [pc, #392]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a61      	ldr	r2, [pc, #388]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047a8:	e015      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3304      	adds	r3, #4
 80047ae:	2100      	movs	r1, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fa73 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047ba:	e00c      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3320      	adds	r3, #32
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fb5e 	bl	8004e84 <RCCEx_PLLSAI2_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047cc:	e003      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	74fb      	strb	r3, [r7, #19]
      break;
 80047d2:	e000      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80047d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047dc:	4b52      	ldr	r3, [pc, #328]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ea:	494f      	ldr	r1, [pc, #316]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047f2:	e001      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80a0 	beq.w	8004946 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004806:	2300      	movs	r3, #0
 8004808:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800480a:	4b47      	ldr	r3, [pc, #284]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00d      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004820:	4b41      	ldr	r3, [pc, #260]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	4a40      	ldr	r2, [pc, #256]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482a:	6593      	str	r3, [r2, #88]	; 0x58
 800482c:	4b3e      	ldr	r3, [pc, #248]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004838:	2301      	movs	r3, #1
 800483a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800483c:	4b3b      	ldr	r3, [pc, #236]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a3a      	ldr	r2, [pc, #232]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004846:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004848:	f7fd fe0a 	bl	8002460 <HAL_GetTick>
 800484c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800484e:	e009      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004850:	f7fd fe06 	bl	8002460 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d902      	bls.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	74fb      	strb	r3, [r7, #19]
        break;
 8004862:	e005      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004864:	4b31      	ldr	r3, [pc, #196]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ef      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d15c      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004876:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004880:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01f      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	429a      	cmp	r2, r3
 8004892:	d019      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004894:	4b24      	ldr	r3, [pc, #144]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048a0:	4b21      	ldr	r3, [pc, #132]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	4a20      	ldr	r2, [pc, #128]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048b0:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048c0:	4a19      	ldr	r2, [pc, #100]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d016      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d2:	f7fd fdc5 	bl	8002460 <HAL_GetTick>
 80048d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d8:	e00b      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048da:	f7fd fdc1 	bl	8002460 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d902      	bls.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	74fb      	strb	r3, [r7, #19]
            break;
 80048f0:	e006      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0ec      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10c      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004916:	4904      	ldr	r1, [pc, #16]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800491e:	e009      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	74bb      	strb	r3, [r7, #18]
 8004924:	e006      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004934:	7c7b      	ldrb	r3, [r7, #17]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d105      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493a:	4b9e      	ldr	r3, [pc, #632]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	4a9d      	ldr	r2, [pc, #628]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004944:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004952:	4b98      	ldr	r3, [pc, #608]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f023 0203 	bic.w	r2, r3, #3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	4994      	ldr	r1, [pc, #592]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004974:	4b8f      	ldr	r3, [pc, #572]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f023 020c 	bic.w	r2, r3, #12
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	498c      	ldr	r1, [pc, #560]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004996:	4b87      	ldr	r3, [pc, #540]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	4983      	ldr	r1, [pc, #524]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049b8:	4b7e      	ldr	r3, [pc, #504]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	497b      	ldr	r1, [pc, #492]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049da:	4b76      	ldr	r3, [pc, #472]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e8:	4972      	ldr	r1, [pc, #456]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049fc:	4b6d      	ldr	r3, [pc, #436]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0a:	496a      	ldr	r1, [pc, #424]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a1e:	4b65      	ldr	r3, [pc, #404]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	4961      	ldr	r1, [pc, #388]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a40:	4b5c      	ldr	r3, [pc, #368]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	4959      	ldr	r1, [pc, #356]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a62:	4b54      	ldr	r3, [pc, #336]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	4950      	ldr	r1, [pc, #320]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a84:	4b4b      	ldr	r3, [pc, #300]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	4948      	ldr	r1, [pc, #288]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004aa6:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	493f      	ldr	r1, [pc, #252]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d028      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ac8:	4b3a      	ldr	r3, [pc, #232]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad6:	4937      	ldr	r1, [pc, #220]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae8:	4b32      	ldr	r3, [pc, #200]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a31      	ldr	r2, [pc, #196]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004af2:	60d3      	str	r3, [r2, #12]
 8004af4:	e011      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004afe:	d10c      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	2101      	movs	r1, #1
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f8c8 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b16:	7cfb      	ldrb	r3, [r7, #19]
 8004b18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d028      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b26:	4b23      	ldr	r3, [pc, #140]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	491f      	ldr	r1, [pc, #124]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b44:	d106      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b50:	60d3      	str	r3, [r2, #12]
 8004b52:	e011      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	2101      	movs	r1, #1
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 f899 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b6e:	7cfb      	ldrb	r3, [r7, #19]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b74:	7cfb      	ldrb	r3, [r7, #19]
 8004b76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d02b      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b92:	4908      	ldr	r1, [pc, #32]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba2:	d109      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba4:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a02      	ldr	r2, [pc, #8]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bae:	60d3      	str	r3, [r2, #12]
 8004bb0:	e014      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f867 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bd2:	7cfb      	ldrb	r3, [r7, #19]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d02f      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be8:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bf6:	4928      	ldr	r1, [pc, #160]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c06:	d10d      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 f844 	bl	8004c9c <RCCEx_PLLSAI1_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c18:	7cfb      	ldrb	r3, [r7, #19]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d014      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c1e:	7cfb      	ldrb	r3, [r7, #19]
 8004c20:	74bb      	strb	r3, [r7, #18]
 8004c22:	e011      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3320      	adds	r3, #32
 8004c32:	2102      	movs	r1, #2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f925 	bl	8004e84 <RCCEx_PLLSAI2_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c3e:	7cfb      	ldrb	r3, [r7, #19]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c44:	7cfb      	ldrb	r3, [r7, #19]
 8004c46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c54:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c62:	490d      	ldr	r1, [pc, #52]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c86:	4904      	ldr	r1, [pc, #16]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40021000 	.word	0x40021000

08004c9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004caa:	4b75      	ldr	r3, [pc, #468]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d018      	beq.n	8004ce8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cb6:	4b72      	ldr	r3, [pc, #456]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0203 	and.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d10d      	bne.n	8004ce2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cce:	4b6c      	ldr	r3, [pc, #432]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d047      	beq.n	8004d72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	73fb      	strb	r3, [r7, #15]
 8004ce6:	e044      	b.n	8004d72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d018      	beq.n	8004d22 <RCCEx_PLLSAI1_Config+0x86>
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d825      	bhi.n	8004d40 <RCCEx_PLLSAI1_Config+0xa4>
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d002      	beq.n	8004cfe <RCCEx_PLLSAI1_Config+0x62>
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d009      	beq.n	8004d10 <RCCEx_PLLSAI1_Config+0x74>
 8004cfc:	e020      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cfe:	4b60      	ldr	r3, [pc, #384]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d11d      	bne.n	8004d46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d0e:	e01a      	b.n	8004d46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d10:	4b5b      	ldr	r3, [pc, #364]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d116      	bne.n	8004d4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d20:	e013      	b.n	8004d4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d22:	4b57      	ldr	r3, [pc, #348]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10f      	bne.n	8004d4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d2e:	4b54      	ldr	r3, [pc, #336]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d3e:	e006      	b.n	8004d4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
      break;
 8004d44:	e004      	b.n	8004d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d46:	bf00      	nop
 8004d48:	e002      	b.n	8004d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e000      	b.n	8004d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10d      	bne.n	8004d72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d56:	4b4a      	ldr	r3, [pc, #296]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	4944      	ldr	r1, [pc, #272]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d17d      	bne.n	8004e74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d78:	4b41      	ldr	r3, [pc, #260]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a40      	ldr	r2, [pc, #256]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d84:	f7fd fb6c 	bl	8002460 <HAL_GetTick>
 8004d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d8a:	e009      	b.n	8004da0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d8c:	f7fd fb68 	bl	8002460 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d902      	bls.n	8004da0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d9e:	e005      	b.n	8004dac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004da0:	4b37      	ldr	r3, [pc, #220]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1ef      	bne.n	8004d8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d160      	bne.n	8004e74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d111      	bne.n	8004ddc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004db8:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6892      	ldr	r2, [r2, #8]
 8004dc8:	0211      	lsls	r1, r2, #8
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68d2      	ldr	r2, [r2, #12]
 8004dce:	0912      	lsrs	r2, r2, #4
 8004dd0:	0452      	lsls	r2, r2, #17
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	492a      	ldr	r1, [pc, #168]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	610b      	str	r3, [r1, #16]
 8004dda:	e027      	b.n	8004e2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d112      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004de2:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004dea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6892      	ldr	r2, [r2, #8]
 8004df2:	0211      	lsls	r1, r2, #8
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6912      	ldr	r2, [r2, #16]
 8004df8:	0852      	lsrs	r2, r2, #1
 8004dfa:	3a01      	subs	r2, #1
 8004dfc:	0552      	lsls	r2, r2, #21
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	491f      	ldr	r1, [pc, #124]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	610b      	str	r3, [r1, #16]
 8004e06:	e011      	b.n	8004e2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e08:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6892      	ldr	r2, [r2, #8]
 8004e18:	0211      	lsls	r1, r2, #8
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6952      	ldr	r2, [r2, #20]
 8004e1e:	0852      	lsrs	r2, r2, #1
 8004e20:	3a01      	subs	r2, #1
 8004e22:	0652      	lsls	r2, r2, #25
 8004e24:	430a      	orrs	r2, r1
 8004e26:	4916      	ldr	r1, [pc, #88]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e2c:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e38:	f7fd fb12 	bl	8002460 <HAL_GetTick>
 8004e3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e3e:	e009      	b.n	8004e54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e40:	f7fd fb0e 	bl	8002460 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d902      	bls.n	8004e54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	73fb      	strb	r3, [r7, #15]
          break;
 8004e52:	e005      	b.n	8004e60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ef      	beq.n	8004e40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	4904      	ldr	r1, [pc, #16]	; (8004e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000

08004e84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e92:	4b6a      	ldr	r3, [pc, #424]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e9e:	4b67      	ldr	r3, [pc, #412]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f003 0203 	and.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d10d      	bne.n	8004eca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004eb6:	4b61      	ldr	r3, [pc, #388]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	091b      	lsrs	r3, r3, #4
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d047      	beq.n	8004f5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
 8004ece:	e044      	b.n	8004f5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d018      	beq.n	8004f0a <RCCEx_PLLSAI2_Config+0x86>
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d825      	bhi.n	8004f28 <RCCEx_PLLSAI2_Config+0xa4>
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d002      	beq.n	8004ee6 <RCCEx_PLLSAI2_Config+0x62>
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d009      	beq.n	8004ef8 <RCCEx_PLLSAI2_Config+0x74>
 8004ee4:	e020      	b.n	8004f28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ee6:	4b55      	ldr	r3, [pc, #340]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d11d      	bne.n	8004f2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef6:	e01a      	b.n	8004f2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ef8:	4b50      	ldr	r3, [pc, #320]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d116      	bne.n	8004f32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f08:	e013      	b.n	8004f32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f0a:	4b4c      	ldr	r3, [pc, #304]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f16:	4b49      	ldr	r3, [pc, #292]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f26:	e006      	b.n	8004f36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	e004      	b.n	8004f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f36:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10d      	bne.n	8004f5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f3e:	4b3f      	ldr	r3, [pc, #252]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	430b      	orrs	r3, r1
 8004f54:	4939      	ldr	r1, [pc, #228]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d167      	bne.n	8005030 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f60:	4b36      	ldr	r3, [pc, #216]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a35      	ldr	r2, [pc, #212]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6c:	f7fd fa78 	bl	8002460 <HAL_GetTick>
 8004f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f72:	e009      	b.n	8004f88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f74:	f7fd fa74 	bl	8002460 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d902      	bls.n	8004f88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	73fb      	strb	r3, [r7, #15]
        break;
 8004f86:	e005      	b.n	8004f94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f88:	4b2c      	ldr	r3, [pc, #176]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ef      	bne.n	8004f74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d14a      	bne.n	8005030 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d111      	bne.n	8004fc4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fa0:	4b26      	ldr	r3, [pc, #152]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6892      	ldr	r2, [r2, #8]
 8004fb0:	0211      	lsls	r1, r2, #8
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	68d2      	ldr	r2, [r2, #12]
 8004fb6:	0912      	lsrs	r2, r2, #4
 8004fb8:	0452      	lsls	r2, r2, #17
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	491f      	ldr	r1, [pc, #124]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	614b      	str	r3, [r1, #20]
 8004fc2:	e011      	b.n	8004fe8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6892      	ldr	r2, [r2, #8]
 8004fd4:	0211      	lsls	r1, r2, #8
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6912      	ldr	r2, [r2, #16]
 8004fda:	0852      	lsrs	r2, r2, #1
 8004fdc:	3a01      	subs	r2, #1
 8004fde:	0652      	lsls	r2, r2, #25
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	4916      	ldr	r1, [pc, #88]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fe8:	4b14      	ldr	r3, [pc, #80]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a13      	ldr	r2, [pc, #76]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fd fa34 	bl	8002460 <HAL_GetTick>
 8004ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ffa:	e009      	b.n	8005010 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ffc:	f7fd fa30 	bl	8002460 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d902      	bls.n	8005010 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	73fb      	strb	r3, [r7, #15]
          break;
 800500e:	e005      	b.n	800501c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0ef      	beq.n	8004ffc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005022:	4b06      	ldr	r3, [pc, #24]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	4904      	ldr	r1, [pc, #16]	; (800503c <RCCEx_PLLSAI2_Config+0x1b8>)
 800502c:	4313      	orrs	r3, r2
 800502e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005030:	7bfb      	ldrb	r3, [r7, #15]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000

08005040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e095      	b.n	800517e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	2b00      	cmp	r3, #0
 8005058:	d108      	bne.n	800506c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005062:	d009      	beq.n	8005078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	61da      	str	r2, [r3, #28]
 800506a:	e005      	b.n	8005078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fc ff64 	bl	8001f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050b8:	d902      	bls.n	80050c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e002      	b.n	80050c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050ce:	d007      	beq.n	80050e0 <HAL_SPI_Init+0xa0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050d8:	d002      	beq.n	80050e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005122:	ea42 0103 	orr.w	r1, r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	0c1b      	lsrs	r3, r3, #16
 800513c:	f003 0204 	and.w	r2, r3, #4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800515c:	ea42 0103 	orr.w	r1, r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e01a      	b.n	80051ce <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fc ff17 	bl	8001fe4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b088      	sub	sp, #32
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_SPI_Transmit+0x22>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e158      	b.n	80054aa <HAL_SPI_Transmit+0x2d4>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005200:	f7fd f92e 	bl	8002460 <HAL_GetTick>
 8005204:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b01      	cmp	r3, #1
 8005214:	d002      	beq.n	800521c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005216:	2302      	movs	r3, #2
 8005218:	77fb      	strb	r3, [r7, #31]
    goto error;
 800521a:	e13d      	b.n	8005498 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_SPI_Transmit+0x52>
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800522c:	e134      	b.n	8005498 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2203      	movs	r2, #3
 8005232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	88fa      	ldrh	r2, [r7, #6]
 8005246:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005278:	d10f      	bne.n	800529a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005288:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005298:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d007      	beq.n	80052b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052c0:	d94b      	bls.n	800535a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <HAL_SPI_Transmit+0xfa>
 80052ca:	8afb      	ldrh	r3, [r7, #22]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d13e      	bne.n	800534e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	881a      	ldrh	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	1c9a      	adds	r2, r3, #2
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052f4:	e02b      	b.n	800534e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b02      	cmp	r3, #2
 8005302:	d112      	bne.n	800532a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	1c9a      	adds	r2, r3, #2
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005328:	e011      	b.n	800534e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800532a:	f7fd f899 	bl	8002460 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d803      	bhi.n	8005342 <HAL_SPI_Transmit+0x16c>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005340:	d102      	bne.n	8005348 <HAL_SPI_Transmit+0x172>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800534c:	e0a4      	b.n	8005498 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1ce      	bne.n	80052f6 <HAL_SPI_Transmit+0x120>
 8005358:	e07c      	b.n	8005454 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_SPI_Transmit+0x192>
 8005362:	8afb      	ldrh	r3, [r7, #22]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d170      	bne.n	800544a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b01      	cmp	r3, #1
 8005370:	d912      	bls.n	8005398 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	881a      	ldrh	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	1c9a      	adds	r2, r3, #2
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b02      	subs	r3, #2
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005396:	e058      	b.n	800544a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	7812      	ldrb	r2, [r2, #0]
 80053a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80053be:	e044      	b.n	800544a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d12b      	bne.n	8005426 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d912      	bls.n	80053fe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	881a      	ldrh	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	1c9a      	adds	r2, r3, #2
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b02      	subs	r3, #2
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053fc:	e025      	b.n	800544a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	7812      	ldrb	r2, [r2, #0]
 800540a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005424:	e011      	b.n	800544a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005426:	f7fd f81b 	bl	8002460 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d803      	bhi.n	800543e <HAL_SPI_Transmit+0x268>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800543c:	d102      	bne.n	8005444 <HAL_SPI_Transmit+0x26e>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005448:	e026      	b.n	8005498 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1b5      	bne.n	80053c0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 fcdf 	bl	8005e1c <SPI_EndRxTxTransaction>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	77fb      	strb	r3, [r7, #31]
 8005494:	e000      	b.n	8005498 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005496:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3720      	adds	r7, #32
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b088      	sub	sp, #32
 80054b6:	af02      	add	r7, sp, #8
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ce:	d112      	bne.n	80054f6 <HAL_SPI_Receive+0x44>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10e      	bne.n	80054f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2204      	movs	r2, #4
 80054dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	4613      	mov	r3, r2
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f910 	bl	8005712 <HAL_SPI_TransmitReceive>
 80054f2:	4603      	mov	r3, r0
 80054f4:	e109      	b.n	800570a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_SPI_Receive+0x52>
 8005500:	2302      	movs	r3, #2
 8005502:	e102      	b.n	800570a <HAL_SPI_Receive+0x258>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800550c:	f7fc ffa8 	bl	8002460 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b01      	cmp	r3, #1
 800551c:	d002      	beq.n	8005524 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800551e:	2302      	movs	r3, #2
 8005520:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005522:	e0e9      	b.n	80056f8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_SPI_Receive+0x7e>
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005534:	e0e0      	b.n	80056f8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2204      	movs	r2, #4
 800553a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	88fa      	ldrh	r2, [r7, #6]
 800554e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005580:	d908      	bls.n	8005594 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005590:	605a      	str	r2, [r3, #4]
 8005592:	e007      	b.n	80055a4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055a2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ac:	d10f      	bne.n	80055ce <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d007      	beq.n	80055ec <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055f4:	d867      	bhi.n	80056c6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055f6:	e030      	b.n	800565a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b01      	cmp	r3, #1
 8005604:	d117      	bne.n	8005636 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f103 020c 	add.w	r2, r3, #12
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	7812      	ldrb	r2, [r2, #0]
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005634:	e011      	b.n	800565a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005636:	f7fc ff13 	bl	8002460 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d803      	bhi.n	800564e <HAL_SPI_Receive+0x19c>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800564c:	d102      	bne.n	8005654 <HAL_SPI_Receive+0x1a2>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005658:	e04e      	b.n	80056f8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1c8      	bne.n	80055f8 <HAL_SPI_Receive+0x146>
 8005666:	e034      	b.n	80056d2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b01      	cmp	r3, #1
 8005674:	d115      	bne.n	80056a2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	b292      	uxth	r2, r2
 8005682:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	1c9a      	adds	r2, r3, #2
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056a0:	e011      	b.n	80056c6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a2:	f7fc fedd 	bl	8002460 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d803      	bhi.n	80056ba <HAL_SPI_Receive+0x208>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056b8:	d102      	bne.n	80056c0 <HAL_SPI_Receive+0x20e>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056c4:	e018      	b.n	80056f8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1ca      	bne.n	8005668 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fb48 	bl	8005d6c <SPI_EndRxTransaction>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
 80056f4:	e000      	b.n	80056f8 <HAL_SPI_Receive+0x246>
  }

error :
 80056f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005708:	7dfb      	ldrb	r3, [r7, #23]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b08a      	sub	sp, #40	; 0x28
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005720:	2301      	movs	r3, #1
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_SPI_TransmitReceive+0x26>
 8005734:	2302      	movs	r3, #2
 8005736:	e1fb      	b.n	8005b30 <HAL_SPI_TransmitReceive+0x41e>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005740:	f7fc fe8e 	bl	8002460 <HAL_GetTick>
 8005744:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800574c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005754:	887b      	ldrh	r3, [r7, #2]
 8005756:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005758:	887b      	ldrh	r3, [r7, #2]
 800575a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800575c:	7efb      	ldrb	r3, [r7, #27]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d00e      	beq.n	8005780 <HAL_SPI_TransmitReceive+0x6e>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005768:	d106      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x66>
 8005772:	7efb      	ldrb	r3, [r7, #27]
 8005774:	2b04      	cmp	r3, #4
 8005776:	d003      	beq.n	8005780 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005778:	2302      	movs	r3, #2
 800577a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800577e:	e1cd      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x80>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x80>
 800578c:	887b      	ldrh	r3, [r7, #2]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005798:	e1c0      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d003      	beq.n	80057ae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2205      	movs	r2, #5
 80057aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	887a      	ldrh	r2, [r7, #2]
 80057be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	887a      	ldrh	r2, [r7, #2]
 80057c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	887a      	ldrh	r2, [r7, #2]
 80057d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	887a      	ldrh	r2, [r7, #2]
 80057da:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057f0:	d802      	bhi.n	80057f8 <HAL_SPI_TransmitReceive+0xe6>
 80057f2:	8a3b      	ldrh	r3, [r7, #16]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d908      	bls.n	800580a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	e007      	b.n	800581a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005818:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d007      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005836:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005840:	d97c      	bls.n	800593c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_SPI_TransmitReceive+0x13e>
 800584a:	8a7b      	ldrh	r3, [r7, #18]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d169      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	1c9a      	adds	r2, r3, #2
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005874:	e056      	b.n	8005924 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d11b      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x1aa>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <HAL_SPI_TransmitReceive+0x1aa>
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	2b01      	cmp	r3, #1
 8005892:	d113      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	881a      	ldrh	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	1c9a      	adds	r2, r3, #2
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d11c      	bne.n	8005904 <HAL_SPI_TransmitReceive+0x1f2>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d016      	beq.n	8005904 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	b292      	uxth	r2, r2
 80058e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005900:	2301      	movs	r3, #1
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005904:	f7fc fdac 	bl	8002460 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005910:	429a      	cmp	r2, r3
 8005912:	d807      	bhi.n	8005924 <HAL_SPI_TransmitReceive+0x212>
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800591a:	d003      	beq.n	8005924 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005922:	e0fb      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1a3      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x164>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d19d      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x164>
 800593a:	e0df      	b.n	8005afc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_SPI_TransmitReceive+0x23a>
 8005944:	8a7b      	ldrh	r3, [r7, #18]
 8005946:	2b01      	cmp	r3, #1
 8005948:	f040 80cb 	bne.w	8005ae2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b01      	cmp	r3, #1
 8005954:	d912      	bls.n	800597c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	881a      	ldrh	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	1c9a      	adds	r2, r3, #2
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b02      	subs	r3, #2
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	87da      	strh	r2, [r3, #62]	; 0x3e
 800597a:	e0b2      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	7812      	ldrb	r2, [r2, #0]
 8005988:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059a2:	e09e      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d134      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x30a>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02f      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x30a>
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d12c      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d912      	bls.n	80059f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	881a      	ldrh	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	1c9a      	adds	r2, r3, #2
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b02      	subs	r3, #2
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059f0:	e012      	b.n	8005a18 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	7812      	ldrb	r2, [r2, #0]
 80059fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d148      	bne.n	8005abc <HAL_SPI_TransmitReceive+0x3aa>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d042      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d923      	bls.n	8005a8a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	b292      	uxth	r2, r2
 8005a4e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	1c9a      	adds	r2, r3, #2
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b02      	subs	r3, #2
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d81f      	bhi.n	8005ab8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a86:	605a      	str	r2, [r3, #4]
 8005a88:	e016      	b.n	8005ab8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f103 020c 	add.w	r2, r3, #12
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005abc:	f7fc fcd0 	bl	8002460 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d803      	bhi.n	8005ad4 <HAL_SPI_TransmitReceive+0x3c2>
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad2:	d102      	bne.n	8005ada <HAL_SPI_TransmitReceive+0x3c8>
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ae0:	e01c      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f47f af5b 	bne.w	80059a4 <HAL_SPI_TransmitReceive+0x292>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f47f af54 	bne.w	80059a4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f98b 	bl	8005e1c <SPI_EndRxTxTransaction>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d006      	beq.n	8005b1a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	661a      	str	r2, [r3, #96]	; 0x60
 8005b18:	e000      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005b1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3728      	adds	r7, #40	; 0x28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b48:	f7fc fc8a 	bl	8002460 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	4413      	add	r3, r2
 8005b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b58:	f7fc fc82 	bl	8002460 <HAL_GetTick>
 8005b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b5e:	4b39      	ldr	r3, [pc, #228]	; (8005c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	015b      	lsls	r3, r3, #5
 8005b64:	0d1b      	lsrs	r3, r3, #20
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b6e:	e054      	b.n	8005c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b76:	d050      	beq.n	8005c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b78:	f7fc fc72 	bl	8002460 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d902      	bls.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d13d      	bne.n	8005c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ba6:	d111      	bne.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb0:	d004      	beq.n	8005bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d107      	bne.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd4:	d10f      	bne.n	8005bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e017      	b.n	8005c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4013      	ands	r3, r2
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	bf0c      	ite	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	2300      	movne	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d19b      	bne.n	8005b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000000 	.word	0x20000000

08005c48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c56:	f7fc fc03 	bl	8002460 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	1a9b      	subs	r3, r3, r2
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	4413      	add	r3, r2
 8005c64:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c66:	f7fc fbfb 	bl	8002460 <HAL_GetTick>
 8005c6a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c6c:	4b3e      	ldr	r3, [pc, #248]	; (8005d68 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	00da      	lsls	r2, r3, #3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	0d1b      	lsrs	r3, r3, #20
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c84:	e062      	b.n	8005d4c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c8c:	d109      	bne.n	8005ca2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d106      	bne.n	8005ca2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005ca0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ca8:	d050      	beq.n	8005d4c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005caa:	f7fc fbd9 	bl	8002460 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d902      	bls.n	8005cc0 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d13d      	bne.n	8005d3c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd8:	d111      	bne.n	8005cfe <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce2:	d004      	beq.n	8005cee <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cec:	d107      	bne.n	8005cfe <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d06:	d10f      	bne.n	8005d28 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e010      	b.n	8005d5e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4013      	ands	r3, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d194      	bne.n	8005c86 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000000 	.word	0x20000000

08005d6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d80:	d111      	bne.n	8005da6 <SPI_EndRxTransaction+0x3a>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d8a:	d004      	beq.n	8005d96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d94:	d107      	bne.n	8005da6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2200      	movs	r2, #0
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f7ff fec1 	bl	8005b38 <SPI_WaitFlagStateUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc0:	f043 0220 	orr.w	r2, r3, #32
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e023      	b.n	8005e14 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd4:	d11d      	bne.n	8005e12 <SPI_EndRxTransaction+0xa6>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dde:	d004      	beq.n	8005dea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d113      	bne.n	8005e12 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff ff26 	bl	8005c48 <SPI_WaitFifoStateUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e06:	f043 0220 	orr.w	r2, r3, #32
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e000      	b.n	8005e14 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff ff07 	bl	8005c48 <SPI_WaitFifoStateUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e44:	f043 0220 	orr.w	r2, r3, #32
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e027      	b.n	8005ea0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2200      	movs	r2, #0
 8005e58:	2180      	movs	r1, #128	; 0x80
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7ff fe6c 	bl	8005b38 <SPI_WaitFlagStateUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6a:	f043 0220 	orr.w	r2, r3, #32
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e014      	b.n	8005ea0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7ff fee0 	bl	8005c48 <SPI_WaitFifoStateUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d007      	beq.n	8005e9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e92:	f043 0220 	orr.w	r2, r3, #32
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e000      	b.n	8005ea0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e049      	b.n	8005f4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f841 	bl	8005f56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	f000 f9f8 	bl	80062dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d001      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e04f      	b.n	8006024 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a23      	ldr	r2, [pc, #140]	; (8006030 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01d      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x76>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fae:	d018      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x76>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x76>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <HAL_TIM_Base_Start_IT+0xcc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00e      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x76>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <HAL_TIM_Base_Start_IT+0xd0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d009      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x76>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d004      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0x76>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a19      	ldr	r2, [pc, #100]	; (8006044 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d115      	bne.n	800600e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	4b17      	ldr	r3, [pc, #92]	; (8006048 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b06      	cmp	r3, #6
 8005ff2:	d015      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0xb4>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffa:	d011      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0201 	orr.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600c:	e008      	b.n	8006020 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 0201 	orr.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	e000      	b.n	8006022 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006020:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	40012c00 	.word	0x40012c00
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	40013400 	.word	0x40013400
 8006044:	40014000 	.word	0x40014000
 8006048:	00010007 	.word	0x00010007

0800604c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b02      	cmp	r3, #2
 8006060:	d122      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b02      	cmp	r3, #2
 800606e:	d11b      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0202 	mvn.w	r2, #2
 8006078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f905 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8006094:	e005      	b.n	80060a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f8f7 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f908 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d122      	bne.n	80060fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d11b      	bne.n	80060fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0204 	mvn.w	r2, #4
 80060cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2202      	movs	r2, #2
 80060d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f8db 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 80060e8:	e005      	b.n	80060f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f8cd 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f8de 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b08      	cmp	r3, #8
 8006108:	d122      	bne.n	8006150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b08      	cmp	r3, #8
 8006116:	d11b      	bne.n	8006150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0208 	mvn.w	r2, #8
 8006120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2204      	movs	r2, #4
 8006126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f8b1 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 800613c:	e005      	b.n	800614a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f8a3 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f8b4 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f003 0310 	and.w	r3, r3, #16
 800615a:	2b10      	cmp	r3, #16
 800615c:	d122      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b10      	cmp	r3, #16
 800616a:	d11b      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0210 	mvn.w	r2, #16
 8006174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2208      	movs	r2, #8
 800617a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f887 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8006190:	e005      	b.n	800619e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f879 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f88a 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d10e      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d107      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0201 	mvn.w	r2, #1
 80061c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fb fe34 	bl	8001e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	2b80      	cmp	r3, #128	; 0x80
 80061dc:	d10e      	bne.n	80061fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	2b80      	cmp	r3, #128	; 0x80
 80061ea:	d107      	bne.n	80061fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f914 	bl	8006424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620a:	d10e      	bne.n	800622a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d107      	bne.n	800622a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f907 	bl	8006438 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d10e      	bne.n	8006256 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d107      	bne.n	8006256 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800624e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f838 	bl	80062c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b20      	cmp	r3, #32
 8006262:	d10e      	bne.n	8006282 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b20      	cmp	r3, #32
 8006270:	d107      	bne.n	8006282 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f06f 0220 	mvn.w	r2, #32
 800627a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f8c7 	bl	8006410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a40      	ldr	r2, [pc, #256]	; (80063f0 <TIM_Base_SetConfig+0x114>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d013      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fa:	d00f      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a3d      	ldr	r2, [pc, #244]	; (80063f4 <TIM_Base_SetConfig+0x118>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00b      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a3c      	ldr	r2, [pc, #240]	; (80063f8 <TIM_Base_SetConfig+0x11c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d007      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a3b      	ldr	r2, [pc, #236]	; (80063fc <TIM_Base_SetConfig+0x120>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a3a      	ldr	r2, [pc, #232]	; (8006400 <TIM_Base_SetConfig+0x124>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d108      	bne.n	800632e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a2f      	ldr	r2, [pc, #188]	; (80063f0 <TIM_Base_SetConfig+0x114>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01f      	beq.n	8006376 <TIM_Base_SetConfig+0x9a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633c:	d01b      	beq.n	8006376 <TIM_Base_SetConfig+0x9a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a2c      	ldr	r2, [pc, #176]	; (80063f4 <TIM_Base_SetConfig+0x118>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d017      	beq.n	8006376 <TIM_Base_SetConfig+0x9a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2b      	ldr	r2, [pc, #172]	; (80063f8 <TIM_Base_SetConfig+0x11c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <TIM_Base_SetConfig+0x9a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2a      	ldr	r2, [pc, #168]	; (80063fc <TIM_Base_SetConfig+0x120>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00f      	beq.n	8006376 <TIM_Base_SetConfig+0x9a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a29      	ldr	r2, [pc, #164]	; (8006400 <TIM_Base_SetConfig+0x124>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00b      	beq.n	8006376 <TIM_Base_SetConfig+0x9a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a28      	ldr	r2, [pc, #160]	; (8006404 <TIM_Base_SetConfig+0x128>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d007      	beq.n	8006376 <TIM_Base_SetConfig+0x9a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a27      	ldr	r2, [pc, #156]	; (8006408 <TIM_Base_SetConfig+0x12c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d003      	beq.n	8006376 <TIM_Base_SetConfig+0x9a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a26      	ldr	r2, [pc, #152]	; (800640c <TIM_Base_SetConfig+0x130>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d108      	bne.n	8006388 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800637c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a10      	ldr	r2, [pc, #64]	; (80063f0 <TIM_Base_SetConfig+0x114>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00f      	beq.n	80063d4 <TIM_Base_SetConfig+0xf8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a12      	ldr	r2, [pc, #72]	; (8006400 <TIM_Base_SetConfig+0x124>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00b      	beq.n	80063d4 <TIM_Base_SetConfig+0xf8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a11      	ldr	r2, [pc, #68]	; (8006404 <TIM_Base_SetConfig+0x128>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d007      	beq.n	80063d4 <TIM_Base_SetConfig+0xf8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a10      	ldr	r2, [pc, #64]	; (8006408 <TIM_Base_SetConfig+0x12c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_Base_SetConfig+0xf8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a0f      	ldr	r2, [pc, #60]	; (800640c <TIM_Base_SetConfig+0x130>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d103      	bne.n	80063dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	615a      	str	r2, [r3, #20]
}
 80063e2:	bf00      	nop
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40012c00 	.word	0x40012c00
 80063f4:	40000400 	.word	0x40000400
 80063f8:	40000800 	.word	0x40000800
 80063fc:	40000c00 	.word	0x40000c00
 8006400:	40013400 	.word	0x40013400
 8006404:	40014000 	.word	0x40014000
 8006408:	40014400 	.word	0x40014400
 800640c:	40014800 	.word	0x40014800

08006410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e040      	b.n	80064e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fb fdd4 	bl	800201c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2224      	movs	r2, #36	; 0x24
 8006478:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f8c0 	bl	8006610 <UART_SetConfig>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e022      	b.n	80064e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fb3e 	bl	8006b24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fbc5 	bl	8006c68 <UART_CheckIdleState>
 80064de:	4603      	mov	r3, r0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	; 0x28
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	4613      	mov	r3, r2
 80064f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	f040 8082 	bne.w	8006606 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_UART_Transmit+0x26>
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e07a      	b.n	8006608 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_UART_Transmit+0x38>
 800651c:	2302      	movs	r3, #2
 800651e:	e073      	b.n	8006608 <HAL_UART_Transmit+0x120>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2221      	movs	r2, #33	; 0x21
 8006534:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006536:	f7fb ff93 	bl	8002460 <HAL_GetTick>
 800653a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	88fa      	ldrh	r2, [r7, #6]
 8006540:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006554:	d108      	bne.n	8006568 <HAL_UART_Transmit+0x80>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d104      	bne.n	8006568 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	e003      	b.n	8006570 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006578:	e02d      	b.n	80065d6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2200      	movs	r2, #0
 8006582:	2180      	movs	r1, #128	; 0x80
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fbb8 	bl	8006cfa <UART_WaitOnFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e039      	b.n	8006608 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10b      	bne.n	80065b2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	881a      	ldrh	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a6:	b292      	uxth	r2, r2
 80065a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	3302      	adds	r3, #2
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	e008      	b.n	80065c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	b292      	uxth	r2, r2
 80065bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	3301      	adds	r3, #1
 80065c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1cb      	bne.n	800657a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2200      	movs	r2, #0
 80065ea:	2140      	movs	r1, #64	; 0x40
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fb84 	bl	8006cfa <UART_WaitOnFlagUntilTimeout>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e005      	b.n	8006608 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	e000      	b.n	8006608 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006606:	2302      	movs	r3, #2
  }
}
 8006608:	4618      	mov	r0, r3
 800660a:	3720      	adds	r7, #32
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006610:	b5b0      	push	{r4, r5, r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	4313      	orrs	r3, r2
 8006632:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	4bad      	ldr	r3, [pc, #692]	; (80068f0 <UART_SetConfig+0x2e0>)
 800663c:	4013      	ands	r3, r2
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	69f9      	ldr	r1, [r7, #28]
 8006644:	430b      	orrs	r3, r1
 8006646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4aa2      	ldr	r2, [pc, #648]	; (80068f4 <UART_SetConfig+0x2e4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	4313      	orrs	r3, r2
 8006676:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	430a      	orrs	r2, r1
 800668a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a99      	ldr	r2, [pc, #612]	; (80068f8 <UART_SetConfig+0x2e8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d121      	bne.n	80066da <UART_SetConfig+0xca>
 8006696:	4b99      	ldr	r3, [pc, #612]	; (80068fc <UART_SetConfig+0x2ec>)
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d817      	bhi.n	80066d4 <UART_SetConfig+0xc4>
 80066a4:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <UART_SetConfig+0x9c>)
 80066a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066aa:	bf00      	nop
 80066ac:	080066bd 	.word	0x080066bd
 80066b0:	080066c9 	.word	0x080066c9
 80066b4:	080066c3 	.word	0x080066c3
 80066b8:	080066cf 	.word	0x080066cf
 80066bc:	2301      	movs	r3, #1
 80066be:	76fb      	strb	r3, [r7, #27]
 80066c0:	e0e7      	b.n	8006892 <UART_SetConfig+0x282>
 80066c2:	2302      	movs	r3, #2
 80066c4:	76fb      	strb	r3, [r7, #27]
 80066c6:	e0e4      	b.n	8006892 <UART_SetConfig+0x282>
 80066c8:	2304      	movs	r3, #4
 80066ca:	76fb      	strb	r3, [r7, #27]
 80066cc:	e0e1      	b.n	8006892 <UART_SetConfig+0x282>
 80066ce:	2308      	movs	r3, #8
 80066d0:	76fb      	strb	r3, [r7, #27]
 80066d2:	e0de      	b.n	8006892 <UART_SetConfig+0x282>
 80066d4:	2310      	movs	r3, #16
 80066d6:	76fb      	strb	r3, [r7, #27]
 80066d8:	e0db      	b.n	8006892 <UART_SetConfig+0x282>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a88      	ldr	r2, [pc, #544]	; (8006900 <UART_SetConfig+0x2f0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d132      	bne.n	800674a <UART_SetConfig+0x13a>
 80066e4:	4b85      	ldr	r3, [pc, #532]	; (80068fc <UART_SetConfig+0x2ec>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	f003 030c 	and.w	r3, r3, #12
 80066ee:	2b0c      	cmp	r3, #12
 80066f0:	d828      	bhi.n	8006744 <UART_SetConfig+0x134>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0xe8>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	0800672d 	.word	0x0800672d
 80066fc:	08006745 	.word	0x08006745
 8006700:	08006745 	.word	0x08006745
 8006704:	08006745 	.word	0x08006745
 8006708:	08006739 	.word	0x08006739
 800670c:	08006745 	.word	0x08006745
 8006710:	08006745 	.word	0x08006745
 8006714:	08006745 	.word	0x08006745
 8006718:	08006733 	.word	0x08006733
 800671c:	08006745 	.word	0x08006745
 8006720:	08006745 	.word	0x08006745
 8006724:	08006745 	.word	0x08006745
 8006728:	0800673f 	.word	0x0800673f
 800672c:	2300      	movs	r3, #0
 800672e:	76fb      	strb	r3, [r7, #27]
 8006730:	e0af      	b.n	8006892 <UART_SetConfig+0x282>
 8006732:	2302      	movs	r3, #2
 8006734:	76fb      	strb	r3, [r7, #27]
 8006736:	e0ac      	b.n	8006892 <UART_SetConfig+0x282>
 8006738:	2304      	movs	r3, #4
 800673a:	76fb      	strb	r3, [r7, #27]
 800673c:	e0a9      	b.n	8006892 <UART_SetConfig+0x282>
 800673e:	2308      	movs	r3, #8
 8006740:	76fb      	strb	r3, [r7, #27]
 8006742:	e0a6      	b.n	8006892 <UART_SetConfig+0x282>
 8006744:	2310      	movs	r3, #16
 8006746:	76fb      	strb	r3, [r7, #27]
 8006748:	e0a3      	b.n	8006892 <UART_SetConfig+0x282>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a6d      	ldr	r2, [pc, #436]	; (8006904 <UART_SetConfig+0x2f4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d120      	bne.n	8006796 <UART_SetConfig+0x186>
 8006754:	4b69      	ldr	r3, [pc, #420]	; (80068fc <UART_SetConfig+0x2ec>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800675e:	2b30      	cmp	r3, #48	; 0x30
 8006760:	d013      	beq.n	800678a <UART_SetConfig+0x17a>
 8006762:	2b30      	cmp	r3, #48	; 0x30
 8006764:	d814      	bhi.n	8006790 <UART_SetConfig+0x180>
 8006766:	2b20      	cmp	r3, #32
 8006768:	d009      	beq.n	800677e <UART_SetConfig+0x16e>
 800676a:	2b20      	cmp	r3, #32
 800676c:	d810      	bhi.n	8006790 <UART_SetConfig+0x180>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <UART_SetConfig+0x168>
 8006772:	2b10      	cmp	r3, #16
 8006774:	d006      	beq.n	8006784 <UART_SetConfig+0x174>
 8006776:	e00b      	b.n	8006790 <UART_SetConfig+0x180>
 8006778:	2300      	movs	r3, #0
 800677a:	76fb      	strb	r3, [r7, #27]
 800677c:	e089      	b.n	8006892 <UART_SetConfig+0x282>
 800677e:	2302      	movs	r3, #2
 8006780:	76fb      	strb	r3, [r7, #27]
 8006782:	e086      	b.n	8006892 <UART_SetConfig+0x282>
 8006784:	2304      	movs	r3, #4
 8006786:	76fb      	strb	r3, [r7, #27]
 8006788:	e083      	b.n	8006892 <UART_SetConfig+0x282>
 800678a:	2308      	movs	r3, #8
 800678c:	76fb      	strb	r3, [r7, #27]
 800678e:	e080      	b.n	8006892 <UART_SetConfig+0x282>
 8006790:	2310      	movs	r3, #16
 8006792:	76fb      	strb	r3, [r7, #27]
 8006794:	e07d      	b.n	8006892 <UART_SetConfig+0x282>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a5b      	ldr	r2, [pc, #364]	; (8006908 <UART_SetConfig+0x2f8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d120      	bne.n	80067e2 <UART_SetConfig+0x1d2>
 80067a0:	4b56      	ldr	r3, [pc, #344]	; (80068fc <UART_SetConfig+0x2ec>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067aa:	2bc0      	cmp	r3, #192	; 0xc0
 80067ac:	d013      	beq.n	80067d6 <UART_SetConfig+0x1c6>
 80067ae:	2bc0      	cmp	r3, #192	; 0xc0
 80067b0:	d814      	bhi.n	80067dc <UART_SetConfig+0x1cc>
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d009      	beq.n	80067ca <UART_SetConfig+0x1ba>
 80067b6:	2b80      	cmp	r3, #128	; 0x80
 80067b8:	d810      	bhi.n	80067dc <UART_SetConfig+0x1cc>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <UART_SetConfig+0x1b4>
 80067be:	2b40      	cmp	r3, #64	; 0x40
 80067c0:	d006      	beq.n	80067d0 <UART_SetConfig+0x1c0>
 80067c2:	e00b      	b.n	80067dc <UART_SetConfig+0x1cc>
 80067c4:	2300      	movs	r3, #0
 80067c6:	76fb      	strb	r3, [r7, #27]
 80067c8:	e063      	b.n	8006892 <UART_SetConfig+0x282>
 80067ca:	2302      	movs	r3, #2
 80067cc:	76fb      	strb	r3, [r7, #27]
 80067ce:	e060      	b.n	8006892 <UART_SetConfig+0x282>
 80067d0:	2304      	movs	r3, #4
 80067d2:	76fb      	strb	r3, [r7, #27]
 80067d4:	e05d      	b.n	8006892 <UART_SetConfig+0x282>
 80067d6:	2308      	movs	r3, #8
 80067d8:	76fb      	strb	r3, [r7, #27]
 80067da:	e05a      	b.n	8006892 <UART_SetConfig+0x282>
 80067dc:	2310      	movs	r3, #16
 80067de:	76fb      	strb	r3, [r7, #27]
 80067e0:	e057      	b.n	8006892 <UART_SetConfig+0x282>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a49      	ldr	r2, [pc, #292]	; (800690c <UART_SetConfig+0x2fc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d125      	bne.n	8006838 <UART_SetConfig+0x228>
 80067ec:	4b43      	ldr	r3, [pc, #268]	; (80068fc <UART_SetConfig+0x2ec>)
 80067ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067fa:	d017      	beq.n	800682c <UART_SetConfig+0x21c>
 80067fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006800:	d817      	bhi.n	8006832 <UART_SetConfig+0x222>
 8006802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006806:	d00b      	beq.n	8006820 <UART_SetConfig+0x210>
 8006808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680c:	d811      	bhi.n	8006832 <UART_SetConfig+0x222>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <UART_SetConfig+0x20a>
 8006812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006816:	d006      	beq.n	8006826 <UART_SetConfig+0x216>
 8006818:	e00b      	b.n	8006832 <UART_SetConfig+0x222>
 800681a:	2300      	movs	r3, #0
 800681c:	76fb      	strb	r3, [r7, #27]
 800681e:	e038      	b.n	8006892 <UART_SetConfig+0x282>
 8006820:	2302      	movs	r3, #2
 8006822:	76fb      	strb	r3, [r7, #27]
 8006824:	e035      	b.n	8006892 <UART_SetConfig+0x282>
 8006826:	2304      	movs	r3, #4
 8006828:	76fb      	strb	r3, [r7, #27]
 800682a:	e032      	b.n	8006892 <UART_SetConfig+0x282>
 800682c:	2308      	movs	r3, #8
 800682e:	76fb      	strb	r3, [r7, #27]
 8006830:	e02f      	b.n	8006892 <UART_SetConfig+0x282>
 8006832:	2310      	movs	r3, #16
 8006834:	76fb      	strb	r3, [r7, #27]
 8006836:	e02c      	b.n	8006892 <UART_SetConfig+0x282>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a2d      	ldr	r2, [pc, #180]	; (80068f4 <UART_SetConfig+0x2e4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d125      	bne.n	800688e <UART_SetConfig+0x27e>
 8006842:	4b2e      	ldr	r3, [pc, #184]	; (80068fc <UART_SetConfig+0x2ec>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800684c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006850:	d017      	beq.n	8006882 <UART_SetConfig+0x272>
 8006852:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006856:	d817      	bhi.n	8006888 <UART_SetConfig+0x278>
 8006858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685c:	d00b      	beq.n	8006876 <UART_SetConfig+0x266>
 800685e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006862:	d811      	bhi.n	8006888 <UART_SetConfig+0x278>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <UART_SetConfig+0x260>
 8006868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686c:	d006      	beq.n	800687c <UART_SetConfig+0x26c>
 800686e:	e00b      	b.n	8006888 <UART_SetConfig+0x278>
 8006870:	2300      	movs	r3, #0
 8006872:	76fb      	strb	r3, [r7, #27]
 8006874:	e00d      	b.n	8006892 <UART_SetConfig+0x282>
 8006876:	2302      	movs	r3, #2
 8006878:	76fb      	strb	r3, [r7, #27]
 800687a:	e00a      	b.n	8006892 <UART_SetConfig+0x282>
 800687c:	2304      	movs	r3, #4
 800687e:	76fb      	strb	r3, [r7, #27]
 8006880:	e007      	b.n	8006892 <UART_SetConfig+0x282>
 8006882:	2308      	movs	r3, #8
 8006884:	76fb      	strb	r3, [r7, #27]
 8006886:	e004      	b.n	8006892 <UART_SetConfig+0x282>
 8006888:	2310      	movs	r3, #16
 800688a:	76fb      	strb	r3, [r7, #27]
 800688c:	e001      	b.n	8006892 <UART_SetConfig+0x282>
 800688e:	2310      	movs	r3, #16
 8006890:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a17      	ldr	r2, [pc, #92]	; (80068f4 <UART_SetConfig+0x2e4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	f040 8087 	bne.w	80069ac <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800689e:	7efb      	ldrb	r3, [r7, #27]
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d837      	bhi.n	8006914 <UART_SetConfig+0x304>
 80068a4:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <UART_SetConfig+0x29c>)
 80068a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068aa:	bf00      	nop
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	08006915 	.word	0x08006915
 80068b4:	080068d9 	.word	0x080068d9
 80068b8:	08006915 	.word	0x08006915
 80068bc:	080068df 	.word	0x080068df
 80068c0:	08006915 	.word	0x08006915
 80068c4:	08006915 	.word	0x08006915
 80068c8:	08006915 	.word	0x08006915
 80068cc:	080068e7 	.word	0x080068e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d0:	f7fd fe3c 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 80068d4:	6178      	str	r0, [r7, #20]
        break;
 80068d6:	e022      	b.n	800691e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d8:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <UART_SetConfig+0x300>)
 80068da:	617b      	str	r3, [r7, #20]
        break;
 80068dc:	e01f      	b.n	800691e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068de:	f7fd fd9d 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80068e2:	6178      	str	r0, [r7, #20]
        break;
 80068e4:	e01b      	b.n	800691e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ea:	617b      	str	r3, [r7, #20]
        break;
 80068ec:	e017      	b.n	800691e <UART_SetConfig+0x30e>
 80068ee:	bf00      	nop
 80068f0:	efff69f3 	.word	0xefff69f3
 80068f4:	40008000 	.word	0x40008000
 80068f8:	40013800 	.word	0x40013800
 80068fc:	40021000 	.word	0x40021000
 8006900:	40004400 	.word	0x40004400
 8006904:	40004800 	.word	0x40004800
 8006908:	40004c00 	.word	0x40004c00
 800690c:	40005000 	.word	0x40005000
 8006910:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	76bb      	strb	r3, [r7, #26]
        break;
 800691c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80f1 	beq.w	8006b08 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	4413      	add	r3, r2
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	429a      	cmp	r2, r3
 8006934:	d305      	bcc.n	8006942 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	429a      	cmp	r2, r3
 8006940:	d902      	bls.n	8006948 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	76bb      	strb	r3, [r7, #26]
 8006946:	e0df      	b.n	8006b08 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	4618      	mov	r0, r3
 800694c:	f04f 0100 	mov.w	r1, #0
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	020b      	lsls	r3, r1, #8
 800695a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800695e:	0202      	lsls	r2, r0, #8
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	6849      	ldr	r1, [r1, #4]
 8006964:	0849      	lsrs	r1, r1, #1
 8006966:	4608      	mov	r0, r1
 8006968:	f04f 0100 	mov.w	r1, #0
 800696c:	1814      	adds	r4, r2, r0
 800696e:	eb43 0501 	adc.w	r5, r3, r1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	461a      	mov	r2, r3
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7fa f982 	bl	8000c88 <__aeabi_uldivmod>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4613      	mov	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006992:	d308      	bcc.n	80069a6 <UART_SetConfig+0x396>
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699a:	d204      	bcs.n	80069a6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	60da      	str	r2, [r3, #12]
 80069a4:	e0b0      	b.n	8006b08 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	76bb      	strb	r3, [r7, #26]
 80069aa:	e0ad      	b.n	8006b08 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b4:	d15c      	bne.n	8006a70 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80069b6:	7efb      	ldrb	r3, [r7, #27]
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d828      	bhi.n	8006a0e <UART_SetConfig+0x3fe>
 80069bc:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <UART_SetConfig+0x3b4>)
 80069be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c2:	bf00      	nop
 80069c4:	080069e9 	.word	0x080069e9
 80069c8:	080069f1 	.word	0x080069f1
 80069cc:	080069f9 	.word	0x080069f9
 80069d0:	08006a0f 	.word	0x08006a0f
 80069d4:	080069ff 	.word	0x080069ff
 80069d8:	08006a0f 	.word	0x08006a0f
 80069dc:	08006a0f 	.word	0x08006a0f
 80069e0:	08006a0f 	.word	0x08006a0f
 80069e4:	08006a07 	.word	0x08006a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e8:	f7fd fdb0 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 80069ec:	6178      	str	r0, [r7, #20]
        break;
 80069ee:	e013      	b.n	8006a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069f0:	f7fd fdc2 	bl	8004578 <HAL_RCC_GetPCLK2Freq>
 80069f4:	6178      	str	r0, [r7, #20]
        break;
 80069f6:	e00f      	b.n	8006a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069f8:	4b49      	ldr	r3, [pc, #292]	; (8006b20 <UART_SetConfig+0x510>)
 80069fa:	617b      	str	r3, [r7, #20]
        break;
 80069fc:	e00c      	b.n	8006a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069fe:	f7fd fd0d 	bl	800441c <HAL_RCC_GetSysClockFreq>
 8006a02:	6178      	str	r0, [r7, #20]
        break;
 8006a04:	e008      	b.n	8006a18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0a:	617b      	str	r3, [r7, #20]
        break;
 8006a0c:	e004      	b.n	8006a18 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	76bb      	strb	r3, [r7, #26]
        break;
 8006a16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d074      	beq.n	8006b08 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	005a      	lsls	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	441a      	add	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b0f      	cmp	r3, #15
 8006a3a:	d916      	bls.n	8006a6a <UART_SetConfig+0x45a>
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a42:	d212      	bcs.n	8006a6a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f023 030f 	bic.w	r3, r3, #15
 8006a4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	085b      	lsrs	r3, r3, #1
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	89fb      	ldrh	r3, [r7, #14]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	89fa      	ldrh	r2, [r7, #14]
 8006a66:	60da      	str	r2, [r3, #12]
 8006a68:	e04e      	b.n	8006b08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	76bb      	strb	r3, [r7, #26]
 8006a6e:	e04b      	b.n	8006b08 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a70:	7efb      	ldrb	r3, [r7, #27]
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d827      	bhi.n	8006ac6 <UART_SetConfig+0x4b6>
 8006a76:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <UART_SetConfig+0x46c>)
 8006a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	08006ac7 	.word	0x08006ac7
 8006a8c:	08006ab7 	.word	0x08006ab7
 8006a90:	08006ac7 	.word	0x08006ac7
 8006a94:	08006ac7 	.word	0x08006ac7
 8006a98:	08006ac7 	.word	0x08006ac7
 8006a9c:	08006abf 	.word	0x08006abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa0:	f7fd fd54 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 8006aa4:	6178      	str	r0, [r7, #20]
        break;
 8006aa6:	e013      	b.n	8006ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa8:	f7fd fd66 	bl	8004578 <HAL_RCC_GetPCLK2Freq>
 8006aac:	6178      	str	r0, [r7, #20]
        break;
 8006aae:	e00f      	b.n	8006ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <UART_SetConfig+0x510>)
 8006ab2:	617b      	str	r3, [r7, #20]
        break;
 8006ab4:	e00c      	b.n	8006ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ab6:	f7fd fcb1 	bl	800441c <HAL_RCC_GetSysClockFreq>
 8006aba:	6178      	str	r0, [r7, #20]
        break;
 8006abc:	e008      	b.n	8006ad0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac2:	617b      	str	r3, [r7, #20]
        break;
 8006ac4:	e004      	b.n	8006ad0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	76bb      	strb	r3, [r7, #26]
        break;
 8006ace:	bf00      	nop
    }

    if (pclk != 0U)
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d018      	beq.n	8006b08 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	085a      	lsrs	r2, r3, #1
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	441a      	add	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	d908      	bls.n	8006b04 <UART_SetConfig+0x4f4>
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af8:	d204      	bcs.n	8006b04 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	60da      	str	r2, [r3, #12]
 8006b02:	e001      	b.n	8006b08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b14:	7ebb      	ldrb	r3, [r7, #26]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	00f42400 	.word	0x00f42400

08006b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00a      	beq.n	8006b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00a      	beq.n	8006bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01a      	beq.n	8006c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c22:	d10a      	bne.n	8006c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c78:	f7fb fbf2 	bl	8002460 <HAL_GetTick>
 8006c7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0308 	and.w	r3, r3, #8
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d10e      	bne.n	8006caa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f82d 	bl	8006cfa <UART_WaitOnFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e023      	b.n	8006cf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d10e      	bne.n	8006cd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f817 	bl	8006cfa <UART_WaitOnFlagUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e00d      	b.n	8006cf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	603b      	str	r3, [r7, #0]
 8006d06:	4613      	mov	r3, r2
 8006d08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0a:	e05e      	b.n	8006dca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d12:	d05a      	beq.n	8006dca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d14:	f7fb fba4 	bl	8002460 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d302      	bcc.n	8006d2a <UART_WaitOnFlagUntilTimeout+0x30>
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d11b      	bne.n	8006d62 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d38:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0201 	bic.w	r2, r2, #1
 8006d48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e043      	b.n	8006dea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d02c      	beq.n	8006dca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d7e:	d124      	bne.n	8006dca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d88:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d98:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0201 	bic.w	r2, r2, #1
 8006da8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e00f      	b.n	8006dea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69da      	ldr	r2, [r3, #28]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	bf0c      	ite	eq
 8006dda:	2301      	moveq	r3, #1
 8006ddc:	2300      	movne	r3, #0
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	461a      	mov	r2, r3
 8006de2:	79fb      	ldrb	r3, [r7, #7]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d091      	beq.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <__NVIC_SetPriority>:
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	6039      	str	r1, [r7, #0]
 8006dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	db0a      	blt.n	8006e1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	490c      	ldr	r1, [pc, #48]	; (8006e40 <__NVIC_SetPriority+0x4c>)
 8006e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e12:	0112      	lsls	r2, r2, #4
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	440b      	add	r3, r1
 8006e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e1c:	e00a      	b.n	8006e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	4908      	ldr	r1, [pc, #32]	; (8006e44 <__NVIC_SetPriority+0x50>)
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	f003 030f 	and.w	r3, r3, #15
 8006e2a:	3b04      	subs	r3, #4
 8006e2c:	0112      	lsls	r2, r2, #4
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	440b      	add	r3, r1
 8006e32:	761a      	strb	r2, [r3, #24]
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	e000e100 	.word	0xe000e100
 8006e44:	e000ed00 	.word	0xe000ed00

08006e48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <SysTick_Handler+0x1c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006e50:	f001 fcfe 	bl	8008850 <xTaskGetSchedulerState>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d001      	beq.n	8006e5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006e5a:	f002 fae5 	bl	8009428 <xPortSysTickHandler>
  }
}
 8006e5e:	bf00      	nop
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	e000e010 	.word	0xe000e010

08006e68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f06f 0004 	mvn.w	r0, #4
 8006e72:	f7ff ffbf 	bl	8006df4 <__NVIC_SetPriority>
#endif
}
 8006e76:	bf00      	nop
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e82:	f3ef 8305 	mrs	r3, IPSR
 8006e86:	603b      	str	r3, [r7, #0]
  return(result);
 8006e88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e8e:	f06f 0305 	mvn.w	r3, #5
 8006e92:	607b      	str	r3, [r7, #4]
 8006e94:	e00c      	b.n	8006eb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e96:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <osKernelInitialize+0x44>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d105      	bne.n	8006eaa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e9e:	4b08      	ldr	r3, [pc, #32]	; (8006ec0 <osKernelInitialize+0x44>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	607b      	str	r3, [r7, #4]
 8006ea8:	e002      	b.n	8006eb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006eb0:	687b      	ldr	r3, [r7, #4]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20000204 	.word	0x20000204

08006ec4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eca:	f3ef 8305 	mrs	r3, IPSR
 8006ece:	603b      	str	r3, [r7, #0]
  return(result);
 8006ed0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ed6:	f06f 0305 	mvn.w	r3, #5
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	e010      	b.n	8006f00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ede:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <osKernelStart+0x48>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d109      	bne.n	8006efa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ee6:	f7ff ffbf 	bl	8006e68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006eea:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <osKernelStart+0x48>)
 8006eec:	2202      	movs	r2, #2
 8006eee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ef0:	f001 f866 	bl	8007fc0 <vTaskStartScheduler>
      stat = osOK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	607b      	str	r3, [r7, #4]
 8006ef8:	e002      	b.n	8006f00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006efe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f00:	687b      	ldr	r3, [r7, #4]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000204 	.word	0x20000204

08006f10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08e      	sub	sp, #56	; 0x38
 8006f14:	af04      	add	r7, sp, #16
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f20:	f3ef 8305 	mrs	r3, IPSR
 8006f24:	617b      	str	r3, [r7, #20]
  return(result);
 8006f26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d17e      	bne.n	800702a <osThreadNew+0x11a>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d07b      	beq.n	800702a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f32:	2380      	movs	r3, #128	; 0x80
 8006f34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f36:	2318      	movs	r3, #24
 8006f38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d045      	beq.n	8006fd6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <osThreadNew+0x48>
        name = attr->name;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <osThreadNew+0x6e>
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	2b38      	cmp	r3, #56	; 0x38
 8006f70:	d805      	bhi.n	8006f7e <osThreadNew+0x6e>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <osThreadNew+0x72>
        return (NULL);
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e054      	b.n	800702c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	089b      	lsrs	r3, r3, #2
 8006f90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00e      	beq.n	8006fb8 <osThreadNew+0xa8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	2b5b      	cmp	r3, #91	; 0x5b
 8006fa0:	d90a      	bls.n	8006fb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d006      	beq.n	8006fb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <osThreadNew+0xa8>
        mem = 1;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e010      	b.n	8006fda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10c      	bne.n	8006fda <osThreadNew+0xca>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d108      	bne.n	8006fda <osThreadNew+0xca>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <osThreadNew+0xca>
          mem = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	e001      	b.n	8006fda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d110      	bne.n	8007002 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fe8:	9202      	str	r2, [sp, #8]
 8006fea:	9301      	str	r3, [sp, #4]
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	6a3a      	ldr	r2, [r7, #32]
 8006ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 fe0c 	bl	8007c14 <xTaskCreateStatic>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	e013      	b.n	800702a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d110      	bne.n	800702a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	b29a      	uxth	r2, r3
 800700c:	f107 0310 	add.w	r3, r7, #16
 8007010:	9301      	str	r3, [sp, #4]
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fe57 	bl	8007cce <xTaskCreate>
 8007020:	4603      	mov	r3, r0
 8007022:	2b01      	cmp	r3, #1
 8007024:	d001      	beq.n	800702a <osThreadNew+0x11a>
            hTask = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800702a:	693b      	ldr	r3, [r7, #16]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3728      	adds	r7, #40	; 0x28
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800703c:	f3ef 8305 	mrs	r3, IPSR
 8007040:	60bb      	str	r3, [r7, #8]
  return(result);
 8007042:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <osDelay+0x1c>
    stat = osErrorISR;
 8007048:	f06f 0305 	mvn.w	r3, #5
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	e007      	b.n	8007060 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <osDelay+0x2c>
      vTaskDelay(ticks);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 ff7c 	bl	8007f58 <vTaskDelay>
    }
  }

  return (stat);
 8007060:	68fb      	ldr	r3, [r7, #12]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4a07      	ldr	r2, [pc, #28]	; (8007098 <vApplicationGetIdleTaskMemory+0x2c>)
 800707c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4a06      	ldr	r2, [pc, #24]	; (800709c <vApplicationGetIdleTaskMemory+0x30>)
 8007082:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2280      	movs	r2, #128	; 0x80
 8007088:	601a      	str	r2, [r3, #0]
}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20000208 	.word	0x20000208
 800709c:	20000264 	.word	0x20000264

080070a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4a07      	ldr	r2, [pc, #28]	; (80070cc <vApplicationGetTimerTaskMemory+0x2c>)
 80070b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	4a06      	ldr	r2, [pc, #24]	; (80070d0 <vApplicationGetTimerTaskMemory+0x30>)
 80070b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070be:	601a      	str	r2, [r3, #0]
}
 80070c0:	bf00      	nop
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	20000464 	.word	0x20000464
 80070d0:	200004c0 	.word	0x200004c0

080070d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f103 0208 	add.w	r2, r3, #8
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f103 0208 	add.w	r2, r3, #8
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f103 0208 	add.w	r2, r3, #8
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800712e:	b480      	push	{r7}
 8007130:	b085      	sub	sp, #20
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	601a      	str	r2, [r3, #0]
}
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800718c:	d103      	bne.n	8007196 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e00c      	b.n	80071b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3308      	adds	r3, #8
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	e002      	b.n	80071a4 <vListInsert+0x2e>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d2f6      	bcs.n	800719e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	601a      	str	r2, [r3, #0]
}
 80071dc:	bf00      	nop
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6892      	ldr	r2, [r2, #8]
 80071fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6852      	ldr	r2, [r2, #4]
 8007208:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d103      	bne.n	800721c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	1e5a      	subs	r2, r3, #1
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007266:	f002 f84d 	bl	8009304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007272:	68f9      	ldr	r1, [r7, #12]
 8007274:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	441a      	add	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	3b01      	subs	r3, #1
 8007298:	68f9      	ldr	r1, [r7, #12]
 800729a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800729c:	fb01 f303 	mul.w	r3, r1, r3
 80072a0:	441a      	add	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	22ff      	movs	r2, #255	; 0xff
 80072aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	22ff      	movs	r2, #255	; 0xff
 80072b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d114      	bne.n	80072e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01a      	beq.n	80072fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3310      	adds	r3, #16
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 f903 	bl	80084d4 <xTaskRemoveFromEventList>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d012      	beq.n	80072fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072d4:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <xQueueGenericReset+0xcc>)
 80072d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	e009      	b.n	80072fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3310      	adds	r3, #16
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff fef2 	bl	80070d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3324      	adds	r3, #36	; 0x24
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff feed 	bl	80070d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072fa:	f002 f833 	bl	8009364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072fe:	2301      	movs	r3, #1
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	; 0x38
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <xQueueGenericCreateStatic+0x52>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <xQueueGenericCreateStatic+0x56>
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <xQueueGenericCreateStatic+0x58>
 8007362:	2300      	movs	r3, #0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	623b      	str	r3, [r7, #32]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <xQueueGenericCreateStatic+0x7e>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <xQueueGenericCreateStatic+0x82>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <xQueueGenericCreateStatic+0x84>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	61fb      	str	r3, [r7, #28]
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073aa:	2350      	movs	r3, #80	; 0x50
 80073ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b50      	cmp	r3, #80	; 0x50
 80073b2:	d00a      	beq.n	80073ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	61bb      	str	r3, [r7, #24]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00d      	beq.n	80073f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	4613      	mov	r3, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 f805 	bl	80073fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3730      	adds	r7, #48	; 0x30
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	e002      	b.n	800741e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800742a:	2101      	movs	r1, #1
 800742c:	69b8      	ldr	r0, [r7, #24]
 800742e:	f7ff ff05 	bl	800723c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800743a:	bf00      	nop
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08e      	sub	sp, #56	; 0x38
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007452:	2300      	movs	r3, #0
 8007454:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10a      	bne.n	8007476 <xQueueGenericSend+0x32>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d103      	bne.n	8007484 <xQueueGenericSend+0x40>
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <xQueueGenericSend+0x44>
 8007484:	2301      	movs	r3, #1
 8007486:	e000      	b.n	800748a <xQueueGenericSend+0x46>
 8007488:	2300      	movs	r3, #0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10a      	bne.n	80074a4 <xQueueGenericSend+0x60>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074a0:	bf00      	nop
 80074a2:	e7fe      	b.n	80074a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d103      	bne.n	80074b2 <xQueueGenericSend+0x6e>
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <xQueueGenericSend+0x72>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <xQueueGenericSend+0x74>
 80074b6:	2300      	movs	r3, #0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	623b      	str	r3, [r7, #32]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074d2:	f001 f9bd 	bl	8008850 <xTaskGetSchedulerState>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d102      	bne.n	80074e2 <xQueueGenericSend+0x9e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <xQueueGenericSend+0xa2>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e000      	b.n	80074e8 <xQueueGenericSend+0xa4>
 80074e6:	2300      	movs	r3, #0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <xQueueGenericSend+0xbe>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	61fb      	str	r3, [r7, #28]
}
 80074fe:	bf00      	nop
 8007500:	e7fe      	b.n	8007500 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007502:	f001 feff 	bl	8009304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750e:	429a      	cmp	r2, r3
 8007510:	d302      	bcc.n	8007518 <xQueueGenericSend+0xd4>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d129      	bne.n	800756c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	68b9      	ldr	r1, [r7, #8]
 800751c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800751e:	f000 fa0b 	bl	8007938 <prvCopyDataToQueue>
 8007522:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	2b00      	cmp	r3, #0
 800752a:	d010      	beq.n	800754e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	3324      	adds	r3, #36	; 0x24
 8007530:	4618      	mov	r0, r3
 8007532:	f000 ffcf 	bl	80084d4 <xTaskRemoveFromEventList>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d013      	beq.n	8007564 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800753c:	4b3f      	ldr	r3, [pc, #252]	; (800763c <xQueueGenericSend+0x1f8>)
 800753e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	e00a      	b.n	8007564 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d007      	beq.n	8007564 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007554:	4b39      	ldr	r3, [pc, #228]	; (800763c <xQueueGenericSend+0x1f8>)
 8007556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007564:	f001 fefe 	bl	8009364 <vPortExitCritical>
				return pdPASS;
 8007568:	2301      	movs	r3, #1
 800756a:	e063      	b.n	8007634 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d103      	bne.n	800757a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007572:	f001 fef7 	bl	8009364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007576:	2300      	movs	r3, #0
 8007578:	e05c      	b.n	8007634 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800757a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757c:	2b00      	cmp	r3, #0
 800757e:	d106      	bne.n	800758e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007580:	f107 0314 	add.w	r3, r7, #20
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f809 	bl	800859c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800758a:	2301      	movs	r3, #1
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800758e:	f001 fee9 	bl	8009364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007592:	f000 fd7b 	bl	800808c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007596:	f001 feb5 	bl	8009304 <vPortEnterCritical>
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075a0:	b25b      	sxtb	r3, r3
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075a6:	d103      	bne.n	80075b0 <xQueueGenericSend+0x16c>
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075b6:	b25b      	sxtb	r3, r3
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075bc:	d103      	bne.n	80075c6 <xQueueGenericSend+0x182>
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075c6:	f001 fecd 	bl	8009364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ca:	1d3a      	adds	r2, r7, #4
 80075cc:	f107 0314 	add.w	r3, r7, #20
 80075d0:	4611      	mov	r1, r2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fff8 	bl	80085c8 <xTaskCheckForTimeOut>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d124      	bne.n	8007628 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e0:	f000 faa2 	bl	8007b28 <prvIsQueueFull>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d018      	beq.n	800761c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	3310      	adds	r3, #16
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	4611      	mov	r1, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 ff1e 	bl	8008434 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075fa:	f000 fa2d 	bl	8007a58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075fe:	f000 fd53 	bl	80080a8 <xTaskResumeAll>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	f47f af7c 	bne.w	8007502 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800760a:	4b0c      	ldr	r3, [pc, #48]	; (800763c <xQueueGenericSend+0x1f8>)
 800760c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	e772      	b.n	8007502 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800761c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800761e:	f000 fa1b 	bl	8007a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007622:	f000 fd41 	bl	80080a8 <xTaskResumeAll>
 8007626:	e76c      	b.n	8007502 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800762a:	f000 fa15 	bl	8007a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800762e:	f000 fd3b 	bl	80080a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007632:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007634:	4618      	mov	r0, r3
 8007636:	3738      	adds	r7, #56	; 0x38
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	e000ed04 	.word	0xe000ed04

08007640 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b090      	sub	sp, #64	; 0x40
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <xQueueGenericSendFromISR+0x3c>
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <xQueueGenericSendFromISR+0x40>
 800767c:	2301      	movs	r3, #1
 800767e:	e000      	b.n	8007682 <xQueueGenericSendFromISR+0x42>
 8007680:	2300      	movs	r3, #0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d103      	bne.n	80076aa <xQueueGenericSendFromISR+0x6a>
 80076a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <xQueueGenericSendFromISR+0x6e>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e000      	b.n	80076b0 <xQueueGenericSendFromISR+0x70>
 80076ae:	2300      	movs	r3, #0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	623b      	str	r3, [r7, #32]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076ca:	f001 fefd 	bl	80094c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076ce:	f3ef 8211 	mrs	r2, BASEPRI
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	61fa      	str	r2, [r7, #28]
 80076e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d302      	bcc.n	80076fc <xQueueGenericSendFromISR+0xbc>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d12f      	bne.n	800775c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007712:	f000 f911 	bl	8007938 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007716:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800771e:	d112      	bne.n	8007746 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	2b00      	cmp	r3, #0
 8007726:	d016      	beq.n	8007756 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	3324      	adds	r3, #36	; 0x24
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fed1 	bl	80084d4 <xTaskRemoveFromEventList>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00e      	beq.n	8007756 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00b      	beq.n	8007756 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	e007      	b.n	8007756 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007746:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800774a:	3301      	adds	r3, #1
 800774c:	b2db      	uxtb	r3, r3
 800774e:	b25a      	sxtb	r2, r3
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007756:	2301      	movs	r3, #1
 8007758:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800775a:	e001      	b.n	8007760 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800775c:	2300      	movs	r3, #0
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007762:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800776a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800776c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800776e:	4618      	mov	r0, r3
 8007770:	3740      	adds	r7, #64	; 0x40
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08c      	sub	sp, #48	; 0x30
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007784:	2300      	movs	r3, #0
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10a      	bne.n	80077a8 <xQueueReceive+0x30>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	623b      	str	r3, [r7, #32]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d103      	bne.n	80077b6 <xQueueReceive+0x3e>
 80077ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <xQueueReceive+0x42>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e000      	b.n	80077bc <xQueueReceive+0x44>
 80077ba:	2300      	movs	r3, #0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10a      	bne.n	80077d6 <xQueueReceive+0x5e>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	61fb      	str	r3, [r7, #28]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077d6:	f001 f83b 	bl	8008850 <xTaskGetSchedulerState>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <xQueueReceive+0x6e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <xQueueReceive+0x72>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <xQueueReceive+0x74>
 80077ea:	2300      	movs	r3, #0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <xQueueReceive+0x8e>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	61bb      	str	r3, [r7, #24]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007806:	f001 fd7d 	bl	8009304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01f      	beq.n	8007856 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800781a:	f000 f8f7 	bl	8007a0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	1e5a      	subs	r2, r3, #1
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00f      	beq.n	800784e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	3310      	adds	r3, #16
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fe4e 	bl	80084d4 <xTaskRemoveFromEventList>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800783e:	4b3d      	ldr	r3, [pc, #244]	; (8007934 <xQueueReceive+0x1bc>)
 8007840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800784e:	f001 fd89 	bl	8009364 <vPortExitCritical>
				return pdPASS;
 8007852:	2301      	movs	r3, #1
 8007854:	e069      	b.n	800792a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d103      	bne.n	8007864 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800785c:	f001 fd82 	bl	8009364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007860:	2300      	movs	r3, #0
 8007862:	e062      	b.n	800792a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800786a:	f107 0310 	add.w	r3, r7, #16
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fe94 	bl	800859c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007874:	2301      	movs	r3, #1
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007878:	f001 fd74 	bl	8009364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800787c:	f000 fc06 	bl	800808c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007880:	f001 fd40 	bl	8009304 <vPortEnterCritical>
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800788a:	b25b      	sxtb	r3, r3
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007890:	d103      	bne.n	800789a <xQueueReceive+0x122>
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078a0:	b25b      	sxtb	r3, r3
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a6:	d103      	bne.n	80078b0 <xQueueReceive+0x138>
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078b0:	f001 fd58 	bl	8009364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078b4:	1d3a      	adds	r2, r7, #4
 80078b6:	f107 0310 	add.w	r3, r7, #16
 80078ba:	4611      	mov	r1, r2
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fe83 	bl	80085c8 <xTaskCheckForTimeOut>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d123      	bne.n	8007910 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ca:	f000 f917 	bl	8007afc <prvIsQueueEmpty>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d017      	beq.n	8007904 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	3324      	adds	r3, #36	; 0x24
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	4611      	mov	r1, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fda9 	bl	8008434 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e4:	f000 f8b8 	bl	8007a58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078e8:	f000 fbde 	bl	80080a8 <xTaskResumeAll>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d189      	bne.n	8007806 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80078f2:	4b10      	ldr	r3, [pc, #64]	; (8007934 <xQueueReceive+0x1bc>)
 80078f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	e780      	b.n	8007806 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007906:	f000 f8a7 	bl	8007a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800790a:	f000 fbcd 	bl	80080a8 <xTaskResumeAll>
 800790e:	e77a      	b.n	8007806 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007912:	f000 f8a1 	bl	8007a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007916:	f000 fbc7 	bl	80080a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800791a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800791c:	f000 f8ee 	bl	8007afc <prvIsQueueEmpty>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	f43f af6f 	beq.w	8007806 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007928:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800792a:	4618      	mov	r0, r3
 800792c:	3730      	adds	r7, #48	; 0x30
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	e000ed04 	.word	0xe000ed04

08007938 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10d      	bne.n	8007972 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d14d      	bne.n	80079fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	4618      	mov	r0, r3
 8007964:	f000 ff92 	bl	800888c <xTaskPriorityDisinherit>
 8007968:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	609a      	str	r2, [r3, #8]
 8007970:	e043      	b.n	80079fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d119      	bne.n	80079ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6858      	ldr	r0, [r3, #4]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	461a      	mov	r2, r3
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	f001 fff4 	bl	8009970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	441a      	add	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d32b      	bcc.n	80079fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	605a      	str	r2, [r3, #4]
 80079aa:	e026      	b.n	80079fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68d8      	ldr	r0, [r3, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b4:	461a      	mov	r2, r3
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	f001 ffda 	bl	8009970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c4:	425b      	negs	r3, r3
 80079c6:	441a      	add	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d207      	bcs.n	80079e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	425b      	negs	r3, r3
 80079e2:	441a      	add	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d105      	bne.n	80079fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a02:	697b      	ldr	r3, [r7, #20]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d018      	beq.n	8007a50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a26:	441a      	add	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d303      	bcc.n	8007a40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68d9      	ldr	r1, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6838      	ldr	r0, [r7, #0]
 8007a4c:	f001 ff90 	bl	8009970 <memcpy>
	}
}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a60:	f001 fc50 	bl	8009304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a6c:	e011      	b.n	8007a92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d012      	beq.n	8007a9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3324      	adds	r3, #36	; 0x24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fd2a 	bl	80084d4 <xTaskRemoveFromEventList>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a86:	f000 fe01 	bl	800868c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dce9      	bgt.n	8007a6e <prvUnlockQueue+0x16>
 8007a9a:	e000      	b.n	8007a9e <prvUnlockQueue+0x46>
					break;
 8007a9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	22ff      	movs	r2, #255	; 0xff
 8007aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007aa6:	f001 fc5d 	bl	8009364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007aaa:	f001 fc2b 	bl	8009304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ab4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ab6:	e011      	b.n	8007adc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d012      	beq.n	8007ae6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3310      	adds	r3, #16
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fd05 	bl	80084d4 <xTaskRemoveFromEventList>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ad0:	f000 fddc 	bl	800868c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dce9      	bgt.n	8007ab8 <prvUnlockQueue+0x60>
 8007ae4:	e000      	b.n	8007ae8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ae6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	22ff      	movs	r2, #255	; 0xff
 8007aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007af0:	f001 fc38 	bl	8009364 <vPortExitCritical>
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b04:	f001 fbfe 	bl	8009304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d102      	bne.n	8007b16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b10:	2301      	movs	r3, #1
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	e001      	b.n	8007b1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b1a:	f001 fc23 	bl	8009364 <vPortExitCritical>

	return xReturn;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b30:	f001 fbe8 	bl	8009304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d102      	bne.n	8007b46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b40:	2301      	movs	r3, #1
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e001      	b.n	8007b4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b4a:	f001 fc0b 	bl	8009364 <vPortExitCritical>

	return xReturn;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	e014      	b.n	8007b92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b68:	4a0f      	ldr	r2, [pc, #60]	; (8007ba8 <vQueueAddToRegistry+0x50>)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10b      	bne.n	8007b8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b74:	490c      	ldr	r1, [pc, #48]	; (8007ba8 <vQueueAddToRegistry+0x50>)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ba8 <vQueueAddToRegistry+0x50>)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	4413      	add	r3, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b8a:	e006      	b.n	8007b9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b07      	cmp	r3, #7
 8007b96:	d9e7      	bls.n	8007b68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	20001cac 	.word	0x20001cac

08007bac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007bbc:	f001 fba2 	bl	8009304 <vPortEnterCritical>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bc6:	b25b      	sxtb	r3, r3
 8007bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bcc:	d103      	bne.n	8007bd6 <vQueueWaitForMessageRestricted+0x2a>
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bdc:	b25b      	sxtb	r3, r3
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007be2:	d103      	bne.n	8007bec <vQueueWaitForMessageRestricted+0x40>
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bec:	f001 fbba 	bl	8009364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	3324      	adds	r3, #36	; 0x24
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	68b9      	ldr	r1, [r7, #8]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fc3b 	bl	800847c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f7ff ff26 	bl	8007a58 <prvUnlockQueue>
	}
 8007c0c:	bf00      	nop
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08e      	sub	sp, #56	; 0x38
 8007c18:	af04      	add	r7, sp, #16
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	623b      	str	r3, [r7, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10a      	bne.n	8007c5a <xTaskCreateStatic+0x46>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	61fb      	str	r3, [r7, #28]
}
 8007c56:	bf00      	nop
 8007c58:	e7fe      	b.n	8007c58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c5a:	235c      	movs	r3, #92	; 0x5c
 8007c5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2b5c      	cmp	r3, #92	; 0x5c
 8007c62:	d00a      	beq.n	8007c7a <xTaskCreateStatic+0x66>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	61bb      	str	r3, [r7, #24]
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d01e      	beq.n	8007cc0 <xTaskCreateStatic+0xac>
 8007c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d01b      	beq.n	8007cc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	2202      	movs	r2, #2
 8007c96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	9303      	str	r3, [sp, #12]
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	9302      	str	r3, [sp, #8]
 8007ca2:	f107 0314 	add.w	r3, r7, #20
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 f850 	bl	8007d58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cba:	f000 f8dd 	bl	8007e78 <prvAddNewTaskToReadyList>
 8007cbe:	e001      	b.n	8007cc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007cc4:	697b      	ldr	r3, [r7, #20]
	}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3728      	adds	r7, #40	; 0x28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b08c      	sub	sp, #48	; 0x30
 8007cd2:	af04      	add	r7, sp, #16
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	603b      	str	r3, [r7, #0]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 fc30 	bl	8009548 <pvPortMalloc>
 8007ce8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00e      	beq.n	8007d0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007cf0:	205c      	movs	r0, #92	; 0x5c
 8007cf2:	f001 fc29 	bl	8009548 <pvPortMalloc>
 8007cf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	631a      	str	r2, [r3, #48]	; 0x30
 8007d04:	e005      	b.n	8007d12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d06:	6978      	ldr	r0, [r7, #20]
 8007d08:	f001 fcea 	bl	80096e0 <vPortFree>
 8007d0c:	e001      	b.n	8007d12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d017      	beq.n	8007d48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d20:	88fa      	ldrh	r2, [r7, #6]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9303      	str	r3, [sp, #12]
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	9302      	str	r3, [sp, #8]
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68b9      	ldr	r1, [r7, #8]
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 f80e 	bl	8007d58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d3c:	69f8      	ldr	r0, [r7, #28]
 8007d3e:	f000 f89b 	bl	8007e78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d42:	2301      	movs	r3, #1
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	e002      	b.n	8007d4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
	}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3720      	adds	r7, #32
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	461a      	mov	r2, r3
 8007d70:	21a5      	movs	r1, #165	; 0xa5
 8007d72:	f001 fe0b 	bl	800998c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d80:	3b01      	subs	r3, #1
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	f023 0307 	bic.w	r3, r3, #7
 8007d8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	617b      	str	r3, [r7, #20]
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d01f      	beq.n	8007df6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007db6:	2300      	movs	r3, #0
 8007db8:	61fb      	str	r3, [r7, #28]
 8007dba:	e012      	b.n	8007de2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	7819      	ldrb	r1, [r3, #0]
 8007dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	4413      	add	r3, r2
 8007dca:	3334      	adds	r3, #52	; 0x34
 8007dcc:	460a      	mov	r2, r1
 8007dce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d006      	beq.n	8007dea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	3301      	adds	r3, #1
 8007de0:	61fb      	str	r3, [r7, #28]
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	2b0f      	cmp	r3, #15
 8007de6:	d9e9      	bls.n	8007dbc <prvInitialiseNewTask+0x64>
 8007de8:	e000      	b.n	8007dec <prvInitialiseNewTask+0x94>
			{
				break;
 8007dea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007df4:	e003      	b.n	8007dfe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	2b37      	cmp	r3, #55	; 0x37
 8007e02:	d901      	bls.n	8007e08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e04:	2337      	movs	r3, #55	; 0x37
 8007e06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	2200      	movs	r2, #0
 8007e18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff f978 	bl	8007114 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	3318      	adds	r3, #24
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff f973 	bl	8007114 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	2200      	movs	r2, #0
 8007e48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	68f9      	ldr	r1, [r7, #12]
 8007e56:	69b8      	ldr	r0, [r7, #24]
 8007e58:	f001 f928 	bl	80090ac <pxPortInitialiseStack>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e6e:	bf00      	nop
 8007e70:	3720      	adds	r7, #32
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e80:	f001 fa40 	bl	8009304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e84:	4b2d      	ldr	r3, [pc, #180]	; (8007f3c <prvAddNewTaskToReadyList+0xc4>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	4a2c      	ldr	r2, [pc, #176]	; (8007f3c <prvAddNewTaskToReadyList+0xc4>)
 8007e8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e8e:	4b2c      	ldr	r3, [pc, #176]	; (8007f40 <prvAddNewTaskToReadyList+0xc8>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d109      	bne.n	8007eaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e96:	4a2a      	ldr	r2, [pc, #168]	; (8007f40 <prvAddNewTaskToReadyList+0xc8>)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e9c:	4b27      	ldr	r3, [pc, #156]	; (8007f3c <prvAddNewTaskToReadyList+0xc4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d110      	bne.n	8007ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ea4:	f000 fc16 	bl	80086d4 <prvInitialiseTaskLists>
 8007ea8:	e00d      	b.n	8007ec6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007eaa:	4b26      	ldr	r3, [pc, #152]	; (8007f44 <prvAddNewTaskToReadyList+0xcc>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d109      	bne.n	8007ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007eb2:	4b23      	ldr	r3, [pc, #140]	; (8007f40 <prvAddNewTaskToReadyList+0xc8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d802      	bhi.n	8007ec6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ec0:	4a1f      	ldr	r2, [pc, #124]	; (8007f40 <prvAddNewTaskToReadyList+0xc8>)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ec6:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <prvAddNewTaskToReadyList+0xd0>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	4a1e      	ldr	r2, [pc, #120]	; (8007f48 <prvAddNewTaskToReadyList+0xd0>)
 8007ece:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ed0:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <prvAddNewTaskToReadyList+0xd0>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007edc:	4b1b      	ldr	r3, [pc, #108]	; (8007f4c <prvAddNewTaskToReadyList+0xd4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d903      	bls.n	8007eec <prvAddNewTaskToReadyList+0x74>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <prvAddNewTaskToReadyList+0xd4>)
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4a15      	ldr	r2, [pc, #84]	; (8007f50 <prvAddNewTaskToReadyList+0xd8>)
 8007efa:	441a      	add	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3304      	adds	r3, #4
 8007f00:	4619      	mov	r1, r3
 8007f02:	4610      	mov	r0, r2
 8007f04:	f7ff f913 	bl	800712e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f08:	f001 fa2c 	bl	8009364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <prvAddNewTaskToReadyList+0xcc>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00e      	beq.n	8007f32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f14:	4b0a      	ldr	r3, [pc, #40]	; (8007f40 <prvAddNewTaskToReadyList+0xc8>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d207      	bcs.n	8007f32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f22:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <prvAddNewTaskToReadyList+0xdc>)
 8007f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000d94 	.word	0x20000d94
 8007f40:	200008c0 	.word	0x200008c0
 8007f44:	20000da0 	.word	0x20000da0
 8007f48:	20000db0 	.word	0x20000db0
 8007f4c:	20000d9c 	.word	0x20000d9c
 8007f50:	200008c4 	.word	0x200008c4
 8007f54:	e000ed04 	.word	0xe000ed04

08007f58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d017      	beq.n	8007f9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f6a:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <vTaskDelay+0x60>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <vTaskDelay+0x30>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	60bb      	str	r3, [r7, #8]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f88:	f000 f880 	bl	800808c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fcea 	bl	8008968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f94:	f000 f888 	bl	80080a8 <xTaskResumeAll>
 8007f98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d107      	bne.n	8007fb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007fa0:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <vTaskDelay+0x64>)
 8007fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fb0:	bf00      	nop
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000dbc 	.word	0x20000dbc
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08a      	sub	sp, #40	; 0x28
 8007fc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fce:	463a      	mov	r2, r7
 8007fd0:	1d39      	adds	r1, r7, #4
 8007fd2:	f107 0308 	add.w	r3, r7, #8
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff f848 	bl	800706c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	9202      	str	r2, [sp, #8]
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	2300      	movs	r3, #0
 8007fec:	460a      	mov	r2, r1
 8007fee:	4921      	ldr	r1, [pc, #132]	; (8008074 <vTaskStartScheduler+0xb4>)
 8007ff0:	4821      	ldr	r0, [pc, #132]	; (8008078 <vTaskStartScheduler+0xb8>)
 8007ff2:	f7ff fe0f 	bl	8007c14 <xTaskCreateStatic>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4a20      	ldr	r2, [pc, #128]	; (800807c <vTaskStartScheduler+0xbc>)
 8007ffa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ffc:	4b1f      	ldr	r3, [pc, #124]	; (800807c <vTaskStartScheduler+0xbc>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d002      	beq.n	800800a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008004:	2301      	movs	r3, #1
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	e001      	b.n	800800e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800800a:	2300      	movs	r3, #0
 800800c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d102      	bne.n	800801a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008014:	f000 fcfc 	bl	8008a10 <xTimerCreateTimerTask>
 8008018:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d116      	bne.n	800804e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	613b      	str	r3, [r7, #16]
}
 8008032:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008034:	4b12      	ldr	r3, [pc, #72]	; (8008080 <vTaskStartScheduler+0xc0>)
 8008036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800803a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800803c:	4b11      	ldr	r3, [pc, #68]	; (8008084 <vTaskStartScheduler+0xc4>)
 800803e:	2201      	movs	r2, #1
 8008040:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008042:	4b11      	ldr	r3, [pc, #68]	; (8008088 <vTaskStartScheduler+0xc8>)
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008048:	f001 f8ba 	bl	80091c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800804c:	e00e      	b.n	800806c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008054:	d10a      	bne.n	800806c <vTaskStartScheduler+0xac>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60fb      	str	r3, [r7, #12]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <vTaskStartScheduler+0xaa>
}
 800806c:	bf00      	nop
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	0800e570 	.word	0x0800e570
 8008078:	080086a5 	.word	0x080086a5
 800807c:	20000db8 	.word	0x20000db8
 8008080:	20000db4 	.word	0x20000db4
 8008084:	20000da0 	.word	0x20000da0
 8008088:	20000d98 	.word	0x20000d98

0800808c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008090:	4b04      	ldr	r3, [pc, #16]	; (80080a4 <vTaskSuspendAll+0x18>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3301      	adds	r3, #1
 8008096:	4a03      	ldr	r2, [pc, #12]	; (80080a4 <vTaskSuspendAll+0x18>)
 8008098:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800809a:	bf00      	nop
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	20000dbc 	.word	0x20000dbc

080080a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080b6:	4b42      	ldr	r3, [pc, #264]	; (80081c0 <xTaskResumeAll+0x118>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	603b      	str	r3, [r7, #0]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080d4:	f001 f916 	bl	8009304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080d8:	4b39      	ldr	r3, [pc, #228]	; (80081c0 <xTaskResumeAll+0x118>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3b01      	subs	r3, #1
 80080de:	4a38      	ldr	r2, [pc, #224]	; (80081c0 <xTaskResumeAll+0x118>)
 80080e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e2:	4b37      	ldr	r3, [pc, #220]	; (80081c0 <xTaskResumeAll+0x118>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d162      	bne.n	80081b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080ea:	4b36      	ldr	r3, [pc, #216]	; (80081c4 <xTaskResumeAll+0x11c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d05e      	beq.n	80081b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080f2:	e02f      	b.n	8008154 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f4:	4b34      	ldr	r3, [pc, #208]	; (80081c8 <xTaskResumeAll+0x120>)
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3318      	adds	r3, #24
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff f871 	bl	80071e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3304      	adds	r3, #4
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff f86c 	bl	80071e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	4b2d      	ldr	r3, [pc, #180]	; (80081cc <xTaskResumeAll+0x124>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d903      	bls.n	8008124 <xTaskResumeAll+0x7c>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	4a2a      	ldr	r2, [pc, #168]	; (80081cc <xTaskResumeAll+0x124>)
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4a27      	ldr	r2, [pc, #156]	; (80081d0 <xTaskResumeAll+0x128>)
 8008132:	441a      	add	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3304      	adds	r3, #4
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f7fe fff7 	bl	800712e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008144:	4b23      	ldr	r3, [pc, #140]	; (80081d4 <xTaskResumeAll+0x12c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	429a      	cmp	r2, r3
 800814c:	d302      	bcc.n	8008154 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800814e:	4b22      	ldr	r3, [pc, #136]	; (80081d8 <xTaskResumeAll+0x130>)
 8008150:	2201      	movs	r2, #1
 8008152:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008154:	4b1c      	ldr	r3, [pc, #112]	; (80081c8 <xTaskResumeAll+0x120>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1cb      	bne.n	80080f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008162:	f000 fb55 	bl	8008810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008166:	4b1d      	ldr	r3, [pc, #116]	; (80081dc <xTaskResumeAll+0x134>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d010      	beq.n	8008194 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008172:	f000 f847 	bl	8008204 <xTaskIncrementTick>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800817c:	4b16      	ldr	r3, [pc, #88]	; (80081d8 <xTaskResumeAll+0x130>)
 800817e:	2201      	movs	r2, #1
 8008180:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3b01      	subs	r3, #1
 8008186:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1f1      	bne.n	8008172 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800818e:	4b13      	ldr	r3, [pc, #76]	; (80081dc <xTaskResumeAll+0x134>)
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008194:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <xTaskResumeAll+0x130>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d009      	beq.n	80081b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800819c:	2301      	movs	r3, #1
 800819e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081a0:	4b0f      	ldr	r3, [pc, #60]	; (80081e0 <xTaskResumeAll+0x138>)
 80081a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081b0:	f001 f8d8 	bl	8009364 <vPortExitCritical>

	return xAlreadyYielded;
 80081b4:	68bb      	ldr	r3, [r7, #8]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000dbc 	.word	0x20000dbc
 80081c4:	20000d94 	.word	0x20000d94
 80081c8:	20000d54 	.word	0x20000d54
 80081cc:	20000d9c 	.word	0x20000d9c
 80081d0:	200008c4 	.word	0x200008c4
 80081d4:	200008c0 	.word	0x200008c0
 80081d8:	20000da8 	.word	0x20000da8
 80081dc:	20000da4 	.word	0x20000da4
 80081e0:	e000ed04 	.word	0xe000ed04

080081e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80081ea:	4b05      	ldr	r3, [pc, #20]	; (8008200 <xTaskGetTickCount+0x1c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081f0:	687b      	ldr	r3, [r7, #4]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	20000d98 	.word	0x20000d98

08008204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800820a:	2300      	movs	r3, #0
 800820c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800820e:	4b4f      	ldr	r3, [pc, #316]	; (800834c <xTaskIncrementTick+0x148>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f040 808f 	bne.w	8008336 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008218:	4b4d      	ldr	r3, [pc, #308]	; (8008350 <xTaskIncrementTick+0x14c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3301      	adds	r3, #1
 800821e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008220:	4a4b      	ldr	r2, [pc, #300]	; (8008350 <xTaskIncrementTick+0x14c>)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d120      	bne.n	800826e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800822c:	4b49      	ldr	r3, [pc, #292]	; (8008354 <xTaskIncrementTick+0x150>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00a      	beq.n	800824c <xTaskIncrementTick+0x48>
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	603b      	str	r3, [r7, #0]
}
 8008248:	bf00      	nop
 800824a:	e7fe      	b.n	800824a <xTaskIncrementTick+0x46>
 800824c:	4b41      	ldr	r3, [pc, #260]	; (8008354 <xTaskIncrementTick+0x150>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	4b41      	ldr	r3, [pc, #260]	; (8008358 <xTaskIncrementTick+0x154>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a3f      	ldr	r2, [pc, #252]	; (8008354 <xTaskIncrementTick+0x150>)
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	4a3f      	ldr	r2, [pc, #252]	; (8008358 <xTaskIncrementTick+0x154>)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	4b3e      	ldr	r3, [pc, #248]	; (800835c <xTaskIncrementTick+0x158>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3301      	adds	r3, #1
 8008266:	4a3d      	ldr	r2, [pc, #244]	; (800835c <xTaskIncrementTick+0x158>)
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	f000 fad1 	bl	8008810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800826e:	4b3c      	ldr	r3, [pc, #240]	; (8008360 <xTaskIncrementTick+0x15c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	429a      	cmp	r2, r3
 8008276:	d349      	bcc.n	800830c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008278:	4b36      	ldr	r3, [pc, #216]	; (8008354 <xTaskIncrementTick+0x150>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d104      	bne.n	800828c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008282:	4b37      	ldr	r3, [pc, #220]	; (8008360 <xTaskIncrementTick+0x15c>)
 8008284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008288:	601a      	str	r2, [r3, #0]
					break;
 800828a:	e03f      	b.n	800830c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828c:	4b31      	ldr	r3, [pc, #196]	; (8008354 <xTaskIncrementTick+0x150>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d203      	bcs.n	80082ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082a4:	4a2e      	ldr	r2, [pc, #184]	; (8008360 <xTaskIncrementTick+0x15c>)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082aa:	e02f      	b.n	800830c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	3304      	adds	r3, #4
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fe ff99 	bl	80071e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d004      	beq.n	80082c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	3318      	adds	r3, #24
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe ff90 	bl	80071e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082cc:	4b25      	ldr	r3, [pc, #148]	; (8008364 <xTaskIncrementTick+0x160>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d903      	bls.n	80082dc <xTaskIncrementTick+0xd8>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	4a22      	ldr	r2, [pc, #136]	; (8008364 <xTaskIncrementTick+0x160>)
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4a1f      	ldr	r2, [pc, #124]	; (8008368 <xTaskIncrementTick+0x164>)
 80082ea:	441a      	add	r2, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	3304      	adds	r3, #4
 80082f0:	4619      	mov	r1, r3
 80082f2:	4610      	mov	r0, r2
 80082f4:	f7fe ff1b 	bl	800712e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	4b1b      	ldr	r3, [pc, #108]	; (800836c <xTaskIncrementTick+0x168>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	429a      	cmp	r2, r3
 8008304:	d3b8      	bcc.n	8008278 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008306:	2301      	movs	r3, #1
 8008308:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800830a:	e7b5      	b.n	8008278 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800830c:	4b17      	ldr	r3, [pc, #92]	; (800836c <xTaskIncrementTick+0x168>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008312:	4915      	ldr	r1, [pc, #84]	; (8008368 <xTaskIncrementTick+0x164>)
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	440b      	add	r3, r1
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d901      	bls.n	8008328 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008324:	2301      	movs	r3, #1
 8008326:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008328:	4b11      	ldr	r3, [pc, #68]	; (8008370 <xTaskIncrementTick+0x16c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d007      	beq.n	8008340 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008330:	2301      	movs	r3, #1
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	e004      	b.n	8008340 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008336:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <xTaskIncrementTick+0x170>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3301      	adds	r3, #1
 800833c:	4a0d      	ldr	r2, [pc, #52]	; (8008374 <xTaskIncrementTick+0x170>)
 800833e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008340:	697b      	ldr	r3, [r7, #20]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20000dbc 	.word	0x20000dbc
 8008350:	20000d98 	.word	0x20000d98
 8008354:	20000d4c 	.word	0x20000d4c
 8008358:	20000d50 	.word	0x20000d50
 800835c:	20000dac 	.word	0x20000dac
 8008360:	20000db4 	.word	0x20000db4
 8008364:	20000d9c 	.word	0x20000d9c
 8008368:	200008c4 	.word	0x200008c4
 800836c:	200008c0 	.word	0x200008c0
 8008370:	20000da8 	.word	0x20000da8
 8008374:	20000da4 	.word	0x20000da4

08008378 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800837e:	4b28      	ldr	r3, [pc, #160]	; (8008420 <vTaskSwitchContext+0xa8>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008386:	4b27      	ldr	r3, [pc, #156]	; (8008424 <vTaskSwitchContext+0xac>)
 8008388:	2201      	movs	r2, #1
 800838a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800838c:	e041      	b.n	8008412 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800838e:	4b25      	ldr	r3, [pc, #148]	; (8008424 <vTaskSwitchContext+0xac>)
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008394:	4b24      	ldr	r3, [pc, #144]	; (8008428 <vTaskSwitchContext+0xb0>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	60fb      	str	r3, [r7, #12]
 800839a:	e010      	b.n	80083be <vTaskSwitchContext+0x46>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10a      	bne.n	80083b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	607b      	str	r3, [r7, #4]
}
 80083b4:	bf00      	nop
 80083b6:	e7fe      	b.n	80083b6 <vTaskSwitchContext+0x3e>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	491b      	ldr	r1, [pc, #108]	; (800842c <vTaskSwitchContext+0xb4>)
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	4613      	mov	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	440b      	add	r3, r1
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0e4      	beq.n	800839c <vTaskSwitchContext+0x24>
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4613      	mov	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4a13      	ldr	r2, [pc, #76]	; (800842c <vTaskSwitchContext+0xb4>)
 80083de:	4413      	add	r3, r2
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	605a      	str	r2, [r3, #4]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	3308      	adds	r3, #8
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d104      	bne.n	8008402 <vTaskSwitchContext+0x8a>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	605a      	str	r2, [r3, #4]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	4a09      	ldr	r2, [pc, #36]	; (8008430 <vTaskSwitchContext+0xb8>)
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	4a06      	ldr	r2, [pc, #24]	; (8008428 <vTaskSwitchContext+0xb0>)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6013      	str	r3, [r2, #0]
}
 8008412:	bf00      	nop
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	20000dbc 	.word	0x20000dbc
 8008424:	20000da8 	.word	0x20000da8
 8008428:	20000d9c 	.word	0x20000d9c
 800842c:	200008c4 	.word	0x200008c4
 8008430:	200008c0 	.word	0x200008c0

08008434 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	60fb      	str	r3, [r7, #12]
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800845a:	4b07      	ldr	r3, [pc, #28]	; (8008478 <vTaskPlaceOnEventList+0x44>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3318      	adds	r3, #24
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7fe fe87 	bl	8007176 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008468:	2101      	movs	r1, #1
 800846a:	6838      	ldr	r0, [r7, #0]
 800846c:	f000 fa7c 	bl	8008968 <prvAddCurrentTaskToDelayedList>
}
 8008470:	bf00      	nop
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	200008c0 	.word	0x200008c0

0800847c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10a      	bne.n	80084a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	617b      	str	r3, [r7, #20]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084a4:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3318      	adds	r3, #24
 80084aa:	4619      	mov	r1, r3
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7fe fe3e 	bl	800712e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80084b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	68b8      	ldr	r0, [r7, #8]
 80084c2:	f000 fa51 	bl	8008968 <prvAddCurrentTaskToDelayedList>
	}
 80084c6:	bf00      	nop
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	200008c0 	.word	0x200008c0

080084d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10a      	bne.n	8008500 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	60fb      	str	r3, [r7, #12]
}
 80084fc:	bf00      	nop
 80084fe:	e7fe      	b.n	80084fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	3318      	adds	r3, #24
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe fe6f 	bl	80071e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800850a:	4b1e      	ldr	r3, [pc, #120]	; (8008584 <xTaskRemoveFromEventList+0xb0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d11d      	bne.n	800854e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	3304      	adds	r3, #4
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe fe66 	bl	80071e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008520:	4b19      	ldr	r3, [pc, #100]	; (8008588 <xTaskRemoveFromEventList+0xb4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	429a      	cmp	r2, r3
 8008526:	d903      	bls.n	8008530 <xTaskRemoveFromEventList+0x5c>
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	4a16      	ldr	r2, [pc, #88]	; (8008588 <xTaskRemoveFromEventList+0xb4>)
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4a13      	ldr	r2, [pc, #76]	; (800858c <xTaskRemoveFromEventList+0xb8>)
 800853e:	441a      	add	r2, r3
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7fe fdf1 	bl	800712e <vListInsertEnd>
 800854c:	e005      	b.n	800855a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	3318      	adds	r3, #24
 8008552:	4619      	mov	r1, r3
 8008554:	480e      	ldr	r0, [pc, #56]	; (8008590 <xTaskRemoveFromEventList+0xbc>)
 8008556:	f7fe fdea 	bl	800712e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <xTaskRemoveFromEventList+0xc0>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	429a      	cmp	r2, r3
 8008566:	d905      	bls.n	8008574 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008568:	2301      	movs	r3, #1
 800856a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800856c:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <xTaskRemoveFromEventList+0xc4>)
 800856e:	2201      	movs	r2, #1
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	e001      	b.n	8008578 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008574:	2300      	movs	r3, #0
 8008576:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008578:	697b      	ldr	r3, [r7, #20]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000dbc 	.word	0x20000dbc
 8008588:	20000d9c 	.word	0x20000d9c
 800858c:	200008c4 	.word	0x200008c4
 8008590:	20000d54 	.word	0x20000d54
 8008594:	200008c0 	.word	0x200008c0
 8008598:	20000da8 	.word	0x20000da8

0800859c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085a4:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <vTaskInternalSetTimeOutState+0x24>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085ac:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <vTaskInternalSetTimeOutState+0x28>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	605a      	str	r2, [r3, #4]
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	20000dac 	.word	0x20000dac
 80085c4:	20000d98 	.word	0x20000d98

080085c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10a      	bne.n	80085ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	613b      	str	r3, [r7, #16]
}
 80085ea:	bf00      	nop
 80085ec:	e7fe      	b.n	80085ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10a      	bne.n	800860a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	60fb      	str	r3, [r7, #12]
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800860a:	f000 fe7b 	bl	8009304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800860e:	4b1d      	ldr	r3, [pc, #116]	; (8008684 <xTaskCheckForTimeOut+0xbc>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008626:	d102      	bne.n	800862e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008628:	2300      	movs	r3, #0
 800862a:	61fb      	str	r3, [r7, #28]
 800862c:	e023      	b.n	8008676 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	4b15      	ldr	r3, [pc, #84]	; (8008688 <xTaskCheckForTimeOut+0xc0>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	d007      	beq.n	800864a <xTaskCheckForTimeOut+0x82>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	429a      	cmp	r2, r3
 8008642:	d302      	bcc.n	800864a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008644:	2301      	movs	r3, #1
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	e015      	b.n	8008676 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	429a      	cmp	r2, r3
 8008652:	d20b      	bcs.n	800866c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	1ad2      	subs	r2, r2, r3
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff ff9b 	bl	800859c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008666:	2300      	movs	r3, #0
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	e004      	b.n	8008676 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2200      	movs	r2, #0
 8008670:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008672:	2301      	movs	r3, #1
 8008674:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008676:	f000 fe75 	bl	8009364 <vPortExitCritical>

	return xReturn;
 800867a:	69fb      	ldr	r3, [r7, #28]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3720      	adds	r7, #32
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	20000d98 	.word	0x20000d98
 8008688:	20000dac 	.word	0x20000dac

0800868c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008690:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <vTaskMissedYield+0x14>)
 8008692:	2201      	movs	r2, #1
 8008694:	601a      	str	r2, [r3, #0]
}
 8008696:	bf00      	nop
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	20000da8 	.word	0x20000da8

080086a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086ac:	f000 f852 	bl	8008754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086b0:	4b06      	ldr	r3, [pc, #24]	; (80086cc <prvIdleTask+0x28>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d9f9      	bls.n	80086ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80086b8:	4b05      	ldr	r3, [pc, #20]	; (80086d0 <prvIdleTask+0x2c>)
 80086ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086c8:	e7f0      	b.n	80086ac <prvIdleTask+0x8>
 80086ca:	bf00      	nop
 80086cc:	200008c4 	.word	0x200008c4
 80086d0:	e000ed04 	.word	0xe000ed04

080086d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086da:	2300      	movs	r3, #0
 80086dc:	607b      	str	r3, [r7, #4]
 80086de:	e00c      	b.n	80086fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4a12      	ldr	r2, [pc, #72]	; (8008734 <prvInitialiseTaskLists+0x60>)
 80086ec:	4413      	add	r3, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe fcf0 	bl	80070d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3301      	adds	r3, #1
 80086f8:	607b      	str	r3, [r7, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b37      	cmp	r3, #55	; 0x37
 80086fe:	d9ef      	bls.n	80086e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008700:	480d      	ldr	r0, [pc, #52]	; (8008738 <prvInitialiseTaskLists+0x64>)
 8008702:	f7fe fce7 	bl	80070d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008706:	480d      	ldr	r0, [pc, #52]	; (800873c <prvInitialiseTaskLists+0x68>)
 8008708:	f7fe fce4 	bl	80070d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800870c:	480c      	ldr	r0, [pc, #48]	; (8008740 <prvInitialiseTaskLists+0x6c>)
 800870e:	f7fe fce1 	bl	80070d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008712:	480c      	ldr	r0, [pc, #48]	; (8008744 <prvInitialiseTaskLists+0x70>)
 8008714:	f7fe fcde 	bl	80070d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008718:	480b      	ldr	r0, [pc, #44]	; (8008748 <prvInitialiseTaskLists+0x74>)
 800871a:	f7fe fcdb 	bl	80070d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800871e:	4b0b      	ldr	r3, [pc, #44]	; (800874c <prvInitialiseTaskLists+0x78>)
 8008720:	4a05      	ldr	r2, [pc, #20]	; (8008738 <prvInitialiseTaskLists+0x64>)
 8008722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008724:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <prvInitialiseTaskLists+0x7c>)
 8008726:	4a05      	ldr	r2, [pc, #20]	; (800873c <prvInitialiseTaskLists+0x68>)
 8008728:	601a      	str	r2, [r3, #0]
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	200008c4 	.word	0x200008c4
 8008738:	20000d24 	.word	0x20000d24
 800873c:	20000d38 	.word	0x20000d38
 8008740:	20000d54 	.word	0x20000d54
 8008744:	20000d68 	.word	0x20000d68
 8008748:	20000d80 	.word	0x20000d80
 800874c:	20000d4c 	.word	0x20000d4c
 8008750:	20000d50 	.word	0x20000d50

08008754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800875a:	e019      	b.n	8008790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800875c:	f000 fdd2 	bl	8009304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008760:	4b10      	ldr	r3, [pc, #64]	; (80087a4 <prvCheckTasksWaitingTermination+0x50>)
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3304      	adds	r3, #4
 800876c:	4618      	mov	r0, r3
 800876e:	f7fe fd3b 	bl	80071e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008772:	4b0d      	ldr	r3, [pc, #52]	; (80087a8 <prvCheckTasksWaitingTermination+0x54>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3b01      	subs	r3, #1
 8008778:	4a0b      	ldr	r2, [pc, #44]	; (80087a8 <prvCheckTasksWaitingTermination+0x54>)
 800877a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800877c:	4b0b      	ldr	r3, [pc, #44]	; (80087ac <prvCheckTasksWaitingTermination+0x58>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3b01      	subs	r3, #1
 8008782:	4a0a      	ldr	r2, [pc, #40]	; (80087ac <prvCheckTasksWaitingTermination+0x58>)
 8008784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008786:	f000 fded 	bl	8009364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f810 	bl	80087b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008790:	4b06      	ldr	r3, [pc, #24]	; (80087ac <prvCheckTasksWaitingTermination+0x58>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e1      	bne.n	800875c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20000d68 	.word	0x20000d68
 80087a8:	20000d94 	.word	0x20000d94
 80087ac:	20000d7c 	.word	0x20000d7c

080087b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d108      	bne.n	80087d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 ff8a 	bl	80096e0 <vPortFree>
				vPortFree( pxTCB );
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 ff87 	bl	80096e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087d2:	e018      	b.n	8008806 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d103      	bne.n	80087e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 ff7e 	bl	80096e0 <vPortFree>
	}
 80087e4:	e00f      	b.n	8008806 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d00a      	beq.n	8008806 <prvDeleteTCB+0x56>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	60fb      	str	r3, [r7, #12]
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <prvDeleteTCB+0x54>
	}
 8008806:	bf00      	nop
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008816:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <prvResetNextTaskUnblockTime+0x38>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008820:	4b0a      	ldr	r3, [pc, #40]	; (800884c <prvResetNextTaskUnblockTime+0x3c>)
 8008822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008828:	e008      	b.n	800883c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882a:	4b07      	ldr	r3, [pc, #28]	; (8008848 <prvResetNextTaskUnblockTime+0x38>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	4a04      	ldr	r2, [pc, #16]	; (800884c <prvResetNextTaskUnblockTime+0x3c>)
 800883a:	6013      	str	r3, [r2, #0]
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	20000d4c 	.word	0x20000d4c
 800884c:	20000db4 	.word	0x20000db4

08008850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <xTaskGetSchedulerState+0x34>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d102      	bne.n	8008864 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800885e:	2301      	movs	r3, #1
 8008860:	607b      	str	r3, [r7, #4]
 8008862:	e008      	b.n	8008876 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008864:	4b08      	ldr	r3, [pc, #32]	; (8008888 <xTaskGetSchedulerState+0x38>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800886c:	2302      	movs	r3, #2
 800886e:	607b      	str	r3, [r7, #4]
 8008870:	e001      	b.n	8008876 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008876:	687b      	ldr	r3, [r7, #4]
	}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	20000da0 	.word	0x20000da0
 8008888:	20000dbc 	.word	0x20000dbc

0800888c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008898:	2300      	movs	r3, #0
 800889a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d056      	beq.n	8008950 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088a2:	4b2e      	ldr	r3, [pc, #184]	; (800895c <xTaskPriorityDisinherit+0xd0>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d00a      	beq.n	80088c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	60fb      	str	r3, [r7, #12]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	60bb      	str	r3, [r7, #8]
}
 80088dc:	bf00      	nop
 80088de:	e7fe      	b.n	80088de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e4:	1e5a      	subs	r2, r3, #1
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d02c      	beq.n	8008950 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d128      	bne.n	8008950 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	3304      	adds	r3, #4
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fc70 	bl	80071e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008920:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <xTaskPriorityDisinherit+0xd4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	429a      	cmp	r2, r3
 8008926:	d903      	bls.n	8008930 <xTaskPriorityDisinherit+0xa4>
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	4a0c      	ldr	r2, [pc, #48]	; (8008960 <xTaskPriorityDisinherit+0xd4>)
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4a09      	ldr	r2, [pc, #36]	; (8008964 <xTaskPriorityDisinherit+0xd8>)
 800893e:	441a      	add	r2, r3
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	3304      	adds	r3, #4
 8008944:	4619      	mov	r1, r3
 8008946:	4610      	mov	r0, r2
 8008948:	f7fe fbf1 	bl	800712e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008950:	697b      	ldr	r3, [r7, #20]
	}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	200008c0 	.word	0x200008c0
 8008960:	20000d9c 	.word	0x20000d9c
 8008964:	200008c4 	.word	0x200008c4

08008968 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008972:	4b21      	ldr	r3, [pc, #132]	; (80089f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008978:	4b20      	ldr	r3, [pc, #128]	; (80089fc <prvAddCurrentTaskToDelayedList+0x94>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3304      	adds	r3, #4
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe fc32 	bl	80071e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800898a:	d10a      	bne.n	80089a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d007      	beq.n	80089a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008992:	4b1a      	ldr	r3, [pc, #104]	; (80089fc <prvAddCurrentTaskToDelayedList+0x94>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3304      	adds	r3, #4
 8008998:	4619      	mov	r1, r3
 800899a:	4819      	ldr	r0, [pc, #100]	; (8008a00 <prvAddCurrentTaskToDelayedList+0x98>)
 800899c:	f7fe fbc7 	bl	800712e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089a0:	e026      	b.n	80089f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4413      	add	r3, r2
 80089a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089aa:	4b14      	ldr	r3, [pc, #80]	; (80089fc <prvAddCurrentTaskToDelayedList+0x94>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d209      	bcs.n	80089ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089ba:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <prvAddCurrentTaskToDelayedList+0x9c>)
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <prvAddCurrentTaskToDelayedList+0x94>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f7fe fbd5 	bl	8007176 <vListInsert>
}
 80089cc:	e010      	b.n	80089f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089ce:	4b0e      	ldr	r3, [pc, #56]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <prvAddCurrentTaskToDelayedList+0x94>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3304      	adds	r3, #4
 80089d8:	4619      	mov	r1, r3
 80089da:	4610      	mov	r0, r2
 80089dc:	f7fe fbcb 	bl	8007176 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d202      	bcs.n	80089f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80089ea:	4a08      	ldr	r2, [pc, #32]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	6013      	str	r3, [r2, #0]
}
 80089f0:	bf00      	nop
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20000d98 	.word	0x20000d98
 80089fc:	200008c0 	.word	0x200008c0
 8008a00:	20000d80 	.word	0x20000d80
 8008a04:	20000d50 	.word	0x20000d50
 8008a08:	20000d4c 	.word	0x20000d4c
 8008a0c:	20000db4 	.word	0x20000db4

08008a10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08a      	sub	sp, #40	; 0x28
 8008a14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a1a:	f000 fb07 	bl	800902c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a1e:	4b1c      	ldr	r3, [pc, #112]	; (8008a90 <xTimerCreateTimerTask+0x80>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d021      	beq.n	8008a6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a2e:	1d3a      	adds	r2, r7, #4
 8008a30:	f107 0108 	add.w	r1, r7, #8
 8008a34:	f107 030c 	add.w	r3, r7, #12
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fb31 	bl	80070a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	9202      	str	r2, [sp, #8]
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	2302      	movs	r3, #2
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	460a      	mov	r2, r1
 8008a50:	4910      	ldr	r1, [pc, #64]	; (8008a94 <xTimerCreateTimerTask+0x84>)
 8008a52:	4811      	ldr	r0, [pc, #68]	; (8008a98 <xTimerCreateTimerTask+0x88>)
 8008a54:	f7ff f8de 	bl	8007c14 <xTaskCreateStatic>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	4a10      	ldr	r2, [pc, #64]	; (8008a9c <xTimerCreateTimerTask+0x8c>)
 8008a5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a5e:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <xTimerCreateTimerTask+0x8c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a66:	2301      	movs	r3, #1
 8008a68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	613b      	str	r3, [r7, #16]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008a86:	697b      	ldr	r3, [r7, #20]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20000df0 	.word	0x20000df0
 8008a94:	0800e578 	.word	0x0800e578
 8008a98:	08008bd5 	.word	0x08008bd5
 8008a9c:	20000df4 	.word	0x20000df4

08008aa0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	; 0x28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10a      	bne.n	8008ace <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	623b      	str	r3, [r7, #32]
}
 8008aca:	bf00      	nop
 8008acc:	e7fe      	b.n	8008acc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ace:	4b1a      	ldr	r3, [pc, #104]	; (8008b38 <xTimerGenericCommand+0x98>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d02a      	beq.n	8008b2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b05      	cmp	r3, #5
 8008ae6:	dc18      	bgt.n	8008b1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ae8:	f7ff feb2 	bl	8008850 <xTaskGetSchedulerState>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d109      	bne.n	8008b06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008af2:	4b11      	ldr	r3, [pc, #68]	; (8008b38 <xTimerGenericCommand+0x98>)
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	f107 0110 	add.w	r1, r7, #16
 8008afa:	2300      	movs	r3, #0
 8008afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008afe:	f7fe fca1 	bl	8007444 <xQueueGenericSend>
 8008b02:	6278      	str	r0, [r7, #36]	; 0x24
 8008b04:	e012      	b.n	8008b2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b06:	4b0c      	ldr	r3, [pc, #48]	; (8008b38 <xTimerGenericCommand+0x98>)
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	f107 0110 	add.w	r1, r7, #16
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2200      	movs	r2, #0
 8008b12:	f7fe fc97 	bl	8007444 <xQueueGenericSend>
 8008b16:	6278      	str	r0, [r7, #36]	; 0x24
 8008b18:	e008      	b.n	8008b2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <xTimerGenericCommand+0x98>)
 8008b1c:	6818      	ldr	r0, [r3, #0]
 8008b1e:	f107 0110 	add.w	r1, r7, #16
 8008b22:	2300      	movs	r3, #0
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	f7fe fd8b 	bl	8007640 <xQueueGenericSendFromISR>
 8008b2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3728      	adds	r7, #40	; 0x28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20000df0 	.word	0x20000df0

08008b3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b46:	4b22      	ldr	r3, [pc, #136]	; (8008bd0 <prvProcessExpiredTimer+0x94>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	3304      	adds	r3, #4
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe fb47 	bl	80071e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d022      	beq.n	8008bae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	699a      	ldr	r2, [r3, #24]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	18d1      	adds	r1, r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	6978      	ldr	r0, [r7, #20]
 8008b76:	f000 f8d1 	bl	8008d1c <prvInsertTimerInActiveList>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01f      	beq.n	8008bc0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b80:	2300      	movs	r3, #0
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	2300      	movs	r3, #0
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	2100      	movs	r1, #0
 8008b8a:	6978      	ldr	r0, [r7, #20]
 8008b8c:	f7ff ff88 	bl	8008aa0 <xTimerGenericCommand>
 8008b90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d113      	bne.n	8008bc0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	60fb      	str	r3, [r7, #12]
}
 8008baa:	bf00      	nop
 8008bac:	e7fe      	b.n	8008bac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bb4:	f023 0301 	bic.w	r3, r3, #1
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	6978      	ldr	r0, [r7, #20]
 8008bc6:	4798      	blx	r3
}
 8008bc8:	bf00      	nop
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20000de8 	.word	0x20000de8

08008bd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bdc:	f107 0308 	add.w	r3, r7, #8
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 f857 	bl	8008c94 <prvGetNextExpireTime>
 8008be6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4619      	mov	r1, r3
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 f803 	bl	8008bf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008bf2:	f000 f8d5 	bl	8008da0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bf6:	e7f1      	b.n	8008bdc <prvTimerTask+0x8>

08008bf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c02:	f7ff fa43 	bl	800808c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c06:	f107 0308 	add.w	r3, r7, #8
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 f866 	bl	8008cdc <prvSampleTimeNow>
 8008c10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d130      	bne.n	8008c7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10a      	bne.n	8008c34 <prvProcessTimerOrBlockTask+0x3c>
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d806      	bhi.n	8008c34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008c26:	f7ff fa3f 	bl	80080a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c2a:	68f9      	ldr	r1, [r7, #12]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff ff85 	bl	8008b3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c32:	e024      	b.n	8008c7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d008      	beq.n	8008c4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c3a:	4b13      	ldr	r3, [pc, #76]	; (8008c88 <prvProcessTimerOrBlockTask+0x90>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <prvProcessTimerOrBlockTask+0x50>
 8008c44:	2301      	movs	r3, #1
 8008c46:	e000      	b.n	8008c4a <prvProcessTimerOrBlockTask+0x52>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c4c:	4b0f      	ldr	r3, [pc, #60]	; (8008c8c <prvProcessTimerOrBlockTask+0x94>)
 8008c4e:	6818      	ldr	r0, [r3, #0]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f7fe ffa7 	bl	8007bac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c5e:	f7ff fa23 	bl	80080a8 <xTaskResumeAll>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c68:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <prvProcessTimerOrBlockTask+0x98>)
 8008c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	f3bf 8f6f 	isb	sy
}
 8008c78:	e001      	b.n	8008c7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c7a:	f7ff fa15 	bl	80080a8 <xTaskResumeAll>
}
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000dec 	.word	0x20000dec
 8008c8c:	20000df0 	.word	0x20000df0
 8008c90:	e000ed04 	.word	0xe000ed04

08008c94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c9c:	4b0e      	ldr	r3, [pc, #56]	; (8008cd8 <prvGetNextExpireTime+0x44>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <prvGetNextExpireTime+0x16>
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	e000      	b.n	8008cac <prvGetNextExpireTime+0x18>
 8008caa:	2200      	movs	r2, #0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cb8:	4b07      	ldr	r3, [pc, #28]	; (8008cd8 <prvGetNextExpireTime+0x44>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	e001      	b.n	8008cc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	20000de8 	.word	0x20000de8

08008cdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ce4:	f7ff fa7e 	bl	80081e4 <xTaskGetTickCount>
 8008ce8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008cea:	4b0b      	ldr	r3, [pc, #44]	; (8008d18 <prvSampleTimeNow+0x3c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d205      	bcs.n	8008d00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008cf4:	f000 f936 	bl	8008f64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	e002      	b.n	8008d06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d06:	4a04      	ldr	r2, [pc, #16]	; (8008d18 <prvSampleTimeNow+0x3c>)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000df8 	.word	0x20000df8

08008d1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d812      	bhi.n	8008d68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	1ad2      	subs	r2, r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d302      	bcc.n	8008d56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d50:	2301      	movs	r3, #1
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	e01b      	b.n	8008d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d56:	4b10      	ldr	r3, [pc, #64]	; (8008d98 <prvInsertTimerInActiveList+0x7c>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f7fe fa08 	bl	8007176 <vListInsert>
 8008d66:	e012      	b.n	8008d8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d206      	bcs.n	8008d7e <prvInsertTimerInActiveList+0x62>
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d302      	bcc.n	8008d7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	e007      	b.n	8008d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d7e:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <prvInsertTimerInActiveList+0x80>)
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3304      	adds	r3, #4
 8008d86:	4619      	mov	r1, r3
 8008d88:	4610      	mov	r0, r2
 8008d8a:	f7fe f9f4 	bl	8007176 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d8e:	697b      	ldr	r3, [r7, #20]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	20000dec 	.word	0x20000dec
 8008d9c:	20000de8 	.word	0x20000de8

08008da0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08e      	sub	sp, #56	; 0x38
 8008da4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008da6:	e0ca      	b.n	8008f3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da18      	bge.n	8008de0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008dae:	1d3b      	adds	r3, r7, #4
 8008db0:	3304      	adds	r3, #4
 8008db2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10a      	bne.n	8008dd0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	61fb      	str	r3, [r7, #28]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd6:	6850      	ldr	r0, [r2, #4]
 8008dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dda:	6892      	ldr	r2, [r2, #8]
 8008ddc:	4611      	mov	r1, r2
 8008dde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f2c0 80aa 	blt.w	8008f3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d004      	beq.n	8008dfe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	3304      	adds	r3, #4
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe f9f5 	bl	80071e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dfe:	463b      	mov	r3, r7
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff ff6b 	bl	8008cdc <prvSampleTimeNow>
 8008e06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b09      	cmp	r3, #9
 8008e0c:	f200 8097 	bhi.w	8008f3e <prvProcessReceivedCommands+0x19e>
 8008e10:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <prvProcessReceivedCommands+0x78>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008e41 	.word	0x08008e41
 8008e1c:	08008e41 	.word	0x08008e41
 8008e20:	08008e41 	.word	0x08008e41
 8008e24:	08008eb5 	.word	0x08008eb5
 8008e28:	08008ec9 	.word	0x08008ec9
 8008e2c:	08008f13 	.word	0x08008f13
 8008e30:	08008e41 	.word	0x08008e41
 8008e34:	08008e41 	.word	0x08008e41
 8008e38:	08008eb5 	.word	0x08008eb5
 8008e3c:	08008ec9 	.word	0x08008ec9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e46:	f043 0301 	orr.w	r3, r3, #1
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	18d1      	adds	r1, r2, r3
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e60:	f7ff ff5c 	bl	8008d1c <prvInsertTimerInActiveList>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d069      	beq.n	8008f3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d05e      	beq.n	8008f3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	441a      	add	r2, r3
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e92:	f7ff fe05 	bl	8008aa0 <xTimerGenericCommand>
 8008e96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d14f      	bne.n	8008f3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	61bb      	str	r3, [r7, #24]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eba:	f023 0301 	bic.w	r3, r3, #1
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ec6:	e03a      	b.n	8008f3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ece:	f043 0301 	orr.w	r3, r3, #1
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	617b      	str	r3, [r7, #20]
}
 8008efa:	bf00      	nop
 8008efc:	e7fe      	b.n	8008efc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	699a      	ldr	r2, [r3, #24]
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	18d1      	adds	r1, r2, r3
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f0c:	f7ff ff06 	bl	8008d1c <prvInsertTimerInActiveList>
					break;
 8008f10:	e015      	b.n	8008f3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d103      	bne.n	8008f28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f22:	f000 fbdd 	bl	80096e0 <vPortFree>
 8008f26:	e00a      	b.n	8008f3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f2e:	f023 0301 	bic.w	r3, r3, #1
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f3a:	e000      	b.n	8008f3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008f3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f3e:	4b08      	ldr	r3, [pc, #32]	; (8008f60 <prvProcessReceivedCommands+0x1c0>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	1d39      	adds	r1, r7, #4
 8008f44:	2200      	movs	r2, #0
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fc16 	bl	8007778 <xQueueReceive>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f47f af2a 	bne.w	8008da8 <prvProcessReceivedCommands+0x8>
	}
}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop
 8008f58:	3730      	adds	r7, #48	; 0x30
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20000df0 	.word	0x20000df0

08008f64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f6a:	e048      	b.n	8008ffe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f6c:	4b2d      	ldr	r3, [pc, #180]	; (8009024 <prvSwitchTimerLists+0xc0>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f76:	4b2b      	ldr	r3, [pc, #172]	; (8009024 <prvSwitchTimerLists+0xc0>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3304      	adds	r3, #4
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fe f92f 	bl	80071e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d02e      	beq.n	8008ffe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d90e      	bls.n	8008fd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fbe:	4b19      	ldr	r3, [pc, #100]	; (8009024 <prvSwitchTimerLists+0xc0>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4610      	mov	r0, r2
 8008fca:	f7fe f8d4 	bl	8007176 <vListInsert>
 8008fce:	e016      	b.n	8008ffe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	2100      	movs	r1, #0
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f7ff fd60 	bl	8008aa0 <xTimerGenericCommand>
 8008fe0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	603b      	str	r3, [r7, #0]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <prvSwitchTimerLists+0xc0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1b1      	bne.n	8008f6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009008:	4b06      	ldr	r3, [pc, #24]	; (8009024 <prvSwitchTimerLists+0xc0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800900e:	4b06      	ldr	r3, [pc, #24]	; (8009028 <prvSwitchTimerLists+0xc4>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a04      	ldr	r2, [pc, #16]	; (8009024 <prvSwitchTimerLists+0xc0>)
 8009014:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009016:	4a04      	ldr	r2, [pc, #16]	; (8009028 <prvSwitchTimerLists+0xc4>)
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	6013      	str	r3, [r2, #0]
}
 800901c:	bf00      	nop
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	20000de8 	.word	0x20000de8
 8009028:	20000dec 	.word	0x20000dec

0800902c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009032:	f000 f967 	bl	8009304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009036:	4b15      	ldr	r3, [pc, #84]	; (800908c <prvCheckForValidListAndQueue+0x60>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d120      	bne.n	8009080 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800903e:	4814      	ldr	r0, [pc, #80]	; (8009090 <prvCheckForValidListAndQueue+0x64>)
 8009040:	f7fe f848 	bl	80070d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009044:	4813      	ldr	r0, [pc, #76]	; (8009094 <prvCheckForValidListAndQueue+0x68>)
 8009046:	f7fe f845 	bl	80070d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800904a:	4b13      	ldr	r3, [pc, #76]	; (8009098 <prvCheckForValidListAndQueue+0x6c>)
 800904c:	4a10      	ldr	r2, [pc, #64]	; (8009090 <prvCheckForValidListAndQueue+0x64>)
 800904e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009050:	4b12      	ldr	r3, [pc, #72]	; (800909c <prvCheckForValidListAndQueue+0x70>)
 8009052:	4a10      	ldr	r2, [pc, #64]	; (8009094 <prvCheckForValidListAndQueue+0x68>)
 8009054:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009056:	2300      	movs	r3, #0
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	4b11      	ldr	r3, [pc, #68]	; (80090a0 <prvCheckForValidListAndQueue+0x74>)
 800905c:	4a11      	ldr	r2, [pc, #68]	; (80090a4 <prvCheckForValidListAndQueue+0x78>)
 800905e:	2110      	movs	r1, #16
 8009060:	200a      	movs	r0, #10
 8009062:	f7fe f953 	bl	800730c <xQueueGenericCreateStatic>
 8009066:	4603      	mov	r3, r0
 8009068:	4a08      	ldr	r2, [pc, #32]	; (800908c <prvCheckForValidListAndQueue+0x60>)
 800906a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800906c:	4b07      	ldr	r3, [pc, #28]	; (800908c <prvCheckForValidListAndQueue+0x60>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d005      	beq.n	8009080 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009074:	4b05      	ldr	r3, [pc, #20]	; (800908c <prvCheckForValidListAndQueue+0x60>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	490b      	ldr	r1, [pc, #44]	; (80090a8 <prvCheckForValidListAndQueue+0x7c>)
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe fd6c 	bl	8007b58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009080:	f000 f970 	bl	8009364 <vPortExitCritical>
}
 8009084:	bf00      	nop
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20000df0 	.word	0x20000df0
 8009090:	20000dc0 	.word	0x20000dc0
 8009094:	20000dd4 	.word	0x20000dd4
 8009098:	20000de8 	.word	0x20000de8
 800909c:	20000dec 	.word	0x20000dec
 80090a0:	20000e9c 	.word	0x20000e9c
 80090a4:	20000dfc 	.word	0x20000dfc
 80090a8:	0800e580 	.word	0x0800e580

080090ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3b04      	subs	r3, #4
 80090bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3b04      	subs	r3, #4
 80090ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f023 0201 	bic.w	r2, r3, #1
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3b04      	subs	r3, #4
 80090da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090dc:	4a0c      	ldr	r2, [pc, #48]	; (8009110 <pxPortInitialiseStack+0x64>)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3b14      	subs	r3, #20
 80090e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3b04      	subs	r3, #4
 80090f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f06f 0202 	mvn.w	r2, #2
 80090fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3b20      	subs	r3, #32
 8009100:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009102:	68fb      	ldr	r3, [r7, #12]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	08009115 	.word	0x08009115

08009114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800911e:	4b12      	ldr	r3, [pc, #72]	; (8009168 <prvTaskExitError+0x54>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009126:	d00a      	beq.n	800913e <prvTaskExitError+0x2a>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	60fb      	str	r3, [r7, #12]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <prvTaskExitError+0x28>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	60bb      	str	r3, [r7, #8]
}
 8009150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009152:	bf00      	nop
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0fc      	beq.n	8009154 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800915a:	bf00      	nop
 800915c:	bf00      	nop
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	2000000c 	.word	0x2000000c
 800916c:	00000000 	.word	0x00000000

08009170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009170:	4b07      	ldr	r3, [pc, #28]	; (8009190 <pxCurrentTCBConst2>)
 8009172:	6819      	ldr	r1, [r3, #0]
 8009174:	6808      	ldr	r0, [r1, #0]
 8009176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917a:	f380 8809 	msr	PSP, r0
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f04f 0000 	mov.w	r0, #0
 8009186:	f380 8811 	msr	BASEPRI, r0
 800918a:	4770      	bx	lr
 800918c:	f3af 8000 	nop.w

08009190 <pxCurrentTCBConst2>:
 8009190:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop

08009198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009198:	4808      	ldr	r0, [pc, #32]	; (80091bc <prvPortStartFirstTask+0x24>)
 800919a:	6800      	ldr	r0, [r0, #0]
 800919c:	6800      	ldr	r0, [r0, #0]
 800919e:	f380 8808 	msr	MSP, r0
 80091a2:	f04f 0000 	mov.w	r0, #0
 80091a6:	f380 8814 	msr	CONTROL, r0
 80091aa:	b662      	cpsie	i
 80091ac:	b661      	cpsie	f
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	df00      	svc	0
 80091b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091ba:	bf00      	nop
 80091bc:	e000ed08 	.word	0xe000ed08

080091c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091c6:	4b46      	ldr	r3, [pc, #280]	; (80092e0 <xPortStartScheduler+0x120>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a46      	ldr	r2, [pc, #280]	; (80092e4 <xPortStartScheduler+0x124>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d10a      	bne.n	80091e6 <xPortStartScheduler+0x26>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	613b      	str	r3, [r7, #16]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091e6:	4b3e      	ldr	r3, [pc, #248]	; (80092e0 <xPortStartScheduler+0x120>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a3f      	ldr	r2, [pc, #252]	; (80092e8 <xPortStartScheduler+0x128>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d10a      	bne.n	8009206 <xPortStartScheduler+0x46>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	60fb      	str	r3, [r7, #12]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009206:	4b39      	ldr	r3, [pc, #228]	; (80092ec <xPortStartScheduler+0x12c>)
 8009208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	b2db      	uxtb	r3, r3
 8009210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	22ff      	movs	r2, #255	; 0xff
 8009216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009228:	b2da      	uxtb	r2, r3
 800922a:	4b31      	ldr	r3, [pc, #196]	; (80092f0 <xPortStartScheduler+0x130>)
 800922c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800922e:	4b31      	ldr	r3, [pc, #196]	; (80092f4 <xPortStartScheduler+0x134>)
 8009230:	2207      	movs	r2, #7
 8009232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009234:	e009      	b.n	800924a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009236:	4b2f      	ldr	r3, [pc, #188]	; (80092f4 <xPortStartScheduler+0x134>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3b01      	subs	r3, #1
 800923c:	4a2d      	ldr	r2, [pc, #180]	; (80092f4 <xPortStartScheduler+0x134>)
 800923e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	b2db      	uxtb	r3, r3
 8009248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009252:	2b80      	cmp	r3, #128	; 0x80
 8009254:	d0ef      	beq.n	8009236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009256:	4b27      	ldr	r3, [pc, #156]	; (80092f4 <xPortStartScheduler+0x134>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f1c3 0307 	rsb	r3, r3, #7
 800925e:	2b04      	cmp	r3, #4
 8009260:	d00a      	beq.n	8009278 <xPortStartScheduler+0xb8>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	60bb      	str	r3, [r7, #8]
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009278:	4b1e      	ldr	r3, [pc, #120]	; (80092f4 <xPortStartScheduler+0x134>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	021b      	lsls	r3, r3, #8
 800927e:	4a1d      	ldr	r2, [pc, #116]	; (80092f4 <xPortStartScheduler+0x134>)
 8009280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009282:	4b1c      	ldr	r3, [pc, #112]	; (80092f4 <xPortStartScheduler+0x134>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800928a:	4a1a      	ldr	r2, [pc, #104]	; (80092f4 <xPortStartScheduler+0x134>)
 800928c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	b2da      	uxtb	r2, r3
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009296:	4b18      	ldr	r3, [pc, #96]	; (80092f8 <xPortStartScheduler+0x138>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a17      	ldr	r2, [pc, #92]	; (80092f8 <xPortStartScheduler+0x138>)
 800929c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092a2:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <xPortStartScheduler+0x138>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a14      	ldr	r2, [pc, #80]	; (80092f8 <xPortStartScheduler+0x138>)
 80092a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80092ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092ae:	f000 f8dd 	bl	800946c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092b2:	4b12      	ldr	r3, [pc, #72]	; (80092fc <xPortStartScheduler+0x13c>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092b8:	f000 f8fc 	bl	80094b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092bc:	4b10      	ldr	r3, [pc, #64]	; (8009300 <xPortStartScheduler+0x140>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a0f      	ldr	r2, [pc, #60]	; (8009300 <xPortStartScheduler+0x140>)
 80092c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80092c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092c8:	f7ff ff66 	bl	8009198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092cc:	f7ff f854 	bl	8008378 <vTaskSwitchContext>
	prvTaskExitError();
 80092d0:	f7ff ff20 	bl	8009114 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	e000ed00 	.word	0xe000ed00
 80092e4:	410fc271 	.word	0x410fc271
 80092e8:	410fc270 	.word	0x410fc270
 80092ec:	e000e400 	.word	0xe000e400
 80092f0:	20000eec 	.word	0x20000eec
 80092f4:	20000ef0 	.word	0x20000ef0
 80092f8:	e000ed20 	.word	0xe000ed20
 80092fc:	2000000c 	.word	0x2000000c
 8009300:	e000ef34 	.word	0xe000ef34

08009304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	607b      	str	r3, [r7, #4]
}
 800931c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800931e:	4b0f      	ldr	r3, [pc, #60]	; (800935c <vPortEnterCritical+0x58>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3301      	adds	r3, #1
 8009324:	4a0d      	ldr	r2, [pc, #52]	; (800935c <vPortEnterCritical+0x58>)
 8009326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009328:	4b0c      	ldr	r3, [pc, #48]	; (800935c <vPortEnterCritical+0x58>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10f      	bne.n	8009350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009330:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <vPortEnterCritical+0x5c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00a      	beq.n	8009350 <vPortEnterCritical+0x4c>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	603b      	str	r3, [r7, #0]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <vPortEnterCritical+0x4a>
	}
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	2000000c 	.word	0x2000000c
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800936a:	4b12      	ldr	r3, [pc, #72]	; (80093b4 <vPortExitCritical+0x50>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <vPortExitCritical+0x24>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	607b      	str	r3, [r7, #4]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <vPortExitCritical+0x50>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3b01      	subs	r3, #1
 800938e:	4a09      	ldr	r2, [pc, #36]	; (80093b4 <vPortExitCritical+0x50>)
 8009390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009392:	4b08      	ldr	r3, [pc, #32]	; (80093b4 <vPortExitCritical+0x50>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d105      	bne.n	80093a6 <vPortExitCritical+0x42>
 800939a:	2300      	movs	r3, #0
 800939c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	f383 8811 	msr	BASEPRI, r3
}
 80093a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	2000000c 	.word	0x2000000c
	...

080093c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093c0:	f3ef 8009 	mrs	r0, PSP
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	4b15      	ldr	r3, [pc, #84]	; (8009420 <pxCurrentTCBConst>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	f01e 0f10 	tst.w	lr, #16
 80093d0:	bf08      	it	eq
 80093d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093da:	6010      	str	r0, [r2, #0]
 80093dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80093e4:	f380 8811 	msr	BASEPRI, r0
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f7fe ffc2 	bl	8008378 <vTaskSwitchContext>
 80093f4:	f04f 0000 	mov.w	r0, #0
 80093f8:	f380 8811 	msr	BASEPRI, r0
 80093fc:	bc09      	pop	{r0, r3}
 80093fe:	6819      	ldr	r1, [r3, #0]
 8009400:	6808      	ldr	r0, [r1, #0]
 8009402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009406:	f01e 0f10 	tst.w	lr, #16
 800940a:	bf08      	it	eq
 800940c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009410:	f380 8809 	msr	PSP, r0
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	f3af 8000 	nop.w

08009420 <pxCurrentTCBConst>:
 8009420:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop

08009428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	607b      	str	r3, [r7, #4]
}
 8009440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009442:	f7fe fedf 	bl	8008204 <xTaskIncrementTick>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800944c:	4b06      	ldr	r3, [pc, #24]	; (8009468 <xPortSysTickHandler+0x40>)
 800944e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	f383 8811 	msr	BASEPRI, r3
}
 800945e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	e000ed04 	.word	0xe000ed04

0800946c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <vPortSetupTimerInterrupt+0x34>)
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009476:	4b0b      	ldr	r3, [pc, #44]	; (80094a4 <vPortSetupTimerInterrupt+0x38>)
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800947c:	4b0a      	ldr	r3, [pc, #40]	; (80094a8 <vPortSetupTimerInterrupt+0x3c>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a0a      	ldr	r2, [pc, #40]	; (80094ac <vPortSetupTimerInterrupt+0x40>)
 8009482:	fba2 2303 	umull	r2, r3, r2, r3
 8009486:	099b      	lsrs	r3, r3, #6
 8009488:	4a09      	ldr	r2, [pc, #36]	; (80094b0 <vPortSetupTimerInterrupt+0x44>)
 800948a:	3b01      	subs	r3, #1
 800948c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800948e:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <vPortSetupTimerInterrupt+0x34>)
 8009490:	2207      	movs	r2, #7
 8009492:	601a      	str	r2, [r3, #0]
}
 8009494:	bf00      	nop
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	e000e010 	.word	0xe000e010
 80094a4:	e000e018 	.word	0xe000e018
 80094a8:	20000000 	.word	0x20000000
 80094ac:	10624dd3 	.word	0x10624dd3
 80094b0:	e000e014 	.word	0xe000e014

080094b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80094c4 <vPortEnableVFP+0x10>
 80094b8:	6801      	ldr	r1, [r0, #0]
 80094ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80094be:	6001      	str	r1, [r0, #0]
 80094c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094c2:	bf00      	nop
 80094c4:	e000ed88 	.word	0xe000ed88

080094c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094ce:	f3ef 8305 	mrs	r3, IPSR
 80094d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b0f      	cmp	r3, #15
 80094d8:	d914      	bls.n	8009504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094da:	4a17      	ldr	r2, [pc, #92]	; (8009538 <vPortValidateInterruptPriority+0x70>)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4413      	add	r3, r2
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094e4:	4b15      	ldr	r3, [pc, #84]	; (800953c <vPortValidateInterruptPriority+0x74>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	7afa      	ldrb	r2, [r7, #11]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d20a      	bcs.n	8009504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	607b      	str	r3, [r7, #4]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009504:	4b0e      	ldr	r3, [pc, #56]	; (8009540 <vPortValidateInterruptPriority+0x78>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800950c:	4b0d      	ldr	r3, [pc, #52]	; (8009544 <vPortValidateInterruptPriority+0x7c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	429a      	cmp	r2, r3
 8009512:	d90a      	bls.n	800952a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	603b      	str	r3, [r7, #0]
}
 8009526:	bf00      	nop
 8009528:	e7fe      	b.n	8009528 <vPortValidateInterruptPriority+0x60>
	}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	e000e3f0 	.word	0xe000e3f0
 800953c:	20000eec 	.word	0x20000eec
 8009540:	e000ed0c 	.word	0xe000ed0c
 8009544:	20000ef0 	.word	0x20000ef0

08009548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08a      	sub	sp, #40	; 0x28
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009550:	2300      	movs	r3, #0
 8009552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009554:	f7fe fd9a 	bl	800808c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009558:	4b5b      	ldr	r3, [pc, #364]	; (80096c8 <pvPortMalloc+0x180>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009560:	f000 f920 	bl	80097a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009564:	4b59      	ldr	r3, [pc, #356]	; (80096cc <pvPortMalloc+0x184>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4013      	ands	r3, r2
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 8093 	bne.w	8009698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d01d      	beq.n	80095b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009578:	2208      	movs	r2, #8
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4413      	add	r3, r2
 800957e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b00      	cmp	r3, #0
 8009588:	d014      	beq.n	80095b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f023 0307 	bic.w	r3, r3, #7
 8009590:	3308      	adds	r3, #8
 8009592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f003 0307 	and.w	r3, r3, #7
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00a      	beq.n	80095b4 <pvPortMalloc+0x6c>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	617b      	str	r3, [r7, #20]
}
 80095b0:	bf00      	nop
 80095b2:	e7fe      	b.n	80095b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d06e      	beq.n	8009698 <pvPortMalloc+0x150>
 80095ba:	4b45      	ldr	r3, [pc, #276]	; (80096d0 <pvPortMalloc+0x188>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d869      	bhi.n	8009698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095c4:	4b43      	ldr	r3, [pc, #268]	; (80096d4 <pvPortMalloc+0x18c>)
 80095c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095c8:	4b42      	ldr	r3, [pc, #264]	; (80096d4 <pvPortMalloc+0x18c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095ce:	e004      	b.n	80095da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d903      	bls.n	80095ec <pvPortMalloc+0xa4>
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1f1      	bne.n	80095d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095ec:	4b36      	ldr	r3, [pc, #216]	; (80096c8 <pvPortMalloc+0x180>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d050      	beq.n	8009698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2208      	movs	r2, #8
 80095fc:	4413      	add	r3, r2
 80095fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	2308      	movs	r3, #8
 8009612:	005b      	lsls	r3, r3, #1
 8009614:	429a      	cmp	r2, r3
 8009616:	d91f      	bls.n	8009658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4413      	add	r3, r2
 800961e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00a      	beq.n	8009640 <pvPortMalloc+0xf8>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	613b      	str	r3, [r7, #16]
}
 800963c:	bf00      	nop
 800963e:	e7fe      	b.n	800963e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	1ad2      	subs	r2, r2, r3
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009652:	69b8      	ldr	r0, [r7, #24]
 8009654:	f000 f908 	bl	8009868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009658:	4b1d      	ldr	r3, [pc, #116]	; (80096d0 <pvPortMalloc+0x188>)
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	4a1b      	ldr	r2, [pc, #108]	; (80096d0 <pvPortMalloc+0x188>)
 8009664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009666:	4b1a      	ldr	r3, [pc, #104]	; (80096d0 <pvPortMalloc+0x188>)
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	4b1b      	ldr	r3, [pc, #108]	; (80096d8 <pvPortMalloc+0x190>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	429a      	cmp	r2, r3
 8009670:	d203      	bcs.n	800967a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009672:	4b17      	ldr	r3, [pc, #92]	; (80096d0 <pvPortMalloc+0x188>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a18      	ldr	r2, [pc, #96]	; (80096d8 <pvPortMalloc+0x190>)
 8009678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	4b13      	ldr	r3, [pc, #76]	; (80096cc <pvPortMalloc+0x184>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	431a      	orrs	r2, r3
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800968e:	4b13      	ldr	r3, [pc, #76]	; (80096dc <pvPortMalloc+0x194>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3301      	adds	r3, #1
 8009694:	4a11      	ldr	r2, [pc, #68]	; (80096dc <pvPortMalloc+0x194>)
 8009696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009698:	f7fe fd06 	bl	80080a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <pvPortMalloc+0x174>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	60fb      	str	r3, [r7, #12]
}
 80096b8:	bf00      	nop
 80096ba:	e7fe      	b.n	80096ba <pvPortMalloc+0x172>
	return pvReturn;
 80096bc:	69fb      	ldr	r3, [r7, #28]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3728      	adds	r7, #40	; 0x28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20001ab4 	.word	0x20001ab4
 80096cc:	20001ac8 	.word	0x20001ac8
 80096d0:	20001ab8 	.word	0x20001ab8
 80096d4:	20001aac 	.word	0x20001aac
 80096d8:	20001abc 	.word	0x20001abc
 80096dc:	20001ac0 	.word	0x20001ac0

080096e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d04d      	beq.n	800978e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096f2:	2308      	movs	r3, #8
 80096f4:	425b      	negs	r3, r3
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	4413      	add	r3, r2
 80096fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	4b24      	ldr	r3, [pc, #144]	; (8009798 <vPortFree+0xb8>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4013      	ands	r3, r2
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10a      	bne.n	8009724 <vPortFree+0x44>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	60fb      	str	r3, [r7, #12]
}
 8009720:	bf00      	nop
 8009722:	e7fe      	b.n	8009722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00a      	beq.n	8009742 <vPortFree+0x62>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	60bb      	str	r3, [r7, #8]
}
 800973e:	bf00      	nop
 8009740:	e7fe      	b.n	8009740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	4b14      	ldr	r3, [pc, #80]	; (8009798 <vPortFree+0xb8>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4013      	ands	r3, r2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01e      	beq.n	800978e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d11a      	bne.n	800978e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	4b0e      	ldr	r3, [pc, #56]	; (8009798 <vPortFree+0xb8>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	43db      	mvns	r3, r3
 8009762:	401a      	ands	r2, r3
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009768:	f7fe fc90 	bl	800808c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	4b0a      	ldr	r3, [pc, #40]	; (800979c <vPortFree+0xbc>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4413      	add	r3, r2
 8009776:	4a09      	ldr	r2, [pc, #36]	; (800979c <vPortFree+0xbc>)
 8009778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800977a:	6938      	ldr	r0, [r7, #16]
 800977c:	f000 f874 	bl	8009868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009780:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <vPortFree+0xc0>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3301      	adds	r3, #1
 8009786:	4a06      	ldr	r2, [pc, #24]	; (80097a0 <vPortFree+0xc0>)
 8009788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800978a:	f7fe fc8d 	bl	80080a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800978e:	bf00      	nop
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20001ac8 	.word	0x20001ac8
 800979c:	20001ab8 	.word	0x20001ab8
 80097a0:	20001ac4 	.word	0x20001ac4

080097a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80097ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097b0:	4b27      	ldr	r3, [pc, #156]	; (8009850 <prvHeapInit+0xac>)
 80097b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00c      	beq.n	80097d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3307      	adds	r3, #7
 80097c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0307 	bic.w	r3, r3, #7
 80097ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	4a1f      	ldr	r2, [pc, #124]	; (8009850 <prvHeapInit+0xac>)
 80097d4:	4413      	add	r3, r2
 80097d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097dc:	4a1d      	ldr	r2, [pc, #116]	; (8009854 <prvHeapInit+0xb0>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097e2:	4b1c      	ldr	r3, [pc, #112]	; (8009854 <prvHeapInit+0xb0>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	4413      	add	r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097f0:	2208      	movs	r2, #8
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	1a9b      	subs	r3, r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f023 0307 	bic.w	r3, r3, #7
 80097fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a15      	ldr	r2, [pc, #84]	; (8009858 <prvHeapInit+0xb4>)
 8009804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009806:	4b14      	ldr	r3, [pc, #80]	; (8009858 <prvHeapInit+0xb4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2200      	movs	r2, #0
 800980c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800980e:	4b12      	ldr	r3, [pc, #72]	; (8009858 <prvHeapInit+0xb4>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2200      	movs	r2, #0
 8009814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	1ad2      	subs	r2, r2, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009824:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <prvHeapInit+0xb4>)
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4a0a      	ldr	r2, [pc, #40]	; (800985c <prvHeapInit+0xb8>)
 8009832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	4a09      	ldr	r2, [pc, #36]	; (8009860 <prvHeapInit+0xbc>)
 800983a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <prvHeapInit+0xc0>)
 800983e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009842:	601a      	str	r2, [r3, #0]
}
 8009844:	bf00      	nop
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	20000ef4 	.word	0x20000ef4
 8009854:	20001aac 	.word	0x20001aac
 8009858:	20001ab4 	.word	0x20001ab4
 800985c:	20001abc 	.word	0x20001abc
 8009860:	20001ab8 	.word	0x20001ab8
 8009864:	20001ac8 	.word	0x20001ac8

08009868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009870:	4b28      	ldr	r3, [pc, #160]	; (8009914 <prvInsertBlockIntoFreeList+0xac>)
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	e002      	b.n	800987c <prvInsertBlockIntoFreeList+0x14>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	429a      	cmp	r2, r3
 8009884:	d8f7      	bhi.n	8009876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	4413      	add	r3, r2
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	429a      	cmp	r2, r3
 8009896:	d108      	bne.n	80098aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	441a      	add	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	441a      	add	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d118      	bne.n	80098f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	4b15      	ldr	r3, [pc, #84]	; (8009918 <prvInsertBlockIntoFreeList+0xb0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d00d      	beq.n	80098e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	441a      	add	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	e008      	b.n	80098f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098e6:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <prvInsertBlockIntoFreeList+0xb0>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	e003      	b.n	80098f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d002      	beq.n	8009906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009906:	bf00      	nop
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20001aac 	.word	0x20001aac
 8009918:	20001ab4 	.word	0x20001ab4

0800991c <__errno>:
 800991c:	4b01      	ldr	r3, [pc, #4]	; (8009924 <__errno+0x8>)
 800991e:	6818      	ldr	r0, [r3, #0]
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20000010 	.word	0x20000010

08009928 <__libc_init_array>:
 8009928:	b570      	push	{r4, r5, r6, lr}
 800992a:	4d0d      	ldr	r5, [pc, #52]	; (8009960 <__libc_init_array+0x38>)
 800992c:	4c0d      	ldr	r4, [pc, #52]	; (8009964 <__libc_init_array+0x3c>)
 800992e:	1b64      	subs	r4, r4, r5
 8009930:	10a4      	asrs	r4, r4, #2
 8009932:	2600      	movs	r6, #0
 8009934:	42a6      	cmp	r6, r4
 8009936:	d109      	bne.n	800994c <__libc_init_array+0x24>
 8009938:	4d0b      	ldr	r5, [pc, #44]	; (8009968 <__libc_init_array+0x40>)
 800993a:	4c0c      	ldr	r4, [pc, #48]	; (800996c <__libc_init_array+0x44>)
 800993c:	f004 fcd2 	bl	800e2e4 <_init>
 8009940:	1b64      	subs	r4, r4, r5
 8009942:	10a4      	asrs	r4, r4, #2
 8009944:	2600      	movs	r6, #0
 8009946:	42a6      	cmp	r6, r4
 8009948:	d105      	bne.n	8009956 <__libc_init_array+0x2e>
 800994a:	bd70      	pop	{r4, r5, r6, pc}
 800994c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009950:	4798      	blx	r3
 8009952:	3601      	adds	r6, #1
 8009954:	e7ee      	b.n	8009934 <__libc_init_array+0xc>
 8009956:	f855 3b04 	ldr.w	r3, [r5], #4
 800995a:	4798      	blx	r3
 800995c:	3601      	adds	r6, #1
 800995e:	e7f2      	b.n	8009946 <__libc_init_array+0x1e>
 8009960:	0800eacc 	.word	0x0800eacc
 8009964:	0800eacc 	.word	0x0800eacc
 8009968:	0800eacc 	.word	0x0800eacc
 800996c:	0800ead0 	.word	0x0800ead0

08009970 <memcpy>:
 8009970:	440a      	add	r2, r1
 8009972:	4291      	cmp	r1, r2
 8009974:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009978:	d100      	bne.n	800997c <memcpy+0xc>
 800997a:	4770      	bx	lr
 800997c:	b510      	push	{r4, lr}
 800997e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009986:	4291      	cmp	r1, r2
 8009988:	d1f9      	bne.n	800997e <memcpy+0xe>
 800998a:	bd10      	pop	{r4, pc}

0800998c <memset>:
 800998c:	4402      	add	r2, r0
 800998e:	4603      	mov	r3, r0
 8009990:	4293      	cmp	r3, r2
 8009992:	d100      	bne.n	8009996 <memset+0xa>
 8009994:	4770      	bx	lr
 8009996:	f803 1b01 	strb.w	r1, [r3], #1
 800999a:	e7f9      	b.n	8009990 <memset+0x4>

0800999c <__cvt>:
 800999c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099a0:	ec55 4b10 	vmov	r4, r5, d0
 80099a4:	2d00      	cmp	r5, #0
 80099a6:	460e      	mov	r6, r1
 80099a8:	4619      	mov	r1, r3
 80099aa:	462b      	mov	r3, r5
 80099ac:	bfbb      	ittet	lt
 80099ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80099b2:	461d      	movlt	r5, r3
 80099b4:	2300      	movge	r3, #0
 80099b6:	232d      	movlt	r3, #45	; 0x2d
 80099b8:	700b      	strb	r3, [r1, #0]
 80099ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099c0:	4691      	mov	r9, r2
 80099c2:	f023 0820 	bic.w	r8, r3, #32
 80099c6:	bfbc      	itt	lt
 80099c8:	4622      	movlt	r2, r4
 80099ca:	4614      	movlt	r4, r2
 80099cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099d0:	d005      	beq.n	80099de <__cvt+0x42>
 80099d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80099d6:	d100      	bne.n	80099da <__cvt+0x3e>
 80099d8:	3601      	adds	r6, #1
 80099da:	2102      	movs	r1, #2
 80099dc:	e000      	b.n	80099e0 <__cvt+0x44>
 80099de:	2103      	movs	r1, #3
 80099e0:	ab03      	add	r3, sp, #12
 80099e2:	9301      	str	r3, [sp, #4]
 80099e4:	ab02      	add	r3, sp, #8
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	ec45 4b10 	vmov	d0, r4, r5
 80099ec:	4653      	mov	r3, sl
 80099ee:	4632      	mov	r2, r6
 80099f0:	f001 ff02 	bl	800b7f8 <_dtoa_r>
 80099f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80099f8:	4607      	mov	r7, r0
 80099fa:	d102      	bne.n	8009a02 <__cvt+0x66>
 80099fc:	f019 0f01 	tst.w	r9, #1
 8009a00:	d022      	beq.n	8009a48 <__cvt+0xac>
 8009a02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a06:	eb07 0906 	add.w	r9, r7, r6
 8009a0a:	d110      	bne.n	8009a2e <__cvt+0x92>
 8009a0c:	783b      	ldrb	r3, [r7, #0]
 8009a0e:	2b30      	cmp	r3, #48	; 0x30
 8009a10:	d10a      	bne.n	8009a28 <__cvt+0x8c>
 8009a12:	2200      	movs	r2, #0
 8009a14:	2300      	movs	r3, #0
 8009a16:	4620      	mov	r0, r4
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f7f7 f855 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a1e:	b918      	cbnz	r0, 8009a28 <__cvt+0x8c>
 8009a20:	f1c6 0601 	rsb	r6, r6, #1
 8009a24:	f8ca 6000 	str.w	r6, [sl]
 8009a28:	f8da 3000 	ldr.w	r3, [sl]
 8009a2c:	4499      	add	r9, r3
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2300      	movs	r3, #0
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f7f7 f847 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a3a:	b108      	cbz	r0, 8009a40 <__cvt+0xa4>
 8009a3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a40:	2230      	movs	r2, #48	; 0x30
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	454b      	cmp	r3, r9
 8009a46:	d307      	bcc.n	8009a58 <__cvt+0xbc>
 8009a48:	9b03      	ldr	r3, [sp, #12]
 8009a4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a4c:	1bdb      	subs	r3, r3, r7
 8009a4e:	4638      	mov	r0, r7
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	b004      	add	sp, #16
 8009a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a58:	1c59      	adds	r1, r3, #1
 8009a5a:	9103      	str	r1, [sp, #12]
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	e7f0      	b.n	8009a42 <__cvt+0xa6>

08009a60 <__exponent>:
 8009a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a62:	4603      	mov	r3, r0
 8009a64:	2900      	cmp	r1, #0
 8009a66:	bfb8      	it	lt
 8009a68:	4249      	neglt	r1, r1
 8009a6a:	f803 2b02 	strb.w	r2, [r3], #2
 8009a6e:	bfb4      	ite	lt
 8009a70:	222d      	movlt	r2, #45	; 0x2d
 8009a72:	222b      	movge	r2, #43	; 0x2b
 8009a74:	2909      	cmp	r1, #9
 8009a76:	7042      	strb	r2, [r0, #1]
 8009a78:	dd2a      	ble.n	8009ad0 <__exponent+0x70>
 8009a7a:	f10d 0407 	add.w	r4, sp, #7
 8009a7e:	46a4      	mov	ip, r4
 8009a80:	270a      	movs	r7, #10
 8009a82:	46a6      	mov	lr, r4
 8009a84:	460a      	mov	r2, r1
 8009a86:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a8a:	fb07 1516 	mls	r5, r7, r6, r1
 8009a8e:	3530      	adds	r5, #48	; 0x30
 8009a90:	2a63      	cmp	r2, #99	; 0x63
 8009a92:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009a96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	dcf1      	bgt.n	8009a82 <__exponent+0x22>
 8009a9e:	3130      	adds	r1, #48	; 0x30
 8009aa0:	f1ae 0502 	sub.w	r5, lr, #2
 8009aa4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009aa8:	1c44      	adds	r4, r0, #1
 8009aaa:	4629      	mov	r1, r5
 8009aac:	4561      	cmp	r1, ip
 8009aae:	d30a      	bcc.n	8009ac6 <__exponent+0x66>
 8009ab0:	f10d 0209 	add.w	r2, sp, #9
 8009ab4:	eba2 020e 	sub.w	r2, r2, lr
 8009ab8:	4565      	cmp	r5, ip
 8009aba:	bf88      	it	hi
 8009abc:	2200      	movhi	r2, #0
 8009abe:	4413      	add	r3, r2
 8009ac0:	1a18      	subs	r0, r3, r0
 8009ac2:	b003      	add	sp, #12
 8009ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ace:	e7ed      	b.n	8009aac <__exponent+0x4c>
 8009ad0:	2330      	movs	r3, #48	; 0x30
 8009ad2:	3130      	adds	r1, #48	; 0x30
 8009ad4:	7083      	strb	r3, [r0, #2]
 8009ad6:	70c1      	strb	r1, [r0, #3]
 8009ad8:	1d03      	adds	r3, r0, #4
 8009ada:	e7f1      	b.n	8009ac0 <__exponent+0x60>

08009adc <_printf_float>:
 8009adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	ed2d 8b02 	vpush	{d8}
 8009ae4:	b08d      	sub	sp, #52	; 0x34
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009aec:	4616      	mov	r6, r2
 8009aee:	461f      	mov	r7, r3
 8009af0:	4605      	mov	r5, r0
 8009af2:	f003 f993 	bl	800ce1c <_localeconv_r>
 8009af6:	f8d0 a000 	ldr.w	sl, [r0]
 8009afa:	4650      	mov	r0, sl
 8009afc:	f7f6 fb68 	bl	80001d0 <strlen>
 8009b00:	2300      	movs	r3, #0
 8009b02:	930a      	str	r3, [sp, #40]	; 0x28
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	9305      	str	r3, [sp, #20]
 8009b08:	f8d8 3000 	ldr.w	r3, [r8]
 8009b0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009b10:	3307      	adds	r3, #7
 8009b12:	f023 0307 	bic.w	r3, r3, #7
 8009b16:	f103 0208 	add.w	r2, r3, #8
 8009b1a:	f8c8 2000 	str.w	r2, [r8]
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b2e:	9307      	str	r3, [sp, #28]
 8009b30:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b34:	ee08 0a10 	vmov	s16, r0
 8009b38:	4b9f      	ldr	r3, [pc, #636]	; (8009db8 <_printf_float+0x2dc>)
 8009b3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b42:	f7f6 fff3 	bl	8000b2c <__aeabi_dcmpun>
 8009b46:	bb88      	cbnz	r0, 8009bac <_printf_float+0xd0>
 8009b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b4c:	4b9a      	ldr	r3, [pc, #616]	; (8009db8 <_printf_float+0x2dc>)
 8009b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b52:	f7f6 ffcd 	bl	8000af0 <__aeabi_dcmple>
 8009b56:	bb48      	cbnz	r0, 8009bac <_printf_float+0xd0>
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	4649      	mov	r1, r9
 8009b60:	f7f6 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8009b64:	b110      	cbz	r0, 8009b6c <_printf_float+0x90>
 8009b66:	232d      	movs	r3, #45	; 0x2d
 8009b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b6c:	4b93      	ldr	r3, [pc, #588]	; (8009dbc <_printf_float+0x2e0>)
 8009b6e:	4894      	ldr	r0, [pc, #592]	; (8009dc0 <_printf_float+0x2e4>)
 8009b70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b74:	bf94      	ite	ls
 8009b76:	4698      	movls	r8, r3
 8009b78:	4680      	movhi	r8, r0
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	6123      	str	r3, [r4, #16]
 8009b7e:	9b05      	ldr	r3, [sp, #20]
 8009b80:	f023 0204 	bic.w	r2, r3, #4
 8009b84:	6022      	str	r2, [r4, #0]
 8009b86:	f04f 0900 	mov.w	r9, #0
 8009b8a:	9700      	str	r7, [sp, #0]
 8009b8c:	4633      	mov	r3, r6
 8009b8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b90:	4621      	mov	r1, r4
 8009b92:	4628      	mov	r0, r5
 8009b94:	f000 f9d8 	bl	8009f48 <_printf_common>
 8009b98:	3001      	adds	r0, #1
 8009b9a:	f040 8090 	bne.w	8009cbe <_printf_float+0x1e2>
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ba2:	b00d      	add	sp, #52	; 0x34
 8009ba4:	ecbd 8b02 	vpop	{d8}
 8009ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bac:	4642      	mov	r2, r8
 8009bae:	464b      	mov	r3, r9
 8009bb0:	4640      	mov	r0, r8
 8009bb2:	4649      	mov	r1, r9
 8009bb4:	f7f6 ffba 	bl	8000b2c <__aeabi_dcmpun>
 8009bb8:	b140      	cbz	r0, 8009bcc <_printf_float+0xf0>
 8009bba:	464b      	mov	r3, r9
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	bfbc      	itt	lt
 8009bc0:	232d      	movlt	r3, #45	; 0x2d
 8009bc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009bc6:	487f      	ldr	r0, [pc, #508]	; (8009dc4 <_printf_float+0x2e8>)
 8009bc8:	4b7f      	ldr	r3, [pc, #508]	; (8009dc8 <_printf_float+0x2ec>)
 8009bca:	e7d1      	b.n	8009b70 <_printf_float+0x94>
 8009bcc:	6863      	ldr	r3, [r4, #4]
 8009bce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009bd2:	9206      	str	r2, [sp, #24]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	d13f      	bne.n	8009c58 <_printf_float+0x17c>
 8009bd8:	2306      	movs	r3, #6
 8009bda:	6063      	str	r3, [r4, #4]
 8009bdc:	9b05      	ldr	r3, [sp, #20]
 8009bde:	6861      	ldr	r1, [r4, #4]
 8009be0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009be4:	2300      	movs	r3, #0
 8009be6:	9303      	str	r3, [sp, #12]
 8009be8:	ab0a      	add	r3, sp, #40	; 0x28
 8009bea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009bee:	ab09      	add	r3, sp, #36	; 0x24
 8009bf0:	ec49 8b10 	vmov	d0, r8, r9
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	6022      	str	r2, [r4, #0]
 8009bf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	f7ff fecd 	bl	800999c <__cvt>
 8009c02:	9b06      	ldr	r3, [sp, #24]
 8009c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c06:	2b47      	cmp	r3, #71	; 0x47
 8009c08:	4680      	mov	r8, r0
 8009c0a:	d108      	bne.n	8009c1e <_printf_float+0x142>
 8009c0c:	1cc8      	adds	r0, r1, #3
 8009c0e:	db02      	blt.n	8009c16 <_printf_float+0x13a>
 8009c10:	6863      	ldr	r3, [r4, #4]
 8009c12:	4299      	cmp	r1, r3
 8009c14:	dd41      	ble.n	8009c9a <_printf_float+0x1be>
 8009c16:	f1ab 0b02 	sub.w	fp, fp, #2
 8009c1a:	fa5f fb8b 	uxtb.w	fp, fp
 8009c1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c22:	d820      	bhi.n	8009c66 <_printf_float+0x18a>
 8009c24:	3901      	subs	r1, #1
 8009c26:	465a      	mov	r2, fp
 8009c28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c2c:	9109      	str	r1, [sp, #36]	; 0x24
 8009c2e:	f7ff ff17 	bl	8009a60 <__exponent>
 8009c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c34:	1813      	adds	r3, r2, r0
 8009c36:	2a01      	cmp	r2, #1
 8009c38:	4681      	mov	r9, r0
 8009c3a:	6123      	str	r3, [r4, #16]
 8009c3c:	dc02      	bgt.n	8009c44 <_printf_float+0x168>
 8009c3e:	6822      	ldr	r2, [r4, #0]
 8009c40:	07d2      	lsls	r2, r2, #31
 8009c42:	d501      	bpl.n	8009c48 <_printf_float+0x16c>
 8009c44:	3301      	adds	r3, #1
 8009c46:	6123      	str	r3, [r4, #16]
 8009c48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d09c      	beq.n	8009b8a <_printf_float+0xae>
 8009c50:	232d      	movs	r3, #45	; 0x2d
 8009c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c56:	e798      	b.n	8009b8a <_printf_float+0xae>
 8009c58:	9a06      	ldr	r2, [sp, #24]
 8009c5a:	2a47      	cmp	r2, #71	; 0x47
 8009c5c:	d1be      	bne.n	8009bdc <_printf_float+0x100>
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1bc      	bne.n	8009bdc <_printf_float+0x100>
 8009c62:	2301      	movs	r3, #1
 8009c64:	e7b9      	b.n	8009bda <_printf_float+0xfe>
 8009c66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c6a:	d118      	bne.n	8009c9e <_printf_float+0x1c2>
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	6863      	ldr	r3, [r4, #4]
 8009c70:	dd0b      	ble.n	8009c8a <_printf_float+0x1ae>
 8009c72:	6121      	str	r1, [r4, #16]
 8009c74:	b913      	cbnz	r3, 8009c7c <_printf_float+0x1a0>
 8009c76:	6822      	ldr	r2, [r4, #0]
 8009c78:	07d0      	lsls	r0, r2, #31
 8009c7a:	d502      	bpl.n	8009c82 <_printf_float+0x1a6>
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	440b      	add	r3, r1
 8009c80:	6123      	str	r3, [r4, #16]
 8009c82:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c84:	f04f 0900 	mov.w	r9, #0
 8009c88:	e7de      	b.n	8009c48 <_printf_float+0x16c>
 8009c8a:	b913      	cbnz	r3, 8009c92 <_printf_float+0x1b6>
 8009c8c:	6822      	ldr	r2, [r4, #0]
 8009c8e:	07d2      	lsls	r2, r2, #31
 8009c90:	d501      	bpl.n	8009c96 <_printf_float+0x1ba>
 8009c92:	3302      	adds	r3, #2
 8009c94:	e7f4      	b.n	8009c80 <_printf_float+0x1a4>
 8009c96:	2301      	movs	r3, #1
 8009c98:	e7f2      	b.n	8009c80 <_printf_float+0x1a4>
 8009c9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca0:	4299      	cmp	r1, r3
 8009ca2:	db05      	blt.n	8009cb0 <_printf_float+0x1d4>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	6121      	str	r1, [r4, #16]
 8009ca8:	07d8      	lsls	r0, r3, #31
 8009caa:	d5ea      	bpl.n	8009c82 <_printf_float+0x1a6>
 8009cac:	1c4b      	adds	r3, r1, #1
 8009cae:	e7e7      	b.n	8009c80 <_printf_float+0x1a4>
 8009cb0:	2900      	cmp	r1, #0
 8009cb2:	bfd4      	ite	le
 8009cb4:	f1c1 0202 	rsble	r2, r1, #2
 8009cb8:	2201      	movgt	r2, #1
 8009cba:	4413      	add	r3, r2
 8009cbc:	e7e0      	b.n	8009c80 <_printf_float+0x1a4>
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	055a      	lsls	r2, r3, #21
 8009cc2:	d407      	bmi.n	8009cd4 <_printf_float+0x1f8>
 8009cc4:	6923      	ldr	r3, [r4, #16]
 8009cc6:	4642      	mov	r2, r8
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	d12c      	bne.n	8009d2c <_printf_float+0x250>
 8009cd2:	e764      	b.n	8009b9e <_printf_float+0xc2>
 8009cd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cd8:	f240 80e0 	bls.w	8009e9c <_printf_float+0x3c0>
 8009cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f7f6 fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d034      	beq.n	8009d56 <_printf_float+0x27a>
 8009cec:	4a37      	ldr	r2, [pc, #220]	; (8009dcc <_printf_float+0x2f0>)
 8009cee:	2301      	movs	r3, #1
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f43f af51 	beq.w	8009b9e <_printf_float+0xc2>
 8009cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d00:	429a      	cmp	r2, r3
 8009d02:	db02      	blt.n	8009d0a <_printf_float+0x22e>
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	07d8      	lsls	r0, r3, #31
 8009d08:	d510      	bpl.n	8009d2c <_printf_float+0x250>
 8009d0a:	ee18 3a10 	vmov	r3, s16
 8009d0e:	4652      	mov	r2, sl
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	3001      	adds	r0, #1
 8009d18:	f43f af41 	beq.w	8009b9e <_printf_float+0xc2>
 8009d1c:	f04f 0800 	mov.w	r8, #0
 8009d20:	f104 091a 	add.w	r9, r4, #26
 8009d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d26:	3b01      	subs	r3, #1
 8009d28:	4543      	cmp	r3, r8
 8009d2a:	dc09      	bgt.n	8009d40 <_printf_float+0x264>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	079b      	lsls	r3, r3, #30
 8009d30:	f100 8105 	bmi.w	8009f3e <_printf_float+0x462>
 8009d34:	68e0      	ldr	r0, [r4, #12]
 8009d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d38:	4298      	cmp	r0, r3
 8009d3a:	bfb8      	it	lt
 8009d3c:	4618      	movlt	r0, r3
 8009d3e:	e730      	b.n	8009ba2 <_printf_float+0xc6>
 8009d40:	2301      	movs	r3, #1
 8009d42:	464a      	mov	r2, r9
 8009d44:	4631      	mov	r1, r6
 8009d46:	4628      	mov	r0, r5
 8009d48:	47b8      	blx	r7
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f43f af27 	beq.w	8009b9e <_printf_float+0xc2>
 8009d50:	f108 0801 	add.w	r8, r8, #1
 8009d54:	e7e6      	b.n	8009d24 <_printf_float+0x248>
 8009d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	dc39      	bgt.n	8009dd0 <_printf_float+0x2f4>
 8009d5c:	4a1b      	ldr	r2, [pc, #108]	; (8009dcc <_printf_float+0x2f0>)
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4631      	mov	r1, r6
 8009d62:	4628      	mov	r0, r5
 8009d64:	47b8      	blx	r7
 8009d66:	3001      	adds	r0, #1
 8009d68:	f43f af19 	beq.w	8009b9e <_printf_float+0xc2>
 8009d6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d70:	4313      	orrs	r3, r2
 8009d72:	d102      	bne.n	8009d7a <_printf_float+0x29e>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	07d9      	lsls	r1, r3, #31
 8009d78:	d5d8      	bpl.n	8009d2c <_printf_float+0x250>
 8009d7a:	ee18 3a10 	vmov	r3, s16
 8009d7e:	4652      	mov	r2, sl
 8009d80:	4631      	mov	r1, r6
 8009d82:	4628      	mov	r0, r5
 8009d84:	47b8      	blx	r7
 8009d86:	3001      	adds	r0, #1
 8009d88:	f43f af09 	beq.w	8009b9e <_printf_float+0xc2>
 8009d8c:	f04f 0900 	mov.w	r9, #0
 8009d90:	f104 0a1a 	add.w	sl, r4, #26
 8009d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d96:	425b      	negs	r3, r3
 8009d98:	454b      	cmp	r3, r9
 8009d9a:	dc01      	bgt.n	8009da0 <_printf_float+0x2c4>
 8009d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d9e:	e792      	b.n	8009cc6 <_printf_float+0x1ea>
 8009da0:	2301      	movs	r3, #1
 8009da2:	4652      	mov	r2, sl
 8009da4:	4631      	mov	r1, r6
 8009da6:	4628      	mov	r0, r5
 8009da8:	47b8      	blx	r7
 8009daa:	3001      	adds	r0, #1
 8009dac:	f43f aef7 	beq.w	8009b9e <_printf_float+0xc2>
 8009db0:	f109 0901 	add.w	r9, r9, #1
 8009db4:	e7ee      	b.n	8009d94 <_printf_float+0x2b8>
 8009db6:	bf00      	nop
 8009db8:	7fefffff 	.word	0x7fefffff
 8009dbc:	0800e614 	.word	0x0800e614
 8009dc0:	0800e618 	.word	0x0800e618
 8009dc4:	0800e620 	.word	0x0800e620
 8009dc8:	0800e61c 	.word	0x0800e61c
 8009dcc:	0800e624 	.word	0x0800e624
 8009dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	bfa8      	it	ge
 8009dd8:	461a      	movge	r2, r3
 8009dda:	2a00      	cmp	r2, #0
 8009ddc:	4691      	mov	r9, r2
 8009dde:	dc37      	bgt.n	8009e50 <_printf_float+0x374>
 8009de0:	f04f 0b00 	mov.w	fp, #0
 8009de4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009de8:	f104 021a 	add.w	r2, r4, #26
 8009dec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dee:	9305      	str	r3, [sp, #20]
 8009df0:	eba3 0309 	sub.w	r3, r3, r9
 8009df4:	455b      	cmp	r3, fp
 8009df6:	dc33      	bgt.n	8009e60 <_printf_float+0x384>
 8009df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	db3b      	blt.n	8009e78 <_printf_float+0x39c>
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	07da      	lsls	r2, r3, #31
 8009e04:	d438      	bmi.n	8009e78 <_printf_float+0x39c>
 8009e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e08:	9b05      	ldr	r3, [sp, #20]
 8009e0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	eba2 0901 	sub.w	r9, r2, r1
 8009e12:	4599      	cmp	r9, r3
 8009e14:	bfa8      	it	ge
 8009e16:	4699      	movge	r9, r3
 8009e18:	f1b9 0f00 	cmp.w	r9, #0
 8009e1c:	dc35      	bgt.n	8009e8a <_printf_float+0x3ae>
 8009e1e:	f04f 0800 	mov.w	r8, #0
 8009e22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e26:	f104 0a1a 	add.w	sl, r4, #26
 8009e2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e2e:	1a9b      	subs	r3, r3, r2
 8009e30:	eba3 0309 	sub.w	r3, r3, r9
 8009e34:	4543      	cmp	r3, r8
 8009e36:	f77f af79 	ble.w	8009d2c <_printf_float+0x250>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	4652      	mov	r2, sl
 8009e3e:	4631      	mov	r1, r6
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b8      	blx	r7
 8009e44:	3001      	adds	r0, #1
 8009e46:	f43f aeaa 	beq.w	8009b9e <_printf_float+0xc2>
 8009e4a:	f108 0801 	add.w	r8, r8, #1
 8009e4e:	e7ec      	b.n	8009e2a <_printf_float+0x34e>
 8009e50:	4613      	mov	r3, r2
 8009e52:	4631      	mov	r1, r6
 8009e54:	4642      	mov	r2, r8
 8009e56:	4628      	mov	r0, r5
 8009e58:	47b8      	blx	r7
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	d1c0      	bne.n	8009de0 <_printf_float+0x304>
 8009e5e:	e69e      	b.n	8009b9e <_printf_float+0xc2>
 8009e60:	2301      	movs	r3, #1
 8009e62:	4631      	mov	r1, r6
 8009e64:	4628      	mov	r0, r5
 8009e66:	9205      	str	r2, [sp, #20]
 8009e68:	47b8      	blx	r7
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	f43f ae97 	beq.w	8009b9e <_printf_float+0xc2>
 8009e70:	9a05      	ldr	r2, [sp, #20]
 8009e72:	f10b 0b01 	add.w	fp, fp, #1
 8009e76:	e7b9      	b.n	8009dec <_printf_float+0x310>
 8009e78:	ee18 3a10 	vmov	r3, s16
 8009e7c:	4652      	mov	r2, sl
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4628      	mov	r0, r5
 8009e82:	47b8      	blx	r7
 8009e84:	3001      	adds	r0, #1
 8009e86:	d1be      	bne.n	8009e06 <_printf_float+0x32a>
 8009e88:	e689      	b.n	8009b9e <_printf_float+0xc2>
 8009e8a:	9a05      	ldr	r2, [sp, #20]
 8009e8c:	464b      	mov	r3, r9
 8009e8e:	4442      	add	r2, r8
 8009e90:	4631      	mov	r1, r6
 8009e92:	4628      	mov	r0, r5
 8009e94:	47b8      	blx	r7
 8009e96:	3001      	adds	r0, #1
 8009e98:	d1c1      	bne.n	8009e1e <_printf_float+0x342>
 8009e9a:	e680      	b.n	8009b9e <_printf_float+0xc2>
 8009e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e9e:	2a01      	cmp	r2, #1
 8009ea0:	dc01      	bgt.n	8009ea6 <_printf_float+0x3ca>
 8009ea2:	07db      	lsls	r3, r3, #31
 8009ea4:	d538      	bpl.n	8009f18 <_printf_float+0x43c>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	4642      	mov	r2, r8
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4628      	mov	r0, r5
 8009eae:	47b8      	blx	r7
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	f43f ae74 	beq.w	8009b9e <_printf_float+0xc2>
 8009eb6:	ee18 3a10 	vmov	r3, s16
 8009eba:	4652      	mov	r2, sl
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f43f ae6b 	beq.w	8009b9e <_printf_float+0xc2>
 8009ec8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ecc:	2200      	movs	r2, #0
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f7f6 fdfa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ed4:	b9d8      	cbnz	r0, 8009f0e <_printf_float+0x432>
 8009ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed8:	f108 0201 	add.w	r2, r8, #1
 8009edc:	3b01      	subs	r3, #1
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b8      	blx	r7
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d10e      	bne.n	8009f06 <_printf_float+0x42a>
 8009ee8:	e659      	b.n	8009b9e <_printf_float+0xc2>
 8009eea:	2301      	movs	r3, #1
 8009eec:	4652      	mov	r2, sl
 8009eee:	4631      	mov	r1, r6
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b8      	blx	r7
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	f43f ae52 	beq.w	8009b9e <_printf_float+0xc2>
 8009efa:	f108 0801 	add.w	r8, r8, #1
 8009efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f00:	3b01      	subs	r3, #1
 8009f02:	4543      	cmp	r3, r8
 8009f04:	dcf1      	bgt.n	8009eea <_printf_float+0x40e>
 8009f06:	464b      	mov	r3, r9
 8009f08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f0c:	e6dc      	b.n	8009cc8 <_printf_float+0x1ec>
 8009f0e:	f04f 0800 	mov.w	r8, #0
 8009f12:	f104 0a1a 	add.w	sl, r4, #26
 8009f16:	e7f2      	b.n	8009efe <_printf_float+0x422>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	4642      	mov	r2, r8
 8009f1c:	e7df      	b.n	8009ede <_printf_float+0x402>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	464a      	mov	r2, r9
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	f43f ae38 	beq.w	8009b9e <_printf_float+0xc2>
 8009f2e:	f108 0801 	add.w	r8, r8, #1
 8009f32:	68e3      	ldr	r3, [r4, #12]
 8009f34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f36:	1a5b      	subs	r3, r3, r1
 8009f38:	4543      	cmp	r3, r8
 8009f3a:	dcf0      	bgt.n	8009f1e <_printf_float+0x442>
 8009f3c:	e6fa      	b.n	8009d34 <_printf_float+0x258>
 8009f3e:	f04f 0800 	mov.w	r8, #0
 8009f42:	f104 0919 	add.w	r9, r4, #25
 8009f46:	e7f4      	b.n	8009f32 <_printf_float+0x456>

08009f48 <_printf_common>:
 8009f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f4c:	4616      	mov	r6, r2
 8009f4e:	4699      	mov	r9, r3
 8009f50:	688a      	ldr	r2, [r1, #8]
 8009f52:	690b      	ldr	r3, [r1, #16]
 8009f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	bfb8      	it	lt
 8009f5c:	4613      	movlt	r3, r2
 8009f5e:	6033      	str	r3, [r6, #0]
 8009f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f64:	4607      	mov	r7, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	b10a      	cbz	r2, 8009f6e <_printf_common+0x26>
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	6033      	str	r3, [r6, #0]
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	0699      	lsls	r1, r3, #26
 8009f72:	bf42      	ittt	mi
 8009f74:	6833      	ldrmi	r3, [r6, #0]
 8009f76:	3302      	addmi	r3, #2
 8009f78:	6033      	strmi	r3, [r6, #0]
 8009f7a:	6825      	ldr	r5, [r4, #0]
 8009f7c:	f015 0506 	ands.w	r5, r5, #6
 8009f80:	d106      	bne.n	8009f90 <_printf_common+0x48>
 8009f82:	f104 0a19 	add.w	sl, r4, #25
 8009f86:	68e3      	ldr	r3, [r4, #12]
 8009f88:	6832      	ldr	r2, [r6, #0]
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	42ab      	cmp	r3, r5
 8009f8e:	dc26      	bgt.n	8009fde <_printf_common+0x96>
 8009f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f94:	1e13      	subs	r3, r2, #0
 8009f96:	6822      	ldr	r2, [r4, #0]
 8009f98:	bf18      	it	ne
 8009f9a:	2301      	movne	r3, #1
 8009f9c:	0692      	lsls	r2, r2, #26
 8009f9e:	d42b      	bmi.n	8009ff8 <_printf_common+0xb0>
 8009fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	47c0      	blx	r8
 8009faa:	3001      	adds	r0, #1
 8009fac:	d01e      	beq.n	8009fec <_printf_common+0xa4>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	68e5      	ldr	r5, [r4, #12]
 8009fb2:	6832      	ldr	r2, [r6, #0]
 8009fb4:	f003 0306 	and.w	r3, r3, #6
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	bf08      	it	eq
 8009fbc:	1aad      	subeq	r5, r5, r2
 8009fbe:	68a3      	ldr	r3, [r4, #8]
 8009fc0:	6922      	ldr	r2, [r4, #16]
 8009fc2:	bf0c      	ite	eq
 8009fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fc8:	2500      	movne	r5, #0
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	bfc4      	itt	gt
 8009fce:	1a9b      	subgt	r3, r3, r2
 8009fd0:	18ed      	addgt	r5, r5, r3
 8009fd2:	2600      	movs	r6, #0
 8009fd4:	341a      	adds	r4, #26
 8009fd6:	42b5      	cmp	r5, r6
 8009fd8:	d11a      	bne.n	800a010 <_printf_common+0xc8>
 8009fda:	2000      	movs	r0, #0
 8009fdc:	e008      	b.n	8009ff0 <_printf_common+0xa8>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	47c0      	blx	r8
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d103      	bne.n	8009ff4 <_printf_common+0xac>
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff4:	3501      	adds	r5, #1
 8009ff6:	e7c6      	b.n	8009f86 <_printf_common+0x3e>
 8009ff8:	18e1      	adds	r1, r4, r3
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	2030      	movs	r0, #48	; 0x30
 8009ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a002:	4422      	add	r2, r4
 800a004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a00c:	3302      	adds	r3, #2
 800a00e:	e7c7      	b.n	8009fa0 <_printf_common+0x58>
 800a010:	2301      	movs	r3, #1
 800a012:	4622      	mov	r2, r4
 800a014:	4649      	mov	r1, r9
 800a016:	4638      	mov	r0, r7
 800a018:	47c0      	blx	r8
 800a01a:	3001      	adds	r0, #1
 800a01c:	d0e6      	beq.n	8009fec <_printf_common+0xa4>
 800a01e:	3601      	adds	r6, #1
 800a020:	e7d9      	b.n	8009fd6 <_printf_common+0x8e>
	...

0800a024 <_printf_i>:
 800a024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a028:	460c      	mov	r4, r1
 800a02a:	4691      	mov	r9, r2
 800a02c:	7e27      	ldrb	r7, [r4, #24]
 800a02e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a030:	2f78      	cmp	r7, #120	; 0x78
 800a032:	4680      	mov	r8, r0
 800a034:	469a      	mov	sl, r3
 800a036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a03a:	d807      	bhi.n	800a04c <_printf_i+0x28>
 800a03c:	2f62      	cmp	r7, #98	; 0x62
 800a03e:	d80a      	bhi.n	800a056 <_printf_i+0x32>
 800a040:	2f00      	cmp	r7, #0
 800a042:	f000 80d8 	beq.w	800a1f6 <_printf_i+0x1d2>
 800a046:	2f58      	cmp	r7, #88	; 0x58
 800a048:	f000 80a3 	beq.w	800a192 <_printf_i+0x16e>
 800a04c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a054:	e03a      	b.n	800a0cc <_printf_i+0xa8>
 800a056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a05a:	2b15      	cmp	r3, #21
 800a05c:	d8f6      	bhi.n	800a04c <_printf_i+0x28>
 800a05e:	a001      	add	r0, pc, #4	; (adr r0, 800a064 <_printf_i+0x40>)
 800a060:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a064:	0800a0bd 	.word	0x0800a0bd
 800a068:	0800a0d1 	.word	0x0800a0d1
 800a06c:	0800a04d 	.word	0x0800a04d
 800a070:	0800a04d 	.word	0x0800a04d
 800a074:	0800a04d 	.word	0x0800a04d
 800a078:	0800a04d 	.word	0x0800a04d
 800a07c:	0800a0d1 	.word	0x0800a0d1
 800a080:	0800a04d 	.word	0x0800a04d
 800a084:	0800a04d 	.word	0x0800a04d
 800a088:	0800a04d 	.word	0x0800a04d
 800a08c:	0800a04d 	.word	0x0800a04d
 800a090:	0800a1dd 	.word	0x0800a1dd
 800a094:	0800a101 	.word	0x0800a101
 800a098:	0800a1bf 	.word	0x0800a1bf
 800a09c:	0800a04d 	.word	0x0800a04d
 800a0a0:	0800a04d 	.word	0x0800a04d
 800a0a4:	0800a1ff 	.word	0x0800a1ff
 800a0a8:	0800a04d 	.word	0x0800a04d
 800a0ac:	0800a101 	.word	0x0800a101
 800a0b0:	0800a04d 	.word	0x0800a04d
 800a0b4:	0800a04d 	.word	0x0800a04d
 800a0b8:	0800a1c7 	.word	0x0800a1c7
 800a0bc:	680b      	ldr	r3, [r1, #0]
 800a0be:	1d1a      	adds	r2, r3, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	600a      	str	r2, [r1, #0]
 800a0c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e0a3      	b.n	800a218 <_printf_i+0x1f4>
 800a0d0:	6825      	ldr	r5, [r4, #0]
 800a0d2:	6808      	ldr	r0, [r1, #0]
 800a0d4:	062e      	lsls	r6, r5, #24
 800a0d6:	f100 0304 	add.w	r3, r0, #4
 800a0da:	d50a      	bpl.n	800a0f2 <_printf_i+0xce>
 800a0dc:	6805      	ldr	r5, [r0, #0]
 800a0de:	600b      	str	r3, [r1, #0]
 800a0e0:	2d00      	cmp	r5, #0
 800a0e2:	da03      	bge.n	800a0ec <_printf_i+0xc8>
 800a0e4:	232d      	movs	r3, #45	; 0x2d
 800a0e6:	426d      	negs	r5, r5
 800a0e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ec:	485e      	ldr	r0, [pc, #376]	; (800a268 <_printf_i+0x244>)
 800a0ee:	230a      	movs	r3, #10
 800a0f0:	e019      	b.n	800a126 <_printf_i+0x102>
 800a0f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a0f6:	6805      	ldr	r5, [r0, #0]
 800a0f8:	600b      	str	r3, [r1, #0]
 800a0fa:	bf18      	it	ne
 800a0fc:	b22d      	sxthne	r5, r5
 800a0fe:	e7ef      	b.n	800a0e0 <_printf_i+0xbc>
 800a100:	680b      	ldr	r3, [r1, #0]
 800a102:	6825      	ldr	r5, [r4, #0]
 800a104:	1d18      	adds	r0, r3, #4
 800a106:	6008      	str	r0, [r1, #0]
 800a108:	0628      	lsls	r0, r5, #24
 800a10a:	d501      	bpl.n	800a110 <_printf_i+0xec>
 800a10c:	681d      	ldr	r5, [r3, #0]
 800a10e:	e002      	b.n	800a116 <_printf_i+0xf2>
 800a110:	0669      	lsls	r1, r5, #25
 800a112:	d5fb      	bpl.n	800a10c <_printf_i+0xe8>
 800a114:	881d      	ldrh	r5, [r3, #0]
 800a116:	4854      	ldr	r0, [pc, #336]	; (800a268 <_printf_i+0x244>)
 800a118:	2f6f      	cmp	r7, #111	; 0x6f
 800a11a:	bf0c      	ite	eq
 800a11c:	2308      	moveq	r3, #8
 800a11e:	230a      	movne	r3, #10
 800a120:	2100      	movs	r1, #0
 800a122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a126:	6866      	ldr	r6, [r4, #4]
 800a128:	60a6      	str	r6, [r4, #8]
 800a12a:	2e00      	cmp	r6, #0
 800a12c:	bfa2      	ittt	ge
 800a12e:	6821      	ldrge	r1, [r4, #0]
 800a130:	f021 0104 	bicge.w	r1, r1, #4
 800a134:	6021      	strge	r1, [r4, #0]
 800a136:	b90d      	cbnz	r5, 800a13c <_printf_i+0x118>
 800a138:	2e00      	cmp	r6, #0
 800a13a:	d04d      	beq.n	800a1d8 <_printf_i+0x1b4>
 800a13c:	4616      	mov	r6, r2
 800a13e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a142:	fb03 5711 	mls	r7, r3, r1, r5
 800a146:	5dc7      	ldrb	r7, [r0, r7]
 800a148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a14c:	462f      	mov	r7, r5
 800a14e:	42bb      	cmp	r3, r7
 800a150:	460d      	mov	r5, r1
 800a152:	d9f4      	bls.n	800a13e <_printf_i+0x11a>
 800a154:	2b08      	cmp	r3, #8
 800a156:	d10b      	bne.n	800a170 <_printf_i+0x14c>
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	07df      	lsls	r7, r3, #31
 800a15c:	d508      	bpl.n	800a170 <_printf_i+0x14c>
 800a15e:	6923      	ldr	r3, [r4, #16]
 800a160:	6861      	ldr	r1, [r4, #4]
 800a162:	4299      	cmp	r1, r3
 800a164:	bfde      	ittt	le
 800a166:	2330      	movle	r3, #48	; 0x30
 800a168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a16c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a170:	1b92      	subs	r2, r2, r6
 800a172:	6122      	str	r2, [r4, #16]
 800a174:	f8cd a000 	str.w	sl, [sp]
 800a178:	464b      	mov	r3, r9
 800a17a:	aa03      	add	r2, sp, #12
 800a17c:	4621      	mov	r1, r4
 800a17e:	4640      	mov	r0, r8
 800a180:	f7ff fee2 	bl	8009f48 <_printf_common>
 800a184:	3001      	adds	r0, #1
 800a186:	d14c      	bne.n	800a222 <_printf_i+0x1fe>
 800a188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a18c:	b004      	add	sp, #16
 800a18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a192:	4835      	ldr	r0, [pc, #212]	; (800a268 <_printf_i+0x244>)
 800a194:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	680e      	ldr	r6, [r1, #0]
 800a19c:	061f      	lsls	r7, r3, #24
 800a19e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a1a2:	600e      	str	r6, [r1, #0]
 800a1a4:	d514      	bpl.n	800a1d0 <_printf_i+0x1ac>
 800a1a6:	07d9      	lsls	r1, r3, #31
 800a1a8:	bf44      	itt	mi
 800a1aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ae:	6023      	strmi	r3, [r4, #0]
 800a1b0:	b91d      	cbnz	r5, 800a1ba <_printf_i+0x196>
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	f023 0320 	bic.w	r3, r3, #32
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	2310      	movs	r3, #16
 800a1bc:	e7b0      	b.n	800a120 <_printf_i+0xfc>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	f043 0320 	orr.w	r3, r3, #32
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	2378      	movs	r3, #120	; 0x78
 800a1c8:	4828      	ldr	r0, [pc, #160]	; (800a26c <_printf_i+0x248>)
 800a1ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1ce:	e7e3      	b.n	800a198 <_printf_i+0x174>
 800a1d0:	065e      	lsls	r6, r3, #25
 800a1d2:	bf48      	it	mi
 800a1d4:	b2ad      	uxthmi	r5, r5
 800a1d6:	e7e6      	b.n	800a1a6 <_printf_i+0x182>
 800a1d8:	4616      	mov	r6, r2
 800a1da:	e7bb      	b.n	800a154 <_printf_i+0x130>
 800a1dc:	680b      	ldr	r3, [r1, #0]
 800a1de:	6826      	ldr	r6, [r4, #0]
 800a1e0:	6960      	ldr	r0, [r4, #20]
 800a1e2:	1d1d      	adds	r5, r3, #4
 800a1e4:	600d      	str	r5, [r1, #0]
 800a1e6:	0635      	lsls	r5, r6, #24
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	d501      	bpl.n	800a1f0 <_printf_i+0x1cc>
 800a1ec:	6018      	str	r0, [r3, #0]
 800a1ee:	e002      	b.n	800a1f6 <_printf_i+0x1d2>
 800a1f0:	0671      	lsls	r1, r6, #25
 800a1f2:	d5fb      	bpl.n	800a1ec <_printf_i+0x1c8>
 800a1f4:	8018      	strh	r0, [r3, #0]
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	6123      	str	r3, [r4, #16]
 800a1fa:	4616      	mov	r6, r2
 800a1fc:	e7ba      	b.n	800a174 <_printf_i+0x150>
 800a1fe:	680b      	ldr	r3, [r1, #0]
 800a200:	1d1a      	adds	r2, r3, #4
 800a202:	600a      	str	r2, [r1, #0]
 800a204:	681e      	ldr	r6, [r3, #0]
 800a206:	6862      	ldr	r2, [r4, #4]
 800a208:	2100      	movs	r1, #0
 800a20a:	4630      	mov	r0, r6
 800a20c:	f7f5 ffe8 	bl	80001e0 <memchr>
 800a210:	b108      	cbz	r0, 800a216 <_printf_i+0x1f2>
 800a212:	1b80      	subs	r0, r0, r6
 800a214:	6060      	str	r0, [r4, #4]
 800a216:	6863      	ldr	r3, [r4, #4]
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	2300      	movs	r3, #0
 800a21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a220:	e7a8      	b.n	800a174 <_printf_i+0x150>
 800a222:	6923      	ldr	r3, [r4, #16]
 800a224:	4632      	mov	r2, r6
 800a226:	4649      	mov	r1, r9
 800a228:	4640      	mov	r0, r8
 800a22a:	47d0      	blx	sl
 800a22c:	3001      	adds	r0, #1
 800a22e:	d0ab      	beq.n	800a188 <_printf_i+0x164>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	079b      	lsls	r3, r3, #30
 800a234:	d413      	bmi.n	800a25e <_printf_i+0x23a>
 800a236:	68e0      	ldr	r0, [r4, #12]
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	4298      	cmp	r0, r3
 800a23c:	bfb8      	it	lt
 800a23e:	4618      	movlt	r0, r3
 800a240:	e7a4      	b.n	800a18c <_printf_i+0x168>
 800a242:	2301      	movs	r3, #1
 800a244:	4632      	mov	r2, r6
 800a246:	4649      	mov	r1, r9
 800a248:	4640      	mov	r0, r8
 800a24a:	47d0      	blx	sl
 800a24c:	3001      	adds	r0, #1
 800a24e:	d09b      	beq.n	800a188 <_printf_i+0x164>
 800a250:	3501      	adds	r5, #1
 800a252:	68e3      	ldr	r3, [r4, #12]
 800a254:	9903      	ldr	r1, [sp, #12]
 800a256:	1a5b      	subs	r3, r3, r1
 800a258:	42ab      	cmp	r3, r5
 800a25a:	dcf2      	bgt.n	800a242 <_printf_i+0x21e>
 800a25c:	e7eb      	b.n	800a236 <_printf_i+0x212>
 800a25e:	2500      	movs	r5, #0
 800a260:	f104 0619 	add.w	r6, r4, #25
 800a264:	e7f5      	b.n	800a252 <_printf_i+0x22e>
 800a266:	bf00      	nop
 800a268:	0800e626 	.word	0x0800e626
 800a26c:	0800e637 	.word	0x0800e637

0800a270 <_scanf_float>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	b087      	sub	sp, #28
 800a276:	4617      	mov	r7, r2
 800a278:	9303      	str	r3, [sp, #12]
 800a27a:	688b      	ldr	r3, [r1, #8]
 800a27c:	1e5a      	subs	r2, r3, #1
 800a27e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a282:	bf83      	ittte	hi
 800a284:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a288:	195b      	addhi	r3, r3, r5
 800a28a:	9302      	strhi	r3, [sp, #8]
 800a28c:	2300      	movls	r3, #0
 800a28e:	bf86      	itte	hi
 800a290:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a294:	608b      	strhi	r3, [r1, #8]
 800a296:	9302      	strls	r3, [sp, #8]
 800a298:	680b      	ldr	r3, [r1, #0]
 800a29a:	468b      	mov	fp, r1
 800a29c:	2500      	movs	r5, #0
 800a29e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a2a2:	f84b 3b1c 	str.w	r3, [fp], #28
 800a2a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a2aa:	4680      	mov	r8, r0
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	465e      	mov	r6, fp
 800a2b0:	46aa      	mov	sl, r5
 800a2b2:	46a9      	mov	r9, r5
 800a2b4:	9501      	str	r5, [sp, #4]
 800a2b6:	68a2      	ldr	r2, [r4, #8]
 800a2b8:	b152      	cbz	r2, 800a2d0 <_scanf_float+0x60>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b4e      	cmp	r3, #78	; 0x4e
 800a2c0:	d864      	bhi.n	800a38c <_scanf_float+0x11c>
 800a2c2:	2b40      	cmp	r3, #64	; 0x40
 800a2c4:	d83c      	bhi.n	800a340 <_scanf_float+0xd0>
 800a2c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a2ca:	b2c8      	uxtb	r0, r1
 800a2cc:	280e      	cmp	r0, #14
 800a2ce:	d93a      	bls.n	800a346 <_scanf_float+0xd6>
 800a2d0:	f1b9 0f00 	cmp.w	r9, #0
 800a2d4:	d003      	beq.n	800a2de <_scanf_float+0x6e>
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a2e2:	f1ba 0f01 	cmp.w	sl, #1
 800a2e6:	f200 8113 	bhi.w	800a510 <_scanf_float+0x2a0>
 800a2ea:	455e      	cmp	r6, fp
 800a2ec:	f200 8105 	bhi.w	800a4fa <_scanf_float+0x28a>
 800a2f0:	2501      	movs	r5, #1
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	b007      	add	sp, #28
 800a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a2fe:	2a0d      	cmp	r2, #13
 800a300:	d8e6      	bhi.n	800a2d0 <_scanf_float+0x60>
 800a302:	a101      	add	r1, pc, #4	; (adr r1, 800a308 <_scanf_float+0x98>)
 800a304:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a308:	0800a447 	.word	0x0800a447
 800a30c:	0800a2d1 	.word	0x0800a2d1
 800a310:	0800a2d1 	.word	0x0800a2d1
 800a314:	0800a2d1 	.word	0x0800a2d1
 800a318:	0800a4a7 	.word	0x0800a4a7
 800a31c:	0800a47f 	.word	0x0800a47f
 800a320:	0800a2d1 	.word	0x0800a2d1
 800a324:	0800a2d1 	.word	0x0800a2d1
 800a328:	0800a455 	.word	0x0800a455
 800a32c:	0800a2d1 	.word	0x0800a2d1
 800a330:	0800a2d1 	.word	0x0800a2d1
 800a334:	0800a2d1 	.word	0x0800a2d1
 800a338:	0800a2d1 	.word	0x0800a2d1
 800a33c:	0800a40d 	.word	0x0800a40d
 800a340:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a344:	e7db      	b.n	800a2fe <_scanf_float+0x8e>
 800a346:	290e      	cmp	r1, #14
 800a348:	d8c2      	bhi.n	800a2d0 <_scanf_float+0x60>
 800a34a:	a001      	add	r0, pc, #4	; (adr r0, 800a350 <_scanf_float+0xe0>)
 800a34c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a350:	0800a3ff 	.word	0x0800a3ff
 800a354:	0800a2d1 	.word	0x0800a2d1
 800a358:	0800a3ff 	.word	0x0800a3ff
 800a35c:	0800a493 	.word	0x0800a493
 800a360:	0800a2d1 	.word	0x0800a2d1
 800a364:	0800a3ad 	.word	0x0800a3ad
 800a368:	0800a3e9 	.word	0x0800a3e9
 800a36c:	0800a3e9 	.word	0x0800a3e9
 800a370:	0800a3e9 	.word	0x0800a3e9
 800a374:	0800a3e9 	.word	0x0800a3e9
 800a378:	0800a3e9 	.word	0x0800a3e9
 800a37c:	0800a3e9 	.word	0x0800a3e9
 800a380:	0800a3e9 	.word	0x0800a3e9
 800a384:	0800a3e9 	.word	0x0800a3e9
 800a388:	0800a3e9 	.word	0x0800a3e9
 800a38c:	2b6e      	cmp	r3, #110	; 0x6e
 800a38e:	d809      	bhi.n	800a3a4 <_scanf_float+0x134>
 800a390:	2b60      	cmp	r3, #96	; 0x60
 800a392:	d8b2      	bhi.n	800a2fa <_scanf_float+0x8a>
 800a394:	2b54      	cmp	r3, #84	; 0x54
 800a396:	d077      	beq.n	800a488 <_scanf_float+0x218>
 800a398:	2b59      	cmp	r3, #89	; 0x59
 800a39a:	d199      	bne.n	800a2d0 <_scanf_float+0x60>
 800a39c:	2d07      	cmp	r5, #7
 800a39e:	d197      	bne.n	800a2d0 <_scanf_float+0x60>
 800a3a0:	2508      	movs	r5, #8
 800a3a2:	e029      	b.n	800a3f8 <_scanf_float+0x188>
 800a3a4:	2b74      	cmp	r3, #116	; 0x74
 800a3a6:	d06f      	beq.n	800a488 <_scanf_float+0x218>
 800a3a8:	2b79      	cmp	r3, #121	; 0x79
 800a3aa:	e7f6      	b.n	800a39a <_scanf_float+0x12a>
 800a3ac:	6821      	ldr	r1, [r4, #0]
 800a3ae:	05c8      	lsls	r0, r1, #23
 800a3b0:	d51a      	bpl.n	800a3e8 <_scanf_float+0x178>
 800a3b2:	9b02      	ldr	r3, [sp, #8]
 800a3b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a3b8:	6021      	str	r1, [r4, #0]
 800a3ba:	f109 0901 	add.w	r9, r9, #1
 800a3be:	b11b      	cbz	r3, 800a3c8 <_scanf_float+0x158>
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	3201      	adds	r2, #1
 800a3c4:	9302      	str	r3, [sp, #8]
 800a3c6:	60a2      	str	r2, [r4, #8]
 800a3c8:	68a3      	ldr	r3, [r4, #8]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	60a3      	str	r3, [r4, #8]
 800a3ce:	6923      	ldr	r3, [r4, #16]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	6123      	str	r3, [r4, #16]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	607b      	str	r3, [r7, #4]
 800a3dc:	f340 8084 	ble.w	800a4e8 <_scanf_float+0x278>
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	603b      	str	r3, [r7, #0]
 800a3e6:	e766      	b.n	800a2b6 <_scanf_float+0x46>
 800a3e8:	eb1a 0f05 	cmn.w	sl, r5
 800a3ec:	f47f af70 	bne.w	800a2d0 <_scanf_float+0x60>
 800a3f0:	6822      	ldr	r2, [r4, #0]
 800a3f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a3f6:	6022      	str	r2, [r4, #0]
 800a3f8:	f806 3b01 	strb.w	r3, [r6], #1
 800a3fc:	e7e4      	b.n	800a3c8 <_scanf_float+0x158>
 800a3fe:	6822      	ldr	r2, [r4, #0]
 800a400:	0610      	lsls	r0, r2, #24
 800a402:	f57f af65 	bpl.w	800a2d0 <_scanf_float+0x60>
 800a406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a40a:	e7f4      	b.n	800a3f6 <_scanf_float+0x186>
 800a40c:	f1ba 0f00 	cmp.w	sl, #0
 800a410:	d10e      	bne.n	800a430 <_scanf_float+0x1c0>
 800a412:	f1b9 0f00 	cmp.w	r9, #0
 800a416:	d10e      	bne.n	800a436 <_scanf_float+0x1c6>
 800a418:	6822      	ldr	r2, [r4, #0]
 800a41a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a41e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a422:	d108      	bne.n	800a436 <_scanf_float+0x1c6>
 800a424:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a428:	6022      	str	r2, [r4, #0]
 800a42a:	f04f 0a01 	mov.w	sl, #1
 800a42e:	e7e3      	b.n	800a3f8 <_scanf_float+0x188>
 800a430:	f1ba 0f02 	cmp.w	sl, #2
 800a434:	d055      	beq.n	800a4e2 <_scanf_float+0x272>
 800a436:	2d01      	cmp	r5, #1
 800a438:	d002      	beq.n	800a440 <_scanf_float+0x1d0>
 800a43a:	2d04      	cmp	r5, #4
 800a43c:	f47f af48 	bne.w	800a2d0 <_scanf_float+0x60>
 800a440:	3501      	adds	r5, #1
 800a442:	b2ed      	uxtb	r5, r5
 800a444:	e7d8      	b.n	800a3f8 <_scanf_float+0x188>
 800a446:	f1ba 0f01 	cmp.w	sl, #1
 800a44a:	f47f af41 	bne.w	800a2d0 <_scanf_float+0x60>
 800a44e:	f04f 0a02 	mov.w	sl, #2
 800a452:	e7d1      	b.n	800a3f8 <_scanf_float+0x188>
 800a454:	b97d      	cbnz	r5, 800a476 <_scanf_float+0x206>
 800a456:	f1b9 0f00 	cmp.w	r9, #0
 800a45a:	f47f af3c 	bne.w	800a2d6 <_scanf_float+0x66>
 800a45e:	6822      	ldr	r2, [r4, #0]
 800a460:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a464:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a468:	f47f af39 	bne.w	800a2de <_scanf_float+0x6e>
 800a46c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a470:	6022      	str	r2, [r4, #0]
 800a472:	2501      	movs	r5, #1
 800a474:	e7c0      	b.n	800a3f8 <_scanf_float+0x188>
 800a476:	2d03      	cmp	r5, #3
 800a478:	d0e2      	beq.n	800a440 <_scanf_float+0x1d0>
 800a47a:	2d05      	cmp	r5, #5
 800a47c:	e7de      	b.n	800a43c <_scanf_float+0x1cc>
 800a47e:	2d02      	cmp	r5, #2
 800a480:	f47f af26 	bne.w	800a2d0 <_scanf_float+0x60>
 800a484:	2503      	movs	r5, #3
 800a486:	e7b7      	b.n	800a3f8 <_scanf_float+0x188>
 800a488:	2d06      	cmp	r5, #6
 800a48a:	f47f af21 	bne.w	800a2d0 <_scanf_float+0x60>
 800a48e:	2507      	movs	r5, #7
 800a490:	e7b2      	b.n	800a3f8 <_scanf_float+0x188>
 800a492:	6822      	ldr	r2, [r4, #0]
 800a494:	0591      	lsls	r1, r2, #22
 800a496:	f57f af1b 	bpl.w	800a2d0 <_scanf_float+0x60>
 800a49a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a49e:	6022      	str	r2, [r4, #0]
 800a4a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4a4:	e7a8      	b.n	800a3f8 <_scanf_float+0x188>
 800a4a6:	6822      	ldr	r2, [r4, #0]
 800a4a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a4ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a4b0:	d006      	beq.n	800a4c0 <_scanf_float+0x250>
 800a4b2:	0550      	lsls	r0, r2, #21
 800a4b4:	f57f af0c 	bpl.w	800a2d0 <_scanf_float+0x60>
 800a4b8:	f1b9 0f00 	cmp.w	r9, #0
 800a4bc:	f43f af0f 	beq.w	800a2de <_scanf_float+0x6e>
 800a4c0:	0591      	lsls	r1, r2, #22
 800a4c2:	bf58      	it	pl
 800a4c4:	9901      	ldrpl	r1, [sp, #4]
 800a4c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a4ca:	bf58      	it	pl
 800a4cc:	eba9 0101 	subpl.w	r1, r9, r1
 800a4d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a4d4:	bf58      	it	pl
 800a4d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a4da:	6022      	str	r2, [r4, #0]
 800a4dc:	f04f 0900 	mov.w	r9, #0
 800a4e0:	e78a      	b.n	800a3f8 <_scanf_float+0x188>
 800a4e2:	f04f 0a03 	mov.w	sl, #3
 800a4e6:	e787      	b.n	800a3f8 <_scanf_float+0x188>
 800a4e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a4ec:	4639      	mov	r1, r7
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	4798      	blx	r3
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	f43f aedf 	beq.w	800a2b6 <_scanf_float+0x46>
 800a4f8:	e6ea      	b.n	800a2d0 <_scanf_float+0x60>
 800a4fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a4fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a502:	463a      	mov	r2, r7
 800a504:	4640      	mov	r0, r8
 800a506:	4798      	blx	r3
 800a508:	6923      	ldr	r3, [r4, #16]
 800a50a:	3b01      	subs	r3, #1
 800a50c:	6123      	str	r3, [r4, #16]
 800a50e:	e6ec      	b.n	800a2ea <_scanf_float+0x7a>
 800a510:	1e6b      	subs	r3, r5, #1
 800a512:	2b06      	cmp	r3, #6
 800a514:	d825      	bhi.n	800a562 <_scanf_float+0x2f2>
 800a516:	2d02      	cmp	r5, #2
 800a518:	d836      	bhi.n	800a588 <_scanf_float+0x318>
 800a51a:	455e      	cmp	r6, fp
 800a51c:	f67f aee8 	bls.w	800a2f0 <_scanf_float+0x80>
 800a520:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a524:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a528:	463a      	mov	r2, r7
 800a52a:	4640      	mov	r0, r8
 800a52c:	4798      	blx	r3
 800a52e:	6923      	ldr	r3, [r4, #16]
 800a530:	3b01      	subs	r3, #1
 800a532:	6123      	str	r3, [r4, #16]
 800a534:	e7f1      	b.n	800a51a <_scanf_float+0x2aa>
 800a536:	9802      	ldr	r0, [sp, #8]
 800a538:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a53c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a540:	9002      	str	r0, [sp, #8]
 800a542:	463a      	mov	r2, r7
 800a544:	4640      	mov	r0, r8
 800a546:	4798      	blx	r3
 800a548:	6923      	ldr	r3, [r4, #16]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	6123      	str	r3, [r4, #16]
 800a54e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a552:	fa5f fa8a 	uxtb.w	sl, sl
 800a556:	f1ba 0f02 	cmp.w	sl, #2
 800a55a:	d1ec      	bne.n	800a536 <_scanf_float+0x2c6>
 800a55c:	3d03      	subs	r5, #3
 800a55e:	b2ed      	uxtb	r5, r5
 800a560:	1b76      	subs	r6, r6, r5
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	05da      	lsls	r2, r3, #23
 800a566:	d52f      	bpl.n	800a5c8 <_scanf_float+0x358>
 800a568:	055b      	lsls	r3, r3, #21
 800a56a:	d510      	bpl.n	800a58e <_scanf_float+0x31e>
 800a56c:	455e      	cmp	r6, fp
 800a56e:	f67f aebf 	bls.w	800a2f0 <_scanf_float+0x80>
 800a572:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a576:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a57a:	463a      	mov	r2, r7
 800a57c:	4640      	mov	r0, r8
 800a57e:	4798      	blx	r3
 800a580:	6923      	ldr	r3, [r4, #16]
 800a582:	3b01      	subs	r3, #1
 800a584:	6123      	str	r3, [r4, #16]
 800a586:	e7f1      	b.n	800a56c <_scanf_float+0x2fc>
 800a588:	46aa      	mov	sl, r5
 800a58a:	9602      	str	r6, [sp, #8]
 800a58c:	e7df      	b.n	800a54e <_scanf_float+0x2de>
 800a58e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	2965      	cmp	r1, #101	; 0x65
 800a596:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a59a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800a59e:	6123      	str	r3, [r4, #16]
 800a5a0:	d00c      	beq.n	800a5bc <_scanf_float+0x34c>
 800a5a2:	2945      	cmp	r1, #69	; 0x45
 800a5a4:	d00a      	beq.n	800a5bc <_scanf_float+0x34c>
 800a5a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5aa:	463a      	mov	r2, r7
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	4798      	blx	r3
 800a5b0:	6923      	ldr	r3, [r4, #16]
 800a5b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	1eb5      	subs	r5, r6, #2
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5c0:	463a      	mov	r2, r7
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	4798      	blx	r3
 800a5c6:	462e      	mov	r6, r5
 800a5c8:	6825      	ldr	r5, [r4, #0]
 800a5ca:	f015 0510 	ands.w	r5, r5, #16
 800a5ce:	d158      	bne.n	800a682 <_scanf_float+0x412>
 800a5d0:	7035      	strb	r5, [r6, #0]
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a5d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5dc:	d11c      	bne.n	800a618 <_scanf_float+0x3a8>
 800a5de:	9b01      	ldr	r3, [sp, #4]
 800a5e0:	454b      	cmp	r3, r9
 800a5e2:	eba3 0209 	sub.w	r2, r3, r9
 800a5e6:	d124      	bne.n	800a632 <_scanf_float+0x3c2>
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	4659      	mov	r1, fp
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	f000 ff29 	bl	800b444 <_strtod_r>
 800a5f2:	9b03      	ldr	r3, [sp, #12]
 800a5f4:	6821      	ldr	r1, [r4, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f011 0f02 	tst.w	r1, #2
 800a5fc:	ec57 6b10 	vmov	r6, r7, d0
 800a600:	f103 0204 	add.w	r2, r3, #4
 800a604:	d020      	beq.n	800a648 <_scanf_float+0x3d8>
 800a606:	9903      	ldr	r1, [sp, #12]
 800a608:	600a      	str	r2, [r1, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	e9c3 6700 	strd	r6, r7, [r3]
 800a610:	68e3      	ldr	r3, [r4, #12]
 800a612:	3301      	adds	r3, #1
 800a614:	60e3      	str	r3, [r4, #12]
 800a616:	e66c      	b.n	800a2f2 <_scanf_float+0x82>
 800a618:	9b04      	ldr	r3, [sp, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d0e4      	beq.n	800a5e8 <_scanf_float+0x378>
 800a61e:	9905      	ldr	r1, [sp, #20]
 800a620:	230a      	movs	r3, #10
 800a622:	462a      	mov	r2, r5
 800a624:	3101      	adds	r1, #1
 800a626:	4640      	mov	r0, r8
 800a628:	f000 ff96 	bl	800b558 <_strtol_r>
 800a62c:	9b04      	ldr	r3, [sp, #16]
 800a62e:	9e05      	ldr	r6, [sp, #20]
 800a630:	1ac2      	subs	r2, r0, r3
 800a632:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a636:	429e      	cmp	r6, r3
 800a638:	bf28      	it	cs
 800a63a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a63e:	4912      	ldr	r1, [pc, #72]	; (800a688 <_scanf_float+0x418>)
 800a640:	4630      	mov	r0, r6
 800a642:	f000 f8b9 	bl	800a7b8 <siprintf>
 800a646:	e7cf      	b.n	800a5e8 <_scanf_float+0x378>
 800a648:	f011 0f04 	tst.w	r1, #4
 800a64c:	9903      	ldr	r1, [sp, #12]
 800a64e:	600a      	str	r2, [r1, #0]
 800a650:	d1db      	bne.n	800a60a <_scanf_float+0x39a>
 800a652:	f8d3 8000 	ldr.w	r8, [r3]
 800a656:	ee10 2a10 	vmov	r2, s0
 800a65a:	ee10 0a10 	vmov	r0, s0
 800a65e:	463b      	mov	r3, r7
 800a660:	4639      	mov	r1, r7
 800a662:	f7f6 fa63 	bl	8000b2c <__aeabi_dcmpun>
 800a666:	b128      	cbz	r0, 800a674 <_scanf_float+0x404>
 800a668:	4808      	ldr	r0, [pc, #32]	; (800a68c <_scanf_float+0x41c>)
 800a66a:	f000 f89f 	bl	800a7ac <nanf>
 800a66e:	ed88 0a00 	vstr	s0, [r8]
 800a672:	e7cd      	b.n	800a610 <_scanf_float+0x3a0>
 800a674:	4630      	mov	r0, r6
 800a676:	4639      	mov	r1, r7
 800a678:	f7f6 fab6 	bl	8000be8 <__aeabi_d2f>
 800a67c:	f8c8 0000 	str.w	r0, [r8]
 800a680:	e7c6      	b.n	800a610 <_scanf_float+0x3a0>
 800a682:	2500      	movs	r5, #0
 800a684:	e635      	b.n	800a2f2 <_scanf_float+0x82>
 800a686:	bf00      	nop
 800a688:	0800e648 	.word	0x0800e648
 800a68c:	0800eac0 	.word	0x0800eac0

0800a690 <iprintf>:
 800a690:	b40f      	push	{r0, r1, r2, r3}
 800a692:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <iprintf+0x2c>)
 800a694:	b513      	push	{r0, r1, r4, lr}
 800a696:	681c      	ldr	r4, [r3, #0]
 800a698:	b124      	cbz	r4, 800a6a4 <iprintf+0x14>
 800a69a:	69a3      	ldr	r3, [r4, #24]
 800a69c:	b913      	cbnz	r3, 800a6a4 <iprintf+0x14>
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f001 ffb0 	bl	800c604 <__sinit>
 800a6a4:	ab05      	add	r3, sp, #20
 800a6a6:	9a04      	ldr	r2, [sp, #16]
 800a6a8:	68a1      	ldr	r1, [r4, #8]
 800a6aa:	9301      	str	r3, [sp, #4]
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f003 fb35 	bl	800dd1c <_vfiprintf_r>
 800a6b2:	b002      	add	sp, #8
 800a6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b8:	b004      	add	sp, #16
 800a6ba:	4770      	bx	lr
 800a6bc:	20000010 	.word	0x20000010

0800a6c0 <_puts_r>:
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	460e      	mov	r6, r1
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	b118      	cbz	r0, 800a6d0 <_puts_r+0x10>
 800a6c8:	6983      	ldr	r3, [r0, #24]
 800a6ca:	b90b      	cbnz	r3, 800a6d0 <_puts_r+0x10>
 800a6cc:	f001 ff9a 	bl	800c604 <__sinit>
 800a6d0:	69ab      	ldr	r3, [r5, #24]
 800a6d2:	68ac      	ldr	r4, [r5, #8]
 800a6d4:	b913      	cbnz	r3, 800a6dc <_puts_r+0x1c>
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	f001 ff94 	bl	800c604 <__sinit>
 800a6dc:	4b2c      	ldr	r3, [pc, #176]	; (800a790 <_puts_r+0xd0>)
 800a6de:	429c      	cmp	r4, r3
 800a6e0:	d120      	bne.n	800a724 <_puts_r+0x64>
 800a6e2:	686c      	ldr	r4, [r5, #4]
 800a6e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6e6:	07db      	lsls	r3, r3, #31
 800a6e8:	d405      	bmi.n	800a6f6 <_puts_r+0x36>
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	0598      	lsls	r0, r3, #22
 800a6ee:	d402      	bmi.n	800a6f6 <_puts_r+0x36>
 800a6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6f2:	f002 fb98 	bl	800ce26 <__retarget_lock_acquire_recursive>
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	0719      	lsls	r1, r3, #28
 800a6fa:	d51d      	bpl.n	800a738 <_puts_r+0x78>
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	b1db      	cbz	r3, 800a738 <_puts_r+0x78>
 800a700:	3e01      	subs	r6, #1
 800a702:	68a3      	ldr	r3, [r4, #8]
 800a704:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a708:	3b01      	subs	r3, #1
 800a70a:	60a3      	str	r3, [r4, #8]
 800a70c:	bb39      	cbnz	r1, 800a75e <_puts_r+0x9e>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	da38      	bge.n	800a784 <_puts_r+0xc4>
 800a712:	4622      	mov	r2, r4
 800a714:	210a      	movs	r1, #10
 800a716:	4628      	mov	r0, r5
 800a718:	f000 ff20 	bl	800b55c <__swbuf_r>
 800a71c:	3001      	adds	r0, #1
 800a71e:	d011      	beq.n	800a744 <_puts_r+0x84>
 800a720:	250a      	movs	r5, #10
 800a722:	e011      	b.n	800a748 <_puts_r+0x88>
 800a724:	4b1b      	ldr	r3, [pc, #108]	; (800a794 <_puts_r+0xd4>)
 800a726:	429c      	cmp	r4, r3
 800a728:	d101      	bne.n	800a72e <_puts_r+0x6e>
 800a72a:	68ac      	ldr	r4, [r5, #8]
 800a72c:	e7da      	b.n	800a6e4 <_puts_r+0x24>
 800a72e:	4b1a      	ldr	r3, [pc, #104]	; (800a798 <_puts_r+0xd8>)
 800a730:	429c      	cmp	r4, r3
 800a732:	bf08      	it	eq
 800a734:	68ec      	ldreq	r4, [r5, #12]
 800a736:	e7d5      	b.n	800a6e4 <_puts_r+0x24>
 800a738:	4621      	mov	r1, r4
 800a73a:	4628      	mov	r0, r5
 800a73c:	f000 ff60 	bl	800b600 <__swsetup_r>
 800a740:	2800      	cmp	r0, #0
 800a742:	d0dd      	beq.n	800a700 <_puts_r+0x40>
 800a744:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a74a:	07da      	lsls	r2, r3, #31
 800a74c:	d405      	bmi.n	800a75a <_puts_r+0x9a>
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	059b      	lsls	r3, r3, #22
 800a752:	d402      	bmi.n	800a75a <_puts_r+0x9a>
 800a754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a756:	f002 fb67 	bl	800ce28 <__retarget_lock_release_recursive>
 800a75a:	4628      	mov	r0, r5
 800a75c:	bd70      	pop	{r4, r5, r6, pc}
 800a75e:	2b00      	cmp	r3, #0
 800a760:	da04      	bge.n	800a76c <_puts_r+0xac>
 800a762:	69a2      	ldr	r2, [r4, #24]
 800a764:	429a      	cmp	r2, r3
 800a766:	dc06      	bgt.n	800a776 <_puts_r+0xb6>
 800a768:	290a      	cmp	r1, #10
 800a76a:	d004      	beq.n	800a776 <_puts_r+0xb6>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	6022      	str	r2, [r4, #0]
 800a772:	7019      	strb	r1, [r3, #0]
 800a774:	e7c5      	b.n	800a702 <_puts_r+0x42>
 800a776:	4622      	mov	r2, r4
 800a778:	4628      	mov	r0, r5
 800a77a:	f000 feef 	bl	800b55c <__swbuf_r>
 800a77e:	3001      	adds	r0, #1
 800a780:	d1bf      	bne.n	800a702 <_puts_r+0x42>
 800a782:	e7df      	b.n	800a744 <_puts_r+0x84>
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	250a      	movs	r5, #10
 800a788:	1c5a      	adds	r2, r3, #1
 800a78a:	6022      	str	r2, [r4, #0]
 800a78c:	701d      	strb	r5, [r3, #0]
 800a78e:	e7db      	b.n	800a748 <_puts_r+0x88>
 800a790:	0800e858 	.word	0x0800e858
 800a794:	0800e878 	.word	0x0800e878
 800a798:	0800e838 	.word	0x0800e838

0800a79c <puts>:
 800a79c:	4b02      	ldr	r3, [pc, #8]	; (800a7a8 <puts+0xc>)
 800a79e:	4601      	mov	r1, r0
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	f7ff bf8d 	b.w	800a6c0 <_puts_r>
 800a7a6:	bf00      	nop
 800a7a8:	20000010 	.word	0x20000010

0800a7ac <nanf>:
 800a7ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a7b4 <nanf+0x8>
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	7fc00000 	.word	0x7fc00000

0800a7b8 <siprintf>:
 800a7b8:	b40e      	push	{r1, r2, r3}
 800a7ba:	b500      	push	{lr}
 800a7bc:	b09c      	sub	sp, #112	; 0x70
 800a7be:	ab1d      	add	r3, sp, #116	; 0x74
 800a7c0:	9002      	str	r0, [sp, #8]
 800a7c2:	9006      	str	r0, [sp, #24]
 800a7c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7c8:	4809      	ldr	r0, [pc, #36]	; (800a7f0 <siprintf+0x38>)
 800a7ca:	9107      	str	r1, [sp, #28]
 800a7cc:	9104      	str	r1, [sp, #16]
 800a7ce:	4909      	ldr	r1, [pc, #36]	; (800a7f4 <siprintf+0x3c>)
 800a7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d4:	9105      	str	r1, [sp, #20]
 800a7d6:	6800      	ldr	r0, [r0, #0]
 800a7d8:	9301      	str	r3, [sp, #4]
 800a7da:	a902      	add	r1, sp, #8
 800a7dc:	f003 f974 	bl	800dac8 <_svfiprintf_r>
 800a7e0:	9b02      	ldr	r3, [sp, #8]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	701a      	strb	r2, [r3, #0]
 800a7e6:	b01c      	add	sp, #112	; 0x70
 800a7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7ec:	b003      	add	sp, #12
 800a7ee:	4770      	bx	lr
 800a7f0:	20000010 	.word	0x20000010
 800a7f4:	ffff0208 	.word	0xffff0208

0800a7f8 <sulp>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	460d      	mov	r5, r1
 800a7fe:	ec45 4b10 	vmov	d0, r4, r5
 800a802:	4616      	mov	r6, r2
 800a804:	f002 fefc 	bl	800d600 <__ulp>
 800a808:	ec51 0b10 	vmov	r0, r1, d0
 800a80c:	b17e      	cbz	r6, 800a82e <sulp+0x36>
 800a80e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a812:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a816:	2b00      	cmp	r3, #0
 800a818:	dd09      	ble.n	800a82e <sulp+0x36>
 800a81a:	051b      	lsls	r3, r3, #20
 800a81c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a820:	2400      	movs	r4, #0
 800a822:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a826:	4622      	mov	r2, r4
 800a828:	462b      	mov	r3, r5
 800a82a:	f7f5 fee5 	bl	80005f8 <__aeabi_dmul>
 800a82e:	bd70      	pop	{r4, r5, r6, pc}

0800a830 <_strtod_l>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	b0a3      	sub	sp, #140	; 0x8c
 800a836:	461f      	mov	r7, r3
 800a838:	2300      	movs	r3, #0
 800a83a:	931e      	str	r3, [sp, #120]	; 0x78
 800a83c:	4ba4      	ldr	r3, [pc, #656]	; (800aad0 <_strtod_l+0x2a0>)
 800a83e:	9219      	str	r2, [sp, #100]	; 0x64
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	9307      	str	r3, [sp, #28]
 800a844:	4604      	mov	r4, r0
 800a846:	4618      	mov	r0, r3
 800a848:	4688      	mov	r8, r1
 800a84a:	f7f5 fcc1 	bl	80001d0 <strlen>
 800a84e:	f04f 0a00 	mov.w	sl, #0
 800a852:	4605      	mov	r5, r0
 800a854:	f04f 0b00 	mov.w	fp, #0
 800a858:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a85c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a85e:	781a      	ldrb	r2, [r3, #0]
 800a860:	2a2b      	cmp	r2, #43	; 0x2b
 800a862:	d04c      	beq.n	800a8fe <_strtod_l+0xce>
 800a864:	d839      	bhi.n	800a8da <_strtod_l+0xaa>
 800a866:	2a0d      	cmp	r2, #13
 800a868:	d832      	bhi.n	800a8d0 <_strtod_l+0xa0>
 800a86a:	2a08      	cmp	r2, #8
 800a86c:	d832      	bhi.n	800a8d4 <_strtod_l+0xa4>
 800a86e:	2a00      	cmp	r2, #0
 800a870:	d03c      	beq.n	800a8ec <_strtod_l+0xbc>
 800a872:	2300      	movs	r3, #0
 800a874:	930e      	str	r3, [sp, #56]	; 0x38
 800a876:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a878:	7833      	ldrb	r3, [r6, #0]
 800a87a:	2b30      	cmp	r3, #48	; 0x30
 800a87c:	f040 80b4 	bne.w	800a9e8 <_strtod_l+0x1b8>
 800a880:	7873      	ldrb	r3, [r6, #1]
 800a882:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a886:	2b58      	cmp	r3, #88	; 0x58
 800a888:	d16c      	bne.n	800a964 <_strtod_l+0x134>
 800a88a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	ab1e      	add	r3, sp, #120	; 0x78
 800a890:	9702      	str	r7, [sp, #8]
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	4a8f      	ldr	r2, [pc, #572]	; (800aad4 <_strtod_l+0x2a4>)
 800a896:	ab1f      	add	r3, sp, #124	; 0x7c
 800a898:	a91d      	add	r1, sp, #116	; 0x74
 800a89a:	4620      	mov	r0, r4
 800a89c:	f001 ffb6 	bl	800c80c <__gethex>
 800a8a0:	f010 0707 	ands.w	r7, r0, #7
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	d005      	beq.n	800a8b4 <_strtod_l+0x84>
 800a8a8:	2f06      	cmp	r7, #6
 800a8aa:	d12a      	bne.n	800a902 <_strtod_l+0xd2>
 800a8ac:	3601      	adds	r6, #1
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	961d      	str	r6, [sp, #116]	; 0x74
 800a8b2:	930e      	str	r3, [sp, #56]	; 0x38
 800a8b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f040 8596 	bne.w	800b3e8 <_strtod_l+0xbb8>
 800a8bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8be:	b1db      	cbz	r3, 800a8f8 <_strtod_l+0xc8>
 800a8c0:	4652      	mov	r2, sl
 800a8c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a8c6:	ec43 2b10 	vmov	d0, r2, r3
 800a8ca:	b023      	add	sp, #140	; 0x8c
 800a8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d0:	2a20      	cmp	r2, #32
 800a8d2:	d1ce      	bne.n	800a872 <_strtod_l+0x42>
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	931d      	str	r3, [sp, #116]	; 0x74
 800a8d8:	e7c0      	b.n	800a85c <_strtod_l+0x2c>
 800a8da:	2a2d      	cmp	r2, #45	; 0x2d
 800a8dc:	d1c9      	bne.n	800a872 <_strtod_l+0x42>
 800a8de:	2201      	movs	r2, #1
 800a8e0:	920e      	str	r2, [sp, #56]	; 0x38
 800a8e2:	1c5a      	adds	r2, r3, #1
 800a8e4:	921d      	str	r2, [sp, #116]	; 0x74
 800a8e6:	785b      	ldrb	r3, [r3, #1]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1c4      	bne.n	800a876 <_strtod_l+0x46>
 800a8ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f040 8576 	bne.w	800b3e4 <_strtod_l+0xbb4>
 800a8f8:	4652      	mov	r2, sl
 800a8fa:	465b      	mov	r3, fp
 800a8fc:	e7e3      	b.n	800a8c6 <_strtod_l+0x96>
 800a8fe:	2200      	movs	r2, #0
 800a900:	e7ee      	b.n	800a8e0 <_strtod_l+0xb0>
 800a902:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a904:	b13a      	cbz	r2, 800a916 <_strtod_l+0xe6>
 800a906:	2135      	movs	r1, #53	; 0x35
 800a908:	a820      	add	r0, sp, #128	; 0x80
 800a90a:	f002 ff84 	bl	800d816 <__copybits>
 800a90e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a910:	4620      	mov	r0, r4
 800a912:	f002 fb49 	bl	800cfa8 <_Bfree>
 800a916:	3f01      	subs	r7, #1
 800a918:	2f05      	cmp	r7, #5
 800a91a:	d807      	bhi.n	800a92c <_strtod_l+0xfc>
 800a91c:	e8df f007 	tbb	[pc, r7]
 800a920:	1d180b0e 	.word	0x1d180b0e
 800a924:	030e      	.short	0x030e
 800a926:	f04f 0b00 	mov.w	fp, #0
 800a92a:	46da      	mov	sl, fp
 800a92c:	0728      	lsls	r0, r5, #28
 800a92e:	d5c1      	bpl.n	800a8b4 <_strtod_l+0x84>
 800a930:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a934:	e7be      	b.n	800a8b4 <_strtod_l+0x84>
 800a936:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a93a:	e7f7      	b.n	800a92c <_strtod_l+0xfc>
 800a93c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a940:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a942:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a946:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a94a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a94e:	e7ed      	b.n	800a92c <_strtod_l+0xfc>
 800a950:	f8df b184 	ldr.w	fp, [pc, #388]	; 800aad8 <_strtod_l+0x2a8>
 800a954:	f04f 0a00 	mov.w	sl, #0
 800a958:	e7e8      	b.n	800a92c <_strtod_l+0xfc>
 800a95a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a95e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a962:	e7e3      	b.n	800a92c <_strtod_l+0xfc>
 800a964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a966:	1c5a      	adds	r2, r3, #1
 800a968:	921d      	str	r2, [sp, #116]	; 0x74
 800a96a:	785b      	ldrb	r3, [r3, #1]
 800a96c:	2b30      	cmp	r3, #48	; 0x30
 800a96e:	d0f9      	beq.n	800a964 <_strtod_l+0x134>
 800a970:	2b00      	cmp	r3, #0
 800a972:	d09f      	beq.n	800a8b4 <_strtod_l+0x84>
 800a974:	2301      	movs	r3, #1
 800a976:	f04f 0900 	mov.w	r9, #0
 800a97a:	9304      	str	r3, [sp, #16]
 800a97c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a97e:	930a      	str	r3, [sp, #40]	; 0x28
 800a980:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a984:	464f      	mov	r7, r9
 800a986:	220a      	movs	r2, #10
 800a988:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a98a:	7806      	ldrb	r6, [r0, #0]
 800a98c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a990:	b2d9      	uxtb	r1, r3
 800a992:	2909      	cmp	r1, #9
 800a994:	d92a      	bls.n	800a9ec <_strtod_l+0x1bc>
 800a996:	9907      	ldr	r1, [sp, #28]
 800a998:	462a      	mov	r2, r5
 800a99a:	f003 fb4c 	bl	800e036 <strncmp>
 800a99e:	b398      	cbz	r0, 800aa08 <_strtod_l+0x1d8>
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	4633      	mov	r3, r6
 800a9a4:	463d      	mov	r5, r7
 800a9a6:	9007      	str	r0, [sp, #28]
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	2b65      	cmp	r3, #101	; 0x65
 800a9ac:	d001      	beq.n	800a9b2 <_strtod_l+0x182>
 800a9ae:	2b45      	cmp	r3, #69	; 0x45
 800a9b0:	d118      	bne.n	800a9e4 <_strtod_l+0x1b4>
 800a9b2:	b91d      	cbnz	r5, 800a9bc <_strtod_l+0x18c>
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	4303      	orrs	r3, r0
 800a9b8:	d098      	beq.n	800a8ec <_strtod_l+0xbc>
 800a9ba:	2500      	movs	r5, #0
 800a9bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a9c0:	f108 0301 	add.w	r3, r8, #1
 800a9c4:	931d      	str	r3, [sp, #116]	; 0x74
 800a9c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a9ca:	2b2b      	cmp	r3, #43	; 0x2b
 800a9cc:	d075      	beq.n	800aaba <_strtod_l+0x28a>
 800a9ce:	2b2d      	cmp	r3, #45	; 0x2d
 800a9d0:	d07b      	beq.n	800aaca <_strtod_l+0x29a>
 800a9d2:	f04f 0c00 	mov.w	ip, #0
 800a9d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a9da:	2909      	cmp	r1, #9
 800a9dc:	f240 8082 	bls.w	800aae4 <_strtod_l+0x2b4>
 800a9e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a9e4:	2600      	movs	r6, #0
 800a9e6:	e09d      	b.n	800ab24 <_strtod_l+0x2f4>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e7c4      	b.n	800a976 <_strtod_l+0x146>
 800a9ec:	2f08      	cmp	r7, #8
 800a9ee:	bfd8      	it	le
 800a9f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a9f2:	f100 0001 	add.w	r0, r0, #1
 800a9f6:	bfda      	itte	le
 800a9f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a9fc:	9309      	strle	r3, [sp, #36]	; 0x24
 800a9fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 800aa02:	3701      	adds	r7, #1
 800aa04:	901d      	str	r0, [sp, #116]	; 0x74
 800aa06:	e7bf      	b.n	800a988 <_strtod_l+0x158>
 800aa08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa0a:	195a      	adds	r2, r3, r5
 800aa0c:	921d      	str	r2, [sp, #116]	; 0x74
 800aa0e:	5d5b      	ldrb	r3, [r3, r5]
 800aa10:	2f00      	cmp	r7, #0
 800aa12:	d037      	beq.n	800aa84 <_strtod_l+0x254>
 800aa14:	9007      	str	r0, [sp, #28]
 800aa16:	463d      	mov	r5, r7
 800aa18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800aa1c:	2a09      	cmp	r2, #9
 800aa1e:	d912      	bls.n	800aa46 <_strtod_l+0x216>
 800aa20:	2201      	movs	r2, #1
 800aa22:	e7c2      	b.n	800a9aa <_strtod_l+0x17a>
 800aa24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	921d      	str	r2, [sp, #116]	; 0x74
 800aa2a:	785b      	ldrb	r3, [r3, #1]
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	2b30      	cmp	r3, #48	; 0x30
 800aa30:	d0f8      	beq.n	800aa24 <_strtod_l+0x1f4>
 800aa32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800aa36:	2a08      	cmp	r2, #8
 800aa38:	f200 84db 	bhi.w	800b3f2 <_strtod_l+0xbc2>
 800aa3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800aa3e:	9007      	str	r0, [sp, #28]
 800aa40:	2000      	movs	r0, #0
 800aa42:	920a      	str	r2, [sp, #40]	; 0x28
 800aa44:	4605      	mov	r5, r0
 800aa46:	3b30      	subs	r3, #48	; 0x30
 800aa48:	f100 0201 	add.w	r2, r0, #1
 800aa4c:	d014      	beq.n	800aa78 <_strtod_l+0x248>
 800aa4e:	9907      	ldr	r1, [sp, #28]
 800aa50:	4411      	add	r1, r2
 800aa52:	9107      	str	r1, [sp, #28]
 800aa54:	462a      	mov	r2, r5
 800aa56:	eb00 0e05 	add.w	lr, r0, r5
 800aa5a:	210a      	movs	r1, #10
 800aa5c:	4572      	cmp	r2, lr
 800aa5e:	d113      	bne.n	800aa88 <_strtod_l+0x258>
 800aa60:	182a      	adds	r2, r5, r0
 800aa62:	2a08      	cmp	r2, #8
 800aa64:	f105 0501 	add.w	r5, r5, #1
 800aa68:	4405      	add	r5, r0
 800aa6a:	dc1c      	bgt.n	800aaa6 <_strtod_l+0x276>
 800aa6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa6e:	220a      	movs	r2, #10
 800aa70:	fb02 3301 	mla	r3, r2, r1, r3
 800aa74:	9309      	str	r3, [sp, #36]	; 0x24
 800aa76:	2200      	movs	r2, #0
 800aa78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa7a:	1c59      	adds	r1, r3, #1
 800aa7c:	911d      	str	r1, [sp, #116]	; 0x74
 800aa7e:	785b      	ldrb	r3, [r3, #1]
 800aa80:	4610      	mov	r0, r2
 800aa82:	e7c9      	b.n	800aa18 <_strtod_l+0x1e8>
 800aa84:	4638      	mov	r0, r7
 800aa86:	e7d2      	b.n	800aa2e <_strtod_l+0x1fe>
 800aa88:	2a08      	cmp	r2, #8
 800aa8a:	dc04      	bgt.n	800aa96 <_strtod_l+0x266>
 800aa8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aa8e:	434e      	muls	r6, r1
 800aa90:	9609      	str	r6, [sp, #36]	; 0x24
 800aa92:	3201      	adds	r2, #1
 800aa94:	e7e2      	b.n	800aa5c <_strtod_l+0x22c>
 800aa96:	f102 0c01 	add.w	ip, r2, #1
 800aa9a:	f1bc 0f10 	cmp.w	ip, #16
 800aa9e:	bfd8      	it	le
 800aaa0:	fb01 f909 	mulle.w	r9, r1, r9
 800aaa4:	e7f5      	b.n	800aa92 <_strtod_l+0x262>
 800aaa6:	2d10      	cmp	r5, #16
 800aaa8:	bfdc      	itt	le
 800aaaa:	220a      	movle	r2, #10
 800aaac:	fb02 3909 	mlale	r9, r2, r9, r3
 800aab0:	e7e1      	b.n	800aa76 <_strtod_l+0x246>
 800aab2:	2300      	movs	r3, #0
 800aab4:	9307      	str	r3, [sp, #28]
 800aab6:	2201      	movs	r2, #1
 800aab8:	e77c      	b.n	800a9b4 <_strtod_l+0x184>
 800aaba:	f04f 0c00 	mov.w	ip, #0
 800aabe:	f108 0302 	add.w	r3, r8, #2
 800aac2:	931d      	str	r3, [sp, #116]	; 0x74
 800aac4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800aac8:	e785      	b.n	800a9d6 <_strtod_l+0x1a6>
 800aaca:	f04f 0c01 	mov.w	ip, #1
 800aace:	e7f6      	b.n	800aabe <_strtod_l+0x28e>
 800aad0:	0800e904 	.word	0x0800e904
 800aad4:	0800e650 	.word	0x0800e650
 800aad8:	7ff00000 	.word	0x7ff00000
 800aadc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aade:	1c59      	adds	r1, r3, #1
 800aae0:	911d      	str	r1, [sp, #116]	; 0x74
 800aae2:	785b      	ldrb	r3, [r3, #1]
 800aae4:	2b30      	cmp	r3, #48	; 0x30
 800aae6:	d0f9      	beq.n	800aadc <_strtod_l+0x2ac>
 800aae8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800aaec:	2908      	cmp	r1, #8
 800aaee:	f63f af79 	bhi.w	800a9e4 <_strtod_l+0x1b4>
 800aaf2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800aaf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aaf8:	9308      	str	r3, [sp, #32]
 800aafa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aafc:	1c59      	adds	r1, r3, #1
 800aafe:	911d      	str	r1, [sp, #116]	; 0x74
 800ab00:	785b      	ldrb	r3, [r3, #1]
 800ab02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ab06:	2e09      	cmp	r6, #9
 800ab08:	d937      	bls.n	800ab7a <_strtod_l+0x34a>
 800ab0a:	9e08      	ldr	r6, [sp, #32]
 800ab0c:	1b89      	subs	r1, r1, r6
 800ab0e:	2908      	cmp	r1, #8
 800ab10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ab14:	dc02      	bgt.n	800ab1c <_strtod_l+0x2ec>
 800ab16:	4576      	cmp	r6, lr
 800ab18:	bfa8      	it	ge
 800ab1a:	4676      	movge	r6, lr
 800ab1c:	f1bc 0f00 	cmp.w	ip, #0
 800ab20:	d000      	beq.n	800ab24 <_strtod_l+0x2f4>
 800ab22:	4276      	negs	r6, r6
 800ab24:	2d00      	cmp	r5, #0
 800ab26:	d14f      	bne.n	800abc8 <_strtod_l+0x398>
 800ab28:	9904      	ldr	r1, [sp, #16]
 800ab2a:	4301      	orrs	r1, r0
 800ab2c:	f47f aec2 	bne.w	800a8b4 <_strtod_l+0x84>
 800ab30:	2a00      	cmp	r2, #0
 800ab32:	f47f aedb 	bne.w	800a8ec <_strtod_l+0xbc>
 800ab36:	2b69      	cmp	r3, #105	; 0x69
 800ab38:	d027      	beq.n	800ab8a <_strtod_l+0x35a>
 800ab3a:	dc24      	bgt.n	800ab86 <_strtod_l+0x356>
 800ab3c:	2b49      	cmp	r3, #73	; 0x49
 800ab3e:	d024      	beq.n	800ab8a <_strtod_l+0x35a>
 800ab40:	2b4e      	cmp	r3, #78	; 0x4e
 800ab42:	f47f aed3 	bne.w	800a8ec <_strtod_l+0xbc>
 800ab46:	499e      	ldr	r1, [pc, #632]	; (800adc0 <_strtod_l+0x590>)
 800ab48:	a81d      	add	r0, sp, #116	; 0x74
 800ab4a:	f002 f8b7 	bl	800ccbc <__match>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	f43f aecc 	beq.w	800a8ec <_strtod_l+0xbc>
 800ab54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	2b28      	cmp	r3, #40	; 0x28
 800ab5a:	d12d      	bne.n	800abb8 <_strtod_l+0x388>
 800ab5c:	4999      	ldr	r1, [pc, #612]	; (800adc4 <_strtod_l+0x594>)
 800ab5e:	aa20      	add	r2, sp, #128	; 0x80
 800ab60:	a81d      	add	r0, sp, #116	; 0x74
 800ab62:	f002 f8bf 	bl	800cce4 <__hexnan>
 800ab66:	2805      	cmp	r0, #5
 800ab68:	d126      	bne.n	800abb8 <_strtod_l+0x388>
 800ab6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ab70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ab74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ab78:	e69c      	b.n	800a8b4 <_strtod_l+0x84>
 800ab7a:	210a      	movs	r1, #10
 800ab7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ab80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ab84:	e7b9      	b.n	800aafa <_strtod_l+0x2ca>
 800ab86:	2b6e      	cmp	r3, #110	; 0x6e
 800ab88:	e7db      	b.n	800ab42 <_strtod_l+0x312>
 800ab8a:	498f      	ldr	r1, [pc, #572]	; (800adc8 <_strtod_l+0x598>)
 800ab8c:	a81d      	add	r0, sp, #116	; 0x74
 800ab8e:	f002 f895 	bl	800ccbc <__match>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	f43f aeaa 	beq.w	800a8ec <_strtod_l+0xbc>
 800ab98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab9a:	498c      	ldr	r1, [pc, #560]	; (800adcc <_strtod_l+0x59c>)
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	a81d      	add	r0, sp, #116	; 0x74
 800aba0:	931d      	str	r3, [sp, #116]	; 0x74
 800aba2:	f002 f88b 	bl	800ccbc <__match>
 800aba6:	b910      	cbnz	r0, 800abae <_strtod_l+0x37e>
 800aba8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abaa:	3301      	adds	r3, #1
 800abac:	931d      	str	r3, [sp, #116]	; 0x74
 800abae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800addc <_strtod_l+0x5ac>
 800abb2:	f04f 0a00 	mov.w	sl, #0
 800abb6:	e67d      	b.n	800a8b4 <_strtod_l+0x84>
 800abb8:	4885      	ldr	r0, [pc, #532]	; (800add0 <_strtod_l+0x5a0>)
 800abba:	f003 f9e1 	bl	800df80 <nan>
 800abbe:	ed8d 0b04 	vstr	d0, [sp, #16]
 800abc2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800abc6:	e675      	b.n	800a8b4 <_strtod_l+0x84>
 800abc8:	9b07      	ldr	r3, [sp, #28]
 800abca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abcc:	1af3      	subs	r3, r6, r3
 800abce:	2f00      	cmp	r7, #0
 800abd0:	bf08      	it	eq
 800abd2:	462f      	moveq	r7, r5
 800abd4:	2d10      	cmp	r5, #16
 800abd6:	9308      	str	r3, [sp, #32]
 800abd8:	46a8      	mov	r8, r5
 800abda:	bfa8      	it	ge
 800abdc:	f04f 0810 	movge.w	r8, #16
 800abe0:	f7f5 fc90 	bl	8000504 <__aeabi_ui2d>
 800abe4:	2d09      	cmp	r5, #9
 800abe6:	4682      	mov	sl, r0
 800abe8:	468b      	mov	fp, r1
 800abea:	dd13      	ble.n	800ac14 <_strtod_l+0x3e4>
 800abec:	4b79      	ldr	r3, [pc, #484]	; (800add4 <_strtod_l+0x5a4>)
 800abee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800abf2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800abf6:	f7f5 fcff 	bl	80005f8 <__aeabi_dmul>
 800abfa:	4682      	mov	sl, r0
 800abfc:	4648      	mov	r0, r9
 800abfe:	468b      	mov	fp, r1
 800ac00:	f7f5 fc80 	bl	8000504 <__aeabi_ui2d>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4650      	mov	r0, sl
 800ac0a:	4659      	mov	r1, fp
 800ac0c:	f7f5 fb3e 	bl	800028c <__adddf3>
 800ac10:	4682      	mov	sl, r0
 800ac12:	468b      	mov	fp, r1
 800ac14:	2d0f      	cmp	r5, #15
 800ac16:	dc38      	bgt.n	800ac8a <_strtod_l+0x45a>
 800ac18:	9b08      	ldr	r3, [sp, #32]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f43f ae4a 	beq.w	800a8b4 <_strtod_l+0x84>
 800ac20:	dd24      	ble.n	800ac6c <_strtod_l+0x43c>
 800ac22:	2b16      	cmp	r3, #22
 800ac24:	dc0b      	bgt.n	800ac3e <_strtod_l+0x40e>
 800ac26:	4d6b      	ldr	r5, [pc, #428]	; (800add4 <_strtod_l+0x5a4>)
 800ac28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800ac2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ac30:	4652      	mov	r2, sl
 800ac32:	465b      	mov	r3, fp
 800ac34:	f7f5 fce0 	bl	80005f8 <__aeabi_dmul>
 800ac38:	4682      	mov	sl, r0
 800ac3a:	468b      	mov	fp, r1
 800ac3c:	e63a      	b.n	800a8b4 <_strtod_l+0x84>
 800ac3e:	9a08      	ldr	r2, [sp, #32]
 800ac40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ac44:	4293      	cmp	r3, r2
 800ac46:	db20      	blt.n	800ac8a <_strtod_l+0x45a>
 800ac48:	4c62      	ldr	r4, [pc, #392]	; (800add4 <_strtod_l+0x5a4>)
 800ac4a:	f1c5 050f 	rsb	r5, r5, #15
 800ac4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ac52:	4652      	mov	r2, sl
 800ac54:	465b      	mov	r3, fp
 800ac56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac5a:	f7f5 fccd 	bl	80005f8 <__aeabi_dmul>
 800ac5e:	9b08      	ldr	r3, [sp, #32]
 800ac60:	1b5d      	subs	r5, r3, r5
 800ac62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ac66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ac6a:	e7e3      	b.n	800ac34 <_strtod_l+0x404>
 800ac6c:	9b08      	ldr	r3, [sp, #32]
 800ac6e:	3316      	adds	r3, #22
 800ac70:	db0b      	blt.n	800ac8a <_strtod_l+0x45a>
 800ac72:	9b07      	ldr	r3, [sp, #28]
 800ac74:	4a57      	ldr	r2, [pc, #348]	; (800add4 <_strtod_l+0x5a4>)
 800ac76:	1b9e      	subs	r6, r3, r6
 800ac78:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ac7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac80:	4650      	mov	r0, sl
 800ac82:	4659      	mov	r1, fp
 800ac84:	f7f5 fde2 	bl	800084c <__aeabi_ddiv>
 800ac88:	e7d6      	b.n	800ac38 <_strtod_l+0x408>
 800ac8a:	9b08      	ldr	r3, [sp, #32]
 800ac8c:	eba5 0808 	sub.w	r8, r5, r8
 800ac90:	4498      	add	r8, r3
 800ac92:	f1b8 0f00 	cmp.w	r8, #0
 800ac96:	dd71      	ble.n	800ad7c <_strtod_l+0x54c>
 800ac98:	f018 030f 	ands.w	r3, r8, #15
 800ac9c:	d00a      	beq.n	800acb4 <_strtod_l+0x484>
 800ac9e:	494d      	ldr	r1, [pc, #308]	; (800add4 <_strtod_l+0x5a4>)
 800aca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aca4:	4652      	mov	r2, sl
 800aca6:	465b      	mov	r3, fp
 800aca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acac:	f7f5 fca4 	bl	80005f8 <__aeabi_dmul>
 800acb0:	4682      	mov	sl, r0
 800acb2:	468b      	mov	fp, r1
 800acb4:	f038 080f 	bics.w	r8, r8, #15
 800acb8:	d04d      	beq.n	800ad56 <_strtod_l+0x526>
 800acba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800acbe:	dd22      	ble.n	800ad06 <_strtod_l+0x4d6>
 800acc0:	2500      	movs	r5, #0
 800acc2:	462e      	mov	r6, r5
 800acc4:	9509      	str	r5, [sp, #36]	; 0x24
 800acc6:	9507      	str	r5, [sp, #28]
 800acc8:	2322      	movs	r3, #34	; 0x22
 800acca:	f8df b110 	ldr.w	fp, [pc, #272]	; 800addc <_strtod_l+0x5ac>
 800acce:	6023      	str	r3, [r4, #0]
 800acd0:	f04f 0a00 	mov.w	sl, #0
 800acd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f43f adec 	beq.w	800a8b4 <_strtod_l+0x84>
 800acdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800acde:	4620      	mov	r0, r4
 800ace0:	f002 f962 	bl	800cfa8 <_Bfree>
 800ace4:	9907      	ldr	r1, [sp, #28]
 800ace6:	4620      	mov	r0, r4
 800ace8:	f002 f95e 	bl	800cfa8 <_Bfree>
 800acec:	4631      	mov	r1, r6
 800acee:	4620      	mov	r0, r4
 800acf0:	f002 f95a 	bl	800cfa8 <_Bfree>
 800acf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acf6:	4620      	mov	r0, r4
 800acf8:	f002 f956 	bl	800cfa8 <_Bfree>
 800acfc:	4629      	mov	r1, r5
 800acfe:	4620      	mov	r0, r4
 800ad00:	f002 f952 	bl	800cfa8 <_Bfree>
 800ad04:	e5d6      	b.n	800a8b4 <_strtod_l+0x84>
 800ad06:	2300      	movs	r3, #0
 800ad08:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ad0c:	4650      	mov	r0, sl
 800ad0e:	4659      	mov	r1, fp
 800ad10:	4699      	mov	r9, r3
 800ad12:	f1b8 0f01 	cmp.w	r8, #1
 800ad16:	dc21      	bgt.n	800ad5c <_strtod_l+0x52c>
 800ad18:	b10b      	cbz	r3, 800ad1e <_strtod_l+0x4ee>
 800ad1a:	4682      	mov	sl, r0
 800ad1c:	468b      	mov	fp, r1
 800ad1e:	4b2e      	ldr	r3, [pc, #184]	; (800add8 <_strtod_l+0x5a8>)
 800ad20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ad24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ad28:	4652      	mov	r2, sl
 800ad2a:	465b      	mov	r3, fp
 800ad2c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ad30:	f7f5 fc62 	bl	80005f8 <__aeabi_dmul>
 800ad34:	4b29      	ldr	r3, [pc, #164]	; (800addc <_strtod_l+0x5ac>)
 800ad36:	460a      	mov	r2, r1
 800ad38:	400b      	ands	r3, r1
 800ad3a:	4929      	ldr	r1, [pc, #164]	; (800ade0 <_strtod_l+0x5b0>)
 800ad3c:	428b      	cmp	r3, r1
 800ad3e:	4682      	mov	sl, r0
 800ad40:	d8be      	bhi.n	800acc0 <_strtod_l+0x490>
 800ad42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ad46:	428b      	cmp	r3, r1
 800ad48:	bf86      	itte	hi
 800ad4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ade4 <_strtod_l+0x5b4>
 800ad4e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800ad52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ad56:	2300      	movs	r3, #0
 800ad58:	9304      	str	r3, [sp, #16]
 800ad5a:	e081      	b.n	800ae60 <_strtod_l+0x630>
 800ad5c:	f018 0f01 	tst.w	r8, #1
 800ad60:	d007      	beq.n	800ad72 <_strtod_l+0x542>
 800ad62:	4b1d      	ldr	r3, [pc, #116]	; (800add8 <_strtod_l+0x5a8>)
 800ad64:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ad68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6c:	f7f5 fc44 	bl	80005f8 <__aeabi_dmul>
 800ad70:	2301      	movs	r3, #1
 800ad72:	f109 0901 	add.w	r9, r9, #1
 800ad76:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ad7a:	e7ca      	b.n	800ad12 <_strtod_l+0x4e2>
 800ad7c:	d0eb      	beq.n	800ad56 <_strtod_l+0x526>
 800ad7e:	f1c8 0800 	rsb	r8, r8, #0
 800ad82:	f018 020f 	ands.w	r2, r8, #15
 800ad86:	d00a      	beq.n	800ad9e <_strtod_l+0x56e>
 800ad88:	4b12      	ldr	r3, [pc, #72]	; (800add4 <_strtod_l+0x5a4>)
 800ad8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad8e:	4650      	mov	r0, sl
 800ad90:	4659      	mov	r1, fp
 800ad92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad96:	f7f5 fd59 	bl	800084c <__aeabi_ddiv>
 800ad9a:	4682      	mov	sl, r0
 800ad9c:	468b      	mov	fp, r1
 800ad9e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ada2:	d0d8      	beq.n	800ad56 <_strtod_l+0x526>
 800ada4:	f1b8 0f1f 	cmp.w	r8, #31
 800ada8:	dd1e      	ble.n	800ade8 <_strtod_l+0x5b8>
 800adaa:	2500      	movs	r5, #0
 800adac:	462e      	mov	r6, r5
 800adae:	9509      	str	r5, [sp, #36]	; 0x24
 800adb0:	9507      	str	r5, [sp, #28]
 800adb2:	2322      	movs	r3, #34	; 0x22
 800adb4:	f04f 0a00 	mov.w	sl, #0
 800adb8:	f04f 0b00 	mov.w	fp, #0
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	e789      	b.n	800acd4 <_strtod_l+0x4a4>
 800adc0:	0800e621 	.word	0x0800e621
 800adc4:	0800e664 	.word	0x0800e664
 800adc8:	0800e619 	.word	0x0800e619
 800adcc:	0800e7a4 	.word	0x0800e7a4
 800add0:	0800eac0 	.word	0x0800eac0
 800add4:	0800e9a0 	.word	0x0800e9a0
 800add8:	0800e978 	.word	0x0800e978
 800addc:	7ff00000 	.word	0x7ff00000
 800ade0:	7ca00000 	.word	0x7ca00000
 800ade4:	7fefffff 	.word	0x7fefffff
 800ade8:	f018 0310 	ands.w	r3, r8, #16
 800adec:	bf18      	it	ne
 800adee:	236a      	movne	r3, #106	; 0x6a
 800adf0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b1a8 <_strtod_l+0x978>
 800adf4:	9304      	str	r3, [sp, #16]
 800adf6:	4650      	mov	r0, sl
 800adf8:	4659      	mov	r1, fp
 800adfa:	2300      	movs	r3, #0
 800adfc:	f018 0f01 	tst.w	r8, #1
 800ae00:	d004      	beq.n	800ae0c <_strtod_l+0x5dc>
 800ae02:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ae06:	f7f5 fbf7 	bl	80005f8 <__aeabi_dmul>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ae10:	f109 0908 	add.w	r9, r9, #8
 800ae14:	d1f2      	bne.n	800adfc <_strtod_l+0x5cc>
 800ae16:	b10b      	cbz	r3, 800ae1c <_strtod_l+0x5ec>
 800ae18:	4682      	mov	sl, r0
 800ae1a:	468b      	mov	fp, r1
 800ae1c:	9b04      	ldr	r3, [sp, #16]
 800ae1e:	b1bb      	cbz	r3, 800ae50 <_strtod_l+0x620>
 800ae20:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ae24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	4659      	mov	r1, fp
 800ae2c:	dd10      	ble.n	800ae50 <_strtod_l+0x620>
 800ae2e:	2b1f      	cmp	r3, #31
 800ae30:	f340 8128 	ble.w	800b084 <_strtod_l+0x854>
 800ae34:	2b34      	cmp	r3, #52	; 0x34
 800ae36:	bfde      	ittt	le
 800ae38:	3b20      	suble	r3, #32
 800ae3a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800ae3e:	fa02 f303 	lslle.w	r3, r2, r3
 800ae42:	f04f 0a00 	mov.w	sl, #0
 800ae46:	bfcc      	ite	gt
 800ae48:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ae4c:	ea03 0b01 	andle.w	fp, r3, r1
 800ae50:	2200      	movs	r2, #0
 800ae52:	2300      	movs	r3, #0
 800ae54:	4650      	mov	r0, sl
 800ae56:	4659      	mov	r1, fp
 800ae58:	f7f5 fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d1a4      	bne.n	800adaa <_strtod_l+0x57a>
 800ae60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae66:	462b      	mov	r3, r5
 800ae68:	463a      	mov	r2, r7
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f002 f908 	bl	800d080 <__s2b>
 800ae70:	9009      	str	r0, [sp, #36]	; 0x24
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f43f af24 	beq.w	800acc0 <_strtod_l+0x490>
 800ae78:	9b07      	ldr	r3, [sp, #28]
 800ae7a:	1b9e      	subs	r6, r3, r6
 800ae7c:	9b08      	ldr	r3, [sp, #32]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfb4      	ite	lt
 800ae82:	4633      	movlt	r3, r6
 800ae84:	2300      	movge	r3, #0
 800ae86:	9310      	str	r3, [sp, #64]	; 0x40
 800ae88:	9b08      	ldr	r3, [sp, #32]
 800ae8a:	2500      	movs	r5, #0
 800ae8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ae90:	9318      	str	r3, [sp, #96]	; 0x60
 800ae92:	462e      	mov	r6, r5
 800ae94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae96:	4620      	mov	r0, r4
 800ae98:	6859      	ldr	r1, [r3, #4]
 800ae9a:	f002 f845 	bl	800cf28 <_Balloc>
 800ae9e:	9007      	str	r0, [sp, #28]
 800aea0:	2800      	cmp	r0, #0
 800aea2:	f43f af11 	beq.w	800acc8 <_strtod_l+0x498>
 800aea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea8:	691a      	ldr	r2, [r3, #16]
 800aeaa:	3202      	adds	r2, #2
 800aeac:	f103 010c 	add.w	r1, r3, #12
 800aeb0:	0092      	lsls	r2, r2, #2
 800aeb2:	300c      	adds	r0, #12
 800aeb4:	f7fe fd5c 	bl	8009970 <memcpy>
 800aeb8:	ec4b ab10 	vmov	d0, sl, fp
 800aebc:	aa20      	add	r2, sp, #128	; 0x80
 800aebe:	a91f      	add	r1, sp, #124	; 0x7c
 800aec0:	4620      	mov	r0, r4
 800aec2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800aec6:	f002 fc17 	bl	800d6f8 <__d2b>
 800aeca:	901e      	str	r0, [sp, #120]	; 0x78
 800aecc:	2800      	cmp	r0, #0
 800aece:	f43f aefb 	beq.w	800acc8 <_strtod_l+0x498>
 800aed2:	2101      	movs	r1, #1
 800aed4:	4620      	mov	r0, r4
 800aed6:	f002 f96d 	bl	800d1b4 <__i2b>
 800aeda:	4606      	mov	r6, r0
 800aedc:	2800      	cmp	r0, #0
 800aede:	f43f aef3 	beq.w	800acc8 <_strtod_l+0x498>
 800aee2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aee4:	9904      	ldr	r1, [sp, #16]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	bfab      	itete	ge
 800aeea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800aeec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800aeee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800aef0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800aef4:	bfac      	ite	ge
 800aef6:	eb03 0902 	addge.w	r9, r3, r2
 800aefa:	1ad7      	sublt	r7, r2, r3
 800aefc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aefe:	eba3 0801 	sub.w	r8, r3, r1
 800af02:	4490      	add	r8, r2
 800af04:	4ba3      	ldr	r3, [pc, #652]	; (800b194 <_strtod_l+0x964>)
 800af06:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800af0a:	4598      	cmp	r8, r3
 800af0c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af10:	f280 80cc 	bge.w	800b0ac <_strtod_l+0x87c>
 800af14:	eba3 0308 	sub.w	r3, r3, r8
 800af18:	2b1f      	cmp	r3, #31
 800af1a:	eba2 0203 	sub.w	r2, r2, r3
 800af1e:	f04f 0101 	mov.w	r1, #1
 800af22:	f300 80b6 	bgt.w	800b092 <_strtod_l+0x862>
 800af26:	fa01 f303 	lsl.w	r3, r1, r3
 800af2a:	9311      	str	r3, [sp, #68]	; 0x44
 800af2c:	2300      	movs	r3, #0
 800af2e:	930c      	str	r3, [sp, #48]	; 0x30
 800af30:	eb09 0802 	add.w	r8, r9, r2
 800af34:	9b04      	ldr	r3, [sp, #16]
 800af36:	45c1      	cmp	r9, r8
 800af38:	4417      	add	r7, r2
 800af3a:	441f      	add	r7, r3
 800af3c:	464b      	mov	r3, r9
 800af3e:	bfa8      	it	ge
 800af40:	4643      	movge	r3, r8
 800af42:	42bb      	cmp	r3, r7
 800af44:	bfa8      	it	ge
 800af46:	463b      	movge	r3, r7
 800af48:	2b00      	cmp	r3, #0
 800af4a:	bfc2      	ittt	gt
 800af4c:	eba8 0803 	subgt.w	r8, r8, r3
 800af50:	1aff      	subgt	r7, r7, r3
 800af52:	eba9 0903 	subgt.w	r9, r9, r3
 800af56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dd17      	ble.n	800af8c <_strtod_l+0x75c>
 800af5c:	4631      	mov	r1, r6
 800af5e:	461a      	mov	r2, r3
 800af60:	4620      	mov	r0, r4
 800af62:	f002 f9e3 	bl	800d32c <__pow5mult>
 800af66:	4606      	mov	r6, r0
 800af68:	2800      	cmp	r0, #0
 800af6a:	f43f aead 	beq.w	800acc8 <_strtod_l+0x498>
 800af6e:	4601      	mov	r1, r0
 800af70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af72:	4620      	mov	r0, r4
 800af74:	f002 f934 	bl	800d1e0 <__multiply>
 800af78:	900f      	str	r0, [sp, #60]	; 0x3c
 800af7a:	2800      	cmp	r0, #0
 800af7c:	f43f aea4 	beq.w	800acc8 <_strtod_l+0x498>
 800af80:	991e      	ldr	r1, [sp, #120]	; 0x78
 800af82:	4620      	mov	r0, r4
 800af84:	f002 f810 	bl	800cfa8 <_Bfree>
 800af88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af8a:	931e      	str	r3, [sp, #120]	; 0x78
 800af8c:	f1b8 0f00 	cmp.w	r8, #0
 800af90:	f300 8091 	bgt.w	800b0b6 <_strtod_l+0x886>
 800af94:	9b08      	ldr	r3, [sp, #32]
 800af96:	2b00      	cmp	r3, #0
 800af98:	dd08      	ble.n	800afac <_strtod_l+0x77c>
 800af9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af9c:	9907      	ldr	r1, [sp, #28]
 800af9e:	4620      	mov	r0, r4
 800afa0:	f002 f9c4 	bl	800d32c <__pow5mult>
 800afa4:	9007      	str	r0, [sp, #28]
 800afa6:	2800      	cmp	r0, #0
 800afa8:	f43f ae8e 	beq.w	800acc8 <_strtod_l+0x498>
 800afac:	2f00      	cmp	r7, #0
 800afae:	dd08      	ble.n	800afc2 <_strtod_l+0x792>
 800afb0:	9907      	ldr	r1, [sp, #28]
 800afb2:	463a      	mov	r2, r7
 800afb4:	4620      	mov	r0, r4
 800afb6:	f002 fa13 	bl	800d3e0 <__lshift>
 800afba:	9007      	str	r0, [sp, #28]
 800afbc:	2800      	cmp	r0, #0
 800afbe:	f43f ae83 	beq.w	800acc8 <_strtod_l+0x498>
 800afc2:	f1b9 0f00 	cmp.w	r9, #0
 800afc6:	dd08      	ble.n	800afda <_strtod_l+0x7aa>
 800afc8:	4631      	mov	r1, r6
 800afca:	464a      	mov	r2, r9
 800afcc:	4620      	mov	r0, r4
 800afce:	f002 fa07 	bl	800d3e0 <__lshift>
 800afd2:	4606      	mov	r6, r0
 800afd4:	2800      	cmp	r0, #0
 800afd6:	f43f ae77 	beq.w	800acc8 <_strtod_l+0x498>
 800afda:	9a07      	ldr	r2, [sp, #28]
 800afdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800afde:	4620      	mov	r0, r4
 800afe0:	f002 fa86 	bl	800d4f0 <__mdiff>
 800afe4:	4605      	mov	r5, r0
 800afe6:	2800      	cmp	r0, #0
 800afe8:	f43f ae6e 	beq.w	800acc8 <_strtod_l+0x498>
 800afec:	68c3      	ldr	r3, [r0, #12]
 800afee:	930f      	str	r3, [sp, #60]	; 0x3c
 800aff0:	2300      	movs	r3, #0
 800aff2:	60c3      	str	r3, [r0, #12]
 800aff4:	4631      	mov	r1, r6
 800aff6:	f002 fa5f 	bl	800d4b8 <__mcmp>
 800affa:	2800      	cmp	r0, #0
 800affc:	da65      	bge.n	800b0ca <_strtod_l+0x89a>
 800affe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b000:	ea53 030a 	orrs.w	r3, r3, sl
 800b004:	f040 8087 	bne.w	800b116 <_strtod_l+0x8e6>
 800b008:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f040 8082 	bne.w	800b116 <_strtod_l+0x8e6>
 800b012:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b016:	0d1b      	lsrs	r3, r3, #20
 800b018:	051b      	lsls	r3, r3, #20
 800b01a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b01e:	d97a      	bls.n	800b116 <_strtod_l+0x8e6>
 800b020:	696b      	ldr	r3, [r5, #20]
 800b022:	b913      	cbnz	r3, 800b02a <_strtod_l+0x7fa>
 800b024:	692b      	ldr	r3, [r5, #16]
 800b026:	2b01      	cmp	r3, #1
 800b028:	dd75      	ble.n	800b116 <_strtod_l+0x8e6>
 800b02a:	4629      	mov	r1, r5
 800b02c:	2201      	movs	r2, #1
 800b02e:	4620      	mov	r0, r4
 800b030:	f002 f9d6 	bl	800d3e0 <__lshift>
 800b034:	4631      	mov	r1, r6
 800b036:	4605      	mov	r5, r0
 800b038:	f002 fa3e 	bl	800d4b8 <__mcmp>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	dd6a      	ble.n	800b116 <_strtod_l+0x8e6>
 800b040:	9904      	ldr	r1, [sp, #16]
 800b042:	4a55      	ldr	r2, [pc, #340]	; (800b198 <_strtod_l+0x968>)
 800b044:	465b      	mov	r3, fp
 800b046:	2900      	cmp	r1, #0
 800b048:	f000 8085 	beq.w	800b156 <_strtod_l+0x926>
 800b04c:	ea02 010b 	and.w	r1, r2, fp
 800b050:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b054:	dc7f      	bgt.n	800b156 <_strtod_l+0x926>
 800b056:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b05a:	f77f aeaa 	ble.w	800adb2 <_strtod_l+0x582>
 800b05e:	4a4f      	ldr	r2, [pc, #316]	; (800b19c <_strtod_l+0x96c>)
 800b060:	2300      	movs	r3, #0
 800b062:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b066:	4650      	mov	r0, sl
 800b068:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b06c:	4659      	mov	r1, fp
 800b06e:	f7f5 fac3 	bl	80005f8 <__aeabi_dmul>
 800b072:	460b      	mov	r3, r1
 800b074:	4303      	orrs	r3, r0
 800b076:	bf08      	it	eq
 800b078:	2322      	moveq	r3, #34	; 0x22
 800b07a:	4682      	mov	sl, r0
 800b07c:	468b      	mov	fp, r1
 800b07e:	bf08      	it	eq
 800b080:	6023      	streq	r3, [r4, #0]
 800b082:	e62b      	b.n	800acdc <_strtod_l+0x4ac>
 800b084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b088:	fa02 f303 	lsl.w	r3, r2, r3
 800b08c:	ea03 0a0a 	and.w	sl, r3, sl
 800b090:	e6de      	b.n	800ae50 <_strtod_l+0x620>
 800b092:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b096:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b09a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b09e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b0a2:	fa01 f308 	lsl.w	r3, r1, r8
 800b0a6:	930c      	str	r3, [sp, #48]	; 0x30
 800b0a8:	9111      	str	r1, [sp, #68]	; 0x44
 800b0aa:	e741      	b.n	800af30 <_strtod_l+0x700>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	930c      	str	r3, [sp, #48]	; 0x30
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	9311      	str	r3, [sp, #68]	; 0x44
 800b0b4:	e73c      	b.n	800af30 <_strtod_l+0x700>
 800b0b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b0b8:	4642      	mov	r2, r8
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f002 f990 	bl	800d3e0 <__lshift>
 800b0c0:	901e      	str	r0, [sp, #120]	; 0x78
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	f47f af66 	bne.w	800af94 <_strtod_l+0x764>
 800b0c8:	e5fe      	b.n	800acc8 <_strtod_l+0x498>
 800b0ca:	465f      	mov	r7, fp
 800b0cc:	d16e      	bne.n	800b1ac <_strtod_l+0x97c>
 800b0ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0d4:	b342      	cbz	r2, 800b128 <_strtod_l+0x8f8>
 800b0d6:	4a32      	ldr	r2, [pc, #200]	; (800b1a0 <_strtod_l+0x970>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d128      	bne.n	800b12e <_strtod_l+0x8fe>
 800b0dc:	9b04      	ldr	r3, [sp, #16]
 800b0de:	4650      	mov	r0, sl
 800b0e0:	b1eb      	cbz	r3, 800b11e <_strtod_l+0x8ee>
 800b0e2:	4a2d      	ldr	r2, [pc, #180]	; (800b198 <_strtod_l+0x968>)
 800b0e4:	403a      	ands	r2, r7
 800b0e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b0ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b0ee:	d819      	bhi.n	800b124 <_strtod_l+0x8f4>
 800b0f0:	0d12      	lsrs	r2, r2, #20
 800b0f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b0f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b0fa:	4298      	cmp	r0, r3
 800b0fc:	d117      	bne.n	800b12e <_strtod_l+0x8fe>
 800b0fe:	4b29      	ldr	r3, [pc, #164]	; (800b1a4 <_strtod_l+0x974>)
 800b100:	429f      	cmp	r7, r3
 800b102:	d102      	bne.n	800b10a <_strtod_l+0x8da>
 800b104:	3001      	adds	r0, #1
 800b106:	f43f addf 	beq.w	800acc8 <_strtod_l+0x498>
 800b10a:	4b23      	ldr	r3, [pc, #140]	; (800b198 <_strtod_l+0x968>)
 800b10c:	403b      	ands	r3, r7
 800b10e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b112:	f04f 0a00 	mov.w	sl, #0
 800b116:	9b04      	ldr	r3, [sp, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1a0      	bne.n	800b05e <_strtod_l+0x82e>
 800b11c:	e5de      	b.n	800acdc <_strtod_l+0x4ac>
 800b11e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b122:	e7ea      	b.n	800b0fa <_strtod_l+0x8ca>
 800b124:	460b      	mov	r3, r1
 800b126:	e7e8      	b.n	800b0fa <_strtod_l+0x8ca>
 800b128:	ea53 030a 	orrs.w	r3, r3, sl
 800b12c:	d088      	beq.n	800b040 <_strtod_l+0x810>
 800b12e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b130:	b1db      	cbz	r3, 800b16a <_strtod_l+0x93a>
 800b132:	423b      	tst	r3, r7
 800b134:	d0ef      	beq.n	800b116 <_strtod_l+0x8e6>
 800b136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b138:	9a04      	ldr	r2, [sp, #16]
 800b13a:	4650      	mov	r0, sl
 800b13c:	4659      	mov	r1, fp
 800b13e:	b1c3      	cbz	r3, 800b172 <_strtod_l+0x942>
 800b140:	f7ff fb5a 	bl	800a7f8 <sulp>
 800b144:	4602      	mov	r2, r0
 800b146:	460b      	mov	r3, r1
 800b148:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b14c:	f7f5 f89e 	bl	800028c <__adddf3>
 800b150:	4682      	mov	sl, r0
 800b152:	468b      	mov	fp, r1
 800b154:	e7df      	b.n	800b116 <_strtod_l+0x8e6>
 800b156:	4013      	ands	r3, r2
 800b158:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b15c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b160:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b164:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b168:	e7d5      	b.n	800b116 <_strtod_l+0x8e6>
 800b16a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b16c:	ea13 0f0a 	tst.w	r3, sl
 800b170:	e7e0      	b.n	800b134 <_strtod_l+0x904>
 800b172:	f7ff fb41 	bl	800a7f8 <sulp>
 800b176:	4602      	mov	r2, r0
 800b178:	460b      	mov	r3, r1
 800b17a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b17e:	f7f5 f883 	bl	8000288 <__aeabi_dsub>
 800b182:	2200      	movs	r2, #0
 800b184:	2300      	movs	r3, #0
 800b186:	4682      	mov	sl, r0
 800b188:	468b      	mov	fp, r1
 800b18a:	f7f5 fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d0c1      	beq.n	800b116 <_strtod_l+0x8e6>
 800b192:	e60e      	b.n	800adb2 <_strtod_l+0x582>
 800b194:	fffffc02 	.word	0xfffffc02
 800b198:	7ff00000 	.word	0x7ff00000
 800b19c:	39500000 	.word	0x39500000
 800b1a0:	000fffff 	.word	0x000fffff
 800b1a4:	7fefffff 	.word	0x7fefffff
 800b1a8:	0800e678 	.word	0x0800e678
 800b1ac:	4631      	mov	r1, r6
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	f002 fafe 	bl	800d7b0 <__ratio>
 800b1b4:	ec59 8b10 	vmov	r8, r9, d0
 800b1b8:	ee10 0a10 	vmov	r0, s0
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1c2:	4649      	mov	r1, r9
 800b1c4:	f7f5 fc94 	bl	8000af0 <__aeabi_dcmple>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d07c      	beq.n	800b2c6 <_strtod_l+0xa96>
 800b1cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d04c      	beq.n	800b26c <_strtod_l+0xa3c>
 800b1d2:	4b95      	ldr	r3, [pc, #596]	; (800b428 <_strtod_l+0xbf8>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b1da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b428 <_strtod_l+0xbf8>
 800b1de:	f04f 0800 	mov.w	r8, #0
 800b1e2:	4b92      	ldr	r3, [pc, #584]	; (800b42c <_strtod_l+0xbfc>)
 800b1e4:	403b      	ands	r3, r7
 800b1e6:	9311      	str	r3, [sp, #68]	; 0x44
 800b1e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b1ea:	4b91      	ldr	r3, [pc, #580]	; (800b430 <_strtod_l+0xc00>)
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	f040 80b2 	bne.w	800b356 <_strtod_l+0xb26>
 800b1f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b1f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b1fe:	ec4b ab10 	vmov	d0, sl, fp
 800b202:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b206:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b20a:	f002 f9f9 	bl	800d600 <__ulp>
 800b20e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b212:	ec53 2b10 	vmov	r2, r3, d0
 800b216:	f7f5 f9ef 	bl	80005f8 <__aeabi_dmul>
 800b21a:	4652      	mov	r2, sl
 800b21c:	465b      	mov	r3, fp
 800b21e:	f7f5 f835 	bl	800028c <__adddf3>
 800b222:	460b      	mov	r3, r1
 800b224:	4981      	ldr	r1, [pc, #516]	; (800b42c <_strtod_l+0xbfc>)
 800b226:	4a83      	ldr	r2, [pc, #524]	; (800b434 <_strtod_l+0xc04>)
 800b228:	4019      	ands	r1, r3
 800b22a:	4291      	cmp	r1, r2
 800b22c:	4682      	mov	sl, r0
 800b22e:	d95e      	bls.n	800b2ee <_strtod_l+0xabe>
 800b230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b232:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b236:	4293      	cmp	r3, r2
 800b238:	d103      	bne.n	800b242 <_strtod_l+0xa12>
 800b23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b23c:	3301      	adds	r3, #1
 800b23e:	f43f ad43 	beq.w	800acc8 <_strtod_l+0x498>
 800b242:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b440 <_strtod_l+0xc10>
 800b246:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b24a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b24c:	4620      	mov	r0, r4
 800b24e:	f001 feab 	bl	800cfa8 <_Bfree>
 800b252:	9907      	ldr	r1, [sp, #28]
 800b254:	4620      	mov	r0, r4
 800b256:	f001 fea7 	bl	800cfa8 <_Bfree>
 800b25a:	4631      	mov	r1, r6
 800b25c:	4620      	mov	r0, r4
 800b25e:	f001 fea3 	bl	800cfa8 <_Bfree>
 800b262:	4629      	mov	r1, r5
 800b264:	4620      	mov	r0, r4
 800b266:	f001 fe9f 	bl	800cfa8 <_Bfree>
 800b26a:	e613      	b.n	800ae94 <_strtod_l+0x664>
 800b26c:	f1ba 0f00 	cmp.w	sl, #0
 800b270:	d11b      	bne.n	800b2aa <_strtod_l+0xa7a>
 800b272:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b276:	b9f3      	cbnz	r3, 800b2b6 <_strtod_l+0xa86>
 800b278:	4b6b      	ldr	r3, [pc, #428]	; (800b428 <_strtod_l+0xbf8>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	4640      	mov	r0, r8
 800b27e:	4649      	mov	r1, r9
 800b280:	f7f5 fc2c 	bl	8000adc <__aeabi_dcmplt>
 800b284:	b9d0      	cbnz	r0, 800b2bc <_strtod_l+0xa8c>
 800b286:	4640      	mov	r0, r8
 800b288:	4649      	mov	r1, r9
 800b28a:	4b6b      	ldr	r3, [pc, #428]	; (800b438 <_strtod_l+0xc08>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	f7f5 f9b3 	bl	80005f8 <__aeabi_dmul>
 800b292:	4680      	mov	r8, r0
 800b294:	4689      	mov	r9, r1
 800b296:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b29a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b29e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b2a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b2a8:	e79b      	b.n	800b1e2 <_strtod_l+0x9b2>
 800b2aa:	f1ba 0f01 	cmp.w	sl, #1
 800b2ae:	d102      	bne.n	800b2b6 <_strtod_l+0xa86>
 800b2b0:	2f00      	cmp	r7, #0
 800b2b2:	f43f ad7e 	beq.w	800adb2 <_strtod_l+0x582>
 800b2b6:	4b61      	ldr	r3, [pc, #388]	; (800b43c <_strtod_l+0xc0c>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	e78c      	b.n	800b1d6 <_strtod_l+0x9a6>
 800b2bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b438 <_strtod_l+0xc08>
 800b2c0:	f04f 0800 	mov.w	r8, #0
 800b2c4:	e7e7      	b.n	800b296 <_strtod_l+0xa66>
 800b2c6:	4b5c      	ldr	r3, [pc, #368]	; (800b438 <_strtod_l+0xc08>)
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f7f5 f993 	bl	80005f8 <__aeabi_dmul>
 800b2d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2d4:	4680      	mov	r8, r0
 800b2d6:	4689      	mov	r9, r1
 800b2d8:	b933      	cbnz	r3, 800b2e8 <_strtod_l+0xab8>
 800b2da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2de:	9012      	str	r0, [sp, #72]	; 0x48
 800b2e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b2e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b2e6:	e7dd      	b.n	800b2a4 <_strtod_l+0xa74>
 800b2e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b2ec:	e7f9      	b.n	800b2e2 <_strtod_l+0xab2>
 800b2ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b2f2:	9b04      	ldr	r3, [sp, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1a8      	bne.n	800b24a <_strtod_l+0xa1a>
 800b2f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b2fe:	0d1b      	lsrs	r3, r3, #20
 800b300:	051b      	lsls	r3, r3, #20
 800b302:	429a      	cmp	r2, r3
 800b304:	d1a1      	bne.n	800b24a <_strtod_l+0xa1a>
 800b306:	4640      	mov	r0, r8
 800b308:	4649      	mov	r1, r9
 800b30a:	f7f5 fcd5 	bl	8000cb8 <__aeabi_d2lz>
 800b30e:	f7f5 f945 	bl	800059c <__aeabi_l2d>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	4640      	mov	r0, r8
 800b318:	4649      	mov	r1, r9
 800b31a:	f7f4 ffb5 	bl	8000288 <__aeabi_dsub>
 800b31e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b320:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b324:	ea43 030a 	orr.w	r3, r3, sl
 800b328:	4313      	orrs	r3, r2
 800b32a:	4680      	mov	r8, r0
 800b32c:	4689      	mov	r9, r1
 800b32e:	d053      	beq.n	800b3d8 <_strtod_l+0xba8>
 800b330:	a335      	add	r3, pc, #212	; (adr r3, 800b408 <_strtod_l+0xbd8>)
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	f7f5 fbd1 	bl	8000adc <__aeabi_dcmplt>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	f47f acce 	bne.w	800acdc <_strtod_l+0x4ac>
 800b340:	a333      	add	r3, pc, #204	; (adr r3, 800b410 <_strtod_l+0xbe0>)
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	4640      	mov	r0, r8
 800b348:	4649      	mov	r1, r9
 800b34a:	f7f5 fbe5 	bl	8000b18 <__aeabi_dcmpgt>
 800b34e:	2800      	cmp	r0, #0
 800b350:	f43f af7b 	beq.w	800b24a <_strtod_l+0xa1a>
 800b354:	e4c2      	b.n	800acdc <_strtod_l+0x4ac>
 800b356:	9b04      	ldr	r3, [sp, #16]
 800b358:	b333      	cbz	r3, 800b3a8 <_strtod_l+0xb78>
 800b35a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b35c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b360:	d822      	bhi.n	800b3a8 <_strtod_l+0xb78>
 800b362:	a32d      	add	r3, pc, #180	; (adr r3, 800b418 <_strtod_l+0xbe8>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	4640      	mov	r0, r8
 800b36a:	4649      	mov	r1, r9
 800b36c:	f7f5 fbc0 	bl	8000af0 <__aeabi_dcmple>
 800b370:	b1a0      	cbz	r0, 800b39c <_strtod_l+0xb6c>
 800b372:	4649      	mov	r1, r9
 800b374:	4640      	mov	r0, r8
 800b376:	f7f5 fc17 	bl	8000ba8 <__aeabi_d2uiz>
 800b37a:	2801      	cmp	r0, #1
 800b37c:	bf38      	it	cc
 800b37e:	2001      	movcc	r0, #1
 800b380:	f7f5 f8c0 	bl	8000504 <__aeabi_ui2d>
 800b384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b386:	4680      	mov	r8, r0
 800b388:	4689      	mov	r9, r1
 800b38a:	bb13      	cbnz	r3, 800b3d2 <_strtod_l+0xba2>
 800b38c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b390:	9014      	str	r0, [sp, #80]	; 0x50
 800b392:	9315      	str	r3, [sp, #84]	; 0x54
 800b394:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b398:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b39c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b39e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b3a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b3a4:	1a9b      	subs	r3, r3, r2
 800b3a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b3a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b3b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b3b4:	f002 f924 	bl	800d600 <__ulp>
 800b3b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3bc:	ec53 2b10 	vmov	r2, r3, d0
 800b3c0:	f7f5 f91a 	bl	80005f8 <__aeabi_dmul>
 800b3c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b3c8:	f7f4 ff60 	bl	800028c <__adddf3>
 800b3cc:	4682      	mov	sl, r0
 800b3ce:	468b      	mov	fp, r1
 800b3d0:	e78f      	b.n	800b2f2 <_strtod_l+0xac2>
 800b3d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b3d6:	e7dd      	b.n	800b394 <_strtod_l+0xb64>
 800b3d8:	a311      	add	r3, pc, #68	; (adr r3, 800b420 <_strtod_l+0xbf0>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f5 fb7d 	bl	8000adc <__aeabi_dcmplt>
 800b3e2:	e7b4      	b.n	800b34e <_strtod_l+0xb1e>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	930e      	str	r3, [sp, #56]	; 0x38
 800b3e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b3ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	f7ff ba65 	b.w	800a8bc <_strtod_l+0x8c>
 800b3f2:	2b65      	cmp	r3, #101	; 0x65
 800b3f4:	f43f ab5d 	beq.w	800aab2 <_strtod_l+0x282>
 800b3f8:	2b45      	cmp	r3, #69	; 0x45
 800b3fa:	f43f ab5a 	beq.w	800aab2 <_strtod_l+0x282>
 800b3fe:	2201      	movs	r2, #1
 800b400:	f7ff bb92 	b.w	800ab28 <_strtod_l+0x2f8>
 800b404:	f3af 8000 	nop.w
 800b408:	94a03595 	.word	0x94a03595
 800b40c:	3fdfffff 	.word	0x3fdfffff
 800b410:	35afe535 	.word	0x35afe535
 800b414:	3fe00000 	.word	0x3fe00000
 800b418:	ffc00000 	.word	0xffc00000
 800b41c:	41dfffff 	.word	0x41dfffff
 800b420:	94a03595 	.word	0x94a03595
 800b424:	3fcfffff 	.word	0x3fcfffff
 800b428:	3ff00000 	.word	0x3ff00000
 800b42c:	7ff00000 	.word	0x7ff00000
 800b430:	7fe00000 	.word	0x7fe00000
 800b434:	7c9fffff 	.word	0x7c9fffff
 800b438:	3fe00000 	.word	0x3fe00000
 800b43c:	bff00000 	.word	0xbff00000
 800b440:	7fefffff 	.word	0x7fefffff

0800b444 <_strtod_r>:
 800b444:	4b01      	ldr	r3, [pc, #4]	; (800b44c <_strtod_r+0x8>)
 800b446:	f7ff b9f3 	b.w	800a830 <_strtod_l>
 800b44a:	bf00      	nop
 800b44c:	20000078 	.word	0x20000078

0800b450 <_strtol_l.isra.0>:
 800b450:	2b01      	cmp	r3, #1
 800b452:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b456:	d001      	beq.n	800b45c <_strtol_l.isra.0+0xc>
 800b458:	2b24      	cmp	r3, #36	; 0x24
 800b45a:	d906      	bls.n	800b46a <_strtol_l.isra.0+0x1a>
 800b45c:	f7fe fa5e 	bl	800991c <__errno>
 800b460:	2316      	movs	r3, #22
 800b462:	6003      	str	r3, [r0, #0]
 800b464:	2000      	movs	r0, #0
 800b466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46a:	4f3a      	ldr	r7, [pc, #232]	; (800b554 <_strtol_l.isra.0+0x104>)
 800b46c:	468e      	mov	lr, r1
 800b46e:	4676      	mov	r6, lr
 800b470:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b474:	5de5      	ldrb	r5, [r4, r7]
 800b476:	f015 0508 	ands.w	r5, r5, #8
 800b47a:	d1f8      	bne.n	800b46e <_strtol_l.isra.0+0x1e>
 800b47c:	2c2d      	cmp	r4, #45	; 0x2d
 800b47e:	d134      	bne.n	800b4ea <_strtol_l.isra.0+0x9a>
 800b480:	f89e 4000 	ldrb.w	r4, [lr]
 800b484:	f04f 0801 	mov.w	r8, #1
 800b488:	f106 0e02 	add.w	lr, r6, #2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d05c      	beq.n	800b54a <_strtol_l.isra.0+0xfa>
 800b490:	2b10      	cmp	r3, #16
 800b492:	d10c      	bne.n	800b4ae <_strtol_l.isra.0+0x5e>
 800b494:	2c30      	cmp	r4, #48	; 0x30
 800b496:	d10a      	bne.n	800b4ae <_strtol_l.isra.0+0x5e>
 800b498:	f89e 4000 	ldrb.w	r4, [lr]
 800b49c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b4a0:	2c58      	cmp	r4, #88	; 0x58
 800b4a2:	d14d      	bne.n	800b540 <_strtol_l.isra.0+0xf0>
 800b4a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b4a8:	2310      	movs	r3, #16
 800b4aa:	f10e 0e02 	add.w	lr, lr, #2
 800b4ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b4b2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b4b6:	2600      	movs	r6, #0
 800b4b8:	fbbc f9f3 	udiv	r9, ip, r3
 800b4bc:	4635      	mov	r5, r6
 800b4be:	fb03 ca19 	mls	sl, r3, r9, ip
 800b4c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b4c6:	2f09      	cmp	r7, #9
 800b4c8:	d818      	bhi.n	800b4fc <_strtol_l.isra.0+0xac>
 800b4ca:	463c      	mov	r4, r7
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	dd24      	ble.n	800b51a <_strtol_l.isra.0+0xca>
 800b4d0:	2e00      	cmp	r6, #0
 800b4d2:	db1f      	blt.n	800b514 <_strtol_l.isra.0+0xc4>
 800b4d4:	45a9      	cmp	r9, r5
 800b4d6:	d31d      	bcc.n	800b514 <_strtol_l.isra.0+0xc4>
 800b4d8:	d101      	bne.n	800b4de <_strtol_l.isra.0+0x8e>
 800b4da:	45a2      	cmp	sl, r4
 800b4dc:	db1a      	blt.n	800b514 <_strtol_l.isra.0+0xc4>
 800b4de:	fb05 4503 	mla	r5, r5, r3, r4
 800b4e2:	2601      	movs	r6, #1
 800b4e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b4e8:	e7eb      	b.n	800b4c2 <_strtol_l.isra.0+0x72>
 800b4ea:	2c2b      	cmp	r4, #43	; 0x2b
 800b4ec:	bf08      	it	eq
 800b4ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b4f2:	46a8      	mov	r8, r5
 800b4f4:	bf08      	it	eq
 800b4f6:	f106 0e02 	addeq.w	lr, r6, #2
 800b4fa:	e7c7      	b.n	800b48c <_strtol_l.isra.0+0x3c>
 800b4fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b500:	2f19      	cmp	r7, #25
 800b502:	d801      	bhi.n	800b508 <_strtol_l.isra.0+0xb8>
 800b504:	3c37      	subs	r4, #55	; 0x37
 800b506:	e7e1      	b.n	800b4cc <_strtol_l.isra.0+0x7c>
 800b508:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b50c:	2f19      	cmp	r7, #25
 800b50e:	d804      	bhi.n	800b51a <_strtol_l.isra.0+0xca>
 800b510:	3c57      	subs	r4, #87	; 0x57
 800b512:	e7db      	b.n	800b4cc <_strtol_l.isra.0+0x7c>
 800b514:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b518:	e7e4      	b.n	800b4e4 <_strtol_l.isra.0+0x94>
 800b51a:	2e00      	cmp	r6, #0
 800b51c:	da05      	bge.n	800b52a <_strtol_l.isra.0+0xda>
 800b51e:	2322      	movs	r3, #34	; 0x22
 800b520:	6003      	str	r3, [r0, #0]
 800b522:	4665      	mov	r5, ip
 800b524:	b942      	cbnz	r2, 800b538 <_strtol_l.isra.0+0xe8>
 800b526:	4628      	mov	r0, r5
 800b528:	e79d      	b.n	800b466 <_strtol_l.isra.0+0x16>
 800b52a:	f1b8 0f00 	cmp.w	r8, #0
 800b52e:	d000      	beq.n	800b532 <_strtol_l.isra.0+0xe2>
 800b530:	426d      	negs	r5, r5
 800b532:	2a00      	cmp	r2, #0
 800b534:	d0f7      	beq.n	800b526 <_strtol_l.isra.0+0xd6>
 800b536:	b10e      	cbz	r6, 800b53c <_strtol_l.isra.0+0xec>
 800b538:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800b53c:	6011      	str	r1, [r2, #0]
 800b53e:	e7f2      	b.n	800b526 <_strtol_l.isra.0+0xd6>
 800b540:	2430      	movs	r4, #48	; 0x30
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1b3      	bne.n	800b4ae <_strtol_l.isra.0+0x5e>
 800b546:	2308      	movs	r3, #8
 800b548:	e7b1      	b.n	800b4ae <_strtol_l.isra.0+0x5e>
 800b54a:	2c30      	cmp	r4, #48	; 0x30
 800b54c:	d0a4      	beq.n	800b498 <_strtol_l.isra.0+0x48>
 800b54e:	230a      	movs	r3, #10
 800b550:	e7ad      	b.n	800b4ae <_strtol_l.isra.0+0x5e>
 800b552:	bf00      	nop
 800b554:	0800e6a1 	.word	0x0800e6a1

0800b558 <_strtol_r>:
 800b558:	f7ff bf7a 	b.w	800b450 <_strtol_l.isra.0>

0800b55c <__swbuf_r>:
 800b55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55e:	460e      	mov	r6, r1
 800b560:	4614      	mov	r4, r2
 800b562:	4605      	mov	r5, r0
 800b564:	b118      	cbz	r0, 800b56e <__swbuf_r+0x12>
 800b566:	6983      	ldr	r3, [r0, #24]
 800b568:	b90b      	cbnz	r3, 800b56e <__swbuf_r+0x12>
 800b56a:	f001 f84b 	bl	800c604 <__sinit>
 800b56e:	4b21      	ldr	r3, [pc, #132]	; (800b5f4 <__swbuf_r+0x98>)
 800b570:	429c      	cmp	r4, r3
 800b572:	d12b      	bne.n	800b5cc <__swbuf_r+0x70>
 800b574:	686c      	ldr	r4, [r5, #4]
 800b576:	69a3      	ldr	r3, [r4, #24]
 800b578:	60a3      	str	r3, [r4, #8]
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	071a      	lsls	r2, r3, #28
 800b57e:	d52f      	bpl.n	800b5e0 <__swbuf_r+0x84>
 800b580:	6923      	ldr	r3, [r4, #16]
 800b582:	b36b      	cbz	r3, 800b5e0 <__swbuf_r+0x84>
 800b584:	6923      	ldr	r3, [r4, #16]
 800b586:	6820      	ldr	r0, [r4, #0]
 800b588:	1ac0      	subs	r0, r0, r3
 800b58a:	6963      	ldr	r3, [r4, #20]
 800b58c:	b2f6      	uxtb	r6, r6
 800b58e:	4283      	cmp	r3, r0
 800b590:	4637      	mov	r7, r6
 800b592:	dc04      	bgt.n	800b59e <__swbuf_r+0x42>
 800b594:	4621      	mov	r1, r4
 800b596:	4628      	mov	r0, r5
 800b598:	f000 ffa0 	bl	800c4dc <_fflush_r>
 800b59c:	bb30      	cbnz	r0, 800b5ec <__swbuf_r+0x90>
 800b59e:	68a3      	ldr	r3, [r4, #8]
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	60a3      	str	r3, [r4, #8]
 800b5a4:	6823      	ldr	r3, [r4, #0]
 800b5a6:	1c5a      	adds	r2, r3, #1
 800b5a8:	6022      	str	r2, [r4, #0]
 800b5aa:	701e      	strb	r6, [r3, #0]
 800b5ac:	6963      	ldr	r3, [r4, #20]
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	4283      	cmp	r3, r0
 800b5b2:	d004      	beq.n	800b5be <__swbuf_r+0x62>
 800b5b4:	89a3      	ldrh	r3, [r4, #12]
 800b5b6:	07db      	lsls	r3, r3, #31
 800b5b8:	d506      	bpl.n	800b5c8 <__swbuf_r+0x6c>
 800b5ba:	2e0a      	cmp	r6, #10
 800b5bc:	d104      	bne.n	800b5c8 <__swbuf_r+0x6c>
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	f000 ff8b 	bl	800c4dc <_fflush_r>
 800b5c6:	b988      	cbnz	r0, 800b5ec <__swbuf_r+0x90>
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5cc:	4b0a      	ldr	r3, [pc, #40]	; (800b5f8 <__swbuf_r+0x9c>)
 800b5ce:	429c      	cmp	r4, r3
 800b5d0:	d101      	bne.n	800b5d6 <__swbuf_r+0x7a>
 800b5d2:	68ac      	ldr	r4, [r5, #8]
 800b5d4:	e7cf      	b.n	800b576 <__swbuf_r+0x1a>
 800b5d6:	4b09      	ldr	r3, [pc, #36]	; (800b5fc <__swbuf_r+0xa0>)
 800b5d8:	429c      	cmp	r4, r3
 800b5da:	bf08      	it	eq
 800b5dc:	68ec      	ldreq	r4, [r5, #12]
 800b5de:	e7ca      	b.n	800b576 <__swbuf_r+0x1a>
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f000 f80c 	bl	800b600 <__swsetup_r>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d0cb      	beq.n	800b584 <__swbuf_r+0x28>
 800b5ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b5f0:	e7ea      	b.n	800b5c8 <__swbuf_r+0x6c>
 800b5f2:	bf00      	nop
 800b5f4:	0800e858 	.word	0x0800e858
 800b5f8:	0800e878 	.word	0x0800e878
 800b5fc:	0800e838 	.word	0x0800e838

0800b600 <__swsetup_r>:
 800b600:	4b32      	ldr	r3, [pc, #200]	; (800b6cc <__swsetup_r+0xcc>)
 800b602:	b570      	push	{r4, r5, r6, lr}
 800b604:	681d      	ldr	r5, [r3, #0]
 800b606:	4606      	mov	r6, r0
 800b608:	460c      	mov	r4, r1
 800b60a:	b125      	cbz	r5, 800b616 <__swsetup_r+0x16>
 800b60c:	69ab      	ldr	r3, [r5, #24]
 800b60e:	b913      	cbnz	r3, 800b616 <__swsetup_r+0x16>
 800b610:	4628      	mov	r0, r5
 800b612:	f000 fff7 	bl	800c604 <__sinit>
 800b616:	4b2e      	ldr	r3, [pc, #184]	; (800b6d0 <__swsetup_r+0xd0>)
 800b618:	429c      	cmp	r4, r3
 800b61a:	d10f      	bne.n	800b63c <__swsetup_r+0x3c>
 800b61c:	686c      	ldr	r4, [r5, #4]
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b624:	0719      	lsls	r1, r3, #28
 800b626:	d42c      	bmi.n	800b682 <__swsetup_r+0x82>
 800b628:	06dd      	lsls	r5, r3, #27
 800b62a:	d411      	bmi.n	800b650 <__swsetup_r+0x50>
 800b62c:	2309      	movs	r3, #9
 800b62e:	6033      	str	r3, [r6, #0]
 800b630:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b63a:	e03e      	b.n	800b6ba <__swsetup_r+0xba>
 800b63c:	4b25      	ldr	r3, [pc, #148]	; (800b6d4 <__swsetup_r+0xd4>)
 800b63e:	429c      	cmp	r4, r3
 800b640:	d101      	bne.n	800b646 <__swsetup_r+0x46>
 800b642:	68ac      	ldr	r4, [r5, #8]
 800b644:	e7eb      	b.n	800b61e <__swsetup_r+0x1e>
 800b646:	4b24      	ldr	r3, [pc, #144]	; (800b6d8 <__swsetup_r+0xd8>)
 800b648:	429c      	cmp	r4, r3
 800b64a:	bf08      	it	eq
 800b64c:	68ec      	ldreq	r4, [r5, #12]
 800b64e:	e7e6      	b.n	800b61e <__swsetup_r+0x1e>
 800b650:	0758      	lsls	r0, r3, #29
 800b652:	d512      	bpl.n	800b67a <__swsetup_r+0x7a>
 800b654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b656:	b141      	cbz	r1, 800b66a <__swsetup_r+0x6a>
 800b658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b65c:	4299      	cmp	r1, r3
 800b65e:	d002      	beq.n	800b666 <__swsetup_r+0x66>
 800b660:	4630      	mov	r0, r6
 800b662:	f002 f92b 	bl	800d8bc <_free_r>
 800b666:	2300      	movs	r3, #0
 800b668:	6363      	str	r3, [r4, #52]	; 0x34
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b670:	81a3      	strh	r3, [r4, #12]
 800b672:	2300      	movs	r3, #0
 800b674:	6063      	str	r3, [r4, #4]
 800b676:	6923      	ldr	r3, [r4, #16]
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	f043 0308 	orr.w	r3, r3, #8
 800b680:	81a3      	strh	r3, [r4, #12]
 800b682:	6923      	ldr	r3, [r4, #16]
 800b684:	b94b      	cbnz	r3, 800b69a <__swsetup_r+0x9a>
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b68c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b690:	d003      	beq.n	800b69a <__swsetup_r+0x9a>
 800b692:	4621      	mov	r1, r4
 800b694:	4630      	mov	r0, r6
 800b696:	f001 fbed 	bl	800ce74 <__smakebuf_r>
 800b69a:	89a0      	ldrh	r0, [r4, #12]
 800b69c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6a0:	f010 0301 	ands.w	r3, r0, #1
 800b6a4:	d00a      	beq.n	800b6bc <__swsetup_r+0xbc>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60a3      	str	r3, [r4, #8]
 800b6aa:	6963      	ldr	r3, [r4, #20]
 800b6ac:	425b      	negs	r3, r3
 800b6ae:	61a3      	str	r3, [r4, #24]
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	b943      	cbnz	r3, 800b6c6 <__swsetup_r+0xc6>
 800b6b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6b8:	d1ba      	bne.n	800b630 <__swsetup_r+0x30>
 800b6ba:	bd70      	pop	{r4, r5, r6, pc}
 800b6bc:	0781      	lsls	r1, r0, #30
 800b6be:	bf58      	it	pl
 800b6c0:	6963      	ldrpl	r3, [r4, #20]
 800b6c2:	60a3      	str	r3, [r4, #8]
 800b6c4:	e7f4      	b.n	800b6b0 <__swsetup_r+0xb0>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	e7f7      	b.n	800b6ba <__swsetup_r+0xba>
 800b6ca:	bf00      	nop
 800b6cc:	20000010 	.word	0x20000010
 800b6d0:	0800e858 	.word	0x0800e858
 800b6d4:	0800e878 	.word	0x0800e878
 800b6d8:	0800e838 	.word	0x0800e838

0800b6dc <quorem>:
 800b6dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	6903      	ldr	r3, [r0, #16]
 800b6e2:	690c      	ldr	r4, [r1, #16]
 800b6e4:	42a3      	cmp	r3, r4
 800b6e6:	4607      	mov	r7, r0
 800b6e8:	f2c0 8081 	blt.w	800b7ee <quorem+0x112>
 800b6ec:	3c01      	subs	r4, #1
 800b6ee:	f101 0814 	add.w	r8, r1, #20
 800b6f2:	f100 0514 	add.w	r5, r0, #20
 800b6f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6fa:	9301      	str	r3, [sp, #4]
 800b6fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b700:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b704:	3301      	adds	r3, #1
 800b706:	429a      	cmp	r2, r3
 800b708:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b70c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b710:	fbb2 f6f3 	udiv	r6, r2, r3
 800b714:	d331      	bcc.n	800b77a <quorem+0x9e>
 800b716:	f04f 0e00 	mov.w	lr, #0
 800b71a:	4640      	mov	r0, r8
 800b71c:	46ac      	mov	ip, r5
 800b71e:	46f2      	mov	sl, lr
 800b720:	f850 2b04 	ldr.w	r2, [r0], #4
 800b724:	b293      	uxth	r3, r2
 800b726:	fb06 e303 	mla	r3, r6, r3, lr
 800b72a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b72e:	b29b      	uxth	r3, r3
 800b730:	ebaa 0303 	sub.w	r3, sl, r3
 800b734:	0c12      	lsrs	r2, r2, #16
 800b736:	f8dc a000 	ldr.w	sl, [ip]
 800b73a:	fb06 e202 	mla	r2, r6, r2, lr
 800b73e:	fa13 f38a 	uxtah	r3, r3, sl
 800b742:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b746:	fa1f fa82 	uxth.w	sl, r2
 800b74a:	f8dc 2000 	ldr.w	r2, [ip]
 800b74e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b752:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b756:	b29b      	uxth	r3, r3
 800b758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b75c:	4581      	cmp	r9, r0
 800b75e:	f84c 3b04 	str.w	r3, [ip], #4
 800b762:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b766:	d2db      	bcs.n	800b720 <quorem+0x44>
 800b768:	f855 300b 	ldr.w	r3, [r5, fp]
 800b76c:	b92b      	cbnz	r3, 800b77a <quorem+0x9e>
 800b76e:	9b01      	ldr	r3, [sp, #4]
 800b770:	3b04      	subs	r3, #4
 800b772:	429d      	cmp	r5, r3
 800b774:	461a      	mov	r2, r3
 800b776:	d32e      	bcc.n	800b7d6 <quorem+0xfa>
 800b778:	613c      	str	r4, [r7, #16]
 800b77a:	4638      	mov	r0, r7
 800b77c:	f001 fe9c 	bl	800d4b8 <__mcmp>
 800b780:	2800      	cmp	r0, #0
 800b782:	db24      	blt.n	800b7ce <quorem+0xf2>
 800b784:	3601      	adds	r6, #1
 800b786:	4628      	mov	r0, r5
 800b788:	f04f 0c00 	mov.w	ip, #0
 800b78c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b790:	f8d0 e000 	ldr.w	lr, [r0]
 800b794:	b293      	uxth	r3, r2
 800b796:	ebac 0303 	sub.w	r3, ip, r3
 800b79a:	0c12      	lsrs	r2, r2, #16
 800b79c:	fa13 f38e 	uxtah	r3, r3, lr
 800b7a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7ae:	45c1      	cmp	r9, r8
 800b7b0:	f840 3b04 	str.w	r3, [r0], #4
 800b7b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7b8:	d2e8      	bcs.n	800b78c <quorem+0xb0>
 800b7ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7c2:	b922      	cbnz	r2, 800b7ce <quorem+0xf2>
 800b7c4:	3b04      	subs	r3, #4
 800b7c6:	429d      	cmp	r5, r3
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	d30a      	bcc.n	800b7e2 <quorem+0x106>
 800b7cc:	613c      	str	r4, [r7, #16]
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	b003      	add	sp, #12
 800b7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d6:	6812      	ldr	r2, [r2, #0]
 800b7d8:	3b04      	subs	r3, #4
 800b7da:	2a00      	cmp	r2, #0
 800b7dc:	d1cc      	bne.n	800b778 <quorem+0x9c>
 800b7de:	3c01      	subs	r4, #1
 800b7e0:	e7c7      	b.n	800b772 <quorem+0x96>
 800b7e2:	6812      	ldr	r2, [r2, #0]
 800b7e4:	3b04      	subs	r3, #4
 800b7e6:	2a00      	cmp	r2, #0
 800b7e8:	d1f0      	bne.n	800b7cc <quorem+0xf0>
 800b7ea:	3c01      	subs	r4, #1
 800b7ec:	e7eb      	b.n	800b7c6 <quorem+0xea>
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	e7ee      	b.n	800b7d0 <quorem+0xf4>
 800b7f2:	0000      	movs	r0, r0
 800b7f4:	0000      	movs	r0, r0
	...

0800b7f8 <_dtoa_r>:
 800b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	ed2d 8b02 	vpush	{d8}
 800b800:	ec57 6b10 	vmov	r6, r7, d0
 800b804:	b095      	sub	sp, #84	; 0x54
 800b806:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b808:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b80c:	9105      	str	r1, [sp, #20]
 800b80e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b812:	4604      	mov	r4, r0
 800b814:	9209      	str	r2, [sp, #36]	; 0x24
 800b816:	930f      	str	r3, [sp, #60]	; 0x3c
 800b818:	b975      	cbnz	r5, 800b838 <_dtoa_r+0x40>
 800b81a:	2010      	movs	r0, #16
 800b81c:	f001 fb6a 	bl	800cef4 <malloc>
 800b820:	4602      	mov	r2, r0
 800b822:	6260      	str	r0, [r4, #36]	; 0x24
 800b824:	b920      	cbnz	r0, 800b830 <_dtoa_r+0x38>
 800b826:	4bb2      	ldr	r3, [pc, #712]	; (800baf0 <_dtoa_r+0x2f8>)
 800b828:	21ea      	movs	r1, #234	; 0xea
 800b82a:	48b2      	ldr	r0, [pc, #712]	; (800baf4 <_dtoa_r+0x2fc>)
 800b82c:	f002 fc34 	bl	800e098 <__assert_func>
 800b830:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b834:	6005      	str	r5, [r0, #0]
 800b836:	60c5      	str	r5, [r0, #12]
 800b838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b83a:	6819      	ldr	r1, [r3, #0]
 800b83c:	b151      	cbz	r1, 800b854 <_dtoa_r+0x5c>
 800b83e:	685a      	ldr	r2, [r3, #4]
 800b840:	604a      	str	r2, [r1, #4]
 800b842:	2301      	movs	r3, #1
 800b844:	4093      	lsls	r3, r2
 800b846:	608b      	str	r3, [r1, #8]
 800b848:	4620      	mov	r0, r4
 800b84a:	f001 fbad 	bl	800cfa8 <_Bfree>
 800b84e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b850:	2200      	movs	r2, #0
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	1e3b      	subs	r3, r7, #0
 800b856:	bfb9      	ittee	lt
 800b858:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b85c:	9303      	strlt	r3, [sp, #12]
 800b85e:	2300      	movge	r3, #0
 800b860:	f8c8 3000 	strge.w	r3, [r8]
 800b864:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b868:	4ba3      	ldr	r3, [pc, #652]	; (800baf8 <_dtoa_r+0x300>)
 800b86a:	bfbc      	itt	lt
 800b86c:	2201      	movlt	r2, #1
 800b86e:	f8c8 2000 	strlt.w	r2, [r8]
 800b872:	ea33 0309 	bics.w	r3, r3, r9
 800b876:	d11b      	bne.n	800b8b0 <_dtoa_r+0xb8>
 800b878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b87a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b87e:	6013      	str	r3, [r2, #0]
 800b880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b884:	4333      	orrs	r3, r6
 800b886:	f000 857a 	beq.w	800c37e <_dtoa_r+0xb86>
 800b88a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b88c:	b963      	cbnz	r3, 800b8a8 <_dtoa_r+0xb0>
 800b88e:	4b9b      	ldr	r3, [pc, #620]	; (800bafc <_dtoa_r+0x304>)
 800b890:	e024      	b.n	800b8dc <_dtoa_r+0xe4>
 800b892:	4b9b      	ldr	r3, [pc, #620]	; (800bb00 <_dtoa_r+0x308>)
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	3308      	adds	r3, #8
 800b898:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b89a:	6013      	str	r3, [r2, #0]
 800b89c:	9800      	ldr	r0, [sp, #0]
 800b89e:	b015      	add	sp, #84	; 0x54
 800b8a0:	ecbd 8b02 	vpop	{d8}
 800b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a8:	4b94      	ldr	r3, [pc, #592]	; (800bafc <_dtoa_r+0x304>)
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	3303      	adds	r3, #3
 800b8ae:	e7f3      	b.n	800b898 <_dtoa_r+0xa0>
 800b8b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	ec51 0b17 	vmov	r0, r1, d7
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b8c0:	f7f5 f902 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8c4:	4680      	mov	r8, r0
 800b8c6:	b158      	cbz	r0, 800b8e0 <_dtoa_r+0xe8>
 800b8c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	6013      	str	r3, [r2, #0]
 800b8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 8551 	beq.w	800c378 <_dtoa_r+0xb80>
 800b8d6:	488b      	ldr	r0, [pc, #556]	; (800bb04 <_dtoa_r+0x30c>)
 800b8d8:	6018      	str	r0, [r3, #0]
 800b8da:	1e43      	subs	r3, r0, #1
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	e7dd      	b.n	800b89c <_dtoa_r+0xa4>
 800b8e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b8e4:	aa12      	add	r2, sp, #72	; 0x48
 800b8e6:	a913      	add	r1, sp, #76	; 0x4c
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f001 ff05 	bl	800d6f8 <__d2b>
 800b8ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b8f2:	4683      	mov	fp, r0
 800b8f4:	2d00      	cmp	r5, #0
 800b8f6:	d07c      	beq.n	800b9f2 <_dtoa_r+0x1fa>
 800b8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b8fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b902:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b906:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b90a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b90e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b912:	4b7d      	ldr	r3, [pc, #500]	; (800bb08 <_dtoa_r+0x310>)
 800b914:	2200      	movs	r2, #0
 800b916:	4630      	mov	r0, r6
 800b918:	4639      	mov	r1, r7
 800b91a:	f7f4 fcb5 	bl	8000288 <__aeabi_dsub>
 800b91e:	a36e      	add	r3, pc, #440	; (adr r3, 800bad8 <_dtoa_r+0x2e0>)
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f7f4 fe68 	bl	80005f8 <__aeabi_dmul>
 800b928:	a36d      	add	r3, pc, #436	; (adr r3, 800bae0 <_dtoa_r+0x2e8>)
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	f7f4 fcad 	bl	800028c <__adddf3>
 800b932:	4606      	mov	r6, r0
 800b934:	4628      	mov	r0, r5
 800b936:	460f      	mov	r7, r1
 800b938:	f7f4 fdf4 	bl	8000524 <__aeabi_i2d>
 800b93c:	a36a      	add	r3, pc, #424	; (adr r3, 800bae8 <_dtoa_r+0x2f0>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	f7f4 fe59 	bl	80005f8 <__aeabi_dmul>
 800b946:	4602      	mov	r2, r0
 800b948:	460b      	mov	r3, r1
 800b94a:	4630      	mov	r0, r6
 800b94c:	4639      	mov	r1, r7
 800b94e:	f7f4 fc9d 	bl	800028c <__adddf3>
 800b952:	4606      	mov	r6, r0
 800b954:	460f      	mov	r7, r1
 800b956:	f7f5 f8ff 	bl	8000b58 <__aeabi_d2iz>
 800b95a:	2200      	movs	r2, #0
 800b95c:	4682      	mov	sl, r0
 800b95e:	2300      	movs	r3, #0
 800b960:	4630      	mov	r0, r6
 800b962:	4639      	mov	r1, r7
 800b964:	f7f5 f8ba 	bl	8000adc <__aeabi_dcmplt>
 800b968:	b148      	cbz	r0, 800b97e <_dtoa_r+0x186>
 800b96a:	4650      	mov	r0, sl
 800b96c:	f7f4 fdda 	bl	8000524 <__aeabi_i2d>
 800b970:	4632      	mov	r2, r6
 800b972:	463b      	mov	r3, r7
 800b974:	f7f5 f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b978:	b908      	cbnz	r0, 800b97e <_dtoa_r+0x186>
 800b97a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b97e:	f1ba 0f16 	cmp.w	sl, #22
 800b982:	d854      	bhi.n	800ba2e <_dtoa_r+0x236>
 800b984:	4b61      	ldr	r3, [pc, #388]	; (800bb0c <_dtoa_r+0x314>)
 800b986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b992:	f7f5 f8a3 	bl	8000adc <__aeabi_dcmplt>
 800b996:	2800      	cmp	r0, #0
 800b998:	d04b      	beq.n	800ba32 <_dtoa_r+0x23a>
 800b99a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b99e:	2300      	movs	r3, #0
 800b9a0:	930e      	str	r3, [sp, #56]	; 0x38
 800b9a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9a4:	1b5d      	subs	r5, r3, r5
 800b9a6:	1e6b      	subs	r3, r5, #1
 800b9a8:	9304      	str	r3, [sp, #16]
 800b9aa:	bf43      	ittte	mi
 800b9ac:	2300      	movmi	r3, #0
 800b9ae:	f1c5 0801 	rsbmi	r8, r5, #1
 800b9b2:	9304      	strmi	r3, [sp, #16]
 800b9b4:	f04f 0800 	movpl.w	r8, #0
 800b9b8:	f1ba 0f00 	cmp.w	sl, #0
 800b9bc:	db3b      	blt.n	800ba36 <_dtoa_r+0x23e>
 800b9be:	9b04      	ldr	r3, [sp, #16]
 800b9c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b9c4:	4453      	add	r3, sl
 800b9c6:	9304      	str	r3, [sp, #16]
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	9306      	str	r3, [sp, #24]
 800b9cc:	9b05      	ldr	r3, [sp, #20]
 800b9ce:	2b09      	cmp	r3, #9
 800b9d0:	d869      	bhi.n	800baa6 <_dtoa_r+0x2ae>
 800b9d2:	2b05      	cmp	r3, #5
 800b9d4:	bfc4      	itt	gt
 800b9d6:	3b04      	subgt	r3, #4
 800b9d8:	9305      	strgt	r3, [sp, #20]
 800b9da:	9b05      	ldr	r3, [sp, #20]
 800b9dc:	f1a3 0302 	sub.w	r3, r3, #2
 800b9e0:	bfcc      	ite	gt
 800b9e2:	2500      	movgt	r5, #0
 800b9e4:	2501      	movle	r5, #1
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	d869      	bhi.n	800babe <_dtoa_r+0x2c6>
 800b9ea:	e8df f003 	tbb	[pc, r3]
 800b9ee:	4e2c      	.short	0x4e2c
 800b9f0:	5a4c      	.short	0x5a4c
 800b9f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b9f6:	441d      	add	r5, r3
 800b9f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9fc:	2b20      	cmp	r3, #32
 800b9fe:	bfc1      	itttt	gt
 800ba00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba08:	fa09 f303 	lslgt.w	r3, r9, r3
 800ba0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba10:	bfda      	itte	le
 800ba12:	f1c3 0320 	rsble	r3, r3, #32
 800ba16:	fa06 f003 	lslle.w	r0, r6, r3
 800ba1a:	4318      	orrgt	r0, r3
 800ba1c:	f7f4 fd72 	bl	8000504 <__aeabi_ui2d>
 800ba20:	2301      	movs	r3, #1
 800ba22:	4606      	mov	r6, r0
 800ba24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba28:	3d01      	subs	r5, #1
 800ba2a:	9310      	str	r3, [sp, #64]	; 0x40
 800ba2c:	e771      	b.n	800b912 <_dtoa_r+0x11a>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e7b6      	b.n	800b9a0 <_dtoa_r+0x1a8>
 800ba32:	900e      	str	r0, [sp, #56]	; 0x38
 800ba34:	e7b5      	b.n	800b9a2 <_dtoa_r+0x1aa>
 800ba36:	f1ca 0300 	rsb	r3, sl, #0
 800ba3a:	9306      	str	r3, [sp, #24]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	eba8 080a 	sub.w	r8, r8, sl
 800ba42:	930d      	str	r3, [sp, #52]	; 0x34
 800ba44:	e7c2      	b.n	800b9cc <_dtoa_r+0x1d4>
 800ba46:	2300      	movs	r3, #0
 800ba48:	9308      	str	r3, [sp, #32]
 800ba4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dc39      	bgt.n	800bac4 <_dtoa_r+0x2cc>
 800ba50:	f04f 0901 	mov.w	r9, #1
 800ba54:	f8cd 9004 	str.w	r9, [sp, #4]
 800ba58:	464b      	mov	r3, r9
 800ba5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ba5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba60:	2200      	movs	r2, #0
 800ba62:	6042      	str	r2, [r0, #4]
 800ba64:	2204      	movs	r2, #4
 800ba66:	f102 0614 	add.w	r6, r2, #20
 800ba6a:	429e      	cmp	r6, r3
 800ba6c:	6841      	ldr	r1, [r0, #4]
 800ba6e:	d92f      	bls.n	800bad0 <_dtoa_r+0x2d8>
 800ba70:	4620      	mov	r0, r4
 800ba72:	f001 fa59 	bl	800cf28 <_Balloc>
 800ba76:	9000      	str	r0, [sp, #0]
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d14b      	bne.n	800bb14 <_dtoa_r+0x31c>
 800ba7c:	4b24      	ldr	r3, [pc, #144]	; (800bb10 <_dtoa_r+0x318>)
 800ba7e:	4602      	mov	r2, r0
 800ba80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba84:	e6d1      	b.n	800b82a <_dtoa_r+0x32>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e7de      	b.n	800ba48 <_dtoa_r+0x250>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	9308      	str	r3, [sp, #32]
 800ba8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba90:	eb0a 0903 	add.w	r9, sl, r3
 800ba94:	f109 0301 	add.w	r3, r9, #1
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	9301      	str	r3, [sp, #4]
 800ba9c:	bfb8      	it	lt
 800ba9e:	2301      	movlt	r3, #1
 800baa0:	e7dd      	b.n	800ba5e <_dtoa_r+0x266>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e7f2      	b.n	800ba8c <_dtoa_r+0x294>
 800baa6:	2501      	movs	r5, #1
 800baa8:	2300      	movs	r3, #0
 800baaa:	9305      	str	r3, [sp, #20]
 800baac:	9508      	str	r5, [sp, #32]
 800baae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800bab2:	2200      	movs	r2, #0
 800bab4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bab8:	2312      	movs	r3, #18
 800baba:	9209      	str	r2, [sp, #36]	; 0x24
 800babc:	e7cf      	b.n	800ba5e <_dtoa_r+0x266>
 800babe:	2301      	movs	r3, #1
 800bac0:	9308      	str	r3, [sp, #32]
 800bac2:	e7f4      	b.n	800baae <_dtoa_r+0x2b6>
 800bac4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bac8:	f8cd 9004 	str.w	r9, [sp, #4]
 800bacc:	464b      	mov	r3, r9
 800bace:	e7c6      	b.n	800ba5e <_dtoa_r+0x266>
 800bad0:	3101      	adds	r1, #1
 800bad2:	6041      	str	r1, [r0, #4]
 800bad4:	0052      	lsls	r2, r2, #1
 800bad6:	e7c6      	b.n	800ba66 <_dtoa_r+0x26e>
 800bad8:	636f4361 	.word	0x636f4361
 800badc:	3fd287a7 	.word	0x3fd287a7
 800bae0:	8b60c8b3 	.word	0x8b60c8b3
 800bae4:	3fc68a28 	.word	0x3fc68a28
 800bae8:	509f79fb 	.word	0x509f79fb
 800baec:	3fd34413 	.word	0x3fd34413
 800baf0:	0800e7ae 	.word	0x0800e7ae
 800baf4:	0800e7c5 	.word	0x0800e7c5
 800baf8:	7ff00000 	.word	0x7ff00000
 800bafc:	0800e7aa 	.word	0x0800e7aa
 800bb00:	0800e7a1 	.word	0x0800e7a1
 800bb04:	0800e625 	.word	0x0800e625
 800bb08:	3ff80000 	.word	0x3ff80000
 800bb0c:	0800e9a0 	.word	0x0800e9a0
 800bb10:	0800e824 	.word	0x0800e824
 800bb14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb16:	9a00      	ldr	r2, [sp, #0]
 800bb18:	601a      	str	r2, [r3, #0]
 800bb1a:	9b01      	ldr	r3, [sp, #4]
 800bb1c:	2b0e      	cmp	r3, #14
 800bb1e:	f200 80ad 	bhi.w	800bc7c <_dtoa_r+0x484>
 800bb22:	2d00      	cmp	r5, #0
 800bb24:	f000 80aa 	beq.w	800bc7c <_dtoa_r+0x484>
 800bb28:	f1ba 0f00 	cmp.w	sl, #0
 800bb2c:	dd36      	ble.n	800bb9c <_dtoa_r+0x3a4>
 800bb2e:	4ac3      	ldr	r2, [pc, #780]	; (800be3c <_dtoa_r+0x644>)
 800bb30:	f00a 030f 	and.w	r3, sl, #15
 800bb34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb38:	ed93 7b00 	vldr	d7, [r3]
 800bb3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bb40:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bb44:	eeb0 8a47 	vmov.f32	s16, s14
 800bb48:	eef0 8a67 	vmov.f32	s17, s15
 800bb4c:	d016      	beq.n	800bb7c <_dtoa_r+0x384>
 800bb4e:	4bbc      	ldr	r3, [pc, #752]	; (800be40 <_dtoa_r+0x648>)
 800bb50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb58:	f7f4 fe78 	bl	800084c <__aeabi_ddiv>
 800bb5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb60:	f007 070f 	and.w	r7, r7, #15
 800bb64:	2503      	movs	r5, #3
 800bb66:	4eb6      	ldr	r6, [pc, #728]	; (800be40 <_dtoa_r+0x648>)
 800bb68:	b957      	cbnz	r7, 800bb80 <_dtoa_r+0x388>
 800bb6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb6e:	ec53 2b18 	vmov	r2, r3, d8
 800bb72:	f7f4 fe6b 	bl	800084c <__aeabi_ddiv>
 800bb76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb7a:	e029      	b.n	800bbd0 <_dtoa_r+0x3d8>
 800bb7c:	2502      	movs	r5, #2
 800bb7e:	e7f2      	b.n	800bb66 <_dtoa_r+0x36e>
 800bb80:	07f9      	lsls	r1, r7, #31
 800bb82:	d508      	bpl.n	800bb96 <_dtoa_r+0x39e>
 800bb84:	ec51 0b18 	vmov	r0, r1, d8
 800bb88:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb8c:	f7f4 fd34 	bl	80005f8 <__aeabi_dmul>
 800bb90:	ec41 0b18 	vmov	d8, r0, r1
 800bb94:	3501      	adds	r5, #1
 800bb96:	107f      	asrs	r7, r7, #1
 800bb98:	3608      	adds	r6, #8
 800bb9a:	e7e5      	b.n	800bb68 <_dtoa_r+0x370>
 800bb9c:	f000 80a6 	beq.w	800bcec <_dtoa_r+0x4f4>
 800bba0:	f1ca 0600 	rsb	r6, sl, #0
 800bba4:	4ba5      	ldr	r3, [pc, #660]	; (800be3c <_dtoa_r+0x644>)
 800bba6:	4fa6      	ldr	r7, [pc, #664]	; (800be40 <_dtoa_r+0x648>)
 800bba8:	f006 020f 	and.w	r2, r6, #15
 800bbac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bbb8:	f7f4 fd1e 	bl	80005f8 <__aeabi_dmul>
 800bbbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbc0:	1136      	asrs	r6, r6, #4
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	2502      	movs	r5, #2
 800bbc6:	2e00      	cmp	r6, #0
 800bbc8:	f040 8085 	bne.w	800bcd6 <_dtoa_r+0x4de>
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1d2      	bne.n	800bb76 <_dtoa_r+0x37e>
 800bbd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 808c 	beq.w	800bcf0 <_dtoa_r+0x4f8>
 800bbd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bbdc:	4b99      	ldr	r3, [pc, #612]	; (800be44 <_dtoa_r+0x64c>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	4639      	mov	r1, r7
 800bbe4:	f7f4 ff7a 	bl	8000adc <__aeabi_dcmplt>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	f000 8081 	beq.w	800bcf0 <_dtoa_r+0x4f8>
 800bbee:	9b01      	ldr	r3, [sp, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d07d      	beq.n	800bcf0 <_dtoa_r+0x4f8>
 800bbf4:	f1b9 0f00 	cmp.w	r9, #0
 800bbf8:	dd3c      	ble.n	800bc74 <_dtoa_r+0x47c>
 800bbfa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bbfe:	9307      	str	r3, [sp, #28]
 800bc00:	2200      	movs	r2, #0
 800bc02:	4b91      	ldr	r3, [pc, #580]	; (800be48 <_dtoa_r+0x650>)
 800bc04:	4630      	mov	r0, r6
 800bc06:	4639      	mov	r1, r7
 800bc08:	f7f4 fcf6 	bl	80005f8 <__aeabi_dmul>
 800bc0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc10:	3501      	adds	r5, #1
 800bc12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bc16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	f7f4 fc82 	bl	8000524 <__aeabi_i2d>
 800bc20:	4632      	mov	r2, r6
 800bc22:	463b      	mov	r3, r7
 800bc24:	f7f4 fce8 	bl	80005f8 <__aeabi_dmul>
 800bc28:	4b88      	ldr	r3, [pc, #544]	; (800be4c <_dtoa_r+0x654>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f7f4 fb2e 	bl	800028c <__adddf3>
 800bc30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bc34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc38:	9303      	str	r3, [sp, #12]
 800bc3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d15c      	bne.n	800bcfa <_dtoa_r+0x502>
 800bc40:	4b83      	ldr	r3, [pc, #524]	; (800be50 <_dtoa_r+0x658>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	4630      	mov	r0, r6
 800bc46:	4639      	mov	r1, r7
 800bc48:	f7f4 fb1e 	bl	8000288 <__aeabi_dsub>
 800bc4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc50:	4606      	mov	r6, r0
 800bc52:	460f      	mov	r7, r1
 800bc54:	f7f4 ff60 	bl	8000b18 <__aeabi_dcmpgt>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	f040 8296 	bne.w	800c18a <_dtoa_r+0x992>
 800bc5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bc62:	4630      	mov	r0, r6
 800bc64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc68:	4639      	mov	r1, r7
 800bc6a:	f7f4 ff37 	bl	8000adc <__aeabi_dcmplt>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	f040 8288 	bne.w	800c184 <_dtoa_r+0x98c>
 800bc74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f2c0 8158 	blt.w	800bf34 <_dtoa_r+0x73c>
 800bc84:	f1ba 0f0e 	cmp.w	sl, #14
 800bc88:	f300 8154 	bgt.w	800bf34 <_dtoa_r+0x73c>
 800bc8c:	4b6b      	ldr	r3, [pc, #428]	; (800be3c <_dtoa_r+0x644>)
 800bc8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc92:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f280 80e3 	bge.w	800be64 <_dtoa_r+0x66c>
 800bc9e:	9b01      	ldr	r3, [sp, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f300 80df 	bgt.w	800be64 <_dtoa_r+0x66c>
 800bca6:	f040 826d 	bne.w	800c184 <_dtoa_r+0x98c>
 800bcaa:	4b69      	ldr	r3, [pc, #420]	; (800be50 <_dtoa_r+0x658>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	4640      	mov	r0, r8
 800bcb0:	4649      	mov	r1, r9
 800bcb2:	f7f4 fca1 	bl	80005f8 <__aeabi_dmul>
 800bcb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcba:	f7f4 ff23 	bl	8000b04 <__aeabi_dcmpge>
 800bcbe:	9e01      	ldr	r6, [sp, #4]
 800bcc0:	4637      	mov	r7, r6
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	f040 8243 	bne.w	800c14e <_dtoa_r+0x956>
 800bcc8:	9d00      	ldr	r5, [sp, #0]
 800bcca:	2331      	movs	r3, #49	; 0x31
 800bccc:	f805 3b01 	strb.w	r3, [r5], #1
 800bcd0:	f10a 0a01 	add.w	sl, sl, #1
 800bcd4:	e23f      	b.n	800c156 <_dtoa_r+0x95e>
 800bcd6:	07f2      	lsls	r2, r6, #31
 800bcd8:	d505      	bpl.n	800bce6 <_dtoa_r+0x4ee>
 800bcda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcde:	f7f4 fc8b 	bl	80005f8 <__aeabi_dmul>
 800bce2:	3501      	adds	r5, #1
 800bce4:	2301      	movs	r3, #1
 800bce6:	1076      	asrs	r6, r6, #1
 800bce8:	3708      	adds	r7, #8
 800bcea:	e76c      	b.n	800bbc6 <_dtoa_r+0x3ce>
 800bcec:	2502      	movs	r5, #2
 800bcee:	e76f      	b.n	800bbd0 <_dtoa_r+0x3d8>
 800bcf0:	9b01      	ldr	r3, [sp, #4]
 800bcf2:	f8cd a01c 	str.w	sl, [sp, #28]
 800bcf6:	930c      	str	r3, [sp, #48]	; 0x30
 800bcf8:	e78d      	b.n	800bc16 <_dtoa_r+0x41e>
 800bcfa:	9900      	ldr	r1, [sp, #0]
 800bcfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bcfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd00:	4b4e      	ldr	r3, [pc, #312]	; (800be3c <_dtoa_r+0x644>)
 800bd02:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd06:	4401      	add	r1, r0
 800bd08:	9102      	str	r1, [sp, #8]
 800bd0a:	9908      	ldr	r1, [sp, #32]
 800bd0c:	eeb0 8a47 	vmov.f32	s16, s14
 800bd10:	eef0 8a67 	vmov.f32	s17, s15
 800bd14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd1c:	2900      	cmp	r1, #0
 800bd1e:	d045      	beq.n	800bdac <_dtoa_r+0x5b4>
 800bd20:	494c      	ldr	r1, [pc, #304]	; (800be54 <_dtoa_r+0x65c>)
 800bd22:	2000      	movs	r0, #0
 800bd24:	f7f4 fd92 	bl	800084c <__aeabi_ddiv>
 800bd28:	ec53 2b18 	vmov	r2, r3, d8
 800bd2c:	f7f4 faac 	bl	8000288 <__aeabi_dsub>
 800bd30:	9d00      	ldr	r5, [sp, #0]
 800bd32:	ec41 0b18 	vmov	d8, r0, r1
 800bd36:	4639      	mov	r1, r7
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f7f4 ff0d 	bl	8000b58 <__aeabi_d2iz>
 800bd3e:	900c      	str	r0, [sp, #48]	; 0x30
 800bd40:	f7f4 fbf0 	bl	8000524 <__aeabi_i2d>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	4630      	mov	r0, r6
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 fa9c 	bl	8000288 <__aeabi_dsub>
 800bd50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd52:	3330      	adds	r3, #48	; 0x30
 800bd54:	f805 3b01 	strb.w	r3, [r5], #1
 800bd58:	ec53 2b18 	vmov	r2, r3, d8
 800bd5c:	4606      	mov	r6, r0
 800bd5e:	460f      	mov	r7, r1
 800bd60:	f7f4 febc 	bl	8000adc <__aeabi_dcmplt>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d165      	bne.n	800be34 <_dtoa_r+0x63c>
 800bd68:	4632      	mov	r2, r6
 800bd6a:	463b      	mov	r3, r7
 800bd6c:	4935      	ldr	r1, [pc, #212]	; (800be44 <_dtoa_r+0x64c>)
 800bd6e:	2000      	movs	r0, #0
 800bd70:	f7f4 fa8a 	bl	8000288 <__aeabi_dsub>
 800bd74:	ec53 2b18 	vmov	r2, r3, d8
 800bd78:	f7f4 feb0 	bl	8000adc <__aeabi_dcmplt>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	f040 80b9 	bne.w	800bef4 <_dtoa_r+0x6fc>
 800bd82:	9b02      	ldr	r3, [sp, #8]
 800bd84:	429d      	cmp	r5, r3
 800bd86:	f43f af75 	beq.w	800bc74 <_dtoa_r+0x47c>
 800bd8a:	4b2f      	ldr	r3, [pc, #188]	; (800be48 <_dtoa_r+0x650>)
 800bd8c:	ec51 0b18 	vmov	r0, r1, d8
 800bd90:	2200      	movs	r2, #0
 800bd92:	f7f4 fc31 	bl	80005f8 <__aeabi_dmul>
 800bd96:	4b2c      	ldr	r3, [pc, #176]	; (800be48 <_dtoa_r+0x650>)
 800bd98:	ec41 0b18 	vmov	d8, r0, r1
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	4630      	mov	r0, r6
 800bda0:	4639      	mov	r1, r7
 800bda2:	f7f4 fc29 	bl	80005f8 <__aeabi_dmul>
 800bda6:	4606      	mov	r6, r0
 800bda8:	460f      	mov	r7, r1
 800bdaa:	e7c4      	b.n	800bd36 <_dtoa_r+0x53e>
 800bdac:	ec51 0b17 	vmov	r0, r1, d7
 800bdb0:	f7f4 fc22 	bl	80005f8 <__aeabi_dmul>
 800bdb4:	9b02      	ldr	r3, [sp, #8]
 800bdb6:	9d00      	ldr	r5, [sp, #0]
 800bdb8:	930c      	str	r3, [sp, #48]	; 0x30
 800bdba:	ec41 0b18 	vmov	d8, r0, r1
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f7f4 fec9 	bl	8000b58 <__aeabi_d2iz>
 800bdc6:	9011      	str	r0, [sp, #68]	; 0x44
 800bdc8:	f7f4 fbac 	bl	8000524 <__aeabi_i2d>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	f7f4 fa58 	bl	8000288 <__aeabi_dsub>
 800bdd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdda:	3330      	adds	r3, #48	; 0x30
 800bddc:	f805 3b01 	strb.w	r3, [r5], #1
 800bde0:	9b02      	ldr	r3, [sp, #8]
 800bde2:	429d      	cmp	r5, r3
 800bde4:	4606      	mov	r6, r0
 800bde6:	460f      	mov	r7, r1
 800bde8:	f04f 0200 	mov.w	r2, #0
 800bdec:	d134      	bne.n	800be58 <_dtoa_r+0x660>
 800bdee:	4b19      	ldr	r3, [pc, #100]	; (800be54 <_dtoa_r+0x65c>)
 800bdf0:	ec51 0b18 	vmov	r0, r1, d8
 800bdf4:	f7f4 fa4a 	bl	800028c <__adddf3>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	4639      	mov	r1, r7
 800be00:	f7f4 fe8a 	bl	8000b18 <__aeabi_dcmpgt>
 800be04:	2800      	cmp	r0, #0
 800be06:	d175      	bne.n	800bef4 <_dtoa_r+0x6fc>
 800be08:	ec53 2b18 	vmov	r2, r3, d8
 800be0c:	4911      	ldr	r1, [pc, #68]	; (800be54 <_dtoa_r+0x65c>)
 800be0e:	2000      	movs	r0, #0
 800be10:	f7f4 fa3a 	bl	8000288 <__aeabi_dsub>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	4630      	mov	r0, r6
 800be1a:	4639      	mov	r1, r7
 800be1c:	f7f4 fe5e 	bl	8000adc <__aeabi_dcmplt>
 800be20:	2800      	cmp	r0, #0
 800be22:	f43f af27 	beq.w	800bc74 <_dtoa_r+0x47c>
 800be26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be28:	1e6b      	subs	r3, r5, #1
 800be2a:	930c      	str	r3, [sp, #48]	; 0x30
 800be2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be30:	2b30      	cmp	r3, #48	; 0x30
 800be32:	d0f8      	beq.n	800be26 <_dtoa_r+0x62e>
 800be34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800be38:	e04a      	b.n	800bed0 <_dtoa_r+0x6d8>
 800be3a:	bf00      	nop
 800be3c:	0800e9a0 	.word	0x0800e9a0
 800be40:	0800e978 	.word	0x0800e978
 800be44:	3ff00000 	.word	0x3ff00000
 800be48:	40240000 	.word	0x40240000
 800be4c:	401c0000 	.word	0x401c0000
 800be50:	40140000 	.word	0x40140000
 800be54:	3fe00000 	.word	0x3fe00000
 800be58:	4baf      	ldr	r3, [pc, #700]	; (800c118 <_dtoa_r+0x920>)
 800be5a:	f7f4 fbcd 	bl	80005f8 <__aeabi_dmul>
 800be5e:	4606      	mov	r6, r0
 800be60:	460f      	mov	r7, r1
 800be62:	e7ac      	b.n	800bdbe <_dtoa_r+0x5c6>
 800be64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be68:	9d00      	ldr	r5, [sp, #0]
 800be6a:	4642      	mov	r2, r8
 800be6c:	464b      	mov	r3, r9
 800be6e:	4630      	mov	r0, r6
 800be70:	4639      	mov	r1, r7
 800be72:	f7f4 fceb 	bl	800084c <__aeabi_ddiv>
 800be76:	f7f4 fe6f 	bl	8000b58 <__aeabi_d2iz>
 800be7a:	9002      	str	r0, [sp, #8]
 800be7c:	f7f4 fb52 	bl	8000524 <__aeabi_i2d>
 800be80:	4642      	mov	r2, r8
 800be82:	464b      	mov	r3, r9
 800be84:	f7f4 fbb8 	bl	80005f8 <__aeabi_dmul>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4630      	mov	r0, r6
 800be8e:	4639      	mov	r1, r7
 800be90:	f7f4 f9fa 	bl	8000288 <__aeabi_dsub>
 800be94:	9e02      	ldr	r6, [sp, #8]
 800be96:	9f01      	ldr	r7, [sp, #4]
 800be98:	3630      	adds	r6, #48	; 0x30
 800be9a:	f805 6b01 	strb.w	r6, [r5], #1
 800be9e:	9e00      	ldr	r6, [sp, #0]
 800bea0:	1bae      	subs	r6, r5, r6
 800bea2:	42b7      	cmp	r7, r6
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	d137      	bne.n	800bf1a <_dtoa_r+0x722>
 800beaa:	f7f4 f9ef 	bl	800028c <__adddf3>
 800beae:	4642      	mov	r2, r8
 800beb0:	464b      	mov	r3, r9
 800beb2:	4606      	mov	r6, r0
 800beb4:	460f      	mov	r7, r1
 800beb6:	f7f4 fe2f 	bl	8000b18 <__aeabi_dcmpgt>
 800beba:	b9c8      	cbnz	r0, 800bef0 <_dtoa_r+0x6f8>
 800bebc:	4642      	mov	r2, r8
 800bebe:	464b      	mov	r3, r9
 800bec0:	4630      	mov	r0, r6
 800bec2:	4639      	mov	r1, r7
 800bec4:	f7f4 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 800bec8:	b110      	cbz	r0, 800bed0 <_dtoa_r+0x6d8>
 800beca:	9b02      	ldr	r3, [sp, #8]
 800becc:	07d9      	lsls	r1, r3, #31
 800bece:	d40f      	bmi.n	800bef0 <_dtoa_r+0x6f8>
 800bed0:	4620      	mov	r0, r4
 800bed2:	4659      	mov	r1, fp
 800bed4:	f001 f868 	bl	800cfa8 <_Bfree>
 800bed8:	2300      	movs	r3, #0
 800beda:	702b      	strb	r3, [r5, #0]
 800bedc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bede:	f10a 0001 	add.w	r0, sl, #1
 800bee2:	6018      	str	r0, [r3, #0]
 800bee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f43f acd8 	beq.w	800b89c <_dtoa_r+0xa4>
 800beec:	601d      	str	r5, [r3, #0]
 800beee:	e4d5      	b.n	800b89c <_dtoa_r+0xa4>
 800bef0:	f8cd a01c 	str.w	sl, [sp, #28]
 800bef4:	462b      	mov	r3, r5
 800bef6:	461d      	mov	r5, r3
 800bef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800befc:	2a39      	cmp	r2, #57	; 0x39
 800befe:	d108      	bne.n	800bf12 <_dtoa_r+0x71a>
 800bf00:	9a00      	ldr	r2, [sp, #0]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d1f7      	bne.n	800bef6 <_dtoa_r+0x6fe>
 800bf06:	9a07      	ldr	r2, [sp, #28]
 800bf08:	9900      	ldr	r1, [sp, #0]
 800bf0a:	3201      	adds	r2, #1
 800bf0c:	9207      	str	r2, [sp, #28]
 800bf0e:	2230      	movs	r2, #48	; 0x30
 800bf10:	700a      	strb	r2, [r1, #0]
 800bf12:	781a      	ldrb	r2, [r3, #0]
 800bf14:	3201      	adds	r2, #1
 800bf16:	701a      	strb	r2, [r3, #0]
 800bf18:	e78c      	b.n	800be34 <_dtoa_r+0x63c>
 800bf1a:	4b7f      	ldr	r3, [pc, #508]	; (800c118 <_dtoa_r+0x920>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f7f4 fb6b 	bl	80005f8 <__aeabi_dmul>
 800bf22:	2200      	movs	r2, #0
 800bf24:	2300      	movs	r3, #0
 800bf26:	4606      	mov	r6, r0
 800bf28:	460f      	mov	r7, r1
 800bf2a:	f7f4 fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d09b      	beq.n	800be6a <_dtoa_r+0x672>
 800bf32:	e7cd      	b.n	800bed0 <_dtoa_r+0x6d8>
 800bf34:	9a08      	ldr	r2, [sp, #32]
 800bf36:	2a00      	cmp	r2, #0
 800bf38:	f000 80c4 	beq.w	800c0c4 <_dtoa_r+0x8cc>
 800bf3c:	9a05      	ldr	r2, [sp, #20]
 800bf3e:	2a01      	cmp	r2, #1
 800bf40:	f300 80a8 	bgt.w	800c094 <_dtoa_r+0x89c>
 800bf44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bf46:	2a00      	cmp	r2, #0
 800bf48:	f000 80a0 	beq.w	800c08c <_dtoa_r+0x894>
 800bf4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf50:	9e06      	ldr	r6, [sp, #24]
 800bf52:	4645      	mov	r5, r8
 800bf54:	9a04      	ldr	r2, [sp, #16]
 800bf56:	2101      	movs	r1, #1
 800bf58:	441a      	add	r2, r3
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	4498      	add	r8, r3
 800bf5e:	9204      	str	r2, [sp, #16]
 800bf60:	f001 f928 	bl	800d1b4 <__i2b>
 800bf64:	4607      	mov	r7, r0
 800bf66:	2d00      	cmp	r5, #0
 800bf68:	dd0b      	ble.n	800bf82 <_dtoa_r+0x78a>
 800bf6a:	9b04      	ldr	r3, [sp, #16]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dd08      	ble.n	800bf82 <_dtoa_r+0x78a>
 800bf70:	42ab      	cmp	r3, r5
 800bf72:	9a04      	ldr	r2, [sp, #16]
 800bf74:	bfa8      	it	ge
 800bf76:	462b      	movge	r3, r5
 800bf78:	eba8 0803 	sub.w	r8, r8, r3
 800bf7c:	1aed      	subs	r5, r5, r3
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	9304      	str	r3, [sp, #16]
 800bf82:	9b06      	ldr	r3, [sp, #24]
 800bf84:	b1fb      	cbz	r3, 800bfc6 <_dtoa_r+0x7ce>
 800bf86:	9b08      	ldr	r3, [sp, #32]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 809f 	beq.w	800c0cc <_dtoa_r+0x8d4>
 800bf8e:	2e00      	cmp	r6, #0
 800bf90:	dd11      	ble.n	800bfb6 <_dtoa_r+0x7be>
 800bf92:	4639      	mov	r1, r7
 800bf94:	4632      	mov	r2, r6
 800bf96:	4620      	mov	r0, r4
 800bf98:	f001 f9c8 	bl	800d32c <__pow5mult>
 800bf9c:	465a      	mov	r2, fp
 800bf9e:	4601      	mov	r1, r0
 800bfa0:	4607      	mov	r7, r0
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f001 f91c 	bl	800d1e0 <__multiply>
 800bfa8:	4659      	mov	r1, fp
 800bfaa:	9007      	str	r0, [sp, #28]
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fffb 	bl	800cfa8 <_Bfree>
 800bfb2:	9b07      	ldr	r3, [sp, #28]
 800bfb4:	469b      	mov	fp, r3
 800bfb6:	9b06      	ldr	r3, [sp, #24]
 800bfb8:	1b9a      	subs	r2, r3, r6
 800bfba:	d004      	beq.n	800bfc6 <_dtoa_r+0x7ce>
 800bfbc:	4659      	mov	r1, fp
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f001 f9b4 	bl	800d32c <__pow5mult>
 800bfc4:	4683      	mov	fp, r0
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f001 f8f3 	bl	800d1b4 <__i2b>
 800bfce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	dd7c      	ble.n	800c0d0 <_dtoa_r+0x8d8>
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	4601      	mov	r1, r0
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f001 f9a6 	bl	800d32c <__pow5mult>
 800bfe0:	9b05      	ldr	r3, [sp, #20]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	4606      	mov	r6, r0
 800bfe6:	dd76      	ble.n	800c0d6 <_dtoa_r+0x8de>
 800bfe8:	2300      	movs	r3, #0
 800bfea:	9306      	str	r3, [sp, #24]
 800bfec:	6933      	ldr	r3, [r6, #16]
 800bfee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bff2:	6918      	ldr	r0, [r3, #16]
 800bff4:	f001 f88e 	bl	800d114 <__hi0bits>
 800bff8:	f1c0 0020 	rsb	r0, r0, #32
 800bffc:	9b04      	ldr	r3, [sp, #16]
 800bffe:	4418      	add	r0, r3
 800c000:	f010 001f 	ands.w	r0, r0, #31
 800c004:	f000 8086 	beq.w	800c114 <_dtoa_r+0x91c>
 800c008:	f1c0 0320 	rsb	r3, r0, #32
 800c00c:	2b04      	cmp	r3, #4
 800c00e:	dd7f      	ble.n	800c110 <_dtoa_r+0x918>
 800c010:	f1c0 001c 	rsb	r0, r0, #28
 800c014:	9b04      	ldr	r3, [sp, #16]
 800c016:	4403      	add	r3, r0
 800c018:	4480      	add	r8, r0
 800c01a:	4405      	add	r5, r0
 800c01c:	9304      	str	r3, [sp, #16]
 800c01e:	f1b8 0f00 	cmp.w	r8, #0
 800c022:	dd05      	ble.n	800c030 <_dtoa_r+0x838>
 800c024:	4659      	mov	r1, fp
 800c026:	4642      	mov	r2, r8
 800c028:	4620      	mov	r0, r4
 800c02a:	f001 f9d9 	bl	800d3e0 <__lshift>
 800c02e:	4683      	mov	fp, r0
 800c030:	9b04      	ldr	r3, [sp, #16]
 800c032:	2b00      	cmp	r3, #0
 800c034:	dd05      	ble.n	800c042 <_dtoa_r+0x84a>
 800c036:	4631      	mov	r1, r6
 800c038:	461a      	mov	r2, r3
 800c03a:	4620      	mov	r0, r4
 800c03c:	f001 f9d0 	bl	800d3e0 <__lshift>
 800c040:	4606      	mov	r6, r0
 800c042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c044:	2b00      	cmp	r3, #0
 800c046:	d069      	beq.n	800c11c <_dtoa_r+0x924>
 800c048:	4631      	mov	r1, r6
 800c04a:	4658      	mov	r0, fp
 800c04c:	f001 fa34 	bl	800d4b8 <__mcmp>
 800c050:	2800      	cmp	r0, #0
 800c052:	da63      	bge.n	800c11c <_dtoa_r+0x924>
 800c054:	2300      	movs	r3, #0
 800c056:	4659      	mov	r1, fp
 800c058:	220a      	movs	r2, #10
 800c05a:	4620      	mov	r0, r4
 800c05c:	f000 ffc6 	bl	800cfec <__multadd>
 800c060:	9b08      	ldr	r3, [sp, #32]
 800c062:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c066:	4683      	mov	fp, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 818f 	beq.w	800c38c <_dtoa_r+0xb94>
 800c06e:	4639      	mov	r1, r7
 800c070:	2300      	movs	r3, #0
 800c072:	220a      	movs	r2, #10
 800c074:	4620      	mov	r0, r4
 800c076:	f000 ffb9 	bl	800cfec <__multadd>
 800c07a:	f1b9 0f00 	cmp.w	r9, #0
 800c07e:	4607      	mov	r7, r0
 800c080:	f300 808e 	bgt.w	800c1a0 <_dtoa_r+0x9a8>
 800c084:	9b05      	ldr	r3, [sp, #20]
 800c086:	2b02      	cmp	r3, #2
 800c088:	dc50      	bgt.n	800c12c <_dtoa_r+0x934>
 800c08a:	e089      	b.n	800c1a0 <_dtoa_r+0x9a8>
 800c08c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c08e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c092:	e75d      	b.n	800bf50 <_dtoa_r+0x758>
 800c094:	9b01      	ldr	r3, [sp, #4]
 800c096:	1e5e      	subs	r6, r3, #1
 800c098:	9b06      	ldr	r3, [sp, #24]
 800c09a:	42b3      	cmp	r3, r6
 800c09c:	bfbf      	itttt	lt
 800c09e:	9b06      	ldrlt	r3, [sp, #24]
 800c0a0:	9606      	strlt	r6, [sp, #24]
 800c0a2:	1af2      	sublt	r2, r6, r3
 800c0a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c0a6:	bfb6      	itet	lt
 800c0a8:	189b      	addlt	r3, r3, r2
 800c0aa:	1b9e      	subge	r6, r3, r6
 800c0ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c0ae:	9b01      	ldr	r3, [sp, #4]
 800c0b0:	bfb8      	it	lt
 800c0b2:	2600      	movlt	r6, #0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	bfb5      	itete	lt
 800c0b8:	eba8 0503 	sublt.w	r5, r8, r3
 800c0bc:	9b01      	ldrge	r3, [sp, #4]
 800c0be:	2300      	movlt	r3, #0
 800c0c0:	4645      	movge	r5, r8
 800c0c2:	e747      	b.n	800bf54 <_dtoa_r+0x75c>
 800c0c4:	9e06      	ldr	r6, [sp, #24]
 800c0c6:	9f08      	ldr	r7, [sp, #32]
 800c0c8:	4645      	mov	r5, r8
 800c0ca:	e74c      	b.n	800bf66 <_dtoa_r+0x76e>
 800c0cc:	9a06      	ldr	r2, [sp, #24]
 800c0ce:	e775      	b.n	800bfbc <_dtoa_r+0x7c4>
 800c0d0:	9b05      	ldr	r3, [sp, #20]
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	dc18      	bgt.n	800c108 <_dtoa_r+0x910>
 800c0d6:	9b02      	ldr	r3, [sp, #8]
 800c0d8:	b9b3      	cbnz	r3, 800c108 <_dtoa_r+0x910>
 800c0da:	9b03      	ldr	r3, [sp, #12]
 800c0dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0e0:	b9a3      	cbnz	r3, 800c10c <_dtoa_r+0x914>
 800c0e2:	9b03      	ldr	r3, [sp, #12]
 800c0e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0e8:	0d1b      	lsrs	r3, r3, #20
 800c0ea:	051b      	lsls	r3, r3, #20
 800c0ec:	b12b      	cbz	r3, 800c0fa <_dtoa_r+0x902>
 800c0ee:	9b04      	ldr	r3, [sp, #16]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	9304      	str	r3, [sp, #16]
 800c0f4:	f108 0801 	add.w	r8, r8, #1
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	9306      	str	r3, [sp, #24]
 800c0fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	f47f af74 	bne.w	800bfec <_dtoa_r+0x7f4>
 800c104:	2001      	movs	r0, #1
 800c106:	e779      	b.n	800bffc <_dtoa_r+0x804>
 800c108:	2300      	movs	r3, #0
 800c10a:	e7f6      	b.n	800c0fa <_dtoa_r+0x902>
 800c10c:	9b02      	ldr	r3, [sp, #8]
 800c10e:	e7f4      	b.n	800c0fa <_dtoa_r+0x902>
 800c110:	d085      	beq.n	800c01e <_dtoa_r+0x826>
 800c112:	4618      	mov	r0, r3
 800c114:	301c      	adds	r0, #28
 800c116:	e77d      	b.n	800c014 <_dtoa_r+0x81c>
 800c118:	40240000 	.word	0x40240000
 800c11c:	9b01      	ldr	r3, [sp, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	dc38      	bgt.n	800c194 <_dtoa_r+0x99c>
 800c122:	9b05      	ldr	r3, [sp, #20]
 800c124:	2b02      	cmp	r3, #2
 800c126:	dd35      	ble.n	800c194 <_dtoa_r+0x99c>
 800c128:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c12c:	f1b9 0f00 	cmp.w	r9, #0
 800c130:	d10d      	bne.n	800c14e <_dtoa_r+0x956>
 800c132:	4631      	mov	r1, r6
 800c134:	464b      	mov	r3, r9
 800c136:	2205      	movs	r2, #5
 800c138:	4620      	mov	r0, r4
 800c13a:	f000 ff57 	bl	800cfec <__multadd>
 800c13e:	4601      	mov	r1, r0
 800c140:	4606      	mov	r6, r0
 800c142:	4658      	mov	r0, fp
 800c144:	f001 f9b8 	bl	800d4b8 <__mcmp>
 800c148:	2800      	cmp	r0, #0
 800c14a:	f73f adbd 	bgt.w	800bcc8 <_dtoa_r+0x4d0>
 800c14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c150:	9d00      	ldr	r5, [sp, #0]
 800c152:	ea6f 0a03 	mvn.w	sl, r3
 800c156:	f04f 0800 	mov.w	r8, #0
 800c15a:	4631      	mov	r1, r6
 800c15c:	4620      	mov	r0, r4
 800c15e:	f000 ff23 	bl	800cfa8 <_Bfree>
 800c162:	2f00      	cmp	r7, #0
 800c164:	f43f aeb4 	beq.w	800bed0 <_dtoa_r+0x6d8>
 800c168:	f1b8 0f00 	cmp.w	r8, #0
 800c16c:	d005      	beq.n	800c17a <_dtoa_r+0x982>
 800c16e:	45b8      	cmp	r8, r7
 800c170:	d003      	beq.n	800c17a <_dtoa_r+0x982>
 800c172:	4641      	mov	r1, r8
 800c174:	4620      	mov	r0, r4
 800c176:	f000 ff17 	bl	800cfa8 <_Bfree>
 800c17a:	4639      	mov	r1, r7
 800c17c:	4620      	mov	r0, r4
 800c17e:	f000 ff13 	bl	800cfa8 <_Bfree>
 800c182:	e6a5      	b.n	800bed0 <_dtoa_r+0x6d8>
 800c184:	2600      	movs	r6, #0
 800c186:	4637      	mov	r7, r6
 800c188:	e7e1      	b.n	800c14e <_dtoa_r+0x956>
 800c18a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c18c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c190:	4637      	mov	r7, r6
 800c192:	e599      	b.n	800bcc8 <_dtoa_r+0x4d0>
 800c194:	9b08      	ldr	r3, [sp, #32]
 800c196:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f000 80fd 	beq.w	800c39a <_dtoa_r+0xba2>
 800c1a0:	2d00      	cmp	r5, #0
 800c1a2:	dd05      	ble.n	800c1b0 <_dtoa_r+0x9b8>
 800c1a4:	4639      	mov	r1, r7
 800c1a6:	462a      	mov	r2, r5
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f001 f919 	bl	800d3e0 <__lshift>
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	9b06      	ldr	r3, [sp, #24]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d05c      	beq.n	800c270 <_dtoa_r+0xa78>
 800c1b6:	6879      	ldr	r1, [r7, #4]
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	f000 feb5 	bl	800cf28 <_Balloc>
 800c1be:	4605      	mov	r5, r0
 800c1c0:	b928      	cbnz	r0, 800c1ce <_dtoa_r+0x9d6>
 800c1c2:	4b80      	ldr	r3, [pc, #512]	; (800c3c4 <_dtoa_r+0xbcc>)
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1ca:	f7ff bb2e 	b.w	800b82a <_dtoa_r+0x32>
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	3202      	adds	r2, #2
 800c1d2:	0092      	lsls	r2, r2, #2
 800c1d4:	f107 010c 	add.w	r1, r7, #12
 800c1d8:	300c      	adds	r0, #12
 800c1da:	f7fd fbc9 	bl	8009970 <memcpy>
 800c1de:	2201      	movs	r2, #1
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f001 f8fc 	bl	800d3e0 <__lshift>
 800c1e8:	9b00      	ldr	r3, [sp, #0]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	9301      	str	r3, [sp, #4]
 800c1ee:	9b00      	ldr	r3, [sp, #0]
 800c1f0:	444b      	add	r3, r9
 800c1f2:	9307      	str	r3, [sp, #28]
 800c1f4:	9b02      	ldr	r3, [sp, #8]
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	46b8      	mov	r8, r7
 800c1fc:	9306      	str	r3, [sp, #24]
 800c1fe:	4607      	mov	r7, r0
 800c200:	9b01      	ldr	r3, [sp, #4]
 800c202:	4631      	mov	r1, r6
 800c204:	3b01      	subs	r3, #1
 800c206:	4658      	mov	r0, fp
 800c208:	9302      	str	r3, [sp, #8]
 800c20a:	f7ff fa67 	bl	800b6dc <quorem>
 800c20e:	4603      	mov	r3, r0
 800c210:	3330      	adds	r3, #48	; 0x30
 800c212:	9004      	str	r0, [sp, #16]
 800c214:	4641      	mov	r1, r8
 800c216:	4658      	mov	r0, fp
 800c218:	9308      	str	r3, [sp, #32]
 800c21a:	f001 f94d 	bl	800d4b8 <__mcmp>
 800c21e:	463a      	mov	r2, r7
 800c220:	4681      	mov	r9, r0
 800c222:	4631      	mov	r1, r6
 800c224:	4620      	mov	r0, r4
 800c226:	f001 f963 	bl	800d4f0 <__mdiff>
 800c22a:	68c2      	ldr	r2, [r0, #12]
 800c22c:	9b08      	ldr	r3, [sp, #32]
 800c22e:	4605      	mov	r5, r0
 800c230:	bb02      	cbnz	r2, 800c274 <_dtoa_r+0xa7c>
 800c232:	4601      	mov	r1, r0
 800c234:	4658      	mov	r0, fp
 800c236:	f001 f93f 	bl	800d4b8 <__mcmp>
 800c23a:	9b08      	ldr	r3, [sp, #32]
 800c23c:	4602      	mov	r2, r0
 800c23e:	4629      	mov	r1, r5
 800c240:	4620      	mov	r0, r4
 800c242:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c246:	f000 feaf 	bl	800cfa8 <_Bfree>
 800c24a:	9b05      	ldr	r3, [sp, #20]
 800c24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c24e:	9d01      	ldr	r5, [sp, #4]
 800c250:	ea43 0102 	orr.w	r1, r3, r2
 800c254:	9b06      	ldr	r3, [sp, #24]
 800c256:	430b      	orrs	r3, r1
 800c258:	9b08      	ldr	r3, [sp, #32]
 800c25a:	d10d      	bne.n	800c278 <_dtoa_r+0xa80>
 800c25c:	2b39      	cmp	r3, #57	; 0x39
 800c25e:	d029      	beq.n	800c2b4 <_dtoa_r+0xabc>
 800c260:	f1b9 0f00 	cmp.w	r9, #0
 800c264:	dd01      	ble.n	800c26a <_dtoa_r+0xa72>
 800c266:	9b04      	ldr	r3, [sp, #16]
 800c268:	3331      	adds	r3, #49	; 0x31
 800c26a:	9a02      	ldr	r2, [sp, #8]
 800c26c:	7013      	strb	r3, [r2, #0]
 800c26e:	e774      	b.n	800c15a <_dtoa_r+0x962>
 800c270:	4638      	mov	r0, r7
 800c272:	e7b9      	b.n	800c1e8 <_dtoa_r+0x9f0>
 800c274:	2201      	movs	r2, #1
 800c276:	e7e2      	b.n	800c23e <_dtoa_r+0xa46>
 800c278:	f1b9 0f00 	cmp.w	r9, #0
 800c27c:	db06      	blt.n	800c28c <_dtoa_r+0xa94>
 800c27e:	9905      	ldr	r1, [sp, #20]
 800c280:	ea41 0909 	orr.w	r9, r1, r9
 800c284:	9906      	ldr	r1, [sp, #24]
 800c286:	ea59 0101 	orrs.w	r1, r9, r1
 800c28a:	d120      	bne.n	800c2ce <_dtoa_r+0xad6>
 800c28c:	2a00      	cmp	r2, #0
 800c28e:	ddec      	ble.n	800c26a <_dtoa_r+0xa72>
 800c290:	4659      	mov	r1, fp
 800c292:	2201      	movs	r2, #1
 800c294:	4620      	mov	r0, r4
 800c296:	9301      	str	r3, [sp, #4]
 800c298:	f001 f8a2 	bl	800d3e0 <__lshift>
 800c29c:	4631      	mov	r1, r6
 800c29e:	4683      	mov	fp, r0
 800c2a0:	f001 f90a 	bl	800d4b8 <__mcmp>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	9b01      	ldr	r3, [sp, #4]
 800c2a8:	dc02      	bgt.n	800c2b0 <_dtoa_r+0xab8>
 800c2aa:	d1de      	bne.n	800c26a <_dtoa_r+0xa72>
 800c2ac:	07da      	lsls	r2, r3, #31
 800c2ae:	d5dc      	bpl.n	800c26a <_dtoa_r+0xa72>
 800c2b0:	2b39      	cmp	r3, #57	; 0x39
 800c2b2:	d1d8      	bne.n	800c266 <_dtoa_r+0xa6e>
 800c2b4:	9a02      	ldr	r2, [sp, #8]
 800c2b6:	2339      	movs	r3, #57	; 0x39
 800c2b8:	7013      	strb	r3, [r2, #0]
 800c2ba:	462b      	mov	r3, r5
 800c2bc:	461d      	mov	r5, r3
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2c4:	2a39      	cmp	r2, #57	; 0x39
 800c2c6:	d050      	beq.n	800c36a <_dtoa_r+0xb72>
 800c2c8:	3201      	adds	r2, #1
 800c2ca:	701a      	strb	r2, [r3, #0]
 800c2cc:	e745      	b.n	800c15a <_dtoa_r+0x962>
 800c2ce:	2a00      	cmp	r2, #0
 800c2d0:	dd03      	ble.n	800c2da <_dtoa_r+0xae2>
 800c2d2:	2b39      	cmp	r3, #57	; 0x39
 800c2d4:	d0ee      	beq.n	800c2b4 <_dtoa_r+0xabc>
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	e7c7      	b.n	800c26a <_dtoa_r+0xa72>
 800c2da:	9a01      	ldr	r2, [sp, #4]
 800c2dc:	9907      	ldr	r1, [sp, #28]
 800c2de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c2e2:	428a      	cmp	r2, r1
 800c2e4:	d02a      	beq.n	800c33c <_dtoa_r+0xb44>
 800c2e6:	4659      	mov	r1, fp
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	220a      	movs	r2, #10
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f000 fe7d 	bl	800cfec <__multadd>
 800c2f2:	45b8      	cmp	r8, r7
 800c2f4:	4683      	mov	fp, r0
 800c2f6:	f04f 0300 	mov.w	r3, #0
 800c2fa:	f04f 020a 	mov.w	r2, #10
 800c2fe:	4641      	mov	r1, r8
 800c300:	4620      	mov	r0, r4
 800c302:	d107      	bne.n	800c314 <_dtoa_r+0xb1c>
 800c304:	f000 fe72 	bl	800cfec <__multadd>
 800c308:	4680      	mov	r8, r0
 800c30a:	4607      	mov	r7, r0
 800c30c:	9b01      	ldr	r3, [sp, #4]
 800c30e:	3301      	adds	r3, #1
 800c310:	9301      	str	r3, [sp, #4]
 800c312:	e775      	b.n	800c200 <_dtoa_r+0xa08>
 800c314:	f000 fe6a 	bl	800cfec <__multadd>
 800c318:	4639      	mov	r1, r7
 800c31a:	4680      	mov	r8, r0
 800c31c:	2300      	movs	r3, #0
 800c31e:	220a      	movs	r2, #10
 800c320:	4620      	mov	r0, r4
 800c322:	f000 fe63 	bl	800cfec <__multadd>
 800c326:	4607      	mov	r7, r0
 800c328:	e7f0      	b.n	800c30c <_dtoa_r+0xb14>
 800c32a:	f1b9 0f00 	cmp.w	r9, #0
 800c32e:	9a00      	ldr	r2, [sp, #0]
 800c330:	bfcc      	ite	gt
 800c332:	464d      	movgt	r5, r9
 800c334:	2501      	movle	r5, #1
 800c336:	4415      	add	r5, r2
 800c338:	f04f 0800 	mov.w	r8, #0
 800c33c:	4659      	mov	r1, fp
 800c33e:	2201      	movs	r2, #1
 800c340:	4620      	mov	r0, r4
 800c342:	9301      	str	r3, [sp, #4]
 800c344:	f001 f84c 	bl	800d3e0 <__lshift>
 800c348:	4631      	mov	r1, r6
 800c34a:	4683      	mov	fp, r0
 800c34c:	f001 f8b4 	bl	800d4b8 <__mcmp>
 800c350:	2800      	cmp	r0, #0
 800c352:	dcb2      	bgt.n	800c2ba <_dtoa_r+0xac2>
 800c354:	d102      	bne.n	800c35c <_dtoa_r+0xb64>
 800c356:	9b01      	ldr	r3, [sp, #4]
 800c358:	07db      	lsls	r3, r3, #31
 800c35a:	d4ae      	bmi.n	800c2ba <_dtoa_r+0xac2>
 800c35c:	462b      	mov	r3, r5
 800c35e:	461d      	mov	r5, r3
 800c360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c364:	2a30      	cmp	r2, #48	; 0x30
 800c366:	d0fa      	beq.n	800c35e <_dtoa_r+0xb66>
 800c368:	e6f7      	b.n	800c15a <_dtoa_r+0x962>
 800c36a:	9a00      	ldr	r2, [sp, #0]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d1a5      	bne.n	800c2bc <_dtoa_r+0xac4>
 800c370:	f10a 0a01 	add.w	sl, sl, #1
 800c374:	2331      	movs	r3, #49	; 0x31
 800c376:	e779      	b.n	800c26c <_dtoa_r+0xa74>
 800c378:	4b13      	ldr	r3, [pc, #76]	; (800c3c8 <_dtoa_r+0xbd0>)
 800c37a:	f7ff baaf 	b.w	800b8dc <_dtoa_r+0xe4>
 800c37e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c380:	2b00      	cmp	r3, #0
 800c382:	f47f aa86 	bne.w	800b892 <_dtoa_r+0x9a>
 800c386:	4b11      	ldr	r3, [pc, #68]	; (800c3cc <_dtoa_r+0xbd4>)
 800c388:	f7ff baa8 	b.w	800b8dc <_dtoa_r+0xe4>
 800c38c:	f1b9 0f00 	cmp.w	r9, #0
 800c390:	dc03      	bgt.n	800c39a <_dtoa_r+0xba2>
 800c392:	9b05      	ldr	r3, [sp, #20]
 800c394:	2b02      	cmp	r3, #2
 800c396:	f73f aec9 	bgt.w	800c12c <_dtoa_r+0x934>
 800c39a:	9d00      	ldr	r5, [sp, #0]
 800c39c:	4631      	mov	r1, r6
 800c39e:	4658      	mov	r0, fp
 800c3a0:	f7ff f99c 	bl	800b6dc <quorem>
 800c3a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c3a8:	f805 3b01 	strb.w	r3, [r5], #1
 800c3ac:	9a00      	ldr	r2, [sp, #0]
 800c3ae:	1aaa      	subs	r2, r5, r2
 800c3b0:	4591      	cmp	r9, r2
 800c3b2:	ddba      	ble.n	800c32a <_dtoa_r+0xb32>
 800c3b4:	4659      	mov	r1, fp
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	220a      	movs	r2, #10
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f000 fe16 	bl	800cfec <__multadd>
 800c3c0:	4683      	mov	fp, r0
 800c3c2:	e7eb      	b.n	800c39c <_dtoa_r+0xba4>
 800c3c4:	0800e824 	.word	0x0800e824
 800c3c8:	0800e624 	.word	0x0800e624
 800c3cc:	0800e7a1 	.word	0x0800e7a1

0800c3d0 <__sflush_r>:
 800c3d0:	898a      	ldrh	r2, [r1, #12]
 800c3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	0710      	lsls	r0, r2, #28
 800c3da:	460c      	mov	r4, r1
 800c3dc:	d458      	bmi.n	800c490 <__sflush_r+0xc0>
 800c3de:	684b      	ldr	r3, [r1, #4]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	dc05      	bgt.n	800c3f0 <__sflush_r+0x20>
 800c3e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	dc02      	bgt.n	800c3f0 <__sflush_r+0x20>
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3f2:	2e00      	cmp	r6, #0
 800c3f4:	d0f9      	beq.n	800c3ea <__sflush_r+0x1a>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3fc:	682f      	ldr	r7, [r5, #0]
 800c3fe:	602b      	str	r3, [r5, #0]
 800c400:	d032      	beq.n	800c468 <__sflush_r+0x98>
 800c402:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	075a      	lsls	r2, r3, #29
 800c408:	d505      	bpl.n	800c416 <__sflush_r+0x46>
 800c40a:	6863      	ldr	r3, [r4, #4]
 800c40c:	1ac0      	subs	r0, r0, r3
 800c40e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c410:	b10b      	cbz	r3, 800c416 <__sflush_r+0x46>
 800c412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c414:	1ac0      	subs	r0, r0, r3
 800c416:	2300      	movs	r3, #0
 800c418:	4602      	mov	r2, r0
 800c41a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c41c:	6a21      	ldr	r1, [r4, #32]
 800c41e:	4628      	mov	r0, r5
 800c420:	47b0      	blx	r6
 800c422:	1c43      	adds	r3, r0, #1
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	d106      	bne.n	800c436 <__sflush_r+0x66>
 800c428:	6829      	ldr	r1, [r5, #0]
 800c42a:	291d      	cmp	r1, #29
 800c42c:	d82c      	bhi.n	800c488 <__sflush_r+0xb8>
 800c42e:	4a2a      	ldr	r2, [pc, #168]	; (800c4d8 <__sflush_r+0x108>)
 800c430:	40ca      	lsrs	r2, r1
 800c432:	07d6      	lsls	r6, r2, #31
 800c434:	d528      	bpl.n	800c488 <__sflush_r+0xb8>
 800c436:	2200      	movs	r2, #0
 800c438:	6062      	str	r2, [r4, #4]
 800c43a:	04d9      	lsls	r1, r3, #19
 800c43c:	6922      	ldr	r2, [r4, #16]
 800c43e:	6022      	str	r2, [r4, #0]
 800c440:	d504      	bpl.n	800c44c <__sflush_r+0x7c>
 800c442:	1c42      	adds	r2, r0, #1
 800c444:	d101      	bne.n	800c44a <__sflush_r+0x7a>
 800c446:	682b      	ldr	r3, [r5, #0]
 800c448:	b903      	cbnz	r3, 800c44c <__sflush_r+0x7c>
 800c44a:	6560      	str	r0, [r4, #84]	; 0x54
 800c44c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c44e:	602f      	str	r7, [r5, #0]
 800c450:	2900      	cmp	r1, #0
 800c452:	d0ca      	beq.n	800c3ea <__sflush_r+0x1a>
 800c454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c458:	4299      	cmp	r1, r3
 800c45a:	d002      	beq.n	800c462 <__sflush_r+0x92>
 800c45c:	4628      	mov	r0, r5
 800c45e:	f001 fa2d 	bl	800d8bc <_free_r>
 800c462:	2000      	movs	r0, #0
 800c464:	6360      	str	r0, [r4, #52]	; 0x34
 800c466:	e7c1      	b.n	800c3ec <__sflush_r+0x1c>
 800c468:	6a21      	ldr	r1, [r4, #32]
 800c46a:	2301      	movs	r3, #1
 800c46c:	4628      	mov	r0, r5
 800c46e:	47b0      	blx	r6
 800c470:	1c41      	adds	r1, r0, #1
 800c472:	d1c7      	bne.n	800c404 <__sflush_r+0x34>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d0c4      	beq.n	800c404 <__sflush_r+0x34>
 800c47a:	2b1d      	cmp	r3, #29
 800c47c:	d001      	beq.n	800c482 <__sflush_r+0xb2>
 800c47e:	2b16      	cmp	r3, #22
 800c480:	d101      	bne.n	800c486 <__sflush_r+0xb6>
 800c482:	602f      	str	r7, [r5, #0]
 800c484:	e7b1      	b.n	800c3ea <__sflush_r+0x1a>
 800c486:	89a3      	ldrh	r3, [r4, #12]
 800c488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c48c:	81a3      	strh	r3, [r4, #12]
 800c48e:	e7ad      	b.n	800c3ec <__sflush_r+0x1c>
 800c490:	690f      	ldr	r7, [r1, #16]
 800c492:	2f00      	cmp	r7, #0
 800c494:	d0a9      	beq.n	800c3ea <__sflush_r+0x1a>
 800c496:	0793      	lsls	r3, r2, #30
 800c498:	680e      	ldr	r6, [r1, #0]
 800c49a:	bf08      	it	eq
 800c49c:	694b      	ldreq	r3, [r1, #20]
 800c49e:	600f      	str	r7, [r1, #0]
 800c4a0:	bf18      	it	ne
 800c4a2:	2300      	movne	r3, #0
 800c4a4:	eba6 0807 	sub.w	r8, r6, r7
 800c4a8:	608b      	str	r3, [r1, #8]
 800c4aa:	f1b8 0f00 	cmp.w	r8, #0
 800c4ae:	dd9c      	ble.n	800c3ea <__sflush_r+0x1a>
 800c4b0:	6a21      	ldr	r1, [r4, #32]
 800c4b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4b4:	4643      	mov	r3, r8
 800c4b6:	463a      	mov	r2, r7
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	47b0      	blx	r6
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	dc06      	bgt.n	800c4ce <__sflush_r+0xfe>
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4c6:	81a3      	strh	r3, [r4, #12]
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4cc:	e78e      	b.n	800c3ec <__sflush_r+0x1c>
 800c4ce:	4407      	add	r7, r0
 800c4d0:	eba8 0800 	sub.w	r8, r8, r0
 800c4d4:	e7e9      	b.n	800c4aa <__sflush_r+0xda>
 800c4d6:	bf00      	nop
 800c4d8:	20400001 	.word	0x20400001

0800c4dc <_fflush_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	690b      	ldr	r3, [r1, #16]
 800c4e0:	4605      	mov	r5, r0
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	b913      	cbnz	r3, 800c4ec <_fflush_r+0x10>
 800c4e6:	2500      	movs	r5, #0
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	bd38      	pop	{r3, r4, r5, pc}
 800c4ec:	b118      	cbz	r0, 800c4f6 <_fflush_r+0x1a>
 800c4ee:	6983      	ldr	r3, [r0, #24]
 800c4f0:	b90b      	cbnz	r3, 800c4f6 <_fflush_r+0x1a>
 800c4f2:	f000 f887 	bl	800c604 <__sinit>
 800c4f6:	4b14      	ldr	r3, [pc, #80]	; (800c548 <_fflush_r+0x6c>)
 800c4f8:	429c      	cmp	r4, r3
 800c4fa:	d11b      	bne.n	800c534 <_fflush_r+0x58>
 800c4fc:	686c      	ldr	r4, [r5, #4]
 800c4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0ef      	beq.n	800c4e6 <_fflush_r+0xa>
 800c506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c508:	07d0      	lsls	r0, r2, #31
 800c50a:	d404      	bmi.n	800c516 <_fflush_r+0x3a>
 800c50c:	0599      	lsls	r1, r3, #22
 800c50e:	d402      	bmi.n	800c516 <_fflush_r+0x3a>
 800c510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c512:	f000 fc88 	bl	800ce26 <__retarget_lock_acquire_recursive>
 800c516:	4628      	mov	r0, r5
 800c518:	4621      	mov	r1, r4
 800c51a:	f7ff ff59 	bl	800c3d0 <__sflush_r>
 800c51e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c520:	07da      	lsls	r2, r3, #31
 800c522:	4605      	mov	r5, r0
 800c524:	d4e0      	bmi.n	800c4e8 <_fflush_r+0xc>
 800c526:	89a3      	ldrh	r3, [r4, #12]
 800c528:	059b      	lsls	r3, r3, #22
 800c52a:	d4dd      	bmi.n	800c4e8 <_fflush_r+0xc>
 800c52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c52e:	f000 fc7b 	bl	800ce28 <__retarget_lock_release_recursive>
 800c532:	e7d9      	b.n	800c4e8 <_fflush_r+0xc>
 800c534:	4b05      	ldr	r3, [pc, #20]	; (800c54c <_fflush_r+0x70>)
 800c536:	429c      	cmp	r4, r3
 800c538:	d101      	bne.n	800c53e <_fflush_r+0x62>
 800c53a:	68ac      	ldr	r4, [r5, #8]
 800c53c:	e7df      	b.n	800c4fe <_fflush_r+0x22>
 800c53e:	4b04      	ldr	r3, [pc, #16]	; (800c550 <_fflush_r+0x74>)
 800c540:	429c      	cmp	r4, r3
 800c542:	bf08      	it	eq
 800c544:	68ec      	ldreq	r4, [r5, #12]
 800c546:	e7da      	b.n	800c4fe <_fflush_r+0x22>
 800c548:	0800e858 	.word	0x0800e858
 800c54c:	0800e878 	.word	0x0800e878
 800c550:	0800e838 	.word	0x0800e838

0800c554 <std>:
 800c554:	2300      	movs	r3, #0
 800c556:	b510      	push	{r4, lr}
 800c558:	4604      	mov	r4, r0
 800c55a:	e9c0 3300 	strd	r3, r3, [r0]
 800c55e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c562:	6083      	str	r3, [r0, #8]
 800c564:	8181      	strh	r1, [r0, #12]
 800c566:	6643      	str	r3, [r0, #100]	; 0x64
 800c568:	81c2      	strh	r2, [r0, #14]
 800c56a:	6183      	str	r3, [r0, #24]
 800c56c:	4619      	mov	r1, r3
 800c56e:	2208      	movs	r2, #8
 800c570:	305c      	adds	r0, #92	; 0x5c
 800c572:	f7fd fa0b 	bl	800998c <memset>
 800c576:	4b05      	ldr	r3, [pc, #20]	; (800c58c <std+0x38>)
 800c578:	6263      	str	r3, [r4, #36]	; 0x24
 800c57a:	4b05      	ldr	r3, [pc, #20]	; (800c590 <std+0x3c>)
 800c57c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c57e:	4b05      	ldr	r3, [pc, #20]	; (800c594 <std+0x40>)
 800c580:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c582:	4b05      	ldr	r3, [pc, #20]	; (800c598 <std+0x44>)
 800c584:	6224      	str	r4, [r4, #32]
 800c586:	6323      	str	r3, [r4, #48]	; 0x30
 800c588:	bd10      	pop	{r4, pc}
 800c58a:	bf00      	nop
 800c58c:	0800dfb1 	.word	0x0800dfb1
 800c590:	0800dfd3 	.word	0x0800dfd3
 800c594:	0800e00b 	.word	0x0800e00b
 800c598:	0800e02f 	.word	0x0800e02f

0800c59c <_cleanup_r>:
 800c59c:	4901      	ldr	r1, [pc, #4]	; (800c5a4 <_cleanup_r+0x8>)
 800c59e:	f000 b8af 	b.w	800c700 <_fwalk_reent>
 800c5a2:	bf00      	nop
 800c5a4:	0800c4dd 	.word	0x0800c4dd

0800c5a8 <__sfmoreglue>:
 800c5a8:	b570      	push	{r4, r5, r6, lr}
 800c5aa:	1e4a      	subs	r2, r1, #1
 800c5ac:	2568      	movs	r5, #104	; 0x68
 800c5ae:	4355      	muls	r5, r2
 800c5b0:	460e      	mov	r6, r1
 800c5b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c5b6:	f001 f9d1 	bl	800d95c <_malloc_r>
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	b140      	cbz	r0, 800c5d0 <__sfmoreglue+0x28>
 800c5be:	2100      	movs	r1, #0
 800c5c0:	e9c0 1600 	strd	r1, r6, [r0]
 800c5c4:	300c      	adds	r0, #12
 800c5c6:	60a0      	str	r0, [r4, #8]
 800c5c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c5cc:	f7fd f9de 	bl	800998c <memset>
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	bd70      	pop	{r4, r5, r6, pc}

0800c5d4 <__sfp_lock_acquire>:
 800c5d4:	4801      	ldr	r0, [pc, #4]	; (800c5dc <__sfp_lock_acquire+0x8>)
 800c5d6:	f000 bc26 	b.w	800ce26 <__retarget_lock_acquire_recursive>
 800c5da:	bf00      	nop
 800c5dc:	20001cf4 	.word	0x20001cf4

0800c5e0 <__sfp_lock_release>:
 800c5e0:	4801      	ldr	r0, [pc, #4]	; (800c5e8 <__sfp_lock_release+0x8>)
 800c5e2:	f000 bc21 	b.w	800ce28 <__retarget_lock_release_recursive>
 800c5e6:	bf00      	nop
 800c5e8:	20001cf4 	.word	0x20001cf4

0800c5ec <__sinit_lock_acquire>:
 800c5ec:	4801      	ldr	r0, [pc, #4]	; (800c5f4 <__sinit_lock_acquire+0x8>)
 800c5ee:	f000 bc1a 	b.w	800ce26 <__retarget_lock_acquire_recursive>
 800c5f2:	bf00      	nop
 800c5f4:	20001cef 	.word	0x20001cef

0800c5f8 <__sinit_lock_release>:
 800c5f8:	4801      	ldr	r0, [pc, #4]	; (800c600 <__sinit_lock_release+0x8>)
 800c5fa:	f000 bc15 	b.w	800ce28 <__retarget_lock_release_recursive>
 800c5fe:	bf00      	nop
 800c600:	20001cef 	.word	0x20001cef

0800c604 <__sinit>:
 800c604:	b510      	push	{r4, lr}
 800c606:	4604      	mov	r4, r0
 800c608:	f7ff fff0 	bl	800c5ec <__sinit_lock_acquire>
 800c60c:	69a3      	ldr	r3, [r4, #24]
 800c60e:	b11b      	cbz	r3, 800c618 <__sinit+0x14>
 800c610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c614:	f7ff bff0 	b.w	800c5f8 <__sinit_lock_release>
 800c618:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c61c:	6523      	str	r3, [r4, #80]	; 0x50
 800c61e:	4b13      	ldr	r3, [pc, #76]	; (800c66c <__sinit+0x68>)
 800c620:	4a13      	ldr	r2, [pc, #76]	; (800c670 <__sinit+0x6c>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	62a2      	str	r2, [r4, #40]	; 0x28
 800c626:	42a3      	cmp	r3, r4
 800c628:	bf04      	itt	eq
 800c62a:	2301      	moveq	r3, #1
 800c62c:	61a3      	streq	r3, [r4, #24]
 800c62e:	4620      	mov	r0, r4
 800c630:	f000 f820 	bl	800c674 <__sfp>
 800c634:	6060      	str	r0, [r4, #4]
 800c636:	4620      	mov	r0, r4
 800c638:	f000 f81c 	bl	800c674 <__sfp>
 800c63c:	60a0      	str	r0, [r4, #8]
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 f818 	bl	800c674 <__sfp>
 800c644:	2200      	movs	r2, #0
 800c646:	60e0      	str	r0, [r4, #12]
 800c648:	2104      	movs	r1, #4
 800c64a:	6860      	ldr	r0, [r4, #4]
 800c64c:	f7ff ff82 	bl	800c554 <std>
 800c650:	68a0      	ldr	r0, [r4, #8]
 800c652:	2201      	movs	r2, #1
 800c654:	2109      	movs	r1, #9
 800c656:	f7ff ff7d 	bl	800c554 <std>
 800c65a:	68e0      	ldr	r0, [r4, #12]
 800c65c:	2202      	movs	r2, #2
 800c65e:	2112      	movs	r1, #18
 800c660:	f7ff ff78 	bl	800c554 <std>
 800c664:	2301      	movs	r3, #1
 800c666:	61a3      	str	r3, [r4, #24]
 800c668:	e7d2      	b.n	800c610 <__sinit+0xc>
 800c66a:	bf00      	nop
 800c66c:	0800e610 	.word	0x0800e610
 800c670:	0800c59d 	.word	0x0800c59d

0800c674 <__sfp>:
 800c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c676:	4607      	mov	r7, r0
 800c678:	f7ff ffac 	bl	800c5d4 <__sfp_lock_acquire>
 800c67c:	4b1e      	ldr	r3, [pc, #120]	; (800c6f8 <__sfp+0x84>)
 800c67e:	681e      	ldr	r6, [r3, #0]
 800c680:	69b3      	ldr	r3, [r6, #24]
 800c682:	b913      	cbnz	r3, 800c68a <__sfp+0x16>
 800c684:	4630      	mov	r0, r6
 800c686:	f7ff ffbd 	bl	800c604 <__sinit>
 800c68a:	3648      	adds	r6, #72	; 0x48
 800c68c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c690:	3b01      	subs	r3, #1
 800c692:	d503      	bpl.n	800c69c <__sfp+0x28>
 800c694:	6833      	ldr	r3, [r6, #0]
 800c696:	b30b      	cbz	r3, 800c6dc <__sfp+0x68>
 800c698:	6836      	ldr	r6, [r6, #0]
 800c69a:	e7f7      	b.n	800c68c <__sfp+0x18>
 800c69c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c6a0:	b9d5      	cbnz	r5, 800c6d8 <__sfp+0x64>
 800c6a2:	4b16      	ldr	r3, [pc, #88]	; (800c6fc <__sfp+0x88>)
 800c6a4:	60e3      	str	r3, [r4, #12]
 800c6a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c6aa:	6665      	str	r5, [r4, #100]	; 0x64
 800c6ac:	f000 fbba 	bl	800ce24 <__retarget_lock_init_recursive>
 800c6b0:	f7ff ff96 	bl	800c5e0 <__sfp_lock_release>
 800c6b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c6b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c6bc:	6025      	str	r5, [r4, #0]
 800c6be:	61a5      	str	r5, [r4, #24]
 800c6c0:	2208      	movs	r2, #8
 800c6c2:	4629      	mov	r1, r5
 800c6c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6c8:	f7fd f960 	bl	800998c <memset>
 800c6cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c6d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6d8:	3468      	adds	r4, #104	; 0x68
 800c6da:	e7d9      	b.n	800c690 <__sfp+0x1c>
 800c6dc:	2104      	movs	r1, #4
 800c6de:	4638      	mov	r0, r7
 800c6e0:	f7ff ff62 	bl	800c5a8 <__sfmoreglue>
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	6030      	str	r0, [r6, #0]
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d1d5      	bne.n	800c698 <__sfp+0x24>
 800c6ec:	f7ff ff78 	bl	800c5e0 <__sfp_lock_release>
 800c6f0:	230c      	movs	r3, #12
 800c6f2:	603b      	str	r3, [r7, #0]
 800c6f4:	e7ee      	b.n	800c6d4 <__sfp+0x60>
 800c6f6:	bf00      	nop
 800c6f8:	0800e610 	.word	0x0800e610
 800c6fc:	ffff0001 	.word	0xffff0001

0800c700 <_fwalk_reent>:
 800c700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c704:	4606      	mov	r6, r0
 800c706:	4688      	mov	r8, r1
 800c708:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c70c:	2700      	movs	r7, #0
 800c70e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c712:	f1b9 0901 	subs.w	r9, r9, #1
 800c716:	d505      	bpl.n	800c724 <_fwalk_reent+0x24>
 800c718:	6824      	ldr	r4, [r4, #0]
 800c71a:	2c00      	cmp	r4, #0
 800c71c:	d1f7      	bne.n	800c70e <_fwalk_reent+0xe>
 800c71e:	4638      	mov	r0, r7
 800c720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c724:	89ab      	ldrh	r3, [r5, #12]
 800c726:	2b01      	cmp	r3, #1
 800c728:	d907      	bls.n	800c73a <_fwalk_reent+0x3a>
 800c72a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c72e:	3301      	adds	r3, #1
 800c730:	d003      	beq.n	800c73a <_fwalk_reent+0x3a>
 800c732:	4629      	mov	r1, r5
 800c734:	4630      	mov	r0, r6
 800c736:	47c0      	blx	r8
 800c738:	4307      	orrs	r7, r0
 800c73a:	3568      	adds	r5, #104	; 0x68
 800c73c:	e7e9      	b.n	800c712 <_fwalk_reent+0x12>

0800c73e <rshift>:
 800c73e:	6903      	ldr	r3, [r0, #16]
 800c740:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c748:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c74c:	f100 0414 	add.w	r4, r0, #20
 800c750:	dd45      	ble.n	800c7de <rshift+0xa0>
 800c752:	f011 011f 	ands.w	r1, r1, #31
 800c756:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c75a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c75e:	d10c      	bne.n	800c77a <rshift+0x3c>
 800c760:	f100 0710 	add.w	r7, r0, #16
 800c764:	4629      	mov	r1, r5
 800c766:	42b1      	cmp	r1, r6
 800c768:	d334      	bcc.n	800c7d4 <rshift+0x96>
 800c76a:	1a9b      	subs	r3, r3, r2
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	1eea      	subs	r2, r5, #3
 800c770:	4296      	cmp	r6, r2
 800c772:	bf38      	it	cc
 800c774:	2300      	movcc	r3, #0
 800c776:	4423      	add	r3, r4
 800c778:	e015      	b.n	800c7a6 <rshift+0x68>
 800c77a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c77e:	f1c1 0820 	rsb	r8, r1, #32
 800c782:	40cf      	lsrs	r7, r1
 800c784:	f105 0e04 	add.w	lr, r5, #4
 800c788:	46a1      	mov	r9, r4
 800c78a:	4576      	cmp	r6, lr
 800c78c:	46f4      	mov	ip, lr
 800c78e:	d815      	bhi.n	800c7bc <rshift+0x7e>
 800c790:	1a9b      	subs	r3, r3, r2
 800c792:	009a      	lsls	r2, r3, #2
 800c794:	3a04      	subs	r2, #4
 800c796:	3501      	adds	r5, #1
 800c798:	42ae      	cmp	r6, r5
 800c79a:	bf38      	it	cc
 800c79c:	2200      	movcc	r2, #0
 800c79e:	18a3      	adds	r3, r4, r2
 800c7a0:	50a7      	str	r7, [r4, r2]
 800c7a2:	b107      	cbz	r7, 800c7a6 <rshift+0x68>
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	1b1a      	subs	r2, r3, r4
 800c7a8:	42a3      	cmp	r3, r4
 800c7aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c7ae:	bf08      	it	eq
 800c7b0:	2300      	moveq	r3, #0
 800c7b2:	6102      	str	r2, [r0, #16]
 800c7b4:	bf08      	it	eq
 800c7b6:	6143      	streq	r3, [r0, #20]
 800c7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7bc:	f8dc c000 	ldr.w	ip, [ip]
 800c7c0:	fa0c fc08 	lsl.w	ip, ip, r8
 800c7c4:	ea4c 0707 	orr.w	r7, ip, r7
 800c7c8:	f849 7b04 	str.w	r7, [r9], #4
 800c7cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c7d0:	40cf      	lsrs	r7, r1
 800c7d2:	e7da      	b.n	800c78a <rshift+0x4c>
 800c7d4:	f851 cb04 	ldr.w	ip, [r1], #4
 800c7d8:	f847 cf04 	str.w	ip, [r7, #4]!
 800c7dc:	e7c3      	b.n	800c766 <rshift+0x28>
 800c7de:	4623      	mov	r3, r4
 800c7e0:	e7e1      	b.n	800c7a6 <rshift+0x68>

0800c7e2 <__hexdig_fun>:
 800c7e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c7e6:	2b09      	cmp	r3, #9
 800c7e8:	d802      	bhi.n	800c7f0 <__hexdig_fun+0xe>
 800c7ea:	3820      	subs	r0, #32
 800c7ec:	b2c0      	uxtb	r0, r0
 800c7ee:	4770      	bx	lr
 800c7f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c7f4:	2b05      	cmp	r3, #5
 800c7f6:	d801      	bhi.n	800c7fc <__hexdig_fun+0x1a>
 800c7f8:	3847      	subs	r0, #71	; 0x47
 800c7fa:	e7f7      	b.n	800c7ec <__hexdig_fun+0xa>
 800c7fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c800:	2b05      	cmp	r3, #5
 800c802:	d801      	bhi.n	800c808 <__hexdig_fun+0x26>
 800c804:	3827      	subs	r0, #39	; 0x27
 800c806:	e7f1      	b.n	800c7ec <__hexdig_fun+0xa>
 800c808:	2000      	movs	r0, #0
 800c80a:	4770      	bx	lr

0800c80c <__gethex>:
 800c80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	ed2d 8b02 	vpush	{d8}
 800c814:	b089      	sub	sp, #36	; 0x24
 800c816:	ee08 0a10 	vmov	s16, r0
 800c81a:	9304      	str	r3, [sp, #16]
 800c81c:	4bbc      	ldr	r3, [pc, #752]	; (800cb10 <__gethex+0x304>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	4618      	mov	r0, r3
 800c824:	468b      	mov	fp, r1
 800c826:	4690      	mov	r8, r2
 800c828:	f7f3 fcd2 	bl	80001d0 <strlen>
 800c82c:	9b01      	ldr	r3, [sp, #4]
 800c82e:	f8db 2000 	ldr.w	r2, [fp]
 800c832:	4403      	add	r3, r0
 800c834:	4682      	mov	sl, r0
 800c836:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c83a:	9305      	str	r3, [sp, #20]
 800c83c:	1c93      	adds	r3, r2, #2
 800c83e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c842:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c846:	32fe      	adds	r2, #254	; 0xfe
 800c848:	18d1      	adds	r1, r2, r3
 800c84a:	461f      	mov	r7, r3
 800c84c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c850:	9100      	str	r1, [sp, #0]
 800c852:	2830      	cmp	r0, #48	; 0x30
 800c854:	d0f8      	beq.n	800c848 <__gethex+0x3c>
 800c856:	f7ff ffc4 	bl	800c7e2 <__hexdig_fun>
 800c85a:	4604      	mov	r4, r0
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d13a      	bne.n	800c8d6 <__gethex+0xca>
 800c860:	9901      	ldr	r1, [sp, #4]
 800c862:	4652      	mov	r2, sl
 800c864:	4638      	mov	r0, r7
 800c866:	f001 fbe6 	bl	800e036 <strncmp>
 800c86a:	4605      	mov	r5, r0
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d168      	bne.n	800c942 <__gethex+0x136>
 800c870:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c874:	eb07 060a 	add.w	r6, r7, sl
 800c878:	f7ff ffb3 	bl	800c7e2 <__hexdig_fun>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d062      	beq.n	800c946 <__gethex+0x13a>
 800c880:	4633      	mov	r3, r6
 800c882:	7818      	ldrb	r0, [r3, #0]
 800c884:	2830      	cmp	r0, #48	; 0x30
 800c886:	461f      	mov	r7, r3
 800c888:	f103 0301 	add.w	r3, r3, #1
 800c88c:	d0f9      	beq.n	800c882 <__gethex+0x76>
 800c88e:	f7ff ffa8 	bl	800c7e2 <__hexdig_fun>
 800c892:	2301      	movs	r3, #1
 800c894:	fab0 f480 	clz	r4, r0
 800c898:	0964      	lsrs	r4, r4, #5
 800c89a:	4635      	mov	r5, r6
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	463a      	mov	r2, r7
 800c8a0:	4616      	mov	r6, r2
 800c8a2:	3201      	adds	r2, #1
 800c8a4:	7830      	ldrb	r0, [r6, #0]
 800c8a6:	f7ff ff9c 	bl	800c7e2 <__hexdig_fun>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d1f8      	bne.n	800c8a0 <__gethex+0x94>
 800c8ae:	9901      	ldr	r1, [sp, #4]
 800c8b0:	4652      	mov	r2, sl
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f001 fbbf 	bl	800e036 <strncmp>
 800c8b8:	b980      	cbnz	r0, 800c8dc <__gethex+0xd0>
 800c8ba:	b94d      	cbnz	r5, 800c8d0 <__gethex+0xc4>
 800c8bc:	eb06 050a 	add.w	r5, r6, sl
 800c8c0:	462a      	mov	r2, r5
 800c8c2:	4616      	mov	r6, r2
 800c8c4:	3201      	adds	r2, #1
 800c8c6:	7830      	ldrb	r0, [r6, #0]
 800c8c8:	f7ff ff8b 	bl	800c7e2 <__hexdig_fun>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d1f8      	bne.n	800c8c2 <__gethex+0xb6>
 800c8d0:	1bad      	subs	r5, r5, r6
 800c8d2:	00ad      	lsls	r5, r5, #2
 800c8d4:	e004      	b.n	800c8e0 <__gethex+0xd4>
 800c8d6:	2400      	movs	r4, #0
 800c8d8:	4625      	mov	r5, r4
 800c8da:	e7e0      	b.n	800c89e <__gethex+0x92>
 800c8dc:	2d00      	cmp	r5, #0
 800c8de:	d1f7      	bne.n	800c8d0 <__gethex+0xc4>
 800c8e0:	7833      	ldrb	r3, [r6, #0]
 800c8e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c8e6:	2b50      	cmp	r3, #80	; 0x50
 800c8e8:	d13b      	bne.n	800c962 <__gethex+0x156>
 800c8ea:	7873      	ldrb	r3, [r6, #1]
 800c8ec:	2b2b      	cmp	r3, #43	; 0x2b
 800c8ee:	d02c      	beq.n	800c94a <__gethex+0x13e>
 800c8f0:	2b2d      	cmp	r3, #45	; 0x2d
 800c8f2:	d02e      	beq.n	800c952 <__gethex+0x146>
 800c8f4:	1c71      	adds	r1, r6, #1
 800c8f6:	f04f 0900 	mov.w	r9, #0
 800c8fa:	7808      	ldrb	r0, [r1, #0]
 800c8fc:	f7ff ff71 	bl	800c7e2 <__hexdig_fun>
 800c900:	1e43      	subs	r3, r0, #1
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b18      	cmp	r3, #24
 800c906:	d82c      	bhi.n	800c962 <__gethex+0x156>
 800c908:	f1a0 0210 	sub.w	r2, r0, #16
 800c90c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c910:	f7ff ff67 	bl	800c7e2 <__hexdig_fun>
 800c914:	1e43      	subs	r3, r0, #1
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b18      	cmp	r3, #24
 800c91a:	d91d      	bls.n	800c958 <__gethex+0x14c>
 800c91c:	f1b9 0f00 	cmp.w	r9, #0
 800c920:	d000      	beq.n	800c924 <__gethex+0x118>
 800c922:	4252      	negs	r2, r2
 800c924:	4415      	add	r5, r2
 800c926:	f8cb 1000 	str.w	r1, [fp]
 800c92a:	b1e4      	cbz	r4, 800c966 <__gethex+0x15a>
 800c92c:	9b00      	ldr	r3, [sp, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	bf14      	ite	ne
 800c932:	2700      	movne	r7, #0
 800c934:	2706      	moveq	r7, #6
 800c936:	4638      	mov	r0, r7
 800c938:	b009      	add	sp, #36	; 0x24
 800c93a:	ecbd 8b02 	vpop	{d8}
 800c93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c942:	463e      	mov	r6, r7
 800c944:	4625      	mov	r5, r4
 800c946:	2401      	movs	r4, #1
 800c948:	e7ca      	b.n	800c8e0 <__gethex+0xd4>
 800c94a:	f04f 0900 	mov.w	r9, #0
 800c94e:	1cb1      	adds	r1, r6, #2
 800c950:	e7d3      	b.n	800c8fa <__gethex+0xee>
 800c952:	f04f 0901 	mov.w	r9, #1
 800c956:	e7fa      	b.n	800c94e <__gethex+0x142>
 800c958:	230a      	movs	r3, #10
 800c95a:	fb03 0202 	mla	r2, r3, r2, r0
 800c95e:	3a10      	subs	r2, #16
 800c960:	e7d4      	b.n	800c90c <__gethex+0x100>
 800c962:	4631      	mov	r1, r6
 800c964:	e7df      	b.n	800c926 <__gethex+0x11a>
 800c966:	1bf3      	subs	r3, r6, r7
 800c968:	3b01      	subs	r3, #1
 800c96a:	4621      	mov	r1, r4
 800c96c:	2b07      	cmp	r3, #7
 800c96e:	dc0b      	bgt.n	800c988 <__gethex+0x17c>
 800c970:	ee18 0a10 	vmov	r0, s16
 800c974:	f000 fad8 	bl	800cf28 <_Balloc>
 800c978:	4604      	mov	r4, r0
 800c97a:	b940      	cbnz	r0, 800c98e <__gethex+0x182>
 800c97c:	4b65      	ldr	r3, [pc, #404]	; (800cb14 <__gethex+0x308>)
 800c97e:	4602      	mov	r2, r0
 800c980:	21de      	movs	r1, #222	; 0xde
 800c982:	4865      	ldr	r0, [pc, #404]	; (800cb18 <__gethex+0x30c>)
 800c984:	f001 fb88 	bl	800e098 <__assert_func>
 800c988:	3101      	adds	r1, #1
 800c98a:	105b      	asrs	r3, r3, #1
 800c98c:	e7ee      	b.n	800c96c <__gethex+0x160>
 800c98e:	f100 0914 	add.w	r9, r0, #20
 800c992:	f04f 0b00 	mov.w	fp, #0
 800c996:	f1ca 0301 	rsb	r3, sl, #1
 800c99a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c99e:	f8cd b000 	str.w	fp, [sp]
 800c9a2:	9306      	str	r3, [sp, #24]
 800c9a4:	42b7      	cmp	r7, r6
 800c9a6:	d340      	bcc.n	800ca2a <__gethex+0x21e>
 800c9a8:	9802      	ldr	r0, [sp, #8]
 800c9aa:	9b00      	ldr	r3, [sp, #0]
 800c9ac:	f840 3b04 	str.w	r3, [r0], #4
 800c9b0:	eba0 0009 	sub.w	r0, r0, r9
 800c9b4:	1080      	asrs	r0, r0, #2
 800c9b6:	0146      	lsls	r6, r0, #5
 800c9b8:	6120      	str	r0, [r4, #16]
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 fbaa 	bl	800d114 <__hi0bits>
 800c9c0:	1a30      	subs	r0, r6, r0
 800c9c2:	f8d8 6000 	ldr.w	r6, [r8]
 800c9c6:	42b0      	cmp	r0, r6
 800c9c8:	dd63      	ble.n	800ca92 <__gethex+0x286>
 800c9ca:	1b87      	subs	r7, r0, r6
 800c9cc:	4639      	mov	r1, r7
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f000 ff44 	bl	800d85c <__any_on>
 800c9d4:	4682      	mov	sl, r0
 800c9d6:	b1a8      	cbz	r0, 800ca04 <__gethex+0x1f8>
 800c9d8:	1e7b      	subs	r3, r7, #1
 800c9da:	1159      	asrs	r1, r3, #5
 800c9dc:	f003 021f 	and.w	r2, r3, #31
 800c9e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c9e4:	f04f 0a01 	mov.w	sl, #1
 800c9e8:	fa0a f202 	lsl.w	r2, sl, r2
 800c9ec:	420a      	tst	r2, r1
 800c9ee:	d009      	beq.n	800ca04 <__gethex+0x1f8>
 800c9f0:	4553      	cmp	r3, sl
 800c9f2:	dd05      	ble.n	800ca00 <__gethex+0x1f4>
 800c9f4:	1eb9      	subs	r1, r7, #2
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f000 ff30 	bl	800d85c <__any_on>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d145      	bne.n	800ca8c <__gethex+0x280>
 800ca00:	f04f 0a02 	mov.w	sl, #2
 800ca04:	4639      	mov	r1, r7
 800ca06:	4620      	mov	r0, r4
 800ca08:	f7ff fe99 	bl	800c73e <rshift>
 800ca0c:	443d      	add	r5, r7
 800ca0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca12:	42ab      	cmp	r3, r5
 800ca14:	da4c      	bge.n	800cab0 <__gethex+0x2a4>
 800ca16:	ee18 0a10 	vmov	r0, s16
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	f000 fac4 	bl	800cfa8 <_Bfree>
 800ca20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca22:	2300      	movs	r3, #0
 800ca24:	6013      	str	r3, [r2, #0]
 800ca26:	27a3      	movs	r7, #163	; 0xa3
 800ca28:	e785      	b.n	800c936 <__gethex+0x12a>
 800ca2a:	1e73      	subs	r3, r6, #1
 800ca2c:	9a05      	ldr	r2, [sp, #20]
 800ca2e:	9303      	str	r3, [sp, #12]
 800ca30:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d019      	beq.n	800ca6c <__gethex+0x260>
 800ca38:	f1bb 0f20 	cmp.w	fp, #32
 800ca3c:	d107      	bne.n	800ca4e <__gethex+0x242>
 800ca3e:	9b02      	ldr	r3, [sp, #8]
 800ca40:	9a00      	ldr	r2, [sp, #0]
 800ca42:	f843 2b04 	str.w	r2, [r3], #4
 800ca46:	9302      	str	r3, [sp, #8]
 800ca48:	2300      	movs	r3, #0
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	469b      	mov	fp, r3
 800ca4e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ca52:	f7ff fec6 	bl	800c7e2 <__hexdig_fun>
 800ca56:	9b00      	ldr	r3, [sp, #0]
 800ca58:	f000 000f 	and.w	r0, r0, #15
 800ca5c:	fa00 f00b 	lsl.w	r0, r0, fp
 800ca60:	4303      	orrs	r3, r0
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	f10b 0b04 	add.w	fp, fp, #4
 800ca68:	9b03      	ldr	r3, [sp, #12]
 800ca6a:	e00d      	b.n	800ca88 <__gethex+0x27c>
 800ca6c:	9b03      	ldr	r3, [sp, #12]
 800ca6e:	9a06      	ldr	r2, [sp, #24]
 800ca70:	4413      	add	r3, r2
 800ca72:	42bb      	cmp	r3, r7
 800ca74:	d3e0      	bcc.n	800ca38 <__gethex+0x22c>
 800ca76:	4618      	mov	r0, r3
 800ca78:	9901      	ldr	r1, [sp, #4]
 800ca7a:	9307      	str	r3, [sp, #28]
 800ca7c:	4652      	mov	r2, sl
 800ca7e:	f001 fada 	bl	800e036 <strncmp>
 800ca82:	9b07      	ldr	r3, [sp, #28]
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d1d7      	bne.n	800ca38 <__gethex+0x22c>
 800ca88:	461e      	mov	r6, r3
 800ca8a:	e78b      	b.n	800c9a4 <__gethex+0x198>
 800ca8c:	f04f 0a03 	mov.w	sl, #3
 800ca90:	e7b8      	b.n	800ca04 <__gethex+0x1f8>
 800ca92:	da0a      	bge.n	800caaa <__gethex+0x29e>
 800ca94:	1a37      	subs	r7, r6, r0
 800ca96:	4621      	mov	r1, r4
 800ca98:	ee18 0a10 	vmov	r0, s16
 800ca9c:	463a      	mov	r2, r7
 800ca9e:	f000 fc9f 	bl	800d3e0 <__lshift>
 800caa2:	1bed      	subs	r5, r5, r7
 800caa4:	4604      	mov	r4, r0
 800caa6:	f100 0914 	add.w	r9, r0, #20
 800caaa:	f04f 0a00 	mov.w	sl, #0
 800caae:	e7ae      	b.n	800ca0e <__gethex+0x202>
 800cab0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cab4:	42a8      	cmp	r0, r5
 800cab6:	dd72      	ble.n	800cb9e <__gethex+0x392>
 800cab8:	1b45      	subs	r5, r0, r5
 800caba:	42ae      	cmp	r6, r5
 800cabc:	dc36      	bgt.n	800cb2c <__gethex+0x320>
 800cabe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d02a      	beq.n	800cb1c <__gethex+0x310>
 800cac6:	2b03      	cmp	r3, #3
 800cac8:	d02c      	beq.n	800cb24 <__gethex+0x318>
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d115      	bne.n	800cafa <__gethex+0x2ee>
 800cace:	42ae      	cmp	r6, r5
 800cad0:	d113      	bne.n	800cafa <__gethex+0x2ee>
 800cad2:	2e01      	cmp	r6, #1
 800cad4:	d10b      	bne.n	800caee <__gethex+0x2e2>
 800cad6:	9a04      	ldr	r2, [sp, #16]
 800cad8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cadc:	6013      	str	r3, [r2, #0]
 800cade:	2301      	movs	r3, #1
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	f8c9 3000 	str.w	r3, [r9]
 800cae6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cae8:	2762      	movs	r7, #98	; 0x62
 800caea:	601c      	str	r4, [r3, #0]
 800caec:	e723      	b.n	800c936 <__gethex+0x12a>
 800caee:	1e71      	subs	r1, r6, #1
 800caf0:	4620      	mov	r0, r4
 800caf2:	f000 feb3 	bl	800d85c <__any_on>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d1ed      	bne.n	800cad6 <__gethex+0x2ca>
 800cafa:	ee18 0a10 	vmov	r0, s16
 800cafe:	4621      	mov	r1, r4
 800cb00:	f000 fa52 	bl	800cfa8 <_Bfree>
 800cb04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb06:	2300      	movs	r3, #0
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	2750      	movs	r7, #80	; 0x50
 800cb0c:	e713      	b.n	800c936 <__gethex+0x12a>
 800cb0e:	bf00      	nop
 800cb10:	0800e904 	.word	0x0800e904
 800cb14:	0800e824 	.word	0x0800e824
 800cb18:	0800e898 	.word	0x0800e898
 800cb1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1eb      	bne.n	800cafa <__gethex+0x2ee>
 800cb22:	e7d8      	b.n	800cad6 <__gethex+0x2ca>
 800cb24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1d5      	bne.n	800cad6 <__gethex+0x2ca>
 800cb2a:	e7e6      	b.n	800cafa <__gethex+0x2ee>
 800cb2c:	1e6f      	subs	r7, r5, #1
 800cb2e:	f1ba 0f00 	cmp.w	sl, #0
 800cb32:	d131      	bne.n	800cb98 <__gethex+0x38c>
 800cb34:	b127      	cbz	r7, 800cb40 <__gethex+0x334>
 800cb36:	4639      	mov	r1, r7
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f000 fe8f 	bl	800d85c <__any_on>
 800cb3e:	4682      	mov	sl, r0
 800cb40:	117b      	asrs	r3, r7, #5
 800cb42:	2101      	movs	r1, #1
 800cb44:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cb48:	f007 071f 	and.w	r7, r7, #31
 800cb4c:	fa01 f707 	lsl.w	r7, r1, r7
 800cb50:	421f      	tst	r7, r3
 800cb52:	4629      	mov	r1, r5
 800cb54:	4620      	mov	r0, r4
 800cb56:	bf18      	it	ne
 800cb58:	f04a 0a02 	orrne.w	sl, sl, #2
 800cb5c:	1b76      	subs	r6, r6, r5
 800cb5e:	f7ff fdee 	bl	800c73e <rshift>
 800cb62:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cb66:	2702      	movs	r7, #2
 800cb68:	f1ba 0f00 	cmp.w	sl, #0
 800cb6c:	d048      	beq.n	800cc00 <__gethex+0x3f4>
 800cb6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb72:	2b02      	cmp	r3, #2
 800cb74:	d015      	beq.n	800cba2 <__gethex+0x396>
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d017      	beq.n	800cbaa <__gethex+0x39e>
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d109      	bne.n	800cb92 <__gethex+0x386>
 800cb7e:	f01a 0f02 	tst.w	sl, #2
 800cb82:	d006      	beq.n	800cb92 <__gethex+0x386>
 800cb84:	f8d9 0000 	ldr.w	r0, [r9]
 800cb88:	ea4a 0a00 	orr.w	sl, sl, r0
 800cb8c:	f01a 0f01 	tst.w	sl, #1
 800cb90:	d10e      	bne.n	800cbb0 <__gethex+0x3a4>
 800cb92:	f047 0710 	orr.w	r7, r7, #16
 800cb96:	e033      	b.n	800cc00 <__gethex+0x3f4>
 800cb98:	f04f 0a01 	mov.w	sl, #1
 800cb9c:	e7d0      	b.n	800cb40 <__gethex+0x334>
 800cb9e:	2701      	movs	r7, #1
 800cba0:	e7e2      	b.n	800cb68 <__gethex+0x35c>
 800cba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cba4:	f1c3 0301 	rsb	r3, r3, #1
 800cba8:	9315      	str	r3, [sp, #84]	; 0x54
 800cbaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d0f0      	beq.n	800cb92 <__gethex+0x386>
 800cbb0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cbb4:	f104 0314 	add.w	r3, r4, #20
 800cbb8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cbbc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cbc0:	f04f 0c00 	mov.w	ip, #0
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbca:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800cbce:	d01c      	beq.n	800cc0a <__gethex+0x3fe>
 800cbd0:	3201      	adds	r2, #1
 800cbd2:	6002      	str	r2, [r0, #0]
 800cbd4:	2f02      	cmp	r7, #2
 800cbd6:	f104 0314 	add.w	r3, r4, #20
 800cbda:	d13f      	bne.n	800cc5c <__gethex+0x450>
 800cbdc:	f8d8 2000 	ldr.w	r2, [r8]
 800cbe0:	3a01      	subs	r2, #1
 800cbe2:	42b2      	cmp	r2, r6
 800cbe4:	d10a      	bne.n	800cbfc <__gethex+0x3f0>
 800cbe6:	1171      	asrs	r1, r6, #5
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cbee:	f006 061f 	and.w	r6, r6, #31
 800cbf2:	fa02 f606 	lsl.w	r6, r2, r6
 800cbf6:	421e      	tst	r6, r3
 800cbf8:	bf18      	it	ne
 800cbfa:	4617      	movne	r7, r2
 800cbfc:	f047 0720 	orr.w	r7, r7, #32
 800cc00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc02:	601c      	str	r4, [r3, #0]
 800cc04:	9b04      	ldr	r3, [sp, #16]
 800cc06:	601d      	str	r5, [r3, #0]
 800cc08:	e695      	b.n	800c936 <__gethex+0x12a>
 800cc0a:	4299      	cmp	r1, r3
 800cc0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cc10:	d8d8      	bhi.n	800cbc4 <__gethex+0x3b8>
 800cc12:	68a3      	ldr	r3, [r4, #8]
 800cc14:	459b      	cmp	fp, r3
 800cc16:	db19      	blt.n	800cc4c <__gethex+0x440>
 800cc18:	6861      	ldr	r1, [r4, #4]
 800cc1a:	ee18 0a10 	vmov	r0, s16
 800cc1e:	3101      	adds	r1, #1
 800cc20:	f000 f982 	bl	800cf28 <_Balloc>
 800cc24:	4681      	mov	r9, r0
 800cc26:	b918      	cbnz	r0, 800cc30 <__gethex+0x424>
 800cc28:	4b1a      	ldr	r3, [pc, #104]	; (800cc94 <__gethex+0x488>)
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	2184      	movs	r1, #132	; 0x84
 800cc2e:	e6a8      	b.n	800c982 <__gethex+0x176>
 800cc30:	6922      	ldr	r2, [r4, #16]
 800cc32:	3202      	adds	r2, #2
 800cc34:	f104 010c 	add.w	r1, r4, #12
 800cc38:	0092      	lsls	r2, r2, #2
 800cc3a:	300c      	adds	r0, #12
 800cc3c:	f7fc fe98 	bl	8009970 <memcpy>
 800cc40:	4621      	mov	r1, r4
 800cc42:	ee18 0a10 	vmov	r0, s16
 800cc46:	f000 f9af 	bl	800cfa8 <_Bfree>
 800cc4a:	464c      	mov	r4, r9
 800cc4c:	6923      	ldr	r3, [r4, #16]
 800cc4e:	1c5a      	adds	r2, r3, #1
 800cc50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc54:	6122      	str	r2, [r4, #16]
 800cc56:	2201      	movs	r2, #1
 800cc58:	615a      	str	r2, [r3, #20]
 800cc5a:	e7bb      	b.n	800cbd4 <__gethex+0x3c8>
 800cc5c:	6922      	ldr	r2, [r4, #16]
 800cc5e:	455a      	cmp	r2, fp
 800cc60:	dd0b      	ble.n	800cc7a <__gethex+0x46e>
 800cc62:	2101      	movs	r1, #1
 800cc64:	4620      	mov	r0, r4
 800cc66:	f7ff fd6a 	bl	800c73e <rshift>
 800cc6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc6e:	3501      	adds	r5, #1
 800cc70:	42ab      	cmp	r3, r5
 800cc72:	f6ff aed0 	blt.w	800ca16 <__gethex+0x20a>
 800cc76:	2701      	movs	r7, #1
 800cc78:	e7c0      	b.n	800cbfc <__gethex+0x3f0>
 800cc7a:	f016 061f 	ands.w	r6, r6, #31
 800cc7e:	d0fa      	beq.n	800cc76 <__gethex+0x46a>
 800cc80:	449a      	add	sl, r3
 800cc82:	f1c6 0620 	rsb	r6, r6, #32
 800cc86:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cc8a:	f000 fa43 	bl	800d114 <__hi0bits>
 800cc8e:	42b0      	cmp	r0, r6
 800cc90:	dbe7      	blt.n	800cc62 <__gethex+0x456>
 800cc92:	e7f0      	b.n	800cc76 <__gethex+0x46a>
 800cc94:	0800e824 	.word	0x0800e824

0800cc98 <L_shift>:
 800cc98:	f1c2 0208 	rsb	r2, r2, #8
 800cc9c:	0092      	lsls	r2, r2, #2
 800cc9e:	b570      	push	{r4, r5, r6, lr}
 800cca0:	f1c2 0620 	rsb	r6, r2, #32
 800cca4:	6843      	ldr	r3, [r0, #4]
 800cca6:	6804      	ldr	r4, [r0, #0]
 800cca8:	fa03 f506 	lsl.w	r5, r3, r6
 800ccac:	432c      	orrs	r4, r5
 800ccae:	40d3      	lsrs	r3, r2
 800ccb0:	6004      	str	r4, [r0, #0]
 800ccb2:	f840 3f04 	str.w	r3, [r0, #4]!
 800ccb6:	4288      	cmp	r0, r1
 800ccb8:	d3f4      	bcc.n	800cca4 <L_shift+0xc>
 800ccba:	bd70      	pop	{r4, r5, r6, pc}

0800ccbc <__match>:
 800ccbc:	b530      	push	{r4, r5, lr}
 800ccbe:	6803      	ldr	r3, [r0, #0]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccc6:	b914      	cbnz	r4, 800ccce <__match+0x12>
 800ccc8:	6003      	str	r3, [r0, #0]
 800ccca:	2001      	movs	r0, #1
 800cccc:	bd30      	pop	{r4, r5, pc}
 800ccce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccd2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ccd6:	2d19      	cmp	r5, #25
 800ccd8:	bf98      	it	ls
 800ccda:	3220      	addls	r2, #32
 800ccdc:	42a2      	cmp	r2, r4
 800ccde:	d0f0      	beq.n	800ccc2 <__match+0x6>
 800cce0:	2000      	movs	r0, #0
 800cce2:	e7f3      	b.n	800cccc <__match+0x10>

0800cce4 <__hexnan>:
 800cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce8:	680b      	ldr	r3, [r1, #0]
 800ccea:	6801      	ldr	r1, [r0, #0]
 800ccec:	115e      	asrs	r6, r3, #5
 800ccee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ccf2:	f013 031f 	ands.w	r3, r3, #31
 800ccf6:	b087      	sub	sp, #28
 800ccf8:	bf18      	it	ne
 800ccfa:	3604      	addne	r6, #4
 800ccfc:	2500      	movs	r5, #0
 800ccfe:	1f37      	subs	r7, r6, #4
 800cd00:	4682      	mov	sl, r0
 800cd02:	4690      	mov	r8, r2
 800cd04:	9301      	str	r3, [sp, #4]
 800cd06:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd0a:	46b9      	mov	r9, r7
 800cd0c:	463c      	mov	r4, r7
 800cd0e:	9502      	str	r5, [sp, #8]
 800cd10:	46ab      	mov	fp, r5
 800cd12:	784a      	ldrb	r2, [r1, #1]
 800cd14:	1c4b      	adds	r3, r1, #1
 800cd16:	9303      	str	r3, [sp, #12]
 800cd18:	b342      	cbz	r2, 800cd6c <__hexnan+0x88>
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	9105      	str	r1, [sp, #20]
 800cd1e:	9204      	str	r2, [sp, #16]
 800cd20:	f7ff fd5f 	bl	800c7e2 <__hexdig_fun>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d14f      	bne.n	800cdc8 <__hexnan+0xe4>
 800cd28:	9a04      	ldr	r2, [sp, #16]
 800cd2a:	9905      	ldr	r1, [sp, #20]
 800cd2c:	2a20      	cmp	r2, #32
 800cd2e:	d818      	bhi.n	800cd62 <__hexnan+0x7e>
 800cd30:	9b02      	ldr	r3, [sp, #8]
 800cd32:	459b      	cmp	fp, r3
 800cd34:	dd13      	ble.n	800cd5e <__hexnan+0x7a>
 800cd36:	454c      	cmp	r4, r9
 800cd38:	d206      	bcs.n	800cd48 <__hexnan+0x64>
 800cd3a:	2d07      	cmp	r5, #7
 800cd3c:	dc04      	bgt.n	800cd48 <__hexnan+0x64>
 800cd3e:	462a      	mov	r2, r5
 800cd40:	4649      	mov	r1, r9
 800cd42:	4620      	mov	r0, r4
 800cd44:	f7ff ffa8 	bl	800cc98 <L_shift>
 800cd48:	4544      	cmp	r4, r8
 800cd4a:	d950      	bls.n	800cdee <__hexnan+0x10a>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f1a4 0904 	sub.w	r9, r4, #4
 800cd52:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd56:	f8cd b008 	str.w	fp, [sp, #8]
 800cd5a:	464c      	mov	r4, r9
 800cd5c:	461d      	mov	r5, r3
 800cd5e:	9903      	ldr	r1, [sp, #12]
 800cd60:	e7d7      	b.n	800cd12 <__hexnan+0x2e>
 800cd62:	2a29      	cmp	r2, #41	; 0x29
 800cd64:	d156      	bne.n	800ce14 <__hexnan+0x130>
 800cd66:	3102      	adds	r1, #2
 800cd68:	f8ca 1000 	str.w	r1, [sl]
 800cd6c:	f1bb 0f00 	cmp.w	fp, #0
 800cd70:	d050      	beq.n	800ce14 <__hexnan+0x130>
 800cd72:	454c      	cmp	r4, r9
 800cd74:	d206      	bcs.n	800cd84 <__hexnan+0xa0>
 800cd76:	2d07      	cmp	r5, #7
 800cd78:	dc04      	bgt.n	800cd84 <__hexnan+0xa0>
 800cd7a:	462a      	mov	r2, r5
 800cd7c:	4649      	mov	r1, r9
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f7ff ff8a 	bl	800cc98 <L_shift>
 800cd84:	4544      	cmp	r4, r8
 800cd86:	d934      	bls.n	800cdf2 <__hexnan+0x10e>
 800cd88:	f1a8 0204 	sub.w	r2, r8, #4
 800cd8c:	4623      	mov	r3, r4
 800cd8e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cd92:	f842 1f04 	str.w	r1, [r2, #4]!
 800cd96:	429f      	cmp	r7, r3
 800cd98:	d2f9      	bcs.n	800cd8e <__hexnan+0xaa>
 800cd9a:	1b3b      	subs	r3, r7, r4
 800cd9c:	f023 0303 	bic.w	r3, r3, #3
 800cda0:	3304      	adds	r3, #4
 800cda2:	3401      	adds	r4, #1
 800cda4:	3e03      	subs	r6, #3
 800cda6:	42b4      	cmp	r4, r6
 800cda8:	bf88      	it	hi
 800cdaa:	2304      	movhi	r3, #4
 800cdac:	4443      	add	r3, r8
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f843 2b04 	str.w	r2, [r3], #4
 800cdb4:	429f      	cmp	r7, r3
 800cdb6:	d2fb      	bcs.n	800cdb0 <__hexnan+0xcc>
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	b91b      	cbnz	r3, 800cdc4 <__hexnan+0xe0>
 800cdbc:	4547      	cmp	r7, r8
 800cdbe:	d127      	bne.n	800ce10 <__hexnan+0x12c>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	603b      	str	r3, [r7, #0]
 800cdc4:	2005      	movs	r0, #5
 800cdc6:	e026      	b.n	800ce16 <__hexnan+0x132>
 800cdc8:	3501      	adds	r5, #1
 800cdca:	2d08      	cmp	r5, #8
 800cdcc:	f10b 0b01 	add.w	fp, fp, #1
 800cdd0:	dd06      	ble.n	800cde0 <__hexnan+0xfc>
 800cdd2:	4544      	cmp	r4, r8
 800cdd4:	d9c3      	bls.n	800cd5e <__hexnan+0x7a>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800cddc:	2501      	movs	r5, #1
 800cdde:	3c04      	subs	r4, #4
 800cde0:	6822      	ldr	r2, [r4, #0]
 800cde2:	f000 000f 	and.w	r0, r0, #15
 800cde6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cdea:	6022      	str	r2, [r4, #0]
 800cdec:	e7b7      	b.n	800cd5e <__hexnan+0x7a>
 800cdee:	2508      	movs	r5, #8
 800cdf0:	e7b5      	b.n	800cd5e <__hexnan+0x7a>
 800cdf2:	9b01      	ldr	r3, [sp, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d0df      	beq.n	800cdb8 <__hexnan+0xd4>
 800cdf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdfc:	f1c3 0320 	rsb	r3, r3, #32
 800ce00:	fa22 f303 	lsr.w	r3, r2, r3
 800ce04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce08:	401a      	ands	r2, r3
 800ce0a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ce0e:	e7d3      	b.n	800cdb8 <__hexnan+0xd4>
 800ce10:	3f04      	subs	r7, #4
 800ce12:	e7d1      	b.n	800cdb8 <__hexnan+0xd4>
 800ce14:	2004      	movs	r0, #4
 800ce16:	b007      	add	sp, #28
 800ce18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce1c <_localeconv_r>:
 800ce1c:	4800      	ldr	r0, [pc, #0]	; (800ce20 <_localeconv_r+0x4>)
 800ce1e:	4770      	bx	lr
 800ce20:	20000168 	.word	0x20000168

0800ce24 <__retarget_lock_init_recursive>:
 800ce24:	4770      	bx	lr

0800ce26 <__retarget_lock_acquire_recursive>:
 800ce26:	4770      	bx	lr

0800ce28 <__retarget_lock_release_recursive>:
 800ce28:	4770      	bx	lr

0800ce2a <__swhatbuf_r>:
 800ce2a:	b570      	push	{r4, r5, r6, lr}
 800ce2c:	460e      	mov	r6, r1
 800ce2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce32:	2900      	cmp	r1, #0
 800ce34:	b096      	sub	sp, #88	; 0x58
 800ce36:	4614      	mov	r4, r2
 800ce38:	461d      	mov	r5, r3
 800ce3a:	da07      	bge.n	800ce4c <__swhatbuf_r+0x22>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	602b      	str	r3, [r5, #0]
 800ce40:	89b3      	ldrh	r3, [r6, #12]
 800ce42:	061a      	lsls	r2, r3, #24
 800ce44:	d410      	bmi.n	800ce68 <__swhatbuf_r+0x3e>
 800ce46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce4a:	e00e      	b.n	800ce6a <__swhatbuf_r+0x40>
 800ce4c:	466a      	mov	r2, sp
 800ce4e:	f001 f963 	bl	800e118 <_fstat_r>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	dbf2      	blt.n	800ce3c <__swhatbuf_r+0x12>
 800ce56:	9a01      	ldr	r2, [sp, #4]
 800ce58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce60:	425a      	negs	r2, r3
 800ce62:	415a      	adcs	r2, r3
 800ce64:	602a      	str	r2, [r5, #0]
 800ce66:	e7ee      	b.n	800ce46 <__swhatbuf_r+0x1c>
 800ce68:	2340      	movs	r3, #64	; 0x40
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	6023      	str	r3, [r4, #0]
 800ce6e:	b016      	add	sp, #88	; 0x58
 800ce70:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce74 <__smakebuf_r>:
 800ce74:	898b      	ldrh	r3, [r1, #12]
 800ce76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce78:	079d      	lsls	r5, r3, #30
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	460c      	mov	r4, r1
 800ce7e:	d507      	bpl.n	800ce90 <__smakebuf_r+0x1c>
 800ce80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	6123      	str	r3, [r4, #16]
 800ce88:	2301      	movs	r3, #1
 800ce8a:	6163      	str	r3, [r4, #20]
 800ce8c:	b002      	add	sp, #8
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}
 800ce90:	ab01      	add	r3, sp, #4
 800ce92:	466a      	mov	r2, sp
 800ce94:	f7ff ffc9 	bl	800ce2a <__swhatbuf_r>
 800ce98:	9900      	ldr	r1, [sp, #0]
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	f000 fd5d 	bl	800d95c <_malloc_r>
 800cea2:	b948      	cbnz	r0, 800ceb8 <__smakebuf_r+0x44>
 800cea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cea8:	059a      	lsls	r2, r3, #22
 800ceaa:	d4ef      	bmi.n	800ce8c <__smakebuf_r+0x18>
 800ceac:	f023 0303 	bic.w	r3, r3, #3
 800ceb0:	f043 0302 	orr.w	r3, r3, #2
 800ceb4:	81a3      	strh	r3, [r4, #12]
 800ceb6:	e7e3      	b.n	800ce80 <__smakebuf_r+0xc>
 800ceb8:	4b0d      	ldr	r3, [pc, #52]	; (800cef0 <__smakebuf_r+0x7c>)
 800ceba:	62b3      	str	r3, [r6, #40]	; 0x28
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	6020      	str	r0, [r4, #0]
 800cec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cec4:	81a3      	strh	r3, [r4, #12]
 800cec6:	9b00      	ldr	r3, [sp, #0]
 800cec8:	6163      	str	r3, [r4, #20]
 800ceca:	9b01      	ldr	r3, [sp, #4]
 800cecc:	6120      	str	r0, [r4, #16]
 800cece:	b15b      	cbz	r3, 800cee8 <__smakebuf_r+0x74>
 800ced0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ced4:	4630      	mov	r0, r6
 800ced6:	f001 f931 	bl	800e13c <_isatty_r>
 800ceda:	b128      	cbz	r0, 800cee8 <__smakebuf_r+0x74>
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	f023 0303 	bic.w	r3, r3, #3
 800cee2:	f043 0301 	orr.w	r3, r3, #1
 800cee6:	81a3      	strh	r3, [r4, #12]
 800cee8:	89a0      	ldrh	r0, [r4, #12]
 800ceea:	4305      	orrs	r5, r0
 800ceec:	81a5      	strh	r5, [r4, #12]
 800ceee:	e7cd      	b.n	800ce8c <__smakebuf_r+0x18>
 800cef0:	0800c59d 	.word	0x0800c59d

0800cef4 <malloc>:
 800cef4:	4b02      	ldr	r3, [pc, #8]	; (800cf00 <malloc+0xc>)
 800cef6:	4601      	mov	r1, r0
 800cef8:	6818      	ldr	r0, [r3, #0]
 800cefa:	f000 bd2f 	b.w	800d95c <_malloc_r>
 800cefe:	bf00      	nop
 800cf00:	20000010 	.word	0x20000010

0800cf04 <__ascii_mbtowc>:
 800cf04:	b082      	sub	sp, #8
 800cf06:	b901      	cbnz	r1, 800cf0a <__ascii_mbtowc+0x6>
 800cf08:	a901      	add	r1, sp, #4
 800cf0a:	b142      	cbz	r2, 800cf1e <__ascii_mbtowc+0x1a>
 800cf0c:	b14b      	cbz	r3, 800cf22 <__ascii_mbtowc+0x1e>
 800cf0e:	7813      	ldrb	r3, [r2, #0]
 800cf10:	600b      	str	r3, [r1, #0]
 800cf12:	7812      	ldrb	r2, [r2, #0]
 800cf14:	1e10      	subs	r0, r2, #0
 800cf16:	bf18      	it	ne
 800cf18:	2001      	movne	r0, #1
 800cf1a:	b002      	add	sp, #8
 800cf1c:	4770      	bx	lr
 800cf1e:	4610      	mov	r0, r2
 800cf20:	e7fb      	b.n	800cf1a <__ascii_mbtowc+0x16>
 800cf22:	f06f 0001 	mvn.w	r0, #1
 800cf26:	e7f8      	b.n	800cf1a <__ascii_mbtowc+0x16>

0800cf28 <_Balloc>:
 800cf28:	b570      	push	{r4, r5, r6, lr}
 800cf2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	460d      	mov	r5, r1
 800cf30:	b976      	cbnz	r6, 800cf50 <_Balloc+0x28>
 800cf32:	2010      	movs	r0, #16
 800cf34:	f7ff ffde 	bl	800cef4 <malloc>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	6260      	str	r0, [r4, #36]	; 0x24
 800cf3c:	b920      	cbnz	r0, 800cf48 <_Balloc+0x20>
 800cf3e:	4b18      	ldr	r3, [pc, #96]	; (800cfa0 <_Balloc+0x78>)
 800cf40:	4818      	ldr	r0, [pc, #96]	; (800cfa4 <_Balloc+0x7c>)
 800cf42:	2166      	movs	r1, #102	; 0x66
 800cf44:	f001 f8a8 	bl	800e098 <__assert_func>
 800cf48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf4c:	6006      	str	r6, [r0, #0]
 800cf4e:	60c6      	str	r6, [r0, #12]
 800cf50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf52:	68f3      	ldr	r3, [r6, #12]
 800cf54:	b183      	cbz	r3, 800cf78 <_Balloc+0x50>
 800cf56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf5e:	b9b8      	cbnz	r0, 800cf90 <_Balloc+0x68>
 800cf60:	2101      	movs	r1, #1
 800cf62:	fa01 f605 	lsl.w	r6, r1, r5
 800cf66:	1d72      	adds	r2, r6, #5
 800cf68:	0092      	lsls	r2, r2, #2
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	f000 fc97 	bl	800d89e <_calloc_r>
 800cf70:	b160      	cbz	r0, 800cf8c <_Balloc+0x64>
 800cf72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf76:	e00e      	b.n	800cf96 <_Balloc+0x6e>
 800cf78:	2221      	movs	r2, #33	; 0x21
 800cf7a:	2104      	movs	r1, #4
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f000 fc8e 	bl	800d89e <_calloc_r>
 800cf82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf84:	60f0      	str	r0, [r6, #12]
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1e4      	bne.n	800cf56 <_Balloc+0x2e>
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	bd70      	pop	{r4, r5, r6, pc}
 800cf90:	6802      	ldr	r2, [r0, #0]
 800cf92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf96:	2300      	movs	r3, #0
 800cf98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf9c:	e7f7      	b.n	800cf8e <_Balloc+0x66>
 800cf9e:	bf00      	nop
 800cfa0:	0800e7ae 	.word	0x0800e7ae
 800cfa4:	0800e918 	.word	0x0800e918

0800cfa8 <_Bfree>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cfac:	4605      	mov	r5, r0
 800cfae:	460c      	mov	r4, r1
 800cfb0:	b976      	cbnz	r6, 800cfd0 <_Bfree+0x28>
 800cfb2:	2010      	movs	r0, #16
 800cfb4:	f7ff ff9e 	bl	800cef4 <malloc>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	6268      	str	r0, [r5, #36]	; 0x24
 800cfbc:	b920      	cbnz	r0, 800cfc8 <_Bfree+0x20>
 800cfbe:	4b09      	ldr	r3, [pc, #36]	; (800cfe4 <_Bfree+0x3c>)
 800cfc0:	4809      	ldr	r0, [pc, #36]	; (800cfe8 <_Bfree+0x40>)
 800cfc2:	218a      	movs	r1, #138	; 0x8a
 800cfc4:	f001 f868 	bl	800e098 <__assert_func>
 800cfc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfcc:	6006      	str	r6, [r0, #0]
 800cfce:	60c6      	str	r6, [r0, #12]
 800cfd0:	b13c      	cbz	r4, 800cfe2 <_Bfree+0x3a>
 800cfd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cfd4:	6862      	ldr	r2, [r4, #4]
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfdc:	6021      	str	r1, [r4, #0]
 800cfde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfe2:	bd70      	pop	{r4, r5, r6, pc}
 800cfe4:	0800e7ae 	.word	0x0800e7ae
 800cfe8:	0800e918 	.word	0x0800e918

0800cfec <__multadd>:
 800cfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff0:	690e      	ldr	r6, [r1, #16]
 800cff2:	4607      	mov	r7, r0
 800cff4:	4698      	mov	r8, r3
 800cff6:	460c      	mov	r4, r1
 800cff8:	f101 0014 	add.w	r0, r1, #20
 800cffc:	2300      	movs	r3, #0
 800cffe:	6805      	ldr	r5, [r0, #0]
 800d000:	b2a9      	uxth	r1, r5
 800d002:	fb02 8101 	mla	r1, r2, r1, r8
 800d006:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d00a:	0c2d      	lsrs	r5, r5, #16
 800d00c:	fb02 c505 	mla	r5, r2, r5, ip
 800d010:	b289      	uxth	r1, r1
 800d012:	3301      	adds	r3, #1
 800d014:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d018:	429e      	cmp	r6, r3
 800d01a:	f840 1b04 	str.w	r1, [r0], #4
 800d01e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d022:	dcec      	bgt.n	800cffe <__multadd+0x12>
 800d024:	f1b8 0f00 	cmp.w	r8, #0
 800d028:	d022      	beq.n	800d070 <__multadd+0x84>
 800d02a:	68a3      	ldr	r3, [r4, #8]
 800d02c:	42b3      	cmp	r3, r6
 800d02e:	dc19      	bgt.n	800d064 <__multadd+0x78>
 800d030:	6861      	ldr	r1, [r4, #4]
 800d032:	4638      	mov	r0, r7
 800d034:	3101      	adds	r1, #1
 800d036:	f7ff ff77 	bl	800cf28 <_Balloc>
 800d03a:	4605      	mov	r5, r0
 800d03c:	b928      	cbnz	r0, 800d04a <__multadd+0x5e>
 800d03e:	4602      	mov	r2, r0
 800d040:	4b0d      	ldr	r3, [pc, #52]	; (800d078 <__multadd+0x8c>)
 800d042:	480e      	ldr	r0, [pc, #56]	; (800d07c <__multadd+0x90>)
 800d044:	21b5      	movs	r1, #181	; 0xb5
 800d046:	f001 f827 	bl	800e098 <__assert_func>
 800d04a:	6922      	ldr	r2, [r4, #16]
 800d04c:	3202      	adds	r2, #2
 800d04e:	f104 010c 	add.w	r1, r4, #12
 800d052:	0092      	lsls	r2, r2, #2
 800d054:	300c      	adds	r0, #12
 800d056:	f7fc fc8b 	bl	8009970 <memcpy>
 800d05a:	4621      	mov	r1, r4
 800d05c:	4638      	mov	r0, r7
 800d05e:	f7ff ffa3 	bl	800cfa8 <_Bfree>
 800d062:	462c      	mov	r4, r5
 800d064:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d068:	3601      	adds	r6, #1
 800d06a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d06e:	6126      	str	r6, [r4, #16]
 800d070:	4620      	mov	r0, r4
 800d072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d076:	bf00      	nop
 800d078:	0800e824 	.word	0x0800e824
 800d07c:	0800e918 	.word	0x0800e918

0800d080 <__s2b>:
 800d080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d084:	460c      	mov	r4, r1
 800d086:	4615      	mov	r5, r2
 800d088:	461f      	mov	r7, r3
 800d08a:	2209      	movs	r2, #9
 800d08c:	3308      	adds	r3, #8
 800d08e:	4606      	mov	r6, r0
 800d090:	fb93 f3f2 	sdiv	r3, r3, r2
 800d094:	2100      	movs	r1, #0
 800d096:	2201      	movs	r2, #1
 800d098:	429a      	cmp	r2, r3
 800d09a:	db09      	blt.n	800d0b0 <__s2b+0x30>
 800d09c:	4630      	mov	r0, r6
 800d09e:	f7ff ff43 	bl	800cf28 <_Balloc>
 800d0a2:	b940      	cbnz	r0, 800d0b6 <__s2b+0x36>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	4b19      	ldr	r3, [pc, #100]	; (800d10c <__s2b+0x8c>)
 800d0a8:	4819      	ldr	r0, [pc, #100]	; (800d110 <__s2b+0x90>)
 800d0aa:	21ce      	movs	r1, #206	; 0xce
 800d0ac:	f000 fff4 	bl	800e098 <__assert_func>
 800d0b0:	0052      	lsls	r2, r2, #1
 800d0b2:	3101      	adds	r1, #1
 800d0b4:	e7f0      	b.n	800d098 <__s2b+0x18>
 800d0b6:	9b08      	ldr	r3, [sp, #32]
 800d0b8:	6143      	str	r3, [r0, #20]
 800d0ba:	2d09      	cmp	r5, #9
 800d0bc:	f04f 0301 	mov.w	r3, #1
 800d0c0:	6103      	str	r3, [r0, #16]
 800d0c2:	dd16      	ble.n	800d0f2 <__s2b+0x72>
 800d0c4:	f104 0909 	add.w	r9, r4, #9
 800d0c8:	46c8      	mov	r8, r9
 800d0ca:	442c      	add	r4, r5
 800d0cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d0d0:	4601      	mov	r1, r0
 800d0d2:	3b30      	subs	r3, #48	; 0x30
 800d0d4:	220a      	movs	r2, #10
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f7ff ff88 	bl	800cfec <__multadd>
 800d0dc:	45a0      	cmp	r8, r4
 800d0de:	d1f5      	bne.n	800d0cc <__s2b+0x4c>
 800d0e0:	f1a5 0408 	sub.w	r4, r5, #8
 800d0e4:	444c      	add	r4, r9
 800d0e6:	1b2d      	subs	r5, r5, r4
 800d0e8:	1963      	adds	r3, r4, r5
 800d0ea:	42bb      	cmp	r3, r7
 800d0ec:	db04      	blt.n	800d0f8 <__s2b+0x78>
 800d0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0f2:	340a      	adds	r4, #10
 800d0f4:	2509      	movs	r5, #9
 800d0f6:	e7f6      	b.n	800d0e6 <__s2b+0x66>
 800d0f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0fc:	4601      	mov	r1, r0
 800d0fe:	3b30      	subs	r3, #48	; 0x30
 800d100:	220a      	movs	r2, #10
 800d102:	4630      	mov	r0, r6
 800d104:	f7ff ff72 	bl	800cfec <__multadd>
 800d108:	e7ee      	b.n	800d0e8 <__s2b+0x68>
 800d10a:	bf00      	nop
 800d10c:	0800e824 	.word	0x0800e824
 800d110:	0800e918 	.word	0x0800e918

0800d114 <__hi0bits>:
 800d114:	0c03      	lsrs	r3, r0, #16
 800d116:	041b      	lsls	r3, r3, #16
 800d118:	b9d3      	cbnz	r3, 800d150 <__hi0bits+0x3c>
 800d11a:	0400      	lsls	r0, r0, #16
 800d11c:	2310      	movs	r3, #16
 800d11e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d122:	bf04      	itt	eq
 800d124:	0200      	lsleq	r0, r0, #8
 800d126:	3308      	addeq	r3, #8
 800d128:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d12c:	bf04      	itt	eq
 800d12e:	0100      	lsleq	r0, r0, #4
 800d130:	3304      	addeq	r3, #4
 800d132:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d136:	bf04      	itt	eq
 800d138:	0080      	lsleq	r0, r0, #2
 800d13a:	3302      	addeq	r3, #2
 800d13c:	2800      	cmp	r0, #0
 800d13e:	db05      	blt.n	800d14c <__hi0bits+0x38>
 800d140:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d144:	f103 0301 	add.w	r3, r3, #1
 800d148:	bf08      	it	eq
 800d14a:	2320      	moveq	r3, #32
 800d14c:	4618      	mov	r0, r3
 800d14e:	4770      	bx	lr
 800d150:	2300      	movs	r3, #0
 800d152:	e7e4      	b.n	800d11e <__hi0bits+0xa>

0800d154 <__lo0bits>:
 800d154:	6803      	ldr	r3, [r0, #0]
 800d156:	f013 0207 	ands.w	r2, r3, #7
 800d15a:	4601      	mov	r1, r0
 800d15c:	d00b      	beq.n	800d176 <__lo0bits+0x22>
 800d15e:	07da      	lsls	r2, r3, #31
 800d160:	d424      	bmi.n	800d1ac <__lo0bits+0x58>
 800d162:	0798      	lsls	r0, r3, #30
 800d164:	bf49      	itett	mi
 800d166:	085b      	lsrmi	r3, r3, #1
 800d168:	089b      	lsrpl	r3, r3, #2
 800d16a:	2001      	movmi	r0, #1
 800d16c:	600b      	strmi	r3, [r1, #0]
 800d16e:	bf5c      	itt	pl
 800d170:	600b      	strpl	r3, [r1, #0]
 800d172:	2002      	movpl	r0, #2
 800d174:	4770      	bx	lr
 800d176:	b298      	uxth	r0, r3
 800d178:	b9b0      	cbnz	r0, 800d1a8 <__lo0bits+0x54>
 800d17a:	0c1b      	lsrs	r3, r3, #16
 800d17c:	2010      	movs	r0, #16
 800d17e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d182:	bf04      	itt	eq
 800d184:	0a1b      	lsreq	r3, r3, #8
 800d186:	3008      	addeq	r0, #8
 800d188:	071a      	lsls	r2, r3, #28
 800d18a:	bf04      	itt	eq
 800d18c:	091b      	lsreq	r3, r3, #4
 800d18e:	3004      	addeq	r0, #4
 800d190:	079a      	lsls	r2, r3, #30
 800d192:	bf04      	itt	eq
 800d194:	089b      	lsreq	r3, r3, #2
 800d196:	3002      	addeq	r0, #2
 800d198:	07da      	lsls	r2, r3, #31
 800d19a:	d403      	bmi.n	800d1a4 <__lo0bits+0x50>
 800d19c:	085b      	lsrs	r3, r3, #1
 800d19e:	f100 0001 	add.w	r0, r0, #1
 800d1a2:	d005      	beq.n	800d1b0 <__lo0bits+0x5c>
 800d1a4:	600b      	str	r3, [r1, #0]
 800d1a6:	4770      	bx	lr
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	e7e8      	b.n	800d17e <__lo0bits+0x2a>
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	4770      	bx	lr
 800d1b0:	2020      	movs	r0, #32
 800d1b2:	4770      	bx	lr

0800d1b4 <__i2b>:
 800d1b4:	b510      	push	{r4, lr}
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	2101      	movs	r1, #1
 800d1ba:	f7ff feb5 	bl	800cf28 <_Balloc>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	b928      	cbnz	r0, 800d1ce <__i2b+0x1a>
 800d1c2:	4b05      	ldr	r3, [pc, #20]	; (800d1d8 <__i2b+0x24>)
 800d1c4:	4805      	ldr	r0, [pc, #20]	; (800d1dc <__i2b+0x28>)
 800d1c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d1ca:	f000 ff65 	bl	800e098 <__assert_func>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	6144      	str	r4, [r0, #20]
 800d1d2:	6103      	str	r3, [r0, #16]
 800d1d4:	bd10      	pop	{r4, pc}
 800d1d6:	bf00      	nop
 800d1d8:	0800e824 	.word	0x0800e824
 800d1dc:	0800e918 	.word	0x0800e918

0800d1e0 <__multiply>:
 800d1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e4:	4614      	mov	r4, r2
 800d1e6:	690a      	ldr	r2, [r1, #16]
 800d1e8:	6923      	ldr	r3, [r4, #16]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	bfb8      	it	lt
 800d1ee:	460b      	movlt	r3, r1
 800d1f0:	460d      	mov	r5, r1
 800d1f2:	bfbc      	itt	lt
 800d1f4:	4625      	movlt	r5, r4
 800d1f6:	461c      	movlt	r4, r3
 800d1f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d1fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d200:	68ab      	ldr	r3, [r5, #8]
 800d202:	6869      	ldr	r1, [r5, #4]
 800d204:	eb0a 0709 	add.w	r7, sl, r9
 800d208:	42bb      	cmp	r3, r7
 800d20a:	b085      	sub	sp, #20
 800d20c:	bfb8      	it	lt
 800d20e:	3101      	addlt	r1, #1
 800d210:	f7ff fe8a 	bl	800cf28 <_Balloc>
 800d214:	b930      	cbnz	r0, 800d224 <__multiply+0x44>
 800d216:	4602      	mov	r2, r0
 800d218:	4b42      	ldr	r3, [pc, #264]	; (800d324 <__multiply+0x144>)
 800d21a:	4843      	ldr	r0, [pc, #268]	; (800d328 <__multiply+0x148>)
 800d21c:	f240 115d 	movw	r1, #349	; 0x15d
 800d220:	f000 ff3a 	bl	800e098 <__assert_func>
 800d224:	f100 0614 	add.w	r6, r0, #20
 800d228:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d22c:	4633      	mov	r3, r6
 800d22e:	2200      	movs	r2, #0
 800d230:	4543      	cmp	r3, r8
 800d232:	d31e      	bcc.n	800d272 <__multiply+0x92>
 800d234:	f105 0c14 	add.w	ip, r5, #20
 800d238:	f104 0314 	add.w	r3, r4, #20
 800d23c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d240:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d244:	9202      	str	r2, [sp, #8]
 800d246:	ebac 0205 	sub.w	r2, ip, r5
 800d24a:	3a15      	subs	r2, #21
 800d24c:	f022 0203 	bic.w	r2, r2, #3
 800d250:	3204      	adds	r2, #4
 800d252:	f105 0115 	add.w	r1, r5, #21
 800d256:	458c      	cmp	ip, r1
 800d258:	bf38      	it	cc
 800d25a:	2204      	movcc	r2, #4
 800d25c:	9201      	str	r2, [sp, #4]
 800d25e:	9a02      	ldr	r2, [sp, #8]
 800d260:	9303      	str	r3, [sp, #12]
 800d262:	429a      	cmp	r2, r3
 800d264:	d808      	bhi.n	800d278 <__multiply+0x98>
 800d266:	2f00      	cmp	r7, #0
 800d268:	dc55      	bgt.n	800d316 <__multiply+0x136>
 800d26a:	6107      	str	r7, [r0, #16]
 800d26c:	b005      	add	sp, #20
 800d26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d272:	f843 2b04 	str.w	r2, [r3], #4
 800d276:	e7db      	b.n	800d230 <__multiply+0x50>
 800d278:	f8b3 a000 	ldrh.w	sl, [r3]
 800d27c:	f1ba 0f00 	cmp.w	sl, #0
 800d280:	d020      	beq.n	800d2c4 <__multiply+0xe4>
 800d282:	f105 0e14 	add.w	lr, r5, #20
 800d286:	46b1      	mov	r9, r6
 800d288:	2200      	movs	r2, #0
 800d28a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d28e:	f8d9 b000 	ldr.w	fp, [r9]
 800d292:	b2a1      	uxth	r1, r4
 800d294:	fa1f fb8b 	uxth.w	fp, fp
 800d298:	fb0a b101 	mla	r1, sl, r1, fp
 800d29c:	4411      	add	r1, r2
 800d29e:	f8d9 2000 	ldr.w	r2, [r9]
 800d2a2:	0c24      	lsrs	r4, r4, #16
 800d2a4:	0c12      	lsrs	r2, r2, #16
 800d2a6:	fb0a 2404 	mla	r4, sl, r4, r2
 800d2aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d2ae:	b289      	uxth	r1, r1
 800d2b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d2b4:	45f4      	cmp	ip, lr
 800d2b6:	f849 1b04 	str.w	r1, [r9], #4
 800d2ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d2be:	d8e4      	bhi.n	800d28a <__multiply+0xaa>
 800d2c0:	9901      	ldr	r1, [sp, #4]
 800d2c2:	5072      	str	r2, [r6, r1]
 800d2c4:	9a03      	ldr	r2, [sp, #12]
 800d2c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d2ca:	3304      	adds	r3, #4
 800d2cc:	f1b9 0f00 	cmp.w	r9, #0
 800d2d0:	d01f      	beq.n	800d312 <__multiply+0x132>
 800d2d2:	6834      	ldr	r4, [r6, #0]
 800d2d4:	f105 0114 	add.w	r1, r5, #20
 800d2d8:	46b6      	mov	lr, r6
 800d2da:	f04f 0a00 	mov.w	sl, #0
 800d2de:	880a      	ldrh	r2, [r1, #0]
 800d2e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d2e4:	fb09 b202 	mla	r2, r9, r2, fp
 800d2e8:	4492      	add	sl, r2
 800d2ea:	b2a4      	uxth	r4, r4
 800d2ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d2f0:	f84e 4b04 	str.w	r4, [lr], #4
 800d2f4:	f851 4b04 	ldr.w	r4, [r1], #4
 800d2f8:	f8be 2000 	ldrh.w	r2, [lr]
 800d2fc:	0c24      	lsrs	r4, r4, #16
 800d2fe:	fb09 2404 	mla	r4, r9, r4, r2
 800d302:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d306:	458c      	cmp	ip, r1
 800d308:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d30c:	d8e7      	bhi.n	800d2de <__multiply+0xfe>
 800d30e:	9a01      	ldr	r2, [sp, #4]
 800d310:	50b4      	str	r4, [r6, r2]
 800d312:	3604      	adds	r6, #4
 800d314:	e7a3      	b.n	800d25e <__multiply+0x7e>
 800d316:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1a5      	bne.n	800d26a <__multiply+0x8a>
 800d31e:	3f01      	subs	r7, #1
 800d320:	e7a1      	b.n	800d266 <__multiply+0x86>
 800d322:	bf00      	nop
 800d324:	0800e824 	.word	0x0800e824
 800d328:	0800e918 	.word	0x0800e918

0800d32c <__pow5mult>:
 800d32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d330:	4615      	mov	r5, r2
 800d332:	f012 0203 	ands.w	r2, r2, #3
 800d336:	4606      	mov	r6, r0
 800d338:	460f      	mov	r7, r1
 800d33a:	d007      	beq.n	800d34c <__pow5mult+0x20>
 800d33c:	4c25      	ldr	r4, [pc, #148]	; (800d3d4 <__pow5mult+0xa8>)
 800d33e:	3a01      	subs	r2, #1
 800d340:	2300      	movs	r3, #0
 800d342:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d346:	f7ff fe51 	bl	800cfec <__multadd>
 800d34a:	4607      	mov	r7, r0
 800d34c:	10ad      	asrs	r5, r5, #2
 800d34e:	d03d      	beq.n	800d3cc <__pow5mult+0xa0>
 800d350:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d352:	b97c      	cbnz	r4, 800d374 <__pow5mult+0x48>
 800d354:	2010      	movs	r0, #16
 800d356:	f7ff fdcd 	bl	800cef4 <malloc>
 800d35a:	4602      	mov	r2, r0
 800d35c:	6270      	str	r0, [r6, #36]	; 0x24
 800d35e:	b928      	cbnz	r0, 800d36c <__pow5mult+0x40>
 800d360:	4b1d      	ldr	r3, [pc, #116]	; (800d3d8 <__pow5mult+0xac>)
 800d362:	481e      	ldr	r0, [pc, #120]	; (800d3dc <__pow5mult+0xb0>)
 800d364:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d368:	f000 fe96 	bl	800e098 <__assert_func>
 800d36c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d370:	6004      	str	r4, [r0, #0]
 800d372:	60c4      	str	r4, [r0, #12]
 800d374:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d378:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d37c:	b94c      	cbnz	r4, 800d392 <__pow5mult+0x66>
 800d37e:	f240 2171 	movw	r1, #625	; 0x271
 800d382:	4630      	mov	r0, r6
 800d384:	f7ff ff16 	bl	800d1b4 <__i2b>
 800d388:	2300      	movs	r3, #0
 800d38a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d38e:	4604      	mov	r4, r0
 800d390:	6003      	str	r3, [r0, #0]
 800d392:	f04f 0900 	mov.w	r9, #0
 800d396:	07eb      	lsls	r3, r5, #31
 800d398:	d50a      	bpl.n	800d3b0 <__pow5mult+0x84>
 800d39a:	4639      	mov	r1, r7
 800d39c:	4622      	mov	r2, r4
 800d39e:	4630      	mov	r0, r6
 800d3a0:	f7ff ff1e 	bl	800d1e0 <__multiply>
 800d3a4:	4639      	mov	r1, r7
 800d3a6:	4680      	mov	r8, r0
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f7ff fdfd 	bl	800cfa8 <_Bfree>
 800d3ae:	4647      	mov	r7, r8
 800d3b0:	106d      	asrs	r5, r5, #1
 800d3b2:	d00b      	beq.n	800d3cc <__pow5mult+0xa0>
 800d3b4:	6820      	ldr	r0, [r4, #0]
 800d3b6:	b938      	cbnz	r0, 800d3c8 <__pow5mult+0x9c>
 800d3b8:	4622      	mov	r2, r4
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4630      	mov	r0, r6
 800d3be:	f7ff ff0f 	bl	800d1e0 <__multiply>
 800d3c2:	6020      	str	r0, [r4, #0]
 800d3c4:	f8c0 9000 	str.w	r9, [r0]
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	e7e4      	b.n	800d396 <__pow5mult+0x6a>
 800d3cc:	4638      	mov	r0, r7
 800d3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d2:	bf00      	nop
 800d3d4:	0800ea68 	.word	0x0800ea68
 800d3d8:	0800e7ae 	.word	0x0800e7ae
 800d3dc:	0800e918 	.word	0x0800e918

0800d3e0 <__lshift>:
 800d3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e4:	460c      	mov	r4, r1
 800d3e6:	6849      	ldr	r1, [r1, #4]
 800d3e8:	6923      	ldr	r3, [r4, #16]
 800d3ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3ee:	68a3      	ldr	r3, [r4, #8]
 800d3f0:	4607      	mov	r7, r0
 800d3f2:	4691      	mov	r9, r2
 800d3f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3f8:	f108 0601 	add.w	r6, r8, #1
 800d3fc:	42b3      	cmp	r3, r6
 800d3fe:	db0b      	blt.n	800d418 <__lshift+0x38>
 800d400:	4638      	mov	r0, r7
 800d402:	f7ff fd91 	bl	800cf28 <_Balloc>
 800d406:	4605      	mov	r5, r0
 800d408:	b948      	cbnz	r0, 800d41e <__lshift+0x3e>
 800d40a:	4602      	mov	r2, r0
 800d40c:	4b28      	ldr	r3, [pc, #160]	; (800d4b0 <__lshift+0xd0>)
 800d40e:	4829      	ldr	r0, [pc, #164]	; (800d4b4 <__lshift+0xd4>)
 800d410:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d414:	f000 fe40 	bl	800e098 <__assert_func>
 800d418:	3101      	adds	r1, #1
 800d41a:	005b      	lsls	r3, r3, #1
 800d41c:	e7ee      	b.n	800d3fc <__lshift+0x1c>
 800d41e:	2300      	movs	r3, #0
 800d420:	f100 0114 	add.w	r1, r0, #20
 800d424:	f100 0210 	add.w	r2, r0, #16
 800d428:	4618      	mov	r0, r3
 800d42a:	4553      	cmp	r3, sl
 800d42c:	db33      	blt.n	800d496 <__lshift+0xb6>
 800d42e:	6920      	ldr	r0, [r4, #16]
 800d430:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d434:	f104 0314 	add.w	r3, r4, #20
 800d438:	f019 091f 	ands.w	r9, r9, #31
 800d43c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d440:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d444:	d02b      	beq.n	800d49e <__lshift+0xbe>
 800d446:	f1c9 0e20 	rsb	lr, r9, #32
 800d44a:	468a      	mov	sl, r1
 800d44c:	2200      	movs	r2, #0
 800d44e:	6818      	ldr	r0, [r3, #0]
 800d450:	fa00 f009 	lsl.w	r0, r0, r9
 800d454:	4302      	orrs	r2, r0
 800d456:	f84a 2b04 	str.w	r2, [sl], #4
 800d45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d45e:	459c      	cmp	ip, r3
 800d460:	fa22 f20e 	lsr.w	r2, r2, lr
 800d464:	d8f3      	bhi.n	800d44e <__lshift+0x6e>
 800d466:	ebac 0304 	sub.w	r3, ip, r4
 800d46a:	3b15      	subs	r3, #21
 800d46c:	f023 0303 	bic.w	r3, r3, #3
 800d470:	3304      	adds	r3, #4
 800d472:	f104 0015 	add.w	r0, r4, #21
 800d476:	4584      	cmp	ip, r0
 800d478:	bf38      	it	cc
 800d47a:	2304      	movcc	r3, #4
 800d47c:	50ca      	str	r2, [r1, r3]
 800d47e:	b10a      	cbz	r2, 800d484 <__lshift+0xa4>
 800d480:	f108 0602 	add.w	r6, r8, #2
 800d484:	3e01      	subs	r6, #1
 800d486:	4638      	mov	r0, r7
 800d488:	612e      	str	r6, [r5, #16]
 800d48a:	4621      	mov	r1, r4
 800d48c:	f7ff fd8c 	bl	800cfa8 <_Bfree>
 800d490:	4628      	mov	r0, r5
 800d492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d496:	f842 0f04 	str.w	r0, [r2, #4]!
 800d49a:	3301      	adds	r3, #1
 800d49c:	e7c5      	b.n	800d42a <__lshift+0x4a>
 800d49e:	3904      	subs	r1, #4
 800d4a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4a8:	459c      	cmp	ip, r3
 800d4aa:	d8f9      	bhi.n	800d4a0 <__lshift+0xc0>
 800d4ac:	e7ea      	b.n	800d484 <__lshift+0xa4>
 800d4ae:	bf00      	nop
 800d4b0:	0800e824 	.word	0x0800e824
 800d4b4:	0800e918 	.word	0x0800e918

0800d4b8 <__mcmp>:
 800d4b8:	b530      	push	{r4, r5, lr}
 800d4ba:	6902      	ldr	r2, [r0, #16]
 800d4bc:	690c      	ldr	r4, [r1, #16]
 800d4be:	1b12      	subs	r2, r2, r4
 800d4c0:	d10e      	bne.n	800d4e0 <__mcmp+0x28>
 800d4c2:	f100 0314 	add.w	r3, r0, #20
 800d4c6:	3114      	adds	r1, #20
 800d4c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d4cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d4d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d4d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d4d8:	42a5      	cmp	r5, r4
 800d4da:	d003      	beq.n	800d4e4 <__mcmp+0x2c>
 800d4dc:	d305      	bcc.n	800d4ea <__mcmp+0x32>
 800d4de:	2201      	movs	r2, #1
 800d4e0:	4610      	mov	r0, r2
 800d4e2:	bd30      	pop	{r4, r5, pc}
 800d4e4:	4283      	cmp	r3, r0
 800d4e6:	d3f3      	bcc.n	800d4d0 <__mcmp+0x18>
 800d4e8:	e7fa      	b.n	800d4e0 <__mcmp+0x28>
 800d4ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4ee:	e7f7      	b.n	800d4e0 <__mcmp+0x28>

0800d4f0 <__mdiff>:
 800d4f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	4617      	mov	r7, r2
 800d4fe:	f7ff ffdb 	bl	800d4b8 <__mcmp>
 800d502:	1e05      	subs	r5, r0, #0
 800d504:	d110      	bne.n	800d528 <__mdiff+0x38>
 800d506:	4629      	mov	r1, r5
 800d508:	4630      	mov	r0, r6
 800d50a:	f7ff fd0d 	bl	800cf28 <_Balloc>
 800d50e:	b930      	cbnz	r0, 800d51e <__mdiff+0x2e>
 800d510:	4b39      	ldr	r3, [pc, #228]	; (800d5f8 <__mdiff+0x108>)
 800d512:	4602      	mov	r2, r0
 800d514:	f240 2132 	movw	r1, #562	; 0x232
 800d518:	4838      	ldr	r0, [pc, #224]	; (800d5fc <__mdiff+0x10c>)
 800d51a:	f000 fdbd 	bl	800e098 <__assert_func>
 800d51e:	2301      	movs	r3, #1
 800d520:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d528:	bfa4      	itt	ge
 800d52a:	463b      	movge	r3, r7
 800d52c:	4627      	movge	r7, r4
 800d52e:	4630      	mov	r0, r6
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	bfa6      	itte	ge
 800d534:	461c      	movge	r4, r3
 800d536:	2500      	movge	r5, #0
 800d538:	2501      	movlt	r5, #1
 800d53a:	f7ff fcf5 	bl	800cf28 <_Balloc>
 800d53e:	b920      	cbnz	r0, 800d54a <__mdiff+0x5a>
 800d540:	4b2d      	ldr	r3, [pc, #180]	; (800d5f8 <__mdiff+0x108>)
 800d542:	4602      	mov	r2, r0
 800d544:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d548:	e7e6      	b.n	800d518 <__mdiff+0x28>
 800d54a:	693e      	ldr	r6, [r7, #16]
 800d54c:	60c5      	str	r5, [r0, #12]
 800d54e:	6925      	ldr	r5, [r4, #16]
 800d550:	f107 0114 	add.w	r1, r7, #20
 800d554:	f104 0914 	add.w	r9, r4, #20
 800d558:	f100 0e14 	add.w	lr, r0, #20
 800d55c:	f107 0210 	add.w	r2, r7, #16
 800d560:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d564:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d568:	46f2      	mov	sl, lr
 800d56a:	2700      	movs	r7, #0
 800d56c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d570:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d574:	fa1f f883 	uxth.w	r8, r3
 800d578:	fa17 f78b 	uxtah	r7, r7, fp
 800d57c:	0c1b      	lsrs	r3, r3, #16
 800d57e:	eba7 0808 	sub.w	r8, r7, r8
 800d582:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d586:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d58a:	fa1f f888 	uxth.w	r8, r8
 800d58e:	141f      	asrs	r7, r3, #16
 800d590:	454d      	cmp	r5, r9
 800d592:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d596:	f84a 3b04 	str.w	r3, [sl], #4
 800d59a:	d8e7      	bhi.n	800d56c <__mdiff+0x7c>
 800d59c:	1b2b      	subs	r3, r5, r4
 800d59e:	3b15      	subs	r3, #21
 800d5a0:	f023 0303 	bic.w	r3, r3, #3
 800d5a4:	3304      	adds	r3, #4
 800d5a6:	3415      	adds	r4, #21
 800d5a8:	42a5      	cmp	r5, r4
 800d5aa:	bf38      	it	cc
 800d5ac:	2304      	movcc	r3, #4
 800d5ae:	4419      	add	r1, r3
 800d5b0:	4473      	add	r3, lr
 800d5b2:	469e      	mov	lr, r3
 800d5b4:	460d      	mov	r5, r1
 800d5b6:	4565      	cmp	r5, ip
 800d5b8:	d30e      	bcc.n	800d5d8 <__mdiff+0xe8>
 800d5ba:	f10c 0203 	add.w	r2, ip, #3
 800d5be:	1a52      	subs	r2, r2, r1
 800d5c0:	f022 0203 	bic.w	r2, r2, #3
 800d5c4:	3903      	subs	r1, #3
 800d5c6:	458c      	cmp	ip, r1
 800d5c8:	bf38      	it	cc
 800d5ca:	2200      	movcc	r2, #0
 800d5cc:	441a      	add	r2, r3
 800d5ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d5d2:	b17b      	cbz	r3, 800d5f4 <__mdiff+0x104>
 800d5d4:	6106      	str	r6, [r0, #16]
 800d5d6:	e7a5      	b.n	800d524 <__mdiff+0x34>
 800d5d8:	f855 8b04 	ldr.w	r8, [r5], #4
 800d5dc:	fa17 f488 	uxtah	r4, r7, r8
 800d5e0:	1422      	asrs	r2, r4, #16
 800d5e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d5e6:	b2a4      	uxth	r4, r4
 800d5e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d5ec:	f84e 4b04 	str.w	r4, [lr], #4
 800d5f0:	1417      	asrs	r7, r2, #16
 800d5f2:	e7e0      	b.n	800d5b6 <__mdiff+0xc6>
 800d5f4:	3e01      	subs	r6, #1
 800d5f6:	e7ea      	b.n	800d5ce <__mdiff+0xde>
 800d5f8:	0800e824 	.word	0x0800e824
 800d5fc:	0800e918 	.word	0x0800e918

0800d600 <__ulp>:
 800d600:	b082      	sub	sp, #8
 800d602:	ed8d 0b00 	vstr	d0, [sp]
 800d606:	9b01      	ldr	r3, [sp, #4]
 800d608:	4912      	ldr	r1, [pc, #72]	; (800d654 <__ulp+0x54>)
 800d60a:	4019      	ands	r1, r3
 800d60c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d610:	2900      	cmp	r1, #0
 800d612:	dd05      	ble.n	800d620 <__ulp+0x20>
 800d614:	2200      	movs	r2, #0
 800d616:	460b      	mov	r3, r1
 800d618:	ec43 2b10 	vmov	d0, r2, r3
 800d61c:	b002      	add	sp, #8
 800d61e:	4770      	bx	lr
 800d620:	4249      	negs	r1, r1
 800d622:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d626:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d62a:	f04f 0200 	mov.w	r2, #0
 800d62e:	f04f 0300 	mov.w	r3, #0
 800d632:	da04      	bge.n	800d63e <__ulp+0x3e>
 800d634:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d638:	fa41 f300 	asr.w	r3, r1, r0
 800d63c:	e7ec      	b.n	800d618 <__ulp+0x18>
 800d63e:	f1a0 0114 	sub.w	r1, r0, #20
 800d642:	291e      	cmp	r1, #30
 800d644:	bfda      	itte	le
 800d646:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d64a:	fa20 f101 	lsrle.w	r1, r0, r1
 800d64e:	2101      	movgt	r1, #1
 800d650:	460a      	mov	r2, r1
 800d652:	e7e1      	b.n	800d618 <__ulp+0x18>
 800d654:	7ff00000 	.word	0x7ff00000

0800d658 <__b2d>:
 800d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65a:	6905      	ldr	r5, [r0, #16]
 800d65c:	f100 0714 	add.w	r7, r0, #20
 800d660:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d664:	1f2e      	subs	r6, r5, #4
 800d666:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d66a:	4620      	mov	r0, r4
 800d66c:	f7ff fd52 	bl	800d114 <__hi0bits>
 800d670:	f1c0 0320 	rsb	r3, r0, #32
 800d674:	280a      	cmp	r0, #10
 800d676:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d6f4 <__b2d+0x9c>
 800d67a:	600b      	str	r3, [r1, #0]
 800d67c:	dc14      	bgt.n	800d6a8 <__b2d+0x50>
 800d67e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d682:	fa24 f10e 	lsr.w	r1, r4, lr
 800d686:	42b7      	cmp	r7, r6
 800d688:	ea41 030c 	orr.w	r3, r1, ip
 800d68c:	bf34      	ite	cc
 800d68e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d692:	2100      	movcs	r1, #0
 800d694:	3015      	adds	r0, #21
 800d696:	fa04 f000 	lsl.w	r0, r4, r0
 800d69a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d69e:	ea40 0201 	orr.w	r2, r0, r1
 800d6a2:	ec43 2b10 	vmov	d0, r2, r3
 800d6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6a8:	42b7      	cmp	r7, r6
 800d6aa:	bf3a      	itte	cc
 800d6ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d6b0:	f1a5 0608 	subcc.w	r6, r5, #8
 800d6b4:	2100      	movcs	r1, #0
 800d6b6:	380b      	subs	r0, #11
 800d6b8:	d017      	beq.n	800d6ea <__b2d+0x92>
 800d6ba:	f1c0 0c20 	rsb	ip, r0, #32
 800d6be:	fa04 f500 	lsl.w	r5, r4, r0
 800d6c2:	42be      	cmp	r6, r7
 800d6c4:	fa21 f40c 	lsr.w	r4, r1, ip
 800d6c8:	ea45 0504 	orr.w	r5, r5, r4
 800d6cc:	bf8c      	ite	hi
 800d6ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d6d2:	2400      	movls	r4, #0
 800d6d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d6d8:	fa01 f000 	lsl.w	r0, r1, r0
 800d6dc:	fa24 f40c 	lsr.w	r4, r4, ip
 800d6e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d6e4:	ea40 0204 	orr.w	r2, r0, r4
 800d6e8:	e7db      	b.n	800d6a2 <__b2d+0x4a>
 800d6ea:	ea44 030c 	orr.w	r3, r4, ip
 800d6ee:	460a      	mov	r2, r1
 800d6f0:	e7d7      	b.n	800d6a2 <__b2d+0x4a>
 800d6f2:	bf00      	nop
 800d6f4:	3ff00000 	.word	0x3ff00000

0800d6f8 <__d2b>:
 800d6f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d6fc:	4689      	mov	r9, r1
 800d6fe:	2101      	movs	r1, #1
 800d700:	ec57 6b10 	vmov	r6, r7, d0
 800d704:	4690      	mov	r8, r2
 800d706:	f7ff fc0f 	bl	800cf28 <_Balloc>
 800d70a:	4604      	mov	r4, r0
 800d70c:	b930      	cbnz	r0, 800d71c <__d2b+0x24>
 800d70e:	4602      	mov	r2, r0
 800d710:	4b25      	ldr	r3, [pc, #148]	; (800d7a8 <__d2b+0xb0>)
 800d712:	4826      	ldr	r0, [pc, #152]	; (800d7ac <__d2b+0xb4>)
 800d714:	f240 310a 	movw	r1, #778	; 0x30a
 800d718:	f000 fcbe 	bl	800e098 <__assert_func>
 800d71c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d720:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d724:	bb35      	cbnz	r5, 800d774 <__d2b+0x7c>
 800d726:	2e00      	cmp	r6, #0
 800d728:	9301      	str	r3, [sp, #4]
 800d72a:	d028      	beq.n	800d77e <__d2b+0x86>
 800d72c:	4668      	mov	r0, sp
 800d72e:	9600      	str	r6, [sp, #0]
 800d730:	f7ff fd10 	bl	800d154 <__lo0bits>
 800d734:	9900      	ldr	r1, [sp, #0]
 800d736:	b300      	cbz	r0, 800d77a <__d2b+0x82>
 800d738:	9a01      	ldr	r2, [sp, #4]
 800d73a:	f1c0 0320 	rsb	r3, r0, #32
 800d73e:	fa02 f303 	lsl.w	r3, r2, r3
 800d742:	430b      	orrs	r3, r1
 800d744:	40c2      	lsrs	r2, r0
 800d746:	6163      	str	r3, [r4, #20]
 800d748:	9201      	str	r2, [sp, #4]
 800d74a:	9b01      	ldr	r3, [sp, #4]
 800d74c:	61a3      	str	r3, [r4, #24]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	bf14      	ite	ne
 800d752:	2202      	movne	r2, #2
 800d754:	2201      	moveq	r2, #1
 800d756:	6122      	str	r2, [r4, #16]
 800d758:	b1d5      	cbz	r5, 800d790 <__d2b+0x98>
 800d75a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d75e:	4405      	add	r5, r0
 800d760:	f8c9 5000 	str.w	r5, [r9]
 800d764:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d768:	f8c8 0000 	str.w	r0, [r8]
 800d76c:	4620      	mov	r0, r4
 800d76e:	b003      	add	sp, #12
 800d770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d778:	e7d5      	b.n	800d726 <__d2b+0x2e>
 800d77a:	6161      	str	r1, [r4, #20]
 800d77c:	e7e5      	b.n	800d74a <__d2b+0x52>
 800d77e:	a801      	add	r0, sp, #4
 800d780:	f7ff fce8 	bl	800d154 <__lo0bits>
 800d784:	9b01      	ldr	r3, [sp, #4]
 800d786:	6163      	str	r3, [r4, #20]
 800d788:	2201      	movs	r2, #1
 800d78a:	6122      	str	r2, [r4, #16]
 800d78c:	3020      	adds	r0, #32
 800d78e:	e7e3      	b.n	800d758 <__d2b+0x60>
 800d790:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d794:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d798:	f8c9 0000 	str.w	r0, [r9]
 800d79c:	6918      	ldr	r0, [r3, #16]
 800d79e:	f7ff fcb9 	bl	800d114 <__hi0bits>
 800d7a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7a6:	e7df      	b.n	800d768 <__d2b+0x70>
 800d7a8:	0800e824 	.word	0x0800e824
 800d7ac:	0800e918 	.word	0x0800e918

0800d7b0 <__ratio>:
 800d7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	4688      	mov	r8, r1
 800d7b6:	4669      	mov	r1, sp
 800d7b8:	4681      	mov	r9, r0
 800d7ba:	f7ff ff4d 	bl	800d658 <__b2d>
 800d7be:	a901      	add	r1, sp, #4
 800d7c0:	4640      	mov	r0, r8
 800d7c2:	ec55 4b10 	vmov	r4, r5, d0
 800d7c6:	f7ff ff47 	bl	800d658 <__b2d>
 800d7ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d7d2:	eba3 0c02 	sub.w	ip, r3, r2
 800d7d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d7da:	1a9b      	subs	r3, r3, r2
 800d7dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d7e0:	ec51 0b10 	vmov	r0, r1, d0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	bfd6      	itet	le
 800d7e8:	460a      	movle	r2, r1
 800d7ea:	462a      	movgt	r2, r5
 800d7ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d7f0:	468b      	mov	fp, r1
 800d7f2:	462f      	mov	r7, r5
 800d7f4:	bfd4      	ite	le
 800d7f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d7fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d7fe:	4620      	mov	r0, r4
 800d800:	ee10 2a10 	vmov	r2, s0
 800d804:	465b      	mov	r3, fp
 800d806:	4639      	mov	r1, r7
 800d808:	f7f3 f820 	bl	800084c <__aeabi_ddiv>
 800d80c:	ec41 0b10 	vmov	d0, r0, r1
 800d810:	b003      	add	sp, #12
 800d812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d816 <__copybits>:
 800d816:	3901      	subs	r1, #1
 800d818:	b570      	push	{r4, r5, r6, lr}
 800d81a:	1149      	asrs	r1, r1, #5
 800d81c:	6914      	ldr	r4, [r2, #16]
 800d81e:	3101      	adds	r1, #1
 800d820:	f102 0314 	add.w	r3, r2, #20
 800d824:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d828:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d82c:	1f05      	subs	r5, r0, #4
 800d82e:	42a3      	cmp	r3, r4
 800d830:	d30c      	bcc.n	800d84c <__copybits+0x36>
 800d832:	1aa3      	subs	r3, r4, r2
 800d834:	3b11      	subs	r3, #17
 800d836:	f023 0303 	bic.w	r3, r3, #3
 800d83a:	3211      	adds	r2, #17
 800d83c:	42a2      	cmp	r2, r4
 800d83e:	bf88      	it	hi
 800d840:	2300      	movhi	r3, #0
 800d842:	4418      	add	r0, r3
 800d844:	2300      	movs	r3, #0
 800d846:	4288      	cmp	r0, r1
 800d848:	d305      	bcc.n	800d856 <__copybits+0x40>
 800d84a:	bd70      	pop	{r4, r5, r6, pc}
 800d84c:	f853 6b04 	ldr.w	r6, [r3], #4
 800d850:	f845 6f04 	str.w	r6, [r5, #4]!
 800d854:	e7eb      	b.n	800d82e <__copybits+0x18>
 800d856:	f840 3b04 	str.w	r3, [r0], #4
 800d85a:	e7f4      	b.n	800d846 <__copybits+0x30>

0800d85c <__any_on>:
 800d85c:	f100 0214 	add.w	r2, r0, #20
 800d860:	6900      	ldr	r0, [r0, #16]
 800d862:	114b      	asrs	r3, r1, #5
 800d864:	4298      	cmp	r0, r3
 800d866:	b510      	push	{r4, lr}
 800d868:	db11      	blt.n	800d88e <__any_on+0x32>
 800d86a:	dd0a      	ble.n	800d882 <__any_on+0x26>
 800d86c:	f011 011f 	ands.w	r1, r1, #31
 800d870:	d007      	beq.n	800d882 <__any_on+0x26>
 800d872:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d876:	fa24 f001 	lsr.w	r0, r4, r1
 800d87a:	fa00 f101 	lsl.w	r1, r0, r1
 800d87e:	428c      	cmp	r4, r1
 800d880:	d10b      	bne.n	800d89a <__any_on+0x3e>
 800d882:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d886:	4293      	cmp	r3, r2
 800d888:	d803      	bhi.n	800d892 <__any_on+0x36>
 800d88a:	2000      	movs	r0, #0
 800d88c:	bd10      	pop	{r4, pc}
 800d88e:	4603      	mov	r3, r0
 800d890:	e7f7      	b.n	800d882 <__any_on+0x26>
 800d892:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d896:	2900      	cmp	r1, #0
 800d898:	d0f5      	beq.n	800d886 <__any_on+0x2a>
 800d89a:	2001      	movs	r0, #1
 800d89c:	e7f6      	b.n	800d88c <__any_on+0x30>

0800d89e <_calloc_r>:
 800d89e:	b513      	push	{r0, r1, r4, lr}
 800d8a0:	434a      	muls	r2, r1
 800d8a2:	4611      	mov	r1, r2
 800d8a4:	9201      	str	r2, [sp, #4]
 800d8a6:	f000 f859 	bl	800d95c <_malloc_r>
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	b118      	cbz	r0, 800d8b6 <_calloc_r+0x18>
 800d8ae:	9a01      	ldr	r2, [sp, #4]
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	f7fc f86b 	bl	800998c <memset>
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	b002      	add	sp, #8
 800d8ba:	bd10      	pop	{r4, pc}

0800d8bc <_free_r>:
 800d8bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8be:	2900      	cmp	r1, #0
 800d8c0:	d048      	beq.n	800d954 <_free_r+0x98>
 800d8c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8c6:	9001      	str	r0, [sp, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	f1a1 0404 	sub.w	r4, r1, #4
 800d8ce:	bfb8      	it	lt
 800d8d0:	18e4      	addlt	r4, r4, r3
 800d8d2:	f000 fc6f 	bl	800e1b4 <__malloc_lock>
 800d8d6:	4a20      	ldr	r2, [pc, #128]	; (800d958 <_free_r+0x9c>)
 800d8d8:	9801      	ldr	r0, [sp, #4]
 800d8da:	6813      	ldr	r3, [r2, #0]
 800d8dc:	4615      	mov	r5, r2
 800d8de:	b933      	cbnz	r3, 800d8ee <_free_r+0x32>
 800d8e0:	6063      	str	r3, [r4, #4]
 800d8e2:	6014      	str	r4, [r2, #0]
 800d8e4:	b003      	add	sp, #12
 800d8e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8ea:	f000 bc69 	b.w	800e1c0 <__malloc_unlock>
 800d8ee:	42a3      	cmp	r3, r4
 800d8f0:	d90b      	bls.n	800d90a <_free_r+0x4e>
 800d8f2:	6821      	ldr	r1, [r4, #0]
 800d8f4:	1862      	adds	r2, r4, r1
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	bf04      	itt	eq
 800d8fa:	681a      	ldreq	r2, [r3, #0]
 800d8fc:	685b      	ldreq	r3, [r3, #4]
 800d8fe:	6063      	str	r3, [r4, #4]
 800d900:	bf04      	itt	eq
 800d902:	1852      	addeq	r2, r2, r1
 800d904:	6022      	streq	r2, [r4, #0]
 800d906:	602c      	str	r4, [r5, #0]
 800d908:	e7ec      	b.n	800d8e4 <_free_r+0x28>
 800d90a:	461a      	mov	r2, r3
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	b10b      	cbz	r3, 800d914 <_free_r+0x58>
 800d910:	42a3      	cmp	r3, r4
 800d912:	d9fa      	bls.n	800d90a <_free_r+0x4e>
 800d914:	6811      	ldr	r1, [r2, #0]
 800d916:	1855      	adds	r5, r2, r1
 800d918:	42a5      	cmp	r5, r4
 800d91a:	d10b      	bne.n	800d934 <_free_r+0x78>
 800d91c:	6824      	ldr	r4, [r4, #0]
 800d91e:	4421      	add	r1, r4
 800d920:	1854      	adds	r4, r2, r1
 800d922:	42a3      	cmp	r3, r4
 800d924:	6011      	str	r1, [r2, #0]
 800d926:	d1dd      	bne.n	800d8e4 <_free_r+0x28>
 800d928:	681c      	ldr	r4, [r3, #0]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	6053      	str	r3, [r2, #4]
 800d92e:	4421      	add	r1, r4
 800d930:	6011      	str	r1, [r2, #0]
 800d932:	e7d7      	b.n	800d8e4 <_free_r+0x28>
 800d934:	d902      	bls.n	800d93c <_free_r+0x80>
 800d936:	230c      	movs	r3, #12
 800d938:	6003      	str	r3, [r0, #0]
 800d93a:	e7d3      	b.n	800d8e4 <_free_r+0x28>
 800d93c:	6825      	ldr	r5, [r4, #0]
 800d93e:	1961      	adds	r1, r4, r5
 800d940:	428b      	cmp	r3, r1
 800d942:	bf04      	itt	eq
 800d944:	6819      	ldreq	r1, [r3, #0]
 800d946:	685b      	ldreq	r3, [r3, #4]
 800d948:	6063      	str	r3, [r4, #4]
 800d94a:	bf04      	itt	eq
 800d94c:	1949      	addeq	r1, r1, r5
 800d94e:	6021      	streq	r1, [r4, #0]
 800d950:	6054      	str	r4, [r2, #4]
 800d952:	e7c7      	b.n	800d8e4 <_free_r+0x28>
 800d954:	b003      	add	sp, #12
 800d956:	bd30      	pop	{r4, r5, pc}
 800d958:	20001acc 	.word	0x20001acc

0800d95c <_malloc_r>:
 800d95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95e:	1ccd      	adds	r5, r1, #3
 800d960:	f025 0503 	bic.w	r5, r5, #3
 800d964:	3508      	adds	r5, #8
 800d966:	2d0c      	cmp	r5, #12
 800d968:	bf38      	it	cc
 800d96a:	250c      	movcc	r5, #12
 800d96c:	2d00      	cmp	r5, #0
 800d96e:	4606      	mov	r6, r0
 800d970:	db01      	blt.n	800d976 <_malloc_r+0x1a>
 800d972:	42a9      	cmp	r1, r5
 800d974:	d903      	bls.n	800d97e <_malloc_r+0x22>
 800d976:	230c      	movs	r3, #12
 800d978:	6033      	str	r3, [r6, #0]
 800d97a:	2000      	movs	r0, #0
 800d97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d97e:	f000 fc19 	bl	800e1b4 <__malloc_lock>
 800d982:	4921      	ldr	r1, [pc, #132]	; (800da08 <_malloc_r+0xac>)
 800d984:	680a      	ldr	r2, [r1, #0]
 800d986:	4614      	mov	r4, r2
 800d988:	b99c      	cbnz	r4, 800d9b2 <_malloc_r+0x56>
 800d98a:	4f20      	ldr	r7, [pc, #128]	; (800da0c <_malloc_r+0xb0>)
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	b923      	cbnz	r3, 800d99a <_malloc_r+0x3e>
 800d990:	4621      	mov	r1, r4
 800d992:	4630      	mov	r0, r6
 800d994:	f000 fafc 	bl	800df90 <_sbrk_r>
 800d998:	6038      	str	r0, [r7, #0]
 800d99a:	4629      	mov	r1, r5
 800d99c:	4630      	mov	r0, r6
 800d99e:	f000 faf7 	bl	800df90 <_sbrk_r>
 800d9a2:	1c43      	adds	r3, r0, #1
 800d9a4:	d123      	bne.n	800d9ee <_malloc_r+0x92>
 800d9a6:	230c      	movs	r3, #12
 800d9a8:	6033      	str	r3, [r6, #0]
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	f000 fc08 	bl	800e1c0 <__malloc_unlock>
 800d9b0:	e7e3      	b.n	800d97a <_malloc_r+0x1e>
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	1b5b      	subs	r3, r3, r5
 800d9b6:	d417      	bmi.n	800d9e8 <_malloc_r+0x8c>
 800d9b8:	2b0b      	cmp	r3, #11
 800d9ba:	d903      	bls.n	800d9c4 <_malloc_r+0x68>
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	441c      	add	r4, r3
 800d9c0:	6025      	str	r5, [r4, #0]
 800d9c2:	e004      	b.n	800d9ce <_malloc_r+0x72>
 800d9c4:	6863      	ldr	r3, [r4, #4]
 800d9c6:	42a2      	cmp	r2, r4
 800d9c8:	bf0c      	ite	eq
 800d9ca:	600b      	streq	r3, [r1, #0]
 800d9cc:	6053      	strne	r3, [r2, #4]
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	f000 fbf6 	bl	800e1c0 <__malloc_unlock>
 800d9d4:	f104 000b 	add.w	r0, r4, #11
 800d9d8:	1d23      	adds	r3, r4, #4
 800d9da:	f020 0007 	bic.w	r0, r0, #7
 800d9de:	1ac2      	subs	r2, r0, r3
 800d9e0:	d0cc      	beq.n	800d97c <_malloc_r+0x20>
 800d9e2:	1a1b      	subs	r3, r3, r0
 800d9e4:	50a3      	str	r3, [r4, r2]
 800d9e6:	e7c9      	b.n	800d97c <_malloc_r+0x20>
 800d9e8:	4622      	mov	r2, r4
 800d9ea:	6864      	ldr	r4, [r4, #4]
 800d9ec:	e7cc      	b.n	800d988 <_malloc_r+0x2c>
 800d9ee:	1cc4      	adds	r4, r0, #3
 800d9f0:	f024 0403 	bic.w	r4, r4, #3
 800d9f4:	42a0      	cmp	r0, r4
 800d9f6:	d0e3      	beq.n	800d9c0 <_malloc_r+0x64>
 800d9f8:	1a21      	subs	r1, r4, r0
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	f000 fac8 	bl	800df90 <_sbrk_r>
 800da00:	3001      	adds	r0, #1
 800da02:	d1dd      	bne.n	800d9c0 <_malloc_r+0x64>
 800da04:	e7cf      	b.n	800d9a6 <_malloc_r+0x4a>
 800da06:	bf00      	nop
 800da08:	20001acc 	.word	0x20001acc
 800da0c:	20001ad0 	.word	0x20001ad0

0800da10 <__ssputs_r>:
 800da10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da14:	688e      	ldr	r6, [r1, #8]
 800da16:	429e      	cmp	r6, r3
 800da18:	4682      	mov	sl, r0
 800da1a:	460c      	mov	r4, r1
 800da1c:	4690      	mov	r8, r2
 800da1e:	461f      	mov	r7, r3
 800da20:	d838      	bhi.n	800da94 <__ssputs_r+0x84>
 800da22:	898a      	ldrh	r2, [r1, #12]
 800da24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da28:	d032      	beq.n	800da90 <__ssputs_r+0x80>
 800da2a:	6825      	ldr	r5, [r4, #0]
 800da2c:	6909      	ldr	r1, [r1, #16]
 800da2e:	eba5 0901 	sub.w	r9, r5, r1
 800da32:	6965      	ldr	r5, [r4, #20]
 800da34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da3c:	3301      	adds	r3, #1
 800da3e:	444b      	add	r3, r9
 800da40:	106d      	asrs	r5, r5, #1
 800da42:	429d      	cmp	r5, r3
 800da44:	bf38      	it	cc
 800da46:	461d      	movcc	r5, r3
 800da48:	0553      	lsls	r3, r2, #21
 800da4a:	d531      	bpl.n	800dab0 <__ssputs_r+0xa0>
 800da4c:	4629      	mov	r1, r5
 800da4e:	f7ff ff85 	bl	800d95c <_malloc_r>
 800da52:	4606      	mov	r6, r0
 800da54:	b950      	cbnz	r0, 800da6c <__ssputs_r+0x5c>
 800da56:	230c      	movs	r3, #12
 800da58:	f8ca 3000 	str.w	r3, [sl]
 800da5c:	89a3      	ldrh	r3, [r4, #12]
 800da5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da62:	81a3      	strh	r3, [r4, #12]
 800da64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da6c:	6921      	ldr	r1, [r4, #16]
 800da6e:	464a      	mov	r2, r9
 800da70:	f7fb ff7e 	bl	8009970 <memcpy>
 800da74:	89a3      	ldrh	r3, [r4, #12]
 800da76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da7e:	81a3      	strh	r3, [r4, #12]
 800da80:	6126      	str	r6, [r4, #16]
 800da82:	6165      	str	r5, [r4, #20]
 800da84:	444e      	add	r6, r9
 800da86:	eba5 0509 	sub.w	r5, r5, r9
 800da8a:	6026      	str	r6, [r4, #0]
 800da8c:	60a5      	str	r5, [r4, #8]
 800da8e:	463e      	mov	r6, r7
 800da90:	42be      	cmp	r6, r7
 800da92:	d900      	bls.n	800da96 <__ssputs_r+0x86>
 800da94:	463e      	mov	r6, r7
 800da96:	4632      	mov	r2, r6
 800da98:	6820      	ldr	r0, [r4, #0]
 800da9a:	4641      	mov	r1, r8
 800da9c:	f000 fb70 	bl	800e180 <memmove>
 800daa0:	68a3      	ldr	r3, [r4, #8]
 800daa2:	6822      	ldr	r2, [r4, #0]
 800daa4:	1b9b      	subs	r3, r3, r6
 800daa6:	4432      	add	r2, r6
 800daa8:	60a3      	str	r3, [r4, #8]
 800daaa:	6022      	str	r2, [r4, #0]
 800daac:	2000      	movs	r0, #0
 800daae:	e7db      	b.n	800da68 <__ssputs_r+0x58>
 800dab0:	462a      	mov	r2, r5
 800dab2:	f000 fb8b 	bl	800e1cc <_realloc_r>
 800dab6:	4606      	mov	r6, r0
 800dab8:	2800      	cmp	r0, #0
 800daba:	d1e1      	bne.n	800da80 <__ssputs_r+0x70>
 800dabc:	6921      	ldr	r1, [r4, #16]
 800dabe:	4650      	mov	r0, sl
 800dac0:	f7ff fefc 	bl	800d8bc <_free_r>
 800dac4:	e7c7      	b.n	800da56 <__ssputs_r+0x46>
	...

0800dac8 <_svfiprintf_r>:
 800dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dacc:	4698      	mov	r8, r3
 800dace:	898b      	ldrh	r3, [r1, #12]
 800dad0:	061b      	lsls	r3, r3, #24
 800dad2:	b09d      	sub	sp, #116	; 0x74
 800dad4:	4607      	mov	r7, r0
 800dad6:	460d      	mov	r5, r1
 800dad8:	4614      	mov	r4, r2
 800dada:	d50e      	bpl.n	800dafa <_svfiprintf_r+0x32>
 800dadc:	690b      	ldr	r3, [r1, #16]
 800dade:	b963      	cbnz	r3, 800dafa <_svfiprintf_r+0x32>
 800dae0:	2140      	movs	r1, #64	; 0x40
 800dae2:	f7ff ff3b 	bl	800d95c <_malloc_r>
 800dae6:	6028      	str	r0, [r5, #0]
 800dae8:	6128      	str	r0, [r5, #16]
 800daea:	b920      	cbnz	r0, 800daf6 <_svfiprintf_r+0x2e>
 800daec:	230c      	movs	r3, #12
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800daf4:	e0d1      	b.n	800dc9a <_svfiprintf_r+0x1d2>
 800daf6:	2340      	movs	r3, #64	; 0x40
 800daf8:	616b      	str	r3, [r5, #20]
 800dafa:	2300      	movs	r3, #0
 800dafc:	9309      	str	r3, [sp, #36]	; 0x24
 800dafe:	2320      	movs	r3, #32
 800db00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db04:	f8cd 800c 	str.w	r8, [sp, #12]
 800db08:	2330      	movs	r3, #48	; 0x30
 800db0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dcb4 <_svfiprintf_r+0x1ec>
 800db0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db12:	f04f 0901 	mov.w	r9, #1
 800db16:	4623      	mov	r3, r4
 800db18:	469a      	mov	sl, r3
 800db1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db1e:	b10a      	cbz	r2, 800db24 <_svfiprintf_r+0x5c>
 800db20:	2a25      	cmp	r2, #37	; 0x25
 800db22:	d1f9      	bne.n	800db18 <_svfiprintf_r+0x50>
 800db24:	ebba 0b04 	subs.w	fp, sl, r4
 800db28:	d00b      	beq.n	800db42 <_svfiprintf_r+0x7a>
 800db2a:	465b      	mov	r3, fp
 800db2c:	4622      	mov	r2, r4
 800db2e:	4629      	mov	r1, r5
 800db30:	4638      	mov	r0, r7
 800db32:	f7ff ff6d 	bl	800da10 <__ssputs_r>
 800db36:	3001      	adds	r0, #1
 800db38:	f000 80aa 	beq.w	800dc90 <_svfiprintf_r+0x1c8>
 800db3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db3e:	445a      	add	r2, fp
 800db40:	9209      	str	r2, [sp, #36]	; 0x24
 800db42:	f89a 3000 	ldrb.w	r3, [sl]
 800db46:	2b00      	cmp	r3, #0
 800db48:	f000 80a2 	beq.w	800dc90 <_svfiprintf_r+0x1c8>
 800db4c:	2300      	movs	r3, #0
 800db4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db56:	f10a 0a01 	add.w	sl, sl, #1
 800db5a:	9304      	str	r3, [sp, #16]
 800db5c:	9307      	str	r3, [sp, #28]
 800db5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db62:	931a      	str	r3, [sp, #104]	; 0x68
 800db64:	4654      	mov	r4, sl
 800db66:	2205      	movs	r2, #5
 800db68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db6c:	4851      	ldr	r0, [pc, #324]	; (800dcb4 <_svfiprintf_r+0x1ec>)
 800db6e:	f7f2 fb37 	bl	80001e0 <memchr>
 800db72:	9a04      	ldr	r2, [sp, #16]
 800db74:	b9d8      	cbnz	r0, 800dbae <_svfiprintf_r+0xe6>
 800db76:	06d0      	lsls	r0, r2, #27
 800db78:	bf44      	itt	mi
 800db7a:	2320      	movmi	r3, #32
 800db7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db80:	0711      	lsls	r1, r2, #28
 800db82:	bf44      	itt	mi
 800db84:	232b      	movmi	r3, #43	; 0x2b
 800db86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db8a:	f89a 3000 	ldrb.w	r3, [sl]
 800db8e:	2b2a      	cmp	r3, #42	; 0x2a
 800db90:	d015      	beq.n	800dbbe <_svfiprintf_r+0xf6>
 800db92:	9a07      	ldr	r2, [sp, #28]
 800db94:	4654      	mov	r4, sl
 800db96:	2000      	movs	r0, #0
 800db98:	f04f 0c0a 	mov.w	ip, #10
 800db9c:	4621      	mov	r1, r4
 800db9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dba2:	3b30      	subs	r3, #48	; 0x30
 800dba4:	2b09      	cmp	r3, #9
 800dba6:	d94e      	bls.n	800dc46 <_svfiprintf_r+0x17e>
 800dba8:	b1b0      	cbz	r0, 800dbd8 <_svfiprintf_r+0x110>
 800dbaa:	9207      	str	r2, [sp, #28]
 800dbac:	e014      	b.n	800dbd8 <_svfiprintf_r+0x110>
 800dbae:	eba0 0308 	sub.w	r3, r0, r8
 800dbb2:	fa09 f303 	lsl.w	r3, r9, r3
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	9304      	str	r3, [sp, #16]
 800dbba:	46a2      	mov	sl, r4
 800dbbc:	e7d2      	b.n	800db64 <_svfiprintf_r+0x9c>
 800dbbe:	9b03      	ldr	r3, [sp, #12]
 800dbc0:	1d19      	adds	r1, r3, #4
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	9103      	str	r1, [sp, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	bfbb      	ittet	lt
 800dbca:	425b      	neglt	r3, r3
 800dbcc:	f042 0202 	orrlt.w	r2, r2, #2
 800dbd0:	9307      	strge	r3, [sp, #28]
 800dbd2:	9307      	strlt	r3, [sp, #28]
 800dbd4:	bfb8      	it	lt
 800dbd6:	9204      	strlt	r2, [sp, #16]
 800dbd8:	7823      	ldrb	r3, [r4, #0]
 800dbda:	2b2e      	cmp	r3, #46	; 0x2e
 800dbdc:	d10c      	bne.n	800dbf8 <_svfiprintf_r+0x130>
 800dbde:	7863      	ldrb	r3, [r4, #1]
 800dbe0:	2b2a      	cmp	r3, #42	; 0x2a
 800dbe2:	d135      	bne.n	800dc50 <_svfiprintf_r+0x188>
 800dbe4:	9b03      	ldr	r3, [sp, #12]
 800dbe6:	1d1a      	adds	r2, r3, #4
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	9203      	str	r2, [sp, #12]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	bfb8      	it	lt
 800dbf0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dbf4:	3402      	adds	r4, #2
 800dbf6:	9305      	str	r3, [sp, #20]
 800dbf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dcc4 <_svfiprintf_r+0x1fc>
 800dbfc:	7821      	ldrb	r1, [r4, #0]
 800dbfe:	2203      	movs	r2, #3
 800dc00:	4650      	mov	r0, sl
 800dc02:	f7f2 faed 	bl	80001e0 <memchr>
 800dc06:	b140      	cbz	r0, 800dc1a <_svfiprintf_r+0x152>
 800dc08:	2340      	movs	r3, #64	; 0x40
 800dc0a:	eba0 000a 	sub.w	r0, r0, sl
 800dc0e:	fa03 f000 	lsl.w	r0, r3, r0
 800dc12:	9b04      	ldr	r3, [sp, #16]
 800dc14:	4303      	orrs	r3, r0
 800dc16:	3401      	adds	r4, #1
 800dc18:	9304      	str	r3, [sp, #16]
 800dc1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc1e:	4826      	ldr	r0, [pc, #152]	; (800dcb8 <_svfiprintf_r+0x1f0>)
 800dc20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc24:	2206      	movs	r2, #6
 800dc26:	f7f2 fadb 	bl	80001e0 <memchr>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d038      	beq.n	800dca0 <_svfiprintf_r+0x1d8>
 800dc2e:	4b23      	ldr	r3, [pc, #140]	; (800dcbc <_svfiprintf_r+0x1f4>)
 800dc30:	bb1b      	cbnz	r3, 800dc7a <_svfiprintf_r+0x1b2>
 800dc32:	9b03      	ldr	r3, [sp, #12]
 800dc34:	3307      	adds	r3, #7
 800dc36:	f023 0307 	bic.w	r3, r3, #7
 800dc3a:	3308      	adds	r3, #8
 800dc3c:	9303      	str	r3, [sp, #12]
 800dc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc40:	4433      	add	r3, r6
 800dc42:	9309      	str	r3, [sp, #36]	; 0x24
 800dc44:	e767      	b.n	800db16 <_svfiprintf_r+0x4e>
 800dc46:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc4a:	460c      	mov	r4, r1
 800dc4c:	2001      	movs	r0, #1
 800dc4e:	e7a5      	b.n	800db9c <_svfiprintf_r+0xd4>
 800dc50:	2300      	movs	r3, #0
 800dc52:	3401      	adds	r4, #1
 800dc54:	9305      	str	r3, [sp, #20]
 800dc56:	4619      	mov	r1, r3
 800dc58:	f04f 0c0a 	mov.w	ip, #10
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc62:	3a30      	subs	r2, #48	; 0x30
 800dc64:	2a09      	cmp	r2, #9
 800dc66:	d903      	bls.n	800dc70 <_svfiprintf_r+0x1a8>
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d0c5      	beq.n	800dbf8 <_svfiprintf_r+0x130>
 800dc6c:	9105      	str	r1, [sp, #20]
 800dc6e:	e7c3      	b.n	800dbf8 <_svfiprintf_r+0x130>
 800dc70:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc74:	4604      	mov	r4, r0
 800dc76:	2301      	movs	r3, #1
 800dc78:	e7f0      	b.n	800dc5c <_svfiprintf_r+0x194>
 800dc7a:	ab03      	add	r3, sp, #12
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	462a      	mov	r2, r5
 800dc80:	4b0f      	ldr	r3, [pc, #60]	; (800dcc0 <_svfiprintf_r+0x1f8>)
 800dc82:	a904      	add	r1, sp, #16
 800dc84:	4638      	mov	r0, r7
 800dc86:	f7fb ff29 	bl	8009adc <_printf_float>
 800dc8a:	1c42      	adds	r2, r0, #1
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	d1d6      	bne.n	800dc3e <_svfiprintf_r+0x176>
 800dc90:	89ab      	ldrh	r3, [r5, #12]
 800dc92:	065b      	lsls	r3, r3, #25
 800dc94:	f53f af2c 	bmi.w	800daf0 <_svfiprintf_r+0x28>
 800dc98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc9a:	b01d      	add	sp, #116	; 0x74
 800dc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dca0:	ab03      	add	r3, sp, #12
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	462a      	mov	r2, r5
 800dca6:	4b06      	ldr	r3, [pc, #24]	; (800dcc0 <_svfiprintf_r+0x1f8>)
 800dca8:	a904      	add	r1, sp, #16
 800dcaa:	4638      	mov	r0, r7
 800dcac:	f7fc f9ba 	bl	800a024 <_printf_i>
 800dcb0:	e7eb      	b.n	800dc8a <_svfiprintf_r+0x1c2>
 800dcb2:	bf00      	nop
 800dcb4:	0800ea74 	.word	0x0800ea74
 800dcb8:	0800ea7e 	.word	0x0800ea7e
 800dcbc:	08009add 	.word	0x08009add
 800dcc0:	0800da11 	.word	0x0800da11
 800dcc4:	0800ea7a 	.word	0x0800ea7a

0800dcc8 <__sfputc_r>:
 800dcc8:	6893      	ldr	r3, [r2, #8]
 800dcca:	3b01      	subs	r3, #1
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	b410      	push	{r4}
 800dcd0:	6093      	str	r3, [r2, #8]
 800dcd2:	da08      	bge.n	800dce6 <__sfputc_r+0x1e>
 800dcd4:	6994      	ldr	r4, [r2, #24]
 800dcd6:	42a3      	cmp	r3, r4
 800dcd8:	db01      	blt.n	800dcde <__sfputc_r+0x16>
 800dcda:	290a      	cmp	r1, #10
 800dcdc:	d103      	bne.n	800dce6 <__sfputc_r+0x1e>
 800dcde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dce2:	f7fd bc3b 	b.w	800b55c <__swbuf_r>
 800dce6:	6813      	ldr	r3, [r2, #0]
 800dce8:	1c58      	adds	r0, r3, #1
 800dcea:	6010      	str	r0, [r2, #0]
 800dcec:	7019      	strb	r1, [r3, #0]
 800dcee:	4608      	mov	r0, r1
 800dcf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcf4:	4770      	bx	lr

0800dcf6 <__sfputs_r>:
 800dcf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf8:	4606      	mov	r6, r0
 800dcfa:	460f      	mov	r7, r1
 800dcfc:	4614      	mov	r4, r2
 800dcfe:	18d5      	adds	r5, r2, r3
 800dd00:	42ac      	cmp	r4, r5
 800dd02:	d101      	bne.n	800dd08 <__sfputs_r+0x12>
 800dd04:	2000      	movs	r0, #0
 800dd06:	e007      	b.n	800dd18 <__sfputs_r+0x22>
 800dd08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd0c:	463a      	mov	r2, r7
 800dd0e:	4630      	mov	r0, r6
 800dd10:	f7ff ffda 	bl	800dcc8 <__sfputc_r>
 800dd14:	1c43      	adds	r3, r0, #1
 800dd16:	d1f3      	bne.n	800dd00 <__sfputs_r+0xa>
 800dd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd1c <_vfiprintf_r>:
 800dd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd20:	460d      	mov	r5, r1
 800dd22:	b09d      	sub	sp, #116	; 0x74
 800dd24:	4614      	mov	r4, r2
 800dd26:	4698      	mov	r8, r3
 800dd28:	4606      	mov	r6, r0
 800dd2a:	b118      	cbz	r0, 800dd34 <_vfiprintf_r+0x18>
 800dd2c:	6983      	ldr	r3, [r0, #24]
 800dd2e:	b90b      	cbnz	r3, 800dd34 <_vfiprintf_r+0x18>
 800dd30:	f7fe fc68 	bl	800c604 <__sinit>
 800dd34:	4b89      	ldr	r3, [pc, #548]	; (800df5c <_vfiprintf_r+0x240>)
 800dd36:	429d      	cmp	r5, r3
 800dd38:	d11b      	bne.n	800dd72 <_vfiprintf_r+0x56>
 800dd3a:	6875      	ldr	r5, [r6, #4]
 800dd3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd3e:	07d9      	lsls	r1, r3, #31
 800dd40:	d405      	bmi.n	800dd4e <_vfiprintf_r+0x32>
 800dd42:	89ab      	ldrh	r3, [r5, #12]
 800dd44:	059a      	lsls	r2, r3, #22
 800dd46:	d402      	bmi.n	800dd4e <_vfiprintf_r+0x32>
 800dd48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd4a:	f7ff f86c 	bl	800ce26 <__retarget_lock_acquire_recursive>
 800dd4e:	89ab      	ldrh	r3, [r5, #12]
 800dd50:	071b      	lsls	r3, r3, #28
 800dd52:	d501      	bpl.n	800dd58 <_vfiprintf_r+0x3c>
 800dd54:	692b      	ldr	r3, [r5, #16]
 800dd56:	b9eb      	cbnz	r3, 800dd94 <_vfiprintf_r+0x78>
 800dd58:	4629      	mov	r1, r5
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	f7fd fc50 	bl	800b600 <__swsetup_r>
 800dd60:	b1c0      	cbz	r0, 800dd94 <_vfiprintf_r+0x78>
 800dd62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd64:	07dc      	lsls	r4, r3, #31
 800dd66:	d50e      	bpl.n	800dd86 <_vfiprintf_r+0x6a>
 800dd68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd6c:	b01d      	add	sp, #116	; 0x74
 800dd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd72:	4b7b      	ldr	r3, [pc, #492]	; (800df60 <_vfiprintf_r+0x244>)
 800dd74:	429d      	cmp	r5, r3
 800dd76:	d101      	bne.n	800dd7c <_vfiprintf_r+0x60>
 800dd78:	68b5      	ldr	r5, [r6, #8]
 800dd7a:	e7df      	b.n	800dd3c <_vfiprintf_r+0x20>
 800dd7c:	4b79      	ldr	r3, [pc, #484]	; (800df64 <_vfiprintf_r+0x248>)
 800dd7e:	429d      	cmp	r5, r3
 800dd80:	bf08      	it	eq
 800dd82:	68f5      	ldreq	r5, [r6, #12]
 800dd84:	e7da      	b.n	800dd3c <_vfiprintf_r+0x20>
 800dd86:	89ab      	ldrh	r3, [r5, #12]
 800dd88:	0598      	lsls	r0, r3, #22
 800dd8a:	d4ed      	bmi.n	800dd68 <_vfiprintf_r+0x4c>
 800dd8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd8e:	f7ff f84b 	bl	800ce28 <__retarget_lock_release_recursive>
 800dd92:	e7e9      	b.n	800dd68 <_vfiprintf_r+0x4c>
 800dd94:	2300      	movs	r3, #0
 800dd96:	9309      	str	r3, [sp, #36]	; 0x24
 800dd98:	2320      	movs	r3, #32
 800dd9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dda2:	2330      	movs	r3, #48	; 0x30
 800dda4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df68 <_vfiprintf_r+0x24c>
 800dda8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddac:	f04f 0901 	mov.w	r9, #1
 800ddb0:	4623      	mov	r3, r4
 800ddb2:	469a      	mov	sl, r3
 800ddb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddb8:	b10a      	cbz	r2, 800ddbe <_vfiprintf_r+0xa2>
 800ddba:	2a25      	cmp	r2, #37	; 0x25
 800ddbc:	d1f9      	bne.n	800ddb2 <_vfiprintf_r+0x96>
 800ddbe:	ebba 0b04 	subs.w	fp, sl, r4
 800ddc2:	d00b      	beq.n	800dddc <_vfiprintf_r+0xc0>
 800ddc4:	465b      	mov	r3, fp
 800ddc6:	4622      	mov	r2, r4
 800ddc8:	4629      	mov	r1, r5
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f7ff ff93 	bl	800dcf6 <__sfputs_r>
 800ddd0:	3001      	adds	r0, #1
 800ddd2:	f000 80aa 	beq.w	800df2a <_vfiprintf_r+0x20e>
 800ddd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddd8:	445a      	add	r2, fp
 800ddda:	9209      	str	r2, [sp, #36]	; 0x24
 800dddc:	f89a 3000 	ldrb.w	r3, [sl]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	f000 80a2 	beq.w	800df2a <_vfiprintf_r+0x20e>
 800dde6:	2300      	movs	r3, #0
 800dde8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddf0:	f10a 0a01 	add.w	sl, sl, #1
 800ddf4:	9304      	str	r3, [sp, #16]
 800ddf6:	9307      	str	r3, [sp, #28]
 800ddf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddfc:	931a      	str	r3, [sp, #104]	; 0x68
 800ddfe:	4654      	mov	r4, sl
 800de00:	2205      	movs	r2, #5
 800de02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de06:	4858      	ldr	r0, [pc, #352]	; (800df68 <_vfiprintf_r+0x24c>)
 800de08:	f7f2 f9ea 	bl	80001e0 <memchr>
 800de0c:	9a04      	ldr	r2, [sp, #16]
 800de0e:	b9d8      	cbnz	r0, 800de48 <_vfiprintf_r+0x12c>
 800de10:	06d1      	lsls	r1, r2, #27
 800de12:	bf44      	itt	mi
 800de14:	2320      	movmi	r3, #32
 800de16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de1a:	0713      	lsls	r3, r2, #28
 800de1c:	bf44      	itt	mi
 800de1e:	232b      	movmi	r3, #43	; 0x2b
 800de20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de24:	f89a 3000 	ldrb.w	r3, [sl]
 800de28:	2b2a      	cmp	r3, #42	; 0x2a
 800de2a:	d015      	beq.n	800de58 <_vfiprintf_r+0x13c>
 800de2c:	9a07      	ldr	r2, [sp, #28]
 800de2e:	4654      	mov	r4, sl
 800de30:	2000      	movs	r0, #0
 800de32:	f04f 0c0a 	mov.w	ip, #10
 800de36:	4621      	mov	r1, r4
 800de38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de3c:	3b30      	subs	r3, #48	; 0x30
 800de3e:	2b09      	cmp	r3, #9
 800de40:	d94e      	bls.n	800dee0 <_vfiprintf_r+0x1c4>
 800de42:	b1b0      	cbz	r0, 800de72 <_vfiprintf_r+0x156>
 800de44:	9207      	str	r2, [sp, #28]
 800de46:	e014      	b.n	800de72 <_vfiprintf_r+0x156>
 800de48:	eba0 0308 	sub.w	r3, r0, r8
 800de4c:	fa09 f303 	lsl.w	r3, r9, r3
 800de50:	4313      	orrs	r3, r2
 800de52:	9304      	str	r3, [sp, #16]
 800de54:	46a2      	mov	sl, r4
 800de56:	e7d2      	b.n	800ddfe <_vfiprintf_r+0xe2>
 800de58:	9b03      	ldr	r3, [sp, #12]
 800de5a:	1d19      	adds	r1, r3, #4
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	9103      	str	r1, [sp, #12]
 800de60:	2b00      	cmp	r3, #0
 800de62:	bfbb      	ittet	lt
 800de64:	425b      	neglt	r3, r3
 800de66:	f042 0202 	orrlt.w	r2, r2, #2
 800de6a:	9307      	strge	r3, [sp, #28]
 800de6c:	9307      	strlt	r3, [sp, #28]
 800de6e:	bfb8      	it	lt
 800de70:	9204      	strlt	r2, [sp, #16]
 800de72:	7823      	ldrb	r3, [r4, #0]
 800de74:	2b2e      	cmp	r3, #46	; 0x2e
 800de76:	d10c      	bne.n	800de92 <_vfiprintf_r+0x176>
 800de78:	7863      	ldrb	r3, [r4, #1]
 800de7a:	2b2a      	cmp	r3, #42	; 0x2a
 800de7c:	d135      	bne.n	800deea <_vfiprintf_r+0x1ce>
 800de7e:	9b03      	ldr	r3, [sp, #12]
 800de80:	1d1a      	adds	r2, r3, #4
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	9203      	str	r2, [sp, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	bfb8      	it	lt
 800de8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800de8e:	3402      	adds	r4, #2
 800de90:	9305      	str	r3, [sp, #20]
 800de92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df78 <_vfiprintf_r+0x25c>
 800de96:	7821      	ldrb	r1, [r4, #0]
 800de98:	2203      	movs	r2, #3
 800de9a:	4650      	mov	r0, sl
 800de9c:	f7f2 f9a0 	bl	80001e0 <memchr>
 800dea0:	b140      	cbz	r0, 800deb4 <_vfiprintf_r+0x198>
 800dea2:	2340      	movs	r3, #64	; 0x40
 800dea4:	eba0 000a 	sub.w	r0, r0, sl
 800dea8:	fa03 f000 	lsl.w	r0, r3, r0
 800deac:	9b04      	ldr	r3, [sp, #16]
 800deae:	4303      	orrs	r3, r0
 800deb0:	3401      	adds	r4, #1
 800deb2:	9304      	str	r3, [sp, #16]
 800deb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb8:	482c      	ldr	r0, [pc, #176]	; (800df6c <_vfiprintf_r+0x250>)
 800deba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800debe:	2206      	movs	r2, #6
 800dec0:	f7f2 f98e 	bl	80001e0 <memchr>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d03f      	beq.n	800df48 <_vfiprintf_r+0x22c>
 800dec8:	4b29      	ldr	r3, [pc, #164]	; (800df70 <_vfiprintf_r+0x254>)
 800deca:	bb1b      	cbnz	r3, 800df14 <_vfiprintf_r+0x1f8>
 800decc:	9b03      	ldr	r3, [sp, #12]
 800dece:	3307      	adds	r3, #7
 800ded0:	f023 0307 	bic.w	r3, r3, #7
 800ded4:	3308      	adds	r3, #8
 800ded6:	9303      	str	r3, [sp, #12]
 800ded8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deda:	443b      	add	r3, r7
 800dedc:	9309      	str	r3, [sp, #36]	; 0x24
 800dede:	e767      	b.n	800ddb0 <_vfiprintf_r+0x94>
 800dee0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dee4:	460c      	mov	r4, r1
 800dee6:	2001      	movs	r0, #1
 800dee8:	e7a5      	b.n	800de36 <_vfiprintf_r+0x11a>
 800deea:	2300      	movs	r3, #0
 800deec:	3401      	adds	r4, #1
 800deee:	9305      	str	r3, [sp, #20]
 800def0:	4619      	mov	r1, r3
 800def2:	f04f 0c0a 	mov.w	ip, #10
 800def6:	4620      	mov	r0, r4
 800def8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800defc:	3a30      	subs	r2, #48	; 0x30
 800defe:	2a09      	cmp	r2, #9
 800df00:	d903      	bls.n	800df0a <_vfiprintf_r+0x1ee>
 800df02:	2b00      	cmp	r3, #0
 800df04:	d0c5      	beq.n	800de92 <_vfiprintf_r+0x176>
 800df06:	9105      	str	r1, [sp, #20]
 800df08:	e7c3      	b.n	800de92 <_vfiprintf_r+0x176>
 800df0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800df0e:	4604      	mov	r4, r0
 800df10:	2301      	movs	r3, #1
 800df12:	e7f0      	b.n	800def6 <_vfiprintf_r+0x1da>
 800df14:	ab03      	add	r3, sp, #12
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	462a      	mov	r2, r5
 800df1a:	4b16      	ldr	r3, [pc, #88]	; (800df74 <_vfiprintf_r+0x258>)
 800df1c:	a904      	add	r1, sp, #16
 800df1e:	4630      	mov	r0, r6
 800df20:	f7fb fddc 	bl	8009adc <_printf_float>
 800df24:	4607      	mov	r7, r0
 800df26:	1c78      	adds	r0, r7, #1
 800df28:	d1d6      	bne.n	800ded8 <_vfiprintf_r+0x1bc>
 800df2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df2c:	07d9      	lsls	r1, r3, #31
 800df2e:	d405      	bmi.n	800df3c <_vfiprintf_r+0x220>
 800df30:	89ab      	ldrh	r3, [r5, #12]
 800df32:	059a      	lsls	r2, r3, #22
 800df34:	d402      	bmi.n	800df3c <_vfiprintf_r+0x220>
 800df36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df38:	f7fe ff76 	bl	800ce28 <__retarget_lock_release_recursive>
 800df3c:	89ab      	ldrh	r3, [r5, #12]
 800df3e:	065b      	lsls	r3, r3, #25
 800df40:	f53f af12 	bmi.w	800dd68 <_vfiprintf_r+0x4c>
 800df44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df46:	e711      	b.n	800dd6c <_vfiprintf_r+0x50>
 800df48:	ab03      	add	r3, sp, #12
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	462a      	mov	r2, r5
 800df4e:	4b09      	ldr	r3, [pc, #36]	; (800df74 <_vfiprintf_r+0x258>)
 800df50:	a904      	add	r1, sp, #16
 800df52:	4630      	mov	r0, r6
 800df54:	f7fc f866 	bl	800a024 <_printf_i>
 800df58:	e7e4      	b.n	800df24 <_vfiprintf_r+0x208>
 800df5a:	bf00      	nop
 800df5c:	0800e858 	.word	0x0800e858
 800df60:	0800e878 	.word	0x0800e878
 800df64:	0800e838 	.word	0x0800e838
 800df68:	0800ea74 	.word	0x0800ea74
 800df6c:	0800ea7e 	.word	0x0800ea7e
 800df70:	08009add 	.word	0x08009add
 800df74:	0800dcf7 	.word	0x0800dcf7
 800df78:	0800ea7a 	.word	0x0800ea7a
 800df7c:	00000000 	.word	0x00000000

0800df80 <nan>:
 800df80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df88 <nan+0x8>
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	00000000 	.word	0x00000000
 800df8c:	7ff80000 	.word	0x7ff80000

0800df90 <_sbrk_r>:
 800df90:	b538      	push	{r3, r4, r5, lr}
 800df92:	4d06      	ldr	r5, [pc, #24]	; (800dfac <_sbrk_r+0x1c>)
 800df94:	2300      	movs	r3, #0
 800df96:	4604      	mov	r4, r0
 800df98:	4608      	mov	r0, r1
 800df9a:	602b      	str	r3, [r5, #0]
 800df9c:	f7f4 f99a 	bl	80022d4 <_sbrk>
 800dfa0:	1c43      	adds	r3, r0, #1
 800dfa2:	d102      	bne.n	800dfaa <_sbrk_r+0x1a>
 800dfa4:	682b      	ldr	r3, [r5, #0]
 800dfa6:	b103      	cbz	r3, 800dfaa <_sbrk_r+0x1a>
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	bd38      	pop	{r3, r4, r5, pc}
 800dfac:	20001cf8 	.word	0x20001cf8

0800dfb0 <__sread>:
 800dfb0:	b510      	push	{r4, lr}
 800dfb2:	460c      	mov	r4, r1
 800dfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfb8:	f000 f92e 	bl	800e218 <_read_r>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	bfab      	itete	ge
 800dfc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dfc2:	89a3      	ldrhlt	r3, [r4, #12]
 800dfc4:	181b      	addge	r3, r3, r0
 800dfc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dfca:	bfac      	ite	ge
 800dfcc:	6563      	strge	r3, [r4, #84]	; 0x54
 800dfce:	81a3      	strhlt	r3, [r4, #12]
 800dfd0:	bd10      	pop	{r4, pc}

0800dfd2 <__swrite>:
 800dfd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd6:	461f      	mov	r7, r3
 800dfd8:	898b      	ldrh	r3, [r1, #12]
 800dfda:	05db      	lsls	r3, r3, #23
 800dfdc:	4605      	mov	r5, r0
 800dfde:	460c      	mov	r4, r1
 800dfe0:	4616      	mov	r6, r2
 800dfe2:	d505      	bpl.n	800dff0 <__swrite+0x1e>
 800dfe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfe8:	2302      	movs	r3, #2
 800dfea:	2200      	movs	r2, #0
 800dfec:	f000 f8b6 	bl	800e15c <_lseek_r>
 800dff0:	89a3      	ldrh	r3, [r4, #12]
 800dff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dffa:	81a3      	strh	r3, [r4, #12]
 800dffc:	4632      	mov	r2, r6
 800dffe:	463b      	mov	r3, r7
 800e000:	4628      	mov	r0, r5
 800e002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e006:	f000 b835 	b.w	800e074 <_write_r>

0800e00a <__sseek>:
 800e00a:	b510      	push	{r4, lr}
 800e00c:	460c      	mov	r4, r1
 800e00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e012:	f000 f8a3 	bl	800e15c <_lseek_r>
 800e016:	1c43      	adds	r3, r0, #1
 800e018:	89a3      	ldrh	r3, [r4, #12]
 800e01a:	bf15      	itete	ne
 800e01c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e01e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e026:	81a3      	strheq	r3, [r4, #12]
 800e028:	bf18      	it	ne
 800e02a:	81a3      	strhne	r3, [r4, #12]
 800e02c:	bd10      	pop	{r4, pc}

0800e02e <__sclose>:
 800e02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e032:	f000 b84f 	b.w	800e0d4 <_close_r>

0800e036 <strncmp>:
 800e036:	b510      	push	{r4, lr}
 800e038:	b16a      	cbz	r2, 800e056 <strncmp+0x20>
 800e03a:	3901      	subs	r1, #1
 800e03c:	1884      	adds	r4, r0, r2
 800e03e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e042:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e046:	4293      	cmp	r3, r2
 800e048:	d103      	bne.n	800e052 <strncmp+0x1c>
 800e04a:	42a0      	cmp	r0, r4
 800e04c:	d001      	beq.n	800e052 <strncmp+0x1c>
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d1f5      	bne.n	800e03e <strncmp+0x8>
 800e052:	1a98      	subs	r0, r3, r2
 800e054:	bd10      	pop	{r4, pc}
 800e056:	4610      	mov	r0, r2
 800e058:	e7fc      	b.n	800e054 <strncmp+0x1e>

0800e05a <__ascii_wctomb>:
 800e05a:	b149      	cbz	r1, 800e070 <__ascii_wctomb+0x16>
 800e05c:	2aff      	cmp	r2, #255	; 0xff
 800e05e:	bf85      	ittet	hi
 800e060:	238a      	movhi	r3, #138	; 0x8a
 800e062:	6003      	strhi	r3, [r0, #0]
 800e064:	700a      	strbls	r2, [r1, #0]
 800e066:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e06a:	bf98      	it	ls
 800e06c:	2001      	movls	r0, #1
 800e06e:	4770      	bx	lr
 800e070:	4608      	mov	r0, r1
 800e072:	4770      	bx	lr

0800e074 <_write_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	4d07      	ldr	r5, [pc, #28]	; (800e094 <_write_r+0x20>)
 800e078:	4604      	mov	r4, r0
 800e07a:	4608      	mov	r0, r1
 800e07c:	4611      	mov	r1, r2
 800e07e:	2200      	movs	r2, #0
 800e080:	602a      	str	r2, [r5, #0]
 800e082:	461a      	mov	r2, r3
 800e084:	f7f4 f8d5 	bl	8002232 <_write>
 800e088:	1c43      	adds	r3, r0, #1
 800e08a:	d102      	bne.n	800e092 <_write_r+0x1e>
 800e08c:	682b      	ldr	r3, [r5, #0]
 800e08e:	b103      	cbz	r3, 800e092 <_write_r+0x1e>
 800e090:	6023      	str	r3, [r4, #0]
 800e092:	bd38      	pop	{r3, r4, r5, pc}
 800e094:	20001cf8 	.word	0x20001cf8

0800e098 <__assert_func>:
 800e098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e09a:	4614      	mov	r4, r2
 800e09c:	461a      	mov	r2, r3
 800e09e:	4b09      	ldr	r3, [pc, #36]	; (800e0c4 <__assert_func+0x2c>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4605      	mov	r5, r0
 800e0a4:	68d8      	ldr	r0, [r3, #12]
 800e0a6:	b14c      	cbz	r4, 800e0bc <__assert_func+0x24>
 800e0a8:	4b07      	ldr	r3, [pc, #28]	; (800e0c8 <__assert_func+0x30>)
 800e0aa:	9100      	str	r1, [sp, #0]
 800e0ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0b0:	4906      	ldr	r1, [pc, #24]	; (800e0cc <__assert_func+0x34>)
 800e0b2:	462b      	mov	r3, r5
 800e0b4:	f000 f81e 	bl	800e0f4 <fiprintf>
 800e0b8:	f000 f8c0 	bl	800e23c <abort>
 800e0bc:	4b04      	ldr	r3, [pc, #16]	; (800e0d0 <__assert_func+0x38>)
 800e0be:	461c      	mov	r4, r3
 800e0c0:	e7f3      	b.n	800e0aa <__assert_func+0x12>
 800e0c2:	bf00      	nop
 800e0c4:	20000010 	.word	0x20000010
 800e0c8:	0800ea85 	.word	0x0800ea85
 800e0cc:	0800ea92 	.word	0x0800ea92
 800e0d0:	0800eac0 	.word	0x0800eac0

0800e0d4 <_close_r>:
 800e0d4:	b538      	push	{r3, r4, r5, lr}
 800e0d6:	4d06      	ldr	r5, [pc, #24]	; (800e0f0 <_close_r+0x1c>)
 800e0d8:	2300      	movs	r3, #0
 800e0da:	4604      	mov	r4, r0
 800e0dc:	4608      	mov	r0, r1
 800e0de:	602b      	str	r3, [r5, #0]
 800e0e0:	f7f4 f8c3 	bl	800226a <_close>
 800e0e4:	1c43      	adds	r3, r0, #1
 800e0e6:	d102      	bne.n	800e0ee <_close_r+0x1a>
 800e0e8:	682b      	ldr	r3, [r5, #0]
 800e0ea:	b103      	cbz	r3, 800e0ee <_close_r+0x1a>
 800e0ec:	6023      	str	r3, [r4, #0]
 800e0ee:	bd38      	pop	{r3, r4, r5, pc}
 800e0f0:	20001cf8 	.word	0x20001cf8

0800e0f4 <fiprintf>:
 800e0f4:	b40e      	push	{r1, r2, r3}
 800e0f6:	b503      	push	{r0, r1, lr}
 800e0f8:	4601      	mov	r1, r0
 800e0fa:	ab03      	add	r3, sp, #12
 800e0fc:	4805      	ldr	r0, [pc, #20]	; (800e114 <fiprintf+0x20>)
 800e0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800e102:	6800      	ldr	r0, [r0, #0]
 800e104:	9301      	str	r3, [sp, #4]
 800e106:	f7ff fe09 	bl	800dd1c <_vfiprintf_r>
 800e10a:	b002      	add	sp, #8
 800e10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e110:	b003      	add	sp, #12
 800e112:	4770      	bx	lr
 800e114:	20000010 	.word	0x20000010

0800e118 <_fstat_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4d07      	ldr	r5, [pc, #28]	; (800e138 <_fstat_r+0x20>)
 800e11c:	2300      	movs	r3, #0
 800e11e:	4604      	mov	r4, r0
 800e120:	4608      	mov	r0, r1
 800e122:	4611      	mov	r1, r2
 800e124:	602b      	str	r3, [r5, #0]
 800e126:	f7f4 f8ac 	bl	8002282 <_fstat>
 800e12a:	1c43      	adds	r3, r0, #1
 800e12c:	d102      	bne.n	800e134 <_fstat_r+0x1c>
 800e12e:	682b      	ldr	r3, [r5, #0]
 800e130:	b103      	cbz	r3, 800e134 <_fstat_r+0x1c>
 800e132:	6023      	str	r3, [r4, #0]
 800e134:	bd38      	pop	{r3, r4, r5, pc}
 800e136:	bf00      	nop
 800e138:	20001cf8 	.word	0x20001cf8

0800e13c <_isatty_r>:
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	4d06      	ldr	r5, [pc, #24]	; (800e158 <_isatty_r+0x1c>)
 800e140:	2300      	movs	r3, #0
 800e142:	4604      	mov	r4, r0
 800e144:	4608      	mov	r0, r1
 800e146:	602b      	str	r3, [r5, #0]
 800e148:	f7f4 f8ab 	bl	80022a2 <_isatty>
 800e14c:	1c43      	adds	r3, r0, #1
 800e14e:	d102      	bne.n	800e156 <_isatty_r+0x1a>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	b103      	cbz	r3, 800e156 <_isatty_r+0x1a>
 800e154:	6023      	str	r3, [r4, #0]
 800e156:	bd38      	pop	{r3, r4, r5, pc}
 800e158:	20001cf8 	.word	0x20001cf8

0800e15c <_lseek_r>:
 800e15c:	b538      	push	{r3, r4, r5, lr}
 800e15e:	4d07      	ldr	r5, [pc, #28]	; (800e17c <_lseek_r+0x20>)
 800e160:	4604      	mov	r4, r0
 800e162:	4608      	mov	r0, r1
 800e164:	4611      	mov	r1, r2
 800e166:	2200      	movs	r2, #0
 800e168:	602a      	str	r2, [r5, #0]
 800e16a:	461a      	mov	r2, r3
 800e16c:	f7f4 f8a4 	bl	80022b8 <_lseek>
 800e170:	1c43      	adds	r3, r0, #1
 800e172:	d102      	bne.n	800e17a <_lseek_r+0x1e>
 800e174:	682b      	ldr	r3, [r5, #0]
 800e176:	b103      	cbz	r3, 800e17a <_lseek_r+0x1e>
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	bd38      	pop	{r3, r4, r5, pc}
 800e17c:	20001cf8 	.word	0x20001cf8

0800e180 <memmove>:
 800e180:	4288      	cmp	r0, r1
 800e182:	b510      	push	{r4, lr}
 800e184:	eb01 0402 	add.w	r4, r1, r2
 800e188:	d902      	bls.n	800e190 <memmove+0x10>
 800e18a:	4284      	cmp	r4, r0
 800e18c:	4623      	mov	r3, r4
 800e18e:	d807      	bhi.n	800e1a0 <memmove+0x20>
 800e190:	1e43      	subs	r3, r0, #1
 800e192:	42a1      	cmp	r1, r4
 800e194:	d008      	beq.n	800e1a8 <memmove+0x28>
 800e196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e19a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e19e:	e7f8      	b.n	800e192 <memmove+0x12>
 800e1a0:	4402      	add	r2, r0
 800e1a2:	4601      	mov	r1, r0
 800e1a4:	428a      	cmp	r2, r1
 800e1a6:	d100      	bne.n	800e1aa <memmove+0x2a>
 800e1a8:	bd10      	pop	{r4, pc}
 800e1aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1b2:	e7f7      	b.n	800e1a4 <memmove+0x24>

0800e1b4 <__malloc_lock>:
 800e1b4:	4801      	ldr	r0, [pc, #4]	; (800e1bc <__malloc_lock+0x8>)
 800e1b6:	f7fe be36 	b.w	800ce26 <__retarget_lock_acquire_recursive>
 800e1ba:	bf00      	nop
 800e1bc:	20001cf0 	.word	0x20001cf0

0800e1c0 <__malloc_unlock>:
 800e1c0:	4801      	ldr	r0, [pc, #4]	; (800e1c8 <__malloc_unlock+0x8>)
 800e1c2:	f7fe be31 	b.w	800ce28 <__retarget_lock_release_recursive>
 800e1c6:	bf00      	nop
 800e1c8:	20001cf0 	.word	0x20001cf0

0800e1cc <_realloc_r>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	4607      	mov	r7, r0
 800e1d0:	4614      	mov	r4, r2
 800e1d2:	460e      	mov	r6, r1
 800e1d4:	b921      	cbnz	r1, 800e1e0 <_realloc_r+0x14>
 800e1d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e1da:	4611      	mov	r1, r2
 800e1dc:	f7ff bbbe 	b.w	800d95c <_malloc_r>
 800e1e0:	b922      	cbnz	r2, 800e1ec <_realloc_r+0x20>
 800e1e2:	f7ff fb6b 	bl	800d8bc <_free_r>
 800e1e6:	4625      	mov	r5, r4
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ec:	f000 f82d 	bl	800e24a <_malloc_usable_size_r>
 800e1f0:	42a0      	cmp	r0, r4
 800e1f2:	d20f      	bcs.n	800e214 <_realloc_r+0x48>
 800e1f4:	4621      	mov	r1, r4
 800e1f6:	4638      	mov	r0, r7
 800e1f8:	f7ff fbb0 	bl	800d95c <_malloc_r>
 800e1fc:	4605      	mov	r5, r0
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d0f2      	beq.n	800e1e8 <_realloc_r+0x1c>
 800e202:	4631      	mov	r1, r6
 800e204:	4622      	mov	r2, r4
 800e206:	f7fb fbb3 	bl	8009970 <memcpy>
 800e20a:	4631      	mov	r1, r6
 800e20c:	4638      	mov	r0, r7
 800e20e:	f7ff fb55 	bl	800d8bc <_free_r>
 800e212:	e7e9      	b.n	800e1e8 <_realloc_r+0x1c>
 800e214:	4635      	mov	r5, r6
 800e216:	e7e7      	b.n	800e1e8 <_realloc_r+0x1c>

0800e218 <_read_r>:
 800e218:	b538      	push	{r3, r4, r5, lr}
 800e21a:	4d07      	ldr	r5, [pc, #28]	; (800e238 <_read_r+0x20>)
 800e21c:	4604      	mov	r4, r0
 800e21e:	4608      	mov	r0, r1
 800e220:	4611      	mov	r1, r2
 800e222:	2200      	movs	r2, #0
 800e224:	602a      	str	r2, [r5, #0]
 800e226:	461a      	mov	r2, r3
 800e228:	f7f3 ffe6 	bl	80021f8 <_read>
 800e22c:	1c43      	adds	r3, r0, #1
 800e22e:	d102      	bne.n	800e236 <_read_r+0x1e>
 800e230:	682b      	ldr	r3, [r5, #0]
 800e232:	b103      	cbz	r3, 800e236 <_read_r+0x1e>
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	bd38      	pop	{r3, r4, r5, pc}
 800e238:	20001cf8 	.word	0x20001cf8

0800e23c <abort>:
 800e23c:	b508      	push	{r3, lr}
 800e23e:	2006      	movs	r0, #6
 800e240:	f000 f834 	bl	800e2ac <raise>
 800e244:	2001      	movs	r0, #1
 800e246:	f7f3 ffcd 	bl	80021e4 <_exit>

0800e24a <_malloc_usable_size_r>:
 800e24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e24e:	1f18      	subs	r0, r3, #4
 800e250:	2b00      	cmp	r3, #0
 800e252:	bfbc      	itt	lt
 800e254:	580b      	ldrlt	r3, [r1, r0]
 800e256:	18c0      	addlt	r0, r0, r3
 800e258:	4770      	bx	lr

0800e25a <_raise_r>:
 800e25a:	291f      	cmp	r1, #31
 800e25c:	b538      	push	{r3, r4, r5, lr}
 800e25e:	4604      	mov	r4, r0
 800e260:	460d      	mov	r5, r1
 800e262:	d904      	bls.n	800e26e <_raise_r+0x14>
 800e264:	2316      	movs	r3, #22
 800e266:	6003      	str	r3, [r0, #0]
 800e268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e26c:	bd38      	pop	{r3, r4, r5, pc}
 800e26e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e270:	b112      	cbz	r2, 800e278 <_raise_r+0x1e>
 800e272:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e276:	b94b      	cbnz	r3, 800e28c <_raise_r+0x32>
 800e278:	4620      	mov	r0, r4
 800e27a:	f000 f831 	bl	800e2e0 <_getpid_r>
 800e27e:	462a      	mov	r2, r5
 800e280:	4601      	mov	r1, r0
 800e282:	4620      	mov	r0, r4
 800e284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e288:	f000 b818 	b.w	800e2bc <_kill_r>
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d00a      	beq.n	800e2a6 <_raise_r+0x4c>
 800e290:	1c59      	adds	r1, r3, #1
 800e292:	d103      	bne.n	800e29c <_raise_r+0x42>
 800e294:	2316      	movs	r3, #22
 800e296:	6003      	str	r3, [r0, #0]
 800e298:	2001      	movs	r0, #1
 800e29a:	e7e7      	b.n	800e26c <_raise_r+0x12>
 800e29c:	2400      	movs	r4, #0
 800e29e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	4798      	blx	r3
 800e2a6:	2000      	movs	r0, #0
 800e2a8:	e7e0      	b.n	800e26c <_raise_r+0x12>
	...

0800e2ac <raise>:
 800e2ac:	4b02      	ldr	r3, [pc, #8]	; (800e2b8 <raise+0xc>)
 800e2ae:	4601      	mov	r1, r0
 800e2b0:	6818      	ldr	r0, [r3, #0]
 800e2b2:	f7ff bfd2 	b.w	800e25a <_raise_r>
 800e2b6:	bf00      	nop
 800e2b8:	20000010 	.word	0x20000010

0800e2bc <_kill_r>:
 800e2bc:	b538      	push	{r3, r4, r5, lr}
 800e2be:	4d07      	ldr	r5, [pc, #28]	; (800e2dc <_kill_r+0x20>)
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	4608      	mov	r0, r1
 800e2c6:	4611      	mov	r1, r2
 800e2c8:	602b      	str	r3, [r5, #0]
 800e2ca:	f7f3 ff7b 	bl	80021c4 <_kill>
 800e2ce:	1c43      	adds	r3, r0, #1
 800e2d0:	d102      	bne.n	800e2d8 <_kill_r+0x1c>
 800e2d2:	682b      	ldr	r3, [r5, #0]
 800e2d4:	b103      	cbz	r3, 800e2d8 <_kill_r+0x1c>
 800e2d6:	6023      	str	r3, [r4, #0]
 800e2d8:	bd38      	pop	{r3, r4, r5, pc}
 800e2da:	bf00      	nop
 800e2dc:	20001cf8 	.word	0x20001cf8

0800e2e0 <_getpid_r>:
 800e2e0:	f7f3 bf68 	b.w	80021b4 <_getpid>

0800e2e4 <_init>:
 800e2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2e6:	bf00      	nop
 800e2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ea:	bc08      	pop	{r3}
 800e2ec:	469e      	mov	lr, r3
 800e2ee:	4770      	bx	lr

0800e2f0 <_fini>:
 800e2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f2:	bf00      	nop
 800e2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2f6:	bc08      	pop	{r3}
 800e2f8:	469e      	mov	lr, r3
 800e2fa:	4770      	bx	lr
