
hello_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000753c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080076cc  080076cc  000176cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007914  08007914  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007914  08007914  00017914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800791c  0800791c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007920  08007920  00017920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a24  20000074  08007998  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a98  08007998  00021a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0f7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038de  00000000  00000000  0003e19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00041a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  00043180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f87  00000000  00000000  00044738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dc3  00000000  00000000  000496bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffa73  00000000  00000000  00061482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160ef5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068c4  00000000  00000000  00160f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076b4 	.word	0x080076b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080076b4 	.word	0x080076b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	const char* sender0Tag = "Sender0";
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <main+0x7c>)
 8000570:	60fb      	str	r3, [r7, #12]
	const char* sender1Tag = "Sender1";
 8000572:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <main+0x80>)
 8000574:	60bb      	str	r3, [r7, #8]
	const char* sender2Tag = "Sender2";
 8000576:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <main+0x84>)
 8000578:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fb91 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f84b 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8ef 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f8bd 	bl	8000704 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058a:	f003 f97d 	bl	8003888 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  messageQueue = osMessageQueueNew(32, sizeof(MSGQUEUE_OBJ_t), NULL);
 800058e:	2200      	movs	r2, #0
 8000590:	2121      	movs	r1, #33	; 0x21
 8000592:	2020      	movs	r0, #32
 8000594:	f003 fa74 	bl	8003a80 <osMessageQueueNew>
 8000598:	4603      	mov	r3, r0
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <main+0x88>)
 800059c:	6013      	str	r3, [r2, #0]
  if (messageQueue == NULL)
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <main+0x88>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d102      	bne.n	80005ac <main+0x44>
  {
  	printf("ERROR: messageQueue could not be created.\r\n");
 80005a6:	4813      	ldr	r0, [pc, #76]	; (80005f4 <main+0x8c>)
 80005a8:	f006 f93e 	bl	8006828 <puts>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  /* creation of receiver0Task */
  receiver0TaskHandle = osThreadNew(StartReceiverTask, NULL, &receiver0Task_attributes);
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <main+0x90>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4812      	ldr	r0, [pc, #72]	; (80005fc <main+0x94>)
 80005b2:	f003 f9b3 	bl	800391c <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a11      	ldr	r2, [pc, #68]	; (8000600 <main+0x98>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of sender1Task */
  sender1TaskHandle = osThreadNew(StartSenderTask, (void *)sender1Tag, &sender1Task_attributes);
 80005bc:	4a11      	ldr	r2, [pc, #68]	; (8000604 <main+0x9c>)
 80005be:	68b9      	ldr	r1, [r7, #8]
 80005c0:	4811      	ldr	r0, [pc, #68]	; (8000608 <main+0xa0>)
 80005c2:	f003 f9ab 	bl	800391c <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a10      	ldr	r2, [pc, #64]	; (800060c <main+0xa4>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of sender0Task */
  sender0TaskHandle = osThreadNew(StartSenderTask, (void *)sender0Tag, &sender0Task_attributes);
 80005cc:	4a10      	ldr	r2, [pc, #64]	; (8000610 <main+0xa8>)
 80005ce:	68f9      	ldr	r1, [r7, #12]
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <main+0xa0>)
 80005d2:	f003 f9a3 	bl	800391c <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <main+0xac>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005dc:	f003 f978 	bl	80038d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  for (;;)
 80005e0:	e7fe      	b.n	80005e0 <main+0x78>
 80005e2:	bf00      	nop
 80005e4:	080076f4 	.word	0x080076f4
 80005e8:	080076fc 	.word	0x080076fc
 80005ec:	08007704 	.word	0x08007704
 80005f0:	2000196c 	.word	0x2000196c
 80005f4:	0800770c 	.word	0x0800770c
 80005f8:	08007810 	.word	0x08007810
 80005fc:	0800086d 	.word	0x0800086d
 8000600:	20001968 	.word	0x20001968
 8000604:	080077ec 	.word	0x080077ec
 8000608:	08000801 	.word	0x08000801
 800060c:	200019f4 	.word	0x200019f4
 8000610:	080077c8 	.word	0x080077c8
 8000614:	20001964 	.word	0x20001964

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0b8      	sub	sp, #224	; 0xe0
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f006 f870 	bl	800670c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2288      	movs	r2, #136	; 0x88
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f006 f862 	bl	800670c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800066e:	230a      	movs	r3, #10
 8000670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000674:	2307      	movs	r3, #7
 8000676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fe38 	bl	8001300 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000696:	f000 f91d 	bl	80008d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fa04 	bl	8001acc <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ca:	f000 f903 	bl	80008d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fc2f 	bl	8001f3c <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006e4:	f000 f8f6 	bl	80008d4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ec:	f000 fdb2 	bl	8001254 <HAL_PWREx_ControlVoltageScaling>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006f6:	f000 f8ed 	bl	80008d4 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	37e0      	adds	r7, #224	; 0xe0
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USART2_UART_Init+0x58>)
 800070a:	4a15      	ldr	r2, [pc, #84]	; (8000760 <MX_USART2_UART_Init+0x5c>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART2_UART_Init+0x58>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000748:	f002 fb86 	bl	8002e58 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f8bf 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20001970 	.word	0x20001970
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_GPIO_Init+0x74>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <MX_GPIO_Init+0x74>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x74>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_GPIO_Init+0x74>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <MX_GPIO_Init+0x74>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_GPIO_Init+0x74>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_GPIO_Init+0x74>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <MX_GPIO_Init+0x74>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_GPIO_Init+0x74>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_GPIO_Init+0x74>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <MX_GPIO_Init+0x74>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_GPIO_Init+0x74>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80007e4:	1d39      	adds	r1, r7, #4
 80007e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ea:	2201      	movs	r2, #1
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <__io_putchar+0x20>)
 80007ee:	f002 fb81 	bl	8002ef4 <HAL_UART_Transmit>
	return ch;
 80007f2:	687b      	ldr	r3, [r7, #4]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20001970 	.word	0x20001970

08000800 <StartSenderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSenderTask */
void StartSenderTask(void *argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	; 0x38
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MSGQUEUE_OBJ_t msg;
  osStatus_t status;
  const char* senderTag = (char *)argument;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	637b      	str	r3, [r7, #52]	; 0x34

  msg.Idx = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  /* Infinite loop */
  for(;;)
  {
		printf("%s\r\n", senderTag);
 8000812:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000814:	4811      	ldr	r0, [pc, #68]	; (800085c <StartSenderTask+0x5c>)
 8000816:	f005 ff81 	bl	800671c <iprintf>

  	//msg.Buf[0] = 0x55U;
  	msg.Idx++;
 800081a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800081e:	3301      	adds	r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  	//status = osMessageQueuePut(messageQueue, &msg, 0U, 0U);
  	status = osMessageQueuePut(messageQueue, &msg, 0U, 0);
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <StartSenderTask+0x60>)
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	f107 010c 	add.w	r1, r7, #12
 800082e:	2300      	movs	r3, #0
 8000830:	2200      	movs	r2, #0
 8000832:	f003 f999 	bl	8003b68 <osMessageQueuePut>
 8000836:	6338      	str	r0, [r7, #48]	; 0x30
  	osThreadYield();
 8000838:	f003 f902 	bl	8003a40 <osThreadYield>
  	if (status == osOK) {
 800083c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800083e:	2b00      	cmp	r3, #0
 8000840:	d107      	bne.n	8000852 <StartSenderTask+0x52>
  		printf("%s sends message: %ld.\r\n", senderTag, (int32_t)msg.Idx);
 8000842:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000846:	461a      	mov	r2, r3
 8000848:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <StartSenderTask+0x64>)
 800084c:	f005 ff66 	bl	800671c <iprintf>
 8000850:	e7df      	b.n	8000812 <StartSenderTask+0x12>
  	}
  	else
  	{
  		printf("Failed to send message.\r\n");
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <StartSenderTask+0x68>)
 8000854:	f005 ffe8 	bl	8006828 <puts>
		printf("%s\r\n", senderTag);
 8000858:	e7db      	b.n	8000812 <StartSenderTask+0x12>
 800085a:	bf00      	nop
 800085c:	08007738 	.word	0x08007738
 8000860:	2000196c 	.word	0x2000196c
 8000864:	08007740 	.word	0x08007740
 8000868:	0800775c 	.word	0x0800775c

0800086c <StartReceiverTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiverTask */
void StartReceiverTask(void *argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  MSGQUEUE_OBJ_t msg;
  osStatus_t status;
  for(;;)
  {
		//printf("RECEIVE\r\n");
  	status = osMessageQueueGet(messageQueue, &msg, NULL, osWaitForever);   // wait for message
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <StartReceiverTask+0x38>)
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	f107 0108 	add.w	r1, r7, #8
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	2200      	movs	r2, #0
 8000882:	f003 f9d1 	bl	8003c28 <osMessageQueueGet>
 8000886:	62f8      	str	r0, [r7, #44]	; 0x2c
  	if (status == osOK) {
 8000888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088a:	2b00      	cmp	r3, #0
 800088c:	d106      	bne.n	800089c <StartReceiverTask+0x30>
  		printf("Message received: %ld.\r\n", (int32_t)msg.Idx);
 800088e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000892:	4619      	mov	r1, r3
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <StartReceiverTask+0x3c>)
 8000896:	f005 ff41 	bl	800671c <iprintf>
 800089a:	e7eb      	b.n	8000874 <StartReceiverTask+0x8>
  	}
  	else
  	{
  		printf("Failed to receive message.\r\n");
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <StartReceiverTask+0x40>)
 800089e:	f005 ffc3 	bl	8006828 <puts>
  	status = osMessageQueueGet(messageQueue, &msg, NULL, osWaitForever);   // wait for message
 80008a2:	e7e7      	b.n	8000874 <StartReceiverTask+0x8>
 80008a4:	2000196c 	.word	0x2000196c
 80008a8:	08007778 	.word	0x08007778
 80008ac:	08007794 	.word	0x08007794

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c2:	f000 fa0d 	bl	8000ce0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40001000 	.word	0x40001000

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_MspInit+0x4c>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <HAL_MspInit+0x4c>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6613      	str	r3, [r2, #96]	; 0x60
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_MspInit+0x4c>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_MspInit+0x4c>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6593      	str	r3, [r2, #88]	; 0x58
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_MspInit+0x4c>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	210f      	movs	r1, #15
 800091a:	f06f 0001 	mvn.w	r0, #1
 800091e:	f000 fab7 	bl	8000e90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a17      	ldr	r2, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x7c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d128      	bne.n	80009a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_UART_MspInit+0x80>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <HAL_UART_MspInit+0x80>)
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	6593      	str	r3, [r2, #88]	; 0x58
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_UART_MspInit+0x80>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_UART_MspInit+0x80>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <HAL_UART_MspInit+0x80>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_UART_MspInit+0x80>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000982:	230c      	movs	r3, #12
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000992:	2307      	movs	r3, #7
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f000 faa0 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2036      	movs	r0, #54	; 0x36
 80009ca:	f000 fa61 	bl	8000e90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ce:	2036      	movs	r0, #54	; 0x36
 80009d0:	f000 fa7a 	bl	8000ec8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <HAL_InitTick+0x9c>)
 80009d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <HAL_InitTick+0x9c>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6593      	str	r3, [r2, #88]	; 0x58
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_InitTick+0x9c>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e4:	f003 0310 	and.w	r3, r3, #16
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ec:	f107 0210 	add.w	r2, r7, #16
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fa0e 	bl	8001e18 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009fc:	f001 f9e0 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 8000a00:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <HAL_InitTick+0xa0>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0c9b      	lsrs	r3, r3, #18
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <HAL_InitTick+0xa8>)
 8000a14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a32:	f001 ff3f 	bl	80028b4 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d104      	bne.n	8000a46 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a3e:	f001 ff9b 	bl	8002978 <HAL_TIM_Base_Start_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3730      	adds	r7, #48	; 0x30
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000
 8000a54:	431bde83 	.word	0x431bde83
 8000a58:	200019f8 	.word	0x200019f8
 8000a5c:	40001000 	.word	0x40001000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <TIM6_DAC_IRQHandler+0x10>)
 8000a92:	f001 ffe1 	bl	8002a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200019f8 	.word	0x200019f8

08000aa0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	e00a      	b.n	8000ac8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ab2:	f3af 8000 	nop.w
 8000ab6:	4601      	mov	r1, r0
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	1c5a      	adds	r2, r3, #1
 8000abc:	60ba      	str	r2, [r7, #8]
 8000abe:	b2ca      	uxtb	r2, r1
 8000ac0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbf0      	blt.n	8000ab2 <_read+0x12>
	}

return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	e009      	b.n	8000b00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fe71 	bl	80007dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3301      	adds	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dbf1      	blt.n	8000aec <_write+0x12>
	}
	return len;
 8000b08:	687b      	ldr	r3, [r7, #4]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_close>:

int _close(int file)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
	return -1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_isatty>:

int _isatty(int file)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f005 fd76 	bl	800669c <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20018000 	.word	0x20018000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	20000090 	.word	0x20000090
 8000be4:	20001a98 	.word	0x20001a98

08000be8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <SystemInit+0x5c>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <SystemInit+0x5c>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <SystemInit+0x60>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <SystemInit+0x60>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <SystemInit+0x60>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <SystemInit+0x60>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <SystemInit+0x60>)
 8000c14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <SystemInit+0x60>)
 8000c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <SystemInit+0x60>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <SystemInit+0x60>)
 8000c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SystemInit+0x60>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	40021000 	.word	0x40021000

08000c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c50:	f7ff ffca 	bl	8000be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c56:	e003      	b.n	8000c60 <LoopCopyDataInit>

08000c58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c5e:	3104      	adds	r1, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c60:	480a      	ldr	r0, [pc, #40]	; (8000c8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c68:	d3f6      	bcc.n	8000c58 <CopyDataInit>
	ldr	r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c6c:	e002      	b.n	8000c74 <LoopFillZerobss>

08000c6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c70:	f842 3b04 	str.w	r3, [r2], #4

08000c74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <LoopForever+0x16>)
	cmp	r2, r3
 8000c76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c78:	d3f9      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f005 fd15 	bl	80066a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7e:	f7ff fc73 	bl	8000568 <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c84:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c88:	08007924 	.word	0x08007924
	ldr	r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c90:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000c94:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000c98:	20001a98 	.word	0x20001a98

08000c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_2_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_Init+0x3c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <HAL_Init+0x3c>)
 8000cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f8df 	bl	8000e7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fe79 	bl	80009b4 <HAL_InitTick>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	e001      	b.n	8000cd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cce:	f7ff fe07 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20001a44 	.word	0x20001a44

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20001a44 	.word	0x20001a44

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff4c 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea2:	f7ff ff61 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ea6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	68b9      	ldr	r1, [r7, #8]
 8000eac:	6978      	ldr	r0, [r7, #20]
 8000eae:	f7ff ffb1 	bl	8000e14 <NVIC_EncodePriority>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff80 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff54 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e17f      	b.n	80011f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8171 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d00b      	beq.n	8000f2c <HAL_GPIO_Init+0x48>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f20:	2b11      	cmp	r3, #17
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b12      	cmp	r3, #18
 8000f2a:	d130      	bne.n	8000f8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f62:	2201      	movs	r2, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	f003 0201 	and.w	r2, r3, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d118      	bne.n	8000fcc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	f003 0201 	and.w	r2, r3, #1
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x128>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b12      	cmp	r3, #18
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	6939      	ldr	r1, [r7, #16]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ac 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <HAL_GPIO_Init+0x330>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	4a5e      	ldr	r2, [pc, #376]	; (8001214 <HAL_GPIO_Init+0x330>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6613      	str	r3, [r2, #96]	; 0x60
 80010a2:	4b5c      	ldr	r3, [pc, #368]	; (8001214 <HAL_GPIO_Init+0x330>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ae:	4a5a      	ldr	r2, [pc, #360]	; (8001218 <HAL_GPIO_Init+0x334>)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x242>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	; (800121c <HAL_GPIO_Init+0x338>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x23e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	; (8001220 <HAL_GPIO_Init+0x33c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x23a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	; (8001224 <HAL_GPIO_Init+0x340>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x236>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <HAL_GPIO_Init+0x344>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x232>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	; (800122c <HAL_GPIO_Init+0x348>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	; (8001230 <HAL_GPIO_Init+0x34c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x22a>
 800110a:	2306      	movs	r3, #6
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800110e:	2307      	movs	r3, #7
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001126:	2300      	movs	r3, #0
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001138:	4937      	ldr	r1, [pc, #220]	; (8001218 <HAL_GPIO_Init+0x334>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HAL_GPIO_Init+0x350>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800116a:	4a32      	ldr	r2, [pc, #200]	; (8001234 <HAL_GPIO_Init+0x350>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <HAL_GPIO_Init+0x350>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <HAL_GPIO_Init+0x350>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <HAL_GPIO_Init+0x350>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011be:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_GPIO_Init+0x350>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_GPIO_Init+0x350>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_GPIO_Init+0x350>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f ae78 	bne.w	8000ef4 <HAL_GPIO_Init+0x10>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800
 8001224:	48000c00 	.word	0x48000c00
 8001228:	48001000 	.word	0x48001000
 800122c:	48001400 	.word	0x48001400
 8001230:	48001800 	.word	0x48001800
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <HAL_PWREx_GetVoltageRange+0x18>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40007000 	.word	0x40007000

08001254 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001262:	d130      	bne.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800126c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001270:	d038      	beq.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800127a:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001280:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2232      	movs	r2, #50	; 0x32
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	0c9b      	lsrs	r3, r3, #18
 8001294:	3301      	adds	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001298:	e002      	b.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3b01      	subs	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ac:	d102      	bne.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f2      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c0:	d110      	bne.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e00f      	b.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d2:	d007      	beq.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40007000 	.word	0x40007000
 80012f8:	20000000 	.word	0x20000000
 80012fc:	431bde83 	.word	0x431bde83

08001300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e3d4      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001312:	4ba1      	ldr	r3, [pc, #644]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800131c:	4b9e      	ldr	r3, [pc, #632]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 80e4 	beq.w	80014fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d007      	beq.n	800134a <HAL_RCC_OscConfig+0x4a>
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	f040 808b 	bne.w	8001458 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2b01      	cmp	r3, #1
 8001346:	f040 8087 	bne.w	8001458 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800134a:	4b93      	ldr	r3, [pc, #588]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x62>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e3ac      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	4b8c      	ldr	r3, [pc, #560]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HAL_RCC_OscConfig+0x7c>
 8001372:	4b89      	ldr	r3, [pc, #548]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800137a:	e005      	b.n	8001388 <HAL_RCC_OscConfig+0x88>
 800137c:	4b86      	ldr	r3, [pc, #536]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 800137e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001388:	4293      	cmp	r3, r2
 800138a:	d223      	bcs.n	80013d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fd73 	bl	8001e7c <RCC_SetFlashLatencyFromMSIRange>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e38d      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013a0:	4b7d      	ldr	r3, [pc, #500]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a7c      	ldr	r2, [pc, #496]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b7a      	ldr	r3, [pc, #488]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4977      	ldr	r1, [pc, #476]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013be:	4b76      	ldr	r3, [pc, #472]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	4972      	ldr	r1, [pc, #456]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
 80013d2:	e025      	b.n	8001420 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d4:	4b70      	ldr	r3, [pc, #448]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a6f      	ldr	r2, [pc, #444]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b6d      	ldr	r3, [pc, #436]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	496a      	ldr	r1, [pc, #424]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f2:	4b69      	ldr	r3, [pc, #420]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	4965      	ldr	r1, [pc, #404]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d109      	bne.n	8001420 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fd33 	bl	8001e7c <RCC_SetFlashLatencyFromMSIRange>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e34d      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001420:	f000 fc36 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001424:	4602      	mov	r2, r0
 8001426:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	495a      	ldr	r1, [pc, #360]	; (800159c <HAL_RCC_OscConfig+0x29c>)
 8001432:	5ccb      	ldrb	r3, [r1, r3]
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
 800143c:	4a58      	ldr	r2, [pc, #352]	; (80015a0 <HAL_RCC_OscConfig+0x2a0>)
 800143e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001440:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <HAL_RCC_OscConfig+0x2a4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fab5 	bl	80009b4 <HAL_InitTick>
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d052      	beq.n	80014fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	e331      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d032      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001460:	4b4d      	ldr	r3, [pc, #308]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a4c      	ldr	r2, [pc, #304]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800146c:	f7ff fc4c 	bl	8000d08 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001474:	f7ff fc48 	bl	8000d08 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e31a      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001486:	4b44      	ldr	r3, [pc, #272]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a40      	ldr	r2, [pc, #256]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001498:	f043 0308 	orr.w	r3, r3, #8
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	493b      	ldr	r1, [pc, #236]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	4936      	ldr	r1, [pc, #216]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	e01a      	b.n	80014fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014c6:	4b34      	ldr	r3, [pc, #208]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a33      	ldr	r2, [pc, #204]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fc19 	bl	8000d08 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014da:	f7ff fc15 	bl	8000d08 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e2e7      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x1da>
 80014f8:	e000      	b.n	80014fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d074      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b08      	cmp	r3, #8
 800150c:	d005      	beq.n	800151a <HAL_RCC_OscConfig+0x21a>
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	2b0c      	cmp	r3, #12
 8001512:	d10e      	bne.n	8001532 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b03      	cmp	r3, #3
 8001518:	d10b      	bne.n	8001532 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d064      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2f0>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d160      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e2c4      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x24a>
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a15      	ldr	r2, [pc, #84]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e01d      	b.n	8001586 <HAL_RCC_OscConfig+0x286>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001552:	d10c      	bne.n	800156e <HAL_RCC_OscConfig+0x26e>
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 800155a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e00b      	b.n	8001586 <HAL_RCC_OscConfig+0x286>
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a06      	ldr	r2, [pc, #24]	; (8001598 <HAL_RCC_OscConfig+0x298>)
 8001580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001584:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d01c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fbbb 	bl	8000d08 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001594:	e011      	b.n	80015ba <HAL_RCC_OscConfig+0x2ba>
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	08007834 	.word	0x08007834
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fbae 	bl	8000d08 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e280      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ba:	4baf      	ldr	r3, [pc, #700]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2a8>
 80015c6:	e014      	b.n	80015f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fb9e 	bl	8000d08 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fb9a 	bl	8000d08 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	; 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e26c      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015e2:	4ba5      	ldr	r3, [pc, #660]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2d0>
 80015ee:	e000      	b.n	80015f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d060      	beq.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b04      	cmp	r3, #4
 8001602:	d005      	beq.n	8001610 <HAL_RCC_OscConfig+0x310>
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2b0c      	cmp	r3, #12
 8001608:	d119      	bne.n	800163e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d116      	bne.n	800163e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001610:	4b99      	ldr	r3, [pc, #612]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_OscConfig+0x328>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e249      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001628:	4b93      	ldr	r3, [pc, #588]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	061b      	lsls	r3, r3, #24
 8001636:	4990      	ldr	r1, [pc, #576]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800163c:	e040      	b.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d023      	beq.n	800168e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001646:	4b8c      	ldr	r3, [pc, #560]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a8b      	ldr	r2, [pc, #556]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fb59 	bl	8000d08 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff fb55 	bl	8000d08 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e227      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800166c:	4b82      	ldr	r3, [pc, #520]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001678:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	061b      	lsls	r3, r3, #24
 8001686:	497c      	ldr	r1, [pc, #496]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
 800168c:	e018      	b.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168e:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a79      	ldr	r2, [pc, #484]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fb35 	bl	8000d08 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff fb31 	bl	8000d08 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e203      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b4:	4b70      	ldr	r3, [pc, #448]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d03c      	beq.n	8001746 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01c      	beq.n	800170e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80016d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016da:	4a67      	ldr	r2, [pc, #412]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fb10 	bl	8000d08 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff fb0c 	bl	8000d08 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e1de      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fe:	4b5e      	ldr	r3, [pc, #376]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ef      	beq.n	80016ec <HAL_RCC_OscConfig+0x3ec>
 800170c:	e01b      	b.n	8001746 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170e:	4b5a      	ldr	r3, [pc, #360]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001714:	4a58      	ldr	r2, [pc, #352]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff faf3 	bl	8000d08 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001726:	f7ff faef 	bl	8000d08 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e1c1      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001738:	4b4f      	ldr	r3, [pc, #316]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800173a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ef      	bne.n	8001726 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80a6 	beq.w	80018a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001758:	4b47      	ldr	r3, [pc, #284]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10d      	bne.n	8001780 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	4b44      	ldr	r3, [pc, #272]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	4a43      	ldr	r2, [pc, #268]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6593      	str	r3, [r2, #88]	; 0x58
 8001770:	4b41      	ldr	r3, [pc, #260]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800177c:	2301      	movs	r3, #1
 800177e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001780:	4b3e      	ldr	r3, [pc, #248]	; (800187c <HAL_RCC_OscConfig+0x57c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d118      	bne.n	80017be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800178c:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_RCC_OscConfig+0x57c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a3a      	ldr	r2, [pc, #232]	; (800187c <HAL_RCC_OscConfig+0x57c>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001796:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001798:	f7ff fab6 	bl	8000d08 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a0:	f7ff fab2 	bl	8000d08 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e184      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b2:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_RCC_OscConfig+0x57c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4d8>
 80017c6:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80017c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017cc:	4a2a      	ldr	r2, [pc, #168]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d6:	e024      	b.n	8001822 <HAL_RCC_OscConfig+0x522>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d110      	bne.n	8001802 <HAL_RCC_OscConfig+0x502>
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	4a24      	ldr	r2, [pc, #144]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	4a20      	ldr	r2, [pc, #128]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001800:	e00f      	b.n	8001822 <HAL_RCC_OscConfig+0x522>
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800181a:	f023 0304 	bic.w	r3, r3, #4
 800181e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d016      	beq.n	8001858 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff fa6d 	bl	8000d08 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fa69 	bl	8000d08 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e139      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0ed      	beq.n	8001832 <HAL_RCC_OscConfig+0x532>
 8001856:	e01a      	b.n	800188e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff fa56 	bl	8000d08 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800185e:	e00f      	b.n	8001880 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff fa52 	bl	8000d08 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d906      	bls.n	8001880 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e122      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001880:	4b90      	ldr	r3, [pc, #576]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1e8      	bne.n	8001860 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800188e:	7ffb      	ldrb	r3, [r7, #31]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001894:	4b8b      	ldr	r3, [pc, #556]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001898:	4a8a      	ldr	r2, [pc, #552]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 800189a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8108 	beq.w	8001aba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	f040 80d0 	bne.w	8001a54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018b4:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d130      	bne.n	800192a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	3b01      	subs	r3, #1
 80018d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d127      	bne.n	800192a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d11f      	bne.n	800192a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018f4:	2a07      	cmp	r2, #7
 80018f6:	bf14      	ite	ne
 80018f8:	2201      	movne	r2, #1
 80018fa:	2200      	moveq	r2, #0
 80018fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fe:	4293      	cmp	r3, r2
 8001900:	d113      	bne.n	800192a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d109      	bne.n	800192a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	3b01      	subs	r3, #1
 8001924:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d06e      	beq.n	8001a08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b0c      	cmp	r3, #12
 800192e:	d069      	beq.n	8001a04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001930:	4b64      	ldr	r3, [pc, #400]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800193c:	4b61      	ldr	r3, [pc, #388]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0b7      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800194c:	4b5d      	ldr	r3, [pc, #372]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a5c      	ldr	r2, [pc, #368]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001958:	f7ff f9d6 	bl	8000d08 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff f9d2 	bl	8000d08 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e0a4      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001972:	4b54      	ldr	r3, [pc, #336]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197e:	4b51      	ldr	r3, [pc, #324]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <HAL_RCC_OscConfig+0x7c8>)
 8001984:	4013      	ands	r3, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800198e:	3a01      	subs	r2, #1
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001998:	0212      	lsls	r2, r2, #8
 800199a:	4311      	orrs	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019a0:	0852      	lsrs	r2, r2, #1
 80019a2:	3a01      	subs	r2, #1
 80019a4:	0552      	lsls	r2, r2, #21
 80019a6:	4311      	orrs	r1, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019ac:	0852      	lsrs	r2, r2, #1
 80019ae:	3a01      	subs	r2, #1
 80019b0:	0652      	lsls	r2, r2, #25
 80019b2:	4311      	orrs	r1, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019b8:	0912      	lsrs	r2, r2, #4
 80019ba:	0452      	lsls	r2, r2, #17
 80019bc:	430a      	orrs	r2, r1
 80019be:	4941      	ldr	r1, [pc, #260]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019c4:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a3e      	ldr	r2, [pc, #248]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d0:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4a3b      	ldr	r2, [pc, #236]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019dc:	f7ff f994 	bl	8000d08 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f990 	bl	8000d08 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e062      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a02:	e05a      	b.n	8001aba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e059      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a08:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d152      	bne.n	8001aba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a2a      	ldr	r2, [pc, #168]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a20:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4a27      	ldr	r2, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a2c:	f7ff f96c 	bl	8000d08 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff f968 	bl	8000d08 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e03a      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x734>
 8001a52:	e032      	b.n	8001aba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d02d      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a78:	f023 0303 	bic.w	r3, r3, #3
 8001a7c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001a84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f93b 	bl	8000d08 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff f937 	bl	8000d08 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e009      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_RCC_OscConfig+0x7c4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x796>
 8001ab4:	e001      	b.n	8001aba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	f99d808c 	.word	0xf99d808c

08001acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0c8      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_RCC_ClockConfig+0x1b0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d910      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCC_ClockConfig+0x1b0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 0207 	bic.w	r2, r3, #7
 8001af6:	4961      	ldr	r1, [pc, #388]	; (8001c7c <HAL_RCC_ClockConfig+0x1b0>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <HAL_RCC_ClockConfig+0x1b0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0b0      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d04c      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b24:	4b56      	ldr	r3, [pc, #344]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d121      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e09e      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d115      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e092      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b54:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e086      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b64:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e07e      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b74:	4b42      	ldr	r3, [pc, #264]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 0203 	bic.w	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	493f      	ldr	r1, [pc, #252]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b86:	f7ff f8bf 	bl	8000d08 <HAL_GetTick>
 8001b8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8e:	f7ff f8bb 	bl	8000d08 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e066      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba4:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 020c 	and.w	r2, r3, #12
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d1eb      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	492c      	ldr	r1, [pc, #176]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_RCC_ClockConfig+0x1b0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d210      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_RCC_ClockConfig+0x1b0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0207 	bic.w	r2, r3, #7
 8001bea:	4924      	ldr	r1, [pc, #144]	; (8001c7c <HAL_RCC_ClockConfig+0x1b0>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_RCC_ClockConfig+0x1b0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e036      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4918      	ldr	r1, [pc, #96]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4910      	ldr	r1, [pc, #64]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c42:	f000 f825 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_RCC_ClockConfig+0x1b4>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	490c      	ldr	r1, [pc, #48]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001c54:	5ccb      	ldrb	r3, [r1, r3]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fea4 	bl	80009b4 <HAL_InitTick>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c70:	7afb      	ldrb	r3, [r7, #11]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08007834 	.word	0x08007834
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9e:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d121      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d11e      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cc4:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e005      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10d      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d102      	bne.n	8001d0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d08:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	e004      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d134      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d003      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0xac>
 8001d34:	e005      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d38:	617b      	str	r3, [r7, #20]
      break;
 8001d3a:	e005      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d3e:	617b      	str	r3, [r7, #20]
      break;
 8001d40:	e002      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	617b      	str	r3, [r7, #20]
      break;
 8001d46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	3301      	adds	r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	fb02 f203 	mul.w	r2, r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	0e5b      	lsrs	r3, r3, #25
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d88:	69bb      	ldr	r3, [r7, #24]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	0800784c 	.word	0x0800784c
 8001da0:	00f42400 	.word	0x00f42400
 8001da4:	007a1200 	.word	0x007a1200

08001da8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dc4:	f7ff fff0 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4904      	ldr	r1, [pc, #16]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	08007844 	.word	0x08007844

08001dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001df0:	f7ff ffda 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0adb      	lsrs	r3, r3, #11
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4904      	ldr	r1, [pc, #16]	; (8001e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08007844 	.word	0x08007844

08001e18 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	220f      	movs	r2, #15
 8001e26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <HAL_RCC_GetClockConfig+0x5c>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_RCC_GetClockConfig+0x5c>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	08db      	lsrs	r3, r3, #3
 8001e52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <HAL_RCC_GetClockConfig+0x60>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0207 	and.w	r2, r3, #7
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	601a      	str	r2, [r3, #0]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40022000 	.word	0x40022000

08001e7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e88:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e94:	f7ff f9d0 	bl	8001238 <HAL_PWREx_GetVoltageRange>
 8001e98:	6178      	str	r0, [r7, #20]
 8001e9a:	e014      	b.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	4a24      	ldr	r2, [pc, #144]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001eb4:	f7ff f9c0 	bl	8001238 <HAL_PWREx_GetVoltageRange>
 8001eb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eba:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ecc:	d10b      	bne.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b80      	cmp	r3, #128	; 0x80
 8001ed2:	d919      	bls.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ed8:	d902      	bls.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eda:	2302      	movs	r3, #2
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	e013      	b.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	e010      	b.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b80      	cmp	r3, #128	; 0x80
 8001eea:	d902      	bls.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001eec:	2303      	movs	r3, #3
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	e00a      	b.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b80      	cmp	r3, #128	; 0x80
 8001ef6:	d102      	bne.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ef8:	2302      	movs	r3, #2
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e004      	b.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b70      	cmp	r3, #112	; 0x70
 8001f02:	d101      	bne.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f04:	2301      	movs	r3, #1
 8001f06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 0207 	bic.w	r2, r3, #7
 8001f10:	4909      	ldr	r1, [pc, #36]	; (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40022000 	.word	0x40022000

08001f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f44:	2300      	movs	r3, #0
 8001f46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f48:	2300      	movs	r3, #0
 8001f4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d041      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f60:	d02a      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f66:	d824      	bhi.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f6c:	d008      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f72:	d81e      	bhi.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00a      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f7e:	e018      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f80:	4b86      	ldr	r3, [pc, #536]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a85      	ldr	r2, [pc, #532]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f8c:	e015      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fabb 	bl	8002510 <RCCEx_PLLSAI1_Config>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f9e:	e00c      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3320      	adds	r3, #32
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fba6 	bl	80026f8 <RCCEx_PLLSAI2_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb0:	e003      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fb6:	e000      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fba:	7cfb      	ldrb	r3, [r7, #19]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fc0:	4b76      	ldr	r3, [pc, #472]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fce:	4973      	ldr	r1, [pc, #460]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fd6:	e001      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d041      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ff0:	d02a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ff2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ff6:	d824      	bhi.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ff8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ffc:	d008      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ffe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002002:	d81e      	bhi.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00a      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200c:	d010      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800200e:	e018      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002010:	4b62      	ldr	r3, [pc, #392]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4a61      	ldr	r2, [pc, #388]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800201c:	e015      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3304      	adds	r3, #4
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fa73 	bl	8002510 <RCCEx_PLLSAI1_Config>
 800202a:	4603      	mov	r3, r0
 800202c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800202e:	e00c      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3320      	adds	r3, #32
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fb5e 	bl	80026f8 <RCCEx_PLLSAI2_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002040:	e003      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	74fb      	strb	r3, [r7, #19]
      break;
 8002046:	e000      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10b      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002050:	4b52      	ldr	r3, [pc, #328]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800205e:	494f      	ldr	r1, [pc, #316]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002066:	e001      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80a0 	beq.w	80021ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800207e:	4b47      	ldr	r3, [pc, #284]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800208e:	2300      	movs	r3, #0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00d      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002094:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	4a40      	ldr	r2, [pc, #256]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209e:	6593      	str	r3, [r2, #88]	; 0x58
 80020a0:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ac:	2301      	movs	r3, #1
 80020ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b0:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a3a      	ldr	r2, [pc, #232]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020bc:	f7fe fe24 	bl	8000d08 <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020c2:	e009      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c4:	f7fe fe20 	bl	8000d08 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d902      	bls.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	74fb      	strb	r3, [r7, #19]
        break;
 80020d6:	e005      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ef      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d15c      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01f      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	429a      	cmp	r2, r3
 8002106:	d019      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002108:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002112:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	4a20      	ldr	r2, [pc, #128]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002134:	4a19      	ldr	r2, [pc, #100]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7fe fddf 	bl	8000d08 <HAL_GetTick>
 800214a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214c:	e00b      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe fddb 	bl	8000d08 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d902      	bls.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	74fb      	strb	r3, [r7, #19]
            break;
 8002164:	e006      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ec      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800218a:	4904      	ldr	r1, [pc, #16]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002192:	e009      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
 8002198:	e006      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a8:	7c7b      	ldrb	r3, [r7, #17]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4b9e      	ldr	r3, [pc, #632]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	4a9d      	ldr	r2, [pc, #628]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021c6:	4b98      	ldr	r3, [pc, #608]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021cc:	f023 0203 	bic.w	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d4:	4994      	ldr	r1, [pc, #592]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021e8:	4b8f      	ldr	r3, [pc, #572]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f023 020c 	bic.w	r2, r3, #12
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	498c      	ldr	r1, [pc, #560]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800220a:	4b87      	ldr	r3, [pc, #540]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	4983      	ldr	r1, [pc, #524]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800222c:	4b7e      	ldr	r3, [pc, #504]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	497b      	ldr	r1, [pc, #492]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800224e:	4b76      	ldr	r3, [pc, #472]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225c:	4972      	ldr	r1, [pc, #456]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002270:	4b6d      	ldr	r3, [pc, #436]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	496a      	ldr	r1, [pc, #424]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002292:	4b65      	ldr	r3, [pc, #404]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	4961      	ldr	r1, [pc, #388]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022b4:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c2:	4959      	ldr	r1, [pc, #356]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d6:	4b54      	ldr	r3, [pc, #336]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e4:	4950      	ldr	r1, [pc, #320]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022f8:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	4948      	ldr	r1, [pc, #288]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	493f      	ldr	r1, [pc, #252]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d028      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800233c:	4b3a      	ldr	r3, [pc, #232]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800234a:	4937      	ldr	r1, [pc, #220]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800235a:	d106      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a31      	ldr	r2, [pc, #196]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002366:	60d3      	str	r3, [r2, #12]
 8002368:	e011      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800236e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002372:	d10c      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3304      	adds	r3, #4
 8002378:	2101      	movs	r1, #1
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f8c8 	bl	8002510 <RCCEx_PLLSAI1_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d028      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	491f      	ldr	r1, [pc, #124]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b8:	d106      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4a1a      	ldr	r2, [pc, #104]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c4:	60d3      	str	r3, [r2, #12]
 80023c6:	e011      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2101      	movs	r1, #1
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f899 	bl	8002510 <RCCEx_PLLSAI1_Config>
 80023de:	4603      	mov	r3, r0
 80023e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d02b      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002416:	d109      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a02      	ldr	r2, [pc, #8]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002422:	60d3      	str	r3, [r2, #12]
 8002424:	e014      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002430:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002434:	d10c      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	2101      	movs	r1, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f867 	bl	8002510 <RCCEx_PLLSAI1_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002446:	7cfb      	ldrb	r3, [r7, #19]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02f      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800246a:	4928      	ldr	r1, [pc, #160]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800247a:	d10d      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	2102      	movs	r1, #2
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f844 	bl	8002510 <RCCEx_PLLSAI1_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d014      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	74bb      	strb	r3, [r7, #18]
 8002496:	e011      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800249c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3320      	adds	r3, #32
 80024a6:	2102      	movs	r1, #2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f925 	bl	80026f8 <RCCEx_PLLSAI2_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024d6:	490d      	ldr	r1, [pc, #52]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00b      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024fa:	4904      	ldr	r1, [pc, #16]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002502:	7cbb      	ldrb	r3, [r7, #18]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000

08002510 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800251e:	4b75      	ldr	r3, [pc, #468]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d018      	beq.n	800255c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800252a:	4b72      	ldr	r3, [pc, #456]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0203 	and.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d10d      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
       ||
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002542:	4b6c      	ldr	r3, [pc, #432]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
       ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d047      	beq.n	80025e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e044      	b.n	80025e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d018      	beq.n	8002596 <RCCEx_PLLSAI1_Config+0x86>
 8002564:	2b03      	cmp	r3, #3
 8002566:	d825      	bhi.n	80025b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002568:	2b01      	cmp	r3, #1
 800256a:	d002      	beq.n	8002572 <RCCEx_PLLSAI1_Config+0x62>
 800256c:	2b02      	cmp	r3, #2
 800256e:	d009      	beq.n	8002584 <RCCEx_PLLSAI1_Config+0x74>
 8002570:	e020      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002572:	4b60      	ldr	r3, [pc, #384]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11d      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002582:	e01a      	b.n	80025ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002584:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d116      	bne.n	80025be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002594:	e013      	b.n	80025be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002596:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025a2:	4b54      	ldr	r3, [pc, #336]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025b2:	e006      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      break;
 80025b8:	e004      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ba:	bf00      	nop
 80025bc:	e002      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025be:	bf00      	nop
 80025c0:	e000      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	430b      	orrs	r3, r1
 80025e0:	4944      	ldr	r1, [pc, #272]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d17d      	bne.n	80026e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025ec:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a40      	ldr	r2, [pc, #256]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f8:	f7fe fb86 	bl	8000d08 <HAL_GetTick>
 80025fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025fe:	e009      	b.n	8002614 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002600:	f7fe fb82 	bl	8000d08 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d902      	bls.n	8002614 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	73fb      	strb	r3, [r7, #15]
        break;
 8002612:	e005      	b.n	8002620 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002614:	4b37      	ldr	r3, [pc, #220]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ef      	bne.n	8002600 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d160      	bne.n	80026e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d111      	bne.n	8002650 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800262c:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6892      	ldr	r2, [r2, #8]
 800263c:	0211      	lsls	r1, r2, #8
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	0912      	lsrs	r2, r2, #4
 8002644:	0452      	lsls	r2, r2, #17
 8002646:	430a      	orrs	r2, r1
 8002648:	492a      	ldr	r1, [pc, #168]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	610b      	str	r3, [r1, #16]
 800264e:	e027      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d112      	bne.n	800267c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002656:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800265e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6892      	ldr	r2, [r2, #8]
 8002666:	0211      	lsls	r1, r2, #8
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6912      	ldr	r2, [r2, #16]
 800266c:	0852      	lsrs	r2, r2, #1
 800266e:	3a01      	subs	r2, #1
 8002670:	0552      	lsls	r2, r2, #21
 8002672:	430a      	orrs	r2, r1
 8002674:	491f      	ldr	r1, [pc, #124]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	610b      	str	r3, [r1, #16]
 800267a:	e011      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002684:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6892      	ldr	r2, [r2, #8]
 800268c:	0211      	lsls	r1, r2, #8
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6952      	ldr	r2, [r2, #20]
 8002692:	0852      	lsrs	r2, r2, #1
 8002694:	3a01      	subs	r2, #1
 8002696:	0652      	lsls	r2, r2, #25
 8002698:	430a      	orrs	r2, r1
 800269a:	4916      	ldr	r1, [pc, #88]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe fb2c 	bl	8000d08 <HAL_GetTick>
 80026b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026b2:	e009      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b4:	f7fe fb28 	bl	8000d08 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d902      	bls.n	80026c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	73fb      	strb	r3, [r7, #15]
          break;
 80026c6:	e005      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ef      	beq.n	80026b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	4904      	ldr	r1, [pc, #16]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000

080026f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002706:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d018      	beq.n	8002744 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002712:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0203 	and.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d10d      	bne.n	800273e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
       ||
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800272a:	4b61      	ldr	r3, [pc, #388]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
       ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d047      	beq.n	80027ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	e044      	b.n	80027ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d018      	beq.n	800277e <RCCEx_PLLSAI2_Config+0x86>
 800274c:	2b03      	cmp	r3, #3
 800274e:	d825      	bhi.n	800279c <RCCEx_PLLSAI2_Config+0xa4>
 8002750:	2b01      	cmp	r3, #1
 8002752:	d002      	beq.n	800275a <RCCEx_PLLSAI2_Config+0x62>
 8002754:	2b02      	cmp	r3, #2
 8002756:	d009      	beq.n	800276c <RCCEx_PLLSAI2_Config+0x74>
 8002758:	e020      	b.n	800279c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800275a:	4b55      	ldr	r3, [pc, #340]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11d      	bne.n	80027a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276a:	e01a      	b.n	80027a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800276c:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d116      	bne.n	80027a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e013      	b.n	80027a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800277e:	4b4c      	ldr	r3, [pc, #304]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10f      	bne.n	80027aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800278a:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800279a:	e006      	b.n	80027aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      break;
 80027a0:	e004      	b.n	80027ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027a2:	bf00      	nop
 80027a4:	e002      	b.n	80027ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027a6:	bf00      	nop
 80027a8:	e000      	b.n	80027ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027b2:	4b3f      	ldr	r3, [pc, #252]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6819      	ldr	r1, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	430b      	orrs	r3, r1
 80027c8:	4939      	ldr	r1, [pc, #228]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d167      	bne.n	80028a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a35      	ldr	r2, [pc, #212]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e0:	f7fe fa92 	bl	8000d08 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027e6:	e009      	b.n	80027fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027e8:	f7fe fa8e 	bl	8000d08 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d902      	bls.n	80027fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	73fb      	strb	r3, [r7, #15]
        break;
 80027fa:	e005      	b.n	8002808 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027fc:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ef      	bne.n	80027e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d14a      	bne.n	80028a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d111      	bne.n	8002838 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002814:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800281c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6892      	ldr	r2, [r2, #8]
 8002824:	0211      	lsls	r1, r2, #8
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68d2      	ldr	r2, [r2, #12]
 800282a:	0912      	lsrs	r2, r2, #4
 800282c:	0452      	lsls	r2, r2, #17
 800282e:	430a      	orrs	r2, r1
 8002830:	491f      	ldr	r1, [pc, #124]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002832:	4313      	orrs	r3, r2
 8002834:	614b      	str	r3, [r1, #20]
 8002836:	e011      	b.n	800285c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002840:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6892      	ldr	r2, [r2, #8]
 8002848:	0211      	lsls	r1, r2, #8
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6912      	ldr	r2, [r2, #16]
 800284e:	0852      	lsrs	r2, r2, #1
 8002850:	3a01      	subs	r2, #1
 8002852:	0652      	lsls	r2, r2, #25
 8002854:	430a      	orrs	r2, r1
 8002856:	4916      	ldr	r1, [pc, #88]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002866:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7fe fa4e 	bl	8000d08 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800286e:	e009      	b.n	8002884 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002870:	f7fe fa4a 	bl	8000d08 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d902      	bls.n	8002884 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	73fb      	strb	r3, [r7, #15]
          break;
 8002882:	e005      	b.n	8002890 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ef      	beq.n	8002870 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	4904      	ldr	r1, [pc, #16]	; (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e049      	b.n	800295a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f841 	bl	8002962 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f000 f9f8 	bl	8002ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	d001      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e04f      	b.n	8002a30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <HAL_TIM_Base_Start_IT+0xc4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01d      	beq.n	80029ee <HAL_TIM_Base_Start_IT+0x76>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ba:	d018      	beq.n	80029ee <HAL_TIM_Base_Start_IT+0x76>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <HAL_TIM_Base_Start_IT+0xc8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <HAL_TIM_Base_Start_IT+0x76>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <HAL_TIM_Base_Start_IT+0xcc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00e      	beq.n	80029ee <HAL_TIM_Base_Start_IT+0x76>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_TIM_Base_Start_IT+0xd0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d009      	beq.n	80029ee <HAL_TIM_Base_Start_IT+0x76>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_TIM_Base_Start_IT+0xd4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d004      	beq.n	80029ee <HAL_TIM_Base_Start_IT+0x76>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_TIM_Base_Start_IT+0xd8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d115      	bne.n	8002a1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_TIM_Base_Start_IT+0xdc>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b06      	cmp	r3, #6
 80029fe:	d015      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0xb4>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a06:	d011      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a18:	e008      	b.n	8002a2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	e000      	b.n	8002a2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800
 8002a48:	40000c00 	.word	0x40000c00
 8002a4c:	40013400 	.word	0x40013400
 8002a50:	40014000 	.word	0x40014000
 8002a54:	00010007 	.word	0x00010007

08002a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d122      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0202 	mvn.w	r2, #2
 8002a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f905 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f8f7 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f908 	bl	8002cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0204 	mvn.w	r2, #4
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8db 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8cd 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f8de 	bl	8002cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0208 	mvn.w	r2, #8
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2204      	movs	r2, #4
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8b1 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8a3 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8b4 	bl	8002cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0210 	mvn.w	r2, #16
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2208      	movs	r2, #8
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f887 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f879 	bl	8002c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f88a 	bl	8002cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d10e      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0201 	mvn.w	r2, #1
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fd fe6a 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b80      	cmp	r3, #128	; 0x80
 8002be8:	d10e      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b80      	cmp	r3, #128	; 0x80
 8002bf6:	d107      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f914 	bl	8002e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c16:	d10e      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d107      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f907 	bl	8002e44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b40      	cmp	r3, #64	; 0x40
 8002c42:	d10e      	bne.n	8002c62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d107      	bne.n	8002c62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f838 	bl	8002cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d10e      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d107      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f06f 0220 	mvn.w	r2, #32
 8002c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f8c7 	bl	8002e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a40      	ldr	r2, [pc, #256]	; (8002dfc <TIM_Base_SetConfig+0x114>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d06:	d00f      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a3d      	ldr	r2, [pc, #244]	; (8002e00 <TIM_Base_SetConfig+0x118>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00b      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a3c      	ldr	r2, [pc, #240]	; (8002e04 <TIM_Base_SetConfig+0x11c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d007      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3b      	ldr	r2, [pc, #236]	; (8002e08 <TIM_Base_SetConfig+0x120>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <TIM_Base_SetConfig+0x124>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d108      	bne.n	8002d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a2f      	ldr	r2, [pc, #188]	; (8002dfc <TIM_Base_SetConfig+0x114>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01f      	beq.n	8002d82 <TIM_Base_SetConfig+0x9a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d48:	d01b      	beq.n	8002d82 <TIM_Base_SetConfig+0x9a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2c      	ldr	r2, [pc, #176]	; (8002e00 <TIM_Base_SetConfig+0x118>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d017      	beq.n	8002d82 <TIM_Base_SetConfig+0x9a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a2b      	ldr	r2, [pc, #172]	; (8002e04 <TIM_Base_SetConfig+0x11c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <TIM_Base_SetConfig+0x9a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a2a      	ldr	r2, [pc, #168]	; (8002e08 <TIM_Base_SetConfig+0x120>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00f      	beq.n	8002d82 <TIM_Base_SetConfig+0x9a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a29      	ldr	r2, [pc, #164]	; (8002e0c <TIM_Base_SetConfig+0x124>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00b      	beq.n	8002d82 <TIM_Base_SetConfig+0x9a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a28      	ldr	r2, [pc, #160]	; (8002e10 <TIM_Base_SetConfig+0x128>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <TIM_Base_SetConfig+0x9a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <TIM_Base_SetConfig+0x12c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d003      	beq.n	8002d82 <TIM_Base_SetConfig+0x9a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <TIM_Base_SetConfig+0x130>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d108      	bne.n	8002d94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <TIM_Base_SetConfig+0x114>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00f      	beq.n	8002de0 <TIM_Base_SetConfig+0xf8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <TIM_Base_SetConfig+0x124>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00b      	beq.n	8002de0 <TIM_Base_SetConfig+0xf8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <TIM_Base_SetConfig+0x128>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d007      	beq.n	8002de0 <TIM_Base_SetConfig+0xf8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <TIM_Base_SetConfig+0x12c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_Base_SetConfig+0xf8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a0f      	ldr	r2, [pc, #60]	; (8002e18 <TIM_Base_SetConfig+0x130>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d103      	bne.n	8002de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	615a      	str	r2, [r3, #20]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800
 8002e08:	40000c00 	.word	0x40000c00
 8002e0c:	40013400 	.word	0x40013400
 8002e10:	40014000 	.word	0x40014000
 8002e14:	40014400 	.word	0x40014400
 8002e18:	40014800 	.word	0x40014800

08002e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e040      	b.n	8002eec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fd58 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f8c0 	bl	800301c <UART_SetConfig>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e022      	b.n	8002eec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fb3e 	bl	8003530 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fbc5 	bl	8003674 <UART_CheckIdleState>
 8002eea:	4603      	mov	r3, r0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	; 0x28
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	f040 8082 	bne.w	8003012 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_UART_Transmit+0x26>
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e07a      	b.n	8003014 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_UART_Transmit+0x38>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e073      	b.n	8003014 <HAL_UART_Transmit+0x120>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2221      	movs	r2, #33	; 0x21
 8002f40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f42:	f7fd fee1 	bl	8000d08 <HAL_GetTick>
 8002f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	88fa      	ldrh	r2, [r7, #6]
 8002f4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f60:	d108      	bne.n	8002f74 <HAL_UART_Transmit+0x80>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d104      	bne.n	8002f74 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	e003      	b.n	8002f7c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f84:	e02d      	b.n	8002fe2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fbb8 	bl	8003706 <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e039      	b.n	8003014 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	3302      	adds	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e008      	b.n	8002fd0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	b292      	uxth	r2, r2
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1cb      	bne.n	8002f86 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2140      	movs	r1, #64	; 0x40
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fb84 	bl	8003706 <UART_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e005      	b.n	8003014 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4313      	orrs	r3, r2
 800303e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4bad      	ldr	r3, [pc, #692]	; (80032fc <UART_SetConfig+0x2e0>)
 8003048:	4013      	ands	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	69f9      	ldr	r1, [r7, #28]
 8003050:	430b      	orrs	r3, r1
 8003052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4aa2      	ldr	r2, [pc, #648]	; (8003300 <UART_SetConfig+0x2e4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	4313      	orrs	r3, r2
 8003082:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a99      	ldr	r2, [pc, #612]	; (8003304 <UART_SetConfig+0x2e8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d121      	bne.n	80030e6 <UART_SetConfig+0xca>
 80030a2:	4b99      	ldr	r3, [pc, #612]	; (8003308 <UART_SetConfig+0x2ec>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d817      	bhi.n	80030e0 <UART_SetConfig+0xc4>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UART_SetConfig+0x9c>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030d5 	.word	0x080030d5
 80030c0:	080030cf 	.word	0x080030cf
 80030c4:	080030db 	.word	0x080030db
 80030c8:	2301      	movs	r3, #1
 80030ca:	76fb      	strb	r3, [r7, #27]
 80030cc:	e0e7      	b.n	800329e <UART_SetConfig+0x282>
 80030ce:	2302      	movs	r3, #2
 80030d0:	76fb      	strb	r3, [r7, #27]
 80030d2:	e0e4      	b.n	800329e <UART_SetConfig+0x282>
 80030d4:	2304      	movs	r3, #4
 80030d6:	76fb      	strb	r3, [r7, #27]
 80030d8:	e0e1      	b.n	800329e <UART_SetConfig+0x282>
 80030da:	2308      	movs	r3, #8
 80030dc:	76fb      	strb	r3, [r7, #27]
 80030de:	e0de      	b.n	800329e <UART_SetConfig+0x282>
 80030e0:	2310      	movs	r3, #16
 80030e2:	76fb      	strb	r3, [r7, #27]
 80030e4:	e0db      	b.n	800329e <UART_SetConfig+0x282>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a88      	ldr	r2, [pc, #544]	; (800330c <UART_SetConfig+0x2f0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d132      	bne.n	8003156 <UART_SetConfig+0x13a>
 80030f0:	4b85      	ldr	r3, [pc, #532]	; (8003308 <UART_SetConfig+0x2ec>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d828      	bhi.n	8003150 <UART_SetConfig+0x134>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <UART_SetConfig+0xe8>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003139 	.word	0x08003139
 8003108:	08003151 	.word	0x08003151
 800310c:	08003151 	.word	0x08003151
 8003110:	08003151 	.word	0x08003151
 8003114:	08003145 	.word	0x08003145
 8003118:	08003151 	.word	0x08003151
 800311c:	08003151 	.word	0x08003151
 8003120:	08003151 	.word	0x08003151
 8003124:	0800313f 	.word	0x0800313f
 8003128:	08003151 	.word	0x08003151
 800312c:	08003151 	.word	0x08003151
 8003130:	08003151 	.word	0x08003151
 8003134:	0800314b 	.word	0x0800314b
 8003138:	2300      	movs	r3, #0
 800313a:	76fb      	strb	r3, [r7, #27]
 800313c:	e0af      	b.n	800329e <UART_SetConfig+0x282>
 800313e:	2302      	movs	r3, #2
 8003140:	76fb      	strb	r3, [r7, #27]
 8003142:	e0ac      	b.n	800329e <UART_SetConfig+0x282>
 8003144:	2304      	movs	r3, #4
 8003146:	76fb      	strb	r3, [r7, #27]
 8003148:	e0a9      	b.n	800329e <UART_SetConfig+0x282>
 800314a:	2308      	movs	r3, #8
 800314c:	76fb      	strb	r3, [r7, #27]
 800314e:	e0a6      	b.n	800329e <UART_SetConfig+0x282>
 8003150:	2310      	movs	r3, #16
 8003152:	76fb      	strb	r3, [r7, #27]
 8003154:	e0a3      	b.n	800329e <UART_SetConfig+0x282>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6d      	ldr	r2, [pc, #436]	; (8003310 <UART_SetConfig+0x2f4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d120      	bne.n	80031a2 <UART_SetConfig+0x186>
 8003160:	4b69      	ldr	r3, [pc, #420]	; (8003308 <UART_SetConfig+0x2ec>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800316a:	2b30      	cmp	r3, #48	; 0x30
 800316c:	d013      	beq.n	8003196 <UART_SetConfig+0x17a>
 800316e:	2b30      	cmp	r3, #48	; 0x30
 8003170:	d814      	bhi.n	800319c <UART_SetConfig+0x180>
 8003172:	2b20      	cmp	r3, #32
 8003174:	d009      	beq.n	800318a <UART_SetConfig+0x16e>
 8003176:	2b20      	cmp	r3, #32
 8003178:	d810      	bhi.n	800319c <UART_SetConfig+0x180>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <UART_SetConfig+0x168>
 800317e:	2b10      	cmp	r3, #16
 8003180:	d006      	beq.n	8003190 <UART_SetConfig+0x174>
 8003182:	e00b      	b.n	800319c <UART_SetConfig+0x180>
 8003184:	2300      	movs	r3, #0
 8003186:	76fb      	strb	r3, [r7, #27]
 8003188:	e089      	b.n	800329e <UART_SetConfig+0x282>
 800318a:	2302      	movs	r3, #2
 800318c:	76fb      	strb	r3, [r7, #27]
 800318e:	e086      	b.n	800329e <UART_SetConfig+0x282>
 8003190:	2304      	movs	r3, #4
 8003192:	76fb      	strb	r3, [r7, #27]
 8003194:	e083      	b.n	800329e <UART_SetConfig+0x282>
 8003196:	2308      	movs	r3, #8
 8003198:	76fb      	strb	r3, [r7, #27]
 800319a:	e080      	b.n	800329e <UART_SetConfig+0x282>
 800319c:	2310      	movs	r3, #16
 800319e:	76fb      	strb	r3, [r7, #27]
 80031a0:	e07d      	b.n	800329e <UART_SetConfig+0x282>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a5b      	ldr	r2, [pc, #364]	; (8003314 <UART_SetConfig+0x2f8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d120      	bne.n	80031ee <UART_SetConfig+0x1d2>
 80031ac:	4b56      	ldr	r3, [pc, #344]	; (8003308 <UART_SetConfig+0x2ec>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031b6:	2bc0      	cmp	r3, #192	; 0xc0
 80031b8:	d013      	beq.n	80031e2 <UART_SetConfig+0x1c6>
 80031ba:	2bc0      	cmp	r3, #192	; 0xc0
 80031bc:	d814      	bhi.n	80031e8 <UART_SetConfig+0x1cc>
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d009      	beq.n	80031d6 <UART_SetConfig+0x1ba>
 80031c2:	2b80      	cmp	r3, #128	; 0x80
 80031c4:	d810      	bhi.n	80031e8 <UART_SetConfig+0x1cc>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <UART_SetConfig+0x1b4>
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d006      	beq.n	80031dc <UART_SetConfig+0x1c0>
 80031ce:	e00b      	b.n	80031e8 <UART_SetConfig+0x1cc>
 80031d0:	2300      	movs	r3, #0
 80031d2:	76fb      	strb	r3, [r7, #27]
 80031d4:	e063      	b.n	800329e <UART_SetConfig+0x282>
 80031d6:	2302      	movs	r3, #2
 80031d8:	76fb      	strb	r3, [r7, #27]
 80031da:	e060      	b.n	800329e <UART_SetConfig+0x282>
 80031dc:	2304      	movs	r3, #4
 80031de:	76fb      	strb	r3, [r7, #27]
 80031e0:	e05d      	b.n	800329e <UART_SetConfig+0x282>
 80031e2:	2308      	movs	r3, #8
 80031e4:	76fb      	strb	r3, [r7, #27]
 80031e6:	e05a      	b.n	800329e <UART_SetConfig+0x282>
 80031e8:	2310      	movs	r3, #16
 80031ea:	76fb      	strb	r3, [r7, #27]
 80031ec:	e057      	b.n	800329e <UART_SetConfig+0x282>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a49      	ldr	r2, [pc, #292]	; (8003318 <UART_SetConfig+0x2fc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d125      	bne.n	8003244 <UART_SetConfig+0x228>
 80031f8:	4b43      	ldr	r3, [pc, #268]	; (8003308 <UART_SetConfig+0x2ec>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003206:	d017      	beq.n	8003238 <UART_SetConfig+0x21c>
 8003208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320c:	d817      	bhi.n	800323e <UART_SetConfig+0x222>
 800320e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003212:	d00b      	beq.n	800322c <UART_SetConfig+0x210>
 8003214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003218:	d811      	bhi.n	800323e <UART_SetConfig+0x222>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <UART_SetConfig+0x20a>
 800321e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003222:	d006      	beq.n	8003232 <UART_SetConfig+0x216>
 8003224:	e00b      	b.n	800323e <UART_SetConfig+0x222>
 8003226:	2300      	movs	r3, #0
 8003228:	76fb      	strb	r3, [r7, #27]
 800322a:	e038      	b.n	800329e <UART_SetConfig+0x282>
 800322c:	2302      	movs	r3, #2
 800322e:	76fb      	strb	r3, [r7, #27]
 8003230:	e035      	b.n	800329e <UART_SetConfig+0x282>
 8003232:	2304      	movs	r3, #4
 8003234:	76fb      	strb	r3, [r7, #27]
 8003236:	e032      	b.n	800329e <UART_SetConfig+0x282>
 8003238:	2308      	movs	r3, #8
 800323a:	76fb      	strb	r3, [r7, #27]
 800323c:	e02f      	b.n	800329e <UART_SetConfig+0x282>
 800323e:	2310      	movs	r3, #16
 8003240:	76fb      	strb	r3, [r7, #27]
 8003242:	e02c      	b.n	800329e <UART_SetConfig+0x282>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2d      	ldr	r2, [pc, #180]	; (8003300 <UART_SetConfig+0x2e4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d125      	bne.n	800329a <UART_SetConfig+0x27e>
 800324e:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <UART_SetConfig+0x2ec>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800325c:	d017      	beq.n	800328e <UART_SetConfig+0x272>
 800325e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003262:	d817      	bhi.n	8003294 <UART_SetConfig+0x278>
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003268:	d00b      	beq.n	8003282 <UART_SetConfig+0x266>
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326e:	d811      	bhi.n	8003294 <UART_SetConfig+0x278>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <UART_SetConfig+0x260>
 8003274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003278:	d006      	beq.n	8003288 <UART_SetConfig+0x26c>
 800327a:	e00b      	b.n	8003294 <UART_SetConfig+0x278>
 800327c:	2300      	movs	r3, #0
 800327e:	76fb      	strb	r3, [r7, #27]
 8003280:	e00d      	b.n	800329e <UART_SetConfig+0x282>
 8003282:	2302      	movs	r3, #2
 8003284:	76fb      	strb	r3, [r7, #27]
 8003286:	e00a      	b.n	800329e <UART_SetConfig+0x282>
 8003288:	2304      	movs	r3, #4
 800328a:	76fb      	strb	r3, [r7, #27]
 800328c:	e007      	b.n	800329e <UART_SetConfig+0x282>
 800328e:	2308      	movs	r3, #8
 8003290:	76fb      	strb	r3, [r7, #27]
 8003292:	e004      	b.n	800329e <UART_SetConfig+0x282>
 8003294:	2310      	movs	r3, #16
 8003296:	76fb      	strb	r3, [r7, #27]
 8003298:	e001      	b.n	800329e <UART_SetConfig+0x282>
 800329a:	2310      	movs	r3, #16
 800329c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a17      	ldr	r2, [pc, #92]	; (8003300 <UART_SetConfig+0x2e4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	f040 8087 	bne.w	80033b8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032aa:	7efb      	ldrb	r3, [r7, #27]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d837      	bhi.n	8003320 <UART_SetConfig+0x304>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <UART_SetConfig+0x29c>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	08003321 	.word	0x08003321
 80032c0:	080032e5 	.word	0x080032e5
 80032c4:	08003321 	.word	0x08003321
 80032c8:	080032eb 	.word	0x080032eb
 80032cc:	08003321 	.word	0x08003321
 80032d0:	08003321 	.word	0x08003321
 80032d4:	08003321 	.word	0x08003321
 80032d8:	080032f3 	.word	0x080032f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7fe fd70 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 80032e0:	6178      	str	r0, [r7, #20]
        break;
 80032e2:	e022      	b.n	800332a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <UART_SetConfig+0x300>)
 80032e6:	617b      	str	r3, [r7, #20]
        break;
 80032e8:	e01f      	b.n	800332a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ea:	f7fe fcd1 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 80032ee:	6178      	str	r0, [r7, #20]
        break;
 80032f0:	e01b      	b.n	800332a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f6:	617b      	str	r3, [r7, #20]
        break;
 80032f8:	e017      	b.n	800332a <UART_SetConfig+0x30e>
 80032fa:	bf00      	nop
 80032fc:	efff69f3 	.word	0xefff69f3
 8003300:	40008000 	.word	0x40008000
 8003304:	40013800 	.word	0x40013800
 8003308:	40021000 	.word	0x40021000
 800330c:	40004400 	.word	0x40004400
 8003310:	40004800 	.word	0x40004800
 8003314:	40004c00 	.word	0x40004c00
 8003318:	40005000 	.word	0x40005000
 800331c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	76bb      	strb	r3, [r7, #26]
        break;
 8003328:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80f1 	beq.w	8003514 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	429a      	cmp	r2, r3
 8003340:	d305      	bcc.n	800334e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	429a      	cmp	r2, r3
 800334c:	d902      	bls.n	8003354 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	76bb      	strb	r3, [r7, #26]
 8003352:	e0df      	b.n	8003514 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	4618      	mov	r0, r3
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	020b      	lsls	r3, r1, #8
 8003366:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800336a:	0202      	lsls	r2, r0, #8
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	6849      	ldr	r1, [r1, #4]
 8003370:	0849      	lsrs	r1, r1, #1
 8003372:	4608      	mov	r0, r1
 8003374:	f04f 0100 	mov.w	r1, #0
 8003378:	1814      	adds	r4, r2, r0
 800337a:	eb43 0501 	adc.w	r5, r3, r1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	4620      	mov	r0, r4
 800338a:	4629      	mov	r1, r5
 800338c:	f7fc ff70 	bl	8000270 <__aeabi_uldivmod>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4613      	mov	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800339e:	d308      	bcc.n	80033b2 <UART_SetConfig+0x396>
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a6:	d204      	bcs.n	80033b2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	e0b0      	b.n	8003514 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	76bb      	strb	r3, [r7, #26]
 80033b6:	e0ad      	b.n	8003514 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c0:	d15c      	bne.n	800347c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80033c2:	7efb      	ldrb	r3, [r7, #27]
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d828      	bhi.n	800341a <UART_SetConfig+0x3fe>
 80033c8:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <UART_SetConfig+0x3b4>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	080033fd 	.word	0x080033fd
 80033d8:	08003405 	.word	0x08003405
 80033dc:	0800341b 	.word	0x0800341b
 80033e0:	0800340b 	.word	0x0800340b
 80033e4:	0800341b 	.word	0x0800341b
 80033e8:	0800341b 	.word	0x0800341b
 80033ec:	0800341b 	.word	0x0800341b
 80033f0:	08003413 	.word	0x08003413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f4:	f7fe fce4 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 80033f8:	6178      	str	r0, [r7, #20]
        break;
 80033fa:	e013      	b.n	8003424 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033fc:	f7fe fcf6 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8003400:	6178      	str	r0, [r7, #20]
        break;
 8003402:	e00f      	b.n	8003424 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003404:	4b49      	ldr	r3, [pc, #292]	; (800352c <UART_SetConfig+0x510>)
 8003406:	617b      	str	r3, [r7, #20]
        break;
 8003408:	e00c      	b.n	8003424 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800340a:	f7fe fc41 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 800340e:	6178      	str	r0, [r7, #20]
        break;
 8003410:	e008      	b.n	8003424 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003416:	617b      	str	r3, [r7, #20]
        break;
 8003418:	e004      	b.n	8003424 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	76bb      	strb	r3, [r7, #26]
        break;
 8003422:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d074      	beq.n	8003514 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005a      	lsls	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	441a      	add	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	b29b      	uxth	r3, r3
 8003440:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b0f      	cmp	r3, #15
 8003446:	d916      	bls.n	8003476 <UART_SetConfig+0x45a>
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344e:	d212      	bcs.n	8003476 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	b29b      	uxth	r3, r3
 8003454:	f023 030f 	bic.w	r3, r3, #15
 8003458:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	b29b      	uxth	r3, r3
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	b29a      	uxth	r2, r3
 8003466:	89fb      	ldrh	r3, [r7, #14]
 8003468:	4313      	orrs	r3, r2
 800346a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	89fa      	ldrh	r2, [r7, #14]
 8003472:	60da      	str	r2, [r3, #12]
 8003474:	e04e      	b.n	8003514 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	76bb      	strb	r3, [r7, #26]
 800347a:	e04b      	b.n	8003514 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800347c:	7efb      	ldrb	r3, [r7, #27]
 800347e:	2b08      	cmp	r3, #8
 8003480:	d827      	bhi.n	80034d2 <UART_SetConfig+0x4b6>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <UART_SetConfig+0x46c>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	080034ad 	.word	0x080034ad
 800348c:	080034b5 	.word	0x080034b5
 8003490:	080034bd 	.word	0x080034bd
 8003494:	080034d3 	.word	0x080034d3
 8003498:	080034c3 	.word	0x080034c3
 800349c:	080034d3 	.word	0x080034d3
 80034a0:	080034d3 	.word	0x080034d3
 80034a4:	080034d3 	.word	0x080034d3
 80034a8:	080034cb 	.word	0x080034cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ac:	f7fe fc88 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 80034b0:	6178      	str	r0, [r7, #20]
        break;
 80034b2:	e013      	b.n	80034dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b4:	f7fe fc9a 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 80034b8:	6178      	str	r0, [r7, #20]
        break;
 80034ba:	e00f      	b.n	80034dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <UART_SetConfig+0x510>)
 80034be:	617b      	str	r3, [r7, #20]
        break;
 80034c0:	e00c      	b.n	80034dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c2:	f7fe fbe5 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 80034c6:	6178      	str	r0, [r7, #20]
        break;
 80034c8:	e008      	b.n	80034dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ce:	617b      	str	r3, [r7, #20]
        break;
 80034d0:	e004      	b.n	80034dc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	76bb      	strb	r3, [r7, #26]
        break;
 80034da:	bf00      	nop
    }

    if (pclk != 0U)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d018      	beq.n	8003514 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	085a      	lsrs	r2, r3, #1
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	441a      	add	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b0f      	cmp	r3, #15
 80034fc:	d908      	bls.n	8003510 <UART_SetConfig+0x4f4>
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003504:	d204      	bcs.n	8003510 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	e001      	b.n	8003514 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003520:	7ebb      	ldrb	r3, [r7, #26]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bdb0      	pop	{r4, r5, r7, pc}
 800352a:	bf00      	nop
 800352c:	00f42400 	.word	0x00f42400

08003530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01a      	beq.n	8003646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362e:	d10a      	bne.n	8003646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af02      	add	r7, sp, #8
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003684:	f7fd fb40 	bl	8000d08 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d10e      	bne.n	80036b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003698:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f82d 	bl	8003706 <UART_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e023      	b.n	80036fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d10e      	bne.n	80036e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f817 	bl	8003706 <UART_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e00d      	b.n	80036fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	4613      	mov	r3, r2
 8003714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003716:	e05e      	b.n	80037d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371e:	d05a      	beq.n	80037d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003720:	f7fd faf2 	bl	8000d08 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	d302      	bcc.n	8003736 <UART_WaitOnFlagUntilTimeout+0x30>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11b      	bne.n	800376e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003744:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e043      	b.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d02c      	beq.n	80037d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378a:	d124      	bne.n	80037d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003794:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037a4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e00f      	b.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4013      	ands	r3, r2
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	bf0c      	ite	eq
 80037e6:	2301      	moveq	r3, #1
 80037e8:	2300      	movne	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d091      	beq.n	8003718 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <__NVIC_SetPriority>:
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	6039      	str	r1, [r7, #0]
 800380a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003810:	2b00      	cmp	r3, #0
 8003812:	db0a      	blt.n	800382a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	490c      	ldr	r1, [pc, #48]	; (800384c <__NVIC_SetPriority+0x4c>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	440b      	add	r3, r1
 8003824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003828:	e00a      	b.n	8003840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4908      	ldr	r1, [pc, #32]	; (8003850 <__NVIC_SetPriority+0x50>)
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	3b04      	subs	r3, #4
 8003838:	0112      	lsls	r2, r2, #4
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	440b      	add	r3, r1
 800383e:	761a      	strb	r2, [r3, #24]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000e100 	.word	0xe000e100
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <SysTick_Handler+0x1c>)
 800385a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800385c:	f001 feba 	bl	80055d4 <xTaskGetSchedulerState>
 8003860:	4603      	mov	r3, r0
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003866:	f002 fc9f 	bl	80061a8 <xPortSysTickHandler>
  }
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	e000e010 	.word	0xe000e010

08003874 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003878:	2100      	movs	r1, #0
 800387a:	f06f 0004 	mvn.w	r0, #4
 800387e:	f7ff ffbf 	bl	8003800 <__NVIC_SetPriority>
#endif
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800388e:	f3ef 8305 	mrs	r3, IPSR
 8003892:	603b      	str	r3, [r7, #0]
  return(result);
 8003894:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800389a:	f06f 0305 	mvn.w	r3, #5
 800389e:	607b      	str	r3, [r7, #4]
 80038a0:	e00c      	b.n	80038bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <osKernelInitialize+0x44>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d105      	bne.n	80038b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <osKernelInitialize+0x44>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	e002      	b.n	80038bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038bc:	687b      	ldr	r3, [r7, #4]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000094 	.word	0x20000094

080038d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038d6:	f3ef 8305 	mrs	r3, IPSR
 80038da:	603b      	str	r3, [r7, #0]
  return(result);
 80038dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80038e2:	f06f 0305 	mvn.w	r3, #5
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	e010      	b.n	800390c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <osKernelStart+0x48>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d109      	bne.n	8003906 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80038f2:	f7ff ffbf 	bl	8003874 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <osKernelStart+0x48>)
 80038f8:	2202      	movs	r2, #2
 80038fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80038fc:	f001 fa22 	bl	8004d44 <vTaskStartScheduler>
      stat = osOK;
 8003900:	2300      	movs	r3, #0
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	e002      	b.n	800390c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295
 800390a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800390c:	687b      	ldr	r3, [r7, #4]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000094 	.word	0x20000094

0800391c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b08e      	sub	sp, #56	; 0x38
 8003920:	af04      	add	r7, sp, #16
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003928:	2300      	movs	r3, #0
 800392a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800392c:	f3ef 8305 	mrs	r3, IPSR
 8003930:	617b      	str	r3, [r7, #20]
  return(result);
 8003932:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003934:	2b00      	cmp	r3, #0
 8003936:	d17e      	bne.n	8003a36 <osThreadNew+0x11a>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d07b      	beq.n	8003a36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003942:	2318      	movs	r3, #24
 8003944:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
 800394e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d045      	beq.n	80039e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <osThreadNew+0x48>
        name = attr->name;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <osThreadNew+0x6e>
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b38      	cmp	r3, #56	; 0x38
 800397c:	d805      	bhi.n	800398a <osThreadNew+0x6e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <osThreadNew+0x72>
        return (NULL);
 800398a:	2300      	movs	r3, #0
 800398c:	e054      	b.n	8003a38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00e      	beq.n	80039c4 <osThreadNew+0xa8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b5b      	cmp	r3, #91	; 0x5b
 80039ac:	d90a      	bls.n	80039c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d006      	beq.n	80039c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <osThreadNew+0xa8>
        mem = 1;
 80039be:	2301      	movs	r3, #1
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	e010      	b.n	80039e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10c      	bne.n	80039e6 <osThreadNew+0xca>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d108      	bne.n	80039e6 <osThreadNew+0xca>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d104      	bne.n	80039e6 <osThreadNew+0xca>
          mem = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	e001      	b.n	80039e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d110      	bne.n	8003a0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039f4:	9202      	str	r2, [sp, #8]
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6a3a      	ldr	r2, [r7, #32]
 8003a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fffc 	bl	8004a00 <xTaskCreateStatic>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	e013      	b.n	8003a36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d110      	bne.n	8003a36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	f107 0310 	add.w	r3, r7, #16
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f001 f847 	bl	8004aba <xTaskCreate>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d001      	beq.n	8003a36 <osThreadNew+0x11a>
            hTask = NULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a36:	693b      	ldr	r3, [r7, #16]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3728      	adds	r7, #40	; 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a46:	f3ef 8305 	mrs	r3, IPSR
 8003a4a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <osThreadYield+0x1a>
    stat = osErrorISR;
 8003a52:	f06f 0305 	mvn.w	r3, #5
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	e009      	b.n	8003a6e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <osThreadYield+0x3c>)
 8003a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8003a6e:	687b      	ldr	r3, [r7, #4]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000ed04 	.word	0xe000ed04

08003a80 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a90:	f3ef 8305 	mrs	r3, IPSR
 8003a94:	613b      	str	r3, [r7, #16]
  return(result);
 8003a96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d15f      	bne.n	8003b5c <osMessageQueueNew+0xdc>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d05c      	beq.n	8003b5c <osMessageQueueNew+0xdc>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d059      	beq.n	8003b5c <osMessageQueueNew+0xdc>
    mem = -1;
 8003aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d029      	beq.n	8003b08 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d012      	beq.n	8003ae2 <osMessageQueueNew+0x62>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b4f      	cmp	r3, #79	; 0x4f
 8003ac2:	d90e      	bls.n	8003ae2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d302      	bcc.n	8003ae2 <osMessageQueueNew+0x62>
        mem = 1;
 8003adc:	2301      	movs	r3, #1
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	e014      	b.n	8003b0c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d110      	bne.n	8003b0c <osMessageQueueNew+0x8c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10c      	bne.n	8003b0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d108      	bne.n	8003b0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d104      	bne.n	8003b0c <osMessageQueueNew+0x8c>
          mem = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e001      	b.n	8003b0c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d10b      	bne.n	8003b2a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	9100      	str	r1, [sp, #0]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fa2f 	bl	8003f84 <xQueueGenericCreateStatic>
 8003b26:	61f8      	str	r0, [r7, #28]
 8003b28:	e008      	b.n	8003b3c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d105      	bne.n	8003b3c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003b30:	2200      	movs	r2, #0
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fa9d 	bl	8004074 <xQueueGenericCreate>
 8003b3a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00c      	beq.n	8003b5c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e001      	b.n	8003b54 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003b54:	6979      	ldr	r1, [r7, #20]
 8003b56:	69f8      	ldr	r0, [r7, #28]
 8003b58:	f000 fef4 	bl	8004944 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b80:	f3ef 8305 	mrs	r3, IPSR
 8003b84:	617b      	str	r3, [r7, #20]
  return(result);
 8003b86:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d028      	beq.n	8003bde <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <osMessageQueuePut+0x36>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <osMessageQueuePut+0x36>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003b9e:	f06f 0303 	mvn.w	r3, #3
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	e038      	b.n	8003c18 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003baa:	f107 0210 	add.w	r2, r7, #16
 8003bae:	2300      	movs	r3, #0
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	69b8      	ldr	r0, [r7, #24]
 8003bb4:	f000 fbba 	bl	800432c <xQueueGenericSendFromISR>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d003      	beq.n	8003bc6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003bbe:	f06f 0302 	mvn.w	r3, #2
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	e028      	b.n	8003c18 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d025      	beq.n	8003c18 <osMessageQueuePut+0xb0>
 8003bcc:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <osMessageQueuePut+0xbc>)
 8003bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	e01c      	b.n	8003c18 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <osMessageQueuePut+0x82>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d103      	bne.n	8003bf2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003bea:	f06f 0303 	mvn.w	r3, #3
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	e012      	b.n	8003c18 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	68b9      	ldr	r1, [r7, #8]
 8003bf8:	69b8      	ldr	r0, [r7, #24]
 8003bfa:	f000 fa99 	bl	8004130 <xQueueGenericSend>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d009      	beq.n	8003c18 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003c0a:	f06f 0301 	mvn.w	r3, #1
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	e002      	b.n	8003c18 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003c12:	f06f 0302 	mvn.w	r3, #2
 8003c16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003c18:	69fb      	ldr	r3, [r7, #28]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	e000ed04 	.word	0xe000ed04

08003c28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c3e:	f3ef 8305 	mrs	r3, IPSR
 8003c42:	617b      	str	r3, [r7, #20]
  return(result);
 8003c44:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d028      	beq.n	8003c9c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <osMessageQueueGet+0x34>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <osMessageQueueGet+0x34>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003c5c:	f06f 0303 	mvn.w	r3, #3
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	e037      	b.n	8003cd4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003c68:	f107 0310 	add.w	r3, r7, #16
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	69b8      	ldr	r0, [r7, #24]
 8003c72:	f000 fcd7 	bl	8004624 <xQueueReceiveFromISR>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d003      	beq.n	8003c84 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003c7c:	f06f 0302 	mvn.w	r3, #2
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	e027      	b.n	8003cd4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d024      	beq.n	8003cd4 <osMessageQueueGet+0xac>
 8003c8a:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <osMessageQueueGet+0xb8>)
 8003c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	e01b      	b.n	8003cd4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <osMessageQueueGet+0x80>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d103      	bne.n	8003cb0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003ca8:	f06f 0303 	mvn.w	r3, #3
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	e011      	b.n	8003cd4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	69b8      	ldr	r0, [r7, #24]
 8003cb6:	f000 fbd5 	bl	8004464 <xQueueReceive>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d009      	beq.n	8003cd4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003cc6:	f06f 0301 	mvn.w	r3, #1
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	e002      	b.n	8003cd4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003cce:	f06f 0302 	mvn.w	r3, #2
 8003cd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	e000ed04 	.word	0xe000ed04

08003ce4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <vApplicationGetIdleTaskMemory+0x2c>)
 8003cf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4a06      	ldr	r2, [pc, #24]	; (8003d14 <vApplicationGetIdleTaskMemory+0x30>)
 8003cfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2280      	movs	r2, #128	; 0x80
 8003d00:	601a      	str	r2, [r3, #0]
}
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000098 	.word	0x20000098
 8003d14:	200000f4 	.word	0x200000f4

08003d18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4a06      	ldr	r2, [pc, #24]	; (8003d48 <vApplicationGetTimerTaskMemory+0x30>)
 8003d2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	200002f4 	.word	0x200002f4
 8003d48:	20000350 	.word	0x20000350

08003d4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f103 0208 	add.w	r2, r3, #8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f04f 32ff 	mov.w	r2, #4294967295
 8003d64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f103 0208 	add.w	r2, r3, #8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f103 0208 	add.w	r2, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	601a      	str	r2, [r3, #0]
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d103      	bne.n	8003e0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e00c      	b.n	8003e28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3308      	adds	r3, #8
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	e002      	b.n	8003e1c <vListInsert+0x2e>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d2f6      	bcs.n	8003e16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	601a      	str	r2, [r3, #0]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6892      	ldr	r2, [r2, #8]
 8003e76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6852      	ldr	r2, [r2, #4]
 8003e80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d103      	bne.n	8003e94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	1e5a      	subs	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003eda:	bf00      	nop
 8003edc:	e7fe      	b.n	8003edc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ede:	f002 f8d1 	bl	8006084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	441a      	add	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	68f9      	ldr	r1, [r7, #12]
 8003f12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	441a      	add	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	22ff      	movs	r2, #255	; 0xff
 8003f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	22ff      	movs	r2, #255	; 0xff
 8003f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d114      	bne.n	8003f5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01a      	beq.n	8003f72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3310      	adds	r3, #16
 8003f40:	4618      	mov	r0, r3
 8003f42:	f001 f989 	bl	8005258 <xTaskRemoveFromEventList>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d012      	beq.n	8003f72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <xQueueGenericReset+0xcc>)
 8003f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	e009      	b.n	8003f72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3310      	adds	r3, #16
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fef2 	bl	8003d4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3324      	adds	r3, #36	; 0x24
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff feed 	bl	8003d4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f72:	f002 f8b7 	bl	80060e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f76:	2301      	movs	r3, #1
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	e000ed04 	.word	0xe000ed04

08003f84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08e      	sub	sp, #56	; 0x38
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <xQueueGenericCreateStatic+0x52>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <xQueueGenericCreateStatic+0x56>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <xQueueGenericCreateStatic+0x58>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	623b      	str	r3, [r7, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <xQueueGenericCreateStatic+0x7e>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <xQueueGenericCreateStatic+0x82>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <xQueueGenericCreateStatic+0x84>
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	61fb      	str	r3, [r7, #28]
}
 800401e:	bf00      	nop
 8004020:	e7fe      	b.n	8004020 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004022:	2350      	movs	r3, #80	; 0x50
 8004024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b50      	cmp	r3, #80	; 0x50
 800402a:	d00a      	beq.n	8004042 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	61bb      	str	r3, [r7, #24]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004042:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00d      	beq.n	800406a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004056:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	4613      	mov	r3, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f83f 	bl	80040e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800406c:	4618      	mov	r0, r3
 800406e:	3730      	adds	r7, #48	; 0x30
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	613b      	str	r3, [r7, #16]
}
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	3350      	adds	r3, #80	; 0x50
 80040ac:	4618      	mov	r0, r3
 80040ae:	f002 f90b 	bl	80062c8 <pvPortMalloc>
 80040b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d011      	beq.n	80040de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	3350      	adds	r3, #80	; 0x50
 80040c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040cc:	79fa      	ldrb	r2, [r7, #7]
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f805 	bl	80040e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040de:	69bb      	ldr	r3, [r7, #24]
	}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d103      	bne.n	8004104 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e002      	b.n	800410a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004116:	2101      	movs	r1, #1
 8004118:	69b8      	ldr	r0, [r7, #24]
 800411a:	f7ff fecb 	bl	8003eb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004126:	bf00      	nop
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08e      	sub	sp, #56	; 0x38
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800413e:	2300      	movs	r3, #0
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <xQueueGenericSend+0x32>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d103      	bne.n	8004170 <xQueueGenericSend+0x40>
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <xQueueGenericSend+0x44>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <xQueueGenericSend+0x46>
 8004174:	2300      	movs	r3, #0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <xQueueGenericSend+0x60>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d103      	bne.n	800419e <xQueueGenericSend+0x6e>
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <xQueueGenericSend+0x72>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <xQueueGenericSend+0x74>
 80041a2:	2300      	movs	r3, #0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <xQueueGenericSend+0x8e>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	623b      	str	r3, [r7, #32]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041be:	f001 fa09 	bl	80055d4 <xTaskGetSchedulerState>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <xQueueGenericSend+0x9e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <xQueueGenericSend+0xa2>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <xQueueGenericSend+0xa4>
 80041d2:	2300      	movs	r3, #0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <xQueueGenericSend+0xbe>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	61fb      	str	r3, [r7, #28]
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ee:	f001 ff49 	bl	8006084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <xQueueGenericSend+0xd4>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d129      	bne.n	8004258 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420a:	f000 fa8b 	bl	8004724 <prvCopyDataToQueue>
 800420e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d010      	beq.n	800423a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	3324      	adds	r3, #36	; 0x24
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f81b 	bl	8005258 <xTaskRemoveFromEventList>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d013      	beq.n	8004250 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004228:	4b3f      	ldr	r3, [pc, #252]	; (8004328 <xQueueGenericSend+0x1f8>)
 800422a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	e00a      	b.n	8004250 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004240:	4b39      	ldr	r3, [pc, #228]	; (8004328 <xQueueGenericSend+0x1f8>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004250:	f001 ff48 	bl	80060e4 <vPortExitCritical>
				return pdPASS;
 8004254:	2301      	movs	r3, #1
 8004256:	e063      	b.n	8004320 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800425e:	f001 ff41 	bl	80060e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004262:	2300      	movs	r3, #0
 8004264:	e05c      	b.n	8004320 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800426c:	f107 0314 	add.w	r3, r7, #20
 8004270:	4618      	mov	r0, r3
 8004272:	f001 f855 	bl	8005320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800427a:	f001 ff33 	bl	80060e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800427e:	f000 fdc7 	bl	8004e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004282:	f001 feff 	bl	8006084 <vPortEnterCritical>
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800428c:	b25b      	sxtb	r3, r3
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d103      	bne.n	800429c <xQueueGenericSend+0x16c>
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042a2:	b25b      	sxtb	r3, r3
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d103      	bne.n	80042b2 <xQueueGenericSend+0x182>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042b2:	f001 ff17 	bl	80060e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042b6:	1d3a      	adds	r2, r7, #4
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 f844 	bl	800534c <xTaskCheckForTimeOut>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d124      	bne.n	8004314 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042cc:	f000 fb22 	bl	8004914 <prvIsQueueFull>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d018      	beq.n	8004308 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	3310      	adds	r3, #16
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	4611      	mov	r1, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 ff6a 	bl	80051b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042e6:	f000 faad 	bl	8004844 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ea:	f000 fd9f 	bl	8004e2c <xTaskResumeAll>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f47f af7c 	bne.w	80041ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <xQueueGenericSend+0x1f8>)
 80042f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	e772      	b.n	80041ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800430a:	f000 fa9b 	bl	8004844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800430e:	f000 fd8d 	bl	8004e2c <xTaskResumeAll>
 8004312:	e76c      	b.n	80041ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004316:	f000 fa95 	bl	8004844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800431a:	f000 fd87 	bl	8004e2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800431e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004320:	4618      	mov	r0, r3
 8004322:	3738      	adds	r7, #56	; 0x38
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b090      	sub	sp, #64	; 0x40
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d103      	bne.n	8004368 <xQueueGenericSendFromISR+0x3c>
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <xQueueGenericSendFromISR+0x40>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <xQueueGenericSendFromISR+0x42>
 800436c:	2300      	movs	r3, #0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d103      	bne.n	8004396 <xQueueGenericSendFromISR+0x6a>
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <xQueueGenericSendFromISR+0x6e>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <xQueueGenericSendFromISR+0x70>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	623b      	str	r3, [r7, #32]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043b6:	f001 ff47 	bl	8006248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043ba:	f3ef 8211 	mrs	r2, BASEPRI
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	61fa      	str	r2, [r7, #28]
 80043d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <xQueueGenericSendFromISR+0xbc>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d12f      	bne.n	8004448 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043fe:	f000 f991 	bl	8004724 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004402:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d112      	bne.n	8004432 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d016      	beq.n	8004442 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	3324      	adds	r3, #36	; 0x24
 8004418:	4618      	mov	r0, r3
 800441a:	f000 ff1d 	bl	8005258 <xTaskRemoveFromEventList>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00e      	beq.n	8004442 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	e007      	b.n	8004442 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004432:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004436:	3301      	adds	r3, #1
 8004438:	b2db      	uxtb	r3, r3
 800443a:	b25a      	sxtb	r2, r3
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004442:	2301      	movs	r3, #1
 8004444:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004446:	e001      	b.n	800444c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004448:	2300      	movs	r3, #0
 800444a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800444c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004456:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800445a:	4618      	mov	r0, r3
 800445c:	3740      	adds	r7, #64	; 0x40
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004470:	2300      	movs	r3, #0
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <xQueueReceive+0x30>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	623b      	str	r3, [r7, #32]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <xQueueReceive+0x3e>
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <xQueueReceive+0x42>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <xQueueReceive+0x44>
 80044a6:	2300      	movs	r3, #0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <xQueueReceive+0x5e>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	61fb      	str	r3, [r7, #28]
}
 80044be:	bf00      	nop
 80044c0:	e7fe      	b.n	80044c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044c2:	f001 f887 	bl	80055d4 <xTaskGetSchedulerState>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <xQueueReceive+0x6e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <xQueueReceive+0x72>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <xQueueReceive+0x74>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <xQueueReceive+0x8e>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	61bb      	str	r3, [r7, #24]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044f2:	f001 fdc7 	bl	8006084 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01f      	beq.n	8004542 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004506:	f000 f977 	bl	80047f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	1e5a      	subs	r2, r3, #1
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00f      	beq.n	800453a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	3310      	adds	r3, #16
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fe9a 	bl	8005258 <xTaskRemoveFromEventList>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800452a:	4b3d      	ldr	r3, [pc, #244]	; (8004620 <xQueueReceive+0x1bc>)
 800452c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800453a:	f001 fdd3 	bl	80060e4 <vPortExitCritical>
				return pdPASS;
 800453e:	2301      	movs	r3, #1
 8004540:	e069      	b.n	8004616 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d103      	bne.n	8004550 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004548:	f001 fdcc 	bl	80060e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800454c:	2300      	movs	r3, #0
 800454e:	e062      	b.n	8004616 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004556:	f107 0310 	add.w	r3, r7, #16
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fee0 	bl	8005320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004560:	2301      	movs	r3, #1
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004564:	f001 fdbe 	bl	80060e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004568:	f000 fc52 	bl	8004e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800456c:	f001 fd8a 	bl	8006084 <vPortEnterCritical>
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004576:	b25b      	sxtb	r3, r3
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d103      	bne.n	8004586 <xQueueReceive+0x122>
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800458c:	b25b      	sxtb	r3, r3
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004592:	d103      	bne.n	800459c <xQueueReceive+0x138>
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800459c:	f001 fda2 	bl	80060e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045a0:	1d3a      	adds	r2, r7, #4
 80045a2:	f107 0310 	add.w	r3, r7, #16
 80045a6:	4611      	mov	r1, r2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fecf 	bl	800534c <xTaskCheckForTimeOut>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d123      	bne.n	80045fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045b6:	f000 f997 	bl	80048e8 <prvIsQueueEmpty>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d017      	beq.n	80045f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	3324      	adds	r3, #36	; 0x24
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4611      	mov	r1, r2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fdf5 	bl	80051b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d0:	f000 f938 	bl	8004844 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045d4:	f000 fc2a 	bl	8004e2c <xTaskResumeAll>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d189      	bne.n	80044f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <xQueueReceive+0x1bc>)
 80045e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	e780      	b.n	80044f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f2:	f000 f927 	bl	8004844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045f6:	f000 fc19 	bl	8004e2c <xTaskResumeAll>
 80045fa:	e77a      	b.n	80044f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045fe:	f000 f921 	bl	8004844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004602:	f000 fc13 	bl	8004e2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004608:	f000 f96e 	bl	80048e8 <prvIsQueueEmpty>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	f43f af6f 	beq.w	80044f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004614:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004616:	4618      	mov	r0, r3
 8004618:	3730      	adds	r7, #48	; 0x30
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	e000ed04 	.word	0xe000ed04

08004624 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08e      	sub	sp, #56	; 0x38
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	623b      	str	r3, [r7, #32]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <xQueueReceiveFromISR+0x3a>
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <xQueueReceiveFromISR+0x3e>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <xQueueReceiveFromISR+0x40>
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	61fb      	str	r3, [r7, #28]
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800467e:	f001 fde3 	bl	8006248 <vPortValidateInterruptPriority>
	__asm volatile
 8004682:	f3ef 8211 	mrs	r2, BASEPRI
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	61ba      	str	r2, [r7, #24]
 8004698:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800469a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d02f      	beq.n	800470a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046b8:	f000 f89e 	bl	80047f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	1e5a      	subs	r2, r3, #1
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80046c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d112      	bne.n	80046f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d016      	beq.n	8004704 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	3310      	adds	r3, #16
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fdbc 	bl	8005258 <xTaskRemoveFromEventList>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00e      	beq.n	8004704 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00b      	beq.n	8004704 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e007      	b.n	8004704 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80046f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046f8:	3301      	adds	r3, #1
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	b25a      	sxtb	r2, r3
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004704:	2301      	movs	r3, #1
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
 8004708:	e001      	b.n	800470e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800470a:	2300      	movs	r3, #0
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f383 8811 	msr	BASEPRI, r3
}
 8004718:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800471c:	4618      	mov	r0, r3
 800471e:	3738      	adds	r7, #56	; 0x38
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10d      	bne.n	800475e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d14d      	bne.n	80047e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 ff5e 	bl	8005610 <xTaskPriorityDisinherit>
 8004754:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	e043      	b.n	80047e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d119      	bne.n	8004798 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6858      	ldr	r0, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	461a      	mov	r2, r3
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	f001 ffbe 	bl	80066f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	441a      	add	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	d32b      	bcc.n	80047e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	e026      	b.n	80047e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68d8      	ldr	r0, [r3, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	461a      	mov	r2, r3
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	f001 ffa4 	bl	80066f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	425b      	negs	r3, r3
 80047b2:	441a      	add	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d207      	bcs.n	80047d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	425b      	negs	r3, r3
 80047ce:	441a      	add	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d105      	bne.n	80047e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047ee:	697b      	ldr	r3, [r7, #20]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d018      	beq.n	800483c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	441a      	add	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	429a      	cmp	r2, r3
 8004822:	d303      	bcc.n	800482c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68d9      	ldr	r1, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	461a      	mov	r2, r3
 8004836:	6838      	ldr	r0, [r7, #0]
 8004838:	f001 ff5a 	bl	80066f0 <memcpy>
	}
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800484c:	f001 fc1a 	bl	8006084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004856:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004858:	e011      	b.n	800487e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d012      	beq.n	8004888 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3324      	adds	r3, #36	; 0x24
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fcf6 	bl	8005258 <xTaskRemoveFromEventList>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004872:	f000 fdcd 	bl	8005410 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	3b01      	subs	r3, #1
 800487a:	b2db      	uxtb	r3, r3
 800487c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800487e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004882:	2b00      	cmp	r3, #0
 8004884:	dce9      	bgt.n	800485a <prvUnlockQueue+0x16>
 8004886:	e000      	b.n	800488a <prvUnlockQueue+0x46>
					break;
 8004888:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	22ff      	movs	r2, #255	; 0xff
 800488e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004892:	f001 fc27 	bl	80060e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004896:	f001 fbf5 	bl	8006084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048a2:	e011      	b.n	80048c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d012      	beq.n	80048d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3310      	adds	r3, #16
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fcd1 	bl	8005258 <xTaskRemoveFromEventList>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048bc:	f000 fda8 	bl	8005410 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048c0:	7bbb      	ldrb	r3, [r7, #14]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dce9      	bgt.n	80048a4 <prvUnlockQueue+0x60>
 80048d0:	e000      	b.n	80048d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	22ff      	movs	r2, #255	; 0xff
 80048d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048dc:	f001 fc02 	bl	80060e4 <vPortExitCritical>
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048f0:	f001 fbc8 	bl	8006084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d102      	bne.n	8004902 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e001      	b.n	8004906 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004906:	f001 fbed 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 800490a:	68fb      	ldr	r3, [r7, #12]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800491c:	f001 fbb2 	bl	8006084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	429a      	cmp	r2, r3
 800492a:	d102      	bne.n	8004932 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e001      	b.n	8004936 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004936:	f001 fbd5 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 800493a:	68fb      	ldr	r3, [r7, #12]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e014      	b.n	800497e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004954:	4a0f      	ldr	r2, [pc, #60]	; (8004994 <vQueueAddToRegistry+0x50>)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10b      	bne.n	8004978 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004960:	490c      	ldr	r1, [pc, #48]	; (8004994 <vQueueAddToRegistry+0x50>)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800496a:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <vQueueAddToRegistry+0x50>)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004976:	e006      	b.n	8004986 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3301      	adds	r3, #1
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b07      	cmp	r3, #7
 8004982:	d9e7      	bls.n	8004954 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20001a48 	.word	0x20001a48

08004998 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049a8:	f001 fb6c 	bl	8006084 <vPortEnterCritical>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b2:	b25b      	sxtb	r3, r3
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d103      	bne.n	80049c2 <vQueueWaitForMessageRestricted+0x2a>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049c8:	b25b      	sxtb	r3, r3
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d103      	bne.n	80049d8 <vQueueWaitForMessageRestricted+0x40>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d8:	f001 fb84 	bl	80060e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	3324      	adds	r3, #36	; 0x24
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fc07 	bl	8005200 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049f2:	6978      	ldr	r0, [r7, #20]
 80049f4:	f7ff ff26 	bl	8004844 <prvUnlockQueue>
	}
 80049f8:	bf00      	nop
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08e      	sub	sp, #56	; 0x38
 8004a04:	af04      	add	r7, sp, #16
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	623b      	str	r3, [r7, #32]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	61fb      	str	r3, [r7, #28]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a46:	235c      	movs	r3, #92	; 0x5c
 8004a48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b5c      	cmp	r3, #92	; 0x5c
 8004a4e:	d00a      	beq.n	8004a66 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	61bb      	str	r3, [r7, #24]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01e      	beq.n	8004aac <xTaskCreateStatic+0xac>
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01b      	beq.n	8004aac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a86:	2300      	movs	r3, #0
 8004a88:	9303      	str	r3, [sp, #12]
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	9302      	str	r3, [sp, #8]
 8004a8e:	f107 0314 	add.w	r3, r7, #20
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f850 	bl	8004b44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aa6:	f000 f8dd 	bl	8004c64 <prvAddNewTaskToReadyList>
 8004aaa:	e001      	b.n	8004ab0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ab0:	697b      	ldr	r3, [r7, #20]
	}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3728      	adds	r7, #40	; 0x28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b08c      	sub	sp, #48	; 0x30
 8004abe:	af04      	add	r7, sp, #16
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	603b      	str	r3, [r7, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 fbfa 	bl	80062c8 <pvPortMalloc>
 8004ad4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00e      	beq.n	8004afa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004adc:	205c      	movs	r0, #92	; 0x5c
 8004ade:	f001 fbf3 	bl	80062c8 <pvPortMalloc>
 8004ae2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
 8004af0:	e005      	b.n	8004afe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004af2:	6978      	ldr	r0, [r7, #20]
 8004af4:	f001 fcb4 	bl	8006460 <vPortFree>
 8004af8:	e001      	b.n	8004afe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d017      	beq.n	8004b34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b0c:	88fa      	ldrh	r2, [r7, #6]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9303      	str	r3, [sp, #12]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	9302      	str	r3, [sp, #8]
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f80e 	bl	8004b44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b28:	69f8      	ldr	r0, [r7, #28]
 8004b2a:	f000 f89b 	bl	8004c64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	e002      	b.n	8004b3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b34:	f04f 33ff 	mov.w	r3, #4294967295
 8004b38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	21a5      	movs	r1, #165	; 0xa5
 8004b5e:	f001 fdd5 	bl	800670c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	617b      	str	r3, [r7, #20]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01f      	beq.n	8004be2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	e012      	b.n	8004bce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	7819      	ldrb	r1, [r3, #0]
 8004bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3334      	adds	r3, #52	; 0x34
 8004bb8:	460a      	mov	r2, r1
 8004bba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b0f      	cmp	r3, #15
 8004bd2:	d9e9      	bls.n	8004ba8 <prvInitialiseNewTask+0x64>
 8004bd4:	e000      	b.n	8004bd8 <prvInitialiseNewTask+0x94>
			{
				break;
 8004bd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004be0:	e003      	b.n	8004bea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	2b37      	cmp	r3, #55	; 0x37
 8004bee:	d901      	bls.n	8004bf4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bf0:	2337      	movs	r3, #55	; 0x37
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	2200      	movs	r2, #0
 8004c04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff f8be 	bl	8003d8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	3318      	adds	r3, #24
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff f8b9 	bl	8003d8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	2200      	movs	r2, #0
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	68f9      	ldr	r1, [r7, #12]
 8004c42:	69b8      	ldr	r0, [r7, #24]
 8004c44:	f001 f8f4 	bl	8005e30 <pxPortInitialiseStack>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c5a:	bf00      	nop
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c6c:	f001 fa0a 	bl	8006084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c70:	4b2d      	ldr	r3, [pc, #180]	; (8004d28 <prvAddNewTaskToReadyList+0xc4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3301      	adds	r3, #1
 8004c76:	4a2c      	ldr	r2, [pc, #176]	; (8004d28 <prvAddNewTaskToReadyList+0xc4>)
 8004c78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c7a:	4b2c      	ldr	r3, [pc, #176]	; (8004d2c <prvAddNewTaskToReadyList+0xc8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c82:	4a2a      	ldr	r2, [pc, #168]	; (8004d2c <prvAddNewTaskToReadyList+0xc8>)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c88:	4b27      	ldr	r3, [pc, #156]	; (8004d28 <prvAddNewTaskToReadyList+0xc4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d110      	bne.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c90:	f000 fbe2 	bl	8005458 <prvInitialiseTaskLists>
 8004c94:	e00d      	b.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c96:	4b26      	ldr	r3, [pc, #152]	; (8004d30 <prvAddNewTaskToReadyList+0xcc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c9e:	4b23      	ldr	r3, [pc, #140]	; (8004d2c <prvAddNewTaskToReadyList+0xc8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d802      	bhi.n	8004cb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cac:	4a1f      	ldr	r2, [pc, #124]	; (8004d2c <prvAddNewTaskToReadyList+0xc8>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cb2:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <prvAddNewTaskToReadyList+0xd0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <prvAddNewTaskToReadyList+0xd0>)
 8004cba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <prvAddNewTaskToReadyList+0xd0>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <prvAddNewTaskToReadyList+0xd4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d903      	bls.n	8004cd8 <prvAddNewTaskToReadyList+0x74>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <prvAddNewTaskToReadyList+0xd4>)
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <prvAddNewTaskToReadyList+0xd8>)
 8004ce6:	441a      	add	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3304      	adds	r3, #4
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f7ff f859 	bl	8003da6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cf4:	f001 f9f6 	bl	80060e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cf8:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <prvAddNewTaskToReadyList+0xcc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00e      	beq.n	8004d1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d00:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <prvAddNewTaskToReadyList+0xc8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d207      	bcs.n	8004d1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <prvAddNewTaskToReadyList+0xdc>)
 8004d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000c24 	.word	0x20000c24
 8004d2c:	20000750 	.word	0x20000750
 8004d30:	20000c30 	.word	0x20000c30
 8004d34:	20000c40 	.word	0x20000c40
 8004d38:	20000c2c 	.word	0x20000c2c
 8004d3c:	20000754 	.word	0x20000754
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d52:	463a      	mov	r2, r7
 8004d54:	1d39      	adds	r1, r7, #4
 8004d56:	f107 0308 	add.w	r3, r7, #8
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fe ffc2 	bl	8003ce4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	9202      	str	r2, [sp, #8]
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	460a      	mov	r2, r1
 8004d72:	4921      	ldr	r1, [pc, #132]	; (8004df8 <vTaskStartScheduler+0xb4>)
 8004d74:	4821      	ldr	r0, [pc, #132]	; (8004dfc <vTaskStartScheduler+0xb8>)
 8004d76:	f7ff fe43 	bl	8004a00 <xTaskCreateStatic>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4a20      	ldr	r2, [pc, #128]	; (8004e00 <vTaskStartScheduler+0xbc>)
 8004d7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d80:	4b1f      	ldr	r3, [pc, #124]	; (8004e00 <vTaskStartScheduler+0xbc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e001      	b.n	8004d92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d102      	bne.n	8004d9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d98:	f000 fcfc 	bl	8005794 <xTimerCreateTimerTask>
 8004d9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d116      	bne.n	8004dd2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	613b      	str	r3, [r7, #16]
}
 8004db6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <vTaskStartScheduler+0xc0>)
 8004dba:	f04f 32ff 	mov.w	r2, #4294967295
 8004dbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dc0:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <vTaskStartScheduler+0xc4>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dc6:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <vTaskStartScheduler+0xc8>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dcc:	f001 f8b8 	bl	8005f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dd0:	e00e      	b.n	8004df0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d10a      	bne.n	8004df0 <vTaskStartScheduler+0xac>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	60fb      	str	r3, [r7, #12]
}
 8004dec:	bf00      	nop
 8004dee:	e7fe      	b.n	8004dee <vTaskStartScheduler+0xaa>
}
 8004df0:	bf00      	nop
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	080077b0 	.word	0x080077b0
 8004dfc:	08005429 	.word	0x08005429
 8004e00:	20000c48 	.word	0x20000c48
 8004e04:	20000c44 	.word	0x20000c44
 8004e08:	20000c30 	.word	0x20000c30
 8004e0c:	20000c28 	.word	0x20000c28

08004e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e14:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <vTaskSuspendAll+0x18>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	4a03      	ldr	r2, [pc, #12]	; (8004e28 <vTaskSuspendAll+0x18>)
 8004e1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e1e:	bf00      	nop
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	20000c4c 	.word	0x20000c4c

08004e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e3a:	4b42      	ldr	r3, [pc, #264]	; (8004f44 <xTaskResumeAll+0x118>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	603b      	str	r3, [r7, #0]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e58:	f001 f914 	bl	8006084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e5c:	4b39      	ldr	r3, [pc, #228]	; (8004f44 <xTaskResumeAll+0x118>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	4a38      	ldr	r2, [pc, #224]	; (8004f44 <xTaskResumeAll+0x118>)
 8004e64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e66:	4b37      	ldr	r3, [pc, #220]	; (8004f44 <xTaskResumeAll+0x118>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d162      	bne.n	8004f34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e6e:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <xTaskResumeAll+0x11c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d05e      	beq.n	8004f34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e76:	e02f      	b.n	8004ed8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e78:	4b34      	ldr	r3, [pc, #208]	; (8004f4c <xTaskResumeAll+0x120>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3318      	adds	r3, #24
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe ffeb 	bl	8003e60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe ffe6 	bl	8003e60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	4b2d      	ldr	r3, [pc, #180]	; (8004f50 <xTaskResumeAll+0x124>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d903      	bls.n	8004ea8 <xTaskResumeAll+0x7c>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	4a2a      	ldr	r2, [pc, #168]	; (8004f50 <xTaskResumeAll+0x124>)
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <xTaskResumeAll+0x128>)
 8004eb6:	441a      	add	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f7fe ff71 	bl	8003da6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <xTaskResumeAll+0x12c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004ed2:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <xTaskResumeAll+0x130>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ed8:	4b1c      	ldr	r3, [pc, #112]	; (8004f4c <xTaskResumeAll+0x120>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1cb      	bne.n	8004e78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ee6:	f000 fb55 	bl	8005594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004eea:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <xTaskResumeAll+0x134>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d010      	beq.n	8004f18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ef6:	f000 f847 	bl	8004f88 <xTaskIncrementTick>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f00:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <xTaskResumeAll+0x130>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f1      	bne.n	8004ef6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f12:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <xTaskResumeAll+0x134>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <xTaskResumeAll+0x130>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f20:	2301      	movs	r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f24:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <xTaskResumeAll+0x138>)
 8004f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f34:	f001 f8d6 	bl	80060e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004f38:	68bb      	ldr	r3, [r7, #8]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000c4c 	.word	0x20000c4c
 8004f48:	20000c24 	.word	0x20000c24
 8004f4c:	20000be4 	.word	0x20000be4
 8004f50:	20000c2c 	.word	0x20000c2c
 8004f54:	20000754 	.word	0x20000754
 8004f58:	20000750 	.word	0x20000750
 8004f5c:	20000c38 	.word	0x20000c38
 8004f60:	20000c34 	.word	0x20000c34
 8004f64:	e000ed04 	.word	0xe000ed04

08004f68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <xTaskGetTickCount+0x1c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f74:	687b      	ldr	r3, [r7, #4]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000c28 	.word	0x20000c28

08004f88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f92:	4b4f      	ldr	r3, [pc, #316]	; (80050d0 <xTaskIncrementTick+0x148>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 808f 	bne.w	80050ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f9c:	4b4d      	ldr	r3, [pc, #308]	; (80050d4 <xTaskIncrementTick+0x14c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fa4:	4a4b      	ldr	r2, [pc, #300]	; (80050d4 <xTaskIncrementTick+0x14c>)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d120      	bne.n	8004ff2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fb0:	4b49      	ldr	r3, [pc, #292]	; (80050d8 <xTaskIncrementTick+0x150>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	603b      	str	r3, [r7, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <xTaskIncrementTick+0x46>
 8004fd0:	4b41      	ldr	r3, [pc, #260]	; (80050d8 <xTaskIncrementTick+0x150>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	4b41      	ldr	r3, [pc, #260]	; (80050dc <xTaskIncrementTick+0x154>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a3f      	ldr	r2, [pc, #252]	; (80050d8 <xTaskIncrementTick+0x150>)
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4a3f      	ldr	r2, [pc, #252]	; (80050dc <xTaskIncrementTick+0x154>)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <xTaskIncrementTick+0x158>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	4a3d      	ldr	r2, [pc, #244]	; (80050e0 <xTaskIncrementTick+0x158>)
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	f000 fad1 	bl	8005594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ff2:	4b3c      	ldr	r3, [pc, #240]	; (80050e4 <xTaskIncrementTick+0x15c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d349      	bcc.n	8005090 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ffc:	4b36      	ldr	r3, [pc, #216]	; (80050d8 <xTaskIncrementTick+0x150>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005006:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <xTaskIncrementTick+0x15c>)
 8005008:	f04f 32ff 	mov.w	r2, #4294967295
 800500c:	601a      	str	r2, [r3, #0]
					break;
 800500e:	e03f      	b.n	8005090 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005010:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <xTaskIncrementTick+0x150>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d203      	bcs.n	8005030 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005028:	4a2e      	ldr	r2, [pc, #184]	; (80050e4 <xTaskIncrementTick+0x15c>)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800502e:	e02f      	b.n	8005090 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	3304      	adds	r3, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe ff13 	bl	8003e60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	3318      	adds	r3, #24
 8005046:	4618      	mov	r0, r3
 8005048:	f7fe ff0a 	bl	8003e60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005050:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <xTaskIncrementTick+0x160>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d903      	bls.n	8005060 <xTaskIncrementTick+0xd8>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	4a22      	ldr	r2, [pc, #136]	; (80050e8 <xTaskIncrementTick+0x160>)
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4a1f      	ldr	r2, [pc, #124]	; (80050ec <xTaskIncrementTick+0x164>)
 800506e:	441a      	add	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f7fe fe95 	bl	8003da6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005080:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <xTaskIncrementTick+0x168>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	429a      	cmp	r2, r3
 8005088:	d3b8      	bcc.n	8004ffc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800508a:	2301      	movs	r3, #1
 800508c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800508e:	e7b5      	b.n	8004ffc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005090:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <xTaskIncrementTick+0x168>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005096:	4915      	ldr	r1, [pc, #84]	; (80050ec <xTaskIncrementTick+0x164>)
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d901      	bls.n	80050ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050ac:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <xTaskIncrementTick+0x16c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e004      	b.n	80050c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050ba:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <xTaskIncrementTick+0x170>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3301      	adds	r3, #1
 80050c0:	4a0d      	ldr	r2, [pc, #52]	; (80050f8 <xTaskIncrementTick+0x170>)
 80050c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050c4:	697b      	ldr	r3, [r7, #20]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000c4c 	.word	0x20000c4c
 80050d4:	20000c28 	.word	0x20000c28
 80050d8:	20000bdc 	.word	0x20000bdc
 80050dc:	20000be0 	.word	0x20000be0
 80050e0:	20000c3c 	.word	0x20000c3c
 80050e4:	20000c44 	.word	0x20000c44
 80050e8:	20000c2c 	.word	0x20000c2c
 80050ec:	20000754 	.word	0x20000754
 80050f0:	20000750 	.word	0x20000750
 80050f4:	20000c38 	.word	0x20000c38
 80050f8:	20000c34 	.word	0x20000c34

080050fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005102:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <vTaskSwitchContext+0xa8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800510a:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <vTaskSwitchContext+0xac>)
 800510c:	2201      	movs	r2, #1
 800510e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005110:	e041      	b.n	8005196 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005112:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <vTaskSwitchContext+0xac>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005118:	4b24      	ldr	r3, [pc, #144]	; (80051ac <vTaskSwitchContext+0xb0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	e010      	b.n	8005142 <vTaskSwitchContext+0x46>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <vTaskSwitchContext+0x40>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	607b      	str	r3, [r7, #4]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <vTaskSwitchContext+0x3e>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3b01      	subs	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	491b      	ldr	r1, [pc, #108]	; (80051b0 <vTaskSwitchContext+0xb4>)
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0e4      	beq.n	8005120 <vTaskSwitchContext+0x24>
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <vTaskSwitchContext+0xb4>)
 8005162:	4413      	add	r3, r2
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	605a      	str	r2, [r3, #4]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	3308      	adds	r3, #8
 8005178:	429a      	cmp	r2, r3
 800517a:	d104      	bne.n	8005186 <vTaskSwitchContext+0x8a>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <vTaskSwitchContext+0xb8>)
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	4a06      	ldr	r2, [pc, #24]	; (80051ac <vTaskSwitchContext+0xb0>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6013      	str	r3, [r2, #0]
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000c4c 	.word	0x20000c4c
 80051a8:	20000c38 	.word	0x20000c38
 80051ac:	20000c2c 	.word	0x20000c2c
 80051b0:	20000754 	.word	0x20000754
 80051b4:	20000750 	.word	0x20000750

080051b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	60fb      	str	r3, [r7, #12]
}
 80051da:	bf00      	nop
 80051dc:	e7fe      	b.n	80051dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051de:	4b07      	ldr	r3, [pc, #28]	; (80051fc <vTaskPlaceOnEventList+0x44>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3318      	adds	r3, #24
 80051e4:	4619      	mov	r1, r3
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fe fe01 	bl	8003dee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051ec:	2101      	movs	r1, #1
 80051ee:	6838      	ldr	r0, [r7, #0]
 80051f0:	f000 fa7c 	bl	80056ec <prvAddCurrentTaskToDelayedList>
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20000750 	.word	0x20000750

08005200 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	617b      	str	r3, [r7, #20]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <vTaskPlaceOnEventListRestricted+0x54>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3318      	adds	r3, #24
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7fe fdb8 	bl	8003da6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
 8005240:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	68b8      	ldr	r0, [r7, #8]
 8005246:	f000 fa51 	bl	80056ec <prvAddCurrentTaskToDelayedList>
	}
 800524a:	bf00      	nop
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000750 	.word	0x20000750

08005258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	60fb      	str	r3, [r7, #12]
}
 8005280:	bf00      	nop
 8005282:	e7fe      	b.n	8005282 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	3318      	adds	r3, #24
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe fde9 	bl	8003e60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800528e:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <xTaskRemoveFromEventList+0xb0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d11d      	bne.n	80052d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	3304      	adds	r3, #4
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe fde0 	bl	8003e60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	4b19      	ldr	r3, [pc, #100]	; (800530c <xTaskRemoveFromEventList+0xb4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d903      	bls.n	80052b4 <xTaskRemoveFromEventList+0x5c>
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	4a16      	ldr	r2, [pc, #88]	; (800530c <xTaskRemoveFromEventList+0xb4>)
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4a13      	ldr	r2, [pc, #76]	; (8005310 <xTaskRemoveFromEventList+0xb8>)
 80052c2:	441a      	add	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f7fe fd6b 	bl	8003da6 <vListInsertEnd>
 80052d0:	e005      	b.n	80052de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	3318      	adds	r3, #24
 80052d6:	4619      	mov	r1, r3
 80052d8:	480e      	ldr	r0, [pc, #56]	; (8005314 <xTaskRemoveFromEventList+0xbc>)
 80052da:	f7fe fd64 	bl	8003da6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e2:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <xTaskRemoveFromEventList+0xc0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d905      	bls.n	80052f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052f0:	4b0a      	ldr	r3, [pc, #40]	; (800531c <xTaskRemoveFromEventList+0xc4>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e001      	b.n	80052fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052fc:	697b      	ldr	r3, [r7, #20]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000c4c 	.word	0x20000c4c
 800530c:	20000c2c 	.word	0x20000c2c
 8005310:	20000754 	.word	0x20000754
 8005314:	20000be4 	.word	0x20000be4
 8005318:	20000750 	.word	0x20000750
 800531c:	20000c38 	.word	0x20000c38

08005320 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <vTaskInternalSetTimeOutState+0x24>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <vTaskInternalSetTimeOutState+0x28>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	605a      	str	r2, [r3, #4]
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	20000c3c 	.word	0x20000c3c
 8005348:	20000c28 	.word	0x20000c28

0800534c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	613b      	str	r3, [r7, #16]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	60fb      	str	r3, [r7, #12]
}
 800538a:	bf00      	nop
 800538c:	e7fe      	b.n	800538c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800538e:	f000 fe79 	bl	8006084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005392:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <xTaskCheckForTimeOut+0xbc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d102      	bne.n	80053b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	e023      	b.n	80053fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b15      	ldr	r3, [pc, #84]	; (800540c <xTaskCheckForTimeOut+0xc0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d007      	beq.n	80053ce <xTaskCheckForTimeOut+0x82>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d302      	bcc.n	80053ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	e015      	b.n	80053fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d20b      	bcs.n	80053f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ff9b 	bl	8005320 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	e004      	b.n	80053fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053f6:	2301      	movs	r3, #1
 80053f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053fa:	f000 fe73 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 80053fe:	69fb      	ldr	r3, [r7, #28]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000c28 	.word	0x20000c28
 800540c:	20000c3c 	.word	0x20000c3c

08005410 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005414:	4b03      	ldr	r3, [pc, #12]	; (8005424 <vTaskMissedYield+0x14>)
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]
}
 800541a:	bf00      	nop
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	20000c38 	.word	0x20000c38

08005428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005430:	f000 f852 	bl	80054d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <prvIdleTask+0x28>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d9f9      	bls.n	8005430 <prvIdleTask+0x8>
			{
				taskYIELD();
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <prvIdleTask+0x2c>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800544c:	e7f0      	b.n	8005430 <prvIdleTask+0x8>
 800544e:	bf00      	nop
 8005450:	20000754 	.word	0x20000754
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800545e:	2300      	movs	r3, #0
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	e00c      	b.n	800547e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4a12      	ldr	r2, [pc, #72]	; (80054b8 <prvInitialiseTaskLists+0x60>)
 8005470:	4413      	add	r3, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f7fe fc6a 	bl	8003d4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3301      	adds	r3, #1
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b37      	cmp	r3, #55	; 0x37
 8005482:	d9ef      	bls.n	8005464 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005484:	480d      	ldr	r0, [pc, #52]	; (80054bc <prvInitialiseTaskLists+0x64>)
 8005486:	f7fe fc61 	bl	8003d4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800548a:	480d      	ldr	r0, [pc, #52]	; (80054c0 <prvInitialiseTaskLists+0x68>)
 800548c:	f7fe fc5e 	bl	8003d4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005490:	480c      	ldr	r0, [pc, #48]	; (80054c4 <prvInitialiseTaskLists+0x6c>)
 8005492:	f7fe fc5b 	bl	8003d4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005496:	480c      	ldr	r0, [pc, #48]	; (80054c8 <prvInitialiseTaskLists+0x70>)
 8005498:	f7fe fc58 	bl	8003d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800549c:	480b      	ldr	r0, [pc, #44]	; (80054cc <prvInitialiseTaskLists+0x74>)
 800549e:	f7fe fc55 	bl	8003d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <prvInitialiseTaskLists+0x78>)
 80054a4:	4a05      	ldr	r2, [pc, #20]	; (80054bc <prvInitialiseTaskLists+0x64>)
 80054a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <prvInitialiseTaskLists+0x7c>)
 80054aa:	4a05      	ldr	r2, [pc, #20]	; (80054c0 <prvInitialiseTaskLists+0x68>)
 80054ac:	601a      	str	r2, [r3, #0]
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000754 	.word	0x20000754
 80054bc:	20000bb4 	.word	0x20000bb4
 80054c0:	20000bc8 	.word	0x20000bc8
 80054c4:	20000be4 	.word	0x20000be4
 80054c8:	20000bf8 	.word	0x20000bf8
 80054cc:	20000c10 	.word	0x20000c10
 80054d0:	20000bdc 	.word	0x20000bdc
 80054d4:	20000be0 	.word	0x20000be0

080054d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054de:	e019      	b.n	8005514 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054e0:	f000 fdd0 	bl	8006084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e4:	4b10      	ldr	r3, [pc, #64]	; (8005528 <prvCheckTasksWaitingTermination+0x50>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fe fcb5 	bl	8003e60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054f6:	4b0d      	ldr	r3, [pc, #52]	; (800552c <prvCheckTasksWaitingTermination+0x54>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	4a0b      	ldr	r2, [pc, #44]	; (800552c <prvCheckTasksWaitingTermination+0x54>)
 80054fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <prvCheckTasksWaitingTermination+0x58>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3b01      	subs	r3, #1
 8005506:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <prvCheckTasksWaitingTermination+0x58>)
 8005508:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800550a:	f000 fdeb 	bl	80060e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f810 	bl	8005534 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005514:	4b06      	ldr	r3, [pc, #24]	; (8005530 <prvCheckTasksWaitingTermination+0x58>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e1      	bne.n	80054e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000bf8 	.word	0x20000bf8
 800552c:	20000c24 	.word	0x20000c24
 8005530:	20000c0c 	.word	0x20000c0c

08005534 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005542:	2b00      	cmp	r3, #0
 8005544:	d108      	bne.n	8005558 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	4618      	mov	r0, r3
 800554c:	f000 ff88 	bl	8006460 <vPortFree>
				vPortFree( pxTCB );
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 ff85 	bl	8006460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005556:	e018      	b.n	800558a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800555e:	2b01      	cmp	r3, #1
 8005560:	d103      	bne.n	800556a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 ff7c 	bl	8006460 <vPortFree>
	}
 8005568:	e00f      	b.n	800558a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005570:	2b02      	cmp	r3, #2
 8005572:	d00a      	beq.n	800558a <prvDeleteTCB+0x56>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	60fb      	str	r3, [r7, #12]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <prvDeleteTCB+0x54>
	}
 800558a:	bf00      	nop
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800559a:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <prvResetNextTaskUnblockTime+0x38>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055a4:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <prvResetNextTaskUnblockTime+0x3c>)
 80055a6:	f04f 32ff 	mov.w	r2, #4294967295
 80055aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055ac:	e008      	b.n	80055c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <prvResetNextTaskUnblockTime+0x38>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4a04      	ldr	r2, [pc, #16]	; (80055d0 <prvResetNextTaskUnblockTime+0x3c>)
 80055be:	6013      	str	r3, [r2, #0]
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	20000bdc 	.word	0x20000bdc
 80055d0:	20000c44 	.word	0x20000c44

080055d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055da:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <xTaskGetSchedulerState+0x34>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d102      	bne.n	80055e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055e2:	2301      	movs	r3, #1
 80055e4:	607b      	str	r3, [r7, #4]
 80055e6:	e008      	b.n	80055fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e8:	4b08      	ldr	r3, [pc, #32]	; (800560c <xTaskGetSchedulerState+0x38>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055f0:	2302      	movs	r3, #2
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	e001      	b.n	80055fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055f6:	2300      	movs	r3, #0
 80055f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055fa:	687b      	ldr	r3, [r7, #4]
	}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	20000c30 	.word	0x20000c30
 800560c:	20000c4c 	.word	0x20000c4c

08005610 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d056      	beq.n	80056d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005626:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <xTaskPriorityDisinherit+0xd0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	429a      	cmp	r2, r3
 800562e:	d00a      	beq.n	8005646 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	60fb      	str	r3, [r7, #12]
}
 8005642:	bf00      	nop
 8005644:	e7fe      	b.n	8005644 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	60bb      	str	r3, [r7, #8]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	1e5a      	subs	r2, r3, #1
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005676:	429a      	cmp	r2, r3
 8005678:	d02c      	beq.n	80056d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567e:	2b00      	cmp	r3, #0
 8005680:	d128      	bne.n	80056d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	3304      	adds	r3, #4
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fbea 	bl	8003e60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <xTaskPriorityDisinherit+0xd4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d903      	bls.n	80056b4 <xTaskPriorityDisinherit+0xa4>
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <xTaskPriorityDisinherit+0xd4>)
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4a09      	ldr	r2, [pc, #36]	; (80056e8 <xTaskPriorityDisinherit+0xd8>)
 80056c2:	441a      	add	r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f7fe fb6b 	bl	8003da6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056d0:	2301      	movs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056d4:	697b      	ldr	r3, [r7, #20]
	}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000750 	.word	0x20000750
 80056e4:	20000c2c 	.word	0x20000c2c
 80056e8:	20000754 	.word	0x20000754

080056ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056f6:	4b21      	ldr	r3, [pc, #132]	; (800577c <prvAddCurrentTaskToDelayedList+0x90>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056fc:	4b20      	ldr	r3, [pc, #128]	; (8005780 <prvAddCurrentTaskToDelayedList+0x94>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fbac 	bl	8003e60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d10a      	bne.n	8005726 <prvAddCurrentTaskToDelayedList+0x3a>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005716:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <prvAddCurrentTaskToDelayedList+0x94>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3304      	adds	r3, #4
 800571c:	4619      	mov	r1, r3
 800571e:	4819      	ldr	r0, [pc, #100]	; (8005784 <prvAddCurrentTaskToDelayedList+0x98>)
 8005720:	f7fe fb41 	bl	8003da6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005724:	e026      	b.n	8005774 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4413      	add	r3, r2
 800572c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800572e:	4b14      	ldr	r3, [pc, #80]	; (8005780 <prvAddCurrentTaskToDelayedList+0x94>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	429a      	cmp	r2, r3
 800573c:	d209      	bcs.n	8005752 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800573e:	4b12      	ldr	r3, [pc, #72]	; (8005788 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <prvAddCurrentTaskToDelayedList+0x94>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3304      	adds	r3, #4
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f7fe fb4f 	bl	8003dee <vListInsert>
}
 8005750:	e010      	b.n	8005774 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005752:	4b0e      	ldr	r3, [pc, #56]	; (800578c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <prvAddCurrentTaskToDelayedList+0x94>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3304      	adds	r3, #4
 800575c:	4619      	mov	r1, r3
 800575e:	4610      	mov	r0, r2
 8005760:	f7fe fb45 	bl	8003dee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	429a      	cmp	r2, r3
 800576c:	d202      	bcs.n	8005774 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800576e:	4a08      	ldr	r2, [pc, #32]	; (8005790 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6013      	str	r3, [r2, #0]
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20000c28 	.word	0x20000c28
 8005780:	20000750 	.word	0x20000750
 8005784:	20000c10 	.word	0x20000c10
 8005788:	20000be0 	.word	0x20000be0
 800578c:	20000bdc 	.word	0x20000bdc
 8005790:	20000c44 	.word	0x20000c44

08005794 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08a      	sub	sp, #40	; 0x28
 8005798:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800579e:	f000 fb07 	bl	8005db0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057a2:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <xTimerCreateTimerTask+0x80>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d021      	beq.n	80057ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80057b2:	1d3a      	adds	r2, r7, #4
 80057b4:	f107 0108 	add.w	r1, r7, #8
 80057b8:	f107 030c 	add.w	r3, r7, #12
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fe faab 	bl	8003d18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	9202      	str	r2, [sp, #8]
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	2302      	movs	r3, #2
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	2300      	movs	r3, #0
 80057d2:	460a      	mov	r2, r1
 80057d4:	4910      	ldr	r1, [pc, #64]	; (8005818 <xTimerCreateTimerTask+0x84>)
 80057d6:	4811      	ldr	r0, [pc, #68]	; (800581c <xTimerCreateTimerTask+0x88>)
 80057d8:	f7ff f912 	bl	8004a00 <xTaskCreateStatic>
 80057dc:	4603      	mov	r3, r0
 80057de:	4a10      	ldr	r2, [pc, #64]	; (8005820 <xTimerCreateTimerTask+0x8c>)
 80057e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80057e2:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <xTimerCreateTimerTask+0x8c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80057ea:	2301      	movs	r3, #1
 80057ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	613b      	str	r3, [r7, #16]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800580a:	697b      	ldr	r3, [r7, #20]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000c80 	.word	0x20000c80
 8005818:	080077b8 	.word	0x080077b8
 800581c:	08005959 	.word	0x08005959
 8005820:	20000c84 	.word	0x20000c84

08005824 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08a      	sub	sp, #40	; 0x28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005832:	2300      	movs	r3, #0
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <xTimerGenericCommand+0x2e>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	623b      	str	r3, [r7, #32]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005852:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <xTimerGenericCommand+0x98>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d02a      	beq.n	80058b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b05      	cmp	r3, #5
 800586a:	dc18      	bgt.n	800589e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800586c:	f7ff feb2 	bl	80055d4 <xTaskGetSchedulerState>
 8005870:	4603      	mov	r3, r0
 8005872:	2b02      	cmp	r3, #2
 8005874:	d109      	bne.n	800588a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005876:	4b11      	ldr	r3, [pc, #68]	; (80058bc <xTimerGenericCommand+0x98>)
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	f107 0110 	add.w	r1, r7, #16
 800587e:	2300      	movs	r3, #0
 8005880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005882:	f7fe fc55 	bl	8004130 <xQueueGenericSend>
 8005886:	6278      	str	r0, [r7, #36]	; 0x24
 8005888:	e012      	b.n	80058b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <xTimerGenericCommand+0x98>)
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	f107 0110 	add.w	r1, r7, #16
 8005892:	2300      	movs	r3, #0
 8005894:	2200      	movs	r2, #0
 8005896:	f7fe fc4b 	bl	8004130 <xQueueGenericSend>
 800589a:	6278      	str	r0, [r7, #36]	; 0x24
 800589c:	e008      	b.n	80058b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800589e:	4b07      	ldr	r3, [pc, #28]	; (80058bc <xTimerGenericCommand+0x98>)
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	f107 0110 	add.w	r1, r7, #16
 80058a6:	2300      	movs	r3, #0
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	f7fe fd3f 	bl	800432c <xQueueGenericSendFromISR>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3728      	adds	r7, #40	; 0x28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000c80 	.word	0x20000c80

080058c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ca:	4b22      	ldr	r3, [pc, #136]	; (8005954 <prvProcessExpiredTimer+0x94>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe fac1 	bl	8003e60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d022      	beq.n	8005932 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	699a      	ldr	r2, [r3, #24]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	18d1      	adds	r1, r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	6978      	ldr	r0, [r7, #20]
 80058fa:	f000 f8d1 	bl	8005aa0 <prvInsertTimerInActiveList>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01f      	beq.n	8005944 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005904:	2300      	movs	r3, #0
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	2300      	movs	r3, #0
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	2100      	movs	r1, #0
 800590e:	6978      	ldr	r0, [r7, #20]
 8005910:	f7ff ff88 	bl	8005824 <xTimerGenericCommand>
 8005914:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d113      	bne.n	8005944 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	60fb      	str	r3, [r7, #12]
}
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	b2da      	uxtb	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	6978      	ldr	r0, [r7, #20]
 800594a:	4798      	blx	r3
}
 800594c:	bf00      	nop
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000c78 	.word	0x20000c78

08005958 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005960:	f107 0308 	add.w	r3, r7, #8
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f857 	bl	8005a18 <prvGetNextExpireTime>
 800596a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4619      	mov	r1, r3
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f803 	bl	800597c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005976:	f000 f8d5 	bl	8005b24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800597a:	e7f1      	b.n	8005960 <prvTimerTask+0x8>

0800597c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005986:	f7ff fa43 	bl	8004e10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800598a:	f107 0308 	add.w	r3, r7, #8
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f866 	bl	8005a60 <prvSampleTimeNow>
 8005994:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d130      	bne.n	80059fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <prvProcessTimerOrBlockTask+0x3c>
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d806      	bhi.n	80059b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059aa:	f7ff fa3f 	bl	8004e2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059ae:	68f9      	ldr	r1, [r7, #12]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff ff85 	bl	80058c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059b6:	e024      	b.n	8005a02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d008      	beq.n	80059d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80059be:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <prvProcessTimerOrBlockTask+0x90>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <prvProcessTimerOrBlockTask+0x50>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <prvProcessTimerOrBlockTask+0x52>
 80059cc:	2300      	movs	r3, #0
 80059ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80059d0:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <prvProcessTimerOrBlockTask+0x94>)
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	4619      	mov	r1, r3
 80059de:	f7fe ffdb 	bl	8004998 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80059e2:	f7ff fa23 	bl	8004e2c <xTaskResumeAll>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80059ec:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <prvProcessTimerOrBlockTask+0x98>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
}
 80059fc:	e001      	b.n	8005a02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80059fe:	f7ff fa15 	bl	8004e2c <xTaskResumeAll>
}
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000c7c 	.word	0x20000c7c
 8005a10:	20000c80 	.word	0x20000c80
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a20:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <prvGetNextExpireTime+0x44>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <prvGetNextExpireTime+0x16>
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	e000      	b.n	8005a30 <prvGetNextExpireTime+0x18>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d105      	bne.n	8005a48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a3c:	4b07      	ldr	r3, [pc, #28]	; (8005a5c <prvGetNextExpireTime+0x44>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	e001      	b.n	8005a4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000c78 	.word	0x20000c78

08005a60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a68:	f7ff fa7e 	bl	8004f68 <xTaskGetTickCount>
 8005a6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <prvSampleTimeNow+0x3c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d205      	bcs.n	8005a84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a78:	f000 f936 	bl	8005ce8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	e002      	b.n	8005a8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a8a:	4a04      	ldr	r2, [pc, #16]	; (8005a9c <prvSampleTimeNow+0x3c>)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a90:	68fb      	ldr	r3, [r7, #12]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000c88 	.word	0x20000c88

08005aa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d812      	bhi.n	8005aec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d302      	bcc.n	8005ada <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	e01b      	b.n	8005b12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ada:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <prvInsertTimerInActiveList+0x7c>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	f7fe f982 	bl	8003dee <vListInsert>
 8005aea:	e012      	b.n	8005b12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d206      	bcs.n	8005b02 <prvInsertTimerInActiveList+0x62>
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d302      	bcc.n	8005b02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005afc:	2301      	movs	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e007      	b.n	8005b12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <prvInsertTimerInActiveList+0x80>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f7fe f96e 	bl	8003dee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b12:	697b      	ldr	r3, [r7, #20]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000c7c 	.word	0x20000c7c
 8005b20:	20000c78 	.word	0x20000c78

08005b24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08e      	sub	sp, #56	; 0x38
 8005b28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b2a:	e0ca      	b.n	8005cc2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	da18      	bge.n	8005b64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b32:	1d3b      	adds	r3, r7, #4
 8005b34:	3304      	adds	r3, #4
 8005b36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	61fb      	str	r3, [r7, #28]
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b5a:	6850      	ldr	r0, [r2, #4]
 8005b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b5e:	6892      	ldr	r2, [r2, #8]
 8005b60:	4611      	mov	r1, r2
 8005b62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f2c0 80aa 	blt.w	8005cc0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe f96f 	bl	8003e60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b82:	463b      	mov	r3, r7
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff ff6b 	bl	8005a60 <prvSampleTimeNow>
 8005b8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b09      	cmp	r3, #9
 8005b90:	f200 8097 	bhi.w	8005cc2 <prvProcessReceivedCommands+0x19e>
 8005b94:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <prvProcessReceivedCommands+0x78>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005bc5 	.word	0x08005bc5
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005bc5 	.word	0x08005bc5
 8005ba8:	08005c39 	.word	0x08005c39
 8005bac:	08005c4d 	.word	0x08005c4d
 8005bb0:	08005c97 	.word	0x08005c97
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005bc5 	.word	0x08005bc5
 8005bbc:	08005c39 	.word	0x08005c39
 8005bc0:	08005c4d 	.word	0x08005c4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	18d1      	adds	r1, r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005be4:	f7ff ff5c 	bl	8005aa0 <prvInsertTimerInActiveList>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d069      	beq.n	8005cc2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d05e      	beq.n	8005cc2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	441a      	add	r2, r3
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	2300      	movs	r3, #0
 8005c12:	2100      	movs	r1, #0
 8005c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c16:	f7ff fe05 	bl	8005824 <xTimerGenericCommand>
 8005c1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d14f      	bne.n	8005cc2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	61bb      	str	r3, [r7, #24]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005c4a:	e03a      	b.n	8005cc2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c52:	f043 0301 	orr.w	r3, r3, #1
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	617b      	str	r3, [r7, #20]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	18d1      	adds	r1, r2, r3
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c90:	f7ff ff06 	bl	8005aa0 <prvInsertTimerInActiveList>
					break;
 8005c94:	e015      	b.n	8005cc2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d103      	bne.n	8005cac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca6:	f000 fbdb 	bl	8006460 <vPortFree>
 8005caa:	e00a      	b.n	8005cc2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cbe:	e000      	b.n	8005cc2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005cc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <prvProcessReceivedCommands+0x1c0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	1d39      	adds	r1, r7, #4
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fbca 	bl	8004464 <xQueueReceive>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f47f af2a 	bne.w	8005b2c <prvProcessReceivedCommands+0x8>
	}
}
 8005cd8:	bf00      	nop
 8005cda:	bf00      	nop
 8005cdc:	3730      	adds	r7, #48	; 0x30
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000c80 	.word	0x20000c80

08005ce8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cee:	e048      	b.n	8005d82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cf0:	4b2d      	ldr	r3, [pc, #180]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cfa:	4b2b      	ldr	r3, [pc, #172]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe f8a9 	bl	8003e60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d02e      	beq.n	8005d82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d90e      	bls.n	8005d54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d42:	4b19      	ldr	r3, [pc, #100]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f7fe f84e 	bl	8003dee <vListInsert>
 8005d52:	e016      	b.n	8005d82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d54:	2300      	movs	r3, #0
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f7ff fd60 	bl	8005824 <xTimerGenericCommand>
 8005d64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	603b      	str	r3, [r7, #0]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1b1      	bne.n	8005cf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d92:	4b06      	ldr	r3, [pc, #24]	; (8005dac <prvSwitchTimerLists+0xc4>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a04      	ldr	r2, [pc, #16]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005d98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d9a:	4a04      	ldr	r2, [pc, #16]	; (8005dac <prvSwitchTimerLists+0xc4>)
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	6013      	str	r3, [r2, #0]
}
 8005da0:	bf00      	nop
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20000c78 	.word	0x20000c78
 8005dac:	20000c7c 	.word	0x20000c7c

08005db0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005db6:	f000 f965 	bl	8006084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005dba:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <prvCheckForValidListAndQueue+0x60>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d120      	bne.n	8005e04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005dc2:	4814      	ldr	r0, [pc, #80]	; (8005e14 <prvCheckForValidListAndQueue+0x64>)
 8005dc4:	f7fd ffc2 	bl	8003d4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005dc8:	4813      	ldr	r0, [pc, #76]	; (8005e18 <prvCheckForValidListAndQueue+0x68>)
 8005dca:	f7fd ffbf 	bl	8003d4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005dce:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <prvCheckForValidListAndQueue+0x6c>)
 8005dd0:	4a10      	ldr	r2, [pc, #64]	; (8005e14 <prvCheckForValidListAndQueue+0x64>)
 8005dd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005dd4:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <prvCheckForValidListAndQueue+0x70>)
 8005dd6:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <prvCheckForValidListAndQueue+0x68>)
 8005dd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005dda:	2300      	movs	r3, #0
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <prvCheckForValidListAndQueue+0x74>)
 8005de0:	4a11      	ldr	r2, [pc, #68]	; (8005e28 <prvCheckForValidListAndQueue+0x78>)
 8005de2:	2110      	movs	r1, #16
 8005de4:	200a      	movs	r0, #10
 8005de6:	f7fe f8cd 	bl	8003f84 <xQueueGenericCreateStatic>
 8005dea:	4603      	mov	r3, r0
 8005dec:	4a08      	ldr	r2, [pc, #32]	; (8005e10 <prvCheckForValidListAndQueue+0x60>)
 8005dee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <prvCheckForValidListAndQueue+0x60>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005df8:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <prvCheckForValidListAndQueue+0x60>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	490b      	ldr	r1, [pc, #44]	; (8005e2c <prvCheckForValidListAndQueue+0x7c>)
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fda0 	bl	8004944 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e04:	f000 f96e 	bl	80060e4 <vPortExitCritical>
}
 8005e08:	bf00      	nop
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000c80 	.word	0x20000c80
 8005e14:	20000c50 	.word	0x20000c50
 8005e18:	20000c64 	.word	0x20000c64
 8005e1c:	20000c78 	.word	0x20000c78
 8005e20:	20000c7c 	.word	0x20000c7c
 8005e24:	20000d2c 	.word	0x20000d2c
 8005e28:	20000c8c 	.word	0x20000c8c
 8005e2c:	080077c0 	.word	0x080077c0

08005e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3b04      	subs	r3, #4
 8005e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3b04      	subs	r3, #4
 8005e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f023 0201 	bic.w	r2, r3, #1
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3b04      	subs	r3, #4
 8005e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e60:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <pxPortInitialiseStack+0x64>)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3b14      	subs	r3, #20
 8005e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3b04      	subs	r3, #4
 8005e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f06f 0202 	mvn.w	r2, #2
 8005e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3b20      	subs	r3, #32
 8005e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e86:	68fb      	ldr	r3, [r7, #12]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	08005e99 	.word	0x08005e99

08005e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <prvTaskExitError+0x54>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d00a      	beq.n	8005ec2 <prvTaskExitError+0x2a>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	60fb      	str	r3, [r7, #12]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <prvTaskExitError+0x28>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60bb      	str	r3, [r7, #8]
}
 8005ed4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ed6:	bf00      	nop
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0fc      	beq.n	8005ed8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	2000000c 	.word	0x2000000c

08005ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <pxCurrentTCBConst2>)
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	6808      	ldr	r0, [r1, #0]
 8005ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	f380 8809 	msr	PSP, r0
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	4770      	bx	lr
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst2>:
 8005f10:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f18:	4808      	ldr	r0, [pc, #32]	; (8005f3c <prvPortStartFirstTask+0x24>)
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	6800      	ldr	r0, [r0, #0]
 8005f1e:	f380 8808 	msr	MSP, r0
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f380 8814 	msr	CONTROL, r0
 8005f2a:	b662      	cpsie	i
 8005f2c:	b661      	cpsie	f
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	df00      	svc	0
 8005f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f3a:	bf00      	nop
 8005f3c:	e000ed08 	.word	0xe000ed08

08005f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f46:	4b46      	ldr	r3, [pc, #280]	; (8006060 <xPortStartScheduler+0x120>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a46      	ldr	r2, [pc, #280]	; (8006064 <xPortStartScheduler+0x124>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10a      	bne.n	8005f66 <xPortStartScheduler+0x26>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f66:	4b3e      	ldr	r3, [pc, #248]	; (8006060 <xPortStartScheduler+0x120>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a3f      	ldr	r2, [pc, #252]	; (8006068 <xPortStartScheduler+0x128>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10a      	bne.n	8005f86 <xPortStartScheduler+0x46>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60fb      	str	r3, [r7, #12]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f86:	4b39      	ldr	r3, [pc, #228]	; (800606c <xPortStartScheduler+0x12c>)
 8005f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	22ff      	movs	r2, #255	; 0xff
 8005f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4b31      	ldr	r3, [pc, #196]	; (8006070 <xPortStartScheduler+0x130>)
 8005fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fae:	4b31      	ldr	r3, [pc, #196]	; (8006074 <xPortStartScheduler+0x134>)
 8005fb0:	2207      	movs	r2, #7
 8005fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fb4:	e009      	b.n	8005fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <xPortStartScheduler+0x134>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	4a2d      	ldr	r2, [pc, #180]	; (8006074 <xPortStartScheduler+0x134>)
 8005fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b80      	cmp	r3, #128	; 0x80
 8005fd4:	d0ef      	beq.n	8005fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fd6:	4b27      	ldr	r3, [pc, #156]	; (8006074 <xPortStartScheduler+0x134>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1c3 0307 	rsb	r3, r3, #7
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d00a      	beq.n	8005ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	60bb      	str	r3, [r7, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <xPortStartScheduler+0x134>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	4a1d      	ldr	r2, [pc, #116]	; (8006074 <xPortStartScheduler+0x134>)
 8006000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006002:	4b1c      	ldr	r3, [pc, #112]	; (8006074 <xPortStartScheduler+0x134>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800600a:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <xPortStartScheduler+0x134>)
 800600c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006016:	4b18      	ldr	r3, [pc, #96]	; (8006078 <xPortStartScheduler+0x138>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <xPortStartScheduler+0x138>)
 800601c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <xPortStartScheduler+0x138>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a14      	ldr	r2, [pc, #80]	; (8006078 <xPortStartScheduler+0x138>)
 8006028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800602c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800602e:	f000 f8dd 	bl	80061ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006032:	4b12      	ldr	r3, [pc, #72]	; (800607c <xPortStartScheduler+0x13c>)
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006038:	f000 f8fc 	bl	8006234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <xPortStartScheduler+0x140>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a0f      	ldr	r2, [pc, #60]	; (8006080 <xPortStartScheduler+0x140>)
 8006042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006048:	f7ff ff66 	bl	8005f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800604c:	f7ff f856 	bl	80050fc <vTaskSwitchContext>
	prvTaskExitError();
 8006050:	f7ff ff22 	bl	8005e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	e000ed00 	.word	0xe000ed00
 8006064:	410fc271 	.word	0x410fc271
 8006068:	410fc270 	.word	0x410fc270
 800606c:	e000e400 	.word	0xe000e400
 8006070:	20000d7c 	.word	0x20000d7c
 8006074:	20000d80 	.word	0x20000d80
 8006078:	e000ed20 	.word	0xe000ed20
 800607c:	2000000c 	.word	0x2000000c
 8006080:	e000ef34 	.word	0xe000ef34

08006084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	607b      	str	r3, [r7, #4]
}
 800609c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <vPortEnterCritical+0x58>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <vPortEnterCritical+0x58>)
 80060a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <vPortEnterCritical+0x58>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d10f      	bne.n	80060d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <vPortEnterCritical+0x5c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	603b      	str	r3, [r7, #0]
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <vPortEnterCritical+0x4a>
	}
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	2000000c 	.word	0x2000000c
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060ea:	4b12      	ldr	r3, [pc, #72]	; (8006134 <vPortExitCritical+0x50>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <vPortExitCritical+0x24>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	607b      	str	r3, [r7, #4]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <vPortExitCritical+0x50>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3b01      	subs	r3, #1
 800610e:	4a09      	ldr	r2, [pc, #36]	; (8006134 <vPortExitCritical+0x50>)
 8006110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006112:	4b08      	ldr	r3, [pc, #32]	; (8006134 <vPortExitCritical+0x50>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d105      	bne.n	8006126 <vPortExitCritical+0x42>
 800611a:	2300      	movs	r3, #0
 800611c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f383 8811 	msr	BASEPRI, r3
}
 8006124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	2000000c 	.word	0x2000000c
	...

08006140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006140:	f3ef 8009 	mrs	r0, PSP
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <pxCurrentTCBConst>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f01e 0f10 	tst.w	lr, #16
 8006150:	bf08      	it	eq
 8006152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615a:	6010      	str	r0, [r2, #0]
 800615c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006164:	f380 8811 	msr	BASEPRI, r0
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f7fe ffc4 	bl	80050fc <vTaskSwitchContext>
 8006174:	f04f 0000 	mov.w	r0, #0
 8006178:	f380 8811 	msr	BASEPRI, r0
 800617c:	bc09      	pop	{r0, r3}
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	6808      	ldr	r0, [r1, #0]
 8006182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006186:	f01e 0f10 	tst.w	lr, #16
 800618a:	bf08      	it	eq
 800618c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006190:	f380 8809 	msr	PSP, r0
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	f3af 8000 	nop.w

080061a0 <pxCurrentTCBConst>:
 80061a0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop

080061a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	607b      	str	r3, [r7, #4]
}
 80061c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061c2:	f7fe fee1 	bl	8004f88 <xTaskIncrementTick>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061cc:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <xPortSysTickHandler+0x40>)
 80061ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	2300      	movs	r3, #0
 80061d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f383 8811 	msr	BASEPRI, r3
}
 80061de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <vPortSetupTimerInterrupt+0x34>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <vPortSetupTimerInterrupt+0x38>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <vPortSetupTimerInterrupt+0x3c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a0a      	ldr	r2, [pc, #40]	; (800622c <vPortSetupTimerInterrupt+0x40>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	4a09      	ldr	r2, [pc, #36]	; (8006230 <vPortSetupTimerInterrupt+0x44>)
 800620a:	3b01      	subs	r3, #1
 800620c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800620e:	4b04      	ldr	r3, [pc, #16]	; (8006220 <vPortSetupTimerInterrupt+0x34>)
 8006210:	2207      	movs	r2, #7
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	e000e010 	.word	0xe000e010
 8006224:	e000e018 	.word	0xe000e018
 8006228:	20000000 	.word	0x20000000
 800622c:	10624dd3 	.word	0x10624dd3
 8006230:	e000e014 	.word	0xe000e014

08006234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006244 <vPortEnableVFP+0x10>
 8006238:	6801      	ldr	r1, [r0, #0]
 800623a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800623e:	6001      	str	r1, [r0, #0]
 8006240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006242:	bf00      	nop
 8006244:	e000ed88 	.word	0xe000ed88

08006248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800624e:	f3ef 8305 	mrs	r3, IPSR
 8006252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b0f      	cmp	r3, #15
 8006258:	d914      	bls.n	8006284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800625a:	4a17      	ldr	r2, [pc, #92]	; (80062b8 <vPortValidateInterruptPriority+0x70>)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006264:	4b15      	ldr	r3, [pc, #84]	; (80062bc <vPortValidateInterruptPriority+0x74>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	7afa      	ldrb	r2, [r7, #11]
 800626a:	429a      	cmp	r2, r3
 800626c:	d20a      	bcs.n	8006284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	607b      	str	r3, [r7, #4]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006284:	4b0e      	ldr	r3, [pc, #56]	; (80062c0 <vPortValidateInterruptPriority+0x78>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800628c:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <vPortValidateInterruptPriority+0x7c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d90a      	bls.n	80062aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	603b      	str	r3, [r7, #0]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <vPortValidateInterruptPriority+0x60>
	}
 80062aa:	bf00      	nop
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	e000e3f0 	.word	0xe000e3f0
 80062bc:	20000d7c 	.word	0x20000d7c
 80062c0:	e000ed0c 	.word	0xe000ed0c
 80062c4:	20000d80 	.word	0x20000d80

080062c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062d4:	f7fe fd9c 	bl	8004e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062d8:	4b5b      	ldr	r3, [pc, #364]	; (8006448 <pvPortMalloc+0x180>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062e0:	f000 f920 	bl	8006524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062e4:	4b59      	ldr	r3, [pc, #356]	; (800644c <pvPortMalloc+0x184>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4013      	ands	r3, r2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f040 8093 	bne.w	8006418 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01d      	beq.n	8006334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80062f8:	2208      	movs	r2, #8
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4413      	add	r3, r2
 80062fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	2b00      	cmp	r3, #0
 8006308:	d014      	beq.n	8006334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f023 0307 	bic.w	r3, r3, #7
 8006310:	3308      	adds	r3, #8
 8006312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <pvPortMalloc+0x6c>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	617b      	str	r3, [r7, #20]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d06e      	beq.n	8006418 <pvPortMalloc+0x150>
 800633a:	4b45      	ldr	r3, [pc, #276]	; (8006450 <pvPortMalloc+0x188>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	429a      	cmp	r2, r3
 8006342:	d869      	bhi.n	8006418 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006344:	4b43      	ldr	r3, [pc, #268]	; (8006454 <pvPortMalloc+0x18c>)
 8006346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006348:	4b42      	ldr	r3, [pc, #264]	; (8006454 <pvPortMalloc+0x18c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800634e:	e004      	b.n	800635a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	429a      	cmp	r2, r3
 8006362:	d903      	bls.n	800636c <pvPortMalloc+0xa4>
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f1      	bne.n	8006350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800636c:	4b36      	ldr	r3, [pc, #216]	; (8006448 <pvPortMalloc+0x180>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006372:	429a      	cmp	r2, r3
 8006374:	d050      	beq.n	8006418 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2208      	movs	r2, #8
 800637c:	4413      	add	r3, r2
 800637e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	1ad2      	subs	r2, r2, r3
 8006390:	2308      	movs	r3, #8
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	429a      	cmp	r2, r3
 8006396:	d91f      	bls.n	80063d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4413      	add	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <pvPortMalloc+0xf8>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	613b      	str	r3, [r7, #16]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	1ad2      	subs	r2, r2, r3
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063d2:	69b8      	ldr	r0, [r7, #24]
 80063d4:	f000 f908 	bl	80065e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063d8:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <pvPortMalloc+0x188>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <pvPortMalloc+0x188>)
 80063e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063e6:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <pvPortMalloc+0x188>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4b1b      	ldr	r3, [pc, #108]	; (8006458 <pvPortMalloc+0x190>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d203      	bcs.n	80063fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063f2:	4b17      	ldr	r3, [pc, #92]	; (8006450 <pvPortMalloc+0x188>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a18      	ldr	r2, [pc, #96]	; (8006458 <pvPortMalloc+0x190>)
 80063f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <pvPortMalloc+0x184>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	431a      	orrs	r2, r3
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800640e:	4b13      	ldr	r3, [pc, #76]	; (800645c <pvPortMalloc+0x194>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3301      	adds	r3, #1
 8006414:	4a11      	ldr	r2, [pc, #68]	; (800645c <pvPortMalloc+0x194>)
 8006416:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006418:	f7fe fd08 	bl	8004e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <pvPortMalloc+0x174>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60fb      	str	r3, [r7, #12]
}
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <pvPortMalloc+0x172>
	return pvReturn;
 800643c:	69fb      	ldr	r3, [r7, #28]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3728      	adds	r7, #40	; 0x28
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20001944 	.word	0x20001944
 800644c:	20001958 	.word	0x20001958
 8006450:	20001948 	.word	0x20001948
 8006454:	2000193c 	.word	0x2000193c
 8006458:	2000194c 	.word	0x2000194c
 800645c:	20001950 	.word	0x20001950

08006460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d04d      	beq.n	800650e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006472:	2308      	movs	r3, #8
 8006474:	425b      	negs	r3, r3
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4413      	add	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	4b24      	ldr	r3, [pc, #144]	; (8006518 <vPortFree+0xb8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4013      	ands	r3, r2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <vPortFree+0x44>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	60fb      	str	r3, [r7, #12]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <vPortFree+0x62>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	60bb      	str	r3, [r7, #8]
}
 80064be:	bf00      	nop
 80064c0:	e7fe      	b.n	80064c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	4b14      	ldr	r3, [pc, #80]	; (8006518 <vPortFree+0xb8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01e      	beq.n	800650e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d11a      	bne.n	800650e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	4b0e      	ldr	r3, [pc, #56]	; (8006518 <vPortFree+0xb8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	43db      	mvns	r3, r3
 80064e2:	401a      	ands	r2, r3
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064e8:	f7fe fc92 	bl	8004e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	4b0a      	ldr	r3, [pc, #40]	; (800651c <vPortFree+0xbc>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4413      	add	r3, r2
 80064f6:	4a09      	ldr	r2, [pc, #36]	; (800651c <vPortFree+0xbc>)
 80064f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064fa:	6938      	ldr	r0, [r7, #16]
 80064fc:	f000 f874 	bl	80065e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006500:	4b07      	ldr	r3, [pc, #28]	; (8006520 <vPortFree+0xc0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	4a06      	ldr	r2, [pc, #24]	; (8006520 <vPortFree+0xc0>)
 8006508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800650a:	f7fe fc8f 	bl	8004e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800650e:	bf00      	nop
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20001958 	.word	0x20001958
 800651c:	20001948 	.word	0x20001948
 8006520:	20001954 	.word	0x20001954

08006524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800652a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800652e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006530:	4b27      	ldr	r3, [pc, #156]	; (80065d0 <prvHeapInit+0xac>)
 8006532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00c      	beq.n	8006558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3307      	adds	r3, #7
 8006542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0307 	bic.w	r3, r3, #7
 800654a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	4a1f      	ldr	r2, [pc, #124]	; (80065d0 <prvHeapInit+0xac>)
 8006554:	4413      	add	r3, r2
 8006556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800655c:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <prvHeapInit+0xb0>)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006562:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <prvHeapInit+0xb0>)
 8006564:	2200      	movs	r2, #0
 8006566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4413      	add	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006570:	2208      	movs	r2, #8
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	1a9b      	subs	r3, r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0307 	bic.w	r3, r3, #7
 800657e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4a15      	ldr	r2, [pc, #84]	; (80065d8 <prvHeapInit+0xb4>)
 8006584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006586:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <prvHeapInit+0xb4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2200      	movs	r2, #0
 800658c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800658e:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <prvHeapInit+0xb4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	1ad2      	subs	r2, r2, r3
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065a4:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <prvHeapInit+0xb4>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <prvHeapInit+0xb8>)
 80065b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <prvHeapInit+0xbc>)
 80065ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065bc:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <prvHeapInit+0xc0>)
 80065be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065c2:	601a      	str	r2, [r3, #0]
}
 80065c4:	bf00      	nop
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	20000d84 	.word	0x20000d84
 80065d4:	2000193c 	.word	0x2000193c
 80065d8:	20001944 	.word	0x20001944
 80065dc:	2000194c 	.word	0x2000194c
 80065e0:	20001948 	.word	0x20001948
 80065e4:	20001958 	.word	0x20001958

080065e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065f0:	4b28      	ldr	r3, [pc, #160]	; (8006694 <prvInsertBlockIntoFreeList+0xac>)
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e002      	b.n	80065fc <prvInsertBlockIntoFreeList+0x14>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	429a      	cmp	r2, r3
 8006604:	d8f7      	bhi.n	80065f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	4413      	add	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	429a      	cmp	r2, r3
 8006616:	d108      	bne.n	800662a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	441a      	add	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	441a      	add	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d118      	bne.n	8006670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4b15      	ldr	r3, [pc, #84]	; (8006698 <prvInsertBlockIntoFreeList+0xb0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d00d      	beq.n	8006666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	441a      	add	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e008      	b.n	8006678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006666:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <prvInsertBlockIntoFreeList+0xb0>)
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e003      	b.n	8006678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	429a      	cmp	r2, r3
 800667e:	d002      	beq.n	8006686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006686:	bf00      	nop
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	2000193c 	.word	0x2000193c
 8006698:	20001944 	.word	0x20001944

0800669c <__errno>:
 800669c:	4b01      	ldr	r3, [pc, #4]	; (80066a4 <__errno+0x8>)
 800669e:	6818      	ldr	r0, [r3, #0]
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	20000010 	.word	0x20000010

080066a8 <__libc_init_array>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	4d0d      	ldr	r5, [pc, #52]	; (80066e0 <__libc_init_array+0x38>)
 80066ac:	4c0d      	ldr	r4, [pc, #52]	; (80066e4 <__libc_init_array+0x3c>)
 80066ae:	1b64      	subs	r4, r4, r5
 80066b0:	10a4      	asrs	r4, r4, #2
 80066b2:	2600      	movs	r6, #0
 80066b4:	42a6      	cmp	r6, r4
 80066b6:	d109      	bne.n	80066cc <__libc_init_array+0x24>
 80066b8:	4d0b      	ldr	r5, [pc, #44]	; (80066e8 <__libc_init_array+0x40>)
 80066ba:	4c0c      	ldr	r4, [pc, #48]	; (80066ec <__libc_init_array+0x44>)
 80066bc:	f000 fffa 	bl	80076b4 <_init>
 80066c0:	1b64      	subs	r4, r4, r5
 80066c2:	10a4      	asrs	r4, r4, #2
 80066c4:	2600      	movs	r6, #0
 80066c6:	42a6      	cmp	r6, r4
 80066c8:	d105      	bne.n	80066d6 <__libc_init_array+0x2e>
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d0:	4798      	blx	r3
 80066d2:	3601      	adds	r6, #1
 80066d4:	e7ee      	b.n	80066b4 <__libc_init_array+0xc>
 80066d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066da:	4798      	blx	r3
 80066dc:	3601      	adds	r6, #1
 80066de:	e7f2      	b.n	80066c6 <__libc_init_array+0x1e>
 80066e0:	0800791c 	.word	0x0800791c
 80066e4:	0800791c 	.word	0x0800791c
 80066e8:	0800791c 	.word	0x0800791c
 80066ec:	08007920 	.word	0x08007920

080066f0 <memcpy>:
 80066f0:	440a      	add	r2, r1
 80066f2:	4291      	cmp	r1, r2
 80066f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066f8:	d100      	bne.n	80066fc <memcpy+0xc>
 80066fa:	4770      	bx	lr
 80066fc:	b510      	push	{r4, lr}
 80066fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006706:	4291      	cmp	r1, r2
 8006708:	d1f9      	bne.n	80066fe <memcpy+0xe>
 800670a:	bd10      	pop	{r4, pc}

0800670c <memset>:
 800670c:	4402      	add	r2, r0
 800670e:	4603      	mov	r3, r0
 8006710:	4293      	cmp	r3, r2
 8006712:	d100      	bne.n	8006716 <memset+0xa>
 8006714:	4770      	bx	lr
 8006716:	f803 1b01 	strb.w	r1, [r3], #1
 800671a:	e7f9      	b.n	8006710 <memset+0x4>

0800671c <iprintf>:
 800671c:	b40f      	push	{r0, r1, r2, r3}
 800671e:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <iprintf+0x2c>)
 8006720:	b513      	push	{r0, r1, r4, lr}
 8006722:	681c      	ldr	r4, [r3, #0]
 8006724:	b124      	cbz	r4, 8006730 <iprintf+0x14>
 8006726:	69a3      	ldr	r3, [r4, #24]
 8006728:	b913      	cbnz	r3, 8006730 <iprintf+0x14>
 800672a:	4620      	mov	r0, r4
 800672c:	f000 fa5e 	bl	8006bec <__sinit>
 8006730:	ab05      	add	r3, sp, #20
 8006732:	9a04      	ldr	r2, [sp, #16]
 8006734:	68a1      	ldr	r1, [r4, #8]
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	4620      	mov	r0, r4
 800673a:	f000 fc2f 	bl	8006f9c <_vfiprintf_r>
 800673e:	b002      	add	sp, #8
 8006740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006744:	b004      	add	sp, #16
 8006746:	4770      	bx	lr
 8006748:	20000010 	.word	0x20000010

0800674c <_puts_r>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	460e      	mov	r6, r1
 8006750:	4605      	mov	r5, r0
 8006752:	b118      	cbz	r0, 800675c <_puts_r+0x10>
 8006754:	6983      	ldr	r3, [r0, #24]
 8006756:	b90b      	cbnz	r3, 800675c <_puts_r+0x10>
 8006758:	f000 fa48 	bl	8006bec <__sinit>
 800675c:	69ab      	ldr	r3, [r5, #24]
 800675e:	68ac      	ldr	r4, [r5, #8]
 8006760:	b913      	cbnz	r3, 8006768 <_puts_r+0x1c>
 8006762:	4628      	mov	r0, r5
 8006764:	f000 fa42 	bl	8006bec <__sinit>
 8006768:	4b2c      	ldr	r3, [pc, #176]	; (800681c <_puts_r+0xd0>)
 800676a:	429c      	cmp	r4, r3
 800676c:	d120      	bne.n	80067b0 <_puts_r+0x64>
 800676e:	686c      	ldr	r4, [r5, #4]
 8006770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006772:	07db      	lsls	r3, r3, #31
 8006774:	d405      	bmi.n	8006782 <_puts_r+0x36>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	0598      	lsls	r0, r3, #22
 800677a:	d402      	bmi.n	8006782 <_puts_r+0x36>
 800677c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677e:	f000 fad3 	bl	8006d28 <__retarget_lock_acquire_recursive>
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	0719      	lsls	r1, r3, #28
 8006786:	d51d      	bpl.n	80067c4 <_puts_r+0x78>
 8006788:	6923      	ldr	r3, [r4, #16]
 800678a:	b1db      	cbz	r3, 80067c4 <_puts_r+0x78>
 800678c:	3e01      	subs	r6, #1
 800678e:	68a3      	ldr	r3, [r4, #8]
 8006790:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006794:	3b01      	subs	r3, #1
 8006796:	60a3      	str	r3, [r4, #8]
 8006798:	bb39      	cbnz	r1, 80067ea <_puts_r+0x9e>
 800679a:	2b00      	cmp	r3, #0
 800679c:	da38      	bge.n	8006810 <_puts_r+0xc4>
 800679e:	4622      	mov	r2, r4
 80067a0:	210a      	movs	r1, #10
 80067a2:	4628      	mov	r0, r5
 80067a4:	f000 f848 	bl	8006838 <__swbuf_r>
 80067a8:	3001      	adds	r0, #1
 80067aa:	d011      	beq.n	80067d0 <_puts_r+0x84>
 80067ac:	250a      	movs	r5, #10
 80067ae:	e011      	b.n	80067d4 <_puts_r+0x88>
 80067b0:	4b1b      	ldr	r3, [pc, #108]	; (8006820 <_puts_r+0xd4>)
 80067b2:	429c      	cmp	r4, r3
 80067b4:	d101      	bne.n	80067ba <_puts_r+0x6e>
 80067b6:	68ac      	ldr	r4, [r5, #8]
 80067b8:	e7da      	b.n	8006770 <_puts_r+0x24>
 80067ba:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <_puts_r+0xd8>)
 80067bc:	429c      	cmp	r4, r3
 80067be:	bf08      	it	eq
 80067c0:	68ec      	ldreq	r4, [r5, #12]
 80067c2:	e7d5      	b.n	8006770 <_puts_r+0x24>
 80067c4:	4621      	mov	r1, r4
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 f888 	bl	80068dc <__swsetup_r>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d0dd      	beq.n	800678c <_puts_r+0x40>
 80067d0:	f04f 35ff 	mov.w	r5, #4294967295
 80067d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d6:	07da      	lsls	r2, r3, #31
 80067d8:	d405      	bmi.n	80067e6 <_puts_r+0x9a>
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	059b      	lsls	r3, r3, #22
 80067de:	d402      	bmi.n	80067e6 <_puts_r+0x9a>
 80067e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067e2:	f000 faa2 	bl	8006d2a <__retarget_lock_release_recursive>
 80067e6:	4628      	mov	r0, r5
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da04      	bge.n	80067f8 <_puts_r+0xac>
 80067ee:	69a2      	ldr	r2, [r4, #24]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	dc06      	bgt.n	8006802 <_puts_r+0xb6>
 80067f4:	290a      	cmp	r1, #10
 80067f6:	d004      	beq.n	8006802 <_puts_r+0xb6>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	6022      	str	r2, [r4, #0]
 80067fe:	7019      	strb	r1, [r3, #0]
 8006800:	e7c5      	b.n	800678e <_puts_r+0x42>
 8006802:	4622      	mov	r2, r4
 8006804:	4628      	mov	r0, r5
 8006806:	f000 f817 	bl	8006838 <__swbuf_r>
 800680a:	3001      	adds	r0, #1
 800680c:	d1bf      	bne.n	800678e <_puts_r+0x42>
 800680e:	e7df      	b.n	80067d0 <_puts_r+0x84>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	250a      	movs	r5, #10
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	6022      	str	r2, [r4, #0]
 8006818:	701d      	strb	r5, [r3, #0]
 800681a:	e7db      	b.n	80067d4 <_puts_r+0x88>
 800681c:	080078a0 	.word	0x080078a0
 8006820:	080078c0 	.word	0x080078c0
 8006824:	08007880 	.word	0x08007880

08006828 <puts>:
 8006828:	4b02      	ldr	r3, [pc, #8]	; (8006834 <puts+0xc>)
 800682a:	4601      	mov	r1, r0
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	f7ff bf8d 	b.w	800674c <_puts_r>
 8006832:	bf00      	nop
 8006834:	20000010 	.word	0x20000010

08006838 <__swbuf_r>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	460e      	mov	r6, r1
 800683c:	4614      	mov	r4, r2
 800683e:	4605      	mov	r5, r0
 8006840:	b118      	cbz	r0, 800684a <__swbuf_r+0x12>
 8006842:	6983      	ldr	r3, [r0, #24]
 8006844:	b90b      	cbnz	r3, 800684a <__swbuf_r+0x12>
 8006846:	f000 f9d1 	bl	8006bec <__sinit>
 800684a:	4b21      	ldr	r3, [pc, #132]	; (80068d0 <__swbuf_r+0x98>)
 800684c:	429c      	cmp	r4, r3
 800684e:	d12b      	bne.n	80068a8 <__swbuf_r+0x70>
 8006850:	686c      	ldr	r4, [r5, #4]
 8006852:	69a3      	ldr	r3, [r4, #24]
 8006854:	60a3      	str	r3, [r4, #8]
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	071a      	lsls	r2, r3, #28
 800685a:	d52f      	bpl.n	80068bc <__swbuf_r+0x84>
 800685c:	6923      	ldr	r3, [r4, #16]
 800685e:	b36b      	cbz	r3, 80068bc <__swbuf_r+0x84>
 8006860:	6923      	ldr	r3, [r4, #16]
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	1ac0      	subs	r0, r0, r3
 8006866:	6963      	ldr	r3, [r4, #20]
 8006868:	b2f6      	uxtb	r6, r6
 800686a:	4283      	cmp	r3, r0
 800686c:	4637      	mov	r7, r6
 800686e:	dc04      	bgt.n	800687a <__swbuf_r+0x42>
 8006870:	4621      	mov	r1, r4
 8006872:	4628      	mov	r0, r5
 8006874:	f000 f926 	bl	8006ac4 <_fflush_r>
 8006878:	bb30      	cbnz	r0, 80068c8 <__swbuf_r+0x90>
 800687a:	68a3      	ldr	r3, [r4, #8]
 800687c:	3b01      	subs	r3, #1
 800687e:	60a3      	str	r3, [r4, #8]
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	6022      	str	r2, [r4, #0]
 8006886:	701e      	strb	r6, [r3, #0]
 8006888:	6963      	ldr	r3, [r4, #20]
 800688a:	3001      	adds	r0, #1
 800688c:	4283      	cmp	r3, r0
 800688e:	d004      	beq.n	800689a <__swbuf_r+0x62>
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	07db      	lsls	r3, r3, #31
 8006894:	d506      	bpl.n	80068a4 <__swbuf_r+0x6c>
 8006896:	2e0a      	cmp	r6, #10
 8006898:	d104      	bne.n	80068a4 <__swbuf_r+0x6c>
 800689a:	4621      	mov	r1, r4
 800689c:	4628      	mov	r0, r5
 800689e:	f000 f911 	bl	8006ac4 <_fflush_r>
 80068a2:	b988      	cbnz	r0, 80068c8 <__swbuf_r+0x90>
 80068a4:	4638      	mov	r0, r7
 80068a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <__swbuf_r+0x9c>)
 80068aa:	429c      	cmp	r4, r3
 80068ac:	d101      	bne.n	80068b2 <__swbuf_r+0x7a>
 80068ae:	68ac      	ldr	r4, [r5, #8]
 80068b0:	e7cf      	b.n	8006852 <__swbuf_r+0x1a>
 80068b2:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <__swbuf_r+0xa0>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	bf08      	it	eq
 80068b8:	68ec      	ldreq	r4, [r5, #12]
 80068ba:	e7ca      	b.n	8006852 <__swbuf_r+0x1a>
 80068bc:	4621      	mov	r1, r4
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 f80c 	bl	80068dc <__swsetup_r>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d0cb      	beq.n	8006860 <__swbuf_r+0x28>
 80068c8:	f04f 37ff 	mov.w	r7, #4294967295
 80068cc:	e7ea      	b.n	80068a4 <__swbuf_r+0x6c>
 80068ce:	bf00      	nop
 80068d0:	080078a0 	.word	0x080078a0
 80068d4:	080078c0 	.word	0x080078c0
 80068d8:	08007880 	.word	0x08007880

080068dc <__swsetup_r>:
 80068dc:	4b32      	ldr	r3, [pc, #200]	; (80069a8 <__swsetup_r+0xcc>)
 80068de:	b570      	push	{r4, r5, r6, lr}
 80068e0:	681d      	ldr	r5, [r3, #0]
 80068e2:	4606      	mov	r6, r0
 80068e4:	460c      	mov	r4, r1
 80068e6:	b125      	cbz	r5, 80068f2 <__swsetup_r+0x16>
 80068e8:	69ab      	ldr	r3, [r5, #24]
 80068ea:	b913      	cbnz	r3, 80068f2 <__swsetup_r+0x16>
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 f97d 	bl	8006bec <__sinit>
 80068f2:	4b2e      	ldr	r3, [pc, #184]	; (80069ac <__swsetup_r+0xd0>)
 80068f4:	429c      	cmp	r4, r3
 80068f6:	d10f      	bne.n	8006918 <__swsetup_r+0x3c>
 80068f8:	686c      	ldr	r4, [r5, #4]
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006900:	0719      	lsls	r1, r3, #28
 8006902:	d42c      	bmi.n	800695e <__swsetup_r+0x82>
 8006904:	06dd      	lsls	r5, r3, #27
 8006906:	d411      	bmi.n	800692c <__swsetup_r+0x50>
 8006908:	2309      	movs	r3, #9
 800690a:	6033      	str	r3, [r6, #0]
 800690c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	f04f 30ff 	mov.w	r0, #4294967295
 8006916:	e03e      	b.n	8006996 <__swsetup_r+0xba>
 8006918:	4b25      	ldr	r3, [pc, #148]	; (80069b0 <__swsetup_r+0xd4>)
 800691a:	429c      	cmp	r4, r3
 800691c:	d101      	bne.n	8006922 <__swsetup_r+0x46>
 800691e:	68ac      	ldr	r4, [r5, #8]
 8006920:	e7eb      	b.n	80068fa <__swsetup_r+0x1e>
 8006922:	4b24      	ldr	r3, [pc, #144]	; (80069b4 <__swsetup_r+0xd8>)
 8006924:	429c      	cmp	r4, r3
 8006926:	bf08      	it	eq
 8006928:	68ec      	ldreq	r4, [r5, #12]
 800692a:	e7e6      	b.n	80068fa <__swsetup_r+0x1e>
 800692c:	0758      	lsls	r0, r3, #29
 800692e:	d512      	bpl.n	8006956 <__swsetup_r+0x7a>
 8006930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006932:	b141      	cbz	r1, 8006946 <__swsetup_r+0x6a>
 8006934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006938:	4299      	cmp	r1, r3
 800693a:	d002      	beq.n	8006942 <__swsetup_r+0x66>
 800693c:	4630      	mov	r0, r6
 800693e:	f000 fa59 	bl	8006df4 <_free_r>
 8006942:	2300      	movs	r3, #0
 8006944:	6363      	str	r3, [r4, #52]	; 0x34
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800694c:	81a3      	strh	r3, [r4, #12]
 800694e:	2300      	movs	r3, #0
 8006950:	6063      	str	r3, [r4, #4]
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	f043 0308 	orr.w	r3, r3, #8
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	b94b      	cbnz	r3, 8006976 <__swsetup_r+0x9a>
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800696c:	d003      	beq.n	8006976 <__swsetup_r+0x9a>
 800696e:	4621      	mov	r1, r4
 8006970:	4630      	mov	r0, r6
 8006972:	f000 f9ff 	bl	8006d74 <__smakebuf_r>
 8006976:	89a0      	ldrh	r0, [r4, #12]
 8006978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800697c:	f010 0301 	ands.w	r3, r0, #1
 8006980:	d00a      	beq.n	8006998 <__swsetup_r+0xbc>
 8006982:	2300      	movs	r3, #0
 8006984:	60a3      	str	r3, [r4, #8]
 8006986:	6963      	ldr	r3, [r4, #20]
 8006988:	425b      	negs	r3, r3
 800698a:	61a3      	str	r3, [r4, #24]
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	b943      	cbnz	r3, 80069a2 <__swsetup_r+0xc6>
 8006990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006994:	d1ba      	bne.n	800690c <__swsetup_r+0x30>
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	0781      	lsls	r1, r0, #30
 800699a:	bf58      	it	pl
 800699c:	6963      	ldrpl	r3, [r4, #20]
 800699e:	60a3      	str	r3, [r4, #8]
 80069a0:	e7f4      	b.n	800698c <__swsetup_r+0xb0>
 80069a2:	2000      	movs	r0, #0
 80069a4:	e7f7      	b.n	8006996 <__swsetup_r+0xba>
 80069a6:	bf00      	nop
 80069a8:	20000010 	.word	0x20000010
 80069ac:	080078a0 	.word	0x080078a0
 80069b0:	080078c0 	.word	0x080078c0
 80069b4:	08007880 	.word	0x08007880

080069b8 <__sflush_r>:
 80069b8:	898a      	ldrh	r2, [r1, #12]
 80069ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069be:	4605      	mov	r5, r0
 80069c0:	0710      	lsls	r0, r2, #28
 80069c2:	460c      	mov	r4, r1
 80069c4:	d458      	bmi.n	8006a78 <__sflush_r+0xc0>
 80069c6:	684b      	ldr	r3, [r1, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	dc05      	bgt.n	80069d8 <__sflush_r+0x20>
 80069cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dc02      	bgt.n	80069d8 <__sflush_r+0x20>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d0f9      	beq.n	80069d2 <__sflush_r+0x1a>
 80069de:	2300      	movs	r3, #0
 80069e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069e4:	682f      	ldr	r7, [r5, #0]
 80069e6:	602b      	str	r3, [r5, #0]
 80069e8:	d032      	beq.n	8006a50 <__sflush_r+0x98>
 80069ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	075a      	lsls	r2, r3, #29
 80069f0:	d505      	bpl.n	80069fe <__sflush_r+0x46>
 80069f2:	6863      	ldr	r3, [r4, #4]
 80069f4:	1ac0      	subs	r0, r0, r3
 80069f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069f8:	b10b      	cbz	r3, 80069fe <__sflush_r+0x46>
 80069fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069fc:	1ac0      	subs	r0, r0, r3
 80069fe:	2300      	movs	r3, #0
 8006a00:	4602      	mov	r2, r0
 8006a02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a04:	6a21      	ldr	r1, [r4, #32]
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b0      	blx	r6
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	d106      	bne.n	8006a1e <__sflush_r+0x66>
 8006a10:	6829      	ldr	r1, [r5, #0]
 8006a12:	291d      	cmp	r1, #29
 8006a14:	d82c      	bhi.n	8006a70 <__sflush_r+0xb8>
 8006a16:	4a2a      	ldr	r2, [pc, #168]	; (8006ac0 <__sflush_r+0x108>)
 8006a18:	40ca      	lsrs	r2, r1
 8006a1a:	07d6      	lsls	r6, r2, #31
 8006a1c:	d528      	bpl.n	8006a70 <__sflush_r+0xb8>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	6062      	str	r2, [r4, #4]
 8006a22:	04d9      	lsls	r1, r3, #19
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	6022      	str	r2, [r4, #0]
 8006a28:	d504      	bpl.n	8006a34 <__sflush_r+0x7c>
 8006a2a:	1c42      	adds	r2, r0, #1
 8006a2c:	d101      	bne.n	8006a32 <__sflush_r+0x7a>
 8006a2e:	682b      	ldr	r3, [r5, #0]
 8006a30:	b903      	cbnz	r3, 8006a34 <__sflush_r+0x7c>
 8006a32:	6560      	str	r0, [r4, #84]	; 0x54
 8006a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a36:	602f      	str	r7, [r5, #0]
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	d0ca      	beq.n	80069d2 <__sflush_r+0x1a>
 8006a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a40:	4299      	cmp	r1, r3
 8006a42:	d002      	beq.n	8006a4a <__sflush_r+0x92>
 8006a44:	4628      	mov	r0, r5
 8006a46:	f000 f9d5 	bl	8006df4 <_free_r>
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a4e:	e7c1      	b.n	80069d4 <__sflush_r+0x1c>
 8006a50:	6a21      	ldr	r1, [r4, #32]
 8006a52:	2301      	movs	r3, #1
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b0      	blx	r6
 8006a58:	1c41      	adds	r1, r0, #1
 8006a5a:	d1c7      	bne.n	80069ec <__sflush_r+0x34>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0c4      	beq.n	80069ec <__sflush_r+0x34>
 8006a62:	2b1d      	cmp	r3, #29
 8006a64:	d001      	beq.n	8006a6a <__sflush_r+0xb2>
 8006a66:	2b16      	cmp	r3, #22
 8006a68:	d101      	bne.n	8006a6e <__sflush_r+0xb6>
 8006a6a:	602f      	str	r7, [r5, #0]
 8006a6c:	e7b1      	b.n	80069d2 <__sflush_r+0x1a>
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a74:	81a3      	strh	r3, [r4, #12]
 8006a76:	e7ad      	b.n	80069d4 <__sflush_r+0x1c>
 8006a78:	690f      	ldr	r7, [r1, #16]
 8006a7a:	2f00      	cmp	r7, #0
 8006a7c:	d0a9      	beq.n	80069d2 <__sflush_r+0x1a>
 8006a7e:	0793      	lsls	r3, r2, #30
 8006a80:	680e      	ldr	r6, [r1, #0]
 8006a82:	bf08      	it	eq
 8006a84:	694b      	ldreq	r3, [r1, #20]
 8006a86:	600f      	str	r7, [r1, #0]
 8006a88:	bf18      	it	ne
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	eba6 0807 	sub.w	r8, r6, r7
 8006a90:	608b      	str	r3, [r1, #8]
 8006a92:	f1b8 0f00 	cmp.w	r8, #0
 8006a96:	dd9c      	ble.n	80069d2 <__sflush_r+0x1a>
 8006a98:	6a21      	ldr	r1, [r4, #32]
 8006a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a9c:	4643      	mov	r3, r8
 8006a9e:	463a      	mov	r2, r7
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b0      	blx	r6
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	dc06      	bgt.n	8006ab6 <__sflush_r+0xfe>
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	e78e      	b.n	80069d4 <__sflush_r+0x1c>
 8006ab6:	4407      	add	r7, r0
 8006ab8:	eba8 0800 	sub.w	r8, r8, r0
 8006abc:	e7e9      	b.n	8006a92 <__sflush_r+0xda>
 8006abe:	bf00      	nop
 8006ac0:	20400001 	.word	0x20400001

08006ac4 <_fflush_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	690b      	ldr	r3, [r1, #16]
 8006ac8:	4605      	mov	r5, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	b913      	cbnz	r3, 8006ad4 <_fflush_r+0x10>
 8006ace:	2500      	movs	r5, #0
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	b118      	cbz	r0, 8006ade <_fflush_r+0x1a>
 8006ad6:	6983      	ldr	r3, [r0, #24]
 8006ad8:	b90b      	cbnz	r3, 8006ade <_fflush_r+0x1a>
 8006ada:	f000 f887 	bl	8006bec <__sinit>
 8006ade:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <_fflush_r+0x6c>)
 8006ae0:	429c      	cmp	r4, r3
 8006ae2:	d11b      	bne.n	8006b1c <_fflush_r+0x58>
 8006ae4:	686c      	ldr	r4, [r5, #4]
 8006ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0ef      	beq.n	8006ace <_fflush_r+0xa>
 8006aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006af0:	07d0      	lsls	r0, r2, #31
 8006af2:	d404      	bmi.n	8006afe <_fflush_r+0x3a>
 8006af4:	0599      	lsls	r1, r3, #22
 8006af6:	d402      	bmi.n	8006afe <_fflush_r+0x3a>
 8006af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006afa:	f000 f915 	bl	8006d28 <__retarget_lock_acquire_recursive>
 8006afe:	4628      	mov	r0, r5
 8006b00:	4621      	mov	r1, r4
 8006b02:	f7ff ff59 	bl	80069b8 <__sflush_r>
 8006b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b08:	07da      	lsls	r2, r3, #31
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	d4e0      	bmi.n	8006ad0 <_fflush_r+0xc>
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	059b      	lsls	r3, r3, #22
 8006b12:	d4dd      	bmi.n	8006ad0 <_fflush_r+0xc>
 8006b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b16:	f000 f908 	bl	8006d2a <__retarget_lock_release_recursive>
 8006b1a:	e7d9      	b.n	8006ad0 <_fflush_r+0xc>
 8006b1c:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <_fflush_r+0x70>)
 8006b1e:	429c      	cmp	r4, r3
 8006b20:	d101      	bne.n	8006b26 <_fflush_r+0x62>
 8006b22:	68ac      	ldr	r4, [r5, #8]
 8006b24:	e7df      	b.n	8006ae6 <_fflush_r+0x22>
 8006b26:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <_fflush_r+0x74>)
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	bf08      	it	eq
 8006b2c:	68ec      	ldreq	r4, [r5, #12]
 8006b2e:	e7da      	b.n	8006ae6 <_fflush_r+0x22>
 8006b30:	080078a0 	.word	0x080078a0
 8006b34:	080078c0 	.word	0x080078c0
 8006b38:	08007880 	.word	0x08007880

08006b3c <std>:
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	b510      	push	{r4, lr}
 8006b40:	4604      	mov	r4, r0
 8006b42:	e9c0 3300 	strd	r3, r3, [r0]
 8006b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b4a:	6083      	str	r3, [r0, #8]
 8006b4c:	8181      	strh	r1, [r0, #12]
 8006b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b50:	81c2      	strh	r2, [r0, #14]
 8006b52:	6183      	str	r3, [r0, #24]
 8006b54:	4619      	mov	r1, r3
 8006b56:	2208      	movs	r2, #8
 8006b58:	305c      	adds	r0, #92	; 0x5c
 8006b5a:	f7ff fdd7 	bl	800670c <memset>
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <std+0x38>)
 8006b60:	6263      	str	r3, [r4, #36]	; 0x24
 8006b62:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <std+0x3c>)
 8006b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <std+0x40>)
 8006b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b6a:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <std+0x44>)
 8006b6c:	6224      	str	r4, [r4, #32]
 8006b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b70:	bd10      	pop	{r4, pc}
 8006b72:	bf00      	nop
 8006b74:	08007545 	.word	0x08007545
 8006b78:	08007567 	.word	0x08007567
 8006b7c:	0800759f 	.word	0x0800759f
 8006b80:	080075c3 	.word	0x080075c3

08006b84 <_cleanup_r>:
 8006b84:	4901      	ldr	r1, [pc, #4]	; (8006b8c <_cleanup_r+0x8>)
 8006b86:	f000 b8af 	b.w	8006ce8 <_fwalk_reent>
 8006b8a:	bf00      	nop
 8006b8c:	08006ac5 	.word	0x08006ac5

08006b90 <__sfmoreglue>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	1e4a      	subs	r2, r1, #1
 8006b94:	2568      	movs	r5, #104	; 0x68
 8006b96:	4355      	muls	r5, r2
 8006b98:	460e      	mov	r6, r1
 8006b9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b9e:	f000 f979 	bl	8006e94 <_malloc_r>
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	b140      	cbz	r0, 8006bb8 <__sfmoreglue+0x28>
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	e9c0 1600 	strd	r1, r6, [r0]
 8006bac:	300c      	adds	r0, #12
 8006bae:	60a0      	str	r0, [r4, #8]
 8006bb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bb4:	f7ff fdaa 	bl	800670c <memset>
 8006bb8:	4620      	mov	r0, r4
 8006bba:	bd70      	pop	{r4, r5, r6, pc}

08006bbc <__sfp_lock_acquire>:
 8006bbc:	4801      	ldr	r0, [pc, #4]	; (8006bc4 <__sfp_lock_acquire+0x8>)
 8006bbe:	f000 b8b3 	b.w	8006d28 <__retarget_lock_acquire_recursive>
 8006bc2:	bf00      	nop
 8006bc4:	20001a90 	.word	0x20001a90

08006bc8 <__sfp_lock_release>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	; (8006bd0 <__sfp_lock_release+0x8>)
 8006bca:	f000 b8ae 	b.w	8006d2a <__retarget_lock_release_recursive>
 8006bce:	bf00      	nop
 8006bd0:	20001a90 	.word	0x20001a90

08006bd4 <__sinit_lock_acquire>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__sinit_lock_acquire+0x8>)
 8006bd6:	f000 b8a7 	b.w	8006d28 <__retarget_lock_acquire_recursive>
 8006bda:	bf00      	nop
 8006bdc:	20001a8b 	.word	0x20001a8b

08006be0 <__sinit_lock_release>:
 8006be0:	4801      	ldr	r0, [pc, #4]	; (8006be8 <__sinit_lock_release+0x8>)
 8006be2:	f000 b8a2 	b.w	8006d2a <__retarget_lock_release_recursive>
 8006be6:	bf00      	nop
 8006be8:	20001a8b 	.word	0x20001a8b

08006bec <__sinit>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	4604      	mov	r4, r0
 8006bf0:	f7ff fff0 	bl	8006bd4 <__sinit_lock_acquire>
 8006bf4:	69a3      	ldr	r3, [r4, #24]
 8006bf6:	b11b      	cbz	r3, 8006c00 <__sinit+0x14>
 8006bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bfc:	f7ff bff0 	b.w	8006be0 <__sinit_lock_release>
 8006c00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c04:	6523      	str	r3, [r4, #80]	; 0x50
 8006c06:	4b13      	ldr	r3, [pc, #76]	; (8006c54 <__sinit+0x68>)
 8006c08:	4a13      	ldr	r2, [pc, #76]	; (8006c58 <__sinit+0x6c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c0e:	42a3      	cmp	r3, r4
 8006c10:	bf04      	itt	eq
 8006c12:	2301      	moveq	r3, #1
 8006c14:	61a3      	streq	r3, [r4, #24]
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 f820 	bl	8006c5c <__sfp>
 8006c1c:	6060      	str	r0, [r4, #4]
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 f81c 	bl	8006c5c <__sfp>
 8006c24:	60a0      	str	r0, [r4, #8]
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 f818 	bl	8006c5c <__sfp>
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	60e0      	str	r0, [r4, #12]
 8006c30:	2104      	movs	r1, #4
 8006c32:	6860      	ldr	r0, [r4, #4]
 8006c34:	f7ff ff82 	bl	8006b3c <std>
 8006c38:	68a0      	ldr	r0, [r4, #8]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	2109      	movs	r1, #9
 8006c3e:	f7ff ff7d 	bl	8006b3c <std>
 8006c42:	68e0      	ldr	r0, [r4, #12]
 8006c44:	2202      	movs	r2, #2
 8006c46:	2112      	movs	r1, #18
 8006c48:	f7ff ff78 	bl	8006b3c <std>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	61a3      	str	r3, [r4, #24]
 8006c50:	e7d2      	b.n	8006bf8 <__sinit+0xc>
 8006c52:	bf00      	nop
 8006c54:	0800787c 	.word	0x0800787c
 8006c58:	08006b85 	.word	0x08006b85

08006c5c <__sfp>:
 8006c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5e:	4607      	mov	r7, r0
 8006c60:	f7ff ffac 	bl	8006bbc <__sfp_lock_acquire>
 8006c64:	4b1e      	ldr	r3, [pc, #120]	; (8006ce0 <__sfp+0x84>)
 8006c66:	681e      	ldr	r6, [r3, #0]
 8006c68:	69b3      	ldr	r3, [r6, #24]
 8006c6a:	b913      	cbnz	r3, 8006c72 <__sfp+0x16>
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f7ff ffbd 	bl	8006bec <__sinit>
 8006c72:	3648      	adds	r6, #72	; 0x48
 8006c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	d503      	bpl.n	8006c84 <__sfp+0x28>
 8006c7c:	6833      	ldr	r3, [r6, #0]
 8006c7e:	b30b      	cbz	r3, 8006cc4 <__sfp+0x68>
 8006c80:	6836      	ldr	r6, [r6, #0]
 8006c82:	e7f7      	b.n	8006c74 <__sfp+0x18>
 8006c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c88:	b9d5      	cbnz	r5, 8006cc0 <__sfp+0x64>
 8006c8a:	4b16      	ldr	r3, [pc, #88]	; (8006ce4 <__sfp+0x88>)
 8006c8c:	60e3      	str	r3, [r4, #12]
 8006c8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c92:	6665      	str	r5, [r4, #100]	; 0x64
 8006c94:	f000 f847 	bl	8006d26 <__retarget_lock_init_recursive>
 8006c98:	f7ff ff96 	bl	8006bc8 <__sfp_lock_release>
 8006c9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ca4:	6025      	str	r5, [r4, #0]
 8006ca6:	61a5      	str	r5, [r4, #24]
 8006ca8:	2208      	movs	r2, #8
 8006caa:	4629      	mov	r1, r5
 8006cac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cb0:	f7ff fd2c 	bl	800670c <memset>
 8006cb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc0:	3468      	adds	r4, #104	; 0x68
 8006cc2:	e7d9      	b.n	8006c78 <__sfp+0x1c>
 8006cc4:	2104      	movs	r1, #4
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	f7ff ff62 	bl	8006b90 <__sfmoreglue>
 8006ccc:	4604      	mov	r4, r0
 8006cce:	6030      	str	r0, [r6, #0]
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d1d5      	bne.n	8006c80 <__sfp+0x24>
 8006cd4:	f7ff ff78 	bl	8006bc8 <__sfp_lock_release>
 8006cd8:	230c      	movs	r3, #12
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	e7ee      	b.n	8006cbc <__sfp+0x60>
 8006cde:	bf00      	nop
 8006ce0:	0800787c 	.word	0x0800787c
 8006ce4:	ffff0001 	.word	0xffff0001

08006ce8 <_fwalk_reent>:
 8006ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cec:	4606      	mov	r6, r0
 8006cee:	4688      	mov	r8, r1
 8006cf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cf4:	2700      	movs	r7, #0
 8006cf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cfa:	f1b9 0901 	subs.w	r9, r9, #1
 8006cfe:	d505      	bpl.n	8006d0c <_fwalk_reent+0x24>
 8006d00:	6824      	ldr	r4, [r4, #0]
 8006d02:	2c00      	cmp	r4, #0
 8006d04:	d1f7      	bne.n	8006cf6 <_fwalk_reent+0xe>
 8006d06:	4638      	mov	r0, r7
 8006d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0c:	89ab      	ldrh	r3, [r5, #12]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d907      	bls.n	8006d22 <_fwalk_reent+0x3a>
 8006d12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d16:	3301      	adds	r3, #1
 8006d18:	d003      	beq.n	8006d22 <_fwalk_reent+0x3a>
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	47c0      	blx	r8
 8006d20:	4307      	orrs	r7, r0
 8006d22:	3568      	adds	r5, #104	; 0x68
 8006d24:	e7e9      	b.n	8006cfa <_fwalk_reent+0x12>

08006d26 <__retarget_lock_init_recursive>:
 8006d26:	4770      	bx	lr

08006d28 <__retarget_lock_acquire_recursive>:
 8006d28:	4770      	bx	lr

08006d2a <__retarget_lock_release_recursive>:
 8006d2a:	4770      	bx	lr

08006d2c <__swhatbuf_r>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	460e      	mov	r6, r1
 8006d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d34:	2900      	cmp	r1, #0
 8006d36:	b096      	sub	sp, #88	; 0x58
 8006d38:	4614      	mov	r4, r2
 8006d3a:	461d      	mov	r5, r3
 8006d3c:	da07      	bge.n	8006d4e <__swhatbuf_r+0x22>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	602b      	str	r3, [r5, #0]
 8006d42:	89b3      	ldrh	r3, [r6, #12]
 8006d44:	061a      	lsls	r2, r3, #24
 8006d46:	d410      	bmi.n	8006d6a <__swhatbuf_r+0x3e>
 8006d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d4c:	e00e      	b.n	8006d6c <__swhatbuf_r+0x40>
 8006d4e:	466a      	mov	r2, sp
 8006d50:	f000 fc5e 	bl	8007610 <_fstat_r>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	dbf2      	blt.n	8006d3e <__swhatbuf_r+0x12>
 8006d58:	9a01      	ldr	r2, [sp, #4]
 8006d5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d62:	425a      	negs	r2, r3
 8006d64:	415a      	adcs	r2, r3
 8006d66:	602a      	str	r2, [r5, #0]
 8006d68:	e7ee      	b.n	8006d48 <__swhatbuf_r+0x1c>
 8006d6a:	2340      	movs	r3, #64	; 0x40
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	6023      	str	r3, [r4, #0]
 8006d70:	b016      	add	sp, #88	; 0x58
 8006d72:	bd70      	pop	{r4, r5, r6, pc}

08006d74 <__smakebuf_r>:
 8006d74:	898b      	ldrh	r3, [r1, #12]
 8006d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d78:	079d      	lsls	r5, r3, #30
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	d507      	bpl.n	8006d90 <__smakebuf_r+0x1c>
 8006d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	6123      	str	r3, [r4, #16]
 8006d88:	2301      	movs	r3, #1
 8006d8a:	6163      	str	r3, [r4, #20]
 8006d8c:	b002      	add	sp, #8
 8006d8e:	bd70      	pop	{r4, r5, r6, pc}
 8006d90:	ab01      	add	r3, sp, #4
 8006d92:	466a      	mov	r2, sp
 8006d94:	f7ff ffca 	bl	8006d2c <__swhatbuf_r>
 8006d98:	9900      	ldr	r1, [sp, #0]
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f000 f879 	bl	8006e94 <_malloc_r>
 8006da2:	b948      	cbnz	r0, 8006db8 <__smakebuf_r+0x44>
 8006da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006da8:	059a      	lsls	r2, r3, #22
 8006daa:	d4ef      	bmi.n	8006d8c <__smakebuf_r+0x18>
 8006dac:	f023 0303 	bic.w	r3, r3, #3
 8006db0:	f043 0302 	orr.w	r3, r3, #2
 8006db4:	81a3      	strh	r3, [r4, #12]
 8006db6:	e7e3      	b.n	8006d80 <__smakebuf_r+0xc>
 8006db8:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <__smakebuf_r+0x7c>)
 8006dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	6020      	str	r0, [r4, #0]
 8006dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc4:	81a3      	strh	r3, [r4, #12]
 8006dc6:	9b00      	ldr	r3, [sp, #0]
 8006dc8:	6163      	str	r3, [r4, #20]
 8006dca:	9b01      	ldr	r3, [sp, #4]
 8006dcc:	6120      	str	r0, [r4, #16]
 8006dce:	b15b      	cbz	r3, 8006de8 <__smakebuf_r+0x74>
 8006dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f000 fc2d 	bl	8007634 <_isatty_r>
 8006dda:	b128      	cbz	r0, 8006de8 <__smakebuf_r+0x74>
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	81a3      	strh	r3, [r4, #12]
 8006de8:	89a0      	ldrh	r0, [r4, #12]
 8006dea:	4305      	orrs	r5, r0
 8006dec:	81a5      	strh	r5, [r4, #12]
 8006dee:	e7cd      	b.n	8006d8c <__smakebuf_r+0x18>
 8006df0:	08006b85 	.word	0x08006b85

08006df4 <_free_r>:
 8006df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006df6:	2900      	cmp	r1, #0
 8006df8:	d048      	beq.n	8006e8c <_free_r+0x98>
 8006dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dfe:	9001      	str	r0, [sp, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f1a1 0404 	sub.w	r4, r1, #4
 8006e06:	bfb8      	it	lt
 8006e08:	18e4      	addlt	r4, r4, r3
 8006e0a:	f000 fc35 	bl	8007678 <__malloc_lock>
 8006e0e:	4a20      	ldr	r2, [pc, #128]	; (8006e90 <_free_r+0x9c>)
 8006e10:	9801      	ldr	r0, [sp, #4]
 8006e12:	6813      	ldr	r3, [r2, #0]
 8006e14:	4615      	mov	r5, r2
 8006e16:	b933      	cbnz	r3, 8006e26 <_free_r+0x32>
 8006e18:	6063      	str	r3, [r4, #4]
 8006e1a:	6014      	str	r4, [r2, #0]
 8006e1c:	b003      	add	sp, #12
 8006e1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e22:	f000 bc2f 	b.w	8007684 <__malloc_unlock>
 8006e26:	42a3      	cmp	r3, r4
 8006e28:	d90b      	bls.n	8006e42 <_free_r+0x4e>
 8006e2a:	6821      	ldr	r1, [r4, #0]
 8006e2c:	1862      	adds	r2, r4, r1
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	bf04      	itt	eq
 8006e32:	681a      	ldreq	r2, [r3, #0]
 8006e34:	685b      	ldreq	r3, [r3, #4]
 8006e36:	6063      	str	r3, [r4, #4]
 8006e38:	bf04      	itt	eq
 8006e3a:	1852      	addeq	r2, r2, r1
 8006e3c:	6022      	streq	r2, [r4, #0]
 8006e3e:	602c      	str	r4, [r5, #0]
 8006e40:	e7ec      	b.n	8006e1c <_free_r+0x28>
 8006e42:	461a      	mov	r2, r3
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b10b      	cbz	r3, 8006e4c <_free_r+0x58>
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d9fa      	bls.n	8006e42 <_free_r+0x4e>
 8006e4c:	6811      	ldr	r1, [r2, #0]
 8006e4e:	1855      	adds	r5, r2, r1
 8006e50:	42a5      	cmp	r5, r4
 8006e52:	d10b      	bne.n	8006e6c <_free_r+0x78>
 8006e54:	6824      	ldr	r4, [r4, #0]
 8006e56:	4421      	add	r1, r4
 8006e58:	1854      	adds	r4, r2, r1
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	d1dd      	bne.n	8006e1c <_free_r+0x28>
 8006e60:	681c      	ldr	r4, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	6053      	str	r3, [r2, #4]
 8006e66:	4421      	add	r1, r4
 8006e68:	6011      	str	r1, [r2, #0]
 8006e6a:	e7d7      	b.n	8006e1c <_free_r+0x28>
 8006e6c:	d902      	bls.n	8006e74 <_free_r+0x80>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	6003      	str	r3, [r0, #0]
 8006e72:	e7d3      	b.n	8006e1c <_free_r+0x28>
 8006e74:	6825      	ldr	r5, [r4, #0]
 8006e76:	1961      	adds	r1, r4, r5
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	bf04      	itt	eq
 8006e7c:	6819      	ldreq	r1, [r3, #0]
 8006e7e:	685b      	ldreq	r3, [r3, #4]
 8006e80:	6063      	str	r3, [r4, #4]
 8006e82:	bf04      	itt	eq
 8006e84:	1949      	addeq	r1, r1, r5
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	6054      	str	r4, [r2, #4]
 8006e8a:	e7c7      	b.n	8006e1c <_free_r+0x28>
 8006e8c:	b003      	add	sp, #12
 8006e8e:	bd30      	pop	{r4, r5, pc}
 8006e90:	2000195c 	.word	0x2000195c

08006e94 <_malloc_r>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	1ccd      	adds	r5, r1, #3
 8006e98:	f025 0503 	bic.w	r5, r5, #3
 8006e9c:	3508      	adds	r5, #8
 8006e9e:	2d0c      	cmp	r5, #12
 8006ea0:	bf38      	it	cc
 8006ea2:	250c      	movcc	r5, #12
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	db01      	blt.n	8006eae <_malloc_r+0x1a>
 8006eaa:	42a9      	cmp	r1, r5
 8006eac:	d903      	bls.n	8006eb6 <_malloc_r+0x22>
 8006eae:	230c      	movs	r3, #12
 8006eb0:	6033      	str	r3, [r6, #0]
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb6:	f000 fbdf 	bl	8007678 <__malloc_lock>
 8006eba:	4921      	ldr	r1, [pc, #132]	; (8006f40 <_malloc_r+0xac>)
 8006ebc:	680a      	ldr	r2, [r1, #0]
 8006ebe:	4614      	mov	r4, r2
 8006ec0:	b99c      	cbnz	r4, 8006eea <_malloc_r+0x56>
 8006ec2:	4f20      	ldr	r7, [pc, #128]	; (8006f44 <_malloc_r+0xb0>)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	b923      	cbnz	r3, 8006ed2 <_malloc_r+0x3e>
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f000 fb2a 	bl	8007524 <_sbrk_r>
 8006ed0:	6038      	str	r0, [r7, #0]
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f000 fb25 	bl	8007524 <_sbrk_r>
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	d123      	bne.n	8006f26 <_malloc_r+0x92>
 8006ede:	230c      	movs	r3, #12
 8006ee0:	6033      	str	r3, [r6, #0]
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f000 fbce 	bl	8007684 <__malloc_unlock>
 8006ee8:	e7e3      	b.n	8006eb2 <_malloc_r+0x1e>
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	1b5b      	subs	r3, r3, r5
 8006eee:	d417      	bmi.n	8006f20 <_malloc_r+0x8c>
 8006ef0:	2b0b      	cmp	r3, #11
 8006ef2:	d903      	bls.n	8006efc <_malloc_r+0x68>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	441c      	add	r4, r3
 8006ef8:	6025      	str	r5, [r4, #0]
 8006efa:	e004      	b.n	8006f06 <_malloc_r+0x72>
 8006efc:	6863      	ldr	r3, [r4, #4]
 8006efe:	42a2      	cmp	r2, r4
 8006f00:	bf0c      	ite	eq
 8006f02:	600b      	streq	r3, [r1, #0]
 8006f04:	6053      	strne	r3, [r2, #4]
 8006f06:	4630      	mov	r0, r6
 8006f08:	f000 fbbc 	bl	8007684 <__malloc_unlock>
 8006f0c:	f104 000b 	add.w	r0, r4, #11
 8006f10:	1d23      	adds	r3, r4, #4
 8006f12:	f020 0007 	bic.w	r0, r0, #7
 8006f16:	1ac2      	subs	r2, r0, r3
 8006f18:	d0cc      	beq.n	8006eb4 <_malloc_r+0x20>
 8006f1a:	1a1b      	subs	r3, r3, r0
 8006f1c:	50a3      	str	r3, [r4, r2]
 8006f1e:	e7c9      	b.n	8006eb4 <_malloc_r+0x20>
 8006f20:	4622      	mov	r2, r4
 8006f22:	6864      	ldr	r4, [r4, #4]
 8006f24:	e7cc      	b.n	8006ec0 <_malloc_r+0x2c>
 8006f26:	1cc4      	adds	r4, r0, #3
 8006f28:	f024 0403 	bic.w	r4, r4, #3
 8006f2c:	42a0      	cmp	r0, r4
 8006f2e:	d0e3      	beq.n	8006ef8 <_malloc_r+0x64>
 8006f30:	1a21      	subs	r1, r4, r0
 8006f32:	4630      	mov	r0, r6
 8006f34:	f000 faf6 	bl	8007524 <_sbrk_r>
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d1dd      	bne.n	8006ef8 <_malloc_r+0x64>
 8006f3c:	e7cf      	b.n	8006ede <_malloc_r+0x4a>
 8006f3e:	bf00      	nop
 8006f40:	2000195c 	.word	0x2000195c
 8006f44:	20001960 	.word	0x20001960

08006f48 <__sfputc_r>:
 8006f48:	6893      	ldr	r3, [r2, #8]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	b410      	push	{r4}
 8006f50:	6093      	str	r3, [r2, #8]
 8006f52:	da08      	bge.n	8006f66 <__sfputc_r+0x1e>
 8006f54:	6994      	ldr	r4, [r2, #24]
 8006f56:	42a3      	cmp	r3, r4
 8006f58:	db01      	blt.n	8006f5e <__sfputc_r+0x16>
 8006f5a:	290a      	cmp	r1, #10
 8006f5c:	d103      	bne.n	8006f66 <__sfputc_r+0x1e>
 8006f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f62:	f7ff bc69 	b.w	8006838 <__swbuf_r>
 8006f66:	6813      	ldr	r3, [r2, #0]
 8006f68:	1c58      	adds	r0, r3, #1
 8006f6a:	6010      	str	r0, [r2, #0]
 8006f6c:	7019      	strb	r1, [r3, #0]
 8006f6e:	4608      	mov	r0, r1
 8006f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <__sfputs_r>:
 8006f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f78:	4606      	mov	r6, r0
 8006f7a:	460f      	mov	r7, r1
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	18d5      	adds	r5, r2, r3
 8006f80:	42ac      	cmp	r4, r5
 8006f82:	d101      	bne.n	8006f88 <__sfputs_r+0x12>
 8006f84:	2000      	movs	r0, #0
 8006f86:	e007      	b.n	8006f98 <__sfputs_r+0x22>
 8006f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8c:	463a      	mov	r2, r7
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ffda 	bl	8006f48 <__sfputc_r>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d1f3      	bne.n	8006f80 <__sfputs_r+0xa>
 8006f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f9c <_vfiprintf_r>:
 8006f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa0:	460d      	mov	r5, r1
 8006fa2:	b09d      	sub	sp, #116	; 0x74
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	4698      	mov	r8, r3
 8006fa8:	4606      	mov	r6, r0
 8006faa:	b118      	cbz	r0, 8006fb4 <_vfiprintf_r+0x18>
 8006fac:	6983      	ldr	r3, [r0, #24]
 8006fae:	b90b      	cbnz	r3, 8006fb4 <_vfiprintf_r+0x18>
 8006fb0:	f7ff fe1c 	bl	8006bec <__sinit>
 8006fb4:	4b89      	ldr	r3, [pc, #548]	; (80071dc <_vfiprintf_r+0x240>)
 8006fb6:	429d      	cmp	r5, r3
 8006fb8:	d11b      	bne.n	8006ff2 <_vfiprintf_r+0x56>
 8006fba:	6875      	ldr	r5, [r6, #4]
 8006fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fbe:	07d9      	lsls	r1, r3, #31
 8006fc0:	d405      	bmi.n	8006fce <_vfiprintf_r+0x32>
 8006fc2:	89ab      	ldrh	r3, [r5, #12]
 8006fc4:	059a      	lsls	r2, r3, #22
 8006fc6:	d402      	bmi.n	8006fce <_vfiprintf_r+0x32>
 8006fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fca:	f7ff fead 	bl	8006d28 <__retarget_lock_acquire_recursive>
 8006fce:	89ab      	ldrh	r3, [r5, #12]
 8006fd0:	071b      	lsls	r3, r3, #28
 8006fd2:	d501      	bpl.n	8006fd8 <_vfiprintf_r+0x3c>
 8006fd4:	692b      	ldr	r3, [r5, #16]
 8006fd6:	b9eb      	cbnz	r3, 8007014 <_vfiprintf_r+0x78>
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7ff fc7e 	bl	80068dc <__swsetup_r>
 8006fe0:	b1c0      	cbz	r0, 8007014 <_vfiprintf_r+0x78>
 8006fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fe4:	07dc      	lsls	r4, r3, #31
 8006fe6:	d50e      	bpl.n	8007006 <_vfiprintf_r+0x6a>
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fec:	b01d      	add	sp, #116	; 0x74
 8006fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff2:	4b7b      	ldr	r3, [pc, #492]	; (80071e0 <_vfiprintf_r+0x244>)
 8006ff4:	429d      	cmp	r5, r3
 8006ff6:	d101      	bne.n	8006ffc <_vfiprintf_r+0x60>
 8006ff8:	68b5      	ldr	r5, [r6, #8]
 8006ffa:	e7df      	b.n	8006fbc <_vfiprintf_r+0x20>
 8006ffc:	4b79      	ldr	r3, [pc, #484]	; (80071e4 <_vfiprintf_r+0x248>)
 8006ffe:	429d      	cmp	r5, r3
 8007000:	bf08      	it	eq
 8007002:	68f5      	ldreq	r5, [r6, #12]
 8007004:	e7da      	b.n	8006fbc <_vfiprintf_r+0x20>
 8007006:	89ab      	ldrh	r3, [r5, #12]
 8007008:	0598      	lsls	r0, r3, #22
 800700a:	d4ed      	bmi.n	8006fe8 <_vfiprintf_r+0x4c>
 800700c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800700e:	f7ff fe8c 	bl	8006d2a <__retarget_lock_release_recursive>
 8007012:	e7e9      	b.n	8006fe8 <_vfiprintf_r+0x4c>
 8007014:	2300      	movs	r3, #0
 8007016:	9309      	str	r3, [sp, #36]	; 0x24
 8007018:	2320      	movs	r3, #32
 800701a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800701e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007022:	2330      	movs	r3, #48	; 0x30
 8007024:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071e8 <_vfiprintf_r+0x24c>
 8007028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800702c:	f04f 0901 	mov.w	r9, #1
 8007030:	4623      	mov	r3, r4
 8007032:	469a      	mov	sl, r3
 8007034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007038:	b10a      	cbz	r2, 800703e <_vfiprintf_r+0xa2>
 800703a:	2a25      	cmp	r2, #37	; 0x25
 800703c:	d1f9      	bne.n	8007032 <_vfiprintf_r+0x96>
 800703e:	ebba 0b04 	subs.w	fp, sl, r4
 8007042:	d00b      	beq.n	800705c <_vfiprintf_r+0xc0>
 8007044:	465b      	mov	r3, fp
 8007046:	4622      	mov	r2, r4
 8007048:	4629      	mov	r1, r5
 800704a:	4630      	mov	r0, r6
 800704c:	f7ff ff93 	bl	8006f76 <__sfputs_r>
 8007050:	3001      	adds	r0, #1
 8007052:	f000 80aa 	beq.w	80071aa <_vfiprintf_r+0x20e>
 8007056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007058:	445a      	add	r2, fp
 800705a:	9209      	str	r2, [sp, #36]	; 0x24
 800705c:	f89a 3000 	ldrb.w	r3, [sl]
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 80a2 	beq.w	80071aa <_vfiprintf_r+0x20e>
 8007066:	2300      	movs	r3, #0
 8007068:	f04f 32ff 	mov.w	r2, #4294967295
 800706c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007070:	f10a 0a01 	add.w	sl, sl, #1
 8007074:	9304      	str	r3, [sp, #16]
 8007076:	9307      	str	r3, [sp, #28]
 8007078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800707c:	931a      	str	r3, [sp, #104]	; 0x68
 800707e:	4654      	mov	r4, sl
 8007080:	2205      	movs	r2, #5
 8007082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007086:	4858      	ldr	r0, [pc, #352]	; (80071e8 <_vfiprintf_r+0x24c>)
 8007088:	f7f9 f8a2 	bl	80001d0 <memchr>
 800708c:	9a04      	ldr	r2, [sp, #16]
 800708e:	b9d8      	cbnz	r0, 80070c8 <_vfiprintf_r+0x12c>
 8007090:	06d1      	lsls	r1, r2, #27
 8007092:	bf44      	itt	mi
 8007094:	2320      	movmi	r3, #32
 8007096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800709a:	0713      	lsls	r3, r2, #28
 800709c:	bf44      	itt	mi
 800709e:	232b      	movmi	r3, #43	; 0x2b
 80070a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a4:	f89a 3000 	ldrb.w	r3, [sl]
 80070a8:	2b2a      	cmp	r3, #42	; 0x2a
 80070aa:	d015      	beq.n	80070d8 <_vfiprintf_r+0x13c>
 80070ac:	9a07      	ldr	r2, [sp, #28]
 80070ae:	4654      	mov	r4, sl
 80070b0:	2000      	movs	r0, #0
 80070b2:	f04f 0c0a 	mov.w	ip, #10
 80070b6:	4621      	mov	r1, r4
 80070b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070bc:	3b30      	subs	r3, #48	; 0x30
 80070be:	2b09      	cmp	r3, #9
 80070c0:	d94e      	bls.n	8007160 <_vfiprintf_r+0x1c4>
 80070c2:	b1b0      	cbz	r0, 80070f2 <_vfiprintf_r+0x156>
 80070c4:	9207      	str	r2, [sp, #28]
 80070c6:	e014      	b.n	80070f2 <_vfiprintf_r+0x156>
 80070c8:	eba0 0308 	sub.w	r3, r0, r8
 80070cc:	fa09 f303 	lsl.w	r3, r9, r3
 80070d0:	4313      	orrs	r3, r2
 80070d2:	9304      	str	r3, [sp, #16]
 80070d4:	46a2      	mov	sl, r4
 80070d6:	e7d2      	b.n	800707e <_vfiprintf_r+0xe2>
 80070d8:	9b03      	ldr	r3, [sp, #12]
 80070da:	1d19      	adds	r1, r3, #4
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	9103      	str	r1, [sp, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	bfbb      	ittet	lt
 80070e4:	425b      	neglt	r3, r3
 80070e6:	f042 0202 	orrlt.w	r2, r2, #2
 80070ea:	9307      	strge	r3, [sp, #28]
 80070ec:	9307      	strlt	r3, [sp, #28]
 80070ee:	bfb8      	it	lt
 80070f0:	9204      	strlt	r2, [sp, #16]
 80070f2:	7823      	ldrb	r3, [r4, #0]
 80070f4:	2b2e      	cmp	r3, #46	; 0x2e
 80070f6:	d10c      	bne.n	8007112 <_vfiprintf_r+0x176>
 80070f8:	7863      	ldrb	r3, [r4, #1]
 80070fa:	2b2a      	cmp	r3, #42	; 0x2a
 80070fc:	d135      	bne.n	800716a <_vfiprintf_r+0x1ce>
 80070fe:	9b03      	ldr	r3, [sp, #12]
 8007100:	1d1a      	adds	r2, r3, #4
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	9203      	str	r2, [sp, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	bfb8      	it	lt
 800710a:	f04f 33ff 	movlt.w	r3, #4294967295
 800710e:	3402      	adds	r4, #2
 8007110:	9305      	str	r3, [sp, #20]
 8007112:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071f8 <_vfiprintf_r+0x25c>
 8007116:	7821      	ldrb	r1, [r4, #0]
 8007118:	2203      	movs	r2, #3
 800711a:	4650      	mov	r0, sl
 800711c:	f7f9 f858 	bl	80001d0 <memchr>
 8007120:	b140      	cbz	r0, 8007134 <_vfiprintf_r+0x198>
 8007122:	2340      	movs	r3, #64	; 0x40
 8007124:	eba0 000a 	sub.w	r0, r0, sl
 8007128:	fa03 f000 	lsl.w	r0, r3, r0
 800712c:	9b04      	ldr	r3, [sp, #16]
 800712e:	4303      	orrs	r3, r0
 8007130:	3401      	adds	r4, #1
 8007132:	9304      	str	r3, [sp, #16]
 8007134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007138:	482c      	ldr	r0, [pc, #176]	; (80071ec <_vfiprintf_r+0x250>)
 800713a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800713e:	2206      	movs	r2, #6
 8007140:	f7f9 f846 	bl	80001d0 <memchr>
 8007144:	2800      	cmp	r0, #0
 8007146:	d03f      	beq.n	80071c8 <_vfiprintf_r+0x22c>
 8007148:	4b29      	ldr	r3, [pc, #164]	; (80071f0 <_vfiprintf_r+0x254>)
 800714a:	bb1b      	cbnz	r3, 8007194 <_vfiprintf_r+0x1f8>
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	3307      	adds	r3, #7
 8007150:	f023 0307 	bic.w	r3, r3, #7
 8007154:	3308      	adds	r3, #8
 8007156:	9303      	str	r3, [sp, #12]
 8007158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715a:	443b      	add	r3, r7
 800715c:	9309      	str	r3, [sp, #36]	; 0x24
 800715e:	e767      	b.n	8007030 <_vfiprintf_r+0x94>
 8007160:	fb0c 3202 	mla	r2, ip, r2, r3
 8007164:	460c      	mov	r4, r1
 8007166:	2001      	movs	r0, #1
 8007168:	e7a5      	b.n	80070b6 <_vfiprintf_r+0x11a>
 800716a:	2300      	movs	r3, #0
 800716c:	3401      	adds	r4, #1
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	4619      	mov	r1, r3
 8007172:	f04f 0c0a 	mov.w	ip, #10
 8007176:	4620      	mov	r0, r4
 8007178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800717c:	3a30      	subs	r2, #48	; 0x30
 800717e:	2a09      	cmp	r2, #9
 8007180:	d903      	bls.n	800718a <_vfiprintf_r+0x1ee>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0c5      	beq.n	8007112 <_vfiprintf_r+0x176>
 8007186:	9105      	str	r1, [sp, #20]
 8007188:	e7c3      	b.n	8007112 <_vfiprintf_r+0x176>
 800718a:	fb0c 2101 	mla	r1, ip, r1, r2
 800718e:	4604      	mov	r4, r0
 8007190:	2301      	movs	r3, #1
 8007192:	e7f0      	b.n	8007176 <_vfiprintf_r+0x1da>
 8007194:	ab03      	add	r3, sp, #12
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	462a      	mov	r2, r5
 800719a:	4b16      	ldr	r3, [pc, #88]	; (80071f4 <_vfiprintf_r+0x258>)
 800719c:	a904      	add	r1, sp, #16
 800719e:	4630      	mov	r0, r6
 80071a0:	f3af 8000 	nop.w
 80071a4:	4607      	mov	r7, r0
 80071a6:	1c78      	adds	r0, r7, #1
 80071a8:	d1d6      	bne.n	8007158 <_vfiprintf_r+0x1bc>
 80071aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ac:	07d9      	lsls	r1, r3, #31
 80071ae:	d405      	bmi.n	80071bc <_vfiprintf_r+0x220>
 80071b0:	89ab      	ldrh	r3, [r5, #12]
 80071b2:	059a      	lsls	r2, r3, #22
 80071b4:	d402      	bmi.n	80071bc <_vfiprintf_r+0x220>
 80071b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071b8:	f7ff fdb7 	bl	8006d2a <__retarget_lock_release_recursive>
 80071bc:	89ab      	ldrh	r3, [r5, #12]
 80071be:	065b      	lsls	r3, r3, #25
 80071c0:	f53f af12 	bmi.w	8006fe8 <_vfiprintf_r+0x4c>
 80071c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071c6:	e711      	b.n	8006fec <_vfiprintf_r+0x50>
 80071c8:	ab03      	add	r3, sp, #12
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	462a      	mov	r2, r5
 80071ce:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <_vfiprintf_r+0x258>)
 80071d0:	a904      	add	r1, sp, #16
 80071d2:	4630      	mov	r0, r6
 80071d4:	f000 f880 	bl	80072d8 <_printf_i>
 80071d8:	e7e4      	b.n	80071a4 <_vfiprintf_r+0x208>
 80071da:	bf00      	nop
 80071dc:	080078a0 	.word	0x080078a0
 80071e0:	080078c0 	.word	0x080078c0
 80071e4:	08007880 	.word	0x08007880
 80071e8:	080078e0 	.word	0x080078e0
 80071ec:	080078ea 	.word	0x080078ea
 80071f0:	00000000 	.word	0x00000000
 80071f4:	08006f77 	.word	0x08006f77
 80071f8:	080078e6 	.word	0x080078e6

080071fc <_printf_common>:
 80071fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007200:	4616      	mov	r6, r2
 8007202:	4699      	mov	r9, r3
 8007204:	688a      	ldr	r2, [r1, #8]
 8007206:	690b      	ldr	r3, [r1, #16]
 8007208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800720c:	4293      	cmp	r3, r2
 800720e:	bfb8      	it	lt
 8007210:	4613      	movlt	r3, r2
 8007212:	6033      	str	r3, [r6, #0]
 8007214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007218:	4607      	mov	r7, r0
 800721a:	460c      	mov	r4, r1
 800721c:	b10a      	cbz	r2, 8007222 <_printf_common+0x26>
 800721e:	3301      	adds	r3, #1
 8007220:	6033      	str	r3, [r6, #0]
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	0699      	lsls	r1, r3, #26
 8007226:	bf42      	ittt	mi
 8007228:	6833      	ldrmi	r3, [r6, #0]
 800722a:	3302      	addmi	r3, #2
 800722c:	6033      	strmi	r3, [r6, #0]
 800722e:	6825      	ldr	r5, [r4, #0]
 8007230:	f015 0506 	ands.w	r5, r5, #6
 8007234:	d106      	bne.n	8007244 <_printf_common+0x48>
 8007236:	f104 0a19 	add.w	sl, r4, #25
 800723a:	68e3      	ldr	r3, [r4, #12]
 800723c:	6832      	ldr	r2, [r6, #0]
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	42ab      	cmp	r3, r5
 8007242:	dc26      	bgt.n	8007292 <_printf_common+0x96>
 8007244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007248:	1e13      	subs	r3, r2, #0
 800724a:	6822      	ldr	r2, [r4, #0]
 800724c:	bf18      	it	ne
 800724e:	2301      	movne	r3, #1
 8007250:	0692      	lsls	r2, r2, #26
 8007252:	d42b      	bmi.n	80072ac <_printf_common+0xb0>
 8007254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007258:	4649      	mov	r1, r9
 800725a:	4638      	mov	r0, r7
 800725c:	47c0      	blx	r8
 800725e:	3001      	adds	r0, #1
 8007260:	d01e      	beq.n	80072a0 <_printf_common+0xa4>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	68e5      	ldr	r5, [r4, #12]
 8007266:	6832      	ldr	r2, [r6, #0]
 8007268:	f003 0306 	and.w	r3, r3, #6
 800726c:	2b04      	cmp	r3, #4
 800726e:	bf08      	it	eq
 8007270:	1aad      	subeq	r5, r5, r2
 8007272:	68a3      	ldr	r3, [r4, #8]
 8007274:	6922      	ldr	r2, [r4, #16]
 8007276:	bf0c      	ite	eq
 8007278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800727c:	2500      	movne	r5, #0
 800727e:	4293      	cmp	r3, r2
 8007280:	bfc4      	itt	gt
 8007282:	1a9b      	subgt	r3, r3, r2
 8007284:	18ed      	addgt	r5, r5, r3
 8007286:	2600      	movs	r6, #0
 8007288:	341a      	adds	r4, #26
 800728a:	42b5      	cmp	r5, r6
 800728c:	d11a      	bne.n	80072c4 <_printf_common+0xc8>
 800728e:	2000      	movs	r0, #0
 8007290:	e008      	b.n	80072a4 <_printf_common+0xa8>
 8007292:	2301      	movs	r3, #1
 8007294:	4652      	mov	r2, sl
 8007296:	4649      	mov	r1, r9
 8007298:	4638      	mov	r0, r7
 800729a:	47c0      	blx	r8
 800729c:	3001      	adds	r0, #1
 800729e:	d103      	bne.n	80072a8 <_printf_common+0xac>
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
 80072a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a8:	3501      	adds	r5, #1
 80072aa:	e7c6      	b.n	800723a <_printf_common+0x3e>
 80072ac:	18e1      	adds	r1, r4, r3
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	2030      	movs	r0, #48	; 0x30
 80072b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072b6:	4422      	add	r2, r4
 80072b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072c0:	3302      	adds	r3, #2
 80072c2:	e7c7      	b.n	8007254 <_printf_common+0x58>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4622      	mov	r2, r4
 80072c8:	4649      	mov	r1, r9
 80072ca:	4638      	mov	r0, r7
 80072cc:	47c0      	blx	r8
 80072ce:	3001      	adds	r0, #1
 80072d0:	d0e6      	beq.n	80072a0 <_printf_common+0xa4>
 80072d2:	3601      	adds	r6, #1
 80072d4:	e7d9      	b.n	800728a <_printf_common+0x8e>
	...

080072d8 <_printf_i>:
 80072d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	460c      	mov	r4, r1
 80072de:	4691      	mov	r9, r2
 80072e0:	7e27      	ldrb	r7, [r4, #24]
 80072e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072e4:	2f78      	cmp	r7, #120	; 0x78
 80072e6:	4680      	mov	r8, r0
 80072e8:	469a      	mov	sl, r3
 80072ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072ee:	d807      	bhi.n	8007300 <_printf_i+0x28>
 80072f0:	2f62      	cmp	r7, #98	; 0x62
 80072f2:	d80a      	bhi.n	800730a <_printf_i+0x32>
 80072f4:	2f00      	cmp	r7, #0
 80072f6:	f000 80d8 	beq.w	80074aa <_printf_i+0x1d2>
 80072fa:	2f58      	cmp	r7, #88	; 0x58
 80072fc:	f000 80a3 	beq.w	8007446 <_printf_i+0x16e>
 8007300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007308:	e03a      	b.n	8007380 <_printf_i+0xa8>
 800730a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800730e:	2b15      	cmp	r3, #21
 8007310:	d8f6      	bhi.n	8007300 <_printf_i+0x28>
 8007312:	a001      	add	r0, pc, #4	; (adr r0, 8007318 <_printf_i+0x40>)
 8007314:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007318:	08007371 	.word	0x08007371
 800731c:	08007385 	.word	0x08007385
 8007320:	08007301 	.word	0x08007301
 8007324:	08007301 	.word	0x08007301
 8007328:	08007301 	.word	0x08007301
 800732c:	08007301 	.word	0x08007301
 8007330:	08007385 	.word	0x08007385
 8007334:	08007301 	.word	0x08007301
 8007338:	08007301 	.word	0x08007301
 800733c:	08007301 	.word	0x08007301
 8007340:	08007301 	.word	0x08007301
 8007344:	08007491 	.word	0x08007491
 8007348:	080073b5 	.word	0x080073b5
 800734c:	08007473 	.word	0x08007473
 8007350:	08007301 	.word	0x08007301
 8007354:	08007301 	.word	0x08007301
 8007358:	080074b3 	.word	0x080074b3
 800735c:	08007301 	.word	0x08007301
 8007360:	080073b5 	.word	0x080073b5
 8007364:	08007301 	.word	0x08007301
 8007368:	08007301 	.word	0x08007301
 800736c:	0800747b 	.word	0x0800747b
 8007370:	680b      	ldr	r3, [r1, #0]
 8007372:	1d1a      	adds	r2, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	600a      	str	r2, [r1, #0]
 8007378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800737c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007380:	2301      	movs	r3, #1
 8007382:	e0a3      	b.n	80074cc <_printf_i+0x1f4>
 8007384:	6825      	ldr	r5, [r4, #0]
 8007386:	6808      	ldr	r0, [r1, #0]
 8007388:	062e      	lsls	r6, r5, #24
 800738a:	f100 0304 	add.w	r3, r0, #4
 800738e:	d50a      	bpl.n	80073a6 <_printf_i+0xce>
 8007390:	6805      	ldr	r5, [r0, #0]
 8007392:	600b      	str	r3, [r1, #0]
 8007394:	2d00      	cmp	r5, #0
 8007396:	da03      	bge.n	80073a0 <_printf_i+0xc8>
 8007398:	232d      	movs	r3, #45	; 0x2d
 800739a:	426d      	negs	r5, r5
 800739c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073a0:	485e      	ldr	r0, [pc, #376]	; (800751c <_printf_i+0x244>)
 80073a2:	230a      	movs	r3, #10
 80073a4:	e019      	b.n	80073da <_printf_i+0x102>
 80073a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80073aa:	6805      	ldr	r5, [r0, #0]
 80073ac:	600b      	str	r3, [r1, #0]
 80073ae:	bf18      	it	ne
 80073b0:	b22d      	sxthne	r5, r5
 80073b2:	e7ef      	b.n	8007394 <_printf_i+0xbc>
 80073b4:	680b      	ldr	r3, [r1, #0]
 80073b6:	6825      	ldr	r5, [r4, #0]
 80073b8:	1d18      	adds	r0, r3, #4
 80073ba:	6008      	str	r0, [r1, #0]
 80073bc:	0628      	lsls	r0, r5, #24
 80073be:	d501      	bpl.n	80073c4 <_printf_i+0xec>
 80073c0:	681d      	ldr	r5, [r3, #0]
 80073c2:	e002      	b.n	80073ca <_printf_i+0xf2>
 80073c4:	0669      	lsls	r1, r5, #25
 80073c6:	d5fb      	bpl.n	80073c0 <_printf_i+0xe8>
 80073c8:	881d      	ldrh	r5, [r3, #0]
 80073ca:	4854      	ldr	r0, [pc, #336]	; (800751c <_printf_i+0x244>)
 80073cc:	2f6f      	cmp	r7, #111	; 0x6f
 80073ce:	bf0c      	ite	eq
 80073d0:	2308      	moveq	r3, #8
 80073d2:	230a      	movne	r3, #10
 80073d4:	2100      	movs	r1, #0
 80073d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073da:	6866      	ldr	r6, [r4, #4]
 80073dc:	60a6      	str	r6, [r4, #8]
 80073de:	2e00      	cmp	r6, #0
 80073e0:	bfa2      	ittt	ge
 80073e2:	6821      	ldrge	r1, [r4, #0]
 80073e4:	f021 0104 	bicge.w	r1, r1, #4
 80073e8:	6021      	strge	r1, [r4, #0]
 80073ea:	b90d      	cbnz	r5, 80073f0 <_printf_i+0x118>
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	d04d      	beq.n	800748c <_printf_i+0x1b4>
 80073f0:	4616      	mov	r6, r2
 80073f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80073f6:	fb03 5711 	mls	r7, r3, r1, r5
 80073fa:	5dc7      	ldrb	r7, [r0, r7]
 80073fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007400:	462f      	mov	r7, r5
 8007402:	42bb      	cmp	r3, r7
 8007404:	460d      	mov	r5, r1
 8007406:	d9f4      	bls.n	80073f2 <_printf_i+0x11a>
 8007408:	2b08      	cmp	r3, #8
 800740a:	d10b      	bne.n	8007424 <_printf_i+0x14c>
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	07df      	lsls	r7, r3, #31
 8007410:	d508      	bpl.n	8007424 <_printf_i+0x14c>
 8007412:	6923      	ldr	r3, [r4, #16]
 8007414:	6861      	ldr	r1, [r4, #4]
 8007416:	4299      	cmp	r1, r3
 8007418:	bfde      	ittt	le
 800741a:	2330      	movle	r3, #48	; 0x30
 800741c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007420:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007424:	1b92      	subs	r2, r2, r6
 8007426:	6122      	str	r2, [r4, #16]
 8007428:	f8cd a000 	str.w	sl, [sp]
 800742c:	464b      	mov	r3, r9
 800742e:	aa03      	add	r2, sp, #12
 8007430:	4621      	mov	r1, r4
 8007432:	4640      	mov	r0, r8
 8007434:	f7ff fee2 	bl	80071fc <_printf_common>
 8007438:	3001      	adds	r0, #1
 800743a:	d14c      	bne.n	80074d6 <_printf_i+0x1fe>
 800743c:	f04f 30ff 	mov.w	r0, #4294967295
 8007440:	b004      	add	sp, #16
 8007442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007446:	4835      	ldr	r0, [pc, #212]	; (800751c <_printf_i+0x244>)
 8007448:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	680e      	ldr	r6, [r1, #0]
 8007450:	061f      	lsls	r7, r3, #24
 8007452:	f856 5b04 	ldr.w	r5, [r6], #4
 8007456:	600e      	str	r6, [r1, #0]
 8007458:	d514      	bpl.n	8007484 <_printf_i+0x1ac>
 800745a:	07d9      	lsls	r1, r3, #31
 800745c:	bf44      	itt	mi
 800745e:	f043 0320 	orrmi.w	r3, r3, #32
 8007462:	6023      	strmi	r3, [r4, #0]
 8007464:	b91d      	cbnz	r5, 800746e <_printf_i+0x196>
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	f023 0320 	bic.w	r3, r3, #32
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	2310      	movs	r3, #16
 8007470:	e7b0      	b.n	80073d4 <_printf_i+0xfc>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	f043 0320 	orr.w	r3, r3, #32
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	2378      	movs	r3, #120	; 0x78
 800747c:	4828      	ldr	r0, [pc, #160]	; (8007520 <_printf_i+0x248>)
 800747e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007482:	e7e3      	b.n	800744c <_printf_i+0x174>
 8007484:	065e      	lsls	r6, r3, #25
 8007486:	bf48      	it	mi
 8007488:	b2ad      	uxthmi	r5, r5
 800748a:	e7e6      	b.n	800745a <_printf_i+0x182>
 800748c:	4616      	mov	r6, r2
 800748e:	e7bb      	b.n	8007408 <_printf_i+0x130>
 8007490:	680b      	ldr	r3, [r1, #0]
 8007492:	6826      	ldr	r6, [r4, #0]
 8007494:	6960      	ldr	r0, [r4, #20]
 8007496:	1d1d      	adds	r5, r3, #4
 8007498:	600d      	str	r5, [r1, #0]
 800749a:	0635      	lsls	r5, r6, #24
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	d501      	bpl.n	80074a4 <_printf_i+0x1cc>
 80074a0:	6018      	str	r0, [r3, #0]
 80074a2:	e002      	b.n	80074aa <_printf_i+0x1d2>
 80074a4:	0671      	lsls	r1, r6, #25
 80074a6:	d5fb      	bpl.n	80074a0 <_printf_i+0x1c8>
 80074a8:	8018      	strh	r0, [r3, #0]
 80074aa:	2300      	movs	r3, #0
 80074ac:	6123      	str	r3, [r4, #16]
 80074ae:	4616      	mov	r6, r2
 80074b0:	e7ba      	b.n	8007428 <_printf_i+0x150>
 80074b2:	680b      	ldr	r3, [r1, #0]
 80074b4:	1d1a      	adds	r2, r3, #4
 80074b6:	600a      	str	r2, [r1, #0]
 80074b8:	681e      	ldr	r6, [r3, #0]
 80074ba:	6862      	ldr	r2, [r4, #4]
 80074bc:	2100      	movs	r1, #0
 80074be:	4630      	mov	r0, r6
 80074c0:	f7f8 fe86 	bl	80001d0 <memchr>
 80074c4:	b108      	cbz	r0, 80074ca <_printf_i+0x1f2>
 80074c6:	1b80      	subs	r0, r0, r6
 80074c8:	6060      	str	r0, [r4, #4]
 80074ca:	6863      	ldr	r3, [r4, #4]
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	2300      	movs	r3, #0
 80074d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d4:	e7a8      	b.n	8007428 <_printf_i+0x150>
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	4632      	mov	r2, r6
 80074da:	4649      	mov	r1, r9
 80074dc:	4640      	mov	r0, r8
 80074de:	47d0      	blx	sl
 80074e0:	3001      	adds	r0, #1
 80074e2:	d0ab      	beq.n	800743c <_printf_i+0x164>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	079b      	lsls	r3, r3, #30
 80074e8:	d413      	bmi.n	8007512 <_printf_i+0x23a>
 80074ea:	68e0      	ldr	r0, [r4, #12]
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	4298      	cmp	r0, r3
 80074f0:	bfb8      	it	lt
 80074f2:	4618      	movlt	r0, r3
 80074f4:	e7a4      	b.n	8007440 <_printf_i+0x168>
 80074f6:	2301      	movs	r3, #1
 80074f8:	4632      	mov	r2, r6
 80074fa:	4649      	mov	r1, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	47d0      	blx	sl
 8007500:	3001      	adds	r0, #1
 8007502:	d09b      	beq.n	800743c <_printf_i+0x164>
 8007504:	3501      	adds	r5, #1
 8007506:	68e3      	ldr	r3, [r4, #12]
 8007508:	9903      	ldr	r1, [sp, #12]
 800750a:	1a5b      	subs	r3, r3, r1
 800750c:	42ab      	cmp	r3, r5
 800750e:	dcf2      	bgt.n	80074f6 <_printf_i+0x21e>
 8007510:	e7eb      	b.n	80074ea <_printf_i+0x212>
 8007512:	2500      	movs	r5, #0
 8007514:	f104 0619 	add.w	r6, r4, #25
 8007518:	e7f5      	b.n	8007506 <_printf_i+0x22e>
 800751a:	bf00      	nop
 800751c:	080078f1 	.word	0x080078f1
 8007520:	08007902 	.word	0x08007902

08007524 <_sbrk_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4d06      	ldr	r5, [pc, #24]	; (8007540 <_sbrk_r+0x1c>)
 8007528:	2300      	movs	r3, #0
 800752a:	4604      	mov	r4, r0
 800752c:	4608      	mov	r0, r1
 800752e:	602b      	str	r3, [r5, #0]
 8007530:	f7f9 fb24 	bl	8000b7c <_sbrk>
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	d102      	bne.n	800753e <_sbrk_r+0x1a>
 8007538:	682b      	ldr	r3, [r5, #0]
 800753a:	b103      	cbz	r3, 800753e <_sbrk_r+0x1a>
 800753c:	6023      	str	r3, [r4, #0]
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	20001a94 	.word	0x20001a94

08007544 <__sread>:
 8007544:	b510      	push	{r4, lr}
 8007546:	460c      	mov	r4, r1
 8007548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754c:	f000 f8a0 	bl	8007690 <_read_r>
 8007550:	2800      	cmp	r0, #0
 8007552:	bfab      	itete	ge
 8007554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007556:	89a3      	ldrhlt	r3, [r4, #12]
 8007558:	181b      	addge	r3, r3, r0
 800755a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800755e:	bfac      	ite	ge
 8007560:	6563      	strge	r3, [r4, #84]	; 0x54
 8007562:	81a3      	strhlt	r3, [r4, #12]
 8007564:	bd10      	pop	{r4, pc}

08007566 <__swrite>:
 8007566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800756a:	461f      	mov	r7, r3
 800756c:	898b      	ldrh	r3, [r1, #12]
 800756e:	05db      	lsls	r3, r3, #23
 8007570:	4605      	mov	r5, r0
 8007572:	460c      	mov	r4, r1
 8007574:	4616      	mov	r6, r2
 8007576:	d505      	bpl.n	8007584 <__swrite+0x1e>
 8007578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757c:	2302      	movs	r3, #2
 800757e:	2200      	movs	r2, #0
 8007580:	f000 f868 	bl	8007654 <_lseek_r>
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800758a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	4632      	mov	r2, r6
 8007592:	463b      	mov	r3, r7
 8007594:	4628      	mov	r0, r5
 8007596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800759a:	f000 b817 	b.w	80075cc <_write_r>

0800759e <__sseek>:
 800759e:	b510      	push	{r4, lr}
 80075a0:	460c      	mov	r4, r1
 80075a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a6:	f000 f855 	bl	8007654 <_lseek_r>
 80075aa:	1c43      	adds	r3, r0, #1
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	bf15      	itete	ne
 80075b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80075b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075ba:	81a3      	strheq	r3, [r4, #12]
 80075bc:	bf18      	it	ne
 80075be:	81a3      	strhne	r3, [r4, #12]
 80075c0:	bd10      	pop	{r4, pc}

080075c2 <__sclose>:
 80075c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c6:	f000 b813 	b.w	80075f0 <_close_r>
	...

080075cc <_write_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d07      	ldr	r5, [pc, #28]	; (80075ec <_write_r+0x20>)
 80075d0:	4604      	mov	r4, r0
 80075d2:	4608      	mov	r0, r1
 80075d4:	4611      	mov	r1, r2
 80075d6:	2200      	movs	r2, #0
 80075d8:	602a      	str	r2, [r5, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	f7f9 fa7d 	bl	8000ada <_write>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_write_r+0x1e>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_write_r+0x1e>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	20001a94 	.word	0x20001a94

080075f0 <_close_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d06      	ldr	r5, [pc, #24]	; (800760c <_close_r+0x1c>)
 80075f4:	2300      	movs	r3, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	f7f9 fa89 	bl	8000b12 <_close>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_close_r+0x1a>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_close_r+0x1a>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	20001a94 	.word	0x20001a94

08007610 <_fstat_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4d07      	ldr	r5, [pc, #28]	; (8007630 <_fstat_r+0x20>)
 8007614:	2300      	movs	r3, #0
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	4611      	mov	r1, r2
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	f7f9 fa84 	bl	8000b2a <_fstat>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	d102      	bne.n	800762c <_fstat_r+0x1c>
 8007626:	682b      	ldr	r3, [r5, #0]
 8007628:	b103      	cbz	r3, 800762c <_fstat_r+0x1c>
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	bd38      	pop	{r3, r4, r5, pc}
 800762e:	bf00      	nop
 8007630:	20001a94 	.word	0x20001a94

08007634 <_isatty_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d06      	ldr	r5, [pc, #24]	; (8007650 <_isatty_r+0x1c>)
 8007638:	2300      	movs	r3, #0
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	602b      	str	r3, [r5, #0]
 8007640:	f7f9 fa83 	bl	8000b4a <_isatty>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d102      	bne.n	800764e <_isatty_r+0x1a>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	b103      	cbz	r3, 800764e <_isatty_r+0x1a>
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	20001a94 	.word	0x20001a94

08007654 <_lseek_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d07      	ldr	r5, [pc, #28]	; (8007674 <_lseek_r+0x20>)
 8007658:	4604      	mov	r4, r0
 800765a:	4608      	mov	r0, r1
 800765c:	4611      	mov	r1, r2
 800765e:	2200      	movs	r2, #0
 8007660:	602a      	str	r2, [r5, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	f7f9 fa7c 	bl	8000b60 <_lseek>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_lseek_r+0x1e>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_lseek_r+0x1e>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	20001a94 	.word	0x20001a94

08007678 <__malloc_lock>:
 8007678:	4801      	ldr	r0, [pc, #4]	; (8007680 <__malloc_lock+0x8>)
 800767a:	f7ff bb55 	b.w	8006d28 <__retarget_lock_acquire_recursive>
 800767e:	bf00      	nop
 8007680:	20001a8c 	.word	0x20001a8c

08007684 <__malloc_unlock>:
 8007684:	4801      	ldr	r0, [pc, #4]	; (800768c <__malloc_unlock+0x8>)
 8007686:	f7ff bb50 	b.w	8006d2a <__retarget_lock_release_recursive>
 800768a:	bf00      	nop
 800768c:	20001a8c 	.word	0x20001a8c

08007690 <_read_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4d07      	ldr	r5, [pc, #28]	; (80076b0 <_read_r+0x20>)
 8007694:	4604      	mov	r4, r0
 8007696:	4608      	mov	r0, r1
 8007698:	4611      	mov	r1, r2
 800769a:	2200      	movs	r2, #0
 800769c:	602a      	str	r2, [r5, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	f7f9 f9fe 	bl	8000aa0 <_read>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_read_r+0x1e>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_read_r+0x1e>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	20001a94 	.word	0x20001a94

080076b4 <_init>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	bf00      	nop
 80076b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ba:	bc08      	pop	{r3}
 80076bc:	469e      	mov	lr, r3
 80076be:	4770      	bx	lr

080076c0 <_fini>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr
