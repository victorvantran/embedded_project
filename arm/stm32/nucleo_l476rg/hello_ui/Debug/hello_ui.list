
hello_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000678c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a20  08006a20  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a28  08006a28  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006a28  08006a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001abc  2000007c  08006ab4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b38  08006ab4  00021b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb79  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d1c  00000000  00000000  0003fc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00043948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00045208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000069a6  00000000  00000000  00046970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183e4  00000000  00000000  0004d316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100a24  00000000  00000000  000656fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016611e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de0  00000000  00000000  00166174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006904 	.word	0x08006904

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08006904 	.word	0x08006904

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc98 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8d0 	bl	8000678 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004d8:	f000 f89a 	bl	8000610 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f003 facc 	bl	8003a78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <main+0x30>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x34>)
 80004e6:	f003 fb11 	bl	8003b0c <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <main+0x38>)
 80004ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f0:	f003 fae6 	bl	8003ac0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x2c>
 80004f6:	bf00      	nop
 80004f8:	08006964 	.word	0x08006964
 80004fc:	08000781 	.word	0x08000781
 8000500:	2000011c 	.word	0x2000011c

08000504 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b0b8      	sub	sp, #224	; 0xe0
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f006 f87e 	bl	8006614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2288      	movs	r2, #136	; 0x88
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f006 f870 	bl	8006614 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	2303      	movs	r3, #3
 800054a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000554:	230a      	movs	r3, #10
 8000556:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800055a:	2307      	movs	r3, #7
 800055c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000570:	4618      	mov	r0, r3
 8000572:	f000 ffbf 	bl	80014f4 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000586:	f000 f925 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2303      	movs	r3, #3
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005ac:	2104      	movs	r1, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fb86 	bl	8001cc0 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80005c4:	f000 f906 	bl	80007d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fdaa 	bl	800212c <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf14      	ite	ne
 80005de:	2301      	movne	r3, #1
 80005e0:	2300      	moveq	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 80005e8:	f000 f8f4 	bl	80007d4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f0:	f000 ff2a 	bl	8001448 <HAL_PWREx_ControlVoltageScaling>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000604:	f000 f8e6 	bl	80007d4 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	37e0      	adds	r7, #224	; 0xe0
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000654:	f002 fcf8 	bl	8003048 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf14      	ite	ne
 800065e:	2301      	movne	r3, #1
 8000660:	2300      	moveq	r3, #0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000668:	f000 f8b4 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000098 	.word	0x20000098
 8000674:	40004400 	.word	0x40004400

08000678 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a2d      	ldr	r2, [pc, #180]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a27      	ldr	r2, [pc, #156]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a21      	ldr	r2, [pc, #132]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <_ZL12MX_GPIO_Initv+0xd0>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	4815      	ldr	r0, [pc, #84]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006f6:	f000 fe4f 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006fa:	2340      	movs	r3, #64	; 0x40
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <_ZL12MX_GPIO_Initv+0xd8>)
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000702:	2301      	movs	r3, #1
 8000704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	480f      	ldr	r0, [pc, #60]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 800070e:	f000 fc99 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	4808      	ldr	r0, [pc, #32]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 800072c:	f000 fc8a 	bl	8001044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2105      	movs	r1, #5
 8000734:	2017      	movs	r0, #23
 8000736:	f000 fc5b 	bl	8000ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800073a:	2017      	movs	r0, #23
 800073c:	f000 fc74 	bl	8001028 <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	; 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	48000800 	.word	0x48000800
 8000750:	10210000 	.word	0x10210000

08000754 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_6)
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	2b40      	cmp	r3, #64	; 0x40
 8000762:	d105      	bne.n	8000770 <HAL_GPIO_EXTI_Callback+0x1c>
	{
	  HAL_UART_Transmit(&huart2, (uint8_t *)("enter: main menu\r\n"), sizeof("enter: main menu\r\n"), 100);
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2213      	movs	r2, #19
 8000768:	4903      	ldr	r1, [pc, #12]	; (8000778 <HAL_GPIO_EXTI_Callback+0x24>)
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <HAL_GPIO_EXTI_Callback+0x28>)
 800076c:	f002 fcba 	bl	80030e4 <HAL_UART_Transmit>
	}
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08006928 	.word	0x08006928
 800077c:	20000098 	.word	0x20000098

08000780 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	HAL_UART_Transmit(&huart2, (uint8_t *)("hello\r\n"), sizeof("hello\r\n"), 100);
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	2208      	movs	r2, #8
 800078c:	4905      	ldr	r1, [pc, #20]	; (80007a4 <_Z16StartDefaultTaskPv+0x24>)
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <_Z16StartDefaultTaskPv+0x28>)
 8000790:	f002 fca8 	bl	80030e4 <HAL_UART_Transmit>
  	xUI.test();
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <_Z16StartDefaultTaskPv+0x2c>)
 8000796:	f000 fad1 	bl	8000d3c <_ZNK2UI4testEv>
    osDelay(250);
 800079a:	20fa      	movs	r0, #250	; 0xfa
 800079c:	f003 fa48 	bl	8003c30 <osDelay>
  	HAL_UART_Transmit(&huart2, (uint8_t *)("hello\r\n"), sizeof("hello\r\n"), 100);
 80007a0:	e7f2      	b.n	8000788 <_Z16StartDefaultTaskPv+0x8>
 80007a2:	bf00      	nop
 80007a4:	0800693c 	.word	0x0800693c
 80007a8:	20000098 	.word	0x20000098
 80007ac:	20000120 	.word	0x20000120

080007b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d101      	bne.n	80007c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007c2:	f000 fb3d 	bl	8000e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40001000 	.word	0x40001000

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d108      	bne.n	8000802 <_Z41__static_initialization_and_destruction_0ii+0x22>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d103      	bne.n	8000802 <_Z41__static_initialization_and_destruction_0ii+0x22>
UI xUI(&huart2);
 80007fa:	4909      	ldr	r1, [pc, #36]	; (8000820 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007fe:	f000 fa6d 	bl	8000cdc <_ZN2UIC1EP20__UART_HandleTypeDef>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d107      	bne.n	8000818 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800080e:	4293      	cmp	r3, r2
 8000810:	d102      	bne.n	8000818 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000814:	f000 fa7e 	bl	8000d14 <_ZN2UID1Ev>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000098 	.word	0x20000098
 8000824:	20000120 	.word	0x20000120

08000828 <_GLOBAL__sub_I_huart2>:
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
 800082c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000830:	2001      	movs	r0, #1
 8000832:	f7ff ffd5 	bl	80007e0 <_Z41__static_initialization_and_destruction_0ii>
 8000836:	bd80      	pop	{r7, pc}

08000838 <_GLOBAL__sub_D_huart2>:
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
 800083c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff ffcd 	bl	80007e0 <_Z41__static_initialization_and_destruction_0ii>
 8000846:	bd80      	pop	{r7, pc}

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_MspInit+0x4c>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6613      	str	r3, [r2, #96]	; 0x60
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_MspInit+0x4c>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_MspInit+0x4c>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_MspInit+0x4c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6593      	str	r3, [r2, #88]	; 0x58
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	210f      	movs	r1, #15
 8000882:	f06f 0001 	mvn.w	r0, #1
 8000886:	f000 fbb3 	bl	8000ff0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_UART_MspInit+0x7c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d128      	bne.n	800090c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	6593      	str	r3, [r2, #88]	; 0x58
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_UART_MspInit+0x80>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ea:	230c      	movs	r3, #12
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fa:	2307      	movs	r3, #7
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f000 fb9c 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40004400 	.word	0x40004400
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	2036      	movs	r0, #54	; 0x36
 8000932:	f000 fb5d 	bl	8000ff0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000936:	2036      	movs	r0, #54	; 0x36
 8000938:	f000 fb76 	bl	8001028 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <HAL_InitTick+0x9c>)
 800093e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000940:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <HAL_InitTick+0x9c>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6593      	str	r3, [r2, #88]	; 0x58
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <HAL_InitTick+0x9c>)
 800094a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000954:	f107 0210 	add.w	r2, r7, #16
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fb52 	bl	8002008 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000964:	f001 fb24 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8000968:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <HAL_InitTick+0xa0>)
 800096e:	fba2 2303 	umull	r2, r3, r2, r3
 8000972:	0c9b      	lsrs	r3, r3, #18
 8000974:	3b01      	subs	r3, #1
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_InitTick+0xa4>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <HAL_InitTick+0xa8>)
 800097c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_InitTick+0xa4>)
 8000980:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000984:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_InitTick+0xa4>)
 8000988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_InitTick+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_InitTick+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <HAL_InitTick+0xa4>)
 800099a:	f002 f883 	bl	8002aa4 <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d104      	bne.n	80009ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <HAL_InitTick+0xa4>)
 80009a6:	f002 f8df 	bl	8002b68 <HAL_TIM_Base_Start_IT>
 80009aa:	4603      	mov	r3, r0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3730      	adds	r7, #48	; 0x30
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	20001a98 	.word	0x20001a98
 80009c4:	40001000 	.word	0x40001000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80009f8:	2040      	movs	r0, #64	; 0x40
 80009fa:	f000 fcff 	bl	80013fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIM6_DAC_IRQHandler+0x10>)
 8000a0a:	f002 f91d 	bl	8002c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20001a98 	.word	0x20001a98

08000a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	return 1;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_kill>:

int _kill(int pid, int sig)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a32:	f005 fda7 	bl	8006584 <__errno>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2216      	movs	r2, #22
 8000a3a:	601a      	str	r2, [r3, #0]
	return -1;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_exit>:

void _exit (int status)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ffe7 	bl	8000a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a5a:	e7fe      	b.n	8000a5a <_exit+0x12>

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f005 fd7a 	bl	8006584 <__errno>
 8000a90:	4603      	mov	r3, r0
 8000a92:	220c      	movs	r2, #12
 8000a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20018000 	.word	0x20018000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	20000128 	.word	0x20000128
 8000ac4:	20001b38 	.word	0x20001b38

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <SystemInit+0x5c>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <SystemInit+0x5c>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <SystemInit+0x60>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <SystemInit+0x60>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <SystemInit+0x60>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <SystemInit+0x60>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <SystemInit+0x60>)
 8000af4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000af8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000afc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <SystemInit+0x60>)
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <SystemInit+0x60>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <SystemInit+0x60>)
 8000b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SystemInit+0x60>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00
 8000b28:	40021000 	.word	0x40021000

08000b2c <_ZN7UIStateC1E9EnumState>:
#include "ui.h"



// UIState
UIState::UIState(EnumState eState) : _eState(eState) {}
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <_ZN7UIStateC1E9EnumState+0x24>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	08006a00 	.word	0x08006a00

08000b54 <_ZN7UIStateD1Ev>:
UIState::~UIState() {}
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <_ZN7UIStateD1Ev+0x1c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	08006a00 	.word	0x08006a00

08000b74 <_ZN13MainMenuStateC1Ev>:




// MainMenuState
MainMenuState::MainMenuState() : UIState(EnumState::MAIN_MENU) {}
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ffd3 	bl	8000b2c <_ZN7UIStateC1E9EnumState>
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <_ZN13MainMenuStateC1Ev+0x24>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	080069d8 	.word	0x080069d8

08000b9c <_ZN13MainMenuStateD1Ev>:
MainMenuState::~MainMenuState() {}
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <_ZN13MainMenuStateD1Ev+0x20>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ffd1 	bl	8000b54 <_ZN7UIStateD1Ev>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	080069d8 	.word	0x080069d8

08000bc0 <_ZN13MainMenuStateD0Ev>:
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ffe7 	bl	8000b9c <_ZN13MainMenuStateD1Ev>
 8000bce:	2108      	movs	r1, #8
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f005 fca3 	bl	800651c <_ZdlPvj>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_ZNK13MainMenuState6vEnterEP2UI>:

void MainMenuState::vEnter(UI* pxUI) const
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  //HAL_UART_Transmit(pxUI->getPXUART(), (uint8_t *)("enter: main menu\r\n"), sizeof("enter: main menu\r\n"), 100);
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_ZNK13MainMenuState5vExitEP2UI>:


void MainMenuState::vExit(UI* pxUI) const
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  //HAL_UART_Transmit(pxUI->getPXUART(), (uint8_t *)("exit: main menu\r\n"), sizeof("exit: main menu\r\n"), 100);
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_ZNK13MainMenuState8vEventUpEP2UI>:


void MainMenuState::vEventUp(UI* pxUI) const
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	// main menu modify
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_ZNK13MainMenuState10vEventDownEP2UI>:


void MainMenuState::vEventDown(UI* pxUI) const
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]

}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_ZNK13MainMenuState10vEventLeftEP2UI>:


void MainMenuState::vEventLeft(UI* pxUI) const
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	pxUI->vTransitionState(MainMenuState::getInstance());
 8000c42:	f000 f81d 	bl	8000c80 <_ZN13MainMenuState11getInstanceEv>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6838      	ldr	r0, [r7, #0]
 8000c4c:	f000 f88e 	bl	8000d6c <_ZN2UI16vTransitionStateERK7UIState>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_ZNK13MainMenuState11vEventRightEP2UI>:


void MainMenuState::vEventRight(UI* pxUI) const
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <__tcf_0>:


const UIState& MainMenuState::getInstance(void)
{
	static const MainMenuState xSingleton;
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4801      	ldr	r0, [pc, #4]	; (8000c7c <__tcf_0+0xc>)
 8000c76:	f7ff ff91 	bl	8000b9c <_ZN13MainMenuStateD1Ev>
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000012c 	.word	0x2000012c

08000c80 <_ZN13MainMenuState11getInstanceEv>:
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	static const MainMenuState xSingleton;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <_ZN13MainMenuState11getInstanceEv+0x50>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	f3bf 8f5b 	dmb	ish
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf0c      	ite	eq
 8000c96:	2301      	moveq	r3, #1
 8000c98:	2300      	movne	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d013      	beq.n	8000cc8 <_ZN13MainMenuState11getInstanceEv+0x48>
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <_ZN13MainMenuState11getInstanceEv+0x50>)
 8000ca2:	f005 fc3d 	bl	8006520 <__cxa_guard_acquire>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d008      	beq.n	8000cc8 <_ZN13MainMenuState11getInstanceEv+0x48>
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <_ZN13MainMenuState11getInstanceEv+0x54>)
 8000cb8:	f7ff ff5c 	bl	8000b74 <_ZN13MainMenuStateC1Ev>
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <_ZN13MainMenuState11getInstanceEv+0x50>)
 8000cbe:	f005 fc3b 	bl	8006538 <__cxa_guard_release>
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <_ZN13MainMenuState11getInstanceEv+0x58>)
 8000cc4:	f005 fc58 	bl	8006578 <atexit>
	return xSingleton;
 8000cc8:	4b02      	ldr	r3, [pc, #8]	; (8000cd4 <_ZN13MainMenuState11getInstanceEv+0x54>)
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000134 	.word	0x20000134
 8000cd4:	2000012c 	.word	0x2000012c
 8000cd8:	08000c71 	.word	0x08000c71

08000cdc <_ZN2UIC1EP20__UART_HandleTypeDef>:
*/

UI::UI() : _pxCurrentState(&MainMenuState::getInstance()), _pxUART(nullptr) {}


UI::UI(UART_HandleTypeDef *pxUART) : _pxCurrentState(&MainMenuState::getInstance()),_pxUART(pxUART)
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	f7ff ffcb 	bl	8000c80 <_ZN13MainMenuState11getInstanceEv>
 8000cea:	4602      	mov	r2, r0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
{
	this->_pxCurrentState->vEnter(this);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3308      	adds	r3, #8
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	4610      	mov	r0, r2
 8000d08:	4798      	blx	r3
}
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_ZN2UID1Ev>:


UI::~UI()
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
{
	this->_pxCurrentState->vExit(this);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	330c      	adds	r3, #12
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4798      	blx	r3
}
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <_ZNK2UI4testEv>:


void UI::test(void) const
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d48:	4806      	ldr	r0, [pc, #24]	; (8000d64 <_ZNK2UI4testEv+0x28>)
 8000d4a:	f000 fb3d 	bl	80013c8 <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("test\r\n"), sizeof("test\r\n"), 100);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6858      	ldr	r0, [r3, #4]
 8000d52:	2364      	movs	r3, #100	; 0x64
 8000d54:	2207      	movs	r2, #7
 8000d56:	4904      	ldr	r1, [pc, #16]	; (8000d68 <_ZNK2UI4testEv+0x2c>)
 8000d58:	f002 f9c4 	bl	80030e4 <HAL_UART_Transmit>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	48000800 	.word	0x48000800
 8000d68:	08006944 	.word	0x08006944

08000d6c <_ZN2UI16vTransitionStateERK7UIState>:
	return this->_pxCurrentState;
}


void UI::vTransitionState(const UIState& xNextState)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	this->_pxCurrentState->vExit(this);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	330c      	adds	r3, #12
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	4610      	mov	r0, r2
 8000d88:	4798      	blx	r3
	this->_pxCurrentState = &xNextState;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	601a      	str	r2, [r3, #0]
	this->_pxCurrentState->vEnter(this);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3308      	adds	r3, #8
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4610      	mov	r0, r2
 8000da2:	4798      	blx	r3
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff fe8a 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000db4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000db6:	e003      	b.n	8000dc0 <LoopCopyDataInit>

08000db8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dbe:	3104      	adds	r1, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dc0:	480a      	ldr	r0, [pc, #40]	; (8000dec <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000dc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dc8:	d3f6      	bcc.n	8000db8 <CopyDataInit>
	ldr	r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000dcc:	e002      	b.n	8000dd4 <LoopFillZerobss>

08000dce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dd0:	f842 3b04 	str.w	r3, [r2], #4

08000dd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <LoopForever+0x16>)
	cmp	r2, r3
 8000dd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000dd8:	d3f9      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f005 fbd9 	bl	8006590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dde:	f7ff fb73 	bl	80004c8 <main>

08000de2 <LoopForever>:

LoopForever:
    b LoopForever
 8000de2:	e7fe      	b.n	8000de2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000de8:	08006a38 	.word	0x08006a38
	ldr	r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000df0:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8000df4:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8000df8:	20001b38 	.word	0x20001b38

08000dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_2_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_Init+0x3c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_Init+0x3c>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 f8df 	bl	8000fda <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fd7d 	bl	800091c <HAL_InitTick>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	e001      	b.n	8000e32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e2e:	f7ff fd0b 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40022000 	.word	0x40022000

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20001ae4 	.word	0x20001ae4

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20001ae4 	.word	0x20001ae4

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <__NVIC_EnableIRQ+0x38>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ff4c 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001002:	f7ff ff61 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 8001006:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	6978      	ldr	r0, [r7, #20]
 800100e:	f7ff ffb1 	bl	8000f74 <NVIC_EncodePriority>
 8001012:	4602      	mov	r2, r0
 8001014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff80 	bl	8000f20 <__NVIC_SetPriority>
}
 8001020:	bf00      	nop
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff54 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	e17f      	b.n	8001354 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8171 	beq.w	800134e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d00b      	beq.n	800108c <HAL_GPIO_Init+0x48>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d007      	beq.n	800108c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001080:	2b11      	cmp	r3, #17
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b12      	cmp	r3, #18
 800108a:	d130      	bne.n	80010ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010c2:	2201      	movs	r2, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	f003 0201 	and.w	r2, r3, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d118      	bne.n	800112c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x128>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b12      	cmp	r3, #18
 800116a:	d123      	bne.n	80011b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	6939      	ldr	r1, [r7, #16]
 80011b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0203 	and.w	r2, r3, #3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80ac 	beq.w	800134e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b5f      	ldr	r3, [pc, #380]	; (8001374 <HAL_GPIO_Init+0x330>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	4a5e      	ldr	r2, [pc, #376]	; (8001374 <HAL_GPIO_Init+0x330>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6613      	str	r3, [r2, #96]	; 0x60
 8001202:	4b5c      	ldr	r3, [pc, #368]	; (8001374 <HAL_GPIO_Init+0x330>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800120e:	4a5a      	ldr	r2, [pc, #360]	; (8001378 <HAL_GPIO_Init+0x334>)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x242>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4f      	ldr	r2, [pc, #316]	; (800137c <HAL_GPIO_Init+0x338>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x23e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x33c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x23a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x340>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x236>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x344>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x232>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4b      	ldr	r2, [pc, #300]	; (800138c <HAL_GPIO_Init+0x348>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x22e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x34c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x22a>
 800126a:	2306      	movs	r3, #6
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800126e:	2307      	movs	r3, #7
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001286:	2300      	movs	r3, #0
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001298:	4937      	ldr	r1, [pc, #220]	; (8001378 <HAL_GPIO_Init+0x334>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ca:	4a32      	ldr	r2, [pc, #200]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f4:	4a27      	ldr	r2, [pc, #156]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800131e:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_GPIO_Init+0x350>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_GPIO_Init+0x350>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_GPIO_Init+0x350>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	f47f ae78 	bne.w	8001054 <HAL_GPIO_Init+0x10>
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	48000400 	.word	0x48000400
 8001380:	48000800 	.word	0x48000800
 8001384:	48000c00 	.word	0x48000c00
 8001388:	48001000 	.word	0x48001000
 800138c:	48001400 	.word	0x48001400
 8001390:	48001800 	.word	0x48001800
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4013      	ands	r3, r2
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43d9      	mvns	r1, r3
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	400b      	ands	r3, r1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f99a 	bl	8000754 <HAL_GPIO_EXTI_Callback>
  }
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <HAL_PWREx_GetVoltageRange+0x18>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40007000 	.word	0x40007000

08001448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001456:	d130      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001464:	d038      	beq.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800146e:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001474:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2232      	movs	r2, #50	; 0x32
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0c9b      	lsrs	r3, r3, #18
 8001488:	3301      	adds	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800148c:	e002      	b.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3b01      	subs	r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a0:	d102      	bne.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f2      	bne.n	800148e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b4:	d110      	bne.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e00f      	b.n	80014da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c6:	d007      	beq.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40007000 	.word	0x40007000
 80014ec:	20000000 	.word	0x20000000
 80014f0:	431bde83 	.word	0x431bde83

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e3d4      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001506:	4ba1      	ldr	r3, [pc, #644]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001510:	4b9e      	ldr	r3, [pc, #632]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80e4 	beq.w	80016f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d007      	beq.n	800153e <HAL_RCC_OscConfig+0x4a>
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b0c      	cmp	r3, #12
 8001532:	f040 808b 	bne.w	800164c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b01      	cmp	r3, #1
 800153a:	f040 8087 	bne.w	800164c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800153e:	4b93      	ldr	r3, [pc, #588]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x62>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e3ac      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1a      	ldr	r2, [r3, #32]
 800155a:	4b8c      	ldr	r3, [pc, #560]	; (800178c <HAL_RCC_OscConfig+0x298>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <HAL_RCC_OscConfig+0x7c>
 8001566:	4b89      	ldr	r3, [pc, #548]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800156e:	e005      	b.n	800157c <HAL_RCC_OscConfig+0x88>
 8001570:	4b86      	ldr	r3, [pc, #536]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800157c:	4293      	cmp	r3, r2
 800157e:	d223      	bcs.n	80015c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 fd71 	bl	800206c <RCC_SetFlashLatencyFromMSIRange>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e38d      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001594:	4b7d      	ldr	r3, [pc, #500]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a7c      	ldr	r2, [pc, #496]	; (800178c <HAL_RCC_OscConfig+0x298>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b7a      	ldr	r3, [pc, #488]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4977      	ldr	r1, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b2:	4b76      	ldr	r3, [pc, #472]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	4972      	ldr	r1, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
 80015c6:	e025      	b.n	8001614 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4b70      	ldr	r3, [pc, #448]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a6f      	ldr	r2, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b6d      	ldr	r3, [pc, #436]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	496a      	ldr	r1, [pc, #424]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b69      	ldr	r3, [pc, #420]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	4965      	ldr	r1, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d109      	bne.n	8001614 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fd31 	bl	800206c <RCC_SetFlashLatencyFromMSIRange>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e34d      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001614:	f000 fc36 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001618:	4602      	mov	r2, r0
 800161a:	4b5c      	ldr	r3, [pc, #368]	; (800178c <HAL_RCC_OscConfig+0x298>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	495a      	ldr	r1, [pc, #360]	; (8001790 <HAL_RCC_OscConfig+0x29c>)
 8001626:	5ccb      	ldrb	r3, [r1, r3]
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	4a58      	ldr	r2, [pc, #352]	; (8001794 <HAL_RCC_OscConfig+0x2a0>)
 8001632:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001634:	4b58      	ldr	r3, [pc, #352]	; (8001798 <HAL_RCC_OscConfig+0x2a4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff f96f 	bl	800091c <HAL_InitTick>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d052      	beq.n	80016ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	e331      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d032      	beq.n	80016ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001654:	4b4d      	ldr	r3, [pc, #308]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a4c      	ldr	r2, [pc, #304]	; (800178c <HAL_RCC_OscConfig+0x298>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001660:	f7ff fc02 	bl	8000e68 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001668:	f7ff fbfe 	bl	8000e68 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e31a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <HAL_RCC_OscConfig+0x298>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a40      	ldr	r2, [pc, #256]	; (800178c <HAL_RCC_OscConfig+0x298>)
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b3e      	ldr	r3, [pc, #248]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	493b      	ldr	r1, [pc, #236]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a4:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	4936      	ldr	r1, [pc, #216]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
 80016b8:	e01a      	b.n	80016f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a33      	ldr	r2, [pc, #204]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fbcf 	bl	8000e68 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ce:	f7ff fbcb 	bl	8000e68 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e2e7      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e0:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_RCC_OscConfig+0x298>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x1da>
 80016ec:	e000      	b.n	80016f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d074      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x21a>
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d10e      	bne.n	8001726 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d10b      	bne.n	8001726 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d064      	beq.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d160      	bne.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e2c4      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x24a>
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a15      	ldr	r2, [pc, #84]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	e01d      	b.n	800177a <HAL_RCC_OscConfig+0x286>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001746:	d10c      	bne.n	8001762 <HAL_RCC_OscConfig+0x26e>
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_RCC_OscConfig+0x298>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_RCC_OscConfig+0x298>)
 800174e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0c      	ldr	r2, [pc, #48]	; (800178c <HAL_RCC_OscConfig+0x298>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e00b      	b.n	800177a <HAL_RCC_OscConfig+0x286>
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a06      	ldr	r2, [pc, #24]	; (800178c <HAL_RCC_OscConfig+0x298>)
 8001774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01c      	beq.n	80017bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff fb71 	bl	8000e68 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001788:	e011      	b.n	80017ae <HAL_RCC_OscConfig+0x2ba>
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	08006988 	.word	0x08006988
 8001794:	20000000 	.word	0x20000000
 8001798:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fb64 	bl	8000e68 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e280      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ae:	4baf      	ldr	r3, [pc, #700]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x2a8>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fb54 	bl	8000e68 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fb50 	bl	8000e68 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e26c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017d6:	4ba5      	ldr	r3, [pc, #660]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2d0>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d060      	beq.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_OscConfig+0x310>
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d119      	bne.n	8001832 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d116      	bne.n	8001832 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001804:	4b99      	ldr	r3, [pc, #612]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_OscConfig+0x328>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e249      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b93      	ldr	r3, [pc, #588]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	4990      	ldr	r1, [pc, #576]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001830:	e040      	b.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d023      	beq.n	8001882 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183a:	4b8c      	ldr	r3, [pc, #560]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a8b      	ldr	r2, [pc, #556]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fb0f 	bl	8000e68 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff fb0b 	bl	8000e68 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e227      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	4b82      	ldr	r3, [pc, #520]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b7f      	ldr	r3, [pc, #508]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	497c      	ldr	r1, [pc, #496]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	e018      	b.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001882:	4b7a      	ldr	r3, [pc, #488]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a79      	ldr	r2, [pc, #484]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 8001888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800188c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff faeb 	bl	8000e68 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff fae7 	bl	8000e68 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e203      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a8:	4b70      	ldr	r3, [pc, #448]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f0      	bne.n	8001896 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03c      	beq.n	800193a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01c      	beq.n	8001902 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c8:	4b68      	ldr	r3, [pc, #416]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80018ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ce:	4a67      	ldr	r2, [pc, #412]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fac6 	bl	8000e68 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff fac2 	bl	8000e68 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1de      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f2:	4b5e      	ldr	r3, [pc, #376]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80018f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ef      	beq.n	80018e0 <HAL_RCC_OscConfig+0x3ec>
 8001900:	e01b      	b.n	800193a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001902:	4b5a      	ldr	r3, [pc, #360]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 8001904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001908:	4a58      	ldr	r2, [pc, #352]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff faa9 	bl	8000e68 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191a:	f7ff faa5 	bl	8000e68 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e1c1      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800192c:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ef      	bne.n	800191a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800194c:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10d      	bne.n	8001974 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001958:	4b44      	ldr	r3, [pc, #272]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	4a43      	ldr	r2, [pc, #268]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 800195e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001962:	6593      	str	r3, [r2, #88]	; 0x58
 8001964:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001970:	2301      	movs	r3, #1
 8001972:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001974:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <HAL_RCC_OscConfig+0x57c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d118      	bne.n	80019b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001980:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_RCC_OscConfig+0x57c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a3a      	ldr	r2, [pc, #232]	; (8001a70 <HAL_RCC_OscConfig+0x57c>)
 8001986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198c:	f7ff fa6c 	bl	8000e68 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001994:	f7ff fa68 	bl	8000e68 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e184      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a6:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_RCC_OscConfig+0x57c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <HAL_RCC_OscConfig+0x4d8>
 80019ba:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80019bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c0:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ca:	e024      	b.n	8001a16 <HAL_RCC_OscConfig+0x522>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d110      	bne.n	80019f6 <HAL_RCC_OscConfig+0x502>
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019da:	4a24      	ldr	r2, [pc, #144]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ea:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f4:	e00f      	b.n	8001a16 <HAL_RCC_OscConfig+0x522>
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80019f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fc:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0c:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 8001a0e:	f023 0304 	bic.w	r3, r3, #4
 8001a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d016      	beq.n	8001a4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fa23 	bl	8000e68 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff fa1f 	bl	8000e68 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e139      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_OscConfig+0x578>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0ed      	beq.n	8001a26 <HAL_RCC_OscConfig+0x532>
 8001a4a:	e01a      	b.n	8001a82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fa0c 	bl	8000e68 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a52:	e00f      	b.n	8001a74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff fa08 	bl	8000e68 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d906      	bls.n	8001a74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e122      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a74:	4b90      	ldr	r3, [pc, #576]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1e8      	bne.n	8001a54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a82:	7ffb      	ldrb	r3, [r7, #31]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	4a8a      	ldr	r2, [pc, #552]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8108 	beq.w	8001cae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	f040 80d0 	bne.w	8001c48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aa8:	4b83      	ldr	r3, [pc, #524]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d130      	bne.n	8001b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d127      	bne.n	8001b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d11f      	bne.n	8001b1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ae8:	2a07      	cmp	r2, #7
 8001aea:	bf14      	ite	ne
 8001aec:	2201      	movne	r2, #1
 8001aee:	2200      	moveq	r2, #0
 8001af0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d113      	bne.n	8001b1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	3b01      	subs	r3, #1
 8001b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d06e      	beq.n	8001bfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b0c      	cmp	r3, #12
 8001b22:	d069      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b24:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d105      	bne.n	8001b3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b30:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b7      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b40:	4b5d      	ldr	r3, [pc, #372]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a5c      	ldr	r2, [pc, #368]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b4c:	f7ff f98c 	bl	8000e68 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff f988 	bl	8000e68 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0a4      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b66:	4b54      	ldr	r3, [pc, #336]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b72:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <HAL_RCC_OscConfig+0x7c8>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b82:	3a01      	subs	r2, #1
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	4311      	orrs	r1, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b8c:	0212      	lsls	r2, r2, #8
 8001b8e:	4311      	orrs	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b94:	0852      	lsrs	r2, r2, #1
 8001b96:	3a01      	subs	r2, #1
 8001b98:	0552      	lsls	r2, r2, #21
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ba0:	0852      	lsrs	r2, r2, #1
 8001ba2:	3a01      	subs	r2, #1
 8001ba4:	0652      	lsls	r2, r2, #25
 8001ba6:	4311      	orrs	r1, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bac:	0912      	lsrs	r2, r2, #4
 8001bae:	0452      	lsls	r2, r2, #17
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	4941      	ldr	r1, [pc, #260]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a3e      	ldr	r2, [pc, #248]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4a3b      	ldr	r2, [pc, #236]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bd0:	f7ff f94a 	bl	8000e68 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff f946 	bl	8000e68 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e062      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf6:	e05a      	b.n	8001cae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e059      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d152      	bne.n	8001cae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4a27      	ldr	r2, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c20:	f7ff f922 	bl	8000e68 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f91e 	bl	8000e68 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e03a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x734>
 8001c46:	e032      	b.n	8001cae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d02d      	beq.n	8001caa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c6c:	f023 0303 	bic.w	r3, r3, #3
 8001c70:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4a10      	ldr	r2, [pc, #64]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7ff f8f1 	bl	8000e68 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7ff f8ed 	bl	8000e68 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e009      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCC_OscConfig+0x7c4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x796>
 8001ca8:	e001      	b.n	8001cae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	f99d808c 	.word	0xf99d808c

08001cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0c8      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d910      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	4961      	ldr	r1, [pc, #388]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0b0      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d04c      	beq.n	8001daa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d18:	4b56      	ldr	r3, [pc, #344]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d121      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e09e      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d115      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e092      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d48:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e086      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d58:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e07e      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d68:	4b42      	ldr	r3, [pc, #264]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 0203 	bic.w	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	493f      	ldr	r1, [pc, #252]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d7a:	f7ff f875 	bl	8000e68 <HAL_GetTick>
 8001d7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d82:	f7ff f871 	bl	8000e68 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e066      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d98:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 020c 	and.w	r2, r3, #12
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d1eb      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d008      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db6:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	492c      	ldr	r1, [pc, #176]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d210      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4924      	ldr	r1, [pc, #144]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e036      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4918      	ldr	r1, [pc, #96]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4910      	ldr	r1, [pc, #64]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e36:	f000 f825 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	490c      	ldr	r1, [pc, #48]	; (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	5ccb      	ldrb	r3, [r1, r3]
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fd5e 	bl	800091c <HAL_InitTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08006988 	.word	0x08006988
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d121      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d11e      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ec4:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	e004      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d134      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d003      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0xac>
 8001f28:	e005      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f2c:	617b      	str	r3, [r7, #20]
      break;
 8001f2e:	e005      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f32:	617b      	str	r3, [r7, #20]
      break;
 8001f34:	e002      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	617b      	str	r3, [r7, #20]
      break;
 8001f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	3301      	adds	r3, #1
 8001f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	fb02 f203 	mul.w	r2, r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	0e5b      	lsrs	r3, r3, #25
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f7c:	69bb      	ldr	r3, [r7, #24]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	080069a0 	.word	0x080069a0
 8001f94:	00f42400 	.word	0x00f42400

08001f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_RCC_GetHCLKFreq+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000000 	.word	0x20000000

08001fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fb4:	f7ff fff0 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4904      	ldr	r1, [pc, #16]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08006998 	.word	0x08006998

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fe0:	f7ff ffda 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0adb      	lsrs	r3, r3, #11
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4904      	ldr	r1, [pc, #16]	; (8002004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	08006998 	.word	0x08006998

08002008 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	220f      	movs	r2, #15
 8002016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0203 	and.w	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	08db      	lsrs	r3, r3, #3
 8002042:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_RCC_GetClockConfig+0x60>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0207 	and.w	r2, r3, #7
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	601a      	str	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	40022000 	.word	0x40022000

0800206c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002084:	f7ff f9d2 	bl	800142c <HAL_PWREx_GetVoltageRange>
 8002088:	6178      	str	r0, [r7, #20]
 800208a:	e014      	b.n	80020b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a24      	ldr	r2, [pc, #144]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020a4:	f7ff f9c2 	bl	800142c <HAL_PWREx_GetVoltageRange>
 80020a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020bc:	d10b      	bne.n	80020d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b80      	cmp	r3, #128	; 0x80
 80020c2:	d919      	bls.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2ba0      	cmp	r3, #160	; 0xa0
 80020c8:	d902      	bls.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020ca:	2302      	movs	r3, #2
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e013      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d0:	2301      	movs	r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	e010      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b80      	cmp	r3, #128	; 0x80
 80020da:	d902      	bls.n	80020e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020dc:	2303      	movs	r3, #3
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	e00a      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b80      	cmp	r3, #128	; 0x80
 80020e6:	d102      	bne.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e8:	2302      	movs	r3, #2
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e004      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b70      	cmp	r3, #112	; 0x70
 80020f2:	d101      	bne.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020f4:	2301      	movs	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 0207 	bic.w	r2, r3, #7
 8002100:	4909      	ldr	r1, [pc, #36]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	429a      	cmp	r2, r3
 8002114:	d001      	beq.n	800211a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	40022000 	.word	0x40022000

0800212c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002134:	2300      	movs	r3, #0
 8002136:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002138:	2300      	movs	r3, #0
 800213a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002144:	2b00      	cmp	r3, #0
 8002146:	d041      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800214c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002150:	d02a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002152:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002156:	d824      	bhi.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002158:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800215c:	d008      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800215e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002162:	d81e      	bhi.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800216c:	d010      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800216e:	e018      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002170:	4b86      	ldr	r3, [pc, #536]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a85      	ldr	r2, [pc, #532]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800217c:	e015      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fabb 	bl	8002700 <RCCEx_PLLSAI1_Config>
 800218a:	4603      	mov	r3, r0
 800218c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800218e:	e00c      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3320      	adds	r3, #32
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fba6 	bl	80028e8 <RCCEx_PLLSAI2_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021a0:	e003      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	74fb      	strb	r3, [r7, #19]
      break;
 80021a6:	e000      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021b0:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021be:	4973      	ldr	r1, [pc, #460]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021c6:	e001      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d041      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021e0:	d02a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021e6:	d824      	bhi.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021ec:	d008      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021f2:	d81e      	bhi.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fc:	d010      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021fe:	e018      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002200:	4b62      	ldr	r3, [pc, #392]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a61      	ldr	r2, [pc, #388]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800220c:	e015      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fa73 	bl	8002700 <RCCEx_PLLSAI1_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800221e:	e00c      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3320      	adds	r3, #32
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fb5e 	bl	80028e8 <RCCEx_PLLSAI2_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002230:	e003      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	74fb      	strb	r3, [r7, #19]
      break;
 8002236:	e000      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002240:	4b52      	ldr	r3, [pc, #328]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800224e:	494f      	ldr	r1, [pc, #316]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002256:	e001      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a0 	beq.w	80023aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00d      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	4a40      	ldr	r2, [pc, #256]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228e:	6593      	str	r3, [r2, #88]	; 0x58
 8002290:	4b3e      	ldr	r3, [pc, #248]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229c:	2301      	movs	r3, #1
 800229e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a0:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fddc 	bl	8000e68 <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022b2:	e009      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b4:	f7fe fdd8 	bl	8000e68 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d902      	bls.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	74fb      	strb	r3, [r7, #19]
        break;
 80022c6:	e005      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022c8:	4b31      	ldr	r3, [pc, #196]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ef      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d15c      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01f      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d019      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002302:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	4a20      	ldr	r2, [pc, #128]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	4a1c      	ldr	r2, [pc, #112]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d016      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fd97 	bl	8000e68 <HAL_GetTick>
 800233a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233c:	e00b      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe fd93 	bl	8000e68 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d902      	bls.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	74fb      	strb	r3, [r7, #19]
            break;
 8002354:	e006      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ec      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10c      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237a:	4904      	ldr	r1, [pc, #16]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002382:	e009      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	74bb      	strb	r3, [r7, #18]
 8002388:	e006      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002398:	7c7b      	ldrb	r3, [r7, #17]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b9e      	ldr	r3, [pc, #632]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	4a9d      	ldr	r2, [pc, #628]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023b6:	4b98      	ldr	r3, [pc, #608]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023bc:	f023 0203 	bic.w	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	4994      	ldr	r1, [pc, #592]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023d8:	4b8f      	ldr	r3, [pc, #572]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f023 020c 	bic.w	r2, r3, #12
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	498c      	ldr	r1, [pc, #560]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023fa:	4b87      	ldr	r3, [pc, #540]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002400:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	4983      	ldr	r1, [pc, #524]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800241c:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	497b      	ldr	r1, [pc, #492]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800243e:	4b76      	ldr	r3, [pc, #472]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244c:	4972      	ldr	r1, [pc, #456]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002460:	4b6d      	ldr	r3, [pc, #436]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	496a      	ldr	r1, [pc, #424]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002482:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	4961      	ldr	r1, [pc, #388]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024a4:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b2:	4959      	ldr	r1, [pc, #356]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c6:	4b54      	ldr	r3, [pc, #336]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4950      	ldr	r1, [pc, #320]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	4948      	ldr	r1, [pc, #288]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800250a:	4b43      	ldr	r3, [pc, #268]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	493f      	ldr	r1, [pc, #252]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d028      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800252c:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253a:	4937      	ldr	r1, [pc, #220]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800254a:	d106      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800254c:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a31      	ldr	r2, [pc, #196]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002556:	60d3      	str	r3, [r2, #12]
 8002558:	e011      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002562:	d10c      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3304      	adds	r3, #4
 8002568:	2101      	movs	r1, #1
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f8c8 	bl	8002700 <RCCEx_PLLSAI1_Config>
 8002570:	4603      	mov	r3, r0
 8002572:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800257a:	7cfb      	ldrb	r3, [r7, #19]
 800257c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d028      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002590:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	491f      	ldr	r1, [pc, #124]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a8:	d106      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b4:	60d3      	str	r3, [r2, #12]
 80025b6:	e011      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c0:	d10c      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2101      	movs	r1, #1
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 f899 	bl	8002700 <RCCEx_PLLSAI1_Config>
 80025ce:	4603      	mov	r3, r0
 80025d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d02b      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002606:	d109      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a02      	ldr	r2, [pc, #8]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002612:	60d3      	str	r3, [r2, #12]
 8002614:	e014      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002624:	d10c      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	2101      	movs	r1, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f867 	bl	8002700 <RCCEx_PLLSAI1_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d02f      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800265a:	4928      	ldr	r1, [pc, #160]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800266a:	d10d      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3304      	adds	r3, #4
 8002670:	2102      	movs	r1, #2
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f844 	bl	8002700 <RCCEx_PLLSAI1_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d014      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	74bb      	strb	r3, [r7, #18]
 8002686:	e011      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800268c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002690:	d10c      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3320      	adds	r3, #32
 8002696:	2102      	movs	r1, #2
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f925 	bl	80028e8 <RCCEx_PLLSAI2_Config>
 800269e:	4603      	mov	r3, r0
 80026a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c6:	490d      	ldr	r1, [pc, #52]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ea:	4904      	ldr	r1, [pc, #16]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000

08002700 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800270e:	4b75      	ldr	r3, [pc, #468]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d018      	beq.n	800274c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800271a:	4b72      	ldr	r3, [pc, #456]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0203 	and.w	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d10d      	bne.n	8002746 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
       ||
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002732:	4b6c      	ldr	r3, [pc, #432]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
       ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d047      	beq.n	80027d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	e044      	b.n	80027d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d018      	beq.n	8002786 <RCCEx_PLLSAI1_Config+0x86>
 8002754:	2b03      	cmp	r3, #3
 8002756:	d825      	bhi.n	80027a4 <RCCEx_PLLSAI1_Config+0xa4>
 8002758:	2b01      	cmp	r3, #1
 800275a:	d002      	beq.n	8002762 <RCCEx_PLLSAI1_Config+0x62>
 800275c:	2b02      	cmp	r3, #2
 800275e:	d009      	beq.n	8002774 <RCCEx_PLLSAI1_Config+0x74>
 8002760:	e020      	b.n	80027a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002762:	4b60      	ldr	r3, [pc, #384]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d11d      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002772:	e01a      	b.n	80027aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002774:	4b5b      	ldr	r3, [pc, #364]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d116      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002784:	e013      	b.n	80027ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002786:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002792:	4b54      	ldr	r3, [pc, #336]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027a2:	e006      	b.n	80027b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      break;
 80027a8:	e004      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027aa:	bf00      	nop
 80027ac:	e002      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ae:	bf00      	nop
 80027b0:	e000      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ba:	4b4a      	ldr	r3, [pc, #296]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	430b      	orrs	r3, r1
 80027d0:	4944      	ldr	r1, [pc, #272]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d17d      	bne.n	80028d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027dc:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a40      	ldr	r2, [pc, #256]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7fe fb3e 	bl	8000e68 <HAL_GetTick>
 80027ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ee:	e009      	b.n	8002804 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027f0:	f7fe fb3a 	bl	8000e68 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d902      	bls.n	8002804 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	73fb      	strb	r3, [r7, #15]
        break;
 8002802:	e005      	b.n	8002810 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002804:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ef      	bne.n	80027f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d160      	bne.n	80028d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d111      	bne.n	8002840 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800281c:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6892      	ldr	r2, [r2, #8]
 800282c:	0211      	lsls	r1, r2, #8
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68d2      	ldr	r2, [r2, #12]
 8002832:	0912      	lsrs	r2, r2, #4
 8002834:	0452      	lsls	r2, r2, #17
 8002836:	430a      	orrs	r2, r1
 8002838:	492a      	ldr	r1, [pc, #168]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	610b      	str	r3, [r1, #16]
 800283e:	e027      	b.n	8002890 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d112      	bne.n	800286c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800284e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6892      	ldr	r2, [r2, #8]
 8002856:	0211      	lsls	r1, r2, #8
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6912      	ldr	r2, [r2, #16]
 800285c:	0852      	lsrs	r2, r2, #1
 800285e:	3a01      	subs	r2, #1
 8002860:	0552      	lsls	r2, r2, #21
 8002862:	430a      	orrs	r2, r1
 8002864:	491f      	ldr	r1, [pc, #124]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	610b      	str	r3, [r1, #16]
 800286a:	e011      	b.n	8002890 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002874:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6892      	ldr	r2, [r2, #8]
 800287c:	0211      	lsls	r1, r2, #8
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6952      	ldr	r2, [r2, #20]
 8002882:	0852      	lsrs	r2, r2, #1
 8002884:	3a01      	subs	r2, #1
 8002886:	0652      	lsls	r2, r2, #25
 8002888:	430a      	orrs	r2, r1
 800288a:	4916      	ldr	r1, [pc, #88]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a13      	ldr	r2, [pc, #76]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002896:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800289a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7fe fae4 	bl	8000e68 <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028a2:	e009      	b.n	80028b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a4:	f7fe fae0 	bl	8000e68 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d902      	bls.n	80028b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	73fb      	strb	r3, [r7, #15]
          break;
 80028b6:	e005      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0ef      	beq.n	80028a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	4904      	ldr	r1, [pc, #16]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000

080028e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028f6:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d018      	beq.n	8002934 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002902:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0203 	and.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d10d      	bne.n	800292e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
       ||
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800291a:	4b61      	ldr	r3, [pc, #388]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
       ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d047      	beq.n	80029be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	e044      	b.n	80029be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d018      	beq.n	800296e <RCCEx_PLLSAI2_Config+0x86>
 800293c:	2b03      	cmp	r3, #3
 800293e:	d825      	bhi.n	800298c <RCCEx_PLLSAI2_Config+0xa4>
 8002940:	2b01      	cmp	r3, #1
 8002942:	d002      	beq.n	800294a <RCCEx_PLLSAI2_Config+0x62>
 8002944:	2b02      	cmp	r3, #2
 8002946:	d009      	beq.n	800295c <RCCEx_PLLSAI2_Config+0x74>
 8002948:	e020      	b.n	800298c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800294a:	4b55      	ldr	r3, [pc, #340]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11d      	bne.n	8002992 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800295a:	e01a      	b.n	8002992 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d116      	bne.n	8002996 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296c:	e013      	b.n	8002996 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800296e:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800297a:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800298a:	e006      	b.n	800299a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      break;
 8002990:	e004      	b.n	800299c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002992:	bf00      	nop
 8002994:	e002      	b.n	800299c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002996:	bf00      	nop
 8002998:	e000      	b.n	800299c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800299a:	bf00      	nop
    }

    if(status == HAL_OK)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6819      	ldr	r1, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	430b      	orrs	r3, r1
 80029b8:	4939      	ldr	r1, [pc, #228]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d167      	bne.n	8002a94 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029c4:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a35      	ldr	r2, [pc, #212]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d0:	f7fe fa4a 	bl	8000e68 <HAL_GetTick>
 80029d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029d6:	e009      	b.n	80029ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029d8:	f7fe fa46 	bl	8000e68 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d902      	bls.n	80029ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	73fb      	strb	r3, [r7, #15]
        break;
 80029ea:	e005      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ef      	bne.n	80029d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d14a      	bne.n	8002a94 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d111      	bne.n	8002a28 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a04:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6892      	ldr	r2, [r2, #8]
 8002a14:	0211      	lsls	r1, r2, #8
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68d2      	ldr	r2, [r2, #12]
 8002a1a:	0912      	lsrs	r2, r2, #4
 8002a1c:	0452      	lsls	r2, r2, #17
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	491f      	ldr	r1, [pc, #124]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	614b      	str	r3, [r1, #20]
 8002a26:	e011      	b.n	8002a4c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	0211      	lsls	r1, r2, #8
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6912      	ldr	r2, [r2, #16]
 8002a3e:	0852      	lsrs	r2, r2, #1
 8002a40:	3a01      	subs	r2, #1
 8002a42:	0652      	lsls	r2, r2, #25
 8002a44:	430a      	orrs	r2, r1
 8002a46:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fa06 	bl	8000e68 <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a5e:	e009      	b.n	8002a74 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a60:	f7fe fa02 	bl	8000e68 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d902      	bls.n	8002a74 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	73fb      	strb	r3, [r7, #15]
          break;
 8002a72:	e005      	b.n	8002a80 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ef      	beq.n	8002a60 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e049      	b.n	8002b4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f841 	bl	8002b52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f000 f9f8 	bl	8002ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d001      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e04f      	b.n	8002c20 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <HAL_TIM_Base_Start_IT+0xc4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01d      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002baa:	d018      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00e      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d009      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <HAL_TIM_Base_Start_IT+0xd4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d115      	bne.n	8002c0a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <HAL_TIM_Base_Start_IT+0xdc>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d015      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0xb4>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf6:	d011      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c08:	e008      	b.n	8002c1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0201 	orr.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e000      	b.n	8002c1e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	40013400 	.word	0x40013400
 8002c40:	40014000 	.word	0x40014000
 8002c44:	00010007 	.word	0x00010007

08002c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d122      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d11b      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0202 	mvn.w	r2, #2
 8002c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f905 	bl	8002e9a <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f8f7 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f908 	bl	8002eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d122      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0204 	mvn.w	r2, #4
 8002cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8db 	bl	8002e9a <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e005      	b.n	8002cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f8cd 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f8de 	bl	8002eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d122      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d11b      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0208 	mvn.w	r2, #8
 8002d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2204      	movs	r2, #4
 8002d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8b1 	bl	8002e9a <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8a3 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8b4 	bl	8002eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d122      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d11b      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0210 	mvn.w	r2, #16
 8002d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2208      	movs	r2, #8
 8002d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f887 	bl	8002e9a <HAL_TIM_IC_CaptureCallback>
 8002d8c:	e005      	b.n	8002d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f879 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f88a 	bl	8002eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d10e      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d107      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0201 	mvn.w	r2, #1
 8002dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fd fcf2 	bl	80007b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b80      	cmp	r3, #128	; 0x80
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de4:	2b80      	cmp	r3, #128	; 0x80
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f914 	bl	8003020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e06:	d10e      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b80      	cmp	r3, #128	; 0x80
 8002e14:	d107      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f907 	bl	8003034 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d10e      	bne.n	8002e52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d107      	bne.n	8002e52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f838 	bl	8002ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d10e      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d107      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f06f 0220 	mvn.w	r2, #32
 8002e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f8c7 	bl	800300c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a40      	ldr	r2, [pc, #256]	; (8002fec <TIM_Base_SetConfig+0x114>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d013      	beq.n	8002f18 <TIM_Base_SetConfig+0x40>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef6:	d00f      	beq.n	8002f18 <TIM_Base_SetConfig+0x40>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a3d      	ldr	r2, [pc, #244]	; (8002ff0 <TIM_Base_SetConfig+0x118>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00b      	beq.n	8002f18 <TIM_Base_SetConfig+0x40>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a3c      	ldr	r2, [pc, #240]	; (8002ff4 <TIM_Base_SetConfig+0x11c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d007      	beq.n	8002f18 <TIM_Base_SetConfig+0x40>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a3b      	ldr	r2, [pc, #236]	; (8002ff8 <TIM_Base_SetConfig+0x120>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d003      	beq.n	8002f18 <TIM_Base_SetConfig+0x40>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a3a      	ldr	r2, [pc, #232]	; (8002ffc <TIM_Base_SetConfig+0x124>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d108      	bne.n	8002f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a2f      	ldr	r2, [pc, #188]	; (8002fec <TIM_Base_SetConfig+0x114>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01f      	beq.n	8002f72 <TIM_Base_SetConfig+0x9a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f38:	d01b      	beq.n	8002f72 <TIM_Base_SetConfig+0x9a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a2c      	ldr	r2, [pc, #176]	; (8002ff0 <TIM_Base_SetConfig+0x118>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d017      	beq.n	8002f72 <TIM_Base_SetConfig+0x9a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a2b      	ldr	r2, [pc, #172]	; (8002ff4 <TIM_Base_SetConfig+0x11c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <TIM_Base_SetConfig+0x9a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a2a      	ldr	r2, [pc, #168]	; (8002ff8 <TIM_Base_SetConfig+0x120>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00f      	beq.n	8002f72 <TIM_Base_SetConfig+0x9a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a29      	ldr	r2, [pc, #164]	; (8002ffc <TIM_Base_SetConfig+0x124>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00b      	beq.n	8002f72 <TIM_Base_SetConfig+0x9a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a28      	ldr	r2, [pc, #160]	; (8003000 <TIM_Base_SetConfig+0x128>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d007      	beq.n	8002f72 <TIM_Base_SetConfig+0x9a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a27      	ldr	r2, [pc, #156]	; (8003004 <TIM_Base_SetConfig+0x12c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d003      	beq.n	8002f72 <TIM_Base_SetConfig+0x9a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a26      	ldr	r2, [pc, #152]	; (8003008 <TIM_Base_SetConfig+0x130>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d108      	bne.n	8002f84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a10      	ldr	r2, [pc, #64]	; (8002fec <TIM_Base_SetConfig+0x114>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00f      	beq.n	8002fd0 <TIM_Base_SetConfig+0xf8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <TIM_Base_SetConfig+0x124>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00b      	beq.n	8002fd0 <TIM_Base_SetConfig+0xf8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a11      	ldr	r2, [pc, #68]	; (8003000 <TIM_Base_SetConfig+0x128>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d007      	beq.n	8002fd0 <TIM_Base_SetConfig+0xf8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a10      	ldr	r2, [pc, #64]	; (8003004 <TIM_Base_SetConfig+0x12c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d003      	beq.n	8002fd0 <TIM_Base_SetConfig+0xf8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a0f      	ldr	r2, [pc, #60]	; (8003008 <TIM_Base_SetConfig+0x130>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d103      	bne.n	8002fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	615a      	str	r2, [r3, #20]
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000c00 	.word	0x40000c00
 8002ffc:	40013400 	.word	0x40013400
 8003000:	40014000 	.word	0x40014000
 8003004:	40014400 	.word	0x40014400
 8003008:	40014800 	.word	0x40014800

0800300c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e040      	b.n	80030dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd fc14 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	; 0x24
 8003074:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f8c0 	bl	800320c <UART_SetConfig>
 800308c:	4603      	mov	r3, r0
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e022      	b.n	80030dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fb3e 	bl	8003720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fbc5 	bl	8003864 <UART_CheckIdleState>
 80030da:	4603      	mov	r3, r0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	; 0x28
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	f040 8082 	bne.w	8003202 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_UART_Transmit+0x26>
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e07a      	b.n	8003204 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_UART_Transmit+0x38>
 8003118:	2302      	movs	r3, #2
 800311a:	e073      	b.n	8003204 <HAL_UART_Transmit+0x120>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2221      	movs	r2, #33	; 0x21
 8003130:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003132:	f7fd fe99 	bl	8000e68 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	88fa      	ldrh	r2, [r7, #6]
 8003144:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003150:	d108      	bne.n	8003164 <HAL_UART_Transmit+0x80>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	e003      	b.n	800316c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003174:	e02d      	b.n	80031d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2200      	movs	r2, #0
 800317e:	2180      	movs	r1, #128	; 0x80
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fbb8 	bl	80038f6 <UART_WaitOnFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e039      	b.n	8003204 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10b      	bne.n	80031ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	881a      	ldrh	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a2:	b292      	uxth	r2, r2
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	3302      	adds	r3, #2
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	e008      	b.n	80031c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	781a      	ldrb	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	b292      	uxth	r2, r2
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3301      	adds	r3, #1
 80031be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1cb      	bne.n	8003176 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2200      	movs	r2, #0
 80031e6:	2140      	movs	r1, #64	; 0x40
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fb84 	bl	80038f6 <UART_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e005      	b.n	8003204 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	e000      	b.n	8003204 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
  }
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800320c:	b5b0      	push	{r4, r5, r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	4313      	orrs	r3, r2
 800322e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4bad      	ldr	r3, [pc, #692]	; (80034ec <UART_SetConfig+0x2e0>)
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	69f9      	ldr	r1, [r7, #28]
 8003240:	430b      	orrs	r3, r1
 8003242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4aa2      	ldr	r2, [pc, #648]	; (80034f0 <UART_SetConfig+0x2e4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d004      	beq.n	8003274 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	4313      	orrs	r3, r2
 8003272:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	430a      	orrs	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a99      	ldr	r2, [pc, #612]	; (80034f4 <UART_SetConfig+0x2e8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d121      	bne.n	80032d6 <UART_SetConfig+0xca>
 8003292:	4b99      	ldr	r3, [pc, #612]	; (80034f8 <UART_SetConfig+0x2ec>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b03      	cmp	r3, #3
 800329e:	d817      	bhi.n	80032d0 <UART_SetConfig+0xc4>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <UART_SetConfig+0x9c>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032b9 	.word	0x080032b9
 80032ac:	080032c5 	.word	0x080032c5
 80032b0:	080032bf 	.word	0x080032bf
 80032b4:	080032cb 	.word	0x080032cb
 80032b8:	2301      	movs	r3, #1
 80032ba:	76fb      	strb	r3, [r7, #27]
 80032bc:	e0e7      	b.n	800348e <UART_SetConfig+0x282>
 80032be:	2302      	movs	r3, #2
 80032c0:	76fb      	strb	r3, [r7, #27]
 80032c2:	e0e4      	b.n	800348e <UART_SetConfig+0x282>
 80032c4:	2304      	movs	r3, #4
 80032c6:	76fb      	strb	r3, [r7, #27]
 80032c8:	e0e1      	b.n	800348e <UART_SetConfig+0x282>
 80032ca:	2308      	movs	r3, #8
 80032cc:	76fb      	strb	r3, [r7, #27]
 80032ce:	e0de      	b.n	800348e <UART_SetConfig+0x282>
 80032d0:	2310      	movs	r3, #16
 80032d2:	76fb      	strb	r3, [r7, #27]
 80032d4:	e0db      	b.n	800348e <UART_SetConfig+0x282>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a88      	ldr	r2, [pc, #544]	; (80034fc <UART_SetConfig+0x2f0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d132      	bne.n	8003346 <UART_SetConfig+0x13a>
 80032e0:	4b85      	ldr	r3, [pc, #532]	; (80034f8 <UART_SetConfig+0x2ec>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d828      	bhi.n	8003340 <UART_SetConfig+0x134>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <UART_SetConfig+0xe8>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003329 	.word	0x08003329
 80032f8:	08003341 	.word	0x08003341
 80032fc:	08003341 	.word	0x08003341
 8003300:	08003341 	.word	0x08003341
 8003304:	08003335 	.word	0x08003335
 8003308:	08003341 	.word	0x08003341
 800330c:	08003341 	.word	0x08003341
 8003310:	08003341 	.word	0x08003341
 8003314:	0800332f 	.word	0x0800332f
 8003318:	08003341 	.word	0x08003341
 800331c:	08003341 	.word	0x08003341
 8003320:	08003341 	.word	0x08003341
 8003324:	0800333b 	.word	0x0800333b
 8003328:	2300      	movs	r3, #0
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e0af      	b.n	800348e <UART_SetConfig+0x282>
 800332e:	2302      	movs	r3, #2
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e0ac      	b.n	800348e <UART_SetConfig+0x282>
 8003334:	2304      	movs	r3, #4
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e0a9      	b.n	800348e <UART_SetConfig+0x282>
 800333a:	2308      	movs	r3, #8
 800333c:	76fb      	strb	r3, [r7, #27]
 800333e:	e0a6      	b.n	800348e <UART_SetConfig+0x282>
 8003340:	2310      	movs	r3, #16
 8003342:	76fb      	strb	r3, [r7, #27]
 8003344:	e0a3      	b.n	800348e <UART_SetConfig+0x282>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a6d      	ldr	r2, [pc, #436]	; (8003500 <UART_SetConfig+0x2f4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d120      	bne.n	8003392 <UART_SetConfig+0x186>
 8003350:	4b69      	ldr	r3, [pc, #420]	; (80034f8 <UART_SetConfig+0x2ec>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800335a:	2b30      	cmp	r3, #48	; 0x30
 800335c:	d013      	beq.n	8003386 <UART_SetConfig+0x17a>
 800335e:	2b30      	cmp	r3, #48	; 0x30
 8003360:	d814      	bhi.n	800338c <UART_SetConfig+0x180>
 8003362:	2b20      	cmp	r3, #32
 8003364:	d009      	beq.n	800337a <UART_SetConfig+0x16e>
 8003366:	2b20      	cmp	r3, #32
 8003368:	d810      	bhi.n	800338c <UART_SetConfig+0x180>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <UART_SetConfig+0x168>
 800336e:	2b10      	cmp	r3, #16
 8003370:	d006      	beq.n	8003380 <UART_SetConfig+0x174>
 8003372:	e00b      	b.n	800338c <UART_SetConfig+0x180>
 8003374:	2300      	movs	r3, #0
 8003376:	76fb      	strb	r3, [r7, #27]
 8003378:	e089      	b.n	800348e <UART_SetConfig+0x282>
 800337a:	2302      	movs	r3, #2
 800337c:	76fb      	strb	r3, [r7, #27]
 800337e:	e086      	b.n	800348e <UART_SetConfig+0x282>
 8003380:	2304      	movs	r3, #4
 8003382:	76fb      	strb	r3, [r7, #27]
 8003384:	e083      	b.n	800348e <UART_SetConfig+0x282>
 8003386:	2308      	movs	r3, #8
 8003388:	76fb      	strb	r3, [r7, #27]
 800338a:	e080      	b.n	800348e <UART_SetConfig+0x282>
 800338c:	2310      	movs	r3, #16
 800338e:	76fb      	strb	r3, [r7, #27]
 8003390:	e07d      	b.n	800348e <UART_SetConfig+0x282>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5b      	ldr	r2, [pc, #364]	; (8003504 <UART_SetConfig+0x2f8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d120      	bne.n	80033de <UART_SetConfig+0x1d2>
 800339c:	4b56      	ldr	r3, [pc, #344]	; (80034f8 <UART_SetConfig+0x2ec>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033a6:	2bc0      	cmp	r3, #192	; 0xc0
 80033a8:	d013      	beq.n	80033d2 <UART_SetConfig+0x1c6>
 80033aa:	2bc0      	cmp	r3, #192	; 0xc0
 80033ac:	d814      	bhi.n	80033d8 <UART_SetConfig+0x1cc>
 80033ae:	2b80      	cmp	r3, #128	; 0x80
 80033b0:	d009      	beq.n	80033c6 <UART_SetConfig+0x1ba>
 80033b2:	2b80      	cmp	r3, #128	; 0x80
 80033b4:	d810      	bhi.n	80033d8 <UART_SetConfig+0x1cc>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <UART_SetConfig+0x1b4>
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d006      	beq.n	80033cc <UART_SetConfig+0x1c0>
 80033be:	e00b      	b.n	80033d8 <UART_SetConfig+0x1cc>
 80033c0:	2300      	movs	r3, #0
 80033c2:	76fb      	strb	r3, [r7, #27]
 80033c4:	e063      	b.n	800348e <UART_SetConfig+0x282>
 80033c6:	2302      	movs	r3, #2
 80033c8:	76fb      	strb	r3, [r7, #27]
 80033ca:	e060      	b.n	800348e <UART_SetConfig+0x282>
 80033cc:	2304      	movs	r3, #4
 80033ce:	76fb      	strb	r3, [r7, #27]
 80033d0:	e05d      	b.n	800348e <UART_SetConfig+0x282>
 80033d2:	2308      	movs	r3, #8
 80033d4:	76fb      	strb	r3, [r7, #27]
 80033d6:	e05a      	b.n	800348e <UART_SetConfig+0x282>
 80033d8:	2310      	movs	r3, #16
 80033da:	76fb      	strb	r3, [r7, #27]
 80033dc:	e057      	b.n	800348e <UART_SetConfig+0x282>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a49      	ldr	r2, [pc, #292]	; (8003508 <UART_SetConfig+0x2fc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d125      	bne.n	8003434 <UART_SetConfig+0x228>
 80033e8:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <UART_SetConfig+0x2ec>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f6:	d017      	beq.n	8003428 <UART_SetConfig+0x21c>
 80033f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fc:	d817      	bhi.n	800342e <UART_SetConfig+0x222>
 80033fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003402:	d00b      	beq.n	800341c <UART_SetConfig+0x210>
 8003404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003408:	d811      	bhi.n	800342e <UART_SetConfig+0x222>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <UART_SetConfig+0x20a>
 800340e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003412:	d006      	beq.n	8003422 <UART_SetConfig+0x216>
 8003414:	e00b      	b.n	800342e <UART_SetConfig+0x222>
 8003416:	2300      	movs	r3, #0
 8003418:	76fb      	strb	r3, [r7, #27]
 800341a:	e038      	b.n	800348e <UART_SetConfig+0x282>
 800341c:	2302      	movs	r3, #2
 800341e:	76fb      	strb	r3, [r7, #27]
 8003420:	e035      	b.n	800348e <UART_SetConfig+0x282>
 8003422:	2304      	movs	r3, #4
 8003424:	76fb      	strb	r3, [r7, #27]
 8003426:	e032      	b.n	800348e <UART_SetConfig+0x282>
 8003428:	2308      	movs	r3, #8
 800342a:	76fb      	strb	r3, [r7, #27]
 800342c:	e02f      	b.n	800348e <UART_SetConfig+0x282>
 800342e:	2310      	movs	r3, #16
 8003430:	76fb      	strb	r3, [r7, #27]
 8003432:	e02c      	b.n	800348e <UART_SetConfig+0x282>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2d      	ldr	r2, [pc, #180]	; (80034f0 <UART_SetConfig+0x2e4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d125      	bne.n	800348a <UART_SetConfig+0x27e>
 800343e:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <UART_SetConfig+0x2ec>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003448:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800344c:	d017      	beq.n	800347e <UART_SetConfig+0x272>
 800344e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003452:	d817      	bhi.n	8003484 <UART_SetConfig+0x278>
 8003454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003458:	d00b      	beq.n	8003472 <UART_SetConfig+0x266>
 800345a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800345e:	d811      	bhi.n	8003484 <UART_SetConfig+0x278>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <UART_SetConfig+0x260>
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003468:	d006      	beq.n	8003478 <UART_SetConfig+0x26c>
 800346a:	e00b      	b.n	8003484 <UART_SetConfig+0x278>
 800346c:	2300      	movs	r3, #0
 800346e:	76fb      	strb	r3, [r7, #27]
 8003470:	e00d      	b.n	800348e <UART_SetConfig+0x282>
 8003472:	2302      	movs	r3, #2
 8003474:	76fb      	strb	r3, [r7, #27]
 8003476:	e00a      	b.n	800348e <UART_SetConfig+0x282>
 8003478:	2304      	movs	r3, #4
 800347a:	76fb      	strb	r3, [r7, #27]
 800347c:	e007      	b.n	800348e <UART_SetConfig+0x282>
 800347e:	2308      	movs	r3, #8
 8003480:	76fb      	strb	r3, [r7, #27]
 8003482:	e004      	b.n	800348e <UART_SetConfig+0x282>
 8003484:	2310      	movs	r3, #16
 8003486:	76fb      	strb	r3, [r7, #27]
 8003488:	e001      	b.n	800348e <UART_SetConfig+0x282>
 800348a:	2310      	movs	r3, #16
 800348c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <UART_SetConfig+0x2e4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	f040 8087 	bne.w	80035a8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800349a:	7efb      	ldrb	r3, [r7, #27]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d837      	bhi.n	8003510 <UART_SetConfig+0x304>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <UART_SetConfig+0x29c>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034cd 	.word	0x080034cd
 80034ac:	08003511 	.word	0x08003511
 80034b0:	080034d5 	.word	0x080034d5
 80034b4:	08003511 	.word	0x08003511
 80034b8:	080034db 	.word	0x080034db
 80034bc:	08003511 	.word	0x08003511
 80034c0:	08003511 	.word	0x08003511
 80034c4:	08003511 	.word	0x08003511
 80034c8:	080034e3 	.word	0x080034e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034cc:	f7fe fd70 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 80034d0:	6178      	str	r0, [r7, #20]
        break;
 80034d2:	e022      	b.n	800351a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <UART_SetConfig+0x300>)
 80034d6:	617b      	str	r3, [r7, #20]
        break;
 80034d8:	e01f      	b.n	800351a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034da:	f7fe fcd3 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 80034de:	6178      	str	r0, [r7, #20]
        break;
 80034e0:	e01b      	b.n	800351a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e6:	617b      	str	r3, [r7, #20]
        break;
 80034e8:	e017      	b.n	800351a <UART_SetConfig+0x30e>
 80034ea:	bf00      	nop
 80034ec:	efff69f3 	.word	0xefff69f3
 80034f0:	40008000 	.word	0x40008000
 80034f4:	40013800 	.word	0x40013800
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40004400 	.word	0x40004400
 8003500:	40004800 	.word	0x40004800
 8003504:	40004c00 	.word	0x40004c00
 8003508:	40005000 	.word	0x40005000
 800350c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	76bb      	strb	r3, [r7, #26]
        break;
 8003518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80f1 	beq.w	8003704 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	429a      	cmp	r2, r3
 8003530:	d305      	bcc.n	800353e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	429a      	cmp	r2, r3
 800353c:	d902      	bls.n	8003544 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	76bb      	strb	r3, [r7, #26]
 8003542:	e0df      	b.n	8003704 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	4618      	mov	r0, r3
 8003548:	f04f 0100 	mov.w	r1, #0
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	020b      	lsls	r3, r1, #8
 8003556:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800355a:	0202      	lsls	r2, r0, #8
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	6849      	ldr	r1, [r1, #4]
 8003560:	0849      	lsrs	r1, r1, #1
 8003562:	4608      	mov	r0, r1
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	1814      	adds	r4, r2, r0
 800356a:	eb43 0501 	adc.w	r5, r3, r1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	461a      	mov	r2, r3
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	4620      	mov	r0, r4
 800357a:	4629      	mov	r1, r5
 800357c:	f7fc fe28 	bl	80001d0 <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4613      	mov	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800358e:	d308      	bcc.n	80035a2 <UART_SetConfig+0x396>
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003596:	d204      	bcs.n	80035a2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	e0b0      	b.n	8003704 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	76bb      	strb	r3, [r7, #26]
 80035a6:	e0ad      	b.n	8003704 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b0:	d15c      	bne.n	800366c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80035b2:	7efb      	ldrb	r3, [r7, #27]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d828      	bhi.n	800360a <UART_SetConfig+0x3fe>
 80035b8:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <UART_SetConfig+0x3b4>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035e5 	.word	0x080035e5
 80035c4:	080035ed 	.word	0x080035ed
 80035c8:	080035f5 	.word	0x080035f5
 80035cc:	0800360b 	.word	0x0800360b
 80035d0:	080035fb 	.word	0x080035fb
 80035d4:	0800360b 	.word	0x0800360b
 80035d8:	0800360b 	.word	0x0800360b
 80035dc:	0800360b 	.word	0x0800360b
 80035e0:	08003603 	.word	0x08003603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e4:	f7fe fce4 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 80035e8:	6178      	str	r0, [r7, #20]
        break;
 80035ea:	e013      	b.n	8003614 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035ec:	f7fe fcf6 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 80035f0:	6178      	str	r0, [r7, #20]
        break;
 80035f2:	e00f      	b.n	8003614 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f4:	4b49      	ldr	r3, [pc, #292]	; (800371c <UART_SetConfig+0x510>)
 80035f6:	617b      	str	r3, [r7, #20]
        break;
 80035f8:	e00c      	b.n	8003614 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fa:	f7fe fc43 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 80035fe:	6178      	str	r0, [r7, #20]
        break;
 8003600:	e008      	b.n	8003614 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003606:	617b      	str	r3, [r7, #20]
        break;
 8003608:	e004      	b.n	8003614 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	76bb      	strb	r3, [r7, #26]
        break;
 8003612:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d074      	beq.n	8003704 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	005a      	lsls	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	441a      	add	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	fbb2 f3f3 	udiv	r3, r2, r3
 800362e:	b29b      	uxth	r3, r3
 8003630:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b0f      	cmp	r3, #15
 8003636:	d916      	bls.n	8003666 <UART_SetConfig+0x45a>
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363e:	d212      	bcs.n	8003666 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	b29b      	uxth	r3, r3
 8003644:	f023 030f 	bic.w	r3, r3, #15
 8003648:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	b29b      	uxth	r3, r3
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	b29a      	uxth	r2, r3
 8003656:	89fb      	ldrh	r3, [r7, #14]
 8003658:	4313      	orrs	r3, r2
 800365a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	89fa      	ldrh	r2, [r7, #14]
 8003662:	60da      	str	r2, [r3, #12]
 8003664:	e04e      	b.n	8003704 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	76bb      	strb	r3, [r7, #26]
 800366a:	e04b      	b.n	8003704 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800366c:	7efb      	ldrb	r3, [r7, #27]
 800366e:	2b08      	cmp	r3, #8
 8003670:	d827      	bhi.n	80036c2 <UART_SetConfig+0x4b6>
 8003672:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <UART_SetConfig+0x46c>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	0800369d 	.word	0x0800369d
 800367c:	080036a5 	.word	0x080036a5
 8003680:	080036ad 	.word	0x080036ad
 8003684:	080036c3 	.word	0x080036c3
 8003688:	080036b3 	.word	0x080036b3
 800368c:	080036c3 	.word	0x080036c3
 8003690:	080036c3 	.word	0x080036c3
 8003694:	080036c3 	.word	0x080036c3
 8003698:	080036bb 	.word	0x080036bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800369c:	f7fe fc88 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 80036a0:	6178      	str	r0, [r7, #20]
        break;
 80036a2:	e013      	b.n	80036cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a4:	f7fe fc9a 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 80036a8:	6178      	str	r0, [r7, #20]
        break;
 80036aa:	e00f      	b.n	80036cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <UART_SetConfig+0x510>)
 80036ae:	617b      	str	r3, [r7, #20]
        break;
 80036b0:	e00c      	b.n	80036cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036b2:	f7fe fbe7 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 80036b6:	6178      	str	r0, [r7, #20]
        break;
 80036b8:	e008      	b.n	80036cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036be:	617b      	str	r3, [r7, #20]
        break;
 80036c0:	e004      	b.n	80036cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	76bb      	strb	r3, [r7, #26]
        break;
 80036ca:	bf00      	nop
    }

    if (pclk != 0U)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d018      	beq.n	8003704 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	085a      	lsrs	r2, r3, #1
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	441a      	add	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	d908      	bls.n	8003700 <UART_SetConfig+0x4f4>
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f4:	d204      	bcs.n	8003700 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	e001      	b.n	8003704 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003710:	7ebb      	ldrb	r3, [r7, #26]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bdb0      	pop	{r4, r5, r7, pc}
 800371a:	bf00      	nop
 800371c:	00f42400 	.word	0x00f42400

08003720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01a      	beq.n	8003836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800381e:	d10a      	bne.n	8003836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
  }
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af02      	add	r7, sp, #8
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003874:	f7fd faf8 	bl	8000e68 <HAL_GetTick>
 8003878:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b08      	cmp	r3, #8
 8003886:	d10e      	bne.n	80038a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f82d 	bl	80038f6 <UART_WaitOnFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e023      	b.n	80038ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d10e      	bne.n	80038d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f817 	bl	80038f6 <UART_WaitOnFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e00d      	b.n	80038ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003906:	e05e      	b.n	80039c6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390e:	d05a      	beq.n	80039c6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003910:	f7fd faaa 	bl	8000e68 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	429a      	cmp	r2, r3
 800391e:	d302      	bcc.n	8003926 <UART_WaitOnFlagUntilTimeout+0x30>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11b      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003934:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e043      	b.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02c      	beq.n	80039c6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397a:	d124      	bne.n	80039c6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003984:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003994:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0201 	bic.w	r2, r2, #1
 80039a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e00f      	b.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4013      	ands	r3, r2
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	bf0c      	ite	eq
 80039d6:	2301      	moveq	r3, #1
 80039d8:	2300      	movne	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d091      	beq.n	8003908 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <__NVIC_SetPriority>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	6039      	str	r1, [r7, #0]
 80039fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	db0a      	blt.n	8003a1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	490c      	ldr	r1, [pc, #48]	; (8003a3c <__NVIC_SetPriority+0x4c>)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	0112      	lsls	r2, r2, #4
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	440b      	add	r3, r1
 8003a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a18:	e00a      	b.n	8003a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	4908      	ldr	r1, [pc, #32]	; (8003a40 <__NVIC_SetPriority+0x50>)
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	3b04      	subs	r3, #4
 8003a28:	0112      	lsls	r2, r2, #4
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	761a      	strb	r2, [r3, #24]
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	e000e100 	.word	0xe000e100
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <SysTick_Handler+0x1c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a4c:	f001 fcfe 	bl	800544c <xTaskGetSchedulerState>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a56:	f002 fae7 	bl	8006028 <xPortSysTickHandler>
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	e000e010 	.word	0xe000e010

08003a64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a68:	2100      	movs	r1, #0
 8003a6a:	f06f 0004 	mvn.w	r0, #4
 8003a6e:	f7ff ffbf 	bl	80039f0 <__NVIC_SetPriority>
#endif
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a7e:	f3ef 8305 	mrs	r3, IPSR
 8003a82:	603b      	str	r3, [r7, #0]
  return(result);
 8003a84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a8a:	f06f 0305 	mvn.w	r3, #5
 8003a8e:	607b      	str	r3, [r7, #4]
 8003a90:	e00c      	b.n	8003aac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <osKernelInitialize+0x44>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d105      	bne.n	8003aa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <osKernelInitialize+0x44>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	e002      	b.n	8003aac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003aac:	687b      	ldr	r3, [r7, #4]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000138 	.word	0x20000138

08003ac0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ac6:	f3ef 8305 	mrs	r3, IPSR
 8003aca:	603b      	str	r3, [r7, #0]
  return(result);
 8003acc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ad2:	f06f 0305 	mvn.w	r3, #5
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	e010      	b.n	8003afc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <osKernelStart+0x48>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d109      	bne.n	8003af6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ae2:	f7ff ffbf 	bl	8003a64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <osKernelStart+0x48>)
 8003ae8:	2202      	movs	r2, #2
 8003aea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003aec:	f001 f866 	bl	8004bbc <vTaskStartScheduler>
      stat = osOK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	e002      	b.n	8003afc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003afa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003afc:	687b      	ldr	r3, [r7, #4]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000138 	.word	0x20000138

08003b0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08e      	sub	sp, #56	; 0x38
 8003b10:	af04      	add	r7, sp, #16
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b1c:	f3ef 8305 	mrs	r3, IPSR
 8003b20:	617b      	str	r3, [r7, #20]
  return(result);
 8003b22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d17e      	bne.n	8003c26 <osThreadNew+0x11a>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d07b      	beq.n	8003c26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b32:	2318      	movs	r3, #24
 8003b34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d045      	beq.n	8003bd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <osThreadNew+0x48>
        name = attr->name;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <osThreadNew+0x6e>
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	2b38      	cmp	r3, #56	; 0x38
 8003b6c:	d805      	bhi.n	8003b7a <osThreadNew+0x6e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <osThreadNew+0x72>
        return (NULL);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e054      	b.n	8003c28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00e      	beq.n	8003bb4 <osThreadNew+0xa8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b5b      	cmp	r3, #91	; 0x5b
 8003b9c:	d90a      	bls.n	8003bb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d006      	beq.n	8003bb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <osThreadNew+0xa8>
        mem = 1;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e010      	b.n	8003bd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10c      	bne.n	8003bd6 <osThreadNew+0xca>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d108      	bne.n	8003bd6 <osThreadNew+0xca>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <osThreadNew+0xca>
          mem = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	e001      	b.n	8003bd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d110      	bne.n	8003bfe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003be4:	9202      	str	r2, [sp, #8]
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6a3a      	ldr	r2, [r7, #32]
 8003bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fe0c 	bl	8004810 <xTaskCreateStatic>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e013      	b.n	8003c26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d110      	bne.n	8003c26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	f107 0310 	add.w	r3, r7, #16
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fe57 	bl	80048ca <xTaskCreate>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d001      	beq.n	8003c26 <osThreadNew+0x11a>
            hTask = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c26:	693b      	ldr	r3, [r7, #16]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3728      	adds	r7, #40	; 0x28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c38:	f3ef 8305 	mrs	r3, IPSR
 8003c3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <osDelay+0x1c>
    stat = osErrorISR;
 8003c44:	f06f 0305 	mvn.w	r3, #5
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e007      	b.n	8003c5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 ff7c 	bl	8004b54 <vTaskDelay>
    }
  }

  return (stat);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4a06      	ldr	r2, [pc, #24]	; (8003c98 <vApplicationGetIdleTaskMemory+0x30>)
 8003c7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	2000013c 	.word	0x2000013c
 8003c98:	20000198 	.word	0x20000198

08003c9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003cac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <vApplicationGetTimerTaskMemory+0x30>)
 8003cb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cba:	601a      	str	r2, [r3, #0]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	20000398 	.word	0x20000398
 8003ccc:	200003f4 	.word	0x200003f4

08003cd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f103 0208 	add.w	r2, r3, #8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ce8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f103 0208 	add.w	r2, r3, #8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f103 0208 	add.w	r2, r3, #8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	601a      	str	r2, [r3, #0]
}
 8003d66:	bf00      	nop
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d88:	d103      	bne.n	8003d92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e00c      	b.n	8003dac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3308      	adds	r3, #8
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	e002      	b.n	8003da0 <vListInsert+0x2e>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d2f6      	bcs.n	8003d9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	601a      	str	r2, [r3, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6892      	ldr	r2, [r2, #8]
 8003dfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6852      	ldr	r2, [r2, #4]
 8003e04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d103      	bne.n	8003e18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	1e5a      	subs	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e5e:	bf00      	nop
 8003e60:	e7fe      	b.n	8003e60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e62:	f002 f84f 	bl	8005f04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e72:	fb01 f303 	mul.w	r3, r1, r3
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	3b01      	subs	r3, #1
 8003e94:	68f9      	ldr	r1, [r7, #12]
 8003e96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	441a      	add	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	22ff      	movs	r2, #255	; 0xff
 8003ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	22ff      	movs	r2, #255	; 0xff
 8003eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d114      	bne.n	8003ee2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01a      	beq.n	8003ef6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3310      	adds	r3, #16
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 f903 	bl	80050d0 <xTaskRemoveFromEventList>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <xQueueGenericReset+0xcc>)
 8003ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	e009      	b.n	8003ef6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3310      	adds	r3, #16
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fef2 	bl	8003cd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3324      	adds	r3, #36	; 0x24
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff feed 	bl	8003cd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ef6:	f002 f835 	bl	8005f64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003efa:	2301      	movs	r3, #1
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	e000ed04 	.word	0xe000ed04

08003f08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08e      	sub	sp, #56	; 0x38
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <xQueueGenericCreateStatic+0x52>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <xQueueGenericCreateStatic+0x56>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <xQueueGenericCreateStatic+0x58>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	623b      	str	r3, [r7, #32]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <xQueueGenericCreateStatic+0x7e>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <xQueueGenericCreateStatic+0x82>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <xQueueGenericCreateStatic+0x84>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	61fb      	str	r3, [r7, #28]
}
 8003fa2:	bf00      	nop
 8003fa4:	e7fe      	b.n	8003fa4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fa6:	2350      	movs	r3, #80	; 0x50
 8003fa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b50      	cmp	r3, #80	; 0x50
 8003fae:	d00a      	beq.n	8003fc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	61bb      	str	r3, [r7, #24]
}
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003fc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f805 	bl	8003ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3730      	adds	r7, #48	; 0x30
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e002      	b.n	800401a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004026:	2101      	movs	r1, #1
 8004028:	69b8      	ldr	r0, [r7, #24]
 800402a:	f7ff ff05 	bl	8003e38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08e      	sub	sp, #56	; 0x38
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800404e:	2300      	movs	r3, #0
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <xQueueGenericSend+0x32>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <xQueueGenericSend+0x40>
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <xQueueGenericSend+0x44>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <xQueueGenericSend+0x46>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <xQueueGenericSend+0x60>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d103      	bne.n	80040ae <xQueueGenericSend+0x6e>
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <xQueueGenericSend+0x72>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <xQueueGenericSend+0x74>
 80040b2:	2300      	movs	r3, #0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <xQueueGenericSend+0x8e>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	623b      	str	r3, [r7, #32]
}
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040ce:	f001 f9bd 	bl	800544c <xTaskGetSchedulerState>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d102      	bne.n	80040de <xQueueGenericSend+0x9e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <xQueueGenericSend+0xa2>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <xQueueGenericSend+0xa4>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <xQueueGenericSend+0xbe>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	61fb      	str	r3, [r7, #28]
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040fe:	f001 ff01 	bl	8005f04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <xQueueGenericSend+0xd4>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d129      	bne.n	8004168 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800411a:	f000 fa0b 	bl	8004534 <prvCopyDataToQueue>
 800411e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412a:	3324      	adds	r3, #36	; 0x24
 800412c:	4618      	mov	r0, r3
 800412e:	f000 ffcf 	bl	80050d0 <xTaskRemoveFromEventList>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004138:	4b3f      	ldr	r3, [pc, #252]	; (8004238 <xQueueGenericSend+0x1f8>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	e00a      	b.n	8004160 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004150:	4b39      	ldr	r3, [pc, #228]	; (8004238 <xQueueGenericSend+0x1f8>)
 8004152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004160:	f001 ff00 	bl	8005f64 <vPortExitCritical>
				return pdPASS;
 8004164:	2301      	movs	r3, #1
 8004166:	e063      	b.n	8004230 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800416e:	f001 fef9 	bl	8005f64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004172:	2300      	movs	r3, #0
 8004174:	e05c      	b.n	8004230 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800417c:	f107 0314 	add.w	r3, r7, #20
 8004180:	4618      	mov	r0, r3
 8004182:	f001 f809 	bl	8005198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004186:	2301      	movs	r3, #1
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800418a:	f001 feeb 	bl	8005f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800418e:	f000 fd7b 	bl	8004c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004192:	f001 feb7 	bl	8005f04 <vPortEnterCritical>
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800419c:	b25b      	sxtb	r3, r3
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a2:	d103      	bne.n	80041ac <xQueueGenericSend+0x16c>
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041b2:	b25b      	sxtb	r3, r3
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b8:	d103      	bne.n	80041c2 <xQueueGenericSend+0x182>
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c2:	f001 fecf 	bl	8005f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041c6:	1d3a      	adds	r2, r7, #4
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fff8 	bl	80051c4 <xTaskCheckForTimeOut>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d124      	bne.n	8004224 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041dc:	f000 faa2 	bl	8004724 <prvIsQueueFull>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d018      	beq.n	8004218 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	3310      	adds	r3, #16
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 ff1e 	bl	8005030 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041f6:	f000 fa2d 	bl	8004654 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041fa:	f000 fd53 	bl	8004ca4 <xTaskResumeAll>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	f47f af7c 	bne.w	80040fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004206:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <xQueueGenericSend+0x1f8>)
 8004208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	e772      	b.n	80040fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800421a:	f000 fa1b 	bl	8004654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800421e:	f000 fd41 	bl	8004ca4 <xTaskResumeAll>
 8004222:	e76c      	b.n	80040fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004226:	f000 fa15 	bl	8004654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800422a:	f000 fd3b 	bl	8004ca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800422e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004230:	4618      	mov	r0, r3
 8004232:	3738      	adds	r7, #56	; 0x38
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b090      	sub	sp, #64	; 0x40
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10a      	bne.n	800426a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004266:	bf00      	nop
 8004268:	e7fe      	b.n	8004268 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d103      	bne.n	8004278 <xQueueGenericSendFromISR+0x3c>
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <xQueueGenericSendFromISR+0x40>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <xQueueGenericSendFromISR+0x42>
 800427c:	2300      	movs	r3, #0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d103      	bne.n	80042a6 <xQueueGenericSendFromISR+0x6a>
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <xQueueGenericSendFromISR+0x6e>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <xQueueGenericSendFromISR+0x70>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	623b      	str	r3, [r7, #32]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042c6:	f001 feff 	bl	80060c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042ca:	f3ef 8211 	mrs	r2, BASEPRI
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	61fa      	str	r2, [r7, #28]
 80042e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d302      	bcc.n	80042f8 <xQueueGenericSendFromISR+0xbc>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d12f      	bne.n	8004358 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800430e:	f000 f911 	bl	8004534 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004312:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431a:	d112      	bne.n	8004342 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	2b00      	cmp	r3, #0
 8004322:	d016      	beq.n	8004352 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004326:	3324      	adds	r3, #36	; 0x24
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fed1 	bl	80050d0 <xTaskRemoveFromEventList>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00e      	beq.n	8004352 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	e007      	b.n	8004352 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004342:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004346:	3301      	adds	r3, #1
 8004348:	b2db      	uxtb	r3, r3
 800434a:	b25a      	sxtb	r2, r3
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004352:	2301      	movs	r3, #1
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004356:	e001      	b.n	800435c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004358:	2300      	movs	r3, #0
 800435a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004366:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800436a:	4618      	mov	r0, r3
 800436c:	3740      	adds	r7, #64	; 0x40
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	; 0x30
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004380:	2300      	movs	r3, #0
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <xQueueReceive+0x30>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	623b      	str	r3, [r7, #32]
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <xQueueReceive+0x3e>
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <xQueueReceive+0x42>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <xQueueReceive+0x44>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <xQueueReceive+0x5e>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	61fb      	str	r3, [r7, #28]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043d2:	f001 f83b 	bl	800544c <xTaskGetSchedulerState>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <xQueueReceive+0x6e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <xQueueReceive+0x72>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <xQueueReceive+0x74>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <xQueueReceive+0x8e>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	61bb      	str	r3, [r7, #24]
}
 80043fe:	bf00      	nop
 8004400:	e7fe      	b.n	8004400 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004402:	f001 fd7f 	bl	8005f04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01f      	beq.n	8004452 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004416:	f000 f8f7 	bl	8004608 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	1e5a      	subs	r2, r3, #1
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00f      	beq.n	800444a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	3310      	adds	r3, #16
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fe4e 	bl	80050d0 <xTaskRemoveFromEventList>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800443a:	4b3d      	ldr	r3, [pc, #244]	; (8004530 <xQueueReceive+0x1bc>)
 800443c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800444a:	f001 fd8b 	bl	8005f64 <vPortExitCritical>
				return pdPASS;
 800444e:	2301      	movs	r3, #1
 8004450:	e069      	b.n	8004526 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d103      	bne.n	8004460 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004458:	f001 fd84 	bl	8005f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800445c:	2300      	movs	r3, #0
 800445e:	e062      	b.n	8004526 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004466:	f107 0310 	add.w	r3, r7, #16
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fe94 	bl	8005198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004470:	2301      	movs	r3, #1
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004474:	f001 fd76 	bl	8005f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004478:	f000 fc06 	bl	8004c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800447c:	f001 fd42 	bl	8005f04 <vPortEnterCritical>
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004486:	b25b      	sxtb	r3, r3
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800448c:	d103      	bne.n	8004496 <xQueueReceive+0x122>
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800449c:	b25b      	sxtb	r3, r3
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a2:	d103      	bne.n	80044ac <xQueueReceive+0x138>
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ac:	f001 fd5a 	bl	8005f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044b0:	1d3a      	adds	r2, r7, #4
 80044b2:	f107 0310 	add.w	r3, r7, #16
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fe83 	bl	80051c4 <xTaskCheckForTimeOut>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d123      	bne.n	800450c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c6:	f000 f917 	bl	80046f8 <prvIsQueueEmpty>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d017      	beq.n	8004500 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	3324      	adds	r3, #36	; 0x24
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fda9 	bl	8005030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e0:	f000 f8b8 	bl	8004654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044e4:	f000 fbde 	bl	8004ca4 <xTaskResumeAll>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d189      	bne.n	8004402 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80044ee:	4b10      	ldr	r3, [pc, #64]	; (8004530 <xQueueReceive+0x1bc>)
 80044f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	e780      	b.n	8004402 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004502:	f000 f8a7 	bl	8004654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004506:	f000 fbcd 	bl	8004ca4 <xTaskResumeAll>
 800450a:	e77a      	b.n	8004402 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800450c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800450e:	f000 f8a1 	bl	8004654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004512:	f000 fbc7 	bl	8004ca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004518:	f000 f8ee 	bl	80046f8 <prvIsQueueEmpty>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	f43f af6f 	beq.w	8004402 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004524:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004526:	4618      	mov	r0, r3
 8004528:	3730      	adds	r7, #48	; 0x30
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10d      	bne.n	800456e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d14d      	bne.n	80045f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 ff92 	bl	8005488 <xTaskPriorityDisinherit>
 8004564:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	e043      	b.n	80045f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d119      	bne.n	80045a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6858      	ldr	r0, [r3, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	461a      	mov	r2, r3
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	f002 f83a 	bl	80065f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	441a      	add	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	429a      	cmp	r2, r3
 800459c:	d32b      	bcc.n	80045f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	e026      	b.n	80045f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68d8      	ldr	r0, [r3, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	461a      	mov	r2, r3
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	f002 f820 	bl	80065f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	425b      	negs	r3, r3
 80045c2:	441a      	add	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d207      	bcs.n	80045e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	425b      	negs	r3, r3
 80045de:	441a      	add	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d105      	bne.n	80045f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045fe:	697b      	ldr	r3, [r7, #20]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d018      	beq.n	800464c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	441a      	add	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	429a      	cmp	r2, r3
 8004632:	d303      	bcc.n	800463c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68d9      	ldr	r1, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	461a      	mov	r2, r3
 8004646:	6838      	ldr	r0, [r7, #0]
 8004648:	f001 ffd6 	bl	80065f8 <memcpy>
	}
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800465c:	f001 fc52 	bl	8005f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004666:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004668:	e011      	b.n	800468e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d012      	beq.n	8004698 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3324      	adds	r3, #36	; 0x24
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fd2a 	bl	80050d0 <xTaskRemoveFromEventList>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004682:	f000 fe01 	bl	8005288 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	3b01      	subs	r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800468e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004692:	2b00      	cmp	r3, #0
 8004694:	dce9      	bgt.n	800466a <prvUnlockQueue+0x16>
 8004696:	e000      	b.n	800469a <prvUnlockQueue+0x46>
					break;
 8004698:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	22ff      	movs	r2, #255	; 0xff
 800469e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046a2:	f001 fc5f 	bl	8005f64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046a6:	f001 fc2d 	bl	8005f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046b2:	e011      	b.n	80046d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d012      	beq.n	80046e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3310      	adds	r3, #16
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fd05 	bl	80050d0 <xTaskRemoveFromEventList>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046cc:	f000 fddc 	bl	8005288 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046d0:	7bbb      	ldrb	r3, [r7, #14]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	dce9      	bgt.n	80046b4 <prvUnlockQueue+0x60>
 80046e0:	e000      	b.n	80046e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	22ff      	movs	r2, #255	; 0xff
 80046e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80046ec:	f001 fc3a 	bl	8005f64 <vPortExitCritical>
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004700:	f001 fc00 	bl	8005f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800470c:	2301      	movs	r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e001      	b.n	8004716 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004716:	f001 fc25 	bl	8005f64 <vPortExitCritical>

	return xReturn;
 800471a:	68fb      	ldr	r3, [r7, #12]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800472c:	f001 fbea 	bl	8005f04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004738:	429a      	cmp	r2, r3
 800473a:	d102      	bne.n	8004742 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e001      	b.n	8004746 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004746:	f001 fc0d 	bl	8005f64 <vPortExitCritical>

	return xReturn;
 800474a:	68fb      	ldr	r3, [r7, #12]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	e014      	b.n	800478e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004764:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <vQueueAddToRegistry+0x50>)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004770:	490c      	ldr	r1, [pc, #48]	; (80047a4 <vQueueAddToRegistry+0x50>)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800477a:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <vQueueAddToRegistry+0x50>)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004786:	e006      	b.n	8004796 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b07      	cmp	r3, #7
 8004792:	d9e7      	bls.n	8004764 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20001ae8 	.word	0x20001ae8

080047a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047b8:	f001 fba4 	bl	8005f04 <vPortEnterCritical>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047c2:	b25b      	sxtb	r3, r3
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c8:	d103      	bne.n	80047d2 <vQueueWaitForMessageRestricted+0x2a>
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047d8:	b25b      	sxtb	r3, r3
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047de:	d103      	bne.n	80047e8 <vQueueWaitForMessageRestricted+0x40>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e8:	f001 fbbc 	bl	8005f64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	3324      	adds	r3, #36	; 0x24
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fc3b 	bl	8005078 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	f7ff ff26 	bl	8004654 <prvUnlockQueue>
	}
 8004808:	bf00      	nop
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004810:	b580      	push	{r7, lr}
 8004812:	b08e      	sub	sp, #56	; 0x38
 8004814:	af04      	add	r7, sp, #16
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800481e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10a      	bne.n	800483a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	623b      	str	r3, [r7, #32]
}
 8004836:	bf00      	nop
 8004838:	e7fe      	b.n	8004838 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <xTaskCreateStatic+0x46>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	61fb      	str	r3, [r7, #28]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004856:	235c      	movs	r3, #92	; 0x5c
 8004858:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b5c      	cmp	r3, #92	; 0x5c
 800485e:	d00a      	beq.n	8004876 <xTaskCreateStatic+0x66>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	61bb      	str	r3, [r7, #24]
}
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004876:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01e      	beq.n	80048bc <xTaskCreateStatic+0xac>
 800487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01b      	beq.n	80048bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800488c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	2202      	movs	r2, #2
 8004892:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004896:	2300      	movs	r3, #0
 8004898:	9303      	str	r3, [sp, #12]
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	9302      	str	r3, [sp, #8]
 800489e:	f107 0314 	add.w	r3, r7, #20
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f850 	bl	8004954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048b6:	f000 f8dd 	bl	8004a74 <prvAddNewTaskToReadyList>
 80048ba:	e001      	b.n	80048c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048c0:	697b      	ldr	r3, [r7, #20]
	}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3728      	adds	r7, #40	; 0x28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b08c      	sub	sp, #48	; 0x30
 80048ce:	af04      	add	r7, sp, #16
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 fc32 	bl	8006148 <pvPortMalloc>
 80048e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00e      	beq.n	800490a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80048ec:	205c      	movs	r0, #92	; 0x5c
 80048ee:	f001 fc2b 	bl	8006148 <pvPortMalloc>
 80048f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004900:	e005      	b.n	800490e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f001 fcec 	bl	80062e0 <vPortFree>
 8004908:	e001      	b.n	800490e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d017      	beq.n	8004944 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800491c:	88fa      	ldrh	r2, [r7, #6]
 800491e:	2300      	movs	r3, #0
 8004920:	9303      	str	r3, [sp, #12]
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	9302      	str	r3, [sp, #8]
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f80e 	bl	8004954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004938:	69f8      	ldr	r0, [r7, #28]
 800493a:	f000 f89b 	bl	8004a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800493e:	2301      	movs	r3, #1
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e002      	b.n	800494a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004948:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800494a:	69bb      	ldr	r3, [r7, #24]
	}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	461a      	mov	r2, r3
 800496c:	21a5      	movs	r1, #165	; 0xa5
 800496e:	f001 fe51 	bl	8006614 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800497c:	3b01      	subs	r3, #1
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f023 0307 	bic.w	r3, r3, #7
 800498a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	617b      	str	r3, [r7, #20]
}
 80049a8:	bf00      	nop
 80049aa:	e7fe      	b.n	80049aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01f      	beq.n	80049f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
 80049b6:	e012      	b.n	80049de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	7819      	ldrb	r1, [r3, #0]
 80049c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	4413      	add	r3, r2
 80049c6:	3334      	adds	r3, #52	; 0x34
 80049c8:	460a      	mov	r2, r1
 80049ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d006      	beq.n	80049e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	3301      	adds	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2b0f      	cmp	r3, #15
 80049e2:	d9e9      	bls.n	80049b8 <prvInitialiseNewTask+0x64>
 80049e4:	e000      	b.n	80049e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80049e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049f0:	e003      	b.n	80049fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	2b37      	cmp	r3, #55	; 0x37
 80049fe:	d901      	bls.n	8004a04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a00:	2337      	movs	r3, #55	; 0x37
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	2200      	movs	r2, #0
 8004a14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff f978 	bl	8003d10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	3318      	adds	r3, #24
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff f973 	bl	8003d10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	2200      	movs	r2, #0
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	68f9      	ldr	r1, [r7, #12]
 8004a52:	69b8      	ldr	r0, [r7, #24]
 8004a54:	f001 f928 	bl	8005ca8 <pxPortInitialiseStack>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a6a:	bf00      	nop
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a7c:	f001 fa42 	bl	8005f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a80:	4b2d      	ldr	r3, [pc, #180]	; (8004b38 <prvAddNewTaskToReadyList+0xc4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3301      	adds	r3, #1
 8004a86:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <prvAddNewTaskToReadyList+0xc4>)
 8004a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a8a:	4b2c      	ldr	r3, [pc, #176]	; (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a92:	4a2a      	ldr	r2, [pc, #168]	; (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a98:	4b27      	ldr	r3, [pc, #156]	; (8004b38 <prvAddNewTaskToReadyList+0xc4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d110      	bne.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004aa0:	f000 fc16 	bl	80052d0 <prvInitialiseTaskLists>
 8004aa4:	e00d      	b.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004aa6:	4b26      	ldr	r3, [pc, #152]	; (8004b40 <prvAddNewTaskToReadyList+0xcc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aae:	4b23      	ldr	r3, [pc, #140]	; (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d802      	bhi.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004abc:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ac2:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <prvAddNewTaskToReadyList+0xd0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <prvAddNewTaskToReadyList+0xd0>)
 8004aca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <prvAddNewTaskToReadyList+0xd0>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <prvAddNewTaskToReadyList+0xd4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d903      	bls.n	8004ae8 <prvAddNewTaskToReadyList+0x74>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <prvAddNewTaskToReadyList+0xd4>)
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <prvAddNewTaskToReadyList+0xd8>)
 8004af6:	441a      	add	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f7ff f913 	bl	8003d2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b04:	f001 fa2e 	bl	8005f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <prvAddNewTaskToReadyList+0xcc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00e      	beq.n	8004b2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d207      	bcs.n	8004b2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <prvAddNewTaskToReadyList+0xdc>)
 8004b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000cc8 	.word	0x20000cc8
 8004b3c:	200007f4 	.word	0x200007f4
 8004b40:	20000cd4 	.word	0x20000cd4
 8004b44:	20000ce4 	.word	0x20000ce4
 8004b48:	20000cd0 	.word	0x20000cd0
 8004b4c:	200007f8 	.word	0x200007f8
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d017      	beq.n	8004b96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b66:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <vTaskDelay+0x60>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <vTaskDelay+0x30>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	60bb      	str	r3, [r7, #8]
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b84:	f000 f880 	bl	8004c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b88:	2100      	movs	r1, #0
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fcea 	bl	8005564 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b90:	f000 f888 	bl	8004ca4 <xTaskResumeAll>
 8004b94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d107      	bne.n	8004bac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <vTaskDelay+0x64>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000cf0 	.word	0x20000cf0
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08a      	sub	sp, #40	; 0x28
 8004bc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bca:	463a      	mov	r2, r7
 8004bcc:	1d39      	adds	r1, r7, #4
 8004bce:	f107 0308 	add.w	r3, r7, #8
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff f848 	bl	8003c68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	9202      	str	r2, [sp, #8]
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	2300      	movs	r3, #0
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2300      	movs	r3, #0
 8004be8:	460a      	mov	r2, r1
 8004bea:	4921      	ldr	r1, [pc, #132]	; (8004c70 <vTaskStartScheduler+0xb4>)
 8004bec:	4821      	ldr	r0, [pc, #132]	; (8004c74 <vTaskStartScheduler+0xb8>)
 8004bee:	f7ff fe0f 	bl	8004810 <xTaskCreateStatic>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4a20      	ldr	r2, [pc, #128]	; (8004c78 <vTaskStartScheduler+0xbc>)
 8004bf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bf8:	4b1f      	ldr	r3, [pc, #124]	; (8004c78 <vTaskStartScheduler+0xbc>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c00:	2301      	movs	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e001      	b.n	8004c0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d102      	bne.n	8004c16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c10:	f000 fcfc 	bl	800560c <xTimerCreateTimerTask>
 8004c14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d116      	bne.n	8004c4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	613b      	str	r3, [r7, #16]
}
 8004c2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c30:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <vTaskStartScheduler+0xc0>)
 8004c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <vTaskStartScheduler+0xc4>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c3e:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <vTaskStartScheduler+0xc8>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c44:	f001 f8bc 	bl	8005dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c48:	e00e      	b.n	8004c68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c50:	d10a      	bne.n	8004c68 <vTaskStartScheduler+0xac>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60fb      	str	r3, [r7, #12]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <vTaskStartScheduler+0xaa>
}
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	0800694c 	.word	0x0800694c
 8004c74:	080052a1 	.word	0x080052a1
 8004c78:	20000cec 	.word	0x20000cec
 8004c7c:	20000ce8 	.word	0x20000ce8
 8004c80:	20000cd4 	.word	0x20000cd4
 8004c84:	20000ccc 	.word	0x20000ccc

08004c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <vTaskSuspendAll+0x18>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3301      	adds	r3, #1
 8004c92:	4a03      	ldr	r2, [pc, #12]	; (8004ca0 <vTaskSuspendAll+0x18>)
 8004c94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c96:	bf00      	nop
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	20000cf0 	.word	0x20000cf0

08004ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cb2:	4b42      	ldr	r3, [pc, #264]	; (8004dbc <xTaskResumeAll+0x118>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	603b      	str	r3, [r7, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	e7fe      	b.n	8004cce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cd0:	f001 f918 	bl	8005f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cd4:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <xTaskResumeAll+0x118>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	4a38      	ldr	r2, [pc, #224]	; (8004dbc <xTaskResumeAll+0x118>)
 8004cdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cde:	4b37      	ldr	r3, [pc, #220]	; (8004dbc <xTaskResumeAll+0x118>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d162      	bne.n	8004dac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ce6:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <xTaskResumeAll+0x11c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d05e      	beq.n	8004dac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cee:	e02f      	b.n	8004d50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf0:	4b34      	ldr	r3, [pc, #208]	; (8004dc4 <xTaskResumeAll+0x120>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3318      	adds	r3, #24
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff f871 	bl	8003de4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff f86c 	bl	8003de4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d10:	4b2d      	ldr	r3, [pc, #180]	; (8004dc8 <xTaskResumeAll+0x124>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d903      	bls.n	8004d20 <xTaskResumeAll+0x7c>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	4a2a      	ldr	r2, [pc, #168]	; (8004dc8 <xTaskResumeAll+0x124>)
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4a27      	ldr	r2, [pc, #156]	; (8004dcc <xTaskResumeAll+0x128>)
 8004d2e:	441a      	add	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f7fe fff7 	bl	8003d2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	4b23      	ldr	r3, [pc, #140]	; (8004dd0 <xTaskResumeAll+0x12c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d4a:	4b22      	ldr	r3, [pc, #136]	; (8004dd4 <xTaskResumeAll+0x130>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d50:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <xTaskResumeAll+0x120>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1cb      	bne.n	8004cf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d5e:	f000 fb55 	bl	800540c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d62:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <xTaskResumeAll+0x134>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d010      	beq.n	8004d90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d6e:	f000 f847 	bl	8004e00 <xTaskIncrementTick>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d78:	4b16      	ldr	r3, [pc, #88]	; (8004dd4 <xTaskResumeAll+0x130>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f1      	bne.n	8004d6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d8a:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <xTaskResumeAll+0x134>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <xTaskResumeAll+0x130>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <xTaskResumeAll+0x138>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dac:	f001 f8da 	bl	8005f64 <vPortExitCritical>

	return xAlreadyYielded;
 8004db0:	68bb      	ldr	r3, [r7, #8]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000cf0 	.word	0x20000cf0
 8004dc0:	20000cc8 	.word	0x20000cc8
 8004dc4:	20000c88 	.word	0x20000c88
 8004dc8:	20000cd0 	.word	0x20000cd0
 8004dcc:	200007f8 	.word	0x200007f8
 8004dd0:	200007f4 	.word	0x200007f4
 8004dd4:	20000cdc 	.word	0x20000cdc
 8004dd8:	20000cd8 	.word	0x20000cd8
 8004ddc:	e000ed04 	.word	0xe000ed04

08004de0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <xTaskGetTickCount+0x1c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dec:	687b      	ldr	r3, [r7, #4]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000ccc 	.word	0x20000ccc

08004e00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e0a:	4b4f      	ldr	r3, [pc, #316]	; (8004f48 <xTaskIncrementTick+0x148>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 808f 	bne.w	8004f32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e14:	4b4d      	ldr	r3, [pc, #308]	; (8004f4c <xTaskIncrementTick+0x14c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e1c:	4a4b      	ldr	r2, [pc, #300]	; (8004f4c <xTaskIncrementTick+0x14c>)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d120      	bne.n	8004e6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e28:	4b49      	ldr	r3, [pc, #292]	; (8004f50 <xTaskIncrementTick+0x150>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	603b      	str	r3, [r7, #0]
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <xTaskIncrementTick+0x46>
 8004e48:	4b41      	ldr	r3, [pc, #260]	; (8004f50 <xTaskIncrementTick+0x150>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	4b41      	ldr	r3, [pc, #260]	; (8004f54 <xTaskIncrementTick+0x154>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a3f      	ldr	r2, [pc, #252]	; (8004f50 <xTaskIncrementTick+0x150>)
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	4a3f      	ldr	r2, [pc, #252]	; (8004f54 <xTaskIncrementTick+0x154>)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	4b3e      	ldr	r3, [pc, #248]	; (8004f58 <xTaskIncrementTick+0x158>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3301      	adds	r3, #1
 8004e62:	4a3d      	ldr	r2, [pc, #244]	; (8004f58 <xTaskIncrementTick+0x158>)
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	f000 fad1 	bl	800540c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e6a:	4b3c      	ldr	r3, [pc, #240]	; (8004f5c <xTaskIncrementTick+0x15c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d349      	bcc.n	8004f08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e74:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <xTaskIncrementTick+0x150>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7e:	4b37      	ldr	r3, [pc, #220]	; (8004f5c <xTaskIncrementTick+0x15c>)
 8004e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e84:	601a      	str	r2, [r3, #0]
					break;
 8004e86:	e03f      	b.n	8004f08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e88:	4b31      	ldr	r3, [pc, #196]	; (8004f50 <xTaskIncrementTick+0x150>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d203      	bcs.n	8004ea8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ea0:	4a2e      	ldr	r2, [pc, #184]	; (8004f5c <xTaskIncrementTick+0x15c>)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ea6:	e02f      	b.n	8004f08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fe ff99 	bl	8003de4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	3318      	adds	r3, #24
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe ff90 	bl	8003de4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <xTaskIncrementTick+0x160>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d903      	bls.n	8004ed8 <xTaskIncrementTick+0xd8>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <xTaskIncrementTick+0x160>)
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4a1f      	ldr	r2, [pc, #124]	; (8004f64 <xTaskIncrementTick+0x164>)
 8004ee6:	441a      	add	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	3304      	adds	r3, #4
 8004eec:	4619      	mov	r1, r3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	f7fe ff1b 	bl	8003d2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <xTaskIncrementTick+0x168>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d3b8      	bcc.n	8004e74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f02:	2301      	movs	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f06:	e7b5      	b.n	8004e74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f08:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <xTaskIncrementTick+0x168>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0e:	4915      	ldr	r1, [pc, #84]	; (8004f64 <xTaskIncrementTick+0x164>)
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d901      	bls.n	8004f24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f20:	2301      	movs	r3, #1
 8004f22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f24:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <xTaskIncrementTick+0x16c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e004      	b.n	8004f3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <xTaskIncrementTick+0x170>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3301      	adds	r3, #1
 8004f38:	4a0d      	ldr	r2, [pc, #52]	; (8004f70 <xTaskIncrementTick+0x170>)
 8004f3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f3c:	697b      	ldr	r3, [r7, #20]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000cf0 	.word	0x20000cf0
 8004f4c:	20000ccc 	.word	0x20000ccc
 8004f50:	20000c80 	.word	0x20000c80
 8004f54:	20000c84 	.word	0x20000c84
 8004f58:	20000ce0 	.word	0x20000ce0
 8004f5c:	20000ce8 	.word	0x20000ce8
 8004f60:	20000cd0 	.word	0x20000cd0
 8004f64:	200007f8 	.word	0x200007f8
 8004f68:	200007f4 	.word	0x200007f4
 8004f6c:	20000cdc 	.word	0x20000cdc
 8004f70:	20000cd8 	.word	0x20000cd8

08004f74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f7a:	4b28      	ldr	r3, [pc, #160]	; (800501c <vTaskSwitchContext+0xa8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f82:	4b27      	ldr	r3, [pc, #156]	; (8005020 <vTaskSwitchContext+0xac>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f88:	e041      	b.n	800500e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004f8a:	4b25      	ldr	r3, [pc, #148]	; (8005020 <vTaskSwitchContext+0xac>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f90:	4b24      	ldr	r3, [pc, #144]	; (8005024 <vTaskSwitchContext+0xb0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e010      	b.n	8004fba <vTaskSwitchContext+0x46>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	607b      	str	r3, [r7, #4]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <vTaskSwitchContext+0x3e>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	491b      	ldr	r1, [pc, #108]	; (8005028 <vTaskSwitchContext+0xb4>)
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0e4      	beq.n	8004f98 <vTaskSwitchContext+0x24>
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4a13      	ldr	r2, [pc, #76]	; (8005028 <vTaskSwitchContext+0xb4>)
 8004fda:	4413      	add	r3, r2
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	605a      	str	r2, [r3, #4]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d104      	bne.n	8004ffe <vTaskSwitchContext+0x8a>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a09      	ldr	r2, [pc, #36]	; (800502c <vTaskSwitchContext+0xb8>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	4a06      	ldr	r2, [pc, #24]	; (8005024 <vTaskSwitchContext+0xb0>)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6013      	str	r3, [r2, #0]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000cf0 	.word	0x20000cf0
 8005020:	20000cdc 	.word	0x20000cdc
 8005024:	20000cd0 	.word	0x20000cd0
 8005028:	200007f8 	.word	0x200007f8
 800502c:	200007f4 	.word	0x200007f4

08005030 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60fb      	str	r3, [r7, #12]
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005056:	4b07      	ldr	r3, [pc, #28]	; (8005074 <vTaskPlaceOnEventList+0x44>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3318      	adds	r3, #24
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fe fe87 	bl	8003d72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005064:	2101      	movs	r1, #1
 8005066:	6838      	ldr	r0, [r7, #0]
 8005068:	f000 fa7c 	bl	8005564 <prvAddCurrentTaskToDelayedList>
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	200007f4 	.word	0x200007f4

08005078 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	617b      	str	r3, [r7, #20]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050a0:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <vTaskPlaceOnEventListRestricted+0x54>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3318      	adds	r3, #24
 80050a6:	4619      	mov	r1, r3
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7fe fe3e 	bl	8003d2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80050b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	68b8      	ldr	r0, [r7, #8]
 80050be:	f000 fa51 	bl	8005564 <prvAddCurrentTaskToDelayedList>
	}
 80050c2:	bf00      	nop
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	200007f4 	.word	0x200007f4

080050d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	60fb      	str	r3, [r7, #12]
}
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	3318      	adds	r3, #24
 8005100:	4618      	mov	r0, r3
 8005102:	f7fe fe6f 	bl	8003de4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005106:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <xTaskRemoveFromEventList+0xb0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d11d      	bne.n	800514a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3304      	adds	r3, #4
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe fe66 	bl	8003de4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	4b19      	ldr	r3, [pc, #100]	; (8005184 <xTaskRemoveFromEventList+0xb4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d903      	bls.n	800512c <xTaskRemoveFromEventList+0x5c>
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	4a16      	ldr	r2, [pc, #88]	; (8005184 <xTaskRemoveFromEventList+0xb4>)
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4a13      	ldr	r2, [pc, #76]	; (8005188 <xTaskRemoveFromEventList+0xb8>)
 800513a:	441a      	add	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	3304      	adds	r3, #4
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f7fe fdf1 	bl	8003d2a <vListInsertEnd>
 8005148:	e005      	b.n	8005156 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	3318      	adds	r3, #24
 800514e:	4619      	mov	r1, r3
 8005150:	480e      	ldr	r0, [pc, #56]	; (800518c <xTaskRemoveFromEventList+0xbc>)
 8005152:	f7fe fdea 	bl	8003d2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515a:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <xTaskRemoveFromEventList+0xc0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	429a      	cmp	r2, r3
 8005162:	d905      	bls.n	8005170 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005164:	2301      	movs	r3, #1
 8005166:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <xTaskRemoveFromEventList+0xc4>)
 800516a:	2201      	movs	r2, #1
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e001      	b.n	8005174 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005174:	697b      	ldr	r3, [r7, #20]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000cf0 	.word	0x20000cf0
 8005184:	20000cd0 	.word	0x20000cd0
 8005188:	200007f8 	.word	0x200007f8
 800518c:	20000c88 	.word	0x20000c88
 8005190:	200007f4 	.word	0x200007f4
 8005194:	20000cdc 	.word	0x20000cdc

08005198 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <vTaskInternalSetTimeOutState+0x24>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <vTaskInternalSetTimeOutState+0x28>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	605a      	str	r2, [r3, #4]
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20000ce0 	.word	0x20000ce0
 80051c0:	20000ccc 	.word	0x20000ccc

080051c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	613b      	str	r3, [r7, #16]
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60fb      	str	r3, [r7, #12]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005206:	f000 fe7d 	bl	8005f04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800520a:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <xTaskCheckForTimeOut+0xbc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005222:	d102      	bne.n	800522a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	e023      	b.n	8005272 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <xTaskCheckForTimeOut+0xc0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d007      	beq.n	8005246 <xTaskCheckForTimeOut+0x82>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	429a      	cmp	r2, r3
 800523e:	d302      	bcc.n	8005246 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005240:	2301      	movs	r3, #1
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	e015      	b.n	8005272 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	d20b      	bcs.n	8005268 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad2      	subs	r2, r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff9b 	bl	8005198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e004      	b.n	8005272 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800526e:	2301      	movs	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005272:	f000 fe77 	bl	8005f64 <vPortExitCritical>

	return xReturn;
 8005276:	69fb      	ldr	r3, [r7, #28]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000ccc 	.word	0x20000ccc
 8005284:	20000ce0 	.word	0x20000ce0

08005288 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800528c:	4b03      	ldr	r3, [pc, #12]	; (800529c <vTaskMissedYield+0x14>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]
}
 8005292:	bf00      	nop
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	20000cdc 	.word	0x20000cdc

080052a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052a8:	f000 f852 	bl	8005350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052ac:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <prvIdleTask+0x28>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d9f9      	bls.n	80052a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052b4:	4b05      	ldr	r3, [pc, #20]	; (80052cc <prvIdleTask+0x2c>)
 80052b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052c4:	e7f0      	b.n	80052a8 <prvIdleTask+0x8>
 80052c6:	bf00      	nop
 80052c8:	200007f8 	.word	0x200007f8
 80052cc:	e000ed04 	.word	0xe000ed04

080052d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052d6:	2300      	movs	r3, #0
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	e00c      	b.n	80052f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4a12      	ldr	r2, [pc, #72]	; (8005330 <prvInitialiseTaskLists+0x60>)
 80052e8:	4413      	add	r3, r2
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe fcf0 	bl	8003cd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3301      	adds	r3, #1
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b37      	cmp	r3, #55	; 0x37
 80052fa:	d9ef      	bls.n	80052dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052fc:	480d      	ldr	r0, [pc, #52]	; (8005334 <prvInitialiseTaskLists+0x64>)
 80052fe:	f7fe fce7 	bl	8003cd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005302:	480d      	ldr	r0, [pc, #52]	; (8005338 <prvInitialiseTaskLists+0x68>)
 8005304:	f7fe fce4 	bl	8003cd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005308:	480c      	ldr	r0, [pc, #48]	; (800533c <prvInitialiseTaskLists+0x6c>)
 800530a:	f7fe fce1 	bl	8003cd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800530e:	480c      	ldr	r0, [pc, #48]	; (8005340 <prvInitialiseTaskLists+0x70>)
 8005310:	f7fe fcde 	bl	8003cd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005314:	480b      	ldr	r0, [pc, #44]	; (8005344 <prvInitialiseTaskLists+0x74>)
 8005316:	f7fe fcdb 	bl	8003cd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <prvInitialiseTaskLists+0x78>)
 800531c:	4a05      	ldr	r2, [pc, #20]	; (8005334 <prvInitialiseTaskLists+0x64>)
 800531e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005320:	4b0a      	ldr	r3, [pc, #40]	; (800534c <prvInitialiseTaskLists+0x7c>)
 8005322:	4a05      	ldr	r2, [pc, #20]	; (8005338 <prvInitialiseTaskLists+0x68>)
 8005324:	601a      	str	r2, [r3, #0]
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	200007f8 	.word	0x200007f8
 8005334:	20000c58 	.word	0x20000c58
 8005338:	20000c6c 	.word	0x20000c6c
 800533c:	20000c88 	.word	0x20000c88
 8005340:	20000c9c 	.word	0x20000c9c
 8005344:	20000cb4 	.word	0x20000cb4
 8005348:	20000c80 	.word	0x20000c80
 800534c:	20000c84 	.word	0x20000c84

08005350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005356:	e019      	b.n	800538c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005358:	f000 fdd4 	bl	8005f04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800535c:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <prvCheckTasksWaitingTermination+0x50>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fd3b 	bl	8003de4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800536e:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <prvCheckTasksWaitingTermination+0x54>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3b01      	subs	r3, #1
 8005374:	4a0b      	ldr	r2, [pc, #44]	; (80053a4 <prvCheckTasksWaitingTermination+0x54>)
 8005376:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <prvCheckTasksWaitingTermination+0x58>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3b01      	subs	r3, #1
 800537e:	4a0a      	ldr	r2, [pc, #40]	; (80053a8 <prvCheckTasksWaitingTermination+0x58>)
 8005380:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005382:	f000 fdef 	bl	8005f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f810 	bl	80053ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <prvCheckTasksWaitingTermination+0x58>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e1      	bne.n	8005358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000c9c 	.word	0x20000c9c
 80053a4:	20000cc8 	.word	0x20000cc8
 80053a8:	20000cb0 	.word	0x20000cb0

080053ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d108      	bne.n	80053d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 ff8c 	bl	80062e0 <vPortFree>
				vPortFree( pxTCB );
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 ff89 	bl	80062e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053ce:	e018      	b.n	8005402 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d103      	bne.n	80053e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 ff80 	bl	80062e0 <vPortFree>
	}
 80053e0:	e00f      	b.n	8005402 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d00a      	beq.n	8005402 <prvDeleteTCB+0x56>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	60fb      	str	r3, [r7, #12]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <prvDeleteTCB+0x54>
	}
 8005402:	bf00      	nop
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005412:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <prvResetNextTaskUnblockTime+0x38>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d104      	bne.n	8005426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <prvResetNextTaskUnblockTime+0x3c>)
 800541e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005424:	e008      	b.n	8005438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005426:	4b07      	ldr	r3, [pc, #28]	; (8005444 <prvResetNextTaskUnblockTime+0x38>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	4a04      	ldr	r2, [pc, #16]	; (8005448 <prvResetNextTaskUnblockTime+0x3c>)
 8005436:	6013      	str	r3, [r2, #0]
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	20000c80 	.word	0x20000c80
 8005448:	20000ce8 	.word	0x20000ce8

0800544c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005452:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <xTaskGetSchedulerState+0x34>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d102      	bne.n	8005460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800545a:	2301      	movs	r3, #1
 800545c:	607b      	str	r3, [r7, #4]
 800545e:	e008      	b.n	8005472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005460:	4b08      	ldr	r3, [pc, #32]	; (8005484 <xTaskGetSchedulerState+0x38>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005468:	2302      	movs	r3, #2
 800546a:	607b      	str	r3, [r7, #4]
 800546c:	e001      	b.n	8005472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005472:	687b      	ldr	r3, [r7, #4]
	}
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	20000cd4 	.word	0x20000cd4
 8005484:	20000cf0 	.word	0x20000cf0

08005488 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d056      	beq.n	800554c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800549e:	4b2e      	ldr	r3, [pc, #184]	; (8005558 <xTaskPriorityDisinherit+0xd0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d00a      	beq.n	80054be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	60fb      	str	r3, [r7, #12]
}
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60bb      	str	r3, [r7, #8]
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e0:	1e5a      	subs	r2, r3, #1
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d02c      	beq.n	800554c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d128      	bne.n	800554c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fe fc70 	bl	8003de4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551c:	4b0f      	ldr	r3, [pc, #60]	; (800555c <xTaskPriorityDisinherit+0xd4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d903      	bls.n	800552c <xTaskPriorityDisinherit+0xa4>
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	4a0c      	ldr	r2, [pc, #48]	; (800555c <xTaskPriorityDisinherit+0xd4>)
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <xTaskPriorityDisinherit+0xd8>)
 800553a:	441a      	add	r2, r3
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	3304      	adds	r3, #4
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f7fe fbf1 	bl	8003d2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005548:	2301      	movs	r3, #1
 800554a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800554c:	697b      	ldr	r3, [r7, #20]
	}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	200007f4 	.word	0x200007f4
 800555c:	20000cd0 	.word	0x20000cd0
 8005560:	200007f8 	.word	0x200007f8

08005564 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800556e:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005574:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3304      	adds	r3, #4
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe fc32 	bl	8003de4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005586:	d10a      	bne.n	800559e <prvAddCurrentTaskToDelayedList+0x3a>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800558e:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4819      	ldr	r0, [pc, #100]	; (80055fc <prvAddCurrentTaskToDelayedList+0x98>)
 8005598:	f7fe fbc7 	bl	8003d2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800559c:	e026      	b.n	80055ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4413      	add	r3, r2
 80055a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d209      	bcs.n	80055ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055b6:	4b12      	ldr	r3, [pc, #72]	; (8005600 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7fe fbd5 	bl	8003d72 <vListInsert>
}
 80055c8:	e010      	b.n	80055ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ca:	4b0e      	ldr	r3, [pc, #56]	; (8005604 <prvAddCurrentTaskToDelayedList+0xa0>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	4610      	mov	r0, r2
 80055d8:	f7fe fbcb 	bl	8003d72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d202      	bcs.n	80055ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055e6:	4a08      	ldr	r2, [pc, #32]	; (8005608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6013      	str	r3, [r2, #0]
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000ccc 	.word	0x20000ccc
 80055f8:	200007f4 	.word	0x200007f4
 80055fc:	20000cb4 	.word	0x20000cb4
 8005600:	20000c84 	.word	0x20000c84
 8005604:	20000c80 	.word	0x20000c80
 8005608:	20000ce8 	.word	0x20000ce8

0800560c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	; 0x28
 8005610:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005616:	f000 fb07 	bl	8005c28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800561a:	4b1c      	ldr	r3, [pc, #112]	; (800568c <xTimerCreateTimerTask+0x80>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d021      	beq.n	8005666 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800562a:	1d3a      	adds	r2, r7, #4
 800562c:	f107 0108 	add.w	r1, r7, #8
 8005630:	f107 030c 	add.w	r3, r7, #12
 8005634:	4618      	mov	r0, r3
 8005636:	f7fe fb31 	bl	8003c9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	9202      	str	r2, [sp, #8]
 8005642:	9301      	str	r3, [sp, #4]
 8005644:	2302      	movs	r3, #2
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	2300      	movs	r3, #0
 800564a:	460a      	mov	r2, r1
 800564c:	4910      	ldr	r1, [pc, #64]	; (8005690 <xTimerCreateTimerTask+0x84>)
 800564e:	4811      	ldr	r0, [pc, #68]	; (8005694 <xTimerCreateTimerTask+0x88>)
 8005650:	f7ff f8de 	bl	8004810 <xTaskCreateStatic>
 8005654:	4603      	mov	r3, r0
 8005656:	4a10      	ldr	r2, [pc, #64]	; (8005698 <xTimerCreateTimerTask+0x8c>)
 8005658:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800565a:	4b0f      	ldr	r3, [pc, #60]	; (8005698 <xTimerCreateTimerTask+0x8c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005662:	2301      	movs	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	613b      	str	r3, [r7, #16]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005682:	697b      	ldr	r3, [r7, #20]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000d24 	.word	0x20000d24
 8005690:	08006954 	.word	0x08006954
 8005694:	080057d1 	.word	0x080057d1
 8005698:	20000d28 	.word	0x20000d28

0800569c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	; 0x28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	623b      	str	r3, [r7, #32]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80056ca:	4b1a      	ldr	r3, [pc, #104]	; (8005734 <xTimerGenericCommand+0x98>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d02a      	beq.n	8005728 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b05      	cmp	r3, #5
 80056e2:	dc18      	bgt.n	8005716 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056e4:	f7ff feb2 	bl	800544c <xTaskGetSchedulerState>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d109      	bne.n	8005702 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056ee:	4b11      	ldr	r3, [pc, #68]	; (8005734 <xTimerGenericCommand+0x98>)
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	f107 0110 	add.w	r1, r7, #16
 80056f6:	2300      	movs	r3, #0
 80056f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fa:	f7fe fca1 	bl	8004040 <xQueueGenericSend>
 80056fe:	6278      	str	r0, [r7, #36]	; 0x24
 8005700:	e012      	b.n	8005728 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005702:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <xTimerGenericCommand+0x98>)
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	f107 0110 	add.w	r1, r7, #16
 800570a:	2300      	movs	r3, #0
 800570c:	2200      	movs	r2, #0
 800570e:	f7fe fc97 	bl	8004040 <xQueueGenericSend>
 8005712:	6278      	str	r0, [r7, #36]	; 0x24
 8005714:	e008      	b.n	8005728 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005716:	4b07      	ldr	r3, [pc, #28]	; (8005734 <xTimerGenericCommand+0x98>)
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	f107 0110 	add.w	r1, r7, #16
 800571e:	2300      	movs	r3, #0
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	f7fe fd8b 	bl	800423c <xQueueGenericSendFromISR>
 8005726:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800572a:	4618      	mov	r0, r3
 800572c:	3728      	adds	r7, #40	; 0x28
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000d24 	.word	0x20000d24

08005738 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005742:	4b22      	ldr	r3, [pc, #136]	; (80057cc <prvProcessExpiredTimer+0x94>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	3304      	adds	r3, #4
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe fb47 	bl	8003de4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d022      	beq.n	80057aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	18d1      	adds	r1, r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	6978      	ldr	r0, [r7, #20]
 8005772:	f000 f8d1 	bl	8005918 <prvInsertTimerInActiveList>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01f      	beq.n	80057bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800577c:	2300      	movs	r3, #0
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	2300      	movs	r3, #0
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	2100      	movs	r1, #0
 8005786:	6978      	ldr	r0, [r7, #20]
 8005788:	f7ff ff88 	bl	800569c <xTimerGenericCommand>
 800578c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d113      	bne.n	80057bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	60fb      	str	r3, [r7, #12]
}
 80057a6:	bf00      	nop
 80057a8:	e7fe      	b.n	80057a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	6978      	ldr	r0, [r7, #20]
 80057c2:	4798      	blx	r3
}
 80057c4:	bf00      	nop
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20000d1c 	.word	0x20000d1c

080057d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057d8:	f107 0308 	add.w	r3, r7, #8
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f857 	bl	8005890 <prvGetNextExpireTime>
 80057e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4619      	mov	r1, r3
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f803 	bl	80057f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80057ee:	f000 f8d5 	bl	800599c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057f2:	e7f1      	b.n	80057d8 <prvTimerTask+0x8>

080057f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80057fe:	f7ff fa43 	bl	8004c88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005802:	f107 0308 	add.w	r3, r7, #8
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f866 	bl	80058d8 <prvSampleTimeNow>
 800580c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d130      	bne.n	8005876 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10a      	bne.n	8005830 <prvProcessTimerOrBlockTask+0x3c>
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	429a      	cmp	r2, r3
 8005820:	d806      	bhi.n	8005830 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005822:	f7ff fa3f 	bl	8004ca4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005826:	68f9      	ldr	r1, [r7, #12]
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ff85 	bl	8005738 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800582e:	e024      	b.n	800587a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005836:	4b13      	ldr	r3, [pc, #76]	; (8005884 <prvProcessTimerOrBlockTask+0x90>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <prvProcessTimerOrBlockTask+0x50>
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <prvProcessTimerOrBlockTask+0x52>
 8005844:	2300      	movs	r3, #0
 8005846:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005848:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <prvProcessTimerOrBlockTask+0x94>)
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	4619      	mov	r1, r3
 8005856:	f7fe ffa7 	bl	80047a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800585a:	f7ff fa23 	bl	8004ca4 <xTaskResumeAll>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005864:	4b09      	ldr	r3, [pc, #36]	; (800588c <prvProcessTimerOrBlockTask+0x98>)
 8005866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	f3bf 8f6f 	isb	sy
}
 8005874:	e001      	b.n	800587a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005876:	f7ff fa15 	bl	8004ca4 <xTaskResumeAll>
}
 800587a:	bf00      	nop
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000d20 	.word	0x20000d20
 8005888:	20000d24 	.word	0x20000d24
 800588c:	e000ed04 	.word	0xe000ed04

08005890 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005898:	4b0e      	ldr	r3, [pc, #56]	; (80058d4 <prvGetNextExpireTime+0x44>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <prvGetNextExpireTime+0x16>
 80058a2:	2201      	movs	r2, #1
 80058a4:	e000      	b.n	80058a8 <prvGetNextExpireTime+0x18>
 80058a6:	2200      	movs	r2, #0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d105      	bne.n	80058c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058b4:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <prvGetNextExpireTime+0x44>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e001      	b.n	80058c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058c4:	68fb      	ldr	r3, [r7, #12]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000d1c 	.word	0x20000d1c

080058d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80058e0:	f7ff fa7e 	bl	8004de0 <xTaskGetTickCount>
 80058e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80058e6:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <prvSampleTimeNow+0x3c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d205      	bcs.n	80058fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80058f0:	f000 f936 	bl	8005b60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e002      	b.n	8005902 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005902:	4a04      	ldr	r2, [pc, #16]	; (8005914 <prvSampleTimeNow+0x3c>)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005908:	68fb      	ldr	r3, [r7, #12]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000d2c 	.word	0x20000d2c

08005918 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	429a      	cmp	r2, r3
 800593c:	d812      	bhi.n	8005964 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	1ad2      	subs	r2, r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	429a      	cmp	r2, r3
 800594a:	d302      	bcc.n	8005952 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800594c:	2301      	movs	r3, #1
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	e01b      	b.n	800598a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <prvInsertTimerInActiveList+0x7c>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3304      	adds	r3, #4
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f7fe fa08 	bl	8003d72 <vListInsert>
 8005962:	e012      	b.n	800598a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d206      	bcs.n	800597a <prvInsertTimerInActiveList+0x62>
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d302      	bcc.n	800597a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005974:	2301      	movs	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e007      	b.n	800598a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800597a:	4b07      	ldr	r3, [pc, #28]	; (8005998 <prvInsertTimerInActiveList+0x80>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3304      	adds	r3, #4
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f7fe f9f4 	bl	8003d72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800598a:	697b      	ldr	r3, [r7, #20]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000d20 	.word	0x20000d20
 8005998:	20000d1c 	.word	0x20000d1c

0800599c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08e      	sub	sp, #56	; 0x38
 80059a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059a2:	e0ca      	b.n	8005b3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	da18      	bge.n	80059dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059aa:	1d3b      	adds	r3, r7, #4
 80059ac:	3304      	adds	r3, #4
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	61fb      	str	r3, [r7, #28]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d2:	6850      	ldr	r0, [r2, #4]
 80059d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d6:	6892      	ldr	r2, [r2, #8]
 80059d8:	4611      	mov	r1, r2
 80059da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f2c0 80aa 	blt.w	8005b38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d004      	beq.n	80059fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	3304      	adds	r3, #4
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe f9f5 	bl	8003de4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059fa:	463b      	mov	r3, r7
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff ff6b 	bl	80058d8 <prvSampleTimeNow>
 8005a02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b09      	cmp	r3, #9
 8005a08:	f200 8097 	bhi.w	8005b3a <prvProcessReceivedCommands+0x19e>
 8005a0c:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <prvProcessReceivedCommands+0x78>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a3d 	.word	0x08005a3d
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a3d 	.word	0x08005a3d
 8005a20:	08005ab1 	.word	0x08005ab1
 8005a24:	08005ac5 	.word	0x08005ac5
 8005a28:	08005b0f 	.word	0x08005b0f
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a3d 	.word	0x08005a3d
 8005a34:	08005ab1 	.word	0x08005ab1
 8005a38:	08005ac5 	.word	0x08005ac5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a42:	f043 0301 	orr.w	r3, r3, #1
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	18d1      	adds	r1, r2, r3
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a5c:	f7ff ff5c 	bl	8005918 <prvInsertTimerInActiveList>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d069      	beq.n	8005b3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d05e      	beq.n	8005b3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	441a      	add	r2, r3
 8005a84:	2300      	movs	r3, #0
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a8e:	f7ff fe05 	bl	800569c <xTimerGenericCommand>
 8005a92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d14f      	bne.n	8005b3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	61bb      	str	r3, [r7, #24]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005ac2:	e03a      	b.n	8005b3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	617b      	str	r3, [r7, #20]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	18d1      	adds	r1, r2, r3
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b08:	f7ff ff06 	bl	8005918 <prvInsertTimerInActiveList>
					break;
 8005b0c:	e015      	b.n	8005b3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d103      	bne.n	8005b24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1e:	f000 fbdf 	bl	80062e0 <vPortFree>
 8005b22:	e00a      	b.n	8005b3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b2a:	f023 0301 	bic.w	r3, r3, #1
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b36:	e000      	b.n	8005b3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005b38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b3a:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <prvProcessReceivedCommands+0x1c0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	1d39      	adds	r1, r7, #4
 8005b40:	2200      	movs	r2, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fc16 	bl	8004374 <xQueueReceive>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f47f af2a 	bne.w	80059a4 <prvProcessReceivedCommands+0x8>
	}
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	3730      	adds	r7, #48	; 0x30
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000d24 	.word	0x20000d24

08005b60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b66:	e048      	b.n	8005bfa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b68:	4b2d      	ldr	r3, [pc, #180]	; (8005c20 <prvSwitchTimerLists+0xc0>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b72:	4b2b      	ldr	r3, [pc, #172]	; (8005c20 <prvSwitchTimerLists+0xc0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe f92f 	bl	8003de4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02e      	beq.n	8005bfa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d90e      	bls.n	8005bcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bba:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <prvSwitchTimerLists+0xc0>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f7fe f8d4 	bl	8003d72 <vListInsert>
 8005bca:	e016      	b.n	8005bfa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7ff fd60 	bl	800569c <xTimerGenericCommand>
 8005bdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	603b      	str	r3, [r7, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <prvSwitchTimerLists+0xc0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1b1      	bne.n	8005b68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <prvSwitchTimerLists+0xc0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c0a:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <prvSwitchTimerLists+0xc4>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a04      	ldr	r2, [pc, #16]	; (8005c20 <prvSwitchTimerLists+0xc0>)
 8005c10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c12:	4a04      	ldr	r2, [pc, #16]	; (8005c24 <prvSwitchTimerLists+0xc4>)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	6013      	str	r3, [r2, #0]
}
 8005c18:	bf00      	nop
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000d1c 	.word	0x20000d1c
 8005c24:	20000d20 	.word	0x20000d20

08005c28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c2e:	f000 f969 	bl	8005f04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c32:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <prvCheckForValidListAndQueue+0x60>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d120      	bne.n	8005c7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c3a:	4814      	ldr	r0, [pc, #80]	; (8005c8c <prvCheckForValidListAndQueue+0x64>)
 8005c3c:	f7fe f848 	bl	8003cd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c40:	4813      	ldr	r0, [pc, #76]	; (8005c90 <prvCheckForValidListAndQueue+0x68>)
 8005c42:	f7fe f845 	bl	8003cd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c46:	4b13      	ldr	r3, [pc, #76]	; (8005c94 <prvCheckForValidListAndQueue+0x6c>)
 8005c48:	4a10      	ldr	r2, [pc, #64]	; (8005c8c <prvCheckForValidListAndQueue+0x64>)
 8005c4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c4c:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <prvCheckForValidListAndQueue+0x70>)
 8005c4e:	4a10      	ldr	r2, [pc, #64]	; (8005c90 <prvCheckForValidListAndQueue+0x68>)
 8005c50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c52:	2300      	movs	r3, #0
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <prvCheckForValidListAndQueue+0x74>)
 8005c58:	4a11      	ldr	r2, [pc, #68]	; (8005ca0 <prvCheckForValidListAndQueue+0x78>)
 8005c5a:	2110      	movs	r1, #16
 8005c5c:	200a      	movs	r0, #10
 8005c5e:	f7fe f953 	bl	8003f08 <xQueueGenericCreateStatic>
 8005c62:	4603      	mov	r3, r0
 8005c64:	4a08      	ldr	r2, [pc, #32]	; (8005c88 <prvCheckForValidListAndQueue+0x60>)
 8005c66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c68:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <prvCheckForValidListAndQueue+0x60>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <prvCheckForValidListAndQueue+0x60>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	490b      	ldr	r1, [pc, #44]	; (8005ca4 <prvCheckForValidListAndQueue+0x7c>)
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe fd6c 	bl	8004754 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c7c:	f000 f972 	bl	8005f64 <vPortExitCritical>
}
 8005c80:	bf00      	nop
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000d24 	.word	0x20000d24
 8005c8c:	20000cf4 	.word	0x20000cf4
 8005c90:	20000d08 	.word	0x20000d08
 8005c94:	20000d1c 	.word	0x20000d1c
 8005c98:	20000d20 	.word	0x20000d20
 8005c9c:	20000dd0 	.word	0x20000dd0
 8005ca0:	20000d30 	.word	0x20000d30
 8005ca4:	0800695c 	.word	0x0800695c

08005ca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3b04      	subs	r3, #4
 8005cb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3b04      	subs	r3, #4
 8005cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f023 0201 	bic.w	r2, r3, #1
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3b04      	subs	r3, #4
 8005cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cd8:	4a0c      	ldr	r2, [pc, #48]	; (8005d0c <pxPortInitialiseStack+0x64>)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3b14      	subs	r3, #20
 8005ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3b04      	subs	r3, #4
 8005cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f06f 0202 	mvn.w	r2, #2
 8005cf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3b20      	subs	r3, #32
 8005cfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	08005d11 	.word	0x08005d11

08005d10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d1a:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <prvTaskExitError+0x54>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d22:	d00a      	beq.n	8005d3a <prvTaskExitError+0x2a>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	60fb      	str	r3, [r7, #12]
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <prvTaskExitError+0x28>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	60bb      	str	r3, [r7, #8]
}
 8005d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d4e:	bf00      	nop
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0fc      	beq.n	8005d50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	2000000c 	.word	0x2000000c
	...

08005d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d70:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <pxCurrentTCBConst2>)
 8005d72:	6819      	ldr	r1, [r3, #0]
 8005d74:	6808      	ldr	r0, [r1, #0]
 8005d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	f380 8809 	msr	PSP, r0
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f04f 0000 	mov.w	r0, #0
 8005d86:	f380 8811 	msr	BASEPRI, r0
 8005d8a:	4770      	bx	lr
 8005d8c:	f3af 8000 	nop.w

08005d90 <pxCurrentTCBConst2>:
 8005d90:	200007f4 	.word	0x200007f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop

08005d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d98:	4808      	ldr	r0, [pc, #32]	; (8005dbc <prvPortStartFirstTask+0x24>)
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	6800      	ldr	r0, [r0, #0]
 8005d9e:	f380 8808 	msr	MSP, r0
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f380 8814 	msr	CONTROL, r0
 8005daa:	b662      	cpsie	i
 8005dac:	b661      	cpsie	f
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	df00      	svc	0
 8005db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dba:	bf00      	nop
 8005dbc:	e000ed08 	.word	0xe000ed08

08005dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005dc6:	4b46      	ldr	r3, [pc, #280]	; (8005ee0 <xPortStartScheduler+0x120>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a46      	ldr	r2, [pc, #280]	; (8005ee4 <xPortStartScheduler+0x124>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10a      	bne.n	8005de6 <xPortStartScheduler+0x26>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	613b      	str	r3, [r7, #16]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005de6:	4b3e      	ldr	r3, [pc, #248]	; (8005ee0 <xPortStartScheduler+0x120>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a3f      	ldr	r2, [pc, #252]	; (8005ee8 <xPortStartScheduler+0x128>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10a      	bne.n	8005e06 <xPortStartScheduler+0x46>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	60fb      	str	r3, [r7, #12]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e06:	4b39      	ldr	r3, [pc, #228]	; (8005eec <xPortStartScheduler+0x12c>)
 8005e08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	22ff      	movs	r2, #255	; 0xff
 8005e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	4b31      	ldr	r3, [pc, #196]	; (8005ef0 <xPortStartScheduler+0x130>)
 8005e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e2e:	4b31      	ldr	r3, [pc, #196]	; (8005ef4 <xPortStartScheduler+0x134>)
 8005e30:	2207      	movs	r2, #7
 8005e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e34:	e009      	b.n	8005e4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e36:	4b2f      	ldr	r3, [pc, #188]	; (8005ef4 <xPortStartScheduler+0x134>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	4a2d      	ldr	r2, [pc, #180]	; (8005ef4 <xPortStartScheduler+0x134>)
 8005e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e52:	2b80      	cmp	r3, #128	; 0x80
 8005e54:	d0ef      	beq.n	8005e36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e56:	4b27      	ldr	r3, [pc, #156]	; (8005ef4 <xPortStartScheduler+0x134>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f1c3 0307 	rsb	r3, r3, #7
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d00a      	beq.n	8005e78 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	60bb      	str	r3, [r7, #8]
}
 8005e74:	bf00      	nop
 8005e76:	e7fe      	b.n	8005e76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e78:	4b1e      	ldr	r3, [pc, #120]	; (8005ef4 <xPortStartScheduler+0x134>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <xPortStartScheduler+0x134>)
 8005e80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e82:	4b1c      	ldr	r3, [pc, #112]	; (8005ef4 <xPortStartScheduler+0x134>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <xPortStartScheduler+0x134>)
 8005e8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e96:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <xPortStartScheduler+0x138>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <xPortStartScheduler+0x138>)
 8005e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ea2:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <xPortStartScheduler+0x138>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a14      	ldr	r2, [pc, #80]	; (8005ef8 <xPortStartScheduler+0x138>)
 8005ea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005eac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005eae:	f000 f8dd 	bl	800606c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005eb2:	4b12      	ldr	r3, [pc, #72]	; (8005efc <xPortStartScheduler+0x13c>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005eb8:	f000 f8fc 	bl	80060b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ebc:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <xPortStartScheduler+0x140>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a0f      	ldr	r2, [pc, #60]	; (8005f00 <xPortStartScheduler+0x140>)
 8005ec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ec8:	f7ff ff66 	bl	8005d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ecc:	f7ff f852 	bl	8004f74 <vTaskSwitchContext>
	prvTaskExitError();
 8005ed0:	f7ff ff1e 	bl	8005d10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	e000ed00 	.word	0xe000ed00
 8005ee4:	410fc271 	.word	0x410fc271
 8005ee8:	410fc270 	.word	0x410fc270
 8005eec:	e000e400 	.word	0xe000e400
 8005ef0:	20000e20 	.word	0x20000e20
 8005ef4:	20000e24 	.word	0x20000e24
 8005ef8:	e000ed20 	.word	0xe000ed20
 8005efc:	2000000c 	.word	0x2000000c
 8005f00:	e000ef34 	.word	0xe000ef34

08005f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	607b      	str	r3, [r7, #4]
}
 8005f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <vPortEnterCritical+0x58>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3301      	adds	r3, #1
 8005f24:	4a0d      	ldr	r2, [pc, #52]	; (8005f5c <vPortEnterCritical+0x58>)
 8005f26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f28:	4b0c      	ldr	r3, [pc, #48]	; (8005f5c <vPortEnterCritical+0x58>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d10f      	bne.n	8005f50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f30:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <vPortEnterCritical+0x5c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	603b      	str	r3, [r7, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <vPortEnterCritical+0x4a>
	}
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	2000000c 	.word	0x2000000c
 8005f60:	e000ed04 	.word	0xe000ed04

08005f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f6a:	4b12      	ldr	r3, [pc, #72]	; (8005fb4 <vPortExitCritical+0x50>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10a      	bne.n	8005f88 <vPortExitCritical+0x24>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	607b      	str	r3, [r7, #4]
}
 8005f84:	bf00      	nop
 8005f86:	e7fe      	b.n	8005f86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f88:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <vPortExitCritical+0x50>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <vPortExitCritical+0x50>)
 8005f90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <vPortExitCritical+0x50>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d105      	bne.n	8005fa6 <vPortExitCritical+0x42>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	f383 8811 	msr	BASEPRI, r3
}
 8005fa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	2000000c 	.word	0x2000000c
	...

08005fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fc0:	f3ef 8009 	mrs	r0, PSP
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	4b15      	ldr	r3, [pc, #84]	; (8006020 <pxCurrentTCBConst>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	f01e 0f10 	tst.w	lr, #16
 8005fd0:	bf08      	it	eq
 8005fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fda:	6010      	str	r0, [r2, #0]
 8005fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fe4:	f380 8811 	msr	BASEPRI, r0
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f7fe ffc0 	bl	8004f74 <vTaskSwitchContext>
 8005ff4:	f04f 0000 	mov.w	r0, #0
 8005ff8:	f380 8811 	msr	BASEPRI, r0
 8005ffc:	bc09      	pop	{r0, r3}
 8005ffe:	6819      	ldr	r1, [r3, #0]
 8006000:	6808      	ldr	r0, [r1, #0]
 8006002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006006:	f01e 0f10 	tst.w	lr, #16
 800600a:	bf08      	it	eq
 800600c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006010:	f380 8809 	msr	PSP, r0
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	f3af 8000 	nop.w

08006020 <pxCurrentTCBConst>:
 8006020:	200007f4 	.word	0x200007f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop

08006028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	607b      	str	r3, [r7, #4]
}
 8006040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006042:	f7fe fedd 	bl	8004e00 <xTaskIncrementTick>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800604c:	4b06      	ldr	r3, [pc, #24]	; (8006068 <xPortSysTickHandler+0x40>)
 800604e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	2300      	movs	r3, #0
 8006056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f383 8811 	msr	BASEPRI, r3
}
 800605e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <vPortSetupTimerInterrupt+0x34>)
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006076:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <vPortSetupTimerInterrupt+0x38>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800607c:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <vPortSetupTimerInterrupt+0x3c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <vPortSetupTimerInterrupt+0x40>)
 8006082:	fba2 2303 	umull	r2, r3, r2, r3
 8006086:	099b      	lsrs	r3, r3, #6
 8006088:	4a09      	ldr	r2, [pc, #36]	; (80060b0 <vPortSetupTimerInterrupt+0x44>)
 800608a:	3b01      	subs	r3, #1
 800608c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800608e:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <vPortSetupTimerInterrupt+0x34>)
 8006090:	2207      	movs	r2, #7
 8006092:	601a      	str	r2, [r3, #0]
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	e000e010 	.word	0xe000e010
 80060a4:	e000e018 	.word	0xe000e018
 80060a8:	20000000 	.word	0x20000000
 80060ac:	10624dd3 	.word	0x10624dd3
 80060b0:	e000e014 	.word	0xe000e014

080060b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060c4 <vPortEnableVFP+0x10>
 80060b8:	6801      	ldr	r1, [r0, #0]
 80060ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060be:	6001      	str	r1, [r0, #0]
 80060c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060c2:	bf00      	nop
 80060c4:	e000ed88 	.word	0xe000ed88

080060c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ce:	f3ef 8305 	mrs	r3, IPSR
 80060d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b0f      	cmp	r3, #15
 80060d8:	d914      	bls.n	8006104 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060da:	4a17      	ldr	r2, [pc, #92]	; (8006138 <vPortValidateInterruptPriority+0x70>)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4413      	add	r3, r2
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060e4:	4b15      	ldr	r3, [pc, #84]	; (800613c <vPortValidateInterruptPriority+0x74>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	7afa      	ldrb	r2, [r7, #11]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d20a      	bcs.n	8006104 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	607b      	str	r3, [r7, #4]
}
 8006100:	bf00      	nop
 8006102:	e7fe      	b.n	8006102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006104:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <vPortValidateInterruptPriority+0x78>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800610c:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <vPortValidateInterruptPriority+0x7c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d90a      	bls.n	800612a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	603b      	str	r3, [r7, #0]
}
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <vPortValidateInterruptPriority+0x60>
	}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	e000e3f0 	.word	0xe000e3f0
 800613c:	20000e20 	.word	0x20000e20
 8006140:	e000ed0c 	.word	0xe000ed0c
 8006144:	20000e24 	.word	0x20000e24

08006148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006150:	2300      	movs	r3, #0
 8006152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006154:	f7fe fd98 	bl	8004c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006158:	4b5b      	ldr	r3, [pc, #364]	; (80062c8 <pvPortMalloc+0x180>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006160:	f000 f920 	bl	80063a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006164:	4b59      	ldr	r3, [pc, #356]	; (80062cc <pvPortMalloc+0x184>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4013      	ands	r3, r2
 800616c:	2b00      	cmp	r3, #0
 800616e:	f040 8093 	bne.w	8006298 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01d      	beq.n	80061b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006178:	2208      	movs	r2, #8
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	2b00      	cmp	r3, #0
 8006188:	d014      	beq.n	80061b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f023 0307 	bic.w	r3, r3, #7
 8006190:	3308      	adds	r3, #8
 8006192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <pvPortMalloc+0x6c>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	617b      	str	r3, [r7, #20]
}
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d06e      	beq.n	8006298 <pvPortMalloc+0x150>
 80061ba:	4b45      	ldr	r3, [pc, #276]	; (80062d0 <pvPortMalloc+0x188>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d869      	bhi.n	8006298 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061c4:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <pvPortMalloc+0x18c>)
 80061c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061c8:	4b42      	ldr	r3, [pc, #264]	; (80062d4 <pvPortMalloc+0x18c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ce:	e004      	b.n	80061da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d903      	bls.n	80061ec <pvPortMalloc+0xa4>
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f1      	bne.n	80061d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061ec:	4b36      	ldr	r3, [pc, #216]	; (80062c8 <pvPortMalloc+0x180>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d050      	beq.n	8006298 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2208      	movs	r2, #8
 80061fc:	4413      	add	r3, r2
 80061fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	1ad2      	subs	r2, r2, r3
 8006210:	2308      	movs	r3, #8
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	429a      	cmp	r2, r3
 8006216:	d91f      	bls.n	8006258 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4413      	add	r3, r2
 800621e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <pvPortMalloc+0xf8>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	613b      	str	r3, [r7, #16]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	1ad2      	subs	r2, r2, r3
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006252:	69b8      	ldr	r0, [r7, #24]
 8006254:	f000 f908 	bl	8006468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006258:	4b1d      	ldr	r3, [pc, #116]	; (80062d0 <pvPortMalloc+0x188>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	4a1b      	ldr	r2, [pc, #108]	; (80062d0 <pvPortMalloc+0x188>)
 8006264:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006266:	4b1a      	ldr	r3, [pc, #104]	; (80062d0 <pvPortMalloc+0x188>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <pvPortMalloc+0x190>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d203      	bcs.n	800627a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006272:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <pvPortMalloc+0x188>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <pvPortMalloc+0x190>)
 8006278:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	4b13      	ldr	r3, [pc, #76]	; (80062cc <pvPortMalloc+0x184>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	431a      	orrs	r2, r3
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800628e:	4b13      	ldr	r3, [pc, #76]	; (80062dc <pvPortMalloc+0x194>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3301      	adds	r3, #1
 8006294:	4a11      	ldr	r2, [pc, #68]	; (80062dc <pvPortMalloc+0x194>)
 8006296:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006298:	f7fe fd04 	bl	8004ca4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <pvPortMalloc+0x174>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	60fb      	str	r3, [r7, #12]
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <pvPortMalloc+0x172>
	return pvReturn;
 80062bc:	69fb      	ldr	r3, [r7, #28]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3728      	adds	r7, #40	; 0x28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200019e8 	.word	0x200019e8
 80062cc:	200019fc 	.word	0x200019fc
 80062d0:	200019ec 	.word	0x200019ec
 80062d4:	200019e0 	.word	0x200019e0
 80062d8:	200019f0 	.word	0x200019f0
 80062dc:	200019f4 	.word	0x200019f4

080062e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d04d      	beq.n	800638e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062f2:	2308      	movs	r3, #8
 80062f4:	425b      	negs	r3, r3
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4413      	add	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	4b24      	ldr	r3, [pc, #144]	; (8006398 <vPortFree+0xb8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4013      	ands	r3, r2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <vPortFree+0x44>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	60fb      	str	r3, [r7, #12]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <vPortFree+0x62>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	60bb      	str	r3, [r7, #8]
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	4b14      	ldr	r3, [pc, #80]	; (8006398 <vPortFree+0xb8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01e      	beq.n	800638e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d11a      	bne.n	800638e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	4b0e      	ldr	r3, [pc, #56]	; (8006398 <vPortFree+0xb8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	43db      	mvns	r3, r3
 8006362:	401a      	ands	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006368:	f7fe fc8e 	bl	8004c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	4b0a      	ldr	r3, [pc, #40]	; (800639c <vPortFree+0xbc>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4413      	add	r3, r2
 8006376:	4a09      	ldr	r2, [pc, #36]	; (800639c <vPortFree+0xbc>)
 8006378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800637a:	6938      	ldr	r0, [r7, #16]
 800637c:	f000 f874 	bl	8006468 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006380:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <vPortFree+0xc0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3301      	adds	r3, #1
 8006386:	4a06      	ldr	r2, [pc, #24]	; (80063a0 <vPortFree+0xc0>)
 8006388:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800638a:	f7fe fc8b 	bl	8004ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800638e:	bf00      	nop
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	200019fc 	.word	0x200019fc
 800639c:	200019ec 	.word	0x200019ec
 80063a0:	200019f8 	.word	0x200019f8

080063a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80063ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063b0:	4b27      	ldr	r3, [pc, #156]	; (8006450 <prvHeapInit+0xac>)
 80063b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00c      	beq.n	80063d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3307      	adds	r3, #7
 80063c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0307 	bic.w	r3, r3, #7
 80063ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	4a1f      	ldr	r2, [pc, #124]	; (8006450 <prvHeapInit+0xac>)
 80063d4:	4413      	add	r3, r2
 80063d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063dc:	4a1d      	ldr	r2, [pc, #116]	; (8006454 <prvHeapInit+0xb0>)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063e2:	4b1c      	ldr	r3, [pc, #112]	; (8006454 <prvHeapInit+0xb0>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	4413      	add	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063f0:	2208      	movs	r2, #8
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1a9b      	subs	r3, r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0307 	bic.w	r3, r3, #7
 80063fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a15      	ldr	r2, [pc, #84]	; (8006458 <prvHeapInit+0xb4>)
 8006404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006406:	4b14      	ldr	r3, [pc, #80]	; (8006458 <prvHeapInit+0xb4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2200      	movs	r2, #0
 800640c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800640e:	4b12      	ldr	r3, [pc, #72]	; (8006458 <prvHeapInit+0xb4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006424:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <prvHeapInit+0xb4>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	4a0a      	ldr	r2, [pc, #40]	; (800645c <prvHeapInit+0xb8>)
 8006432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4a09      	ldr	r2, [pc, #36]	; (8006460 <prvHeapInit+0xbc>)
 800643a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800643c:	4b09      	ldr	r3, [pc, #36]	; (8006464 <prvHeapInit+0xc0>)
 800643e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006442:	601a      	str	r2, [r3, #0]
}
 8006444:	bf00      	nop
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	20000e28 	.word	0x20000e28
 8006454:	200019e0 	.word	0x200019e0
 8006458:	200019e8 	.word	0x200019e8
 800645c:	200019f0 	.word	0x200019f0
 8006460:	200019ec 	.word	0x200019ec
 8006464:	200019fc 	.word	0x200019fc

08006468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006470:	4b28      	ldr	r3, [pc, #160]	; (8006514 <prvInsertBlockIntoFreeList+0xac>)
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e002      	b.n	800647c <prvInsertBlockIntoFreeList+0x14>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	429a      	cmp	r2, r3
 8006484:	d8f7      	bhi.n	8006476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	4413      	add	r3, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	429a      	cmp	r2, r3
 8006496:	d108      	bne.n	80064aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	441a      	add	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	441a      	add	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d118      	bne.n	80064f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b15      	ldr	r3, [pc, #84]	; (8006518 <prvInsertBlockIntoFreeList+0xb0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d00d      	beq.n	80064e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	441a      	add	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	e008      	b.n	80064f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064e6:	4b0c      	ldr	r3, [pc, #48]	; (8006518 <prvInsertBlockIntoFreeList+0xb0>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e003      	b.n	80064f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d002      	beq.n	8006506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006506:	bf00      	nop
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	200019e0 	.word	0x200019e0
 8006518:	200019e8 	.word	0x200019e8

0800651c <_ZdlPvj>:
 800651c:	f000 b812 	b.w	8006544 <_ZdlPv>

08006520 <__cxa_guard_acquire>:
 8006520:	6803      	ldr	r3, [r0, #0]
 8006522:	07db      	lsls	r3, r3, #31
 8006524:	d406      	bmi.n	8006534 <__cxa_guard_acquire+0x14>
 8006526:	7843      	ldrb	r3, [r0, #1]
 8006528:	b103      	cbz	r3, 800652c <__cxa_guard_acquire+0xc>
 800652a:	deff      	udf	#255	; 0xff
 800652c:	2301      	movs	r3, #1
 800652e:	7043      	strb	r3, [r0, #1]
 8006530:	4618      	mov	r0, r3
 8006532:	4770      	bx	lr
 8006534:	2000      	movs	r0, #0
 8006536:	4770      	bx	lr

08006538 <__cxa_guard_release>:
 8006538:	2301      	movs	r3, #1
 800653a:	6003      	str	r3, [r0, #0]
 800653c:	4770      	bx	lr

0800653e <__cxa_pure_virtual>:
 800653e:	b508      	push	{r3, lr}
 8006540:	f000 f80e 	bl	8006560 <_ZSt9terminatev>

08006544 <_ZdlPv>:
 8006544:	f000 b850 	b.w	80065e8 <free>

08006548 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006548:	b508      	push	{r3, lr}
 800654a:	4780      	blx	r0
 800654c:	f000 f80d 	bl	800656a <abort>

08006550 <_ZSt13get_terminatev>:
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <_ZSt13get_terminatev+0xc>)
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	f3bf 8f5b 	dmb	ish
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20000010 	.word	0x20000010

08006560 <_ZSt9terminatev>:
 8006560:	b508      	push	{r3, lr}
 8006562:	f7ff fff5 	bl	8006550 <_ZSt13get_terminatev>
 8006566:	f7ff ffef 	bl	8006548 <_ZN10__cxxabiv111__terminateEPFvvE>

0800656a <abort>:
 800656a:	b508      	push	{r3, lr}
 800656c:	2006      	movs	r0, #6
 800656e:	f000 f93b 	bl	80067e8 <raise>
 8006572:	2001      	movs	r0, #1
 8006574:	f7fa fa68 	bl	8000a48 <_exit>

08006578 <atexit>:
 8006578:	2300      	movs	r3, #0
 800657a:	4601      	mov	r1, r0
 800657c:	461a      	mov	r2, r3
 800657e:	4618      	mov	r0, r3
 8006580:	f000 b94e 	b.w	8006820 <__register_exitproc>

08006584 <__errno>:
 8006584:	4b01      	ldr	r3, [pc, #4]	; (800658c <__errno+0x8>)
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20000014 	.word	0x20000014

08006590 <__libc_init_array>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	4d0d      	ldr	r5, [pc, #52]	; (80065c8 <__libc_init_array+0x38>)
 8006594:	4c0d      	ldr	r4, [pc, #52]	; (80065cc <__libc_init_array+0x3c>)
 8006596:	1b64      	subs	r4, r4, r5
 8006598:	10a4      	asrs	r4, r4, #2
 800659a:	2600      	movs	r6, #0
 800659c:	42a6      	cmp	r6, r4
 800659e:	d109      	bne.n	80065b4 <__libc_init_array+0x24>
 80065a0:	4d0b      	ldr	r5, [pc, #44]	; (80065d0 <__libc_init_array+0x40>)
 80065a2:	4c0c      	ldr	r4, [pc, #48]	; (80065d4 <__libc_init_array+0x44>)
 80065a4:	f000 f9ae 	bl	8006904 <_init>
 80065a8:	1b64      	subs	r4, r4, r5
 80065aa:	10a4      	asrs	r4, r4, #2
 80065ac:	2600      	movs	r6, #0
 80065ae:	42a6      	cmp	r6, r4
 80065b0:	d105      	bne.n	80065be <__libc_init_array+0x2e>
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b8:	4798      	blx	r3
 80065ba:	3601      	adds	r6, #1
 80065bc:	e7ee      	b.n	800659c <__libc_init_array+0xc>
 80065be:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c2:	4798      	blx	r3
 80065c4:	3601      	adds	r6, #1
 80065c6:	e7f2      	b.n	80065ae <__libc_init_array+0x1e>
 80065c8:	08006a28 	.word	0x08006a28
 80065cc:	08006a28 	.word	0x08006a28
 80065d0:	08006a28 	.word	0x08006a28
 80065d4:	08006a30 	.word	0x08006a30

080065d8 <malloc>:
 80065d8:	4b02      	ldr	r3, [pc, #8]	; (80065e4 <malloc+0xc>)
 80065da:	4601      	mov	r1, r0
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f000 b871 	b.w	80066c4 <_malloc_r>
 80065e2:	bf00      	nop
 80065e4:	20000014 	.word	0x20000014

080065e8 <free>:
 80065e8:	4b02      	ldr	r3, [pc, #8]	; (80065f4 <free+0xc>)
 80065ea:	4601      	mov	r1, r0
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	f000 b819 	b.w	8006624 <_free_r>
 80065f2:	bf00      	nop
 80065f4:	20000014 	.word	0x20000014

080065f8 <memcpy>:
 80065f8:	440a      	add	r2, r1
 80065fa:	4291      	cmp	r1, r2
 80065fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006600:	d100      	bne.n	8006604 <memcpy+0xc>
 8006602:	4770      	bx	lr
 8006604:	b510      	push	{r4, lr}
 8006606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800660e:	4291      	cmp	r1, r2
 8006610:	d1f9      	bne.n	8006606 <memcpy+0xe>
 8006612:	bd10      	pop	{r4, pc}

08006614 <memset>:
 8006614:	4402      	add	r2, r0
 8006616:	4603      	mov	r3, r0
 8006618:	4293      	cmp	r3, r2
 800661a:	d100      	bne.n	800661e <memset+0xa>
 800661c:	4770      	bx	lr
 800661e:	f803 1b01 	strb.w	r1, [r3], #1
 8006622:	e7f9      	b.n	8006618 <memset+0x4>

08006624 <_free_r>:
 8006624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006626:	2900      	cmp	r1, #0
 8006628:	d048      	beq.n	80066bc <_free_r+0x98>
 800662a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800662e:	9001      	str	r0, [sp, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f1a1 0404 	sub.w	r4, r1, #4
 8006636:	bfb8      	it	lt
 8006638:	18e4      	addlt	r4, r4, r3
 800663a:	f000 f957 	bl	80068ec <__malloc_lock>
 800663e:	4a20      	ldr	r2, [pc, #128]	; (80066c0 <_free_r+0x9c>)
 8006640:	9801      	ldr	r0, [sp, #4]
 8006642:	6813      	ldr	r3, [r2, #0]
 8006644:	4615      	mov	r5, r2
 8006646:	b933      	cbnz	r3, 8006656 <_free_r+0x32>
 8006648:	6063      	str	r3, [r4, #4]
 800664a:	6014      	str	r4, [r2, #0]
 800664c:	b003      	add	sp, #12
 800664e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006652:	f000 b951 	b.w	80068f8 <__malloc_unlock>
 8006656:	42a3      	cmp	r3, r4
 8006658:	d90b      	bls.n	8006672 <_free_r+0x4e>
 800665a:	6821      	ldr	r1, [r4, #0]
 800665c:	1862      	adds	r2, r4, r1
 800665e:	4293      	cmp	r3, r2
 8006660:	bf04      	itt	eq
 8006662:	681a      	ldreq	r2, [r3, #0]
 8006664:	685b      	ldreq	r3, [r3, #4]
 8006666:	6063      	str	r3, [r4, #4]
 8006668:	bf04      	itt	eq
 800666a:	1852      	addeq	r2, r2, r1
 800666c:	6022      	streq	r2, [r4, #0]
 800666e:	602c      	str	r4, [r5, #0]
 8006670:	e7ec      	b.n	800664c <_free_r+0x28>
 8006672:	461a      	mov	r2, r3
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	b10b      	cbz	r3, 800667c <_free_r+0x58>
 8006678:	42a3      	cmp	r3, r4
 800667a:	d9fa      	bls.n	8006672 <_free_r+0x4e>
 800667c:	6811      	ldr	r1, [r2, #0]
 800667e:	1855      	adds	r5, r2, r1
 8006680:	42a5      	cmp	r5, r4
 8006682:	d10b      	bne.n	800669c <_free_r+0x78>
 8006684:	6824      	ldr	r4, [r4, #0]
 8006686:	4421      	add	r1, r4
 8006688:	1854      	adds	r4, r2, r1
 800668a:	42a3      	cmp	r3, r4
 800668c:	6011      	str	r1, [r2, #0]
 800668e:	d1dd      	bne.n	800664c <_free_r+0x28>
 8006690:	681c      	ldr	r4, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	6053      	str	r3, [r2, #4]
 8006696:	4421      	add	r1, r4
 8006698:	6011      	str	r1, [r2, #0]
 800669a:	e7d7      	b.n	800664c <_free_r+0x28>
 800669c:	d902      	bls.n	80066a4 <_free_r+0x80>
 800669e:	230c      	movs	r3, #12
 80066a0:	6003      	str	r3, [r0, #0]
 80066a2:	e7d3      	b.n	800664c <_free_r+0x28>
 80066a4:	6825      	ldr	r5, [r4, #0]
 80066a6:	1961      	adds	r1, r4, r5
 80066a8:	428b      	cmp	r3, r1
 80066aa:	bf04      	itt	eq
 80066ac:	6819      	ldreq	r1, [r3, #0]
 80066ae:	685b      	ldreq	r3, [r3, #4]
 80066b0:	6063      	str	r3, [r4, #4]
 80066b2:	bf04      	itt	eq
 80066b4:	1949      	addeq	r1, r1, r5
 80066b6:	6021      	streq	r1, [r4, #0]
 80066b8:	6054      	str	r4, [r2, #4]
 80066ba:	e7c7      	b.n	800664c <_free_r+0x28>
 80066bc:	b003      	add	sp, #12
 80066be:	bd30      	pop	{r4, r5, pc}
 80066c0:	20001a00 	.word	0x20001a00

080066c4 <_malloc_r>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	1ccd      	adds	r5, r1, #3
 80066c8:	f025 0503 	bic.w	r5, r5, #3
 80066cc:	3508      	adds	r5, #8
 80066ce:	2d0c      	cmp	r5, #12
 80066d0:	bf38      	it	cc
 80066d2:	250c      	movcc	r5, #12
 80066d4:	2d00      	cmp	r5, #0
 80066d6:	4606      	mov	r6, r0
 80066d8:	db01      	blt.n	80066de <_malloc_r+0x1a>
 80066da:	42a9      	cmp	r1, r5
 80066dc:	d903      	bls.n	80066e6 <_malloc_r+0x22>
 80066de:	230c      	movs	r3, #12
 80066e0:	6033      	str	r3, [r6, #0]
 80066e2:	2000      	movs	r0, #0
 80066e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e6:	f000 f901 	bl	80068ec <__malloc_lock>
 80066ea:	4921      	ldr	r1, [pc, #132]	; (8006770 <_malloc_r+0xac>)
 80066ec:	680a      	ldr	r2, [r1, #0]
 80066ee:	4614      	mov	r4, r2
 80066f0:	b99c      	cbnz	r4, 800671a <_malloc_r+0x56>
 80066f2:	4f20      	ldr	r7, [pc, #128]	; (8006774 <_malloc_r+0xb0>)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	b923      	cbnz	r3, 8006702 <_malloc_r+0x3e>
 80066f8:	4621      	mov	r1, r4
 80066fa:	4630      	mov	r0, r6
 80066fc:	f000 f83c 	bl	8006778 <_sbrk_r>
 8006700:	6038      	str	r0, [r7, #0]
 8006702:	4629      	mov	r1, r5
 8006704:	4630      	mov	r0, r6
 8006706:	f000 f837 	bl	8006778 <_sbrk_r>
 800670a:	1c43      	adds	r3, r0, #1
 800670c:	d123      	bne.n	8006756 <_malloc_r+0x92>
 800670e:	230c      	movs	r3, #12
 8006710:	6033      	str	r3, [r6, #0]
 8006712:	4630      	mov	r0, r6
 8006714:	f000 f8f0 	bl	80068f8 <__malloc_unlock>
 8006718:	e7e3      	b.n	80066e2 <_malloc_r+0x1e>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	1b5b      	subs	r3, r3, r5
 800671e:	d417      	bmi.n	8006750 <_malloc_r+0x8c>
 8006720:	2b0b      	cmp	r3, #11
 8006722:	d903      	bls.n	800672c <_malloc_r+0x68>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	441c      	add	r4, r3
 8006728:	6025      	str	r5, [r4, #0]
 800672a:	e004      	b.n	8006736 <_malloc_r+0x72>
 800672c:	6863      	ldr	r3, [r4, #4]
 800672e:	42a2      	cmp	r2, r4
 8006730:	bf0c      	ite	eq
 8006732:	600b      	streq	r3, [r1, #0]
 8006734:	6053      	strne	r3, [r2, #4]
 8006736:	4630      	mov	r0, r6
 8006738:	f000 f8de 	bl	80068f8 <__malloc_unlock>
 800673c:	f104 000b 	add.w	r0, r4, #11
 8006740:	1d23      	adds	r3, r4, #4
 8006742:	f020 0007 	bic.w	r0, r0, #7
 8006746:	1ac2      	subs	r2, r0, r3
 8006748:	d0cc      	beq.n	80066e4 <_malloc_r+0x20>
 800674a:	1a1b      	subs	r3, r3, r0
 800674c:	50a3      	str	r3, [r4, r2]
 800674e:	e7c9      	b.n	80066e4 <_malloc_r+0x20>
 8006750:	4622      	mov	r2, r4
 8006752:	6864      	ldr	r4, [r4, #4]
 8006754:	e7cc      	b.n	80066f0 <_malloc_r+0x2c>
 8006756:	1cc4      	adds	r4, r0, #3
 8006758:	f024 0403 	bic.w	r4, r4, #3
 800675c:	42a0      	cmp	r0, r4
 800675e:	d0e3      	beq.n	8006728 <_malloc_r+0x64>
 8006760:	1a21      	subs	r1, r4, r0
 8006762:	4630      	mov	r0, r6
 8006764:	f000 f808 	bl	8006778 <_sbrk_r>
 8006768:	3001      	adds	r0, #1
 800676a:	d1dd      	bne.n	8006728 <_malloc_r+0x64>
 800676c:	e7cf      	b.n	800670e <_malloc_r+0x4a>
 800676e:	bf00      	nop
 8006770:	20001a00 	.word	0x20001a00
 8006774:	20001a04 	.word	0x20001a04

08006778 <_sbrk_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4d06      	ldr	r5, [pc, #24]	; (8006794 <_sbrk_r+0x1c>)
 800677c:	2300      	movs	r3, #0
 800677e:	4604      	mov	r4, r0
 8006780:	4608      	mov	r0, r1
 8006782:	602b      	str	r3, [r5, #0]
 8006784:	f7fa f96a 	bl	8000a5c <_sbrk>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_sbrk_r+0x1a>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b103      	cbz	r3, 8006792 <_sbrk_r+0x1a>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	20001b34 	.word	0x20001b34

08006798 <_raise_r>:
 8006798:	291f      	cmp	r1, #31
 800679a:	b538      	push	{r3, r4, r5, lr}
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	d904      	bls.n	80067ac <_raise_r+0x14>
 80067a2:	2316      	movs	r3, #22
 80067a4:	6003      	str	r3, [r0, #0]
 80067a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067aa:	bd38      	pop	{r3, r4, r5, pc}
 80067ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80067ae:	b112      	cbz	r2, 80067b6 <_raise_r+0x1e>
 80067b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067b4:	b94b      	cbnz	r3, 80067ca <_raise_r+0x32>
 80067b6:	4620      	mov	r0, r4
 80067b8:	f000 f830 	bl	800681c <_getpid_r>
 80067bc:	462a      	mov	r2, r5
 80067be:	4601      	mov	r1, r0
 80067c0:	4620      	mov	r0, r4
 80067c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067c6:	f000 b817 	b.w	80067f8 <_kill_r>
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d00a      	beq.n	80067e4 <_raise_r+0x4c>
 80067ce:	1c59      	adds	r1, r3, #1
 80067d0:	d103      	bne.n	80067da <_raise_r+0x42>
 80067d2:	2316      	movs	r3, #22
 80067d4:	6003      	str	r3, [r0, #0]
 80067d6:	2001      	movs	r0, #1
 80067d8:	e7e7      	b.n	80067aa <_raise_r+0x12>
 80067da:	2400      	movs	r4, #0
 80067dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067e0:	4628      	mov	r0, r5
 80067e2:	4798      	blx	r3
 80067e4:	2000      	movs	r0, #0
 80067e6:	e7e0      	b.n	80067aa <_raise_r+0x12>

080067e8 <raise>:
 80067e8:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <raise+0xc>)
 80067ea:	4601      	mov	r1, r0
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	f7ff bfd3 	b.w	8006798 <_raise_r>
 80067f2:	bf00      	nop
 80067f4:	20000014 	.word	0x20000014

080067f8 <_kill_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d07      	ldr	r5, [pc, #28]	; (8006818 <_kill_r+0x20>)
 80067fc:	2300      	movs	r3, #0
 80067fe:	4604      	mov	r4, r0
 8006800:	4608      	mov	r0, r1
 8006802:	4611      	mov	r1, r2
 8006804:	602b      	str	r3, [r5, #0]
 8006806:	f7fa f90f 	bl	8000a28 <_kill>
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	d102      	bne.n	8006814 <_kill_r+0x1c>
 800680e:	682b      	ldr	r3, [r5, #0]
 8006810:	b103      	cbz	r3, 8006814 <_kill_r+0x1c>
 8006812:	6023      	str	r3, [r4, #0]
 8006814:	bd38      	pop	{r3, r4, r5, pc}
 8006816:	bf00      	nop
 8006818:	20001b34 	.word	0x20001b34

0800681c <_getpid_r>:
 800681c:	f7fa b8fc 	b.w	8000a18 <_getpid>

08006820 <__register_exitproc>:
 8006820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006824:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80068e0 <__register_exitproc+0xc0>
 8006828:	4606      	mov	r6, r0
 800682a:	f8d8 0000 	ldr.w	r0, [r8]
 800682e:	461f      	mov	r7, r3
 8006830:	460d      	mov	r5, r1
 8006832:	4691      	mov	r9, r2
 8006834:	f000 f856 	bl	80068e4 <__retarget_lock_acquire_recursive>
 8006838:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <__register_exitproc+0xb0>)
 800683a:	681c      	ldr	r4, [r3, #0]
 800683c:	b934      	cbnz	r4, 800684c <__register_exitproc+0x2c>
 800683e:	4c25      	ldr	r4, [pc, #148]	; (80068d4 <__register_exitproc+0xb4>)
 8006840:	601c      	str	r4, [r3, #0]
 8006842:	4b25      	ldr	r3, [pc, #148]	; (80068d8 <__register_exitproc+0xb8>)
 8006844:	b113      	cbz	r3, 800684c <__register_exitproc+0x2c>
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	2b1f      	cmp	r3, #31
 8006850:	dd07      	ble.n	8006862 <__register_exitproc+0x42>
 8006852:	f8d8 0000 	ldr.w	r0, [r8]
 8006856:	f000 f847 	bl	80068e8 <__retarget_lock_release_recursive>
 800685a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800685e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006862:	b34e      	cbz	r6, 80068b8 <__register_exitproc+0x98>
 8006864:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8006868:	b988      	cbnz	r0, 800688e <__register_exitproc+0x6e>
 800686a:	4b1c      	ldr	r3, [pc, #112]	; (80068dc <__register_exitproc+0xbc>)
 800686c:	b923      	cbnz	r3, 8006878 <__register_exitproc+0x58>
 800686e:	f8d8 0000 	ldr.w	r0, [r8]
 8006872:	f000 f838 	bl	80068e6 <__retarget_lock_release>
 8006876:	e7f0      	b.n	800685a <__register_exitproc+0x3a>
 8006878:	f44f 7084 	mov.w	r0, #264	; 0x108
 800687c:	f7ff feac 	bl	80065d8 <malloc>
 8006880:	2800      	cmp	r0, #0
 8006882:	d0f4      	beq.n	800686e <__register_exitproc+0x4e>
 8006884:	2300      	movs	r3, #0
 8006886:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800688a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800688e:	6863      	ldr	r3, [r4, #4]
 8006890:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8006894:	2201      	movs	r2, #1
 8006896:	409a      	lsls	r2, r3
 8006898:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800689c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80068a0:	4313      	orrs	r3, r2
 80068a2:	2e02      	cmp	r6, #2
 80068a4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80068a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80068ac:	bf02      	ittt	eq
 80068ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80068b2:	431a      	orreq	r2, r3
 80068b4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	f8d8 0000 	ldr.w	r0, [r8]
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	3302      	adds	r3, #2
 80068c2:	6062      	str	r2, [r4, #4]
 80068c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80068c8:	f000 f80e 	bl	80068e8 <__retarget_lock_release_recursive>
 80068cc:	2000      	movs	r0, #0
 80068ce:	e7c6      	b.n	800685e <__register_exitproc+0x3e>
 80068d0:	20001a94 	.word	0x20001a94
 80068d4:	20001a08 	.word	0x20001a08
 80068d8:	00000000 	.word	0x00000000
 80068dc:	080065d9 	.word	0x080065d9
 80068e0:	20000078 	.word	0x20000078

080068e4 <__retarget_lock_acquire_recursive>:
 80068e4:	4770      	bx	lr

080068e6 <__retarget_lock_release>:
 80068e6:	4770      	bx	lr

080068e8 <__retarget_lock_release_recursive>:
 80068e8:	4770      	bx	lr
	...

080068ec <__malloc_lock>:
 80068ec:	4801      	ldr	r0, [pc, #4]	; (80068f4 <__malloc_lock+0x8>)
 80068ee:	f7ff bff9 	b.w	80068e4 <__retarget_lock_acquire_recursive>
 80068f2:	bf00      	nop
 80068f4:	20001b2c 	.word	0x20001b2c

080068f8 <__malloc_unlock>:
 80068f8:	4801      	ldr	r0, [pc, #4]	; (8006900 <__malloc_unlock+0x8>)
 80068fa:	f7ff bff5 	b.w	80068e8 <__retarget_lock_release_recursive>
 80068fe:	bf00      	nop
 8006900:	20001b2c 	.word	0x20001b2c

08006904 <_init>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr

08006910 <_fini>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr
