
hello_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ca8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a8  080070a8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080070a8  080070a8  000170a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070b0  080070b0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080070c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a2c  20000078  08007138  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aa4  08007138  00021aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6fc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b6b  00000000  00000000  0003f7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00043310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  00044c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000066ca  00000000  00000000  000463f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001813d  00000000  00000000  0004cac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100ccc  00000000  00000000  00064bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001658cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ecc  00000000  00000000  00165920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e20 	.word	0x08006e20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006e20 	.word	0x08006e20

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f001 f812 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8d0 	bl	8000678 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004d8:	f000 f89a 	bl	8000610 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f003 fe46 	bl	800416c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <main+0x30>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x34>)
 80004e6:	f003 fe8b 	bl	8004200 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <main+0x38>)
 80004ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f0:	f003 fe60 	bl	80041b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x2c>
 80004f6:	bf00      	nop
 80004f8:	08006f60 	.word	0x08006f60
 80004fc:	0800077d 	.word	0x0800077d
 8000500:	20000118 	.word	0x20000118

08000504 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b0b8      	sub	sp, #224	; 0xe0
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f006 fbda 	bl	8006ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2288      	movs	r2, #136	; 0x88
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f006 fbcc 	bl	8006ccc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	2303      	movs	r3, #3
 800054a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000554:	230a      	movs	r3, #10
 8000556:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800055a:	2307      	movs	r3, #7
 800055c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000570:	4618      	mov	r0, r3
 8000572:	f001 fb39 	bl	8001be8 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000586:	f000 f919 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2303      	movs	r3, #3
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005ac:	2104      	movs	r1, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 ff00 	bl	80023b4 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80005c4:	f000 f8fa 	bl	80007bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 f924 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf14      	ite	ne
 80005de:	2301      	movne	r3, #1
 80005e0:	2300      	moveq	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 80005e8:	f000 f8e8 	bl	80007bc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f0:	f001 faa4 	bl	8001b3c <HAL_PWREx_ControlVoltageScaling>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000604:	f000 f8da 	bl	80007bc <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	37e0      	adds	r7, #224	; 0xe0
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000654:	f003 f872 	bl	800373c <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf14      	ite	ne
 800065e:	2301      	movne	r3, #1
 8000660:	2300      	moveq	r3, #0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000668:	f000 f8a8 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000094 	.word	0x20000094
 8000674:	40004400 	.word	0x40004400

08000678 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b2f      	ldr	r3, [pc, #188]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a2e      	ldr	r2, [pc, #184]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a28      	ldr	r2, [pc, #160]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a22      	ldr	r2, [pc, #136]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	4816      	ldr	r0, [pc, #88]	; (8000750 <_ZL12MX_GPIO_Initv+0xd8>)
 80006f6:	f001 f9c9 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <_ZL12MX_GPIO_Initv+0xdc>)
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000704:	2301      	movs	r3, #1
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4812      	ldr	r0, [pc, #72]	; (8000758 <_ZL12MX_GPIO_Initv+0xe0>)
 8000710:	f001 f812 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <_ZL12MX_GPIO_Initv+0xd8>)
 800072e:	f001 f803 	bl	8001738 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2105      	movs	r1, #5
 8000736:	2028      	movs	r0, #40	; 0x28
 8000738:	f000 ffd4 	bl	80016e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800073c:	2028      	movs	r0, #40	; 0x28
 800073e:	f000 ffed 	bl	800171c <HAL_NVIC_EnableIRQ>

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	48000800 	.word	0x48000800
 8000754:	10210000 	.word	0x10210000
 8000758:	48000400 	.word	0x48000400

0800075c <HAL_GPIO_EXTI_Callback>:
#define LEFT_BUTTON 	GPIO_PIN_13
#define RIGHT_BUTTON 	GPIO_PIN_12


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
	xUI.vEXTI(GPIO_Pin);
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	4619      	mov	r1, r3
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <HAL_GPIO_EXTI_Callback+0x1c>)
 800076c:	f000 fe08 	bl	8001380 <_ZN2UI5vEXTIEt>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000011c 	.word	0x2000011c

0800077c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	//HAL_UART_Transmit(&huart2, (uint8_t *)("hello\r\n"), sizeof("hello\r\n"), 100);
  	xUI.vUpdate();
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <_Z16StartDefaultTaskPv+0x18>)
 8000786:	f000 fd79 	bl	800127c <_ZN2UI7vUpdateEv>
    osDelay(250);
 800078a:	20fa      	movs	r0, #250	; 0xfa
 800078c:	f003 fdca 	bl	8004324 <osDelay>
  	xUI.vUpdate();
 8000790:	e7f8      	b.n	8000784 <_Z16StartDefaultTaskPv+0x8>
 8000792:	bf00      	nop
 8000794:	2000011c 	.word	0x2000011c

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007aa:	f000 fec3 	bl	8001534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40001000 	.word	0x40001000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d108      	bne.n	80007ea <_Z41__static_initialization_and_destruction_0ii+0x22>
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007de:	4293      	cmp	r3, r2
 80007e0:	d103      	bne.n	80007ea <_Z41__static_initialization_and_destruction_0ii+0x22>
UI xUI(&huart2);
 80007e2:	4909      	ldr	r1, [pc, #36]	; (8000808 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007e6:	f000 fcf5 	bl	80011d4 <_ZN2UIC1EP20__UART_HandleTypeDef>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d107      	bne.n	8000800 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d102      	bne.n	8000800 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007fc:	f000 fd17 	bl	800122e <_ZN2UID1Ev>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000094 	.word	0x20000094
 800080c:	2000011c 	.word	0x2000011c

08000810 <_GLOBAL__sub_I_huart2>:
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
 8000814:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff ffd5 	bl	80007c8 <_Z41__static_initialization_and_destruction_0ii>
 800081e:	bd80      	pop	{r7, pc}

08000820 <_GLOBAL__sub_D_huart2>:
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
 8000824:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff ffcd 	bl	80007c8 <_Z41__static_initialization_and_destruction_0ii>
 800082e:	bd80      	pop	{r7, pc}

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <HAL_MspInit+0x4c>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <HAL_MspInit+0x4c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6613      	str	r3, [r2, #96]	; 0x60
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <HAL_MspInit+0x4c>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_MspInit+0x4c>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6593      	str	r3, [r2, #88]	; 0x58
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_MspInit+0x4c>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f000 ff39 	bl	80016e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a17      	ldr	r2, [pc, #92]	; (80008fc <HAL_UART_MspInit+0x7c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d128      	bne.n	80008f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6593      	str	r3, [r2, #88]	; 0x58
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d2:	230c      	movs	r3, #12
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e2:	2307      	movs	r3, #7
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f000 ff22 	bl	8001738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40004400 	.word	0x40004400
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	2036      	movs	r0, #54	; 0x36
 800091a:	f000 fee3 	bl	80016e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800091e:	2036      	movs	r0, #54	; 0x36
 8000920:	f000 fefc 	bl	800171c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <HAL_InitTick+0x9c>)
 8000926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000928:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <HAL_InitTick+0x9c>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6593      	str	r3, [r2, #88]	; 0x58
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_InitTick+0x9c>)
 8000932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800093c:	f107 0210 	add.w	r2, r7, #16
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fed8 	bl	80026fc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800094c:	f001 feaa 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8000950:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000954:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <HAL_InitTick+0xa0>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	0c9b      	lsrs	r3, r3, #18
 800095c:	3b01      	subs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_InitTick+0xa4>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <HAL_InitTick+0xa8>)
 8000964:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_InitTick+0xa4>)
 8000968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800096c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_InitTick+0xa4>)
 8000970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000972:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_InitTick+0xa4>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_InitTick+0xa4>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <HAL_InitTick+0xa4>)
 8000982:	f002 fc09 	bl	8003198 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d104      	bne.n	8000996 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <HAL_InitTick+0xa4>)
 800098e:	f002 fc65 	bl	800325c <HAL_TIM_Base_Start_IT>
 8000992:	4603      	mov	r3, r0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3730      	adds	r7, #48	; 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	20001a04 	.word	0x20001a04
 80009ac:	40001000 	.word	0x40001000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80009e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009e4:	f001 f884 	bl	8001af0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009ec:	f001 f880 	bl	8001af0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80009f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009f4:	f001 f87c 	bl	8001af0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80009f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009fc:	f001 f878 	bl	8001af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIM6_DAC_IRQHandler+0x10>)
 8000a0a:	f002 fc97 	bl	800333c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20001a04 	.word	0x20001a04

08000a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	return 1;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_kill>:

int _kill(int pid, int sig)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a32:	f006 f90b 	bl	8006c4c <__errno>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2216      	movs	r2, #22
 8000a3a:	601a      	str	r2, [r3, #0]
	return -1;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_exit>:

void _exit (int status)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ffe7 	bl	8000a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a5a:	e7fe      	b.n	8000a5a <_exit+0x12>

08000a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <SystemInit+0x5c>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <SystemInit+0x5c>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <SystemInit+0x60>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a11      	ldr	r2, [pc, #68]	; (8000abc <SystemInit+0x60>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <SystemInit+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <SystemInit+0x60>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <SystemInit+0x60>)
 8000a88:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a8c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <SystemInit+0x60>)
 8000a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a98:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <SystemInit+0x60>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <SystemInit+0x60>)
 8000aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SystemInit+0x60>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00
 8000abc:	40021000 	.word	0x40021000

08000ac0 <_ZN7UIStateC1Ev>:
#include "ui.h"



// UIState
UIState::UIState() {}
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <_ZN7UIStateC1Ev+0x1c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	08007084 	.word	0x08007084

08000ae0 <_ZN7UIStateD1Ev>:
UIState::~UIState() {}
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <_ZN7UIStateD1Ev+0x1c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	08007084 	.word	0x08007084

08000b00 <_ZN13MainMenuStateC1Ev>:




// MainMenuState
MainMenuState::MainMenuState() {}
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffd8 	bl	8000ac0 <_ZN7UIStateC1Ev>
 8000b10:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <_ZN13MainMenuStateC1Ev+0x28>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08007058 	.word	0x08007058

08000b2c <_ZN13MainMenuStateD1Ev>:
MainMenuState::~MainMenuState() {}
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <_ZN13MainMenuStateD1Ev+0x20>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffcf 	bl	8000ae0 <_ZN7UIStateD1Ev>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	08007058 	.word	0x08007058

08000b50 <_ZN13MainMenuStateD0Ev>:
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ffe7 	bl	8000b2c <_ZN13MainMenuStateD1Ev>
 8000b5e:	2108      	movs	r1, #8
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f006 f853 	bl	8006c0c <_ZdlPvj>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_ZN13MainMenuState7vUpdateEP2UI>:

void MainMenuState::vUpdate(UI* pxUI)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	this->DEBUG_PRINT(pxUI);
 8000b7a:	6839      	ldr	r1, [r7, #0]
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f8bd 	bl	8000cfc <_ZN13MainMenuState11DEBUG_PRINTEP2UI>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <_ZN13MainMenuState6vEnterEP2UI>:


void MainMenuState::vEnter(UI* pxUI)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("enter: main menu\r\n"), sizeof("enter: main menu\r\n"), 100);
 8000b96:	6838      	ldr	r0, [r7, #0]
 8000b98:	f000 fc75 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000b9c:	2364      	movs	r3, #100	; 0x64
 8000b9e:	2213      	movs	r2, #19
 8000ba0:	4903      	ldr	r1, [pc, #12]	; (8000bb0 <_ZN13MainMenuState6vEnterEP2UI+0x24>)
 8000ba2:	f002 fe19 	bl	80037d8 <HAL_UART_Transmit>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	08006e44 	.word	0x08006e44

08000bb4 <_ZN13MainMenuState5vExitEP2UI>:


void MainMenuState::vExit(UI* pxUI)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("exit: main menu\r\n"), sizeof("exit: main menu\r\n"), 100);
 8000bbe:	6838      	ldr	r0, [r7, #0]
 8000bc0:	f000 fc61 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000bc4:	2364      	movs	r3, #100	; 0x64
 8000bc6:	2212      	movs	r2, #18
 8000bc8:	4903      	ldr	r1, [pc, #12]	; (8000bd8 <_ZN13MainMenuState5vExitEP2UI+0x24>)
 8000bca:	f002 fe05 	bl	80037d8 <HAL_UART_Transmit>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	08006e58 	.word	0x08006e58

08000bdc <_ZN13MainMenuState8vEventUpEP2UI>:


void MainMenuState::vEventUp(UI* pxUI)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
	pxUI->xGetMainMenuState().vMoveUpStateOption();
 8000be6:	6838      	ldr	r0, [r7, #0]
 8000be8:	f000 fc1e 	bl	8001428 <_ZN2UI17xGetMainMenuStateEv>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f850 	bl	8000c94 <_ZN13MainMenuState18vMoveUpStateOptionEv>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_ZN13MainMenuState10vEventDownEP2UI>:


void MainMenuState::vEventDown(UI* pxUI)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	pxUI->xGetMainMenuState().vMoveDownStateOption();
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	f000 fc0e 	bl	8001428 <_ZN2UI17xGetMainMenuStateEv>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f85a 	bl	8000cc8 <_ZN13MainMenuState20vMoveDownStateOptionEv>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <_ZN13MainMenuState10vEventLeftEP2UI>:


void MainMenuState::vEventLeft(UI* pxUI)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
	// NOP
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_ZN13MainMenuState11vEventRightEP2UI>:


void MainMenuState::vEventRight(UI* pxUI)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
	switch (this->_eStateOption)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d018      	beq.n	8000c76 <_ZN13MainMenuState11vEventRightEP2UI+0x44>
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	dc1f      	bgt.n	8000c88 <_ZN13MainMenuState11vEventRightEP2UI+0x56>
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <_ZN13MainMenuState11vEventRightEP2UI+0x20>
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d009      	beq.n	8000c64 <_ZN13MainMenuState11vEventRightEP2UI+0x32>
	break;
	case MainMenuState::StateOption::SETTINGS:
		pxUI->vTransitionState(pxUI->xGetSettingsState());
	break;
	default:
	break;
 8000c50:	e01a      	b.n	8000c88 <_ZN13MainMenuState11vEventRightEP2UI+0x56>
		pxUI->vTransitionState(pxUI->xGetMusicListState());
 8000c52:	6838      	ldr	r0, [r7, #0]
 8000c54:	f000 fbf3 	bl	800143e <_ZN2UI18xGetMusicListStateEv>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6838      	ldr	r0, [r7, #0]
 8000c5e:	f000 fb27 	bl	80012b0 <_ZN2UI16vTransitionStateER7UIState>
	break;
 8000c62:	e012      	b.n	8000c8a <_ZN13MainMenuState11vEventRightEP2UI+0x58>
		pxUI->vTransitionState(pxUI->xGetProfileState());
 8000c64:	6838      	ldr	r0, [r7, #0]
 8000c66:	f000 fbf6 	bl	8001456 <_ZN2UI16xGetProfileStateEv>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	6838      	ldr	r0, [r7, #0]
 8000c70:	f000 fb1e 	bl	80012b0 <_ZN2UI16vTransitionStateER7UIState>
	break;
 8000c74:	e009      	b.n	8000c8a <_ZN13MainMenuState11vEventRightEP2UI+0x58>
		pxUI->vTransitionState(pxUI->xGetSettingsState());
 8000c76:	6838      	ldr	r0, [r7, #0]
 8000c78:	f000 fbf9 	bl	800146e <_ZN2UI17xGetSettingsStateEv>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6838      	ldr	r0, [r7, #0]
 8000c82:	f000 fb15 	bl	80012b0 <_ZN2UI16vTransitionStateER7UIState>
	break;
 8000c86:	e000      	b.n	8000c8a <_ZN13MainMenuState11vEventRightEP2UI+0x58>
	break;
 8000c88:	bf00      	nop
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <_ZN13MainMenuState18vMoveUpStateOptionEv>:


void MainMenuState::vMoveUpStateOption(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	this->_eStateOption = (MainMenuState::StateOption)(((int32_t)this->_eStateOption + ((int32_t)MainMenuState::StateOption::COUNT - 1)) % (int32_t)MainMenuState::StateOption::COUNT);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	1c99      	adds	r1, r3, #2
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_ZN13MainMenuState18vMoveUpStateOptionEv+0x30>)
 8000ca4:	fb83 3201 	smull	r3, r2, r3, r1
 8000ca8:	17cb      	asrs	r3, r1, #31
 8000caa:	1ad2      	subs	r2, r2, r3
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	1aca      	subs	r2, r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	605a      	str	r2, [r3, #4]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	55555556 	.word	0x55555556

08000cc8 <_ZN13MainMenuState20vMoveDownStateOptionEv>:


void MainMenuState::vMoveDownStateOption(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	this->_eStateOption = (MainMenuState::StateOption)(((int32_t)this->_eStateOption + 1) % (int32_t)MainMenuState::StateOption::COUNT);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	1c59      	adds	r1, r3, #1
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <_ZN13MainMenuState20vMoveDownStateOptionEv+0x30>)
 8000cd8:	fb83 3201 	smull	r3, r2, r3, r1
 8000cdc:	17cb      	asrs	r3, r1, #31
 8000cde:	1ad2      	subs	r2, r2, r3
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	1aca      	subs	r2, r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	605a      	str	r2, [r3, #4]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	55555556 	.word	0x55555556

08000cfc <_ZN13MainMenuState11DEBUG_PRINTEP2UI>:




void MainMenuState::DEBUG_PRINT(UI* pxUI)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("[Main Menu]\r\n"), sizeof("[Main Menu]\r\n"), 100);
 8000d06:	6838      	ldr	r0, [r7, #0]
 8000d08:	f000 fbbd 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	220e      	movs	r2, #14
 8000d10:	4932      	ldr	r1, [pc, #200]	; (8000ddc <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xe0>)
 8000d12:	f002 fd61 	bl	80037d8 <HAL_UART_Transmit>

	switch (this->_eStateOption)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d038      	beq.n	8000d90 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0x94>
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	dc4f      	bgt.n	8000dc2 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xc6>
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0x30>
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d019      	beq.n	8000d5e <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0x62>
 8000d2a:	e04a      	b.n	8000dc2 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xc6>
	{
	case MainMenuState::StateOption::MUSIC_LIST:
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("-> music\r\n"), 	 	sizeof("-> music\r\n"), 		100);
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	f000 fbaa 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000d32:	2364      	movs	r3, #100	; 0x64
 8000d34:	220b      	movs	r2, #11
 8000d36:	492a      	ldr	r1, [pc, #168]	; (8000de0 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xe4>)
 8000d38:	f002 fd4e 	bl	80037d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   profile\r\n"), 	sizeof("   profile\r\n"), 	100);
 8000d3c:	6838      	ldr	r0, [r7, #0]
 8000d3e:	f000 fba2 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000d42:	2364      	movs	r3, #100	; 0x64
 8000d44:	220d      	movs	r2, #13
 8000d46:	4927      	ldr	r1, [pc, #156]	; (8000de4 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xe8>)
 8000d48:	f002 fd46 	bl	80037d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   settings\r\n"),	sizeof("   settings\r\n"), 100);
 8000d4c:	6838      	ldr	r0, [r7, #0]
 8000d4e:	f000 fb9a 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000d52:	2364      	movs	r3, #100	; 0x64
 8000d54:	220e      	movs	r2, #14
 8000d56:	4924      	ldr	r1, [pc, #144]	; (8000de8 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xec>)
 8000d58:	f002 fd3e 	bl	80037d8 <HAL_UART_Transmit>
		break;
 8000d5c:	e03a      	b.n	8000dd4 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xd8>
	case MainMenuState::StateOption::PROFILE:
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   music\r\n"), 	 	sizeof("   music\r\n"), 		100);
 8000d5e:	6838      	ldr	r0, [r7, #0]
 8000d60:	f000 fb91 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000d64:	2364      	movs	r3, #100	; 0x64
 8000d66:	220b      	movs	r2, #11
 8000d68:	4920      	ldr	r1, [pc, #128]	; (8000dec <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xf0>)
 8000d6a:	f002 fd35 	bl	80037d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("-> profile\r\n"), 	sizeof("-> profile\r\n"), 	100);
 8000d6e:	6838      	ldr	r0, [r7, #0]
 8000d70:	f000 fb89 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000d74:	2364      	movs	r3, #100	; 0x64
 8000d76:	220d      	movs	r2, #13
 8000d78:	491d      	ldr	r1, [pc, #116]	; (8000df0 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xf4>)
 8000d7a:	f002 fd2d 	bl	80037d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   settings\r\n"),	sizeof("   settings\r\n"), 100);
 8000d7e:	6838      	ldr	r0, [r7, #0]
 8000d80:	f000 fb81 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	220e      	movs	r2, #14
 8000d88:	4917      	ldr	r1, [pc, #92]	; (8000de8 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xec>)
 8000d8a:	f002 fd25 	bl	80037d8 <HAL_UART_Transmit>
		break;
 8000d8e:	e021      	b.n	8000dd4 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xd8>
	case MainMenuState::StateOption::SETTINGS:
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   music\r\n"), 	 	sizeof("   music\r\n"), 		100);
 8000d90:	6838      	ldr	r0, [r7, #0]
 8000d92:	f000 fb78 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000d96:	2364      	movs	r3, #100	; 0x64
 8000d98:	220b      	movs	r2, #11
 8000d9a:	4914      	ldr	r1, [pc, #80]	; (8000dec <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xf0>)
 8000d9c:	f002 fd1c 	bl	80037d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   profile\r\n"), 	sizeof("   profile\r\n"), 	100);
 8000da0:	6838      	ldr	r0, [r7, #0]
 8000da2:	f000 fb70 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000da6:	2364      	movs	r3, #100	; 0x64
 8000da8:	220d      	movs	r2, #13
 8000daa:	490e      	ldr	r1, [pc, #56]	; (8000de4 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xe8>)
 8000dac:	f002 fd14 	bl	80037d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("-> settings\r\n"),	sizeof("-> settings\r\n"), 100);
 8000db0:	6838      	ldr	r0, [r7, #0]
 8000db2:	f000 fb68 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000db6:	2364      	movs	r3, #100	; 0x64
 8000db8:	220e      	movs	r2, #14
 8000dba:	490e      	ldr	r1, [pc, #56]	; (8000df4 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xf8>)
 8000dbc:	f002 fd0c 	bl	80037d8 <HAL_UART_Transmit>
		break;
 8000dc0:	e008      	b.n	8000dd4 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xd8>
	default:
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("idk\r\n"), sizeof("idk\r\n"), 100);
 8000dc2:	6838      	ldr	r0, [r7, #0]
 8000dc4:	f000 fb5f 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000dc8:	2364      	movs	r3, #100	; 0x64
 8000dca:	2206      	movs	r2, #6
 8000dcc:	490a      	ldr	r1, [pc, #40]	; (8000df8 <_ZN13MainMenuState11DEBUG_PRINTEP2UI+0xfc>)
 8000dce:	f002 fd03 	bl	80037d8 <HAL_UART_Transmit>
		break;
 8000dd2:	bf00      	nop
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	08006e6c 	.word	0x08006e6c
 8000de0:	08006e7c 	.word	0x08006e7c
 8000de4:	08006e88 	.word	0x08006e88
 8000de8:	08006e98 	.word	0x08006e98
 8000dec:	08006ea8 	.word	0x08006ea8
 8000df0:	08006eb4 	.word	0x08006eb4
 8000df4:	08006ec4 	.word	0x08006ec4
 8000df8:	08006ed4 	.word	0x08006ed4

08000dfc <_ZN14MusicListStateC1Ev>:




// MusicListState
MusicListState::MusicListState() {}
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fe5a 	bl	8000ac0 <_ZN7UIStateC1Ev>
 8000e0c:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <_ZN14MusicListStateC1Ev+0x20>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	0800702c 	.word	0x0800702c

08000e20 <_ZN14MusicListStateD1Ev>:
MusicListState::~MusicListState() {}
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <_ZN14MusicListStateD1Ev+0x20>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fe55 	bl	8000ae0 <_ZN7UIStateD1Ev>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	0800702c 	.word	0x0800702c

08000e44 <_ZN14MusicListStateD0Ev>:
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ffe7 	bl	8000e20 <_ZN14MusicListStateD1Ev>
 8000e52:	2104      	movs	r1, #4
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f005 fed9 	bl	8006c0c <_ZdlPvj>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_ZN14MusicListState7vUpdateEP2UI>:

void MusicListState::vUpdate(UI* pxUI)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
	this->DEBUG_PRINT(pxUI);
 8000e6e:	6839      	ldr	r1, [r7, #0]
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 f85f 	bl	8000f34 <_ZN14MusicListState11DEBUG_PRINTEP2UI>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <_ZN14MusicListState6vEnterEP2UI>:


void MusicListState::vEnter(UI* pxUI)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("enter: music\r\n"), sizeof("enter: music\r\n"), 100);
 8000e8a:	6838      	ldr	r0, [r7, #0]
 8000e8c:	f000 fafb 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000e90:	2364      	movs	r3, #100	; 0x64
 8000e92:	220f      	movs	r2, #15
 8000e94:	4903      	ldr	r1, [pc, #12]	; (8000ea4 <_ZN14MusicListState6vEnterEP2UI+0x24>)
 8000e96:	f002 fc9f 	bl	80037d8 <HAL_UART_Transmit>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08006edc 	.word	0x08006edc

08000ea8 <_ZN14MusicListState5vExitEP2UI>:


void MusicListState::vExit(UI* pxUI)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("exit: music\r\n"), sizeof("exit: music\r\n"), 100);
 8000eb2:	6838      	ldr	r0, [r7, #0]
 8000eb4:	f000 fae7 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000eb8:	2364      	movs	r3, #100	; 0x64
 8000eba:	220e      	movs	r2, #14
 8000ebc:	4903      	ldr	r1, [pc, #12]	; (8000ecc <_ZN14MusicListState5vExitEP2UI+0x24>)
 8000ebe:	f002 fc8b 	bl	80037d8 <HAL_UART_Transmit>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	08006eec 	.word	0x08006eec

08000ed0 <_ZN14MusicListState8vEventUpEP2UI>:


void MusicListState::vEventUp(UI* pxUI)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]

}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_ZN14MusicListState10vEventDownEP2UI>:


void MusicListState::vEventDown(UI* pxUI)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]

}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_ZN14MusicListState10vEventLeftEP2UI>:


void MusicListState::vEventLeft(UI* pxUI)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
	pxUI->vTransitionState(pxUI->xGetMainMenuState());
 8000f06:	6838      	ldr	r0, [r7, #0]
 8000f08:	f000 fa8e 	bl	8001428 <_ZN2UI17xGetMainMenuStateEv>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	6838      	ldr	r0, [r7, #0]
 8000f12:	f000 f9cd 	bl	80012b0 <_ZN2UI16vTransitionStateER7UIState>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZN14MusicListState11vEventRightEP2UI>:


void MusicListState::vEventRight(UI* pxUI)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]


}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_ZN14MusicListState11DEBUG_PRINTEP2UI>:


void MusicListState::DEBUG_PRINT(UI* pxUI)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("[MusicList]\r\n"), sizeof("[MusicList]\r\n"), 100);
 8000f3e:	6838      	ldr	r0, [r7, #0]
 8000f40:	f000 faa1 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	220e      	movs	r2, #14
 8000f48:	4903      	ldr	r1, [pc, #12]	; (8000f58 <_ZN14MusicListState11DEBUG_PRINTEP2UI+0x24>)
 8000f4a:	f002 fc45 	bl	80037d8 <HAL_UART_Transmit>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08006efc 	.word	0x08006efc

08000f5c <_ZN12ProfileStateC1Ev>:



// ProfileState
ProfileState::ProfileState() {}
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fdaa 	bl	8000ac0 <_ZN7UIStateC1Ev>
 8000f6c:	4a03      	ldr	r2, [pc, #12]	; (8000f7c <_ZN12ProfileStateC1Ev+0x20>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	08007000 	.word	0x08007000

08000f80 <_ZN12ProfileStateD1Ev>:
ProfileState::~ProfileState() {}
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_ZN12ProfileStateD1Ev+0x20>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fda5 	bl	8000ae0 <_ZN7UIStateD1Ev>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	08007000 	.word	0x08007000

08000fa4 <_ZN12ProfileStateD0Ev>:
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ffe7 	bl	8000f80 <_ZN12ProfileStateD1Ev>
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f005 fe29 	bl	8006c0c <_ZdlPvj>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_ZN12ProfileState7vUpdateEP2UI>:

void ProfileState::vUpdate(UI* pxUI)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	this->DEBUG_PRINT(pxUI);
 8000fce:	6839      	ldr	r1, [r7, #0]
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f84d 	bl	8001070 <_ZN12ProfileState11DEBUG_PRINTEP2UI>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_ZN12ProfileState6vEnterEP2UI>:


void ProfileState::vEnter(UI* pxUI)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]

}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_ZN12ProfileState5vExitEP2UI>:


void ProfileState::vExit(UI* pxUI)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]

}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_ZN12ProfileState8vEventUpEP2UI>:


void ProfileState::vEventUp(UI* pxUI)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]

}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_ZN12ProfileState10vEventDownEP2UI>:


void ProfileState::vEventDown(UI* pxUI)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]

}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_ZN12ProfileState10vEventLeftEP2UI>:


void ProfileState::vEventLeft(UI* pxUI)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
	pxUI->vTransitionState(pxUI->xGetMainMenuState());
 8001040:	6838      	ldr	r0, [r7, #0]
 8001042:	f000 f9f1 	bl	8001428 <_ZN2UI17xGetMainMenuStateEv>
 8001046:	4603      	mov	r3, r0
 8001048:	4619      	mov	r1, r3
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f000 f930 	bl	80012b0 <_ZN2UI16vTransitionStateER7UIState>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZN12ProfileState11vEventRightEP2UI>:


void ProfileState::vEventRight(UI* pxUI)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]


}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <_ZN12ProfileState11DEBUG_PRINTEP2UI>:


void ProfileState::DEBUG_PRINT(UI* pxUI)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("[Profile]\r\n"), sizeof("[Profile]\r\n"), 100);
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f000 fa03 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	220c      	movs	r2, #12
 8001084:	4903      	ldr	r1, [pc, #12]	; (8001094 <_ZN12ProfileState11DEBUG_PRINTEP2UI+0x24>)
 8001086:	f002 fba7 	bl	80037d8 <HAL_UART_Transmit>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	08006f0c 	.word	0x08006f0c

08001098 <_ZN13SettingsStateC1Ev>:



// SettingsState
SettingsState::SettingsState() {}
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fd0c 	bl	8000ac0 <_ZN7UIStateC1Ev>
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <_ZN13SettingsStateC1Ev+0x20>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	08006fd4 	.word	0x08006fd4

080010bc <_ZN13SettingsStateD1Ev>:
SettingsState::~SettingsState() {}
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_ZN13SettingsStateD1Ev+0x20>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fd07 	bl	8000ae0 <_ZN7UIStateD1Ev>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	08006fd4 	.word	0x08006fd4

080010e0 <_ZN13SettingsStateD0Ev>:
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ffe7 	bl	80010bc <_ZN13SettingsStateD1Ev>
 80010ee:	2104      	movs	r1, #4
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f005 fd8b 	bl	8006c0c <_ZdlPvj>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_ZN13SettingsState7vUpdateEP2UI>:

void SettingsState::vUpdate(UI* pxUI)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
	this->DEBUG_PRINT(pxUI);
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 f84d 	bl	80011ac <_ZN13SettingsState11DEBUG_PRINTEP2UI>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_ZN13SettingsState6vEnterEP2UI>:

void SettingsState::vEnter(UI* pxUI)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]

}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_ZN13SettingsState5vExitEP2UI>:


void SettingsState::vExit(UI* pxUI)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]

}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_ZN13SettingsState8vEventUpEP2UI>:


void SettingsState::vEventUp(UI* pxUI)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]

}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_ZN13SettingsState10vEventDownEP2UI>:


void SettingsState::vEventDown(UI* pxUI)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]

}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_ZN13SettingsState10vEventLeftEP2UI>:


void SettingsState::vEventLeft(UI* pxUI)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	pxUI->vTransitionState(pxUI->xGetMainMenuState());
 800117c:	6838      	ldr	r0, [r7, #0]
 800117e:	f000 f953 	bl	8001428 <_ZN2UI17xGetMainMenuStateEv>
 8001182:	4603      	mov	r3, r0
 8001184:	4619      	mov	r1, r3
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f000 f892 	bl	80012b0 <_ZN2UI16vTransitionStateER7UIState>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZN13SettingsState11vEventRightEP2UI>:


void SettingsState::vEventRight(UI* pxUI)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]


}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN13SettingsState11DEBUG_PRINTEP2UI>:


void SettingsState::DEBUG_PRINT(UI* pxUI)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("[Settings]\r\n"), sizeof("[Settings]\r\n"), 100);
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f000 f965 	bl	8001486 <_ZN2UI9pxGetUARTEv>
 80011bc:	2364      	movs	r3, #100	; 0x64
 80011be:	220d      	movs	r2, #13
 80011c0:	4903      	ldr	r1, [pc, #12]	; (80011d0 <_ZN13SettingsState11DEBUG_PRINTEP2UI+0x24>)
 80011c2:	f002 fb09 	bl	80037d8 <HAL_UART_Transmit>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	08006f18 	.word	0x08006f18

080011d4 <_ZN2UIC1EP20__UART_HandleTypeDef>:
// UI
UI::UI() : _xMainMenu(), _xMusicList(), _xProfile(), _xSettings(), _pxCurrentState(&this->_xMainMenu),
		_pxUART(nullptr) {}


UI::UI(UART_HandleTypeDef *pxUART) : _xMainMenu(), _xMusicList(), _xProfile(), _xSettings(), _pxCurrentState(&this->_xMainMenu),
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
		_pxUART(pxUART)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fc8d 	bl	8000b00 <_ZN13MainMenuStateC1Ev>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3308      	adds	r3, #8
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fe06 	bl	8000dfc <_ZN14MusicListStateC1Ev>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	330c      	adds	r3, #12
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff feb1 	bl	8000f5c <_ZN12ProfileStateC1Ev>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3310      	adds	r3, #16
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff4a 	bl	8001098 <_ZN13SettingsStateC1Ev>
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	619a      	str	r2, [r3, #24]
{
	this->_pxCurrentState->vEnter(this);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695a      	ldr	r2, [r3, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	330c      	adds	r3, #12
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4610      	mov	r0, r2
 8001222:	4798      	blx	r3
}
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_ZN2UID1Ev>:




UI::~UI()
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
{
	this->_pxCurrentState->vExit(this);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3310      	adds	r3, #16
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4610      	mov	r0, r2
 8001248:	4798      	blx	r3
UI::~UI()
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3310      	adds	r3, #16
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff34 	bl	80010bc <_ZN13SettingsStateD1Ev>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	330c      	adds	r3, #12
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe91 	bl	8000f80 <_ZN12ProfileStateD1Ev>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3308      	adds	r3, #8
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fddc 	bl	8000e20 <_ZN14MusicListStateD1Ev>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fc5e 	bl	8000b2c <_ZN13MainMenuStateD1Ev>
}
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <_ZN2UI7vUpdateEv>:




void UI::vUpdate(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8001284:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <_ZN2UI7vUpdateEv+0x30>)
 800128a:	f000 fc17 	bl	8001abc <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
  //HAL_UART_Transmit(this->_pxUART, (uint8_t *)("update ui\r\n"), sizeof("update ui\r\n"), 100);
	this->_pxCurrentState->vUpdate(this);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3308      	adds	r3, #8
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4610      	mov	r0, r2
 80012a0:	4798      	blx	r3
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	48000800 	.word	0x48000800

080012b0 <_ZN2UI16vTransitionStateER7UIState>:
	return this->_pxCurrentState;
}


void UI::vTransitionState(UIState& xNextState)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
	this->_pxCurrentState->vExit(this);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3310      	adds	r3, #16
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4610      	mov	r0, r2
 80012cc:	4798      	blx	r3
	this->_pxCurrentState = &xNextState;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	615a      	str	r2, [r3, #20]
	this->_pxCurrentState->vEnter(this);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	330c      	adds	r3, #12
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4610      	mov	r0, r2
 80012e6:	4798      	blx	r3
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZN2UI14vPressUpButtonEv>:


void UI::vPressUpButton(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventUp(this);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3314      	adds	r3, #20
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4610      	mov	r0, r2
 800130a:	4798      	blx	r3
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_ZN2UI16vPressDownButtonEv>:


void UI::vPressDownButton(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventDown(this);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3318      	adds	r3, #24
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4610      	mov	r0, r2
 800132e:	4798      	blx	r3
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_ZN2UI16vPressLeftButtonEv>:


void UI::vPressLeftButton(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventLeft(this);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	331c      	adds	r3, #28
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4610      	mov	r0, r2
 8001352:	4798      	blx	r3
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_ZN2UI17vPressRightButtonEv>:


void UI::vPressRightButton(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventRight(this);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695a      	ldr	r2, [r3, #20]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3320      	adds	r3, #32
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4610      	mov	r0, r2
 8001376:	4798      	blx	r3
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZN2UI5vEXTIEt>:



void UI::vEXTI(uint16_t GPIO_Pin)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
	switch (GPIO_Pin)
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001392:	d00f      	beq.n	80013b4 <_ZN2UI5vEXTIEt+0x34>
 8001394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001398:	dc38      	bgt.n	800140c <_ZN2UI5vEXTIEt+0x8c>
 800139a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139e:	d014      	beq.n	80013ca <_ZN2UI5vEXTIEt+0x4a>
 80013a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013a4:	dc32      	bgt.n	800140c <_ZN2UI5vEXTIEt+0x8c>
 80013a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013aa:	d024      	beq.n	80013f6 <_ZN2UI5vEXTIEt+0x76>
 80013ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013b0:	d016      	beq.n	80013e0 <_ZN2UI5vEXTIEt+0x60>
	case RIGHT_BUTTON:
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("right\r\n"), sizeof("right\r\n"), 100);
		this->vPressRightButton();
		break;
	default:
		break;
 80013b2:	e02b      	b.n	800140c <_ZN2UI5vEXTIEt+0x8c>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("up\r\n"), sizeof("up\r\n"), 100);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6998      	ldr	r0, [r3, #24]
 80013b8:	2364      	movs	r3, #100	; 0x64
 80013ba:	2205      	movs	r2, #5
 80013bc:	4916      	ldr	r1, [pc, #88]	; (8001418 <_ZN2UI5vEXTIEt+0x98>)
 80013be:	f002 fa0b 	bl	80037d8 <HAL_UART_Transmit>
		this->vPressUpButton();
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ff94 	bl	80012f0 <_ZN2UI14vPressUpButtonEv>
		break;
 80013c8:	e021      	b.n	800140e <_ZN2UI5vEXTIEt+0x8e>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("down\r\n"), sizeof("down\r\n"), 100);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6998      	ldr	r0, [r3, #24]
 80013ce:	2364      	movs	r3, #100	; 0x64
 80013d0:	2207      	movs	r2, #7
 80013d2:	4912      	ldr	r1, [pc, #72]	; (800141c <_ZN2UI5vEXTIEt+0x9c>)
 80013d4:	f002 fa00 	bl	80037d8 <HAL_UART_Transmit>
		this->vPressDownButton();
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff9b 	bl	8001314 <_ZN2UI16vPressDownButtonEv>
		break;
 80013de:	e016      	b.n	800140e <_ZN2UI5vEXTIEt+0x8e>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("left\r\n"), sizeof("left\r\n"), 100);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6998      	ldr	r0, [r3, #24]
 80013e4:	2364      	movs	r3, #100	; 0x64
 80013e6:	2207      	movs	r2, #7
 80013e8:	490d      	ldr	r1, [pc, #52]	; (8001420 <_ZN2UI5vEXTIEt+0xa0>)
 80013ea:	f002 f9f5 	bl	80037d8 <HAL_UART_Transmit>
		this->vPressLeftButton();
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa2 	bl	8001338 <_ZN2UI16vPressLeftButtonEv>
		break;
 80013f4:	e00b      	b.n	800140e <_ZN2UI5vEXTIEt+0x8e>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("right\r\n"), sizeof("right\r\n"), 100);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6998      	ldr	r0, [r3, #24]
 80013fa:	2364      	movs	r3, #100	; 0x64
 80013fc:	2208      	movs	r2, #8
 80013fe:	4909      	ldr	r1, [pc, #36]	; (8001424 <_ZN2UI5vEXTIEt+0xa4>)
 8001400:	f002 f9ea 	bl	80037d8 <HAL_UART_Transmit>
		this->vPressRightButton();
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ffa9 	bl	800135c <_ZN2UI17vPressRightButtonEv>
		break;
 800140a:	e000      	b.n	800140e <_ZN2UI5vEXTIEt+0x8e>
		break;
 800140c:	bf00      	nop
	}
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	08006f28 	.word	0x08006f28
 800141c:	08006f30 	.word	0x08006f30
 8001420:	08006f38 	.word	0x08006f38
 8001424:	08006f40 	.word	0x08006f40

08001428 <_ZN2UI17xGetMainMenuStateEv>:



MainMenuState& UI::xGetMainMenuState(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	return this->_xMainMenu;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_ZN2UI18xGetMusicListStateEv>:

MusicListState& UI::xGetMusicListState(void)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	return this->_xMusicList;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3308      	adds	r3, #8
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_ZN2UI16xGetProfileStateEv>:

ProfileState& UI::xGetProfileState(void)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	return this->_xProfile;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	330c      	adds	r3, #12
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_ZN2UI17xGetSettingsStateEv>:

SettingsState& UI::xGetSettingsState(void)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	return this->_xSettings;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3310      	adds	r3, #16
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <_ZN2UI9pxGetUARTEv>:

UART_HandleTypeDef* UI::pxGetUART(void)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
	return this->_pxUART;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a4:	f7ff fada 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014aa:	e003      	b.n	80014b4 <LoopCopyDataInit>

080014ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014b2:	3104      	adds	r1, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014bc:	d3f6      	bcc.n	80014ac <CopyDataInit>
	ldr	r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014c0:	e002      	b.n	80014c8 <LoopFillZerobss>

080014c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014c4:	f842 3b04 	str.w	r3, [r2], #4

080014c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <LoopForever+0x16>)
	cmp	r2, r3
 80014ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014cc:	d3f9      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f005 fbc3 	bl	8006c58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d2:	f7fe fff9 	bl	80004c8 <main>

080014d6 <LoopForever>:

LoopForever:
    b LoopForever
 80014d6:	e7fe      	b.n	80014d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014dc:	080070c0 	.word	0x080070c0
	ldr	r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014e4:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80014e8:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80014ec:	20001aa4 	.word	0x20001aa4

080014f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_2_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_Init+0x3c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <HAL_Init+0x3c>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150a:	2003      	movs	r0, #3
 800150c:	f000 f8df 	bl	80016ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff f9f7 	bl	8000904 <HAL_InitTick>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	e001      	b.n	8001526 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001522:	f7ff f985 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001526:	79fb      	ldrb	r3, [r7, #7]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40022000 	.word	0x40022000

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008
 8001558:	20001a50 	.word	0x20001a50

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20001a50 	.word	0x20001a50

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800159c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db0b      	blt.n	8001602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	4907      	ldr	r1, [pc, #28]	; (8001610 <__NVIC_EnableIRQ+0x38>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	2001      	movs	r0, #1
 80015fa:	fa00 f202 	lsl.w	r2, r0, r2
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e100 	.word	0xe000e100

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ff4c 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016f6:	f7ff ff61 	bl	80015bc <__NVIC_GetPriorityGrouping>
 80016fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	6978      	ldr	r0, [r7, #20]
 8001702:	f7ff ffb1 	bl	8001668 <NVIC_EncodePriority>
 8001706:	4602      	mov	r2, r0
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff80 	bl	8001614 <__NVIC_SetPriority>
}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff54 	bl	80015d8 <__NVIC_EnableIRQ>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001746:	e17f      	b.n	8001a48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2101      	movs	r1, #1
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8171 	beq.w	8001a42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d00b      	beq.n	8001780 <HAL_GPIO_Init+0x48>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d007      	beq.n	8001780 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001774:	2b11      	cmp	r3, #17
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b12      	cmp	r3, #18
 800177e:	d130      	bne.n	80017e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b6:	2201      	movs	r2, #1
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 0201 	and.w	r2, r3, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d118      	bne.n	8001820 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017f4:	2201      	movs	r2, #1
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	08db      	lsrs	r3, r3, #3
 800180a:	f003 0201 	and.w	r2, r3, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x128>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b12      	cmp	r3, #18
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	6939      	ldr	r1, [r7, #16]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80ac 	beq.w	8001a42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <HAL_GPIO_Init+0x330>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	4a5e      	ldr	r2, [pc, #376]	; (8001a68 <HAL_GPIO_Init+0x330>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6613      	str	r3, [r2, #96]	; 0x60
 80018f6:	4b5c      	ldr	r3, [pc, #368]	; (8001a68 <HAL_GPIO_Init+0x330>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001902:	4a5a      	ldr	r2, [pc, #360]	; (8001a6c <HAL_GPIO_Init+0x334>)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800192c:	d025      	beq.n	800197a <HAL_GPIO_Init+0x242>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4f      	ldr	r2, [pc, #316]	; (8001a70 <HAL_GPIO_Init+0x338>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01f      	beq.n	8001976 <HAL_GPIO_Init+0x23e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4e      	ldr	r2, [pc, #312]	; (8001a74 <HAL_GPIO_Init+0x33c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d019      	beq.n	8001972 <HAL_GPIO_Init+0x23a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4d      	ldr	r2, [pc, #308]	; (8001a78 <HAL_GPIO_Init+0x340>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0x236>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <HAL_GPIO_Init+0x344>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00d      	beq.n	800196a <HAL_GPIO_Init+0x232>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4b      	ldr	r2, [pc, #300]	; (8001a80 <HAL_GPIO_Init+0x348>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <HAL_GPIO_Init+0x22e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4a      	ldr	r2, [pc, #296]	; (8001a84 <HAL_GPIO_Init+0x34c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_GPIO_Init+0x22a>
 800195e:	2306      	movs	r3, #6
 8001960:	e00c      	b.n	800197c <HAL_GPIO_Init+0x244>
 8001962:	2307      	movs	r3, #7
 8001964:	e00a      	b.n	800197c <HAL_GPIO_Init+0x244>
 8001966:	2305      	movs	r3, #5
 8001968:	e008      	b.n	800197c <HAL_GPIO_Init+0x244>
 800196a:	2304      	movs	r3, #4
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x244>
 800196e:	2303      	movs	r3, #3
 8001970:	e004      	b.n	800197c <HAL_GPIO_Init+0x244>
 8001972:	2302      	movs	r3, #2
 8001974:	e002      	b.n	800197c <HAL_GPIO_Init+0x244>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x244>
 800197a:	2300      	movs	r3, #0
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	f002 0203 	and.w	r2, r2, #3
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4093      	lsls	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800198c:	4937      	ldr	r1, [pc, #220]	; (8001a6c <HAL_GPIO_Init+0x334>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800199a:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_GPIO_Init+0x350>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019be:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <HAL_GPIO_Init+0x350>)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <HAL_GPIO_Init+0x350>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019e8:	4a27      	ldr	r2, [pc, #156]	; (8001a88 <HAL_GPIO_Init+0x350>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_GPIO_Init+0x350>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <HAL_GPIO_Init+0x350>)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_GPIO_Init+0x350>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <HAL_GPIO_Init+0x350>)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f47f ae78 	bne.w	8001748 <HAL_GPIO_Init+0x10>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	48000400 	.word	0x48000400
 8001a74:	48000800 	.word	0x48000800
 8001a78:	48000c00 	.word	0x48000c00
 8001a7c:	48001000 	.word	0x48001000
 8001a80:	48001400 	.word	0x48001400
 8001a84:	48001800 	.word	0x48001800
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43d9      	mvns	r1, r3
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	400b      	ands	r3, r1
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fe24 	bl	800075c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40007000 	.word	0x40007000

08001b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b4a:	d130      	bne.n	8001bae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b58:	d038      	beq.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b62:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2232      	movs	r2, #50	; 0x32
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	0c9b      	lsrs	r3, r3, #18
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b80:	e002      	b.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b94:	d102      	bne.n	8001b9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f2      	bne.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba8:	d110      	bne.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e00f      	b.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bba:	d007      	beq.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bc4:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	20000000 	.word	0x20000000
 8001be4:	431bde83 	.word	0x431bde83

08001be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e3d4      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfa:	4ba1      	ldr	r3, [pc, #644]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c04:	4b9e      	ldr	r3, [pc, #632]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 80e4 	beq.w	8001de4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_RCC_OscConfig+0x4a>
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b0c      	cmp	r3, #12
 8001c26:	f040 808b 	bne.w	8001d40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	f040 8087 	bne.w	8001d40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c32:	4b93      	ldr	r3, [pc, #588]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_RCC_OscConfig+0x62>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e3ac      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1a      	ldr	r2, [r3, #32]
 8001c4e:	4b8c      	ldr	r3, [pc, #560]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <HAL_RCC_OscConfig+0x7c>
 8001c5a:	4b89      	ldr	r3, [pc, #548]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c62:	e005      	b.n	8001c70 <HAL_RCC_OscConfig+0x88>
 8001c64:	4b86      	ldr	r3, [pc, #536]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d223      	bcs.n	8001cbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fd71 	bl	8002760 <RCC_SetFlashLatencyFromMSIRange>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e38d      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c88:	4b7d      	ldr	r3, [pc, #500]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a7c      	ldr	r2, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001c8e:	f043 0308 	orr.w	r3, r3, #8
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b7a      	ldr	r3, [pc, #488]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4977      	ldr	r1, [pc, #476]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	4972      	ldr	r1, [pc, #456]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
 8001cba:	e025      	b.n	8001d08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cbc:	4b70      	ldr	r3, [pc, #448]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6f      	ldr	r2, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001cc2:	f043 0308 	orr.w	r3, r3, #8
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	496a      	ldr	r1, [pc, #424]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cda:	4b69      	ldr	r3, [pc, #420]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	4965      	ldr	r1, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fd31 	bl	8002760 <RCC_SetFlashLatencyFromMSIRange>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e34d      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d08:	f000 fc36 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	495a      	ldr	r1, [pc, #360]	; (8001e84 <HAL_RCC_OscConfig+0x29c>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <HAL_RCC_OscConfig+0x2a0>)
 8001d26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d28:	4b58      	ldr	r3, [pc, #352]	; (8001e8c <HAL_RCC_OscConfig+0x2a4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fde9 	bl	8000904 <HAL_InitTick>
 8001d32:	4603      	mov	r3, r0
 8001d34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d052      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	e331      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d032      	beq.n	8001dae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d48:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fc02 	bl	800155c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fbfe 	bl	800155c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e31a      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d6e:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a40      	ldr	r2, [pc, #256]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	493b      	ldr	r1, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d98:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	4936      	ldr	r1, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
 8001dac:	e01a      	b.n	8001de4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dae:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a33      	ldr	r2, [pc, #204]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dba:	f7ff fbcf 	bl	800155c <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fbcb 	bl	800155c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e2e7      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x1da>
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d074      	beq.n	8001eda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x21a>
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d10e      	bne.n	8001e1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d10b      	bne.n	8001e1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e02:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d064      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d160      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e2c4      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x24a>
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e01d      	b.n	8001e6e <HAL_RCC_OscConfig+0x286>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3a:	d10c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x26e>
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e00b      	b.n	8001e6e <HAL_RCC_OscConfig+0x286>
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <HAL_RCC_OscConfig+0x298>)
 8001e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01c      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7ff fb71 	bl	800155c <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7c:	e011      	b.n	8001ea2 <HAL_RCC_OscConfig+0x2ba>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08006f84 	.word	0x08006f84
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff fb64 	bl	800155c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e280      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea2:	4baf      	ldr	r3, [pc, #700]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2a8>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fb54 	bl	800155c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fb50 	bl	800155c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e26c      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eca:	4ba5      	ldr	r3, [pc, #660]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2d0>
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d060      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x310>
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d119      	bne.n	8001f26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d116      	bne.n	8001f26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef8:	4b99      	ldr	r3, [pc, #612]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_OscConfig+0x328>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e249      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b93      	ldr	r3, [pc, #588]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	4990      	ldr	r1, [pc, #576]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f24:	e040      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d023      	beq.n	8001f76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2e:	4b8c      	ldr	r3, [pc, #560]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a8b      	ldr	r2, [pc, #556]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fb0f 	bl	800155c <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f42:	f7ff fb0b 	bl	800155c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e227      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f54:	4b82      	ldr	r3, [pc, #520]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b7f      	ldr	r3, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	497c      	ldr	r1, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
 8001f74:	e018      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f76:	4b7a      	ldr	r3, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a79      	ldr	r2, [pc, #484]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff faeb 	bl	800155c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff fae7 	bl	800155c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e203      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f9c:	4b70      	ldr	r3, [pc, #448]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f0      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d03c      	beq.n	800202e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01c      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbc:	4b68      	ldr	r3, [pc, #416]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc2:	4a67      	ldr	r2, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fcc:	f7ff fac6 	bl	800155c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fac2 	bl	800155c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1de      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe6:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ef      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x3ec>
 8001ff4:	e01b      	b.n	800202e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff6:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffc:	4a58      	ldr	r2, [pc, #352]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7ff faa9 	bl	800155c <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200e:	f7ff faa5 	bl	800155c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e1c1      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002020:	4b4f      	ldr	r3, [pc, #316]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1ef      	bne.n	800200e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80a6 	beq.w	8002188 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002040:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10d      	bne.n	8002068 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204c:	4b44      	ldr	r3, [pc, #272]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	4a43      	ldr	r2, [pc, #268]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8002052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002056:	6593      	str	r3, [r2, #88]	; 0x58
 8002058:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002064:	2301      	movs	r3, #1
 8002066:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002068:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <HAL_RCC_OscConfig+0x57c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d118      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002074:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_RCC_OscConfig+0x57c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a3a      	ldr	r2, [pc, #232]	; (8002164 <HAL_RCC_OscConfig+0x57c>)
 800207a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002080:	f7ff fa6c 	bl	800155c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002088:	f7ff fa68 	bl	800155c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e184      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209a:	4b32      	ldr	r3, [pc, #200]	; (8002164 <HAL_RCC_OscConfig+0x57c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d108      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4d8>
 80020ae:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020be:	e024      	b.n	800210a <HAL_RCC_OscConfig+0x522>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d110      	bne.n	80020ea <HAL_RCC_OscConfig+0x502>
 80020c8:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	4a24      	ldr	r2, [pc, #144]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020d8:	4b21      	ldr	r3, [pc, #132]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	4a20      	ldr	r2, [pc, #128]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e8:	e00f      	b.n	800210a <HAL_RCC_OscConfig+0x522>
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	4a17      	ldr	r2, [pc, #92]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8002102:	f023 0304 	bic.w	r3, r3, #4
 8002106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002112:	f7ff fa23 	bl	800155c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7ff fa1f 	bl	800155c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	; 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e139      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x578>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0ed      	beq.n	800211a <HAL_RCC_OscConfig+0x532>
 800213e:	e01a      	b.n	8002176 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7ff fa0c 	bl	800155c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002146:	e00f      	b.n	8002168 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7ff fa08 	bl	800155c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d906      	bls.n	8002168 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e122      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002168:	4b90      	ldr	r3, [pc, #576]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1e8      	bne.n	8002148 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217c:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	4a8a      	ldr	r2, [pc, #552]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002186:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8108 	beq.w	80023a2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	2b02      	cmp	r3, #2
 8002198:	f040 80d0 	bne.w	800233c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800219c:	4b83      	ldr	r3, [pc, #524]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d130      	bne.n	8002212 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	3b01      	subs	r3, #1
 80021bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d127      	bne.n	8002212 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d11f      	bne.n	8002212 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021dc:	2a07      	cmp	r2, #7
 80021de:	bf14      	ite	ne
 80021e0:	2201      	movne	r2, #1
 80021e2:	2200      	moveq	r2, #0
 80021e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d113      	bne.n	8002212 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	3b01      	subs	r3, #1
 80021f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	3b01      	subs	r3, #1
 800220c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d06e      	beq.n	80022f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b0c      	cmp	r3, #12
 8002216:	d069      	beq.n	80022ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002218:	4b64      	ldr	r3, [pc, #400]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002224:	4b61      	ldr	r3, [pc, #388]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b7      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002234:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a5c      	ldr	r2, [pc, #368]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 800223a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800223e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002240:	f7ff f98c 	bl	800155c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff f988 	bl	800155c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0a4      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225a:	4b54      	ldr	r3, [pc, #336]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002266:	4b51      	ldr	r3, [pc, #324]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	4b51      	ldr	r3, [pc, #324]	; (80023b0 <HAL_RCC_OscConfig+0x7c8>)
 800226c:	4013      	ands	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002276:	3a01      	subs	r2, #1
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	4311      	orrs	r1, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002280:	0212      	lsls	r2, r2, #8
 8002282:	4311      	orrs	r1, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002288:	0852      	lsrs	r2, r2, #1
 800228a:	3a01      	subs	r2, #1
 800228c:	0552      	lsls	r2, r2, #21
 800228e:	4311      	orrs	r1, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002294:	0852      	lsrs	r2, r2, #1
 8002296:	3a01      	subs	r2, #1
 8002298:	0652      	lsls	r2, r2, #25
 800229a:	4311      	orrs	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022a0:	0912      	lsrs	r2, r2, #4
 80022a2:	0452      	lsls	r2, r2, #17
 80022a4:	430a      	orrs	r2, r1
 80022a6:	4941      	ldr	r1, [pc, #260]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022ac:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a3e      	ldr	r2, [pc, #248]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 80022b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b8:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a3b      	ldr	r2, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 80022be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022c4:	f7ff f94a 	bl	800155c <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022cc:	f7ff f946 	bl	800155c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e062      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022de:	4b33      	ldr	r3, [pc, #204]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ea:	e05a      	b.n	80023a2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e059      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d152      	bne.n	80023a2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a2a      	ldr	r2, [pc, #168]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002306:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002308:	4b28      	ldr	r3, [pc, #160]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a27      	ldr	r2, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 800230e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002312:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002314:	f7ff f922 	bl	800155c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7ff f91e 	bl	800155c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e03a      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232e:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x734>
 800233a:	e032      	b.n	80023a2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d02d      	beq.n	800239e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a19      	ldr	r2, [pc, #100]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800234c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800234e:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4a13      	ldr	r2, [pc, #76]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002360:	f023 0303 	bic.w	r3, r3, #3
 8002364:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 800236c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002374:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7ff f8f1 	bl	800155c <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7ff f8ed 	bl	800155c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e009      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_OscConfig+0x7c4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x796>
 800239c:	e001      	b.n	80023a2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3720      	adds	r7, #32
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	f99d808c 	.word	0xf99d808c

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0c8      	b.n	800255a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b66      	ldr	r3, [pc, #408]	; (8002564 <HAL_RCC_ClockConfig+0x1b0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d910      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <HAL_RCC_ClockConfig+0x1b0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4961      	ldr	r1, [pc, #388]	; (8002564 <HAL_RCC_ClockConfig+0x1b0>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b5f      	ldr	r3, [pc, #380]	; (8002564 <HAL_RCC_ClockConfig+0x1b0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0b0      	b.n	800255a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d04c      	beq.n	800249e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d107      	bne.n	800241c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240c:	4b56      	ldr	r3, [pc, #344]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d121      	bne.n	800245c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e09e      	b.n	800255a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d107      	bne.n	8002434 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002424:	4b50      	ldr	r3, [pc, #320]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d115      	bne.n	800245c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e092      	b.n	800255a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d109      	bne.n	800245c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e086      	b.n	800255a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800244c:	4b46      	ldr	r3, [pc, #280]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e07e      	b.n	800255a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800245c:	4b42      	ldr	r3, [pc, #264]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 0203 	bic.w	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	493f      	ldr	r1, [pc, #252]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246e:	f7ff f875 	bl	800155c <HAL_GetTick>
 8002472:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002474:	e00a      	b.n	800248c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002476:	f7ff f871 	bl	800155c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e066      	b.n	800255a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248c:	4b36      	ldr	r3, [pc, #216]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 020c 	and.w	r2, r3, #12
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	429a      	cmp	r2, r3
 800249c:	d1eb      	bne.n	8002476 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024aa:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	492c      	ldr	r1, [pc, #176]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024bc:	4b29      	ldr	r3, [pc, #164]	; (8002564 <HAL_RCC_ClockConfig+0x1b0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d210      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCC_ClockConfig+0x1b0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 0207 	bic.w	r2, r3, #7
 80024d2:	4924      	ldr	r1, [pc, #144]	; (8002564 <HAL_RCC_ClockConfig+0x1b0>)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_RCC_ClockConfig+0x1b0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e036      	b.n	800255a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4918      	ldr	r1, [pc, #96]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4910      	ldr	r1, [pc, #64]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800252a:	f000 f825 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 800252e:	4602      	mov	r2, r0
 8002530:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_RCC_ClockConfig+0x1b4>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	490c      	ldr	r1, [pc, #48]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	5ccb      	ldrb	r3, [r1, r3]
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe f9d8 	bl	8000904 <HAL_InitTick>
 8002554:	4603      	mov	r3, r0
 8002556:	72fb      	strb	r3, [r7, #11]

  return status;
 8002558:	7afb      	ldrb	r3, [r7, #11]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40022000 	.word	0x40022000
 8002568:	40021000 	.word	0x40021000
 800256c:	08006f84 	.word	0x08006f84
 8002570:	20000000 	.word	0x20000000
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002586:	4b3e      	ldr	r3, [pc, #248]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x34>
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d121      	bne.n	80025ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d11e      	bne.n	80025ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025ac:	4b34      	ldr	r3, [pc, #208]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e005      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025c8:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025d4:	4a2b      	ldr	r2, [pc, #172]	; (8002684 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10d      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_RCC_GetSysClockFreq+0x110>)
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	e004      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_GetSysClockFreq+0x110>)
 80025fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d134      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d003      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0xa6>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d003      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0xac>
 800261c:	e005      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800261e:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <HAL_RCC_GetSysClockFreq+0x110>)
 8002620:	617b      	str	r3, [r7, #20]
      break;
 8002622:	e005      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002624:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_RCC_GetSysClockFreq+0x110>)
 8002626:	617b      	str	r3, [r7, #20]
      break;
 8002628:	e002      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	617b      	str	r3, [r7, #20]
      break;
 800262e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	3301      	adds	r3, #1
 800263c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	fb02 f203 	mul.w	r2, r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	0e5b      	lsrs	r3, r3, #25
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	3301      	adds	r3, #1
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	fbb2 f3f3 	udiv	r3, r2, r3
 800266e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002670:	69bb      	ldr	r3, [r7, #24]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	08006f9c 	.word	0x08006f9c
 8002688:	00f42400 	.word	0x00f42400

0800268c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000000 	.word	0x20000000

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026a8:	f7ff fff0 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4904      	ldr	r1, [pc, #16]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08006f94 	.word	0x08006f94

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026d4:	f7ff ffda 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0adb      	lsrs	r3, r3, #11
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4904      	ldr	r1, [pc, #16]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08006f94 	.word	0x08006f94

080026fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	220f      	movs	r2, #15
 800270a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0203 	and.w	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800273e:	4b07      	ldr	r3, [pc, #28]	; (800275c <HAL_RCC_GetClockConfig+0x60>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0207 	and.w	r2, r3, #7
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	601a      	str	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	40022000 	.word	0x40022000

08002760 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800276c:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002778:	f7ff f9d2 	bl	8001b20 <HAL_PWREx_GetVoltageRange>
 800277c:	6178      	str	r0, [r7, #20]
 800277e:	e014      	b.n	80027aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002780:	4b25      	ldr	r3, [pc, #148]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	4a24      	ldr	r2, [pc, #144]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278a:	6593      	str	r3, [r2, #88]	; 0x58
 800278c:	4b22      	ldr	r3, [pc, #136]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002798:	f7ff f9c2 	bl	8001b20 <HAL_PWREx_GetVoltageRange>
 800279c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b0:	d10b      	bne.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b80      	cmp	r3, #128	; 0x80
 80027b6:	d919      	bls.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2ba0      	cmp	r3, #160	; 0xa0
 80027bc:	d902      	bls.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027be:	2302      	movs	r3, #2
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	e013      	b.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027c4:	2301      	movs	r3, #1
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	e010      	b.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d902      	bls.n	80027d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027d0:	2303      	movs	r3, #3
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	e00a      	b.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b80      	cmp	r3, #128	; 0x80
 80027da:	d102      	bne.n	80027e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027dc:	2302      	movs	r3, #2
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	e004      	b.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b70      	cmp	r3, #112	; 0x70
 80027e6:	d101      	bne.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027e8:	2301      	movs	r3, #1
 80027ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 0207 	bic.w	r2, r3, #7
 80027f4:	4909      	ldr	r1, [pc, #36]	; (800281c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	429a      	cmp	r2, r3
 8002808:	d001      	beq.n	800280e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	40022000 	.word	0x40022000

08002820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002828:	2300      	movs	r3, #0
 800282a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800282c:	2300      	movs	r3, #0
 800282e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002838:	2b00      	cmp	r3, #0
 800283a:	d041      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002840:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002844:	d02a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002846:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800284a:	d824      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800284c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002850:	d008      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002852:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002856:	d81e      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800285c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002860:	d010      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002862:	e018      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002864:	4b86      	ldr	r3, [pc, #536]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a85      	ldr	r2, [pc, #532]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002870:	e015      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fabb 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002882:	e00c      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3320      	adds	r3, #32
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fba6 	bl	8002fdc <RCCEx_PLLSAI2_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002894:	e003      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	74fb      	strb	r3, [r7, #19]
      break;
 800289a:	e000      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800289c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10b      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a4:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b2:	4973      	ldr	r1, [pc, #460]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ba:	e001      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d041      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028d4:	d02a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028da:	d824      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028e0:	d008      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028e6:	d81e      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f0:	d010      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028f2:	e018      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028f4:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a61      	ldr	r2, [pc, #388]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002900:	e015      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fa73 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002912:	e00c      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3320      	adds	r3, #32
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fb5e 	bl	8002fdc <RCCEx_PLLSAI2_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002924:	e003      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	74fb      	strb	r3, [r7, #19]
      break;
 800292a:	e000      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800292c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10b      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002934:	4b52      	ldr	r3, [pc, #328]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002942:	494f      	ldr	r1, [pc, #316]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800294a:	e001      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80a0 	beq.w	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002972:	2300      	movs	r3, #0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00d      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	4a40      	ldr	r2, [pc, #256]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002982:	6593      	str	r3, [r2, #88]	; 0x58
 8002984:	4b3e      	ldr	r3, [pc, #248]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002990:	2301      	movs	r3, #1
 8002992:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002994:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a3a      	ldr	r2, [pc, #232]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800299a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029a0:	f7fe fddc 	bl	800155c <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029a6:	e009      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a8:	f7fe fdd8 	bl	800155c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d902      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	74fb      	strb	r3, [r7, #19]
        break;
 80029ba:	e005      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029bc:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ef      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d15c      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ce:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01f      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d019      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029f8:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fd97 	bl	800155c <HAL_GetTick>
 8002a2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a30:	e00b      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe fd93 	bl	800155c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d902      	bls.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	74fb      	strb	r3, [r7, #19]
            break;
 8002a48:	e006      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ec      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a6e:	4904      	ldr	r1, [pc, #16]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a76:	e009      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	74bb      	strb	r3, [r7, #18]
 8002a7c:	e006      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a8c:	7c7b      	ldrb	r3, [r7, #17]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d105      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a92:	4b9e      	ldr	r3, [pc, #632]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	4a9d      	ldr	r2, [pc, #628]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aaa:	4b98      	ldr	r3, [pc, #608]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab0:	f023 0203 	bic.w	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	4994      	ldr	r1, [pc, #592]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002acc:	4b8f      	ldr	r3, [pc, #572]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f023 020c 	bic.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	498c      	ldr	r1, [pc, #560]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aee:	4b87      	ldr	r3, [pc, #540]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	4983      	ldr	r1, [pc, #524]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b10:	4b7e      	ldr	r3, [pc, #504]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	497b      	ldr	r1, [pc, #492]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	4972      	ldr	r1, [pc, #456]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b54:	4b6d      	ldr	r3, [pc, #436]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	496a      	ldr	r1, [pc, #424]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b76:	4b65      	ldr	r3, [pc, #404]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	4961      	ldr	r1, [pc, #388]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b98:	4b5c      	ldr	r3, [pc, #368]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	4959      	ldr	r1, [pc, #356]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bba:	4b54      	ldr	r3, [pc, #336]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc8:	4950      	ldr	r1, [pc, #320]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	4948      	ldr	r1, [pc, #288]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bfe:	4b43      	ldr	r3, [pc, #268]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	493f      	ldr	r1, [pc, #252]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d028      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c20:	4b3a      	ldr	r3, [pc, #232]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2e:	4937      	ldr	r1, [pc, #220]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c40:	4b32      	ldr	r3, [pc, #200]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a31      	ldr	r2, [pc, #196]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c4a:	60d3      	str	r3, [r2, #12]
 8002c4c:	e011      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c56:	d10c      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f8c8 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d028      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c7e:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	491f      	ldr	r1, [pc, #124]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c9c:	d106      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ca8:	60d3      	str	r3, [r2, #12]
 8002caa:	e011      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f899 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d02b      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cea:	4908      	ldr	r1, [pc, #32]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cfa:	d109      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a02      	ldr	r2, [pc, #8]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d06:	60d3      	str	r3, [r2, #12]
 8002d08:	e014      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f867 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d02f      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d40:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d4e:	4928      	ldr	r1, [pc, #160]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d5e:	d10d      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3304      	adds	r3, #4
 8002d64:	2102      	movs	r1, #2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f844 	bl	8002df4 <RCCEx_PLLSAI1_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d014      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	74bb      	strb	r3, [r7, #18]
 8002d7a:	e011      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3320      	adds	r3, #32
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f925 	bl	8002fdc <RCCEx_PLLSAI2_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d96:	7cfb      	ldrb	r3, [r7, #19]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d9c:	7cfb      	ldrb	r3, [r7, #19]
 8002d9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dac:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dba:	490d      	ldr	r1, [pc, #52]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dde:	4904      	ldr	r1, [pc, #16]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002de6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000

08002df4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e02:	4b75      	ldr	r3, [pc, #468]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d018      	beq.n	8002e40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e0e:	4b72      	ldr	r3, [pc, #456]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0203 	and.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d10d      	bne.n	8002e3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
       ||
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e26:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
       ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d047      	beq.n	8002eca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	e044      	b.n	8002eca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d018      	beq.n	8002e7a <RCCEx_PLLSAI1_Config+0x86>
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d825      	bhi.n	8002e98 <RCCEx_PLLSAI1_Config+0xa4>
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d002      	beq.n	8002e56 <RCCEx_PLLSAI1_Config+0x62>
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d009      	beq.n	8002e68 <RCCEx_PLLSAI1_Config+0x74>
 8002e54:	e020      	b.n	8002e98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e56:	4b60      	ldr	r3, [pc, #384]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11d      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e66:	e01a      	b.n	8002e9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e68:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d116      	bne.n	8002ea2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e78:	e013      	b.n	8002ea2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e7a:	4b57      	ldr	r3, [pc, #348]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10f      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e86:	4b54      	ldr	r3, [pc, #336]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e96:	e006      	b.n	8002ea6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	e004      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e002      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ea6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eae:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	4944      	ldr	r1, [pc, #272]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d17d      	bne.n	8002fcc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ed0:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a40      	ldr	r2, [pc, #256]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002edc:	f7fe fb3e 	bl	800155c <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ee2:	e009      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ee4:	f7fe fb3a 	bl	800155c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d902      	bls.n	8002ef8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ef6:	e005      	b.n	8002f04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ef8:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ef      	bne.n	8002ee4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d160      	bne.n	8002fcc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d111      	bne.n	8002f34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f10:	4b31      	ldr	r3, [pc, #196]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6892      	ldr	r2, [r2, #8]
 8002f20:	0211      	lsls	r1, r2, #8
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68d2      	ldr	r2, [r2, #12]
 8002f26:	0912      	lsrs	r2, r2, #4
 8002f28:	0452      	lsls	r2, r2, #17
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	492a      	ldr	r1, [pc, #168]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	610b      	str	r3, [r1, #16]
 8002f32:	e027      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d112      	bne.n	8002f60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f3a:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6892      	ldr	r2, [r2, #8]
 8002f4a:	0211      	lsls	r1, r2, #8
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6912      	ldr	r2, [r2, #16]
 8002f50:	0852      	lsrs	r2, r2, #1
 8002f52:	3a01      	subs	r2, #1
 8002f54:	0552      	lsls	r2, r2, #21
 8002f56:	430a      	orrs	r2, r1
 8002f58:	491f      	ldr	r1, [pc, #124]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	610b      	str	r3, [r1, #16]
 8002f5e:	e011      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f60:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6892      	ldr	r2, [r2, #8]
 8002f70:	0211      	lsls	r1, r2, #8
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6952      	ldr	r2, [r2, #20]
 8002f76:	0852      	lsrs	r2, r2, #1
 8002f78:	3a01      	subs	r2, #1
 8002f7a:	0652      	lsls	r2, r2, #25
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	4916      	ldr	r1, [pc, #88]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f84:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a13      	ldr	r2, [pc, #76]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fae4 	bl	800155c <HAL_GetTick>
 8002f94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f96:	e009      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f98:	f7fe fae0 	bl	800155c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d902      	bls.n	8002fac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	73fb      	strb	r3, [r7, #15]
          break;
 8002faa:	e005      	b.n	8002fb8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ef      	beq.n	8002f98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000

08002fdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fea:	4b6a      	ldr	r3, [pc, #424]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d018      	beq.n	8003028 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ff6:	4b67      	ldr	r3, [pc, #412]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0203 	and.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d10d      	bne.n	8003022 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
       ||
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800300e:	4b61      	ldr	r3, [pc, #388]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
       ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d047      	beq.n	80030b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	e044      	b.n	80030b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d018      	beq.n	8003062 <RCCEx_PLLSAI2_Config+0x86>
 8003030:	2b03      	cmp	r3, #3
 8003032:	d825      	bhi.n	8003080 <RCCEx_PLLSAI2_Config+0xa4>
 8003034:	2b01      	cmp	r3, #1
 8003036:	d002      	beq.n	800303e <RCCEx_PLLSAI2_Config+0x62>
 8003038:	2b02      	cmp	r3, #2
 800303a:	d009      	beq.n	8003050 <RCCEx_PLLSAI2_Config+0x74>
 800303c:	e020      	b.n	8003080 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800303e:	4b55      	ldr	r3, [pc, #340]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11d      	bne.n	8003086 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800304e:	e01a      	b.n	8003086 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003050:	4b50      	ldr	r3, [pc, #320]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d116      	bne.n	800308a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003060:	e013      	b.n	800308a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003062:	4b4c      	ldr	r3, [pc, #304]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800306e:	4b49      	ldr	r3, [pc, #292]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800307e:	e006      	b.n	800308e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      break;
 8003084:	e004      	b.n	8003090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003086:	bf00      	nop
 8003088:	e002      	b.n	8003090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800308a:	bf00      	nop
 800308c:	e000      	b.n	8003090 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800308e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003096:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6819      	ldr	r1, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	430b      	orrs	r3, r1
 80030ac:	4939      	ldr	r1, [pc, #228]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d167      	bne.n	8003188 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a35      	ldr	r2, [pc, #212]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c4:	f7fe fa4a 	bl	800155c <HAL_GetTick>
 80030c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030ca:	e009      	b.n	80030e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030cc:	f7fe fa46 	bl	800155c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d902      	bls.n	80030e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	73fb      	strb	r3, [r7, #15]
        break;
 80030de:	e005      	b.n	80030ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030e0:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ef      	bne.n	80030cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d14a      	bne.n	8003188 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d111      	bne.n	800311c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030f8:	4b26      	ldr	r3, [pc, #152]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6892      	ldr	r2, [r2, #8]
 8003108:	0211      	lsls	r1, r2, #8
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68d2      	ldr	r2, [r2, #12]
 800310e:	0912      	lsrs	r2, r2, #4
 8003110:	0452      	lsls	r2, r2, #17
 8003112:	430a      	orrs	r2, r1
 8003114:	491f      	ldr	r1, [pc, #124]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	614b      	str	r3, [r1, #20]
 800311a:	e011      	b.n	8003140 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003124:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6892      	ldr	r2, [r2, #8]
 800312c:	0211      	lsls	r1, r2, #8
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6912      	ldr	r2, [r2, #16]
 8003132:	0852      	lsrs	r2, r2, #1
 8003134:	3a01      	subs	r2, #1
 8003136:	0652      	lsls	r2, r2, #25
 8003138:	430a      	orrs	r2, r1
 800313a:	4916      	ldr	r1, [pc, #88]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313c:	4313      	orrs	r3, r2
 800313e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a13      	ldr	r2, [pc, #76]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fe fa06 	bl	800155c <HAL_GetTick>
 8003150:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003152:	e009      	b.n	8003168 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003154:	f7fe fa02 	bl	800155c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d902      	bls.n	8003168 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	73fb      	strb	r3, [r7, #15]
          break;
 8003166:	e005      	b.n	8003174 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ef      	beq.n	8003154 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	4904      	ldr	r1, [pc, #16]	; (8003194 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003184:	4313      	orrs	r3, r2
 8003186:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000

08003198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e049      	b.n	800323e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f841 	bl	8003246 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 f9f8 	bl	80035cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d001      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e04f      	b.n	8003314 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a23      	ldr	r2, [pc, #140]	; (8003320 <HAL_TIM_Base_Start_IT+0xc4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01d      	beq.n	80032d2 <HAL_TIM_Base_Start_IT+0x76>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d018      	beq.n	80032d2 <HAL_TIM_Base_Start_IT+0x76>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <HAL_TIM_Base_Start_IT+0xc8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_TIM_Base_Start_IT+0x76>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <HAL_TIM_Base_Start_IT+0xcc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_TIM_Base_Start_IT+0x76>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1c      	ldr	r2, [pc, #112]	; (800332c <HAL_TIM_Base_Start_IT+0xd0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_TIM_Base_Start_IT+0x76>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <HAL_TIM_Base_Start_IT+0xd4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_TIM_Base_Start_IT+0x76>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a19      	ldr	r2, [pc, #100]	; (8003334 <HAL_TIM_Base_Start_IT+0xd8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d115      	bne.n	80032fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <HAL_TIM_Base_Start_IT+0xdc>)
 80032da:	4013      	ands	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d015      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0xb4>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ea:	d011      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fc:	e008      	b.n	8003310 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0201 	orr.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e000      	b.n	8003312 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800
 800332c:	40000c00 	.word	0x40000c00
 8003330:	40013400 	.word	0x40013400
 8003334:	40014000 	.word	0x40014000
 8003338:	00010007 	.word	0x00010007

0800333c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d122      	bne.n	8003398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	d11b      	bne.n	8003398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0202 	mvn.w	r2, #2
 8003368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f905 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8f7 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f908 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d122      	bne.n	80033ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d11b      	bne.n	80033ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0204 	mvn.w	r2, #4
 80033bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8db 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8cd 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f8de 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b08      	cmp	r3, #8
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0208 	mvn.w	r2, #8
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2204      	movs	r2, #4
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8b1 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8a3 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8b4 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b10      	cmp	r3, #16
 800344c:	d122      	bne.n	8003494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b10      	cmp	r3, #16
 800345a:	d11b      	bne.n	8003494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0210 	mvn.w	r2, #16
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2208      	movs	r2, #8
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f887 	bl	800358e <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f879 	bl	800357a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f88a 	bl	80035a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10e      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d107      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0201 	mvn.w	r2, #1
 80034b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd f96c 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d10e      	bne.n	80034ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d107      	bne.n	80034ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f914 	bl	8003714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fa:	d10e      	bne.n	800351a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b80      	cmp	r3, #128	; 0x80
 8003508:	d107      	bne.n	800351a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f907 	bl	8003728 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d10e      	bne.n	8003546 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d107      	bne.n	8003546 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800353e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f838 	bl	80035b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b20      	cmp	r3, #32
 8003552:	d10e      	bne.n	8003572 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b20      	cmp	r3, #32
 8003560:	d107      	bne.n	8003572 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f06f 0220 	mvn.w	r2, #32
 800356a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f8c7 	bl	8003700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a40      	ldr	r2, [pc, #256]	; (80036e0 <TIM_Base_SetConfig+0x114>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d013      	beq.n	800360c <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ea:	d00f      	beq.n	800360c <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3d      	ldr	r2, [pc, #244]	; (80036e4 <TIM_Base_SetConfig+0x118>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00b      	beq.n	800360c <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a3c      	ldr	r2, [pc, #240]	; (80036e8 <TIM_Base_SetConfig+0x11c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a3b      	ldr	r2, [pc, #236]	; (80036ec <TIM_Base_SetConfig+0x120>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a3a      	ldr	r2, [pc, #232]	; (80036f0 <TIM_Base_SetConfig+0x124>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d108      	bne.n	800361e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2f      	ldr	r2, [pc, #188]	; (80036e0 <TIM_Base_SetConfig+0x114>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01f      	beq.n	8003666 <TIM_Base_SetConfig+0x9a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362c:	d01b      	beq.n	8003666 <TIM_Base_SetConfig+0x9a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2c      	ldr	r2, [pc, #176]	; (80036e4 <TIM_Base_SetConfig+0x118>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d017      	beq.n	8003666 <TIM_Base_SetConfig+0x9a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2b      	ldr	r2, [pc, #172]	; (80036e8 <TIM_Base_SetConfig+0x11c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <TIM_Base_SetConfig+0x9a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a2a      	ldr	r2, [pc, #168]	; (80036ec <TIM_Base_SetConfig+0x120>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00f      	beq.n	8003666 <TIM_Base_SetConfig+0x9a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a29      	ldr	r2, [pc, #164]	; (80036f0 <TIM_Base_SetConfig+0x124>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00b      	beq.n	8003666 <TIM_Base_SetConfig+0x9a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a28      	ldr	r2, [pc, #160]	; (80036f4 <TIM_Base_SetConfig+0x128>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <TIM_Base_SetConfig+0x9a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a27      	ldr	r2, [pc, #156]	; (80036f8 <TIM_Base_SetConfig+0x12c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d003      	beq.n	8003666 <TIM_Base_SetConfig+0x9a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a26      	ldr	r2, [pc, #152]	; (80036fc <TIM_Base_SetConfig+0x130>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d108      	bne.n	8003678 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <TIM_Base_SetConfig+0x114>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00f      	beq.n	80036c4 <TIM_Base_SetConfig+0xf8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <TIM_Base_SetConfig+0x124>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00b      	beq.n	80036c4 <TIM_Base_SetConfig+0xf8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <TIM_Base_SetConfig+0x128>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d007      	beq.n	80036c4 <TIM_Base_SetConfig+0xf8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a10      	ldr	r2, [pc, #64]	; (80036f8 <TIM_Base_SetConfig+0x12c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d003      	beq.n	80036c4 <TIM_Base_SetConfig+0xf8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <TIM_Base_SetConfig+0x130>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d103      	bne.n	80036cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	615a      	str	r2, [r3, #20]
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40000800 	.word	0x40000800
 80036ec:	40000c00 	.word	0x40000c00
 80036f0:	40013400 	.word	0x40013400
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40014400 	.word	0x40014400
 80036fc:	40014800 	.word	0x40014800

08003700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e040      	b.n	80037d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd f88e 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	; 0x24
 8003768:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f8c0 	bl	8003900 <UART_SetConfig>
 8003780:	4603      	mov	r3, r0
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e022      	b.n	80037d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fb3e 	bl	8003e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fbc5 	bl	8003f58 <UART_CheckIdleState>
 80037ce:	4603      	mov	r3, r0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	f040 8082 	bne.w	80038f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_UART_Transmit+0x26>
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e07a      	b.n	80038f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_UART_Transmit+0x38>
 800380c:	2302      	movs	r3, #2
 800380e:	e073      	b.n	80038f8 <HAL_UART_Transmit+0x120>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2221      	movs	r2, #33	; 0x21
 8003824:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003826:	f7fd fe99 	bl	800155c <HAL_GetTick>
 800382a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	88fa      	ldrh	r2, [r7, #6]
 8003830:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003844:	d108      	bne.n	8003858 <HAL_UART_Transmit+0x80>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d104      	bne.n	8003858 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	e003      	b.n	8003860 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003868:	e02d      	b.n	80038c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	2180      	movs	r1, #128	; 0x80
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fbb8 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e039      	b.n	80038f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003896:	b292      	uxth	r2, r2
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3302      	adds	r3, #2
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e008      	b.n	80038b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	b292      	uxth	r2, r2
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3301      	adds	r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1cb      	bne.n	800386a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	2140      	movs	r1, #64	; 0x40
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fb84 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e005      	b.n	80038f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
  }
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003900:	b5b0      	push	{r4, r5, r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	4313      	orrs	r3, r2
 8003922:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4bad      	ldr	r3, [pc, #692]	; (8003be0 <UART_SetConfig+0x2e0>)
 800392c:	4013      	ands	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	69f9      	ldr	r1, [r7, #28]
 8003934:	430b      	orrs	r3, r1
 8003936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4aa2      	ldr	r2, [pc, #648]	; (8003be4 <UART_SetConfig+0x2e4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	4313      	orrs	r3, r2
 8003966:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	430a      	orrs	r2, r1
 800397a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a99      	ldr	r2, [pc, #612]	; (8003be8 <UART_SetConfig+0x2e8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d121      	bne.n	80039ca <UART_SetConfig+0xca>
 8003986:	4b99      	ldr	r3, [pc, #612]	; (8003bec <UART_SetConfig+0x2ec>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b03      	cmp	r3, #3
 8003992:	d817      	bhi.n	80039c4 <UART_SetConfig+0xc4>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <UART_SetConfig+0x9c>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039b9 	.word	0x080039b9
 80039a4:	080039b3 	.word	0x080039b3
 80039a8:	080039bf 	.word	0x080039bf
 80039ac:	2301      	movs	r3, #1
 80039ae:	76fb      	strb	r3, [r7, #27]
 80039b0:	e0e7      	b.n	8003b82 <UART_SetConfig+0x282>
 80039b2:	2302      	movs	r3, #2
 80039b4:	76fb      	strb	r3, [r7, #27]
 80039b6:	e0e4      	b.n	8003b82 <UART_SetConfig+0x282>
 80039b8:	2304      	movs	r3, #4
 80039ba:	76fb      	strb	r3, [r7, #27]
 80039bc:	e0e1      	b.n	8003b82 <UART_SetConfig+0x282>
 80039be:	2308      	movs	r3, #8
 80039c0:	76fb      	strb	r3, [r7, #27]
 80039c2:	e0de      	b.n	8003b82 <UART_SetConfig+0x282>
 80039c4:	2310      	movs	r3, #16
 80039c6:	76fb      	strb	r3, [r7, #27]
 80039c8:	e0db      	b.n	8003b82 <UART_SetConfig+0x282>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a88      	ldr	r2, [pc, #544]	; (8003bf0 <UART_SetConfig+0x2f0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d132      	bne.n	8003a3a <UART_SetConfig+0x13a>
 80039d4:	4b85      	ldr	r3, [pc, #532]	; (8003bec <UART_SetConfig+0x2ec>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d828      	bhi.n	8003a34 <UART_SetConfig+0x134>
 80039e2:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0xe8>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003a1d 	.word	0x08003a1d
 80039ec:	08003a35 	.word	0x08003a35
 80039f0:	08003a35 	.word	0x08003a35
 80039f4:	08003a35 	.word	0x08003a35
 80039f8:	08003a29 	.word	0x08003a29
 80039fc:	08003a35 	.word	0x08003a35
 8003a00:	08003a35 	.word	0x08003a35
 8003a04:	08003a35 	.word	0x08003a35
 8003a08:	08003a23 	.word	0x08003a23
 8003a0c:	08003a35 	.word	0x08003a35
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a35 	.word	0x08003a35
 8003a18:	08003a2f 	.word	0x08003a2f
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	76fb      	strb	r3, [r7, #27]
 8003a20:	e0af      	b.n	8003b82 <UART_SetConfig+0x282>
 8003a22:	2302      	movs	r3, #2
 8003a24:	76fb      	strb	r3, [r7, #27]
 8003a26:	e0ac      	b.n	8003b82 <UART_SetConfig+0x282>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	76fb      	strb	r3, [r7, #27]
 8003a2c:	e0a9      	b.n	8003b82 <UART_SetConfig+0x282>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	76fb      	strb	r3, [r7, #27]
 8003a32:	e0a6      	b.n	8003b82 <UART_SetConfig+0x282>
 8003a34:	2310      	movs	r3, #16
 8003a36:	76fb      	strb	r3, [r7, #27]
 8003a38:	e0a3      	b.n	8003b82 <UART_SetConfig+0x282>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6d      	ldr	r2, [pc, #436]	; (8003bf4 <UART_SetConfig+0x2f4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d120      	bne.n	8003a86 <UART_SetConfig+0x186>
 8003a44:	4b69      	ldr	r3, [pc, #420]	; (8003bec <UART_SetConfig+0x2ec>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a4e:	2b30      	cmp	r3, #48	; 0x30
 8003a50:	d013      	beq.n	8003a7a <UART_SetConfig+0x17a>
 8003a52:	2b30      	cmp	r3, #48	; 0x30
 8003a54:	d814      	bhi.n	8003a80 <UART_SetConfig+0x180>
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d009      	beq.n	8003a6e <UART_SetConfig+0x16e>
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d810      	bhi.n	8003a80 <UART_SetConfig+0x180>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <UART_SetConfig+0x168>
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d006      	beq.n	8003a74 <UART_SetConfig+0x174>
 8003a66:	e00b      	b.n	8003a80 <UART_SetConfig+0x180>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	76fb      	strb	r3, [r7, #27]
 8003a6c:	e089      	b.n	8003b82 <UART_SetConfig+0x282>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	76fb      	strb	r3, [r7, #27]
 8003a72:	e086      	b.n	8003b82 <UART_SetConfig+0x282>
 8003a74:	2304      	movs	r3, #4
 8003a76:	76fb      	strb	r3, [r7, #27]
 8003a78:	e083      	b.n	8003b82 <UART_SetConfig+0x282>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	76fb      	strb	r3, [r7, #27]
 8003a7e:	e080      	b.n	8003b82 <UART_SetConfig+0x282>
 8003a80:	2310      	movs	r3, #16
 8003a82:	76fb      	strb	r3, [r7, #27]
 8003a84:	e07d      	b.n	8003b82 <UART_SetConfig+0x282>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	; (8003bf8 <UART_SetConfig+0x2f8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d120      	bne.n	8003ad2 <UART_SetConfig+0x1d2>
 8003a90:	4b56      	ldr	r3, [pc, #344]	; (8003bec <UART_SetConfig+0x2ec>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a9c:	d013      	beq.n	8003ac6 <UART_SetConfig+0x1c6>
 8003a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003aa0:	d814      	bhi.n	8003acc <UART_SetConfig+0x1cc>
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d009      	beq.n	8003aba <UART_SetConfig+0x1ba>
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d810      	bhi.n	8003acc <UART_SetConfig+0x1cc>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <UART_SetConfig+0x1b4>
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d006      	beq.n	8003ac0 <UART_SetConfig+0x1c0>
 8003ab2:	e00b      	b.n	8003acc <UART_SetConfig+0x1cc>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	76fb      	strb	r3, [r7, #27]
 8003ab8:	e063      	b.n	8003b82 <UART_SetConfig+0x282>
 8003aba:	2302      	movs	r3, #2
 8003abc:	76fb      	strb	r3, [r7, #27]
 8003abe:	e060      	b.n	8003b82 <UART_SetConfig+0x282>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	e05d      	b.n	8003b82 <UART_SetConfig+0x282>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	76fb      	strb	r3, [r7, #27]
 8003aca:	e05a      	b.n	8003b82 <UART_SetConfig+0x282>
 8003acc:	2310      	movs	r3, #16
 8003ace:	76fb      	strb	r3, [r7, #27]
 8003ad0:	e057      	b.n	8003b82 <UART_SetConfig+0x282>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a49      	ldr	r2, [pc, #292]	; (8003bfc <UART_SetConfig+0x2fc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d125      	bne.n	8003b28 <UART_SetConfig+0x228>
 8003adc:	4b43      	ldr	r3, [pc, #268]	; (8003bec <UART_SetConfig+0x2ec>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aea:	d017      	beq.n	8003b1c <UART_SetConfig+0x21c>
 8003aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af0:	d817      	bhi.n	8003b22 <UART_SetConfig+0x222>
 8003af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af6:	d00b      	beq.n	8003b10 <UART_SetConfig+0x210>
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afc:	d811      	bhi.n	8003b22 <UART_SetConfig+0x222>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <UART_SetConfig+0x20a>
 8003b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b06:	d006      	beq.n	8003b16 <UART_SetConfig+0x216>
 8003b08:	e00b      	b.n	8003b22 <UART_SetConfig+0x222>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	76fb      	strb	r3, [r7, #27]
 8003b0e:	e038      	b.n	8003b82 <UART_SetConfig+0x282>
 8003b10:	2302      	movs	r3, #2
 8003b12:	76fb      	strb	r3, [r7, #27]
 8003b14:	e035      	b.n	8003b82 <UART_SetConfig+0x282>
 8003b16:	2304      	movs	r3, #4
 8003b18:	76fb      	strb	r3, [r7, #27]
 8003b1a:	e032      	b.n	8003b82 <UART_SetConfig+0x282>
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	76fb      	strb	r3, [r7, #27]
 8003b20:	e02f      	b.n	8003b82 <UART_SetConfig+0x282>
 8003b22:	2310      	movs	r3, #16
 8003b24:	76fb      	strb	r3, [r7, #27]
 8003b26:	e02c      	b.n	8003b82 <UART_SetConfig+0x282>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2d      	ldr	r2, [pc, #180]	; (8003be4 <UART_SetConfig+0x2e4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d125      	bne.n	8003b7e <UART_SetConfig+0x27e>
 8003b32:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <UART_SetConfig+0x2ec>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b40:	d017      	beq.n	8003b72 <UART_SetConfig+0x272>
 8003b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b46:	d817      	bhi.n	8003b78 <UART_SetConfig+0x278>
 8003b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4c:	d00b      	beq.n	8003b66 <UART_SetConfig+0x266>
 8003b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b52:	d811      	bhi.n	8003b78 <UART_SetConfig+0x278>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <UART_SetConfig+0x260>
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5c:	d006      	beq.n	8003b6c <UART_SetConfig+0x26c>
 8003b5e:	e00b      	b.n	8003b78 <UART_SetConfig+0x278>
 8003b60:	2300      	movs	r3, #0
 8003b62:	76fb      	strb	r3, [r7, #27]
 8003b64:	e00d      	b.n	8003b82 <UART_SetConfig+0x282>
 8003b66:	2302      	movs	r3, #2
 8003b68:	76fb      	strb	r3, [r7, #27]
 8003b6a:	e00a      	b.n	8003b82 <UART_SetConfig+0x282>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	76fb      	strb	r3, [r7, #27]
 8003b70:	e007      	b.n	8003b82 <UART_SetConfig+0x282>
 8003b72:	2308      	movs	r3, #8
 8003b74:	76fb      	strb	r3, [r7, #27]
 8003b76:	e004      	b.n	8003b82 <UART_SetConfig+0x282>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	76fb      	strb	r3, [r7, #27]
 8003b7c:	e001      	b.n	8003b82 <UART_SetConfig+0x282>
 8003b7e:	2310      	movs	r3, #16
 8003b80:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <UART_SetConfig+0x2e4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	f040 8087 	bne.w	8003c9c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b8e:	7efb      	ldrb	r3, [r7, #27]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d837      	bhi.n	8003c04 <UART_SetConfig+0x304>
 8003b94:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <UART_SetConfig+0x29c>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bc1 	.word	0x08003bc1
 8003ba0:	08003c05 	.word	0x08003c05
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003c05 	.word	0x08003c05
 8003bac:	08003bcf 	.word	0x08003bcf
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003c05 	.word	0x08003c05
 8003bb8:	08003c05 	.word	0x08003c05
 8003bbc:	08003bd7 	.word	0x08003bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f7fe fd70 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003bc4:	6178      	str	r0, [r7, #20]
        break;
 8003bc6:	e022      	b.n	8003c0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <UART_SetConfig+0x300>)
 8003bca:	617b      	str	r3, [r7, #20]
        break;
 8003bcc:	e01f      	b.n	8003c0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bce:	f7fe fcd3 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8003bd2:	6178      	str	r0, [r7, #20]
        break;
 8003bd4:	e01b      	b.n	8003c0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bda:	617b      	str	r3, [r7, #20]
        break;
 8003bdc:	e017      	b.n	8003c0e <UART_SetConfig+0x30e>
 8003bde:	bf00      	nop
 8003be0:	efff69f3 	.word	0xefff69f3
 8003be4:	40008000 	.word	0x40008000
 8003be8:	40013800 	.word	0x40013800
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40004400 	.word	0x40004400
 8003bf4:	40004800 	.word	0x40004800
 8003bf8:	40004c00 	.word	0x40004c00
 8003bfc:	40005000 	.word	0x40005000
 8003c00:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	76bb      	strb	r3, [r7, #26]
        break;
 8003c0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80f1 	beq.w	8003df8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d305      	bcc.n	8003c32 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d902      	bls.n	8003c38 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	76bb      	strb	r3, [r7, #26]
 8003c36:	e0df      	b.n	8003df8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f04f 0100 	mov.w	r1, #0
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	020b      	lsls	r3, r1, #8
 8003c4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c4e:	0202      	lsls	r2, r0, #8
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	6849      	ldr	r1, [r1, #4]
 8003c54:	0849      	lsrs	r1, r1, #1
 8003c56:	4608      	mov	r0, r1
 8003c58:	f04f 0100 	mov.w	r1, #0
 8003c5c:	1814      	adds	r4, r2, r0
 8003c5e:	eb43 0501 	adc.w	r5, r3, r1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	4629      	mov	r1, r5
 8003c70:	f7fc faae 	bl	80001d0 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c82:	d308      	bcc.n	8003c96 <UART_SetConfig+0x396>
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8a:	d204      	bcs.n	8003c96 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	60da      	str	r2, [r3, #12]
 8003c94:	e0b0      	b.n	8003df8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	76bb      	strb	r3, [r7, #26]
 8003c9a:	e0ad      	b.n	8003df8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca4:	d15c      	bne.n	8003d60 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003ca6:	7efb      	ldrb	r3, [r7, #27]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d828      	bhi.n	8003cfe <UART_SetConfig+0x3fe>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <UART_SetConfig+0x3b4>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003cd9 	.word	0x08003cd9
 8003cb8:	08003ce1 	.word	0x08003ce1
 8003cbc:	08003ce9 	.word	0x08003ce9
 8003cc0:	08003cff 	.word	0x08003cff
 8003cc4:	08003cef 	.word	0x08003cef
 8003cc8:	08003cff 	.word	0x08003cff
 8003ccc:	08003cff 	.word	0x08003cff
 8003cd0:	08003cff 	.word	0x08003cff
 8003cd4:	08003cf7 	.word	0x08003cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd8:	f7fe fce4 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003cdc:	6178      	str	r0, [r7, #20]
        break;
 8003cde:	e013      	b.n	8003d08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ce0:	f7fe fcf6 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8003ce4:	6178      	str	r0, [r7, #20]
        break;
 8003ce6:	e00f      	b.n	8003d08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce8:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <UART_SetConfig+0x510>)
 8003cea:	617b      	str	r3, [r7, #20]
        break;
 8003cec:	e00c      	b.n	8003d08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cee:	f7fe fc43 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8003cf2:	6178      	str	r0, [r7, #20]
        break;
 8003cf4:	e008      	b.n	8003d08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfa:	617b      	str	r3, [r7, #20]
        break;
 8003cfc:	e004      	b.n	8003d08 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	76bb      	strb	r3, [r7, #26]
        break;
 8003d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d074      	beq.n	8003df8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	005a      	lsls	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	441a      	add	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b0f      	cmp	r3, #15
 8003d2a:	d916      	bls.n	8003d5a <UART_SetConfig+0x45a>
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d32:	d212      	bcs.n	8003d5a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f023 030f 	bic.w	r3, r3, #15
 8003d3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	89fb      	ldrh	r3, [r7, #14]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	89fa      	ldrh	r2, [r7, #14]
 8003d56:	60da      	str	r2, [r3, #12]
 8003d58:	e04e      	b.n	8003df8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	76bb      	strb	r3, [r7, #26]
 8003d5e:	e04b      	b.n	8003df8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d60:	7efb      	ldrb	r3, [r7, #27]
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d827      	bhi.n	8003db6 <UART_SetConfig+0x4b6>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <UART_SetConfig+0x46c>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	08003da1 	.word	0x08003da1
 8003d78:	08003db7 	.word	0x08003db7
 8003d7c:	08003da7 	.word	0x08003da7
 8003d80:	08003db7 	.word	0x08003db7
 8003d84:	08003db7 	.word	0x08003db7
 8003d88:	08003db7 	.word	0x08003db7
 8003d8c:	08003daf 	.word	0x08003daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7fe fc88 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003d94:	6178      	str	r0, [r7, #20]
        break;
 8003d96:	e013      	b.n	8003dc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d98:	f7fe fc9a 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8003d9c:	6178      	str	r0, [r7, #20]
        break;
 8003d9e:	e00f      	b.n	8003dc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da0:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <UART_SetConfig+0x510>)
 8003da2:	617b      	str	r3, [r7, #20]
        break;
 8003da4:	e00c      	b.n	8003dc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da6:	f7fe fbe7 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8003daa:	6178      	str	r0, [r7, #20]
        break;
 8003dac:	e008      	b.n	8003dc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db2:	617b      	str	r3, [r7, #20]
        break;
 8003db4:	e004      	b.n	8003dc0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	76bb      	strb	r3, [r7, #26]
        break;
 8003dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d018      	beq.n	8003df8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	085a      	lsrs	r2, r3, #1
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	441a      	add	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	d908      	bls.n	8003df4 <UART_SetConfig+0x4f4>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de8:	d204      	bcs.n	8003df4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	e001      	b.n	8003df8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e04:	7ebb      	ldrb	r3, [r7, #26]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	00f42400 	.word	0x00f42400

08003e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01a      	beq.n	8003f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f12:	d10a      	bne.n	8003f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f68:	f7fd faf8 	bl	800155c <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d10e      	bne.n	8003f9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f82d 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e023      	b.n	8003fe2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d10e      	bne.n	8003fc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f817 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e00d      	b.n	8003fe2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffa:	e05e      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004002:	d05a      	beq.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7fd faaa 	bl	800155c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <UART_WaitOnFlagUntilTimeout+0x30>
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d11b      	bne.n	8004052 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004028:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e043      	b.n	80040da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02c      	beq.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800406e:	d124      	bne.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004078:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004088:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e00f      	b.n	80040da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4013      	ands	r3, r2
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d091      	beq.n	8003ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <__NVIC_SetPriority>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	6039      	str	r1, [r7, #0]
 80040ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	db0a      	blt.n	800410e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	490c      	ldr	r1, [pc, #48]	; (8004130 <__NVIC_SetPriority+0x4c>)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	0112      	lsls	r2, r2, #4
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	440b      	add	r3, r1
 8004108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800410c:	e00a      	b.n	8004124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4908      	ldr	r1, [pc, #32]	; (8004134 <__NVIC_SetPriority+0x50>)
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	3b04      	subs	r3, #4
 800411c:	0112      	lsls	r2, r2, #4
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	440b      	add	r3, r1
 8004122:	761a      	strb	r2, [r3, #24]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000e100 	.word	0xe000e100
 8004134:	e000ed00 	.word	0xe000ed00

08004138 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <SysTick_Handler+0x1c>)
 800413e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004140:	f001 fcfe 	bl	8005b40 <xTaskGetSchedulerState>
 8004144:	4603      	mov	r3, r0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d001      	beq.n	800414e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800414a:	f002 fae5 	bl	8006718 <xPortSysTickHandler>
  }
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	e000e010 	.word	0xe000e010

08004158 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800415c:	2100      	movs	r1, #0
 800415e:	f06f 0004 	mvn.w	r0, #4
 8004162:	f7ff ffbf 	bl	80040e4 <__NVIC_SetPriority>
#endif
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004172:	f3ef 8305 	mrs	r3, IPSR
 8004176:	603b      	str	r3, [r7, #0]
  return(result);
 8004178:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800417e:	f06f 0305 	mvn.w	r3, #5
 8004182:	607b      	str	r3, [r7, #4]
 8004184:	e00c      	b.n	80041a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <osKernelInitialize+0x44>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d105      	bne.n	800419a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800418e:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <osKernelInitialize+0x44>)
 8004190:	2201      	movs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004194:	2300      	movs	r3, #0
 8004196:	607b      	str	r3, [r7, #4]
 8004198:	e002      	b.n	80041a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800419e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80041a0:	687b      	ldr	r3, [r7, #4]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20000138 	.word	0x20000138

080041b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ba:	f3ef 8305 	mrs	r3, IPSR
 80041be:	603b      	str	r3, [r7, #0]
  return(result);
 80041c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80041c6:	f06f 0305 	mvn.w	r3, #5
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	e010      	b.n	80041f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <osKernelStart+0x48>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d109      	bne.n	80041ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80041d6:	f7ff ffbf 	bl	8004158 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <osKernelStart+0x48>)
 80041dc:	2202      	movs	r2, #2
 80041de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80041e0:	f001 f866 	bl	80052b0 <vTaskStartScheduler>
      stat = osOK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	e002      	b.n	80041f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80041f0:	687b      	ldr	r3, [r7, #4]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000138 	.word	0x20000138

08004200 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b08e      	sub	sp, #56	; 0x38
 8004204:	af04      	add	r7, sp, #16
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004210:	f3ef 8305 	mrs	r3, IPSR
 8004214:	617b      	str	r3, [r7, #20]
  return(result);
 8004216:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004218:	2b00      	cmp	r3, #0
 800421a:	d17e      	bne.n	800431a <osThreadNew+0x11a>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d07b      	beq.n	800431a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004226:	2318      	movs	r3, #24
 8004228:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800422a:	2300      	movs	r3, #0
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800422e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004232:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d045      	beq.n	80042c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <osThreadNew+0x48>
        name = attr->name;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <osThreadNew+0x6e>
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b38      	cmp	r3, #56	; 0x38
 8004260:	d805      	bhi.n	800426e <osThreadNew+0x6e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <osThreadNew+0x72>
        return (NULL);
 800426e:	2300      	movs	r3, #0
 8004270:	e054      	b.n	800431c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	089b      	lsrs	r3, r3, #2
 8004280:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00e      	beq.n	80042a8 <osThreadNew+0xa8>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b5b      	cmp	r3, #91	; 0x5b
 8004290:	d90a      	bls.n	80042a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <osThreadNew+0xa8>
        mem = 1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	e010      	b.n	80042ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10c      	bne.n	80042ca <osThreadNew+0xca>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d108      	bne.n	80042ca <osThreadNew+0xca>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <osThreadNew+0xca>
          mem = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	e001      	b.n	80042ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d110      	bne.n	80042f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042d8:	9202      	str	r2, [sp, #8]
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	6a3a      	ldr	r2, [r7, #32]
 80042e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fe0c 	bl	8004f04 <xTaskCreateStatic>
 80042ec:	4603      	mov	r3, r0
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	e013      	b.n	800431a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d110      	bne.n	800431a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	f107 0310 	add.w	r3, r7, #16
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 fe57 	bl	8004fbe <xTaskCreate>
 8004310:	4603      	mov	r3, r0
 8004312:	2b01      	cmp	r3, #1
 8004314:	d001      	beq.n	800431a <osThreadNew+0x11a>
            hTask = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800431a:	693b      	ldr	r3, [r7, #16]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3728      	adds	r7, #40	; 0x28
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800432c:	f3ef 8305 	mrs	r3, IPSR
 8004330:	60bb      	str	r3, [r7, #8]
  return(result);
 8004332:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <osDelay+0x1c>
    stat = osErrorISR;
 8004338:	f06f 0305 	mvn.w	r3, #5
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e007      	b.n	8004350 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <osDelay+0x2c>
      vTaskDelay(ticks);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 ff7c 	bl	8005248 <vTaskDelay>
    }
  }

  return (stat);
 8004350:	68fb      	ldr	r3, [r7, #12]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4a07      	ldr	r2, [pc, #28]	; (8004388 <vApplicationGetIdleTaskMemory+0x2c>)
 800436c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4a06      	ldr	r2, [pc, #24]	; (800438c <vApplicationGetIdleTaskMemory+0x30>)
 8004372:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	601a      	str	r2, [r3, #0]
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	2000013c 	.word	0x2000013c
 800438c:	20000198 	.word	0x20000198

08004390 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a07      	ldr	r2, [pc, #28]	; (80043bc <vApplicationGetTimerTaskMemory+0x2c>)
 80043a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4a06      	ldr	r2, [pc, #24]	; (80043c0 <vApplicationGetTimerTaskMemory+0x30>)
 80043a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ae:	601a      	str	r2, [r3, #0]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	20000398 	.word	0x20000398
 80043c0:	200003f4 	.word	0x200003f4

080043c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f103 0208 	add.w	r2, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f103 0208 	add.w	r2, r3, #8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f103 0208 	add.w	r2, r3, #8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800441e:	b480      	push	{r7}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	601a      	str	r2, [r3, #0]
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800447c:	d103      	bne.n	8004486 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e00c      	b.n	80044a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3308      	adds	r3, #8
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e002      	b.n	8004494 <vListInsert+0x2e>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	429a      	cmp	r2, r3
 800449e:	d2f6      	bcs.n	800448e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6892      	ldr	r2, [r2, #8]
 80044ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6852      	ldr	r2, [r2, #4]
 80044f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d103      	bne.n	800450c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004556:	f002 f84d 	bl	80065f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	441a      	add	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	3b01      	subs	r3, #1
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	441a      	add	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	22ff      	movs	r2, #255	; 0xff
 800459a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22ff      	movs	r2, #255	; 0xff
 80045a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d114      	bne.n	80045d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01a      	beq.n	80045ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3310      	adds	r3, #16
 80045b8:	4618      	mov	r0, r3
 80045ba:	f001 f903 	bl	80057c4 <xTaskRemoveFromEventList>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d012      	beq.n	80045ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <xQueueGenericReset+0xcc>)
 80045c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	e009      	b.n	80045ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3310      	adds	r3, #16
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fef2 	bl	80043c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3324      	adds	r3, #36	; 0x24
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff feed 	bl	80043c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045ea:	f002 f833 	bl	8006654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045ee:	2301      	movs	r3, #1
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08e      	sub	sp, #56	; 0x38
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <xQueueGenericCreateStatic+0x52>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <xQueueGenericCreateStatic+0x56>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <xQueueGenericCreateStatic+0x58>
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	623b      	str	r3, [r7, #32]
}
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <xQueueGenericCreateStatic+0x7e>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <xQueueGenericCreateStatic+0x82>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <xQueueGenericCreateStatic+0x84>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	61fb      	str	r3, [r7, #28]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800469a:	2350      	movs	r3, #80	; 0x50
 800469c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b50      	cmp	r3, #80	; 0x50
 80046a2:	d00a      	beq.n	80046ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	61bb      	str	r3, [r7, #24]
}
 80046b6:	bf00      	nop
 80046b8:	e7fe      	b.n	80046b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f805 	bl	80046ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3730      	adds	r7, #48	; 0x30
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e002      	b.n	800470e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800471a:	2101      	movs	r1, #1
 800471c:	69b8      	ldr	r0, [r7, #24]
 800471e:	f7ff ff05 	bl	800452c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08e      	sub	sp, #56	; 0x38
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004742:	2300      	movs	r3, #0
 8004744:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <xQueueGenericSend+0x32>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d103      	bne.n	8004774 <xQueueGenericSend+0x40>
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <xQueueGenericSend+0x44>
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <xQueueGenericSend+0x46>
 8004778:	2300      	movs	r3, #0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <xQueueGenericSend+0x60>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d103      	bne.n	80047a2 <xQueueGenericSend+0x6e>
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <xQueueGenericSend+0x72>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <xQueueGenericSend+0x74>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	623b      	str	r3, [r7, #32]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047c2:	f001 f9bd 	bl	8005b40 <xTaskGetSchedulerState>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <xQueueGenericSend+0x9e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <xQueueGenericSend+0xa2>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <xQueueGenericSend+0xa4>
 80047d6:	2300      	movs	r3, #0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	61fb      	str	r3, [r7, #28]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047f2:	f001 feff 	bl	80065f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <xQueueGenericSend+0xd4>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d129      	bne.n	800485c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800480e:	f000 fa0b 	bl	8004c28 <prvCopyDataToQueue>
 8004812:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d010      	beq.n	800483e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	3324      	adds	r3, #36	; 0x24
 8004820:	4618      	mov	r0, r3
 8004822:	f000 ffcf 	bl	80057c4 <xTaskRemoveFromEventList>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800482c:	4b3f      	ldr	r3, [pc, #252]	; (800492c <xQueueGenericSend+0x1f8>)
 800482e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	e00a      	b.n	8004854 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004844:	4b39      	ldr	r3, [pc, #228]	; (800492c <xQueueGenericSend+0x1f8>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004854:	f001 fefe 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 8004858:	2301      	movs	r3, #1
 800485a:	e063      	b.n	8004924 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004862:	f001 fef7 	bl	8006654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004866:	2300      	movs	r3, #0
 8004868:	e05c      	b.n	8004924 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004870:	f107 0314 	add.w	r3, r7, #20
 8004874:	4618      	mov	r0, r3
 8004876:	f001 f809 	bl	800588c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800487a:	2301      	movs	r3, #1
 800487c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800487e:	f001 fee9 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004882:	f000 fd7b 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004886:	f001 feb5 	bl	80065f4 <vPortEnterCritical>
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004890:	b25b      	sxtb	r3, r3
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004896:	d103      	bne.n	80048a0 <xQueueGenericSend+0x16c>
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048a6:	b25b      	sxtb	r3, r3
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ac:	d103      	bne.n	80048b6 <xQueueGenericSend+0x182>
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b6:	f001 fecd 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048ba:	1d3a      	adds	r2, r7, #4
 80048bc:	f107 0314 	add.w	r3, r7, #20
 80048c0:	4611      	mov	r1, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fff8 	bl	80058b8 <xTaskCheckForTimeOut>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d124      	bne.n	8004918 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048d0:	f000 faa2 	bl	8004e18 <prvIsQueueFull>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d018      	beq.n	800490c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	3310      	adds	r3, #16
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 ff1e 	bl	8005724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ea:	f000 fa2d 	bl	8004d48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048ee:	f000 fd53 	bl	8005398 <xTaskResumeAll>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f47f af7c 	bne.w	80047f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <xQueueGenericSend+0x1f8>)
 80048fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	e772      	b.n	80047f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800490c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800490e:	f000 fa1b 	bl	8004d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004912:	f000 fd41 	bl	8005398 <xTaskResumeAll>
 8004916:	e76c      	b.n	80047f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800491a:	f000 fa15 	bl	8004d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800491e:	f000 fd3b 	bl	8005398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004922:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004924:	4618      	mov	r0, r3
 8004926:	3738      	adds	r7, #56	; 0x38
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	e000ed04 	.word	0xe000ed04

08004930 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b090      	sub	sp, #64	; 0x40
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <xQueueGenericSendFromISR+0x3c>
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <xQueueGenericSendFromISR+0x40>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <xQueueGenericSendFromISR+0x42>
 8004970:	2300      	movs	r3, #0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004988:	bf00      	nop
 800498a:	e7fe      	b.n	800498a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d103      	bne.n	800499a <xQueueGenericSendFromISR+0x6a>
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <xQueueGenericSendFromISR+0x6e>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <xQueueGenericSendFromISR+0x70>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	623b      	str	r3, [r7, #32]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049ba:	f001 fefd 	bl	80067b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049be:	f3ef 8211 	mrs	r2, BASEPRI
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	61fa      	str	r2, [r7, #28]
 80049d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <xQueueGenericSendFromISR+0xbc>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d12f      	bne.n	8004a4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a02:	f000 f911 	bl	8004c28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a0e:	d112      	bne.n	8004a36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d016      	beq.n	8004a46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	3324      	adds	r3, #36	; 0x24
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fed1 	bl	80057c4 <xTaskRemoveFromEventList>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00e      	beq.n	8004a46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e007      	b.n	8004a46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	b25a      	sxtb	r2, r3
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a46:	2301      	movs	r3, #1
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004a4a:	e001      	b.n	8004a50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3740      	adds	r7, #64	; 0x40
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08c      	sub	sp, #48	; 0x30
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <xQueueReceive+0x30>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	623b      	str	r3, [r7, #32]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <xQueueReceive+0x3e>
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <xQueueReceive+0x42>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <xQueueReceive+0x44>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <xQueueReceive+0x5e>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	61fb      	str	r3, [r7, #28]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ac6:	f001 f83b 	bl	8005b40 <xTaskGetSchedulerState>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <xQueueReceive+0x6e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <xQueueReceive+0x72>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <xQueueReceive+0x74>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <xQueueReceive+0x8e>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	61bb      	str	r3, [r7, #24]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004af6:	f001 fd7d 	bl	80065f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01f      	beq.n	8004b46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0a:	f000 f8f7 	bl	8004cfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	1e5a      	subs	r2, r3, #1
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00f      	beq.n	8004b3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	3310      	adds	r3, #16
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fe4e 	bl	80057c4 <xTaskRemoveFromEventList>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	; (8004c24 <xQueueReceive+0x1bc>)
 8004b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b3e:	f001 fd89 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e069      	b.n	8004c1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b4c:	f001 fd82 	bl	8006654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e062      	b.n	8004c1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b5a:	f107 0310 	add.w	r3, r7, #16
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fe94 	bl	800588c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b64:	2301      	movs	r3, #1
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b68:	f001 fd74 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b6c:	f000 fc06 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b70:	f001 fd40 	bl	80065f4 <vPortEnterCritical>
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b7a:	b25b      	sxtb	r3, r3
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b80:	d103      	bne.n	8004b8a <xQueueReceive+0x122>
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b90:	b25b      	sxtb	r3, r3
 8004b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b96:	d103      	bne.n	8004ba0 <xQueueReceive+0x138>
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba0:	f001 fd58 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ba4:	1d3a      	adds	r2, r7, #4
 8004ba6:	f107 0310 	add.w	r3, r7, #16
 8004baa:	4611      	mov	r1, r2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fe83 	bl	80058b8 <xTaskCheckForTimeOut>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d123      	bne.n	8004c00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bba:	f000 f917 	bl	8004dec <prvIsQueueEmpty>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d017      	beq.n	8004bf4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	3324      	adds	r3, #36	; 0x24
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fda9 	bl	8005724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bd4:	f000 f8b8 	bl	8004d48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bd8:	f000 fbde 	bl	8005398 <xTaskResumeAll>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d189      	bne.n	8004af6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004be2:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <xQueueReceive+0x1bc>)
 8004be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	e780      	b.n	8004af6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf6:	f000 f8a7 	bl	8004d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bfa:	f000 fbcd 	bl	8005398 <xTaskResumeAll>
 8004bfe:	e77a      	b.n	8004af6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c02:	f000 f8a1 	bl	8004d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c06:	f000 fbc7 	bl	8005398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c0c:	f000 f8ee 	bl	8004dec <prvIsQueueEmpty>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f43f af6f 	beq.w	8004af6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3730      	adds	r7, #48	; 0x30
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	e000ed04 	.word	0xe000ed04

08004c28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10d      	bne.n	8004c62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d14d      	bne.n	8004cea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 ff92 	bl	8005b7c <xTaskPriorityDisinherit>
 8004c58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	e043      	b.n	8004cea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d119      	bne.n	8004c9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6858      	ldr	r0, [r3, #4]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	461a      	mov	r2, r3
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	f002 f81c 	bl	8006cb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	441a      	add	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d32b      	bcc.n	8004cea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	e026      	b.n	8004cea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68d8      	ldr	r0, [r3, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	f002 f802 	bl	8006cb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	425b      	negs	r3, r3
 8004cb6:	441a      	add	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d207      	bcs.n	8004cd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	425b      	negs	r3, r3
 8004cd2:	441a      	add	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d105      	bne.n	8004cea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cf2:	697b      	ldr	r3, [r7, #20]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d018      	beq.n	8004d40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	441a      	add	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d303      	bcc.n	8004d30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68d9      	ldr	r1, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	461a      	mov	r2, r3
 8004d3a:	6838      	ldr	r0, [r7, #0]
 8004d3c:	f001 ffb8 	bl	8006cb0 <memcpy>
	}
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d50:	f001 fc50 	bl	80065f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d5c:	e011      	b.n	8004d82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d012      	beq.n	8004d8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3324      	adds	r3, #36	; 0x24
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fd2a 	bl	80057c4 <xTaskRemoveFromEventList>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d76:	f000 fe01 	bl	800597c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	dce9      	bgt.n	8004d5e <prvUnlockQueue+0x16>
 8004d8a:	e000      	b.n	8004d8e <prvUnlockQueue+0x46>
					break;
 8004d8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	22ff      	movs	r2, #255	; 0xff
 8004d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d96:	f001 fc5d 	bl	8006654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d9a:	f001 fc2b 	bl	80065f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004da4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004da6:	e011      	b.n	8004dcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d012      	beq.n	8004dd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3310      	adds	r3, #16
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fd05 	bl	80057c4 <xTaskRemoveFromEventList>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004dc0:	f000 fddc 	bl	800597c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dc4:	7bbb      	ldrb	r3, [r7, #14]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	dce9      	bgt.n	8004da8 <prvUnlockQueue+0x60>
 8004dd4:	e000      	b.n	8004dd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	22ff      	movs	r2, #255	; 0xff
 8004ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004de0:	f001 fc38 	bl	8006654 <vPortExitCritical>
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004df4:	f001 fbfe 	bl	80065f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	e001      	b.n	8004e0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e0a:	f001 fc23 	bl	8006654 <vPortExitCritical>

	return xReturn;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e20:	f001 fbe8 	bl	80065f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d102      	bne.n	8004e36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e001      	b.n	8004e3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e3a:	f001 fc0b 	bl	8006654 <vPortExitCritical>

	return xReturn;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e014      	b.n	8004e82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e58:	4a0f      	ldr	r2, [pc, #60]	; (8004e98 <vQueueAddToRegistry+0x50>)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e64:	490c      	ldr	r1, [pc, #48]	; (8004e98 <vQueueAddToRegistry+0x50>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e6e:	4a0a      	ldr	r2, [pc, #40]	; (8004e98 <vQueueAddToRegistry+0x50>)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	4413      	add	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e7a:	e006      	b.n	8004e8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b07      	cmp	r3, #7
 8004e86:	d9e7      	bls.n	8004e58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20001a54 	.word	0x20001a54

08004e9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004eac:	f001 fba2 	bl	80065f4 <vPortEnterCritical>
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb6:	b25b      	sxtb	r3, r3
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ebc:	d103      	bne.n	8004ec6 <vQueueWaitForMessageRestricted+0x2a>
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ecc:	b25b      	sxtb	r3, r3
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ed2:	d103      	bne.n	8004edc <vQueueWaitForMessageRestricted+0x40>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004edc:	f001 fbba 	bl	8006654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	3324      	adds	r3, #36	; 0x24
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fc3b 	bl	800576c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ef6:	6978      	ldr	r0, [r7, #20]
 8004ef8:	f7ff ff26 	bl	8004d48 <prvUnlockQueue>
	}
 8004efc:	bf00      	nop
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08e      	sub	sp, #56	; 0x38
 8004f08:	af04      	add	r7, sp, #16
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	623b      	str	r3, [r7, #32]
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <xTaskCreateStatic+0x46>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	61fb      	str	r3, [r7, #28]
}
 8004f46:	bf00      	nop
 8004f48:	e7fe      	b.n	8004f48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f4a:	235c      	movs	r3, #92	; 0x5c
 8004f4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b5c      	cmp	r3, #92	; 0x5c
 8004f52:	d00a      	beq.n	8004f6a <xTaskCreateStatic+0x66>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	61bb      	str	r3, [r7, #24]
}
 8004f66:	bf00      	nop
 8004f68:	e7fe      	b.n	8004f68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d01e      	beq.n	8004fb0 <xTaskCreateStatic+0xac>
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01b      	beq.n	8004fb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9303      	str	r3, [sp, #12]
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	f107 0314 	add.w	r3, r7, #20
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f850 	bl	8005048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004faa:	f000 f8dd 	bl	8005168 <prvAddNewTaskToReadyList>
 8004fae:	e001      	b.n	8004fb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fb4:	697b      	ldr	r3, [r7, #20]
	}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3728      	adds	r7, #40	; 0x28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b08c      	sub	sp, #48	; 0x30
 8004fc2:	af04      	add	r7, sp, #16
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 fc30 	bl	8006838 <pvPortMalloc>
 8004fd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00e      	beq.n	8004ffe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fe0:	205c      	movs	r0, #92	; 0x5c
 8004fe2:	f001 fc29 	bl	8006838 <pvPortMalloc>
 8004fe6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ff4:	e005      	b.n	8005002 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ff6:	6978      	ldr	r0, [r7, #20]
 8004ff8:	f001 fcea 	bl	80069d0 <vPortFree>
 8004ffc:	e001      	b.n	8005002 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d017      	beq.n	8005038 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	2300      	movs	r3, #0
 8005014:	9303      	str	r3, [sp, #12]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	9302      	str	r3, [sp, #8]
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f80e 	bl	8005048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800502c:	69f8      	ldr	r0, [r7, #28]
 800502e:	f000 f89b 	bl	8005168 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005032:	2301      	movs	r3, #1
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	e002      	b.n	800503e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800503c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800503e:	69bb      	ldr	r3, [r7, #24]
	}
 8005040:	4618      	mov	r0, r3
 8005042:	3720      	adds	r7, #32
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	461a      	mov	r2, r3
 8005060:	21a5      	movs	r1, #165	; 0xa5
 8005062:	f001 fe33 	bl	8006ccc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005070:	3b01      	subs	r3, #1
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f023 0307 	bic.w	r3, r3, #7
 800507e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	617b      	str	r3, [r7, #20]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01f      	beq.n	80050e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e012      	b.n	80050d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	4413      	add	r3, r2
 80050b2:	7819      	ldrb	r1, [r3, #0]
 80050b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	3334      	adds	r3, #52	; 0x34
 80050bc:	460a      	mov	r2, r1
 80050be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d006      	beq.n	80050da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	3301      	adds	r3, #1
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2b0f      	cmp	r3, #15
 80050d6:	d9e9      	bls.n	80050ac <prvInitialiseNewTask+0x64>
 80050d8:	e000      	b.n	80050dc <prvInitialiseNewTask+0x94>
			{
				break;
 80050da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050e4:	e003      	b.n	80050ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	2b37      	cmp	r3, #55	; 0x37
 80050f2:	d901      	bls.n	80050f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050f4:	2337      	movs	r3, #55	; 0x37
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005102:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	2200      	movs	r2, #0
 8005108:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	3304      	adds	r3, #4
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff f978 	bl	8004404 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	3318      	adds	r3, #24
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff f973 	bl	8004404 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005122:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005132:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	2200      	movs	r2, #0
 8005138:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	68f9      	ldr	r1, [r7, #12]
 8005146:	69b8      	ldr	r0, [r7, #24]
 8005148:	f001 f928 	bl	800639c <pxPortInitialiseStack>
 800514c:	4602      	mov	r2, r0
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800515c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800515e:	bf00      	nop
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005170:	f001 fa40 	bl	80065f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005174:	4b2d      	ldr	r3, [pc, #180]	; (800522c <prvAddNewTaskToReadyList+0xc4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	4a2c      	ldr	r2, [pc, #176]	; (800522c <prvAddNewTaskToReadyList+0xc4>)
 800517c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800517e:	4b2c      	ldr	r3, [pc, #176]	; (8005230 <prvAddNewTaskToReadyList+0xc8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005186:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <prvAddNewTaskToReadyList+0xc8>)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800518c:	4b27      	ldr	r3, [pc, #156]	; (800522c <prvAddNewTaskToReadyList+0xc4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d110      	bne.n	80051b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005194:	f000 fc16 	bl	80059c4 <prvInitialiseTaskLists>
 8005198:	e00d      	b.n	80051b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800519a:	4b26      	ldr	r3, [pc, #152]	; (8005234 <prvAddNewTaskToReadyList+0xcc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051a2:	4b23      	ldr	r3, [pc, #140]	; (8005230 <prvAddNewTaskToReadyList+0xc8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d802      	bhi.n	80051b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051b0:	4a1f      	ldr	r2, [pc, #124]	; (8005230 <prvAddNewTaskToReadyList+0xc8>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051b6:	4b20      	ldr	r3, [pc, #128]	; (8005238 <prvAddNewTaskToReadyList+0xd0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3301      	adds	r3, #1
 80051bc:	4a1e      	ldr	r2, [pc, #120]	; (8005238 <prvAddNewTaskToReadyList+0xd0>)
 80051be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051c0:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <prvAddNewTaskToReadyList+0xd0>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <prvAddNewTaskToReadyList+0xd4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d903      	bls.n	80051dc <prvAddNewTaskToReadyList+0x74>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	4a18      	ldr	r2, [pc, #96]	; (800523c <prvAddNewTaskToReadyList+0xd4>)
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4a15      	ldr	r2, [pc, #84]	; (8005240 <prvAddNewTaskToReadyList+0xd8>)
 80051ea:	441a      	add	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f7ff f913 	bl	800441e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051f8:	f001 fa2c 	bl	8006654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051fc:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <prvAddNewTaskToReadyList+0xcc>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00e      	beq.n	8005222 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <prvAddNewTaskToReadyList+0xc8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	429a      	cmp	r2, r3
 8005210:	d207      	bcs.n	8005222 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005212:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <prvAddNewTaskToReadyList+0xdc>)
 8005214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000cc8 	.word	0x20000cc8
 8005230:	200007f4 	.word	0x200007f4
 8005234:	20000cd4 	.word	0x20000cd4
 8005238:	20000ce4 	.word	0x20000ce4
 800523c:	20000cd0 	.word	0x20000cd0
 8005240:	200007f8 	.word	0x200007f8
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d017      	beq.n	800528a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <vTaskDelay+0x60>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <vTaskDelay+0x30>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	60bb      	str	r3, [r7, #8]
}
 8005274:	bf00      	nop
 8005276:	e7fe      	b.n	8005276 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005278:	f000 f880 	bl	800537c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800527c:	2100      	movs	r1, #0
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fcea 	bl	8005c58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005284:	f000 f888 	bl	8005398 <xTaskResumeAll>
 8005288:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d107      	bne.n	80052a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005290:	4b06      	ldr	r3, [pc, #24]	; (80052ac <vTaskDelay+0x64>)
 8005292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20000cf0 	.word	0x20000cf0
 80052ac:	e000ed04 	.word	0xe000ed04

080052b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08a      	sub	sp, #40	; 0x28
 80052b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052be:	463a      	mov	r2, r7
 80052c0:	1d39      	adds	r1, r7, #4
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff f848 	bl	800435c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	9202      	str	r2, [sp, #8]
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	2300      	movs	r3, #0
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	2300      	movs	r3, #0
 80052dc:	460a      	mov	r2, r1
 80052de:	4921      	ldr	r1, [pc, #132]	; (8005364 <vTaskStartScheduler+0xb4>)
 80052e0:	4821      	ldr	r0, [pc, #132]	; (8005368 <vTaskStartScheduler+0xb8>)
 80052e2:	f7ff fe0f 	bl	8004f04 <xTaskCreateStatic>
 80052e6:	4603      	mov	r3, r0
 80052e8:	4a20      	ldr	r2, [pc, #128]	; (800536c <vTaskStartScheduler+0xbc>)
 80052ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052ec:	4b1f      	ldr	r3, [pc, #124]	; (800536c <vTaskStartScheduler+0xbc>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052f4:	2301      	movs	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	e001      	b.n	80052fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d102      	bne.n	800530a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005304:	f000 fcfc 	bl	8005d00 <xTimerCreateTimerTask>
 8005308:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d116      	bne.n	800533e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	613b      	str	r3, [r7, #16]
}
 8005322:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005324:	4b12      	ldr	r3, [pc, #72]	; (8005370 <vTaskStartScheduler+0xc0>)
 8005326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800532a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800532c:	4b11      	ldr	r3, [pc, #68]	; (8005374 <vTaskStartScheduler+0xc4>)
 800532e:	2201      	movs	r2, #1
 8005330:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <vTaskStartScheduler+0xc8>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005338:	f001 f8ba 	bl	80064b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800533c:	e00e      	b.n	800535c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005344:	d10a      	bne.n	800535c <vTaskStartScheduler+0xac>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	60fb      	str	r3, [r7, #12]
}
 8005358:	bf00      	nop
 800535a:	e7fe      	b.n	800535a <vTaskStartScheduler+0xaa>
}
 800535c:	bf00      	nop
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	08006f48 	.word	0x08006f48
 8005368:	08005995 	.word	0x08005995
 800536c:	20000cec 	.word	0x20000cec
 8005370:	20000ce8 	.word	0x20000ce8
 8005374:	20000cd4 	.word	0x20000cd4
 8005378:	20000ccc 	.word	0x20000ccc

0800537c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <vTaskSuspendAll+0x18>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a03      	ldr	r2, [pc, #12]	; (8005394 <vTaskSuspendAll+0x18>)
 8005388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800538a:	bf00      	nop
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	20000cf0 	.word	0x20000cf0

08005398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053a6:	4b42      	ldr	r3, [pc, #264]	; (80054b0 <xTaskResumeAll+0x118>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	603b      	str	r3, [r7, #0]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053c4:	f001 f916 	bl	80065f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053c8:	4b39      	ldr	r3, [pc, #228]	; (80054b0 <xTaskResumeAll+0x118>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	4a38      	ldr	r2, [pc, #224]	; (80054b0 <xTaskResumeAll+0x118>)
 80053d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053d2:	4b37      	ldr	r3, [pc, #220]	; (80054b0 <xTaskResumeAll+0x118>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d162      	bne.n	80054a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053da:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <xTaskResumeAll+0x11c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d05e      	beq.n	80054a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053e2:	e02f      	b.n	8005444 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e4:	4b34      	ldr	r3, [pc, #208]	; (80054b8 <xTaskResumeAll+0x120>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3318      	adds	r3, #24
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff f871 	bl	80044d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff f86c 	bl	80044d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	4b2d      	ldr	r3, [pc, #180]	; (80054bc <xTaskResumeAll+0x124>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d903      	bls.n	8005414 <xTaskResumeAll+0x7c>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	4a2a      	ldr	r2, [pc, #168]	; (80054bc <xTaskResumeAll+0x124>)
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <xTaskResumeAll+0x128>)
 8005422:	441a      	add	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f7fe fff7 	bl	800441e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <xTaskResumeAll+0x12c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	429a      	cmp	r2, r3
 800543c:	d302      	bcc.n	8005444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800543e:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <xTaskResumeAll+0x130>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005444:	4b1c      	ldr	r3, [pc, #112]	; (80054b8 <xTaskResumeAll+0x120>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1cb      	bne.n	80053e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005452:	f000 fb55 	bl	8005b00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <xTaskResumeAll+0x134>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d010      	beq.n	8005484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005462:	f000 f847 	bl	80054f4 <xTaskIncrementTick>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800546c:	4b16      	ldr	r3, [pc, #88]	; (80054c8 <xTaskResumeAll+0x130>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3b01      	subs	r3, #1
 8005476:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f1      	bne.n	8005462 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800547e:	4b13      	ldr	r3, [pc, #76]	; (80054cc <xTaskResumeAll+0x134>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005484:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <xTaskResumeAll+0x130>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <xTaskResumeAll+0x138>)
 8005492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054a0:	f001 f8d8 	bl	8006654 <vPortExitCritical>

	return xAlreadyYielded;
 80054a4:	68bb      	ldr	r3, [r7, #8]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000cf0 	.word	0x20000cf0
 80054b4:	20000cc8 	.word	0x20000cc8
 80054b8:	20000c88 	.word	0x20000c88
 80054bc:	20000cd0 	.word	0x20000cd0
 80054c0:	200007f8 	.word	0x200007f8
 80054c4:	200007f4 	.word	0x200007f4
 80054c8:	20000cdc 	.word	0x20000cdc
 80054cc:	20000cd8 	.word	0x20000cd8
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <xTaskGetTickCount+0x1c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054e0:	687b      	ldr	r3, [r7, #4]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000ccc 	.word	0x20000ccc

080054f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054fe:	4b4f      	ldr	r3, [pc, #316]	; (800563c <xTaskIncrementTick+0x148>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 808f 	bne.w	8005626 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005508:	4b4d      	ldr	r3, [pc, #308]	; (8005640 <xTaskIncrementTick+0x14c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3301      	adds	r3, #1
 800550e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005510:	4a4b      	ldr	r2, [pc, #300]	; (8005640 <xTaskIncrementTick+0x14c>)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d120      	bne.n	800555e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800551c:	4b49      	ldr	r3, [pc, #292]	; (8005644 <xTaskIncrementTick+0x150>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <xTaskIncrementTick+0x48>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	603b      	str	r3, [r7, #0]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <xTaskIncrementTick+0x46>
 800553c:	4b41      	ldr	r3, [pc, #260]	; (8005644 <xTaskIncrementTick+0x150>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	4b41      	ldr	r3, [pc, #260]	; (8005648 <xTaskIncrementTick+0x154>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a3f      	ldr	r2, [pc, #252]	; (8005644 <xTaskIncrementTick+0x150>)
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	4a3f      	ldr	r2, [pc, #252]	; (8005648 <xTaskIncrementTick+0x154>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b3e      	ldr	r3, [pc, #248]	; (800564c <xTaskIncrementTick+0x158>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a3d      	ldr	r2, [pc, #244]	; (800564c <xTaskIncrementTick+0x158>)
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	f000 fad1 	bl	8005b00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800555e:	4b3c      	ldr	r3, [pc, #240]	; (8005650 <xTaskIncrementTick+0x15c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	429a      	cmp	r2, r3
 8005566:	d349      	bcc.n	80055fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005568:	4b36      	ldr	r3, [pc, #216]	; (8005644 <xTaskIncrementTick+0x150>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d104      	bne.n	800557c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005572:	4b37      	ldr	r3, [pc, #220]	; (8005650 <xTaskIncrementTick+0x15c>)
 8005574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005578:	601a      	str	r2, [r3, #0]
					break;
 800557a:	e03f      	b.n	80055fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800557c:	4b31      	ldr	r3, [pc, #196]	; (8005644 <xTaskIncrementTick+0x150>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d203      	bcs.n	800559c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005594:	4a2e      	ldr	r2, [pc, #184]	; (8005650 <xTaskIncrementTick+0x15c>)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800559a:	e02f      	b.n	80055fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	3304      	adds	r3, #4
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe ff99 	bl	80044d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	3318      	adds	r3, #24
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe ff90 	bl	80044d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	4b25      	ldr	r3, [pc, #148]	; (8005654 <xTaskIncrementTick+0x160>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d903      	bls.n	80055cc <xTaskIncrementTick+0xd8>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	4a22      	ldr	r2, [pc, #136]	; (8005654 <xTaskIncrementTick+0x160>)
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4a1f      	ldr	r2, [pc, #124]	; (8005658 <xTaskIncrementTick+0x164>)
 80055da:	441a      	add	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	3304      	adds	r3, #4
 80055e0:	4619      	mov	r1, r3
 80055e2:	4610      	mov	r0, r2
 80055e4:	f7fe ff1b 	bl	800441e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	4b1b      	ldr	r3, [pc, #108]	; (800565c <xTaskIncrementTick+0x168>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d3b8      	bcc.n	8005568 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80055f6:	2301      	movs	r3, #1
 80055f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055fa:	e7b5      	b.n	8005568 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055fc:	4b17      	ldr	r3, [pc, #92]	; (800565c <xTaskIncrementTick+0x168>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005602:	4915      	ldr	r1, [pc, #84]	; (8005658 <xTaskIncrementTick+0x164>)
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d901      	bls.n	8005618 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005614:	2301      	movs	r3, #1
 8005616:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005618:	4b11      	ldr	r3, [pc, #68]	; (8005660 <xTaskIncrementTick+0x16c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005620:	2301      	movs	r3, #1
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e004      	b.n	8005630 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005626:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <xTaskIncrementTick+0x170>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3301      	adds	r3, #1
 800562c:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <xTaskIncrementTick+0x170>)
 800562e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005630:	697b      	ldr	r3, [r7, #20]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000cf0 	.word	0x20000cf0
 8005640:	20000ccc 	.word	0x20000ccc
 8005644:	20000c80 	.word	0x20000c80
 8005648:	20000c84 	.word	0x20000c84
 800564c:	20000ce0 	.word	0x20000ce0
 8005650:	20000ce8 	.word	0x20000ce8
 8005654:	20000cd0 	.word	0x20000cd0
 8005658:	200007f8 	.word	0x200007f8
 800565c:	200007f4 	.word	0x200007f4
 8005660:	20000cdc 	.word	0x20000cdc
 8005664:	20000cd8 	.word	0x20000cd8

08005668 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800566e:	4b28      	ldr	r3, [pc, #160]	; (8005710 <vTaskSwitchContext+0xa8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005676:	4b27      	ldr	r3, [pc, #156]	; (8005714 <vTaskSwitchContext+0xac>)
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800567c:	e041      	b.n	8005702 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800567e:	4b25      	ldr	r3, [pc, #148]	; (8005714 <vTaskSwitchContext+0xac>)
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <vTaskSwitchContext+0xb0>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e010      	b.n	80056ae <vTaskSwitchContext+0x46>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	607b      	str	r3, [r7, #4]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <vTaskSwitchContext+0x3e>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	491b      	ldr	r1, [pc, #108]	; (800571c <vTaskSwitchContext+0xb4>)
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0e4      	beq.n	800568c <vTaskSwitchContext+0x24>
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4a13      	ldr	r2, [pc, #76]	; (800571c <vTaskSwitchContext+0xb4>)
 80056ce:	4413      	add	r3, r2
 80056d0:	60bb      	str	r3, [r7, #8]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	605a      	str	r2, [r3, #4]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	3308      	adds	r3, #8
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d104      	bne.n	80056f2 <vTaskSwitchContext+0x8a>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	605a      	str	r2, [r3, #4]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4a09      	ldr	r2, [pc, #36]	; (8005720 <vTaskSwitchContext+0xb8>)
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	4a06      	ldr	r2, [pc, #24]	; (8005718 <vTaskSwitchContext+0xb0>)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6013      	str	r3, [r2, #0]
}
 8005702:	bf00      	nop
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20000cf0 	.word	0x20000cf0
 8005714:	20000cdc 	.word	0x20000cdc
 8005718:	20000cd0 	.word	0x20000cd0
 800571c:	200007f8 	.word	0x200007f8
 8005720:	200007f4 	.word	0x200007f4

08005724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	60fb      	str	r3, [r7, #12]
}
 8005746:	bf00      	nop
 8005748:	e7fe      	b.n	8005748 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800574a:	4b07      	ldr	r3, [pc, #28]	; (8005768 <vTaskPlaceOnEventList+0x44>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3318      	adds	r3, #24
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fe fe87 	bl	8004466 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005758:	2101      	movs	r1, #1
 800575a:	6838      	ldr	r0, [r7, #0]
 800575c:	f000 fa7c 	bl	8005c58 <prvAddCurrentTaskToDelayedList>
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	200007f4 	.word	0x200007f4

0800576c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	617b      	str	r3, [r7, #20]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005794:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3318      	adds	r3, #24
 800579a:	4619      	mov	r1, r3
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7fe fe3e 	bl	800441e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	68b8      	ldr	r0, [r7, #8]
 80057b2:	f000 fa51 	bl	8005c58 <prvAddCurrentTaskToDelayedList>
	}
 80057b6:	bf00      	nop
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	200007f4 	.word	0x200007f4

080057c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	60fb      	str	r3, [r7, #12]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	3318      	adds	r3, #24
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe fe6f 	bl	80044d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057fa:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <xTaskRemoveFromEventList+0xb0>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d11d      	bne.n	800583e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	3304      	adds	r3, #4
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe fe66 	bl	80044d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	4b19      	ldr	r3, [pc, #100]	; (8005878 <xTaskRemoveFromEventList+0xb4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d903      	bls.n	8005820 <xTaskRemoveFromEventList+0x5c>
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	4a16      	ldr	r2, [pc, #88]	; (8005878 <xTaskRemoveFromEventList+0xb4>)
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4a13      	ldr	r2, [pc, #76]	; (800587c <xTaskRemoveFromEventList+0xb8>)
 800582e:	441a      	add	r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f7fe fdf1 	bl	800441e <vListInsertEnd>
 800583c:	e005      	b.n	800584a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	3318      	adds	r3, #24
 8005842:	4619      	mov	r1, r3
 8005844:	480e      	ldr	r0, [pc, #56]	; (8005880 <xTaskRemoveFromEventList+0xbc>)
 8005846:	f7fe fdea 	bl	800441e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <xTaskRemoveFromEventList+0xc0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	429a      	cmp	r2, r3
 8005856:	d905      	bls.n	8005864 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005858:	2301      	movs	r3, #1
 800585a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <xTaskRemoveFromEventList+0xc4>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	e001      	b.n	8005868 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005868:	697b      	ldr	r3, [r7, #20]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000cf0 	.word	0x20000cf0
 8005878:	20000cd0 	.word	0x20000cd0
 800587c:	200007f8 	.word	0x200007f8
 8005880:	20000c88 	.word	0x20000c88
 8005884:	200007f4 	.word	0x200007f4
 8005888:	20000cdc 	.word	0x20000cdc

0800588c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005894:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <vTaskInternalSetTimeOutState+0x24>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800589c:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <vTaskInternalSetTimeOutState+0x28>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	605a      	str	r2, [r3, #4]
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000ce0 	.word	0x20000ce0
 80058b4:	20000ccc 	.word	0x20000ccc

080058b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	613b      	str	r3, [r7, #16]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10a      	bne.n	80058fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	60fb      	str	r3, [r7, #12]
}
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058fa:	f000 fe7b 	bl	80065f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <xTaskCheckForTimeOut+0xbc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005916:	d102      	bne.n	800591e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005918:	2300      	movs	r3, #0
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	e023      	b.n	8005966 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <xTaskCheckForTimeOut+0xc0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d007      	beq.n	800593a <xTaskCheckForTimeOut+0x82>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	429a      	cmp	r2, r3
 8005932:	d302      	bcc.n	800593a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005934:	2301      	movs	r3, #1
 8005936:	61fb      	str	r3, [r7, #28]
 8005938:	e015      	b.n	8005966 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	429a      	cmp	r2, r3
 8005942:	d20b      	bcs.n	800595c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1ad2      	subs	r2, r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff ff9b 	bl	800588c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	e004      	b.n	8005966 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005962:	2301      	movs	r3, #1
 8005964:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005966:	f000 fe75 	bl	8006654 <vPortExitCritical>

	return xReturn;
 800596a:	69fb      	ldr	r3, [r7, #28]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3720      	adds	r7, #32
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000ccc 	.word	0x20000ccc
 8005978:	20000ce0 	.word	0x20000ce0

0800597c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <vTaskMissedYield+0x14>)
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	20000cdc 	.word	0x20000cdc

08005994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800599c:	f000 f852 	bl	8005a44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <prvIdleTask+0x28>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d9f9      	bls.n	800599c <prvIdleTask+0x8>
			{
				taskYIELD();
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <prvIdleTask+0x2c>)
 80059aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059b8:	e7f0      	b.n	800599c <prvIdleTask+0x8>
 80059ba:	bf00      	nop
 80059bc:	200007f8 	.word	0x200007f8
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ca:	2300      	movs	r3, #0
 80059cc:	607b      	str	r3, [r7, #4]
 80059ce:	e00c      	b.n	80059ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <prvInitialiseTaskLists+0x60>)
 80059dc:	4413      	add	r3, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe fcf0 	bl	80043c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3301      	adds	r3, #1
 80059e8:	607b      	str	r3, [r7, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b37      	cmp	r3, #55	; 0x37
 80059ee:	d9ef      	bls.n	80059d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059f0:	480d      	ldr	r0, [pc, #52]	; (8005a28 <prvInitialiseTaskLists+0x64>)
 80059f2:	f7fe fce7 	bl	80043c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059f6:	480d      	ldr	r0, [pc, #52]	; (8005a2c <prvInitialiseTaskLists+0x68>)
 80059f8:	f7fe fce4 	bl	80043c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059fc:	480c      	ldr	r0, [pc, #48]	; (8005a30 <prvInitialiseTaskLists+0x6c>)
 80059fe:	f7fe fce1 	bl	80043c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a02:	480c      	ldr	r0, [pc, #48]	; (8005a34 <prvInitialiseTaskLists+0x70>)
 8005a04:	f7fe fcde 	bl	80043c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a08:	480b      	ldr	r0, [pc, #44]	; (8005a38 <prvInitialiseTaskLists+0x74>)
 8005a0a:	f7fe fcdb 	bl	80043c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <prvInitialiseTaskLists+0x78>)
 8005a10:	4a05      	ldr	r2, [pc, #20]	; (8005a28 <prvInitialiseTaskLists+0x64>)
 8005a12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a14:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <prvInitialiseTaskLists+0x7c>)
 8005a16:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <prvInitialiseTaskLists+0x68>)
 8005a18:	601a      	str	r2, [r3, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	200007f8 	.word	0x200007f8
 8005a28:	20000c58 	.word	0x20000c58
 8005a2c:	20000c6c 	.word	0x20000c6c
 8005a30:	20000c88 	.word	0x20000c88
 8005a34:	20000c9c 	.word	0x20000c9c
 8005a38:	20000cb4 	.word	0x20000cb4
 8005a3c:	20000c80 	.word	0x20000c80
 8005a40:	20000c84 	.word	0x20000c84

08005a44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a4a:	e019      	b.n	8005a80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a4c:	f000 fdd2 	bl	80065f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a50:	4b10      	ldr	r3, [pc, #64]	; (8005a94 <prvCheckTasksWaitingTermination+0x50>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fe fd3b 	bl	80044d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a62:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <prvCheckTasksWaitingTermination+0x54>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	4a0b      	ldr	r2, [pc, #44]	; (8005a98 <prvCheckTasksWaitingTermination+0x54>)
 8005a6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <prvCheckTasksWaitingTermination+0x58>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <prvCheckTasksWaitingTermination+0x58>)
 8005a74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a76:	f000 fded 	bl	8006654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f810 	bl	8005aa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a80:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <prvCheckTasksWaitingTermination+0x58>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e1      	bne.n	8005a4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000c9c 	.word	0x20000c9c
 8005a98:	20000cc8 	.word	0x20000cc8
 8005a9c:	20000cb0 	.word	0x20000cb0

08005aa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d108      	bne.n	8005ac4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 ff8a 	bl	80069d0 <vPortFree>
				vPortFree( pxTCB );
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 ff87 	bl	80069d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ac2:	e018      	b.n	8005af6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d103      	bne.n	8005ad6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 ff7e 	bl	80069d0 <vPortFree>
	}
 8005ad4:	e00f      	b.n	8005af6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d00a      	beq.n	8005af6 <prvDeleteTCB+0x56>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	60fb      	str	r3, [r7, #12]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <prvDeleteTCB+0x54>
	}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b06:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <prvResetNextTaskUnblockTime+0x38>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <prvResetNextTaskUnblockTime+0x3c>)
 8005b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b18:	e008      	b.n	8005b2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b1a:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <prvResetNextTaskUnblockTime+0x38>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <prvResetNextTaskUnblockTime+0x3c>)
 8005b2a:	6013      	str	r3, [r2, #0]
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	20000c80 	.word	0x20000c80
 8005b3c:	20000ce8 	.word	0x20000ce8

08005b40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <xTaskGetSchedulerState+0x34>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	e008      	b.n	8005b66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b54:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <xTaskGetSchedulerState+0x38>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	607b      	str	r3, [r7, #4]
 8005b60:	e001      	b.n	8005b66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b62:	2300      	movs	r3, #0
 8005b64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b66:	687b      	ldr	r3, [r7, #4]
	}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	20000cd4 	.word	0x20000cd4
 8005b78:	20000cf0 	.word	0x20000cf0

08005b7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d056      	beq.n	8005c40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b92:	4b2e      	ldr	r3, [pc, #184]	; (8005c4c <xTaskPriorityDisinherit+0xd0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d00a      	beq.n	8005bb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	60fb      	str	r3, [r7, #12]
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	60bb      	str	r3, [r7, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd4:	1e5a      	subs	r2, r3, #1
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d02c      	beq.n	8005c40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d128      	bne.n	8005c40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fc70 	bl	80044d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c10:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <xTaskPriorityDisinherit+0xd4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d903      	bls.n	8005c20 <xTaskPriorityDisinherit+0xa4>
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	4a0c      	ldr	r2, [pc, #48]	; (8005c50 <xTaskPriorityDisinherit+0xd4>)
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <xTaskPriorityDisinherit+0xd8>)
 8005c2e:	441a      	add	r2, r3
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f7fe fbf1 	bl	800441e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c40:	697b      	ldr	r3, [r7, #20]
	}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200007f4 	.word	0x200007f4
 8005c50:	20000cd0 	.word	0x20000cd0
 8005c54:	200007f8 	.word	0x200007f8

08005c58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c62:	4b21      	ldr	r3, [pc, #132]	; (8005ce8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c68:	4b20      	ldr	r3, [pc, #128]	; (8005cec <prvAddCurrentTaskToDelayedList+0x94>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe fc32 	bl	80044d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c7a:	d10a      	bne.n	8005c92 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c82:	4b1a      	ldr	r3, [pc, #104]	; (8005cec <prvAddCurrentTaskToDelayedList+0x94>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4819      	ldr	r0, [pc, #100]	; (8005cf0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c8c:	f7fe fbc7 	bl	800441e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c90:	e026      	b.n	8005ce0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4413      	add	r3, r2
 8005c98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c9a:	4b14      	ldr	r3, [pc, #80]	; (8005cec <prvAddCurrentTaskToDelayedList+0x94>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d209      	bcs.n	8005cbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <prvAddCurrentTaskToDelayedList+0x94>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f7fe fbd5 	bl	8004466 <vListInsert>
}
 8005cbc:	e010      	b.n	8005ce0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cbe:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <prvAddCurrentTaskToDelayedList+0x94>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f7fe fbcb 	bl	8004466 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d202      	bcs.n	8005ce0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cda:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	6013      	str	r3, [r2, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20000ccc 	.word	0x20000ccc
 8005cec:	200007f4 	.word	0x200007f4
 8005cf0:	20000cb4 	.word	0x20000cb4
 8005cf4:	20000c84 	.word	0x20000c84
 8005cf8:	20000c80 	.word	0x20000c80
 8005cfc:	20000ce8 	.word	0x20000ce8

08005d00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d0a:	f000 fb07 	bl	800631c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d0e:	4b1c      	ldr	r3, [pc, #112]	; (8005d80 <xTimerCreateTimerTask+0x80>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d021      	beq.n	8005d5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d1e:	1d3a      	adds	r2, r7, #4
 8005d20:	f107 0108 	add.w	r1, r7, #8
 8005d24:	f107 030c 	add.w	r3, r7, #12
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fe fb31 	bl	8004390 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	9202      	str	r2, [sp, #8]
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	2302      	movs	r3, #2
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	460a      	mov	r2, r1
 8005d40:	4910      	ldr	r1, [pc, #64]	; (8005d84 <xTimerCreateTimerTask+0x84>)
 8005d42:	4811      	ldr	r0, [pc, #68]	; (8005d88 <xTimerCreateTimerTask+0x88>)
 8005d44:	f7ff f8de 	bl	8004f04 <xTaskCreateStatic>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4a10      	ldr	r2, [pc, #64]	; (8005d8c <xTimerCreateTimerTask+0x8c>)
 8005d4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d4e:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <xTimerCreateTimerTask+0x8c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d56:	2301      	movs	r3, #1
 8005d58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d76:	697b      	ldr	r3, [r7, #20]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000d24 	.word	0x20000d24
 8005d84:	08006f50 	.word	0x08006f50
 8005d88:	08005ec5 	.word	0x08005ec5
 8005d8c:	20000d28 	.word	0x20000d28

08005d90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08a      	sub	sp, #40	; 0x28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <xTimerGenericCommand+0x2e>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	623b      	str	r3, [r7, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	e7fe      	b.n	8005dbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005dbe:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <xTimerGenericCommand+0x98>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d02a      	beq.n	8005e1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b05      	cmp	r3, #5
 8005dd6:	dc18      	bgt.n	8005e0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005dd8:	f7ff feb2 	bl	8005b40 <xTaskGetSchedulerState>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d109      	bne.n	8005df6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005de2:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <xTimerGenericCommand+0x98>)
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	f107 0110 	add.w	r1, r7, #16
 8005dea:	2300      	movs	r3, #0
 8005dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dee:	f7fe fca1 	bl	8004734 <xQueueGenericSend>
 8005df2:	6278      	str	r0, [r7, #36]	; 0x24
 8005df4:	e012      	b.n	8005e1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005df6:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <xTimerGenericCommand+0x98>)
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	f107 0110 	add.w	r1, r7, #16
 8005dfe:	2300      	movs	r3, #0
 8005e00:	2200      	movs	r2, #0
 8005e02:	f7fe fc97 	bl	8004734 <xQueueGenericSend>
 8005e06:	6278      	str	r0, [r7, #36]	; 0x24
 8005e08:	e008      	b.n	8005e1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e0a:	4b07      	ldr	r3, [pc, #28]	; (8005e28 <xTimerGenericCommand+0x98>)
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	f107 0110 	add.w	r1, r7, #16
 8005e12:	2300      	movs	r3, #0
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	f7fe fd8b 	bl	8004930 <xQueueGenericSendFromISR>
 8005e1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3728      	adds	r7, #40	; 0x28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000d24 	.word	0x20000d24

08005e2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e36:	4b22      	ldr	r3, [pc, #136]	; (8005ec0 <prvProcessExpiredTimer+0x94>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fe fb47 	bl	80044d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d022      	beq.n	8005e9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	18d1      	adds	r1, r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	6978      	ldr	r0, [r7, #20]
 8005e66:	f000 f8d1 	bl	800600c <prvInsertTimerInActiveList>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01f      	beq.n	8005eb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e70:	2300      	movs	r3, #0
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	2300      	movs	r3, #0
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	2100      	movs	r1, #0
 8005e7a:	6978      	ldr	r0, [r7, #20]
 8005e7c:	f7ff ff88 	bl	8005d90 <xTimerGenericCommand>
 8005e80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d113      	bne.n	8005eb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	60fb      	str	r3, [r7, #12]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	6978      	ldr	r0, [r7, #20]
 8005eb6:	4798      	blx	r3
}
 8005eb8:	bf00      	nop
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20000d1c 	.word	0x20000d1c

08005ec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ecc:	f107 0308 	add.w	r3, r7, #8
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 f857 	bl	8005f84 <prvGetNextExpireTime>
 8005ed6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4619      	mov	r1, r3
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 f803 	bl	8005ee8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ee2:	f000 f8d5 	bl	8006090 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ee6:	e7f1      	b.n	8005ecc <prvTimerTask+0x8>

08005ee8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ef2:	f7ff fa43 	bl	800537c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ef6:	f107 0308 	add.w	r3, r7, #8
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 f866 	bl	8005fcc <prvSampleTimeNow>
 8005f00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d130      	bne.n	8005f6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <prvProcessTimerOrBlockTask+0x3c>
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d806      	bhi.n	8005f24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f16:	f7ff fa3f 	bl	8005398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f1a:	68f9      	ldr	r1, [r7, #12]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff ff85 	bl	8005e2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f22:	e024      	b.n	8005f6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d008      	beq.n	8005f3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f2a:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <prvProcessTimerOrBlockTask+0x90>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <prvProcessTimerOrBlockTask+0x50>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <prvProcessTimerOrBlockTask+0x52>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f3c:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <prvProcessTimerOrBlockTask+0x94>)
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	f7fe ffa7 	bl	8004e9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f4e:	f7ff fa23 	bl	8005398 <xTaskResumeAll>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f58:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <prvProcessTimerOrBlockTask+0x98>)
 8005f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	f3bf 8f6f 	isb	sy
}
 8005f68:	e001      	b.n	8005f6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f6a:	f7ff fa15 	bl	8005398 <xTaskResumeAll>
}
 8005f6e:	bf00      	nop
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000d20 	.word	0x20000d20
 8005f7c:	20000d24 	.word	0x20000d24
 8005f80:	e000ed04 	.word	0xe000ed04

08005f84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <prvGetNextExpireTime+0x44>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <prvGetNextExpireTime+0x16>
 8005f96:	2201      	movs	r2, #1
 8005f98:	e000      	b.n	8005f9c <prvGetNextExpireTime+0x18>
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d105      	bne.n	8005fb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fa8:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <prvGetNextExpireTime+0x44>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	e001      	b.n	8005fb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	20000d1c 	.word	0x20000d1c

08005fcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fd4:	f7ff fa7e 	bl	80054d4 <xTaskGetTickCount>
 8005fd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fda:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <prvSampleTimeNow+0x3c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d205      	bcs.n	8005ff0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fe4:	f000 f936 	bl	8006254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e002      	b.n	8005ff6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ff6:	4a04      	ldr	r2, [pc, #16]	; (8006008 <prvSampleTimeNow+0x3c>)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000d2c 	.word	0x20000d2c

0800600c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	429a      	cmp	r2, r3
 8006030:	d812      	bhi.n	8006058 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	1ad2      	subs	r2, r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	429a      	cmp	r2, r3
 800603e:	d302      	bcc.n	8006046 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006040:	2301      	movs	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	e01b      	b.n	800607e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006046:	4b10      	ldr	r3, [pc, #64]	; (8006088 <prvInsertTimerInActiveList+0x7c>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3304      	adds	r3, #4
 800604e:	4619      	mov	r1, r3
 8006050:	4610      	mov	r0, r2
 8006052:	f7fe fa08 	bl	8004466 <vListInsert>
 8006056:	e012      	b.n	800607e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d206      	bcs.n	800606e <prvInsertTimerInActiveList+0x62>
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d302      	bcc.n	800606e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	e007      	b.n	800607e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800606e:	4b07      	ldr	r3, [pc, #28]	; (800608c <prvInsertTimerInActiveList+0x80>)
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3304      	adds	r3, #4
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f7fe f9f4 	bl	8004466 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800607e:	697b      	ldr	r3, [r7, #20]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20000d20 	.word	0x20000d20
 800608c:	20000d1c 	.word	0x20000d1c

08006090 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08e      	sub	sp, #56	; 0x38
 8006094:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006096:	e0ca      	b.n	800622e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	da18      	bge.n	80060d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800609e:	1d3b      	adds	r3, r7, #4
 80060a0:	3304      	adds	r3, #4
 80060a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	61fb      	str	r3, [r7, #28]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c6:	6850      	ldr	r0, [r2, #4]
 80060c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ca:	6892      	ldr	r2, [r2, #8]
 80060cc:	4611      	mov	r1, r2
 80060ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f2c0 80aa 	blt.w	800622c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	3304      	adds	r3, #4
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fe f9f5 	bl	80044d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ee:	463b      	mov	r3, r7
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff ff6b 	bl	8005fcc <prvSampleTimeNow>
 80060f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b09      	cmp	r3, #9
 80060fc:	f200 8097 	bhi.w	800622e <prvProcessReceivedCommands+0x19e>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <prvProcessReceivedCommands+0x78>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	08006131 	.word	0x08006131
 800610c:	08006131 	.word	0x08006131
 8006110:	08006131 	.word	0x08006131
 8006114:	080061a5 	.word	0x080061a5
 8006118:	080061b9 	.word	0x080061b9
 800611c:	08006203 	.word	0x08006203
 8006120:	08006131 	.word	0x08006131
 8006124:	08006131 	.word	0x08006131
 8006128:	080061a5 	.word	0x080061a5
 800612c:	080061b9 	.word	0x080061b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	b2da      	uxtb	r2, r3
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	18d1      	adds	r1, r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006150:	f7ff ff5c 	bl	800600c <prvInsertTimerInActiveList>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d069      	beq.n	800622e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006160:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d05e      	beq.n	800622e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	441a      	add	r2, r3
 8006178:	2300      	movs	r3, #0
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	2300      	movs	r3, #0
 800617e:	2100      	movs	r1, #0
 8006180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006182:	f7ff fe05 	bl	8005d90 <xTimerGenericCommand>
 8006186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d14f      	bne.n	800622e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	61bb      	str	r3, [r7, #24]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061aa:	f023 0301 	bic.w	r3, r3, #1
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80061b6:	e03a      	b.n	800622e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10a      	bne.n	80061ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	617b      	str	r3, [r7, #20]
}
 80061ea:	bf00      	nop
 80061ec:	e7fe      	b.n	80061ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	18d1      	adds	r1, r2, r3
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061fc:	f7ff ff06 	bl	800600c <prvInsertTimerInActiveList>
					break;
 8006200:	e015      	b.n	800622e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d103      	bne.n	8006218 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006212:	f000 fbdd 	bl	80069d0 <vPortFree>
 8006216:	e00a      	b.n	800622e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	b2da      	uxtb	r2, r3
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800622a:	e000      	b.n	800622e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800622c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800622e:	4b08      	ldr	r3, [pc, #32]	; (8006250 <prvProcessReceivedCommands+0x1c0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	1d39      	adds	r1, r7, #4
 8006234:	2200      	movs	r2, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fc16 	bl	8004a68 <xQueueReceive>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	f47f af2a 	bne.w	8006098 <prvProcessReceivedCommands+0x8>
	}
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	3730      	adds	r7, #48	; 0x30
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000d24 	.word	0x20000d24

08006254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800625a:	e048      	b.n	80062ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800625c:	4b2d      	ldr	r3, [pc, #180]	; (8006314 <prvSwitchTimerLists+0xc0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006266:	4b2b      	ldr	r3, [pc, #172]	; (8006314 <prvSwitchTimerLists+0xc0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3304      	adds	r3, #4
 8006274:	4618      	mov	r0, r3
 8006276:	f7fe f92f 	bl	80044d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d02e      	beq.n	80062ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4413      	add	r3, r2
 8006298:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d90e      	bls.n	80062c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062ae:	4b19      	ldr	r3, [pc, #100]	; (8006314 <prvSwitchTimerLists+0xc0>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f7fe f8d4 	bl	8004466 <vListInsert>
 80062be:	e016      	b.n	80062ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062c0:	2300      	movs	r3, #0
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	2100      	movs	r1, #0
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f7ff fd60 	bl	8005d90 <xTimerGenericCommand>
 80062d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	603b      	str	r3, [r7, #0]
}
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062ee:	4b09      	ldr	r3, [pc, #36]	; (8006314 <prvSwitchTimerLists+0xc0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1b1      	bne.n	800625c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062f8:	4b06      	ldr	r3, [pc, #24]	; (8006314 <prvSwitchTimerLists+0xc0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <prvSwitchTimerLists+0xc4>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a04      	ldr	r2, [pc, #16]	; (8006314 <prvSwitchTimerLists+0xc0>)
 8006304:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006306:	4a04      	ldr	r2, [pc, #16]	; (8006318 <prvSwitchTimerLists+0xc4>)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	6013      	str	r3, [r2, #0]
}
 800630c:	bf00      	nop
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	20000d1c 	.word	0x20000d1c
 8006318:	20000d20 	.word	0x20000d20

0800631c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006322:	f000 f967 	bl	80065f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006326:	4b15      	ldr	r3, [pc, #84]	; (800637c <prvCheckForValidListAndQueue+0x60>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d120      	bne.n	8006370 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800632e:	4814      	ldr	r0, [pc, #80]	; (8006380 <prvCheckForValidListAndQueue+0x64>)
 8006330:	f7fe f848 	bl	80043c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006334:	4813      	ldr	r0, [pc, #76]	; (8006384 <prvCheckForValidListAndQueue+0x68>)
 8006336:	f7fe f845 	bl	80043c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800633a:	4b13      	ldr	r3, [pc, #76]	; (8006388 <prvCheckForValidListAndQueue+0x6c>)
 800633c:	4a10      	ldr	r2, [pc, #64]	; (8006380 <prvCheckForValidListAndQueue+0x64>)
 800633e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006340:	4b12      	ldr	r3, [pc, #72]	; (800638c <prvCheckForValidListAndQueue+0x70>)
 8006342:	4a10      	ldr	r2, [pc, #64]	; (8006384 <prvCheckForValidListAndQueue+0x68>)
 8006344:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006346:	2300      	movs	r3, #0
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	4b11      	ldr	r3, [pc, #68]	; (8006390 <prvCheckForValidListAndQueue+0x74>)
 800634c:	4a11      	ldr	r2, [pc, #68]	; (8006394 <prvCheckForValidListAndQueue+0x78>)
 800634e:	2110      	movs	r1, #16
 8006350:	200a      	movs	r0, #10
 8006352:	f7fe f953 	bl	80045fc <xQueueGenericCreateStatic>
 8006356:	4603      	mov	r3, r0
 8006358:	4a08      	ldr	r2, [pc, #32]	; (800637c <prvCheckForValidListAndQueue+0x60>)
 800635a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <prvCheckForValidListAndQueue+0x60>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006364:	4b05      	ldr	r3, [pc, #20]	; (800637c <prvCheckForValidListAndQueue+0x60>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	490b      	ldr	r1, [pc, #44]	; (8006398 <prvCheckForValidListAndQueue+0x7c>)
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe fd6c 	bl	8004e48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006370:	f000 f970 	bl	8006654 <vPortExitCritical>
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000d24 	.word	0x20000d24
 8006380:	20000cf4 	.word	0x20000cf4
 8006384:	20000d08 	.word	0x20000d08
 8006388:	20000d1c 	.word	0x20000d1c
 800638c:	20000d20 	.word	0x20000d20
 8006390:	20000dd0 	.word	0x20000dd0
 8006394:	20000d30 	.word	0x20000d30
 8006398:	08006f58 	.word	0x08006f58

0800639c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3b04      	subs	r3, #4
 80063ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3b04      	subs	r3, #4
 80063ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f023 0201 	bic.w	r2, r3, #1
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3b04      	subs	r3, #4
 80063ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063cc:	4a0c      	ldr	r2, [pc, #48]	; (8006400 <pxPortInitialiseStack+0x64>)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3b14      	subs	r3, #20
 80063d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3b04      	subs	r3, #4
 80063e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f06f 0202 	mvn.w	r2, #2
 80063ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3b20      	subs	r3, #32
 80063f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063f2:	68fb      	ldr	r3, [r7, #12]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	08006405 	.word	0x08006405

08006404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800640e:	4b12      	ldr	r3, [pc, #72]	; (8006458 <prvTaskExitError+0x54>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006416:	d00a      	beq.n	800642e <prvTaskExitError+0x2a>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	60fb      	str	r3, [r7, #12]
}
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <prvTaskExitError+0x28>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	60bb      	str	r3, [r7, #8]
}
 8006440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006442:	bf00      	nop
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0fc      	beq.n	8006444 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800644a:	bf00      	nop
 800644c:	bf00      	nop
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	2000000c 	.word	0x2000000c
 800645c:	00000000 	.word	0x00000000

08006460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006460:	4b07      	ldr	r3, [pc, #28]	; (8006480 <pxCurrentTCBConst2>)
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	6808      	ldr	r0, [r1, #0]
 8006466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	f380 8809 	msr	PSP, r0
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f380 8811 	msr	BASEPRI, r0
 800647a:	4770      	bx	lr
 800647c:	f3af 8000 	nop.w

08006480 <pxCurrentTCBConst2>:
 8006480:	200007f4 	.word	0x200007f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop

08006488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006488:	4808      	ldr	r0, [pc, #32]	; (80064ac <prvPortStartFirstTask+0x24>)
 800648a:	6800      	ldr	r0, [r0, #0]
 800648c:	6800      	ldr	r0, [r0, #0]
 800648e:	f380 8808 	msr	MSP, r0
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	f380 8814 	msr	CONTROL, r0
 800649a:	b662      	cpsie	i
 800649c:	b661      	cpsie	f
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	df00      	svc	0
 80064a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064aa:	bf00      	nop
 80064ac:	e000ed08 	.word	0xe000ed08

080064b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064b6:	4b46      	ldr	r3, [pc, #280]	; (80065d0 <xPortStartScheduler+0x120>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a46      	ldr	r2, [pc, #280]	; (80065d4 <xPortStartScheduler+0x124>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10a      	bne.n	80064d6 <xPortStartScheduler+0x26>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064d6:	4b3e      	ldr	r3, [pc, #248]	; (80065d0 <xPortStartScheduler+0x120>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a3f      	ldr	r2, [pc, #252]	; (80065d8 <xPortStartScheduler+0x128>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10a      	bne.n	80064f6 <xPortStartScheduler+0x46>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064f6:	4b39      	ldr	r3, [pc, #228]	; (80065dc <xPortStartScheduler+0x12c>)
 80064f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	22ff      	movs	r2, #255	; 0xff
 8006506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006518:	b2da      	uxtb	r2, r3
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <xPortStartScheduler+0x130>)
 800651c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800651e:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <xPortStartScheduler+0x134>)
 8006520:	2207      	movs	r2, #7
 8006522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006524:	e009      	b.n	800653a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006526:	4b2f      	ldr	r3, [pc, #188]	; (80065e4 <xPortStartScheduler+0x134>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3b01      	subs	r3, #1
 800652c:	4a2d      	ldr	r2, [pc, #180]	; (80065e4 <xPortStartScheduler+0x134>)
 800652e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d0ef      	beq.n	8006526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006546:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <xPortStartScheduler+0x134>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1c3 0307 	rsb	r3, r3, #7
 800654e:	2b04      	cmp	r3, #4
 8006550:	d00a      	beq.n	8006568 <xPortStartScheduler+0xb8>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60bb      	str	r3, [r7, #8]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006568:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <xPortStartScheduler+0x134>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <xPortStartScheduler+0x134>)
 8006570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006572:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <xPortStartScheduler+0x134>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800657a:	4a1a      	ldr	r2, [pc, #104]	; (80065e4 <xPortStartScheduler+0x134>)
 800657c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <xPortStartScheduler+0x138>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <xPortStartScheduler+0x138>)
 800658c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <xPortStartScheduler+0x138>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <xPortStartScheduler+0x138>)
 8006598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800659c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800659e:	f000 f8dd 	bl	800675c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <xPortStartScheduler+0x13c>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065a8:	f000 f8fc 	bl	80067a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065ac:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <xPortStartScheduler+0x140>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a0f      	ldr	r2, [pc, #60]	; (80065f0 <xPortStartScheduler+0x140>)
 80065b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065b8:	f7ff ff66 	bl	8006488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065bc:	f7ff f854 	bl	8005668 <vTaskSwitchContext>
	prvTaskExitError();
 80065c0:	f7ff ff20 	bl	8006404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	e000ed00 	.word	0xe000ed00
 80065d4:	410fc271 	.word	0x410fc271
 80065d8:	410fc270 	.word	0x410fc270
 80065dc:	e000e400 	.word	0xe000e400
 80065e0:	20000e20 	.word	0x20000e20
 80065e4:	20000e24 	.word	0x20000e24
 80065e8:	e000ed20 	.word	0xe000ed20
 80065ec:	2000000c 	.word	0x2000000c
 80065f0:	e000ef34 	.word	0xe000ef34

080065f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	607b      	str	r3, [r7, #4]
}
 800660c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800660e:	4b0f      	ldr	r3, [pc, #60]	; (800664c <vPortEnterCritical+0x58>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	4a0d      	ldr	r2, [pc, #52]	; (800664c <vPortEnterCritical+0x58>)
 8006616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <vPortEnterCritical+0x58>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10f      	bne.n	8006640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <vPortEnterCritical+0x5c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <vPortEnterCritical+0x4c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	603b      	str	r3, [r7, #0]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <vPortEnterCritical+0x4a>
	}
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	2000000c 	.word	0x2000000c
 8006650:	e000ed04 	.word	0xe000ed04

08006654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800665a:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <vPortExitCritical+0x50>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <vPortExitCritical+0x24>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	607b      	str	r3, [r7, #4]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <vPortExitCritical+0x50>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <vPortExitCritical+0x50>)
 8006680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <vPortExitCritical+0x50>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <vPortExitCritical+0x42>
 800668a:	2300      	movs	r3, #0
 800668c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f383 8811 	msr	BASEPRI, r3
}
 8006694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	2000000c 	.word	0x2000000c
	...

080066b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066b0:	f3ef 8009 	mrs	r0, PSP
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4b15      	ldr	r3, [pc, #84]	; (8006710 <pxCurrentTCBConst>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	f01e 0f10 	tst.w	lr, #16
 80066c0:	bf08      	it	eq
 80066c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	6010      	str	r0, [r2, #0]
 80066cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066d4:	f380 8811 	msr	BASEPRI, r0
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f7fe ffc2 	bl	8005668 <vTaskSwitchContext>
 80066e4:	f04f 0000 	mov.w	r0, #0
 80066e8:	f380 8811 	msr	BASEPRI, r0
 80066ec:	bc09      	pop	{r0, r3}
 80066ee:	6819      	ldr	r1, [r3, #0]
 80066f0:	6808      	ldr	r0, [r1, #0]
 80066f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f6:	f01e 0f10 	tst.w	lr, #16
 80066fa:	bf08      	it	eq
 80066fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006700:	f380 8809 	msr	PSP, r0
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	f3af 8000 	nop.w

08006710 <pxCurrentTCBConst>:
 8006710:	200007f4 	.word	0x200007f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop

08006718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	607b      	str	r3, [r7, #4]
}
 8006730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006732:	f7fe fedf 	bl	80054f4 <xTaskIncrementTick>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <xPortSysTickHandler+0x40>)
 800673e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	2300      	movs	r3, #0
 8006746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <vPortSetupTimerInterrupt+0x38>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <vPortSetupTimerInterrupt+0x3c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a0a      	ldr	r2, [pc, #40]	; (800679c <vPortSetupTimerInterrupt+0x40>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	099b      	lsrs	r3, r3, #6
 8006778:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <vPortSetupTimerInterrupt+0x44>)
 800677a:	3b01      	subs	r3, #1
 800677c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800677e:	4b04      	ldr	r3, [pc, #16]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006780:	2207      	movs	r2, #7
 8006782:	601a      	str	r2, [r3, #0]
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	e000e010 	.word	0xe000e010
 8006794:	e000e018 	.word	0xe000e018
 8006798:	20000000 	.word	0x20000000
 800679c:	10624dd3 	.word	0x10624dd3
 80067a0:	e000e014 	.word	0xe000e014

080067a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067b4 <vPortEnableVFP+0x10>
 80067a8:	6801      	ldr	r1, [r0, #0]
 80067aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067ae:	6001      	str	r1, [r0, #0]
 80067b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067b2:	bf00      	nop
 80067b4:	e000ed88 	.word	0xe000ed88

080067b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067be:	f3ef 8305 	mrs	r3, IPSR
 80067c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	d914      	bls.n	80067f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <vPortValidateInterruptPriority+0x70>)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067d4:	4b15      	ldr	r3, [pc, #84]	; (800682c <vPortValidateInterruptPriority+0x74>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	7afa      	ldrb	r2, [r7, #11]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d20a      	bcs.n	80067f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <vPortValidateInterruptPriority+0x78>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067fc:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <vPortValidateInterruptPriority+0x7c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d90a      	bls.n	800681a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	603b      	str	r3, [r7, #0]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <vPortValidateInterruptPriority+0x60>
	}
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	e000e3f0 	.word	0xe000e3f0
 800682c:	20000e20 	.word	0x20000e20
 8006830:	e000ed0c 	.word	0xe000ed0c
 8006834:	20000e24 	.word	0x20000e24

08006838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08a      	sub	sp, #40	; 0x28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006844:	f7fe fd9a 	bl	800537c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006848:	4b5b      	ldr	r3, [pc, #364]	; (80069b8 <pvPortMalloc+0x180>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006850:	f000 f920 	bl	8006a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006854:	4b59      	ldr	r3, [pc, #356]	; (80069bc <pvPortMalloc+0x184>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	f040 8093 	bne.w	8006988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01d      	beq.n	80068a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006868:	2208      	movs	r2, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b00      	cmp	r3, #0
 8006878:	d014      	beq.n	80068a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f023 0307 	bic.w	r3, r3, #7
 8006880:	3308      	adds	r3, #8
 8006882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <pvPortMalloc+0x6c>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	617b      	str	r3, [r7, #20]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d06e      	beq.n	8006988 <pvPortMalloc+0x150>
 80068aa:	4b45      	ldr	r3, [pc, #276]	; (80069c0 <pvPortMalloc+0x188>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d869      	bhi.n	8006988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068b4:	4b43      	ldr	r3, [pc, #268]	; (80069c4 <pvPortMalloc+0x18c>)
 80068b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068b8:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <pvPortMalloc+0x18c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068be:	e004      	b.n	80068ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d903      	bls.n	80068dc <pvPortMalloc+0xa4>
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f1      	bne.n	80068c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068dc:	4b36      	ldr	r3, [pc, #216]	; (80069b8 <pvPortMalloc+0x180>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d050      	beq.n	8006988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2208      	movs	r2, #8
 80068ec:	4413      	add	r3, r2
 80068ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	2308      	movs	r3, #8
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	429a      	cmp	r2, r3
 8006906:	d91f      	bls.n	8006948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <pvPortMalloc+0xf8>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	613b      	str	r3, [r7, #16]
}
 800692c:	bf00      	nop
 800692e:	e7fe      	b.n	800692e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006942:	69b8      	ldr	r0, [r7, #24]
 8006944:	f000 f908 	bl	8006b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <pvPortMalloc+0x188>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <pvPortMalloc+0x188>)
 8006954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006956:	4b1a      	ldr	r3, [pc, #104]	; (80069c0 <pvPortMalloc+0x188>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <pvPortMalloc+0x190>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d203      	bcs.n	800696a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006962:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <pvPortMalloc+0x188>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <pvPortMalloc+0x190>)
 8006968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <pvPortMalloc+0x184>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	431a      	orrs	r2, r3
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <pvPortMalloc+0x194>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	4a11      	ldr	r2, [pc, #68]	; (80069cc <pvPortMalloc+0x194>)
 8006986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006988:	f7fe fd06 	bl	8005398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <pvPortMalloc+0x174>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	60fb      	str	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <pvPortMalloc+0x172>
	return pvReturn;
 80069ac:	69fb      	ldr	r3, [r7, #28]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	; 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200019e8 	.word	0x200019e8
 80069bc:	200019fc 	.word	0x200019fc
 80069c0:	200019ec 	.word	0x200019ec
 80069c4:	200019e0 	.word	0x200019e0
 80069c8:	200019f0 	.word	0x200019f0
 80069cc:	200019f4 	.word	0x200019f4

080069d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d04d      	beq.n	8006a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069e2:	2308      	movs	r3, #8
 80069e4:	425b      	negs	r3, r3
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4413      	add	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <vPortFree+0xb8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <vPortFree+0x44>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60fb      	str	r3, [r7, #12]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <vPortFree+0x62>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60bb      	str	r3, [r7, #8]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <vPortFree+0xb8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01e      	beq.n	8006a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11a      	bne.n	8006a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <vPortFree+0xb8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	43db      	mvns	r3, r3
 8006a52:	401a      	ands	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a58:	f7fe fc90 	bl	800537c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <vPortFree+0xbc>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4413      	add	r3, r2
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <vPortFree+0xbc>)
 8006a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a6a:	6938      	ldr	r0, [r7, #16]
 8006a6c:	f000 f874 	bl	8006b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <vPortFree+0xc0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a06      	ldr	r2, [pc, #24]	; (8006a90 <vPortFree+0xc0>)
 8006a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a7a:	f7fe fc8d 	bl	8005398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a7e:	bf00      	nop
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	200019fc 	.word	0x200019fc
 8006a8c:	200019ec 	.word	0x200019ec
 8006a90:	200019f8 	.word	0x200019f8

08006a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006aa0:	4b27      	ldr	r3, [pc, #156]	; (8006b40 <prvHeapInit+0xac>)
 8006aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00c      	beq.n	8006ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3307      	adds	r3, #7
 8006ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	4a1f      	ldr	r2, [pc, #124]	; (8006b40 <prvHeapInit+0xac>)
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006acc:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <prvHeapInit+0xb0>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ad2:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <prvHeapInit+0xb0>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0307 	bic.w	r3, r3, #7
 8006aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <prvHeapInit+0xb4>)
 8006af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <prvHeapInit+0xb4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006afe:	4b12      	ldr	r3, [pc, #72]	; (8006b48 <prvHeapInit+0xb4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <prvHeapInit+0xb4>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <prvHeapInit+0xb8>)
 8006b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <prvHeapInit+0xbc>)
 8006b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <prvHeapInit+0xc0>)
 8006b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b32:	601a      	str	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	20000e28 	.word	0x20000e28
 8006b44:	200019e0 	.word	0x200019e0
 8006b48:	200019e8 	.word	0x200019e8
 8006b4c:	200019f0 	.word	0x200019f0
 8006b50:	200019ec 	.word	0x200019ec
 8006b54:	200019fc 	.word	0x200019fc

08006b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b60:	4b28      	ldr	r3, [pc, #160]	; (8006c04 <prvInsertBlockIntoFreeList+0xac>)
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e002      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x14>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d8f7      	bhi.n	8006b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	4413      	add	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d108      	bne.n	8006b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d118      	bne.n	8006be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d00d      	beq.n	8006bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	e008      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e003      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d002      	beq.n	8006bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	200019e0 	.word	0x200019e0
 8006c08:	200019e8 	.word	0x200019e8

08006c0c <_ZdlPvj>:
 8006c0c:	f000 b803 	b.w	8006c16 <_ZdlPv>

08006c10 <__cxa_pure_virtual>:
 8006c10:	b508      	push	{r3, lr}
 8006c12:	f000 f80f 	bl	8006c34 <_ZSt9terminatev>

08006c16 <_ZdlPv>:
 8006c16:	f000 b843 	b.w	8006ca0 <free>

08006c1a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006c1a:	b508      	push	{r3, lr}
 8006c1c:	4780      	blx	r0
 8006c1e:	f000 f80e 	bl	8006c3e <abort>
	...

08006c24 <_ZSt13get_terminatev>:
 8006c24:	4b02      	ldr	r3, [pc, #8]	; (8006c30 <_ZSt13get_terminatev+0xc>)
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	f3bf 8f5b 	dmb	ish
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20000010 	.word	0x20000010

08006c34 <_ZSt9terminatev>:
 8006c34:	b508      	push	{r3, lr}
 8006c36:	f7ff fff5 	bl	8006c24 <_ZSt13get_terminatev>
 8006c3a:	f7ff ffee 	bl	8006c1a <_ZN10__cxxabiv111__terminateEPFvvE>

08006c3e <abort>:
 8006c3e:	b508      	push	{r3, lr}
 8006c40:	2006      	movs	r0, #6
 8006c42:	f000 f8c3 	bl	8006dcc <raise>
 8006c46:	2001      	movs	r0, #1
 8006c48:	f7f9 fefe 	bl	8000a48 <_exit>

08006c4c <__errno>:
 8006c4c:	4b01      	ldr	r3, [pc, #4]	; (8006c54 <__errno+0x8>)
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	20000014 	.word	0x20000014

08006c58 <__libc_init_array>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	4d0d      	ldr	r5, [pc, #52]	; (8006c90 <__libc_init_array+0x38>)
 8006c5c:	4c0d      	ldr	r4, [pc, #52]	; (8006c94 <__libc_init_array+0x3c>)
 8006c5e:	1b64      	subs	r4, r4, r5
 8006c60:	10a4      	asrs	r4, r4, #2
 8006c62:	2600      	movs	r6, #0
 8006c64:	42a6      	cmp	r6, r4
 8006c66:	d109      	bne.n	8006c7c <__libc_init_array+0x24>
 8006c68:	4d0b      	ldr	r5, [pc, #44]	; (8006c98 <__libc_init_array+0x40>)
 8006c6a:	4c0c      	ldr	r4, [pc, #48]	; (8006c9c <__libc_init_array+0x44>)
 8006c6c:	f000 f8d8 	bl	8006e20 <_init>
 8006c70:	1b64      	subs	r4, r4, r5
 8006c72:	10a4      	asrs	r4, r4, #2
 8006c74:	2600      	movs	r6, #0
 8006c76:	42a6      	cmp	r6, r4
 8006c78:	d105      	bne.n	8006c86 <__libc_init_array+0x2e>
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c80:	4798      	blx	r3
 8006c82:	3601      	adds	r6, #1
 8006c84:	e7ee      	b.n	8006c64 <__libc_init_array+0xc>
 8006c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8a:	4798      	blx	r3
 8006c8c:	3601      	adds	r6, #1
 8006c8e:	e7f2      	b.n	8006c76 <__libc_init_array+0x1e>
 8006c90:	080070b0 	.word	0x080070b0
 8006c94:	080070b0 	.word	0x080070b0
 8006c98:	080070b0 	.word	0x080070b0
 8006c9c:	080070b8 	.word	0x080070b8

08006ca0 <free>:
 8006ca0:	4b02      	ldr	r3, [pc, #8]	; (8006cac <free+0xc>)
 8006ca2:	4601      	mov	r1, r0
 8006ca4:	6818      	ldr	r0, [r3, #0]
 8006ca6:	f000 b819 	b.w	8006cdc <_free_r>
 8006caa:	bf00      	nop
 8006cac:	20000014 	.word	0x20000014

08006cb0 <memcpy>:
 8006cb0:	440a      	add	r2, r1
 8006cb2:	4291      	cmp	r1, r2
 8006cb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006cb8:	d100      	bne.n	8006cbc <memcpy+0xc>
 8006cba:	4770      	bx	lr
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cc6:	4291      	cmp	r1, r2
 8006cc8:	d1f9      	bne.n	8006cbe <memcpy+0xe>
 8006cca:	bd10      	pop	{r4, pc}

08006ccc <memset>:
 8006ccc:	4402      	add	r2, r0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d100      	bne.n	8006cd6 <memset+0xa>
 8006cd4:	4770      	bx	lr
 8006cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cda:	e7f9      	b.n	8006cd0 <memset+0x4>

08006cdc <_free_r>:
 8006cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cde:	2900      	cmp	r1, #0
 8006ce0:	d048      	beq.n	8006d74 <_free_r+0x98>
 8006ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ce6:	9001      	str	r0, [sp, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f1a1 0404 	sub.w	r4, r1, #4
 8006cee:	bfb8      	it	lt
 8006cf0:	18e4      	addlt	r4, r4, r3
 8006cf2:	f000 f887 	bl	8006e04 <__malloc_lock>
 8006cf6:	4a20      	ldr	r2, [pc, #128]	; (8006d78 <_free_r+0x9c>)
 8006cf8:	9801      	ldr	r0, [sp, #4]
 8006cfa:	6813      	ldr	r3, [r2, #0]
 8006cfc:	4615      	mov	r5, r2
 8006cfe:	b933      	cbnz	r3, 8006d0e <_free_r+0x32>
 8006d00:	6063      	str	r3, [r4, #4]
 8006d02:	6014      	str	r4, [r2, #0]
 8006d04:	b003      	add	sp, #12
 8006d06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d0a:	f000 b881 	b.w	8006e10 <__malloc_unlock>
 8006d0e:	42a3      	cmp	r3, r4
 8006d10:	d90b      	bls.n	8006d2a <_free_r+0x4e>
 8006d12:	6821      	ldr	r1, [r4, #0]
 8006d14:	1862      	adds	r2, r4, r1
 8006d16:	4293      	cmp	r3, r2
 8006d18:	bf04      	itt	eq
 8006d1a:	681a      	ldreq	r2, [r3, #0]
 8006d1c:	685b      	ldreq	r3, [r3, #4]
 8006d1e:	6063      	str	r3, [r4, #4]
 8006d20:	bf04      	itt	eq
 8006d22:	1852      	addeq	r2, r2, r1
 8006d24:	6022      	streq	r2, [r4, #0]
 8006d26:	602c      	str	r4, [r5, #0]
 8006d28:	e7ec      	b.n	8006d04 <_free_r+0x28>
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	b10b      	cbz	r3, 8006d34 <_free_r+0x58>
 8006d30:	42a3      	cmp	r3, r4
 8006d32:	d9fa      	bls.n	8006d2a <_free_r+0x4e>
 8006d34:	6811      	ldr	r1, [r2, #0]
 8006d36:	1855      	adds	r5, r2, r1
 8006d38:	42a5      	cmp	r5, r4
 8006d3a:	d10b      	bne.n	8006d54 <_free_r+0x78>
 8006d3c:	6824      	ldr	r4, [r4, #0]
 8006d3e:	4421      	add	r1, r4
 8006d40:	1854      	adds	r4, r2, r1
 8006d42:	42a3      	cmp	r3, r4
 8006d44:	6011      	str	r1, [r2, #0]
 8006d46:	d1dd      	bne.n	8006d04 <_free_r+0x28>
 8006d48:	681c      	ldr	r4, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	6053      	str	r3, [r2, #4]
 8006d4e:	4421      	add	r1, r4
 8006d50:	6011      	str	r1, [r2, #0]
 8006d52:	e7d7      	b.n	8006d04 <_free_r+0x28>
 8006d54:	d902      	bls.n	8006d5c <_free_r+0x80>
 8006d56:	230c      	movs	r3, #12
 8006d58:	6003      	str	r3, [r0, #0]
 8006d5a:	e7d3      	b.n	8006d04 <_free_r+0x28>
 8006d5c:	6825      	ldr	r5, [r4, #0]
 8006d5e:	1961      	adds	r1, r4, r5
 8006d60:	428b      	cmp	r3, r1
 8006d62:	bf04      	itt	eq
 8006d64:	6819      	ldreq	r1, [r3, #0]
 8006d66:	685b      	ldreq	r3, [r3, #4]
 8006d68:	6063      	str	r3, [r4, #4]
 8006d6a:	bf04      	itt	eq
 8006d6c:	1949      	addeq	r1, r1, r5
 8006d6e:	6021      	streq	r1, [r4, #0]
 8006d70:	6054      	str	r4, [r2, #4]
 8006d72:	e7c7      	b.n	8006d04 <_free_r+0x28>
 8006d74:	b003      	add	sp, #12
 8006d76:	bd30      	pop	{r4, r5, pc}
 8006d78:	20001a00 	.word	0x20001a00

08006d7c <_raise_r>:
 8006d7c:	291f      	cmp	r1, #31
 8006d7e:	b538      	push	{r3, r4, r5, lr}
 8006d80:	4604      	mov	r4, r0
 8006d82:	460d      	mov	r5, r1
 8006d84:	d904      	bls.n	8006d90 <_raise_r+0x14>
 8006d86:	2316      	movs	r3, #22
 8006d88:	6003      	str	r3, [r0, #0]
 8006d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d92:	b112      	cbz	r2, 8006d9a <_raise_r+0x1e>
 8006d94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d98:	b94b      	cbnz	r3, 8006dae <_raise_r+0x32>
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 f830 	bl	8006e00 <_getpid_r>
 8006da0:	462a      	mov	r2, r5
 8006da2:	4601      	mov	r1, r0
 8006da4:	4620      	mov	r0, r4
 8006da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006daa:	f000 b817 	b.w	8006ddc <_kill_r>
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d00a      	beq.n	8006dc8 <_raise_r+0x4c>
 8006db2:	1c59      	adds	r1, r3, #1
 8006db4:	d103      	bne.n	8006dbe <_raise_r+0x42>
 8006db6:	2316      	movs	r3, #22
 8006db8:	6003      	str	r3, [r0, #0]
 8006dba:	2001      	movs	r0, #1
 8006dbc:	e7e7      	b.n	8006d8e <_raise_r+0x12>
 8006dbe:	2400      	movs	r4, #0
 8006dc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	4798      	blx	r3
 8006dc8:	2000      	movs	r0, #0
 8006dca:	e7e0      	b.n	8006d8e <_raise_r+0x12>

08006dcc <raise>:
 8006dcc:	4b02      	ldr	r3, [pc, #8]	; (8006dd8 <raise+0xc>)
 8006dce:	4601      	mov	r1, r0
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	f7ff bfd3 	b.w	8006d7c <_raise_r>
 8006dd6:	bf00      	nop
 8006dd8:	20000014 	.word	0x20000014

08006ddc <_kill_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d07      	ldr	r5, [pc, #28]	; (8006dfc <_kill_r+0x20>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	4611      	mov	r1, r2
 8006de8:	602b      	str	r3, [r5, #0]
 8006dea:	f7f9 fe1d 	bl	8000a28 <_kill>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	d102      	bne.n	8006df8 <_kill_r+0x1c>
 8006df2:	682b      	ldr	r3, [r5, #0]
 8006df4:	b103      	cbz	r3, 8006df8 <_kill_r+0x1c>
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	bd38      	pop	{r3, r4, r5, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20001a94 	.word	0x20001a94

08006e00 <_getpid_r>:
 8006e00:	f7f9 be0a 	b.w	8000a18 <_getpid>

08006e04 <__malloc_lock>:
 8006e04:	4801      	ldr	r0, [pc, #4]	; (8006e0c <__malloc_lock+0x8>)
 8006e06:	f000 b809 	b.w	8006e1c <__retarget_lock_acquire_recursive>
 8006e0a:	bf00      	nop
 8006e0c:	20001a9c 	.word	0x20001a9c

08006e10 <__malloc_unlock>:
 8006e10:	4801      	ldr	r0, [pc, #4]	; (8006e18 <__malloc_unlock+0x8>)
 8006e12:	f000 b804 	b.w	8006e1e <__retarget_lock_release_recursive>
 8006e16:	bf00      	nop
 8006e18:	20001a9c 	.word	0x20001a9c

08006e1c <__retarget_lock_acquire_recursive>:
 8006e1c:	4770      	bx	lr

08006e1e <__retarget_lock_release_recursive>:
 8006e1e:	4770      	bx	lr

08006e20 <_init>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr

08006e2c <_fini>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr
