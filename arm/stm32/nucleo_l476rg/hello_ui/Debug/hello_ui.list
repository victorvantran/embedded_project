
hello_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006118  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006348  08006348  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006350  08006350  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a0c  20000010  08006370  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a1c  08006370  00021a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce9b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003775  00000000  00000000  0003cedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  00040650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  00041cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051ee  00000000  00000000  00043228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001731e  00000000  00000000  00048416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fde66  00000000  00000000  0005f734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d59a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ee8  00000000  00000000  0015d5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006290 	.word	0x08006290

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006290 	.word	0x08006290

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb34 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8d0 	bl	8000678 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004d8:	f000 f89a 	bl	8000610 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f003 f950 	bl	8003780 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <main+0x30>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x34>)
 80004e6:	f003 f995 	bl	8003814 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <main+0x38>)
 80004ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f0:	f003 f96a 	bl	80037c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x2c>
 80004f6:	bf00      	nop
 80004f8:	080062dc 	.word	0x080062dc
 80004fc:	08000729 	.word	0x08000729
 8000500:	200000b0 	.word	0x200000b0

08000504 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b0b8      	sub	sp, #224	; 0xe0
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f005 feb4 	bl	8006280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2288      	movs	r2, #136	; 0x88
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f005 fea6 	bl	8006280 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	2303      	movs	r3, #3
 800054a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000554:	230a      	movs	r3, #10
 8000556:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800055a:	2307      	movs	r3, #7
 800055c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fe43 	bl	80011fc <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000586:	f000 f8f9 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2303      	movs	r3, #3
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005ac:	2104      	movs	r1, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fa0a 	bl	80019c8 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80005c4:	f000 f8da 	bl	800077c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fc2e 	bl	8001e34 <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf14      	ite	ne
 80005de:	2301      	movne	r3, #1
 80005e0:	2300      	moveq	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 80005e8:	f000 f8c8 	bl	800077c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f0:	f000 fdae 	bl	8001150 <HAL_PWREx_ControlVoltageScaling>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000604:	f000 f8ba 	bl	800077c <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	37e0      	adds	r7, #224	; 0xe0
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000654:	f002 fb7c 	bl	8002d50 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf14      	ite	ne
 800065e:	2301      	movne	r3, #1
 8000660:	2300      	moveq	r3, #0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000668:	f000 f888 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40004400 	.word	0x40004400

08000678 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a23      	ldr	r2, [pc, #140]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a1d      	ldr	r2, [pc, #116]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <_ZL12MX_GPIO_Initv+0xac>)
 80006f6:	f000 fceb 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <_ZL12MX_GPIO_Initv+0xac>)
 8000714:	f000 fb32 	bl	8000d7c <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3728      	adds	r7, #40	; 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	48000800 	.word	0x48000800

08000728 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	HAL_UART_Transmit(&huart2, (uint8_t *)("hello\r\n"), sizeof("hello\r\n"), 100);
 8000730:	2364      	movs	r3, #100	; 0x64
 8000732:	2208      	movs	r2, #8
 8000734:	4905      	ldr	r1, [pc, #20]	; (800074c <_Z16StartDefaultTaskPv+0x24>)
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <_Z16StartDefaultTaskPv+0x28>)
 8000738:	f002 fb58 	bl	8002dec <HAL_UART_Transmit>
  	xUI.test();
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <_Z16StartDefaultTaskPv+0x2c>)
 800073e:	f000 f9b9 	bl	8000ab4 <_ZN2UI4testEv>
    osDelay(250);
 8000742:	20fa      	movs	r0, #250	; 0xfa
 8000744:	f003 f8f8 	bl	8003938 <osDelay>
  	HAL_UART_Transmit(&huart2, (uint8_t *)("hello\r\n"), sizeof("hello\r\n"), 100);
 8000748:	e7f2      	b.n	8000730 <_Z16StartDefaultTaskPv+0x8>
 800074a:	bf00      	nop
 800074c:	080062b4 	.word	0x080062b4
 8000750:	2000002c 	.word	0x2000002c
 8000754:	200000b4 	.word	0x200000b4

08000758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d101      	bne.n	800076e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076a:	f000 fa05 	bl	8000b78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40001000 	.word	0x40001000

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d108      	bne.n	80007aa <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800079e:	4293      	cmp	r3, r2
 80007a0:	d103      	bne.n	80007aa <_Z41__static_initialization_and_destruction_0ii+0x22>
UI xUI(&huart2);
 80007a2:	4909      	ldr	r1, [pc, #36]	; (80007c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007a6:	f000 f94f 	bl	8000a48 <_ZN2UIC1EP20__UART_HandleTypeDef>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d107      	bne.n	80007c0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d102      	bne.n	80007c0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007bc:	f000 f962 	bl	8000a84 <_ZN2UID1Ev>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000002c 	.word	0x2000002c
 80007cc:	200000b4 	.word	0x200000b4

080007d0 <_GLOBAL__sub_I_huart2>:
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff ffd5 	bl	8000788 <_Z41__static_initialization_and_destruction_0ii>
 80007de:	bd80      	pop	{r7, pc}

080007e0 <_GLOBAL__sub_D_huart2>:
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff ffcd 	bl	8000788 <_Z41__static_initialization_and_destruction_0ii>
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_MspInit+0x4c>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <HAL_MspInit+0x4c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6613      	str	r3, [r2, #96]	; 0x60
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_MspInit+0x4c>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <HAL_MspInit+0x4c>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6593      	str	r3, [r2, #88]	; 0x58
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_MspInit+0x4c>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	210f      	movs	r1, #15
 800082a:	f06f 0001 	mvn.w	r0, #1
 800082e:	f000 fa7b 	bl	8000d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_UART_MspInit+0x7c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d128      	bne.n	80008b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	6593      	str	r3, [r2, #88]	; 0x58
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_UART_MspInit+0x80>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000892:	230c      	movs	r3, #12
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a2:	2307      	movs	r3, #7
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f000 fa64 	bl	8000d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40004400 	.word	0x40004400
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	2036      	movs	r0, #54	; 0x36
 80008da:	f000 fa25 	bl	8000d28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008de:	2036      	movs	r0, #54	; 0x36
 80008e0:	f000 fa3e 	bl	8000d60 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <HAL_InitTick+0x9c>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_InitTick+0x9c>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6593      	str	r3, [r2, #88]	; 0x58
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_InitTick+0x9c>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fc:	f107 0210 	add.w	r2, r7, #16
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f001 fa02 	bl	8001d10 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800090c:	f001 f9d4 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 8000910:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <HAL_InitTick+0xa0>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	0c9b      	lsrs	r3, r3, #18
 800091c:	3b01      	subs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_InitTick+0xa4>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <HAL_InitTick+0xa8>)
 8000924:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_InitTick+0xa4>)
 8000928:	f240 32e7 	movw	r2, #999	; 0x3e7
 800092c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_InitTick+0xa4>)
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_InitTick+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_InitTick+0xa4>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <HAL_InitTick+0xa4>)
 8000942:	f001 ff33 	bl	80027ac <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d104      	bne.n	8000956 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <HAL_InitTick+0xa4>)
 800094e:	f001 ff8f 	bl	8002870 <HAL_TIM_Base_Start_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000
 8000964:	431bde83 	.word	0x431bde83
 8000968:	2000198c 	.word	0x2000198c
 800096c:	40001000 	.word	0x40001000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <TIM6_DAC_IRQHandler+0x10>)
 80009a2:	f001 ffd5 	bl	8002950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000198c 	.word	0x2000198c

080009b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <SystemInit+0x5c>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <SystemInit+0x5c>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <SystemInit+0x60>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <SystemInit+0x60>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <SystemInit+0x60>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <SystemInit+0x60>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <SystemInit+0x60>)
 80009dc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009e0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <SystemInit+0x60>)
 80009e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <SystemInit+0x60>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <SystemInit+0x60>)
 80009f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <SystemInit+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00
 8000a10:	40021000 	.word	0x40021000

08000a14 <_ZN7UIStateC1E9EnumState>:
#include "ui.h"



// UI State
UIState::UIState(EnumState eState) : _eState(eState) {}
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_ZN7UIStateD1Ev>:


UIState::~UIState() {}
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_ZN2UIC1EP20__UART_HandleTypeDef>:

// UI
UI::UI() : _xMainMenu(EnumState::MAIN_MENU), _xMusic(EnumState::MUSIC), _xSettings(EnumState::SETTINGS), _pxUART(nullptr) {}


UI::UI(UART_HandleTypeDef *pxUART) : _xMainMenu(EnumState::MAIN_MENU), _xMusic(EnumState::MUSIC), _xSettings(EnumState::SETTINGS), _pxUART(pxUART) {}
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ffdc 	bl	8000a14 <_ZN7UIStateC1E9EnumState>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	2101      	movs	r1, #1
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ffd6 	bl	8000a14 <_ZN7UIStateC1E9EnumState>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ffd0 	bl	8000a14 <_ZN7UIStateC1E9EnumState>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZN2UID1Ev>:


UI::~UI() {}
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3308      	adds	r3, #8
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffce 	bl	8000a32 <_ZN7UIStateD1Ev>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffc9 	bl	8000a32 <_ZN7UIStateD1Ev>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ffc5 	bl	8000a32 <_ZN7UIStateD1Ev>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <_ZN2UI4testEv>:


void UI::test(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000abc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac0:	4806      	ldr	r0, [pc, #24]	; (8000adc <_ZN2UI4testEv+0x28>)
 8000ac2:	f000 fb1d 	bl	8001100 <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("test\r\n"), sizeof("test\r\n"), 100);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68d8      	ldr	r0, [r3, #12]
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	2207      	movs	r2, #7
 8000ace:	4904      	ldr	r1, [pc, #16]	; (8000ae0 <_ZN2UI4testEv+0x2c>)
 8000ad0:	f002 f98c 	bl	8002dec <HAL_UART_Transmit>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	080062bc 	.word	0x080062bc

08000ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff ff62 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000aec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000aee:	e003      	b.n	8000af8 <LoopCopyDataInit>

08000af0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000af2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000af4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000af6:	3104      	adds	r1, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000af8:	480a      	ldr	r0, [pc, #40]	; (8000b24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000afc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000afe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b00:	d3f6      	bcc.n	8000af0 <CopyDataInit>
	ldr	r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b04:	e002      	b.n	8000b0c <LoopFillZerobss>

08000b06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b08:	f842 3b04 	str.w	r3, [r2], #4

08000b0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <LoopForever+0x16>)
	cmp	r2, r3
 8000b0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b10:	d3f9      	bcc.n	8000b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f005 fb83 	bl	800621c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b16:	f7ff fcd7 	bl	80004c8 <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b1c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b20:	08006360 	.word	0x08006360
	ldr	r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b28:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000b2c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b30:	20001a1c 	.word	0x20001a1c

08000b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_2_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_Init+0x3c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_Init+0x3c>)
 8000b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 f8df 	bl	8000d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff feb5 	bl	80008c4 <HAL_InitTick>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	e001      	b.n	8000b6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b66:	f7ff fe43 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	200019d8 	.word	0x200019d8

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200019d8 	.word	0x200019d8

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ff4c 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3a:	f7ff ff61 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	6978      	ldr	r0, [r7, #20]
 8000d46:	f7ff ffb1 	bl	8000cac <NVIC_EncodePriority>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff80 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff54 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8a:	e17f      	b.n	800108c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 8171 	beq.w	8001086 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d00b      	beq.n	8000dc4 <HAL_GPIO_Init+0x48>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d007      	beq.n	8000dc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db8:	2b11      	cmp	r3, #17
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b12      	cmp	r3, #18
 8000dc2:	d130      	bne.n	8000e26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	f003 0201 	and.w	r2, r3, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d118      	bne.n	8000e64 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x128>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	6939      	ldr	r1, [r7, #16]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80ac 	beq.w	8001086 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b5f      	ldr	r3, [pc, #380]	; (80010ac <HAL_GPIO_Init+0x330>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	4a5e      	ldr	r2, [pc, #376]	; (80010ac <HAL_GPIO_Init+0x330>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3a:	4b5c      	ldr	r3, [pc, #368]	; (80010ac <HAL_GPIO_Init+0x330>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f46:	4a5a      	ldr	r2, [pc, #360]	; (80010b0 <HAL_GPIO_Init+0x334>)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f70:	d025      	beq.n	8000fbe <HAL_GPIO_Init+0x242>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4f      	ldr	r2, [pc, #316]	; (80010b4 <HAL_GPIO_Init+0x338>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d01f      	beq.n	8000fba <HAL_GPIO_Init+0x23e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4e      	ldr	r2, [pc, #312]	; (80010b8 <HAL_GPIO_Init+0x33c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x23a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4d      	ldr	r2, [pc, #308]	; (80010bc <HAL_GPIO_Init+0x340>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x236>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4c      	ldr	r2, [pc, #304]	; (80010c0 <HAL_GPIO_Init+0x344>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x232>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4b      	ldr	r2, [pc, #300]	; (80010c4 <HAL_GPIO_Init+0x348>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x22e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4a      	ldr	r2, [pc, #296]	; (80010c8 <HAL_GPIO_Init+0x34c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x22a>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e00c      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e00a      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000faa:	2305      	movs	r3, #5
 8000fac:	e008      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e004      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x244>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	f002 0203 	and.w	r2, r2, #3
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fd0:	4937      	ldr	r1, [pc, #220]	; (80010b0 <HAL_GPIO_Init+0x334>)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fde:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <HAL_GPIO_Init+0x350>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001002:	4a32      	ldr	r2, [pc, #200]	; (80010cc <HAL_GPIO_Init+0x350>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <HAL_GPIO_Init+0x350>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800102c:	4a27      	ldr	r2, [pc, #156]	; (80010cc <HAL_GPIO_Init+0x350>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <HAL_GPIO_Init+0x350>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001056:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <HAL_GPIO_Init+0x350>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_GPIO_Init+0x350>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001080:	4a12      	ldr	r2, [pc, #72]	; (80010cc <HAL_GPIO_Init+0x350>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3301      	adds	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa22 f303 	lsr.w	r3, r2, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	f47f ae78 	bne.w	8000d8c <HAL_GPIO_Init+0x10>
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010000 	.word	0x40010000
 80010b4:	48000400 	.word	0x48000400
 80010b8:	48000800 	.word	0x48000800
 80010bc:	48000c00 	.word	0x48000c00
 80010c0:	48001000 	.word	0x48001000
 80010c4:	48001400 	.word	0x48001400
 80010c8:	48001800 	.word	0x48001800
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
 80010dc:	4613      	mov	r3, r2
 80010de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	041a      	lsls	r2, r3, #16
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43d9      	mvns	r1, r3
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	400b      	ands	r3, r1
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_PWREx_GetVoltageRange+0x18>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40007000 	.word	0x40007000

08001150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800115e:	d130      	bne.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800116c:	d038      	beq.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2232      	movs	r2, #50	; 0x32
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0c9b      	lsrs	r3, r3, #18
 8001190:	3301      	adds	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001194:	e002      	b.n	800119c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3b01      	subs	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a8:	d102      	bne.n	80011b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f2      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011bc:	d110      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e00f      	b.n	80011e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ce:	d007      	beq.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40007000 	.word	0x40007000
 80011f4:	20000000 	.word	0x20000000
 80011f8:	431bde83 	.word	0x431bde83

080011fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e3d4      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800120e:	4ba1      	ldr	r3, [pc, #644]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001218:	4b9e      	ldr	r3, [pc, #632]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 80e4 	beq.w	80013f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <HAL_RCC_OscConfig+0x4a>
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b0c      	cmp	r3, #12
 800123a:	f040 808b 	bne.w	8001354 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b01      	cmp	r3, #1
 8001242:	f040 8087 	bne.w	8001354 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001246:	4b93      	ldr	r3, [pc, #588]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <HAL_RCC_OscConfig+0x62>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e3ac      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	4b8c      	ldr	r3, [pc, #560]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <HAL_RCC_OscConfig+0x7c>
 800126e:	4b89      	ldr	r3, [pc, #548]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001276:	e005      	b.n	8001284 <HAL_RCC_OscConfig+0x88>
 8001278:	4b86      	ldr	r3, [pc, #536]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800127a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001284:	4293      	cmp	r3, r2
 8001286:	d223      	bcs.n	80012d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fd71 	bl	8001d74 <RCC_SetFlashLatencyFromMSIRange>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e38d      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129c:	4b7d      	ldr	r3, [pc, #500]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a7c      	ldr	r2, [pc, #496]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b7a      	ldr	r3, [pc, #488]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	4977      	ldr	r1, [pc, #476]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ba:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	4972      	ldr	r1, [pc, #456]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]
 80012ce:	e025      	b.n	800131c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d0:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a6f      	ldr	r2, [pc, #444]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	496a      	ldr	r1, [pc, #424]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ee:	4b69      	ldr	r3, [pc, #420]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	4965      	ldr	r1, [pc, #404]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d109      	bne.n	800131c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fd31 	bl	8001d74 <RCC_SetFlashLatencyFromMSIRange>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e34d      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800131c:	f000 fc36 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001320:	4602      	mov	r2, r0
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	495a      	ldr	r1, [pc, #360]	; (8001498 <HAL_RCC_OscConfig+0x29c>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	4a58      	ldr	r2, [pc, #352]	; (800149c <HAL_RCC_OscConfig+0x2a0>)
 800133a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800133c:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <HAL_RCC_OscConfig+0x2a4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fabf 	bl	80008c4 <HAL_InitTick>
 8001346:	4603      	mov	r3, r0
 8001348:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d052      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	e331      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d032      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800135c:	4b4d      	ldr	r3, [pc, #308]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a4c      	ldr	r2, [pc, #304]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001368:	f7ff fc1a 	bl	8000ba0 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001370:	f7ff fc16 	bl	8000ba0 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e31a      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001382:	4b44      	ldr	r3, [pc, #272]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a40      	ldr	r2, [pc, #256]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	493b      	ldr	r1, [pc, #236]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ac:	4b39      	ldr	r3, [pc, #228]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	4936      	ldr	r1, [pc, #216]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	e01a      	b.n	80013f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a33      	ldr	r2, [pc, #204]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fbe7 	bl	8000ba0 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d6:	f7ff fbe3 	bl	8000ba0 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e2e7      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x1da>
 80013f4:	e000      	b.n	80013f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d074      	beq.n	80014ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2b08      	cmp	r3, #8
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x21a>
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b0c      	cmp	r3, #12
 800140e:	d10e      	bne.n	800142e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d10b      	bne.n	800142e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d064      	beq.n	80014ec <HAL_RCC_OscConfig+0x2f0>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d160      	bne.n	80014ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e2c4      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001436:	d106      	bne.n	8001446 <HAL_RCC_OscConfig+0x24a>
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a15      	ldr	r2, [pc, #84]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800143e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e01d      	b.n	8001482 <HAL_RCC_OscConfig+0x286>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144e:	d10c      	bne.n	800146a <HAL_RCC_OscConfig+0x26e>
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001456:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	e00b      	b.n	8001482 <HAL_RCC_OscConfig+0x286>
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800147c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001480:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d01c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148a:	f7ff fb89 	bl	8000ba0 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001490:	e011      	b.n	80014b6 <HAL_RCC_OscConfig+0x2ba>
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	08006300 	.word	0x08006300
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fb7c 	bl	8000ba0 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e280      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	4baf      	ldr	r3, [pc, #700]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x2a8>
 80014c2:	e014      	b.n	80014ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fb6c 	bl	8000ba0 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fb68 	bl	8000ba0 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e26c      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014de:	4ba5      	ldr	r3, [pc, #660]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x2d0>
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d060      	beq.n	80015bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d005      	beq.n	800150c <HAL_RCC_OscConfig+0x310>
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d119      	bne.n	800153a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d116      	bne.n	800153a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150c:	4b99      	ldr	r3, [pc, #612]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_OscConfig+0x328>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e249      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b93      	ldr	r3, [pc, #588]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	061b      	lsls	r3, r3, #24
 8001532:	4990      	ldr	r1, [pc, #576]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001538:	e040      	b.n	80015bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d023      	beq.n	800158a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001542:	4b8c      	ldr	r3, [pc, #560]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a8b      	ldr	r2, [pc, #556]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fb27 	bl	8000ba0 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff fb23 	bl	8000ba0 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e227      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001568:	4b82      	ldr	r3, [pc, #520]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	4b7f      	ldr	r3, [pc, #508]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	497c      	ldr	r1, [pc, #496]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
 8001588:	e018      	b.n	80015bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158a:	4b7a      	ldr	r3, [pc, #488]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a79      	ldr	r2, [pc, #484]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fb03 	bl	8000ba0 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff faff 	bl	8000ba0 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e203      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b0:	4b70      	ldr	r3, [pc, #448]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d03c      	beq.n	8001642 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d01c      	beq.n	800160a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d6:	4a67      	ldr	r2, [pc, #412]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fade 	bl	8000ba0 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff fada 	bl	8000ba0 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1de      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015fa:	4b5e      	ldr	r3, [pc, #376]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ef      	beq.n	80015e8 <HAL_RCC_OscConfig+0x3ec>
 8001608:	e01b      	b.n	8001642 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160a:	4b5a      	ldr	r3, [pc, #360]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 800160c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001610:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff fac1 	bl	8000ba0 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fabd 	bl	8000ba0 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1c1      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001634:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ef      	bne.n	8001622 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80a6 	beq.w	800179c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001654:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10d      	bne.n	800167c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001660:	4b44      	ldr	r3, [pc, #272]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	4a43      	ldr	r2, [pc, #268]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166a:	6593      	str	r3, [r2, #88]	; 0x58
 800166c:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001678:	2301      	movs	r3, #1
 800167a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <HAL_RCC_OscConfig+0x57c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d118      	bne.n	80016ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001688:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_OscConfig+0x57c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a3a      	ldr	r2, [pc, #232]	; (8001778 <HAL_RCC_OscConfig+0x57c>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001694:	f7ff fa84 	bl	8000ba0 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169c:	f7ff fa80 	bl	8000ba0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e184      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <HAL_RCC_OscConfig+0x57c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4d8>
 80016c2:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c8:	4a2a      	ldr	r2, [pc, #168]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d2:	e024      	b.n	800171e <HAL_RCC_OscConfig+0x522>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d110      	bne.n	80016fe <HAL_RCC_OscConfig+0x502>
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e2:	4a24      	ldr	r2, [pc, #144]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	4a20      	ldr	r2, [pc, #128]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fc:	e00f      	b.n	800171e <HAL_RCC_OscConfig+0x522>
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001704:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001716:	f023 0304 	bic.w	r3, r3, #4
 800171a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d016      	beq.n	8001754 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001726:	f7ff fa3b 	bl	8000ba0 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff fa37 	bl	8000ba0 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e139      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0ed      	beq.n	800172e <HAL_RCC_OscConfig+0x532>
 8001752:	e01a      	b.n	800178a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fa24 	bl	8000ba0 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800175a:	e00f      	b.n	800177c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff fa20 	bl	8000ba0 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d906      	bls.n	800177c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e122      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800177c:	4b90      	ldr	r3, [pc, #576]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1e8      	bne.n	800175c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178a:	7ffb      	ldrb	r3, [r7, #31]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001790:	4b8b      	ldr	r3, [pc, #556]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001794:	4a8a      	ldr	r2, [pc, #552]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 8108 	beq.w	80019b6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	f040 80d0 	bne.w	8001950 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017b0:	4b83      	ldr	r3, [pc, #524]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0203 	and.w	r2, r3, #3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d130      	bne.n	8001826 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	3b01      	subs	r3, #1
 80017d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d127      	bne.n	8001826 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d11f      	bne.n	8001826 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017f0:	2a07      	cmp	r2, #7
 80017f2:	bf14      	ite	ne
 80017f4:	2201      	movne	r2, #1
 80017f6:	2200      	moveq	r2, #0
 80017f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d113      	bne.n	8001826 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	3b01      	subs	r3, #1
 800180c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d109      	bne.n	8001826 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	3b01      	subs	r3, #1
 8001820:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d06e      	beq.n	8001904 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b0c      	cmp	r3, #12
 800182a:	d069      	beq.n	8001900 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800182c:	4b64      	ldr	r3, [pc, #400]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001838:	4b61      	ldr	r3, [pc, #388]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0b7      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001848:	4b5d      	ldr	r3, [pc, #372]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a5c      	ldr	r2, [pc, #368]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 800184e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001852:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001854:	f7ff f9a4 	bl	8000ba0 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff f9a0 	bl	8000ba0 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0a4      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186e:	4b54      	ldr	r3, [pc, #336]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187a:	4b51      	ldr	r3, [pc, #324]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	4b51      	ldr	r3, [pc, #324]	; (80019c4 <HAL_RCC_OscConfig+0x7c8>)
 8001880:	4013      	ands	r3, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800188a:	3a01      	subs	r2, #1
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	4311      	orrs	r1, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001894:	0212      	lsls	r2, r2, #8
 8001896:	4311      	orrs	r1, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800189c:	0852      	lsrs	r2, r2, #1
 800189e:	3a01      	subs	r2, #1
 80018a0:	0552      	lsls	r2, r2, #21
 80018a2:	4311      	orrs	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018a8:	0852      	lsrs	r2, r2, #1
 80018aa:	3a01      	subs	r2, #1
 80018ac:	0652      	lsls	r2, r2, #25
 80018ae:	4311      	orrs	r1, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018b4:	0912      	lsrs	r2, r2, #4
 80018b6:	0452      	lsls	r2, r2, #17
 80018b8:	430a      	orrs	r2, r1
 80018ba:	4941      	ldr	r1, [pc, #260]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018c0:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3e      	ldr	r2, [pc, #248]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018cc:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4a3b      	ldr	r2, [pc, #236]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 80018d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018d8:	f7ff f962 	bl	8000ba0 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff f95e 	bl	8000ba0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e062      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f2:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018fe:	e05a      	b.n	80019b6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e059      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001904:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d152      	bne.n	80019b6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001910:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a2a      	ldr	r2, [pc, #168]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800191c:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001926:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001928:	f7ff f93a 	bl	8000ba0 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff f936 	bl	8000ba0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e03a      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x734>
 800194e:	e032      	b.n	80019b6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d02d      	beq.n	80019b2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 800195c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001960:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d105      	bne.n	800197a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001974:	f023 0303 	bic.w	r3, r3, #3
 8001978:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	4a10      	ldr	r2, [pc, #64]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 8001980:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001988:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff f909 	bl	8000ba0 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff f905 	bl	8000ba0 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e009      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RCC_OscConfig+0x7c4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x796>
 80019b0:	e001      	b.n	80019b6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	f99d808c 	.word	0xf99d808c

080019c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0c8      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <HAL_RCC_ClockConfig+0x1b0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d910      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b63      	ldr	r3, [pc, #396]	; (8001b78 <HAL_RCC_ClockConfig+0x1b0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 0207 	bic.w	r2, r3, #7
 80019f2:	4961      	ldr	r1, [pc, #388]	; (8001b78 <HAL_RCC_ClockConfig+0x1b0>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <HAL_RCC_ClockConfig+0x1b0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0b0      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d04c      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a20:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d121      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e09e      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a38:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d115      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e092      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a50:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e086      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e07e      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 0203 	bic.w	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	493f      	ldr	r1, [pc, #252]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a82:	f7ff f88d 	bl	8000ba0 <HAL_GetTick>
 8001a86:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7ff f889 	bl	8000ba0 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e066      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 020c 	and.w	r2, r3, #12
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d1eb      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d008      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	492c      	ldr	r1, [pc, #176]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <HAL_RCC_ClockConfig+0x1b0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d210      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4924      	ldr	r1, [pc, #144]	; (8001b78 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_RCC_ClockConfig+0x1b0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e036      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4918      	ldr	r1, [pc, #96]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4910      	ldr	r1, [pc, #64]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b3e:	f000 f825 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_RCC_ClockConfig+0x1b4>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490c      	ldr	r1, [pc, #48]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe feae 	bl	80008c4 <HAL_InitTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08006300 	.word	0x08006300
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba4:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d121      	bne.n	8001bfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d11e      	bne.n	8001bfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bc0:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bcc:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	e005      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001be8:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10d      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c04:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	e004      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d134      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d003      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0xac>
 8001c30:	e005      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c34:	617b      	str	r3, [r7, #20]
      break;
 8001c36:	e005      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c3a:	617b      	str	r3, [r7, #20]
      break;
 8001c3c:	e002      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	617b      	str	r3, [r7, #20]
      break;
 8001c42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	3301      	adds	r3, #1
 8001c50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	fb02 f203 	mul.w	r2, r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	0e5b      	lsrs	r3, r3, #25
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	3301      	adds	r3, #1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c84:	69bb      	ldr	r3, [r7, #24]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08006318 	.word	0x08006318
 8001c9c:	00f42400 	.word	0x00f42400

08001ca0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000000 	.word	0x20000000

08001cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cbc:	f7ff fff0 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4904      	ldr	r1, [pc, #16]	; (8001ce0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	08006310 	.word	0x08006310

08001ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ce8:	f7ff ffda 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0adb      	lsrs	r3, r3, #11
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4904      	ldr	r1, [pc, #16]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08006310 	.word	0x08006310

08001d10 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_RCC_GetClockConfig+0x5c>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0203 	and.w	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_RCC_GetClockConfig+0x5c>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_RCC_GetClockConfig+0x5c>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_GetClockConfig+0x5c>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_RCC_GetClockConfig+0x60>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0207 	and.w	r2, r3, #7
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	601a      	str	r2, [r3, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40022000 	.word	0x40022000

08001d74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d8c:	f7ff f9d2 	bl	8001134 <HAL_PWREx_GetVoltageRange>
 8001d90:	6178      	str	r0, [r7, #20]
 8001d92:	e014      	b.n	8001dbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dac:	f7ff f9c2 	bl	8001134 <HAL_PWREx_GetVoltageRange>
 8001db0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc4:	d10b      	bne.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b80      	cmp	r3, #128	; 0x80
 8001dca:	d919      	bls.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2ba0      	cmp	r3, #160	; 0xa0
 8001dd0:	d902      	bls.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	e013      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd8:	2301      	movs	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	e010      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d902      	bls.n	8001dea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001de4:	2303      	movs	r3, #3
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e00a      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b80      	cmp	r3, #128	; 0x80
 8001dee:	d102      	bne.n	8001df6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001df0:	2302      	movs	r3, #2
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	e004      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b70      	cmp	r3, #112	; 0x70
 8001dfa:	d101      	bne.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 0207 	bic.w	r2, r3, #7
 8001e08:	4909      	ldr	r1, [pc, #36]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d001      	beq.n	8001e22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40022000 	.word	0x40022000

08001e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e40:	2300      	movs	r3, #0
 8001e42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d041      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e58:	d02a      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e5e:	d824      	bhi.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e64:	d008      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e6a:	d81e      	bhi.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e74:	d010      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e76:	e018      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e78:	4b86      	ldr	r3, [pc, #536]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a85      	ldr	r2, [pc, #532]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e84:	e015      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fabb 	bl	8002408 <RCCEx_PLLSAI1_Config>
 8001e92:	4603      	mov	r3, r0
 8001e94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e96:	e00c      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3320      	adds	r3, #32
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fba6 	bl	80025f0 <RCCEx_PLLSAI2_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ea8:	e003      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	74fb      	strb	r3, [r7, #19]
      break;
 8001eae:	e000      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eb2:	7cfb      	ldrb	r3, [r7, #19]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eb8:	4b76      	ldr	r3, [pc, #472]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ec6:	4973      	ldr	r1, [pc, #460]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ece:	e001      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ed0:	7cfb      	ldrb	r3, [r7, #19]
 8001ed2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d041      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ee4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ee8:	d02a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001eea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001eee:	d824      	bhi.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef4:	d008      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001efa:	d81e      	bhi.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00a      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f04:	d010      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f06:	e018      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f08:	4b62      	ldr	r3, [pc, #392]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a61      	ldr	r2, [pc, #388]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f14:	e015      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fa73 	bl	8002408 <RCCEx_PLLSAI1_Config>
 8001f22:	4603      	mov	r3, r0
 8001f24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f26:	e00c      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3320      	adds	r3, #32
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fb5e 	bl	80025f0 <RCCEx_PLLSAI2_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f38:	e003      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f3e:	e000      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f42:	7cfb      	ldrb	r3, [r7, #19]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10b      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f48:	4b52      	ldr	r3, [pc, #328]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f56:	494f      	ldr	r1, [pc, #316]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f5e:	e001      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f60:	7cfb      	ldrb	r3, [r7, #19]
 8001f62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a0 	beq.w	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f86:	2300      	movs	r3, #0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8c:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	4a40      	ldr	r2, [pc, #256]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f96:	6593      	str	r3, [r2, #88]	; 0x58
 8001f98:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a3a      	ldr	r2, [pc, #232]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fb4:	f7fe fdf4 	bl	8000ba0 <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fba:	e009      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbc:	f7fe fdf0 	bl	8000ba0 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d902      	bls.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8001fce:	e005      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0ef      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d15c      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01f      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d019      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d016      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7fe fdaf 	bl	8000ba0 <HAL_GetTick>
 8002042:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002044:	e00b      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe fdab 	bl	8000ba0 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	; 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d902      	bls.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	74fb      	strb	r3, [r7, #19]
            break;
 800205c:	e006      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ec      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002082:	4904      	ldr	r1, [pc, #16]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800208a:	e009      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	74bb      	strb	r3, [r7, #18]
 8002090:	e006      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a0:	7c7b      	ldrb	r3, [r7, #17]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d105      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a6:	4b9e      	ldr	r3, [pc, #632]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	4a9d      	ldr	r2, [pc, #628]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020be:	4b98      	ldr	r3, [pc, #608]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c4:	f023 0203 	bic.w	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	4994      	ldr	r1, [pc, #592]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020e0:	4b8f      	ldr	r3, [pc, #572]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	f023 020c 	bic.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	498c      	ldr	r1, [pc, #560]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002102:	4b87      	ldr	r3, [pc, #540]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002108:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4983      	ldr	r1, [pc, #524]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002124:	4b7e      	ldr	r3, [pc, #504]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	497b      	ldr	r1, [pc, #492]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002146:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002154:	4972      	ldr	r1, [pc, #456]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002168:	4b6d      	ldr	r3, [pc, #436]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	496a      	ldr	r1, [pc, #424]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800218a:	4b65      	ldr	r3, [pc, #404]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002190:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	4961      	ldr	r1, [pc, #388]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021ac:	4b5c      	ldr	r3, [pc, #368]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ba:	4959      	ldr	r1, [pc, #356]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ce:	4b54      	ldr	r3, [pc, #336]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021dc:	4950      	ldr	r1, [pc, #320]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021f0:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	4948      	ldr	r1, [pc, #288]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002212:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002218:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	493f      	ldr	r1, [pc, #252]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d028      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002234:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002242:	4937      	ldr	r1, [pc, #220]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002252:	d106      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002254:	4b32      	ldr	r3, [pc, #200]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a31      	ldr	r2, [pc, #196]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800225e:	60d3      	str	r3, [r2, #12]
 8002260:	e011      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002266:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800226a:	d10c      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	2101      	movs	r1, #1
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f8c8 	bl	8002408 <RCCEx_PLLSAI1_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d028      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002292:	4b23      	ldr	r3, [pc, #140]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	491f      	ldr	r1, [pc, #124]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022b0:	d106      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022bc:	60d3      	str	r3, [r2, #12]
 80022be:	e011      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2101      	movs	r1, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f899 	bl	8002408 <RCCEx_PLLSAI1_Config>
 80022d6:	4603      	mov	r3, r0
 80022d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022da:	7cfb      	ldrb	r3, [r7, #19]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d02b      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800230e:	d109      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a02      	ldr	r2, [pc, #8]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800231a:	60d3      	str	r3, [r2, #12]
 800231c:	e014      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800232c:	d10c      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	2101      	movs	r1, #1
 8002334:	4618      	mov	r0, r3
 8002336:	f000 f867 	bl	8002408 <RCCEx_PLLSAI1_Config>
 800233a:	4603      	mov	r3, r0
 800233c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800233e:	7cfb      	ldrb	r3, [r7, #19]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d02f      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002362:	4928      	ldr	r1, [pc, #160]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800236e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002372:	d10d      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3304      	adds	r3, #4
 8002378:	2102      	movs	r1, #2
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f844 	bl	8002408 <RCCEx_PLLSAI1_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d014      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	74bb      	strb	r3, [r7, #18]
 800238e:	e011      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002398:	d10c      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3320      	adds	r3, #32
 800239e:	2102      	movs	r1, #2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f925 	bl	80025f0 <RCCEx_PLLSAI2_Config>
 80023a6:	4603      	mov	r3, r0
 80023a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023aa:	7cfb      	ldrb	r3, [r7, #19]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ce:	490d      	ldr	r1, [pc, #52]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f2:	4904      	ldr	r1, [pc, #16]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000

08002408 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002416:	4b75      	ldr	r3, [pc, #468]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d018      	beq.n	8002454 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002422:	4b72      	ldr	r3, [pc, #456]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0203 	and.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d10d      	bne.n	800244e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
       ||
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800243a:	4b6c      	ldr	r3, [pc, #432]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
       ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d047      	beq.n	80024de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	e044      	b.n	80024de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d018      	beq.n	800248e <RCCEx_PLLSAI1_Config+0x86>
 800245c:	2b03      	cmp	r3, #3
 800245e:	d825      	bhi.n	80024ac <RCCEx_PLLSAI1_Config+0xa4>
 8002460:	2b01      	cmp	r3, #1
 8002462:	d002      	beq.n	800246a <RCCEx_PLLSAI1_Config+0x62>
 8002464:	2b02      	cmp	r3, #2
 8002466:	d009      	beq.n	800247c <RCCEx_PLLSAI1_Config+0x74>
 8002468:	e020      	b.n	80024ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800246a:	4b60      	ldr	r3, [pc, #384]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11d      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247a:	e01a      	b.n	80024b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800247c:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002484:	2b00      	cmp	r3, #0
 8002486:	d116      	bne.n	80024b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248c:	e013      	b.n	80024b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800248e:	4b57      	ldr	r3, [pc, #348]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10f      	bne.n	80024ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800249a:	4b54      	ldr	r3, [pc, #336]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024aa:	e006      	b.n	80024ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      break;
 80024b0:	e004      	b.n	80024bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024b2:	bf00      	nop
 80024b4:	e002      	b.n	80024bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024c2:	4b4a      	ldr	r3, [pc, #296]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	430b      	orrs	r3, r1
 80024d8:	4944      	ldr	r1, [pc, #272]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d17d      	bne.n	80025e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024e4:	4b41      	ldr	r3, [pc, #260]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a40      	ldr	r2, [pc, #256]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f0:	f7fe fb56 	bl	8000ba0 <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024f6:	e009      	b.n	800250c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024f8:	f7fe fb52 	bl	8000ba0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d902      	bls.n	800250c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	73fb      	strb	r3, [r7, #15]
        break;
 800250a:	e005      	b.n	8002518 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800250c:	4b37      	ldr	r3, [pc, #220]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ef      	bne.n	80024f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d160      	bne.n	80025e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d111      	bne.n	8002548 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800252c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6892      	ldr	r2, [r2, #8]
 8002534:	0211      	lsls	r1, r2, #8
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68d2      	ldr	r2, [r2, #12]
 800253a:	0912      	lsrs	r2, r2, #4
 800253c:	0452      	lsls	r2, r2, #17
 800253e:	430a      	orrs	r2, r1
 8002540:	492a      	ldr	r1, [pc, #168]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	610b      	str	r3, [r1, #16]
 8002546:	e027      	b.n	8002598 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d112      	bne.n	8002574 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800254e:	4b27      	ldr	r3, [pc, #156]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002556:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6892      	ldr	r2, [r2, #8]
 800255e:	0211      	lsls	r1, r2, #8
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6912      	ldr	r2, [r2, #16]
 8002564:	0852      	lsrs	r2, r2, #1
 8002566:	3a01      	subs	r2, #1
 8002568:	0552      	lsls	r2, r2, #21
 800256a:	430a      	orrs	r2, r1
 800256c:	491f      	ldr	r1, [pc, #124]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	610b      	str	r3, [r1, #16]
 8002572:	e011      	b.n	8002598 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800257c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6892      	ldr	r2, [r2, #8]
 8002584:	0211      	lsls	r1, r2, #8
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6952      	ldr	r2, [r2, #20]
 800258a:	0852      	lsrs	r2, r2, #1
 800258c:	3a01      	subs	r2, #1
 800258e:	0652      	lsls	r2, r2, #25
 8002590:	430a      	orrs	r2, r1
 8002592:	4916      	ldr	r1, [pc, #88]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a13      	ldr	r2, [pc, #76]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7fe fafc 	bl	8000ba0 <HAL_GetTick>
 80025a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025aa:	e009      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025ac:	f7fe faf8 	bl	8000ba0 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d902      	bls.n	80025c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	73fb      	strb	r3, [r7, #15]
          break;
 80025be:	e005      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ef      	beq.n	80025ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	4904      	ldr	r1, [pc, #16]	; (80025ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000

080025f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025fe:	4b6a      	ldr	r3, [pc, #424]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d018      	beq.n	800263c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800260a:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0203 	and.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d10d      	bne.n	8002636 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
       ||
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002622:	4b61      	ldr	r3, [pc, #388]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
       ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d047      	beq.n	80026c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	e044      	b.n	80026c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b03      	cmp	r3, #3
 8002642:	d018      	beq.n	8002676 <RCCEx_PLLSAI2_Config+0x86>
 8002644:	2b03      	cmp	r3, #3
 8002646:	d825      	bhi.n	8002694 <RCCEx_PLLSAI2_Config+0xa4>
 8002648:	2b01      	cmp	r3, #1
 800264a:	d002      	beq.n	8002652 <RCCEx_PLLSAI2_Config+0x62>
 800264c:	2b02      	cmp	r3, #2
 800264e:	d009      	beq.n	8002664 <RCCEx_PLLSAI2_Config+0x74>
 8002650:	e020      	b.n	8002694 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002652:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d11d      	bne.n	800269a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002662:	e01a      	b.n	800269a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	2b00      	cmp	r3, #0
 800266e:	d116      	bne.n	800269e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002674:	e013      	b.n	800269e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002676:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10f      	bne.n	80026a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002682:	4b49      	ldr	r3, [pc, #292]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002692:	e006      	b.n	80026a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      break;
 8002698:	e004      	b.n	80026a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800269a:	bf00      	nop
 800269c:	e002      	b.n	80026a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800269e:	bf00      	nop
 80026a0:	e000      	b.n	80026a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10d      	bne.n	80026c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026aa:	4b3f      	ldr	r3, [pc, #252]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	430b      	orrs	r3, r1
 80026c0:	4939      	ldr	r1, [pc, #228]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d167      	bne.n	800279c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026cc:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a35      	ldr	r2, [pc, #212]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d8:	f7fe fa62 	bl	8000ba0 <HAL_GetTick>
 80026dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026de:	e009      	b.n	80026f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026e0:	f7fe fa5e 	bl	8000ba0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d902      	bls.n	80026f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	73fb      	strb	r3, [r7, #15]
        break;
 80026f2:	e005      	b.n	8002700 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1ef      	bne.n	80026e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d14a      	bne.n	800279c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d111      	bne.n	8002730 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6892      	ldr	r2, [r2, #8]
 800271c:	0211      	lsls	r1, r2, #8
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68d2      	ldr	r2, [r2, #12]
 8002722:	0912      	lsrs	r2, r2, #4
 8002724:	0452      	lsls	r2, r2, #17
 8002726:	430a      	orrs	r2, r1
 8002728:	491f      	ldr	r1, [pc, #124]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	614b      	str	r3, [r1, #20]
 800272e:	e011      	b.n	8002754 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002730:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002738:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6892      	ldr	r2, [r2, #8]
 8002740:	0211      	lsls	r1, r2, #8
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6912      	ldr	r2, [r2, #16]
 8002746:	0852      	lsrs	r2, r2, #1
 8002748:	3a01      	subs	r2, #1
 800274a:	0652      	lsls	r2, r2, #25
 800274c:	430a      	orrs	r2, r1
 800274e:	4916      	ldr	r1, [pc, #88]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002750:	4313      	orrs	r3, r2
 8002752:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fa1e 	bl	8000ba0 <HAL_GetTick>
 8002764:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002766:	e009      	b.n	800277c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002768:	f7fe fa1a 	bl	8000ba0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d902      	bls.n	800277c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	73fb      	strb	r3, [r7, #15]
          break;
 800277a:	e005      	b.n	8002788 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ef      	beq.n	8002768 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	4904      	ldr	r1, [pc, #16]	; (80027a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000

080027ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e049      	b.n	8002852 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f841 	bl	800285a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f000 f9f8 	bl	8002be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d001      	beq.n	8002888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e04f      	b.n	8002928 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a23      	ldr	r2, [pc, #140]	; (8002934 <HAL_TIM_Base_Start_IT+0xc4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01d      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b2:	d018      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <HAL_TIM_Base_Start_IT+0xc8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1e      	ldr	r2, [pc, #120]	; (800293c <HAL_TIM_Base_Start_IT+0xcc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00e      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_TIM_Base_Start_IT+0xd0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <HAL_TIM_Base_Start_IT+0xd4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x76>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a19      	ldr	r2, [pc, #100]	; (8002948 <HAL_TIM_Base_Start_IT+0xd8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d115      	bne.n	8002912 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <HAL_TIM_Base_Start_IT+0xdc>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d015      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0xb4>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fe:	d011      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	e008      	b.n	8002924 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e000      	b.n	8002926 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002924:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00
 8002944:	40013400 	.word	0x40013400
 8002948:	40014000 	.word	0x40014000
 800294c:	00010007 	.word	0x00010007

08002950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d122      	bne.n	80029ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b02      	cmp	r3, #2
 8002972:	d11b      	bne.n	80029ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0202 	mvn.w	r2, #2
 800297c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f905 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8f7 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f908 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d122      	bne.n	8002a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d11b      	bne.n	8002a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0204 	mvn.w	r2, #4
 80029d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8db 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 80029ec:	e005      	b.n	80029fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8cd 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f8de 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d122      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d11b      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0208 	mvn.w	r2, #8
 8002a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8b1 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8a3 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f8b4 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d122      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d11b      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0210 	mvn.w	r2, #16
 8002a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f887 	bl	8002ba2 <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f879 	bl	8002b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f88a 	bl	8002bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0201 	mvn.w	r2, #1
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fd fe42 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	d10e      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d107      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f914 	bl	8002d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0e:	d10e      	bne.n	8002b2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d107      	bne.n	8002b2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f907 	bl	8002d3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d10e      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d107      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f838 	bl	8002bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d10e      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d107      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f06f 0220 	mvn.w	r2, #32
 8002b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8c7 	bl	8002d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a40      	ldr	r2, [pc, #256]	; (8002cf4 <TIM_Base_SetConfig+0x114>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d00f      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3d      	ldr	r2, [pc, #244]	; (8002cf8 <TIM_Base_SetConfig+0x118>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00b      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3c      	ldr	r2, [pc, #240]	; (8002cfc <TIM_Base_SetConfig+0x11c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3b      	ldr	r2, [pc, #236]	; (8002d00 <TIM_Base_SetConfig+0x120>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <TIM_Base_SetConfig+0x40>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a3a      	ldr	r2, [pc, #232]	; (8002d04 <TIM_Base_SetConfig+0x124>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d108      	bne.n	8002c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <TIM_Base_SetConfig+0x114>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01f      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d01b      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <TIM_Base_SetConfig+0x118>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d017      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <TIM_Base_SetConfig+0x11c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2a      	ldr	r2, [pc, #168]	; (8002d00 <TIM_Base_SetConfig+0x120>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00f      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a29      	ldr	r2, [pc, #164]	; (8002d04 <TIM_Base_SetConfig+0x124>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a28      	ldr	r2, [pc, #160]	; (8002d08 <TIM_Base_SetConfig+0x128>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <TIM_Base_SetConfig+0x12c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0x9a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <TIM_Base_SetConfig+0x130>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <TIM_Base_SetConfig+0x114>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00f      	beq.n	8002cd8 <TIM_Base_SetConfig+0xf8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <TIM_Base_SetConfig+0x124>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_Base_SetConfig+0xf8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <TIM_Base_SetConfig+0x128>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_Base_SetConfig+0xf8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a10      	ldr	r2, [pc, #64]	; (8002d0c <TIM_Base_SetConfig+0x12c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_Base_SetConfig+0xf8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a0f      	ldr	r2, [pc, #60]	; (8002d10 <TIM_Base_SetConfig+0x130>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d103      	bne.n	8002ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	615a      	str	r2, [r3, #20]
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40000c00 	.word	0x40000c00
 8002d04:	40013400 	.word	0x40013400
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40014400 	.word	0x40014400
 8002d10:	40014800 	.word	0x40014800

08002d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e040      	b.n	8002de4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fd fd64 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	; 0x24
 8002d7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f8c0 	bl	8002f14 <UART_SetConfig>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e022      	b.n	8002de4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fb3e 	bl	8003428 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fbc5 	bl	800356c <UART_CheckIdleState>
 8002de2:	4603      	mov	r3, r0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	f040 8082 	bne.w	8002f0a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <HAL_UART_Transmit+0x26>
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07a      	b.n	8002f0c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_UART_Transmit+0x38>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e073      	b.n	8002f0c <HAL_UART_Transmit+0x120>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2221      	movs	r2, #33	; 0x21
 8002e38:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e3a:	f7fd feb1 	bl	8000ba0 <HAL_GetTick>
 8002e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	88fa      	ldrh	r2, [r7, #6]
 8002e44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e58:	d108      	bne.n	8002e6c <HAL_UART_Transmit+0x80>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d104      	bne.n	8002e6c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	e003      	b.n	8002e74 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e7c:	e02d      	b.n	8002eda <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	2180      	movs	r1, #128	; 0x80
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fbb8 	bl	80035fe <UART_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e039      	b.n	8002f0c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	e008      	b.n	8002ec8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1cb      	bne.n	8002e7e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2140      	movs	r1, #64	; 0x40
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fb84 	bl	80035fe <UART_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e005      	b.n	8002f0c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f14:	b5b0      	push	{r4, r5, r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4bad      	ldr	r3, [pc, #692]	; (80031f4 <UART_SetConfig+0x2e0>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	69f9      	ldr	r1, [r7, #28]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4aa2      	ldr	r2, [pc, #648]	; (80031f8 <UART_SetConfig+0x2e4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a99      	ldr	r2, [pc, #612]	; (80031fc <UART_SetConfig+0x2e8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d121      	bne.n	8002fde <UART_SetConfig+0xca>
 8002f9a:	4b99      	ldr	r3, [pc, #612]	; (8003200 <UART_SetConfig+0x2ec>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d817      	bhi.n	8002fd8 <UART_SetConfig+0xc4>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <UART_SetConfig+0x9c>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fc1 	.word	0x08002fc1
 8002fb4:	08002fcd 	.word	0x08002fcd
 8002fb8:	08002fc7 	.word	0x08002fc7
 8002fbc:	08002fd3 	.word	0x08002fd3
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	76fb      	strb	r3, [r7, #27]
 8002fc4:	e0e7      	b.n	8003196 <UART_SetConfig+0x282>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	76fb      	strb	r3, [r7, #27]
 8002fca:	e0e4      	b.n	8003196 <UART_SetConfig+0x282>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	76fb      	strb	r3, [r7, #27]
 8002fd0:	e0e1      	b.n	8003196 <UART_SetConfig+0x282>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	76fb      	strb	r3, [r7, #27]
 8002fd6:	e0de      	b.n	8003196 <UART_SetConfig+0x282>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	76fb      	strb	r3, [r7, #27]
 8002fdc:	e0db      	b.n	8003196 <UART_SetConfig+0x282>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a88      	ldr	r2, [pc, #544]	; (8003204 <UART_SetConfig+0x2f0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d132      	bne.n	800304e <UART_SetConfig+0x13a>
 8002fe8:	4b85      	ldr	r3, [pc, #532]	; (8003200 <UART_SetConfig+0x2ec>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d828      	bhi.n	8003048 <UART_SetConfig+0x134>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0xe8>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003031 	.word	0x08003031
 8003000:	08003049 	.word	0x08003049
 8003004:	08003049 	.word	0x08003049
 8003008:	08003049 	.word	0x08003049
 800300c:	0800303d 	.word	0x0800303d
 8003010:	08003049 	.word	0x08003049
 8003014:	08003049 	.word	0x08003049
 8003018:	08003049 	.word	0x08003049
 800301c:	08003037 	.word	0x08003037
 8003020:	08003049 	.word	0x08003049
 8003024:	08003049 	.word	0x08003049
 8003028:	08003049 	.word	0x08003049
 800302c:	08003043 	.word	0x08003043
 8003030:	2300      	movs	r3, #0
 8003032:	76fb      	strb	r3, [r7, #27]
 8003034:	e0af      	b.n	8003196 <UART_SetConfig+0x282>
 8003036:	2302      	movs	r3, #2
 8003038:	76fb      	strb	r3, [r7, #27]
 800303a:	e0ac      	b.n	8003196 <UART_SetConfig+0x282>
 800303c:	2304      	movs	r3, #4
 800303e:	76fb      	strb	r3, [r7, #27]
 8003040:	e0a9      	b.n	8003196 <UART_SetConfig+0x282>
 8003042:	2308      	movs	r3, #8
 8003044:	76fb      	strb	r3, [r7, #27]
 8003046:	e0a6      	b.n	8003196 <UART_SetConfig+0x282>
 8003048:	2310      	movs	r3, #16
 800304a:	76fb      	strb	r3, [r7, #27]
 800304c:	e0a3      	b.n	8003196 <UART_SetConfig+0x282>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a6d      	ldr	r2, [pc, #436]	; (8003208 <UART_SetConfig+0x2f4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d120      	bne.n	800309a <UART_SetConfig+0x186>
 8003058:	4b69      	ldr	r3, [pc, #420]	; (8003200 <UART_SetConfig+0x2ec>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003062:	2b30      	cmp	r3, #48	; 0x30
 8003064:	d013      	beq.n	800308e <UART_SetConfig+0x17a>
 8003066:	2b30      	cmp	r3, #48	; 0x30
 8003068:	d814      	bhi.n	8003094 <UART_SetConfig+0x180>
 800306a:	2b20      	cmp	r3, #32
 800306c:	d009      	beq.n	8003082 <UART_SetConfig+0x16e>
 800306e:	2b20      	cmp	r3, #32
 8003070:	d810      	bhi.n	8003094 <UART_SetConfig+0x180>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <UART_SetConfig+0x168>
 8003076:	2b10      	cmp	r3, #16
 8003078:	d006      	beq.n	8003088 <UART_SetConfig+0x174>
 800307a:	e00b      	b.n	8003094 <UART_SetConfig+0x180>
 800307c:	2300      	movs	r3, #0
 800307e:	76fb      	strb	r3, [r7, #27]
 8003080:	e089      	b.n	8003196 <UART_SetConfig+0x282>
 8003082:	2302      	movs	r3, #2
 8003084:	76fb      	strb	r3, [r7, #27]
 8003086:	e086      	b.n	8003196 <UART_SetConfig+0x282>
 8003088:	2304      	movs	r3, #4
 800308a:	76fb      	strb	r3, [r7, #27]
 800308c:	e083      	b.n	8003196 <UART_SetConfig+0x282>
 800308e:	2308      	movs	r3, #8
 8003090:	76fb      	strb	r3, [r7, #27]
 8003092:	e080      	b.n	8003196 <UART_SetConfig+0x282>
 8003094:	2310      	movs	r3, #16
 8003096:	76fb      	strb	r3, [r7, #27]
 8003098:	e07d      	b.n	8003196 <UART_SetConfig+0x282>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a5b      	ldr	r2, [pc, #364]	; (800320c <UART_SetConfig+0x2f8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d120      	bne.n	80030e6 <UART_SetConfig+0x1d2>
 80030a4:	4b56      	ldr	r3, [pc, #344]	; (8003200 <UART_SetConfig+0x2ec>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030ae:	2bc0      	cmp	r3, #192	; 0xc0
 80030b0:	d013      	beq.n	80030da <UART_SetConfig+0x1c6>
 80030b2:	2bc0      	cmp	r3, #192	; 0xc0
 80030b4:	d814      	bhi.n	80030e0 <UART_SetConfig+0x1cc>
 80030b6:	2b80      	cmp	r3, #128	; 0x80
 80030b8:	d009      	beq.n	80030ce <UART_SetConfig+0x1ba>
 80030ba:	2b80      	cmp	r3, #128	; 0x80
 80030bc:	d810      	bhi.n	80030e0 <UART_SetConfig+0x1cc>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <UART_SetConfig+0x1b4>
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d006      	beq.n	80030d4 <UART_SetConfig+0x1c0>
 80030c6:	e00b      	b.n	80030e0 <UART_SetConfig+0x1cc>
 80030c8:	2300      	movs	r3, #0
 80030ca:	76fb      	strb	r3, [r7, #27]
 80030cc:	e063      	b.n	8003196 <UART_SetConfig+0x282>
 80030ce:	2302      	movs	r3, #2
 80030d0:	76fb      	strb	r3, [r7, #27]
 80030d2:	e060      	b.n	8003196 <UART_SetConfig+0x282>
 80030d4:	2304      	movs	r3, #4
 80030d6:	76fb      	strb	r3, [r7, #27]
 80030d8:	e05d      	b.n	8003196 <UART_SetConfig+0x282>
 80030da:	2308      	movs	r3, #8
 80030dc:	76fb      	strb	r3, [r7, #27]
 80030de:	e05a      	b.n	8003196 <UART_SetConfig+0x282>
 80030e0:	2310      	movs	r3, #16
 80030e2:	76fb      	strb	r3, [r7, #27]
 80030e4:	e057      	b.n	8003196 <UART_SetConfig+0x282>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a49      	ldr	r2, [pc, #292]	; (8003210 <UART_SetConfig+0x2fc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d125      	bne.n	800313c <UART_SetConfig+0x228>
 80030f0:	4b43      	ldr	r3, [pc, #268]	; (8003200 <UART_SetConfig+0x2ec>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030fe:	d017      	beq.n	8003130 <UART_SetConfig+0x21c>
 8003100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003104:	d817      	bhi.n	8003136 <UART_SetConfig+0x222>
 8003106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310a:	d00b      	beq.n	8003124 <UART_SetConfig+0x210>
 800310c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003110:	d811      	bhi.n	8003136 <UART_SetConfig+0x222>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <UART_SetConfig+0x20a>
 8003116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311a:	d006      	beq.n	800312a <UART_SetConfig+0x216>
 800311c:	e00b      	b.n	8003136 <UART_SetConfig+0x222>
 800311e:	2300      	movs	r3, #0
 8003120:	76fb      	strb	r3, [r7, #27]
 8003122:	e038      	b.n	8003196 <UART_SetConfig+0x282>
 8003124:	2302      	movs	r3, #2
 8003126:	76fb      	strb	r3, [r7, #27]
 8003128:	e035      	b.n	8003196 <UART_SetConfig+0x282>
 800312a:	2304      	movs	r3, #4
 800312c:	76fb      	strb	r3, [r7, #27]
 800312e:	e032      	b.n	8003196 <UART_SetConfig+0x282>
 8003130:	2308      	movs	r3, #8
 8003132:	76fb      	strb	r3, [r7, #27]
 8003134:	e02f      	b.n	8003196 <UART_SetConfig+0x282>
 8003136:	2310      	movs	r3, #16
 8003138:	76fb      	strb	r3, [r7, #27]
 800313a:	e02c      	b.n	8003196 <UART_SetConfig+0x282>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2d      	ldr	r2, [pc, #180]	; (80031f8 <UART_SetConfig+0x2e4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d125      	bne.n	8003192 <UART_SetConfig+0x27e>
 8003146:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <UART_SetConfig+0x2ec>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003150:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003154:	d017      	beq.n	8003186 <UART_SetConfig+0x272>
 8003156:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800315a:	d817      	bhi.n	800318c <UART_SetConfig+0x278>
 800315c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003160:	d00b      	beq.n	800317a <UART_SetConfig+0x266>
 8003162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003166:	d811      	bhi.n	800318c <UART_SetConfig+0x278>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <UART_SetConfig+0x260>
 800316c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003170:	d006      	beq.n	8003180 <UART_SetConfig+0x26c>
 8003172:	e00b      	b.n	800318c <UART_SetConfig+0x278>
 8003174:	2300      	movs	r3, #0
 8003176:	76fb      	strb	r3, [r7, #27]
 8003178:	e00d      	b.n	8003196 <UART_SetConfig+0x282>
 800317a:	2302      	movs	r3, #2
 800317c:	76fb      	strb	r3, [r7, #27]
 800317e:	e00a      	b.n	8003196 <UART_SetConfig+0x282>
 8003180:	2304      	movs	r3, #4
 8003182:	76fb      	strb	r3, [r7, #27]
 8003184:	e007      	b.n	8003196 <UART_SetConfig+0x282>
 8003186:	2308      	movs	r3, #8
 8003188:	76fb      	strb	r3, [r7, #27]
 800318a:	e004      	b.n	8003196 <UART_SetConfig+0x282>
 800318c:	2310      	movs	r3, #16
 800318e:	76fb      	strb	r3, [r7, #27]
 8003190:	e001      	b.n	8003196 <UART_SetConfig+0x282>
 8003192:	2310      	movs	r3, #16
 8003194:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <UART_SetConfig+0x2e4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	f040 8087 	bne.w	80032b0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031a2:	7efb      	ldrb	r3, [r7, #27]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d837      	bhi.n	8003218 <UART_SetConfig+0x304>
 80031a8:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <UART_SetConfig+0x29c>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	080031d5 	.word	0x080031d5
 80031b4:	08003219 	.word	0x08003219
 80031b8:	080031dd 	.word	0x080031dd
 80031bc:	08003219 	.word	0x08003219
 80031c0:	080031e3 	.word	0x080031e3
 80031c4:	08003219 	.word	0x08003219
 80031c8:	08003219 	.word	0x08003219
 80031cc:	08003219 	.word	0x08003219
 80031d0:	080031eb 	.word	0x080031eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d4:	f7fe fd70 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 80031d8:	6178      	str	r0, [r7, #20]
        break;
 80031da:	e022      	b.n	8003222 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <UART_SetConfig+0x300>)
 80031de:	617b      	str	r3, [r7, #20]
        break;
 80031e0:	e01f      	b.n	8003222 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e2:	f7fe fcd3 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 80031e6:	6178      	str	r0, [r7, #20]
        break;
 80031e8:	e01b      	b.n	8003222 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ee:	617b      	str	r3, [r7, #20]
        break;
 80031f0:	e017      	b.n	8003222 <UART_SetConfig+0x30e>
 80031f2:	bf00      	nop
 80031f4:	efff69f3 	.word	0xefff69f3
 80031f8:	40008000 	.word	0x40008000
 80031fc:	40013800 	.word	0x40013800
 8003200:	40021000 	.word	0x40021000
 8003204:	40004400 	.word	0x40004400
 8003208:	40004800 	.word	0x40004800
 800320c:	40004c00 	.word	0x40004c00
 8003210:	40005000 	.word	0x40005000
 8003214:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	76bb      	strb	r3, [r7, #26]
        break;
 8003220:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80f1 	beq.w	800340c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	429a      	cmp	r2, r3
 8003238:	d305      	bcc.n	8003246 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	429a      	cmp	r2, r3
 8003244:	d902      	bls.n	800324c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	76bb      	strb	r3, [r7, #26]
 800324a:	e0df      	b.n	800340c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	4618      	mov	r0, r3
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	020b      	lsls	r3, r1, #8
 800325e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003262:	0202      	lsls	r2, r0, #8
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	6849      	ldr	r1, [r1, #4]
 8003268:	0849      	lsrs	r1, r1, #1
 800326a:	4608      	mov	r0, r1
 800326c:	f04f 0100 	mov.w	r1, #0
 8003270:	1814      	adds	r4, r2, r0
 8003272:	eb43 0501 	adc.w	r5, r3, r1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	461a      	mov	r2, r3
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	4620      	mov	r0, r4
 8003282:	4629      	mov	r1, r5
 8003284:	f7fc ffa4 	bl	80001d0 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003296:	d308      	bcc.n	80032aa <UART_SetConfig+0x396>
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800329e:	d204      	bcs.n	80032aa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	60da      	str	r2, [r3, #12]
 80032a8:	e0b0      	b.n	800340c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
 80032ae:	e0ad      	b.n	800340c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b8:	d15c      	bne.n	8003374 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80032ba:	7efb      	ldrb	r3, [r7, #27]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d828      	bhi.n	8003312 <UART_SetConfig+0x3fe>
 80032c0:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <UART_SetConfig+0x3b4>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032ed 	.word	0x080032ed
 80032cc:	080032f5 	.word	0x080032f5
 80032d0:	080032fd 	.word	0x080032fd
 80032d4:	08003313 	.word	0x08003313
 80032d8:	08003303 	.word	0x08003303
 80032dc:	08003313 	.word	0x08003313
 80032e0:	08003313 	.word	0x08003313
 80032e4:	08003313 	.word	0x08003313
 80032e8:	0800330b 	.word	0x0800330b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ec:	f7fe fce4 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 80032f0:	6178      	str	r0, [r7, #20]
        break;
 80032f2:	e013      	b.n	800331c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f4:	f7fe fcf6 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 80032f8:	6178      	str	r0, [r7, #20]
        break;
 80032fa:	e00f      	b.n	800331c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032fc:	4b49      	ldr	r3, [pc, #292]	; (8003424 <UART_SetConfig+0x510>)
 80032fe:	617b      	str	r3, [r7, #20]
        break;
 8003300:	e00c      	b.n	800331c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003302:	f7fe fc43 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8003306:	6178      	str	r0, [r7, #20]
        break;
 8003308:	e008      	b.n	800331c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330e:	617b      	str	r3, [r7, #20]
        break;
 8003310:	e004      	b.n	800331c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	76bb      	strb	r3, [r7, #26]
        break;
 800331a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d074      	beq.n	800340c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005a      	lsls	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	441a      	add	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	fbb2 f3f3 	udiv	r3, r2, r3
 8003336:	b29b      	uxth	r3, r3
 8003338:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b0f      	cmp	r3, #15
 800333e:	d916      	bls.n	800336e <UART_SetConfig+0x45a>
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003346:	d212      	bcs.n	800336e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f023 030f 	bic.w	r3, r3, #15
 8003350:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	b29b      	uxth	r3, r3
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	b29a      	uxth	r2, r3
 800335e:	89fb      	ldrh	r3, [r7, #14]
 8003360:	4313      	orrs	r3, r2
 8003362:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	89fa      	ldrh	r2, [r7, #14]
 800336a:	60da      	str	r2, [r3, #12]
 800336c:	e04e      	b.n	800340c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	76bb      	strb	r3, [r7, #26]
 8003372:	e04b      	b.n	800340c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003374:	7efb      	ldrb	r3, [r7, #27]
 8003376:	2b08      	cmp	r3, #8
 8003378:	d827      	bhi.n	80033ca <UART_SetConfig+0x4b6>
 800337a:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <UART_SetConfig+0x46c>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	080033a5 	.word	0x080033a5
 8003384:	080033ad 	.word	0x080033ad
 8003388:	080033b5 	.word	0x080033b5
 800338c:	080033cb 	.word	0x080033cb
 8003390:	080033bb 	.word	0x080033bb
 8003394:	080033cb 	.word	0x080033cb
 8003398:	080033cb 	.word	0x080033cb
 800339c:	080033cb 	.word	0x080033cb
 80033a0:	080033c3 	.word	0x080033c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a4:	f7fe fc88 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 80033a8:	6178      	str	r0, [r7, #20]
        break;
 80033aa:	e013      	b.n	80033d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033ac:	f7fe fc9a 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 80033b0:	6178      	str	r0, [r7, #20]
        break;
 80033b2:	e00f      	b.n	80033d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <UART_SetConfig+0x510>)
 80033b6:	617b      	str	r3, [r7, #20]
        break;
 80033b8:	e00c      	b.n	80033d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ba:	f7fe fbe7 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 80033be:	6178      	str	r0, [r7, #20]
        break;
 80033c0:	e008      	b.n	80033d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c6:	617b      	str	r3, [r7, #20]
        break;
 80033c8:	e004      	b.n	80033d4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	76bb      	strb	r3, [r7, #26]
        break;
 80033d2:	bf00      	nop
    }

    if (pclk != 0U)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d018      	beq.n	800340c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085a      	lsrs	r2, r3, #1
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	441a      	add	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	d908      	bls.n	8003408 <UART_SetConfig+0x4f4>
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d204      	bcs.n	8003408 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	e001      	b.n	800340c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003418:	7ebb      	ldrb	r3, [r7, #26]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bdb0      	pop	{r4, r5, r7, pc}
 8003422:	bf00      	nop
 8003424:	00f42400 	.word	0x00f42400

08003428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01a      	beq.n	800353e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003526:	d10a      	bne.n	800353e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  }
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af02      	add	r7, sp, #8
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800357c:	f7fd fb10 	bl	8000ba0 <HAL_GetTick>
 8003580:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d10e      	bne.n	80035ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f82d 	bl	80035fe <UART_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e023      	b.n	80035f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d10e      	bne.n	80035da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f817 	bl	80035fe <UART_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00d      	b.n	80035f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	4613      	mov	r3, r2
 800360c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360e:	e05e      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003616:	d05a      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003618:	f7fd fac2 	bl	8000ba0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <UART_WaitOnFlagUntilTimeout+0x30>
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d11b      	bne.n	8003666 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800363c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e043      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d02c      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003682:	d124      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800368c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800369c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e00f      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4013      	ands	r3, r2
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	429a      	cmp	r2, r3
 80036dc:	bf0c      	ite	eq
 80036de:	2301      	moveq	r3, #1
 80036e0:	2300      	movne	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d091      	beq.n	8003610 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <__NVIC_SetPriority>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	6039      	str	r1, [r7, #0]
 8003702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	2b00      	cmp	r3, #0
 800370a:	db0a      	blt.n	8003722 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	490c      	ldr	r1, [pc, #48]	; (8003744 <__NVIC_SetPriority+0x4c>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	440b      	add	r3, r1
 800371c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003720:	e00a      	b.n	8003738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4908      	ldr	r1, [pc, #32]	; (8003748 <__NVIC_SetPriority+0x50>)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	3b04      	subs	r3, #4
 8003730:	0112      	lsls	r2, r2, #4
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	440b      	add	r3, r1
 8003736:	761a      	strb	r2, [r3, #24]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000e100 	.word	0xe000e100
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <SysTick_Handler+0x1c>)
 8003752:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003754:	f001 fcfe 	bl	8005154 <xTaskGetSchedulerState>
 8003758:	4603      	mov	r3, r0
 800375a:	2b01      	cmp	r3, #1
 800375c:	d001      	beq.n	8003762 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800375e:	f002 fae3 	bl	8005d28 <xPortSysTickHandler>
  }
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000e010 	.word	0xe000e010

0800376c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003770:	2100      	movs	r1, #0
 8003772:	f06f 0004 	mvn.w	r0, #4
 8003776:	f7ff ffbf 	bl	80036f8 <__NVIC_SetPriority>
#endif
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003786:	f3ef 8305 	mrs	r3, IPSR
 800378a:	603b      	str	r3, [r7, #0]
  return(result);
 800378c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003792:	f06f 0305 	mvn.w	r3, #5
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	e00c      	b.n	80037b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <osKernelInitialize+0x44>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <osKernelInitialize+0x44>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	e002      	b.n	80037b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037b4:	687b      	ldr	r3, [r7, #4]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	200000c4 	.word	0x200000c4

080037c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ce:	f3ef 8305 	mrs	r3, IPSR
 80037d2:	603b      	str	r3, [r7, #0]
  return(result);
 80037d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80037da:	f06f 0305 	mvn.w	r3, #5
 80037de:	607b      	str	r3, [r7, #4]
 80037e0:	e010      	b.n	8003804 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <osKernelStart+0x48>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d109      	bne.n	80037fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037ea:	f7ff ffbf 	bl	800376c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <osKernelStart+0x48>)
 80037f0:	2202      	movs	r2, #2
 80037f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037f4:	f001 f866 	bl	80048c4 <vTaskStartScheduler>
      stat = osOK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	e002      	b.n	8003804 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003802:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003804:	687b      	ldr	r3, [r7, #4]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	200000c4 	.word	0x200000c4

08003814 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b08e      	sub	sp, #56	; 0x38
 8003818:	af04      	add	r7, sp, #16
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003824:	f3ef 8305 	mrs	r3, IPSR
 8003828:	617b      	str	r3, [r7, #20]
  return(result);
 800382a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800382c:	2b00      	cmp	r3, #0
 800382e:	d17e      	bne.n	800392e <osThreadNew+0x11a>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d07b      	beq.n	800392e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800383a:	2318      	movs	r3, #24
 800383c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003846:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d045      	beq.n	80038da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <osThreadNew+0x48>
        name = attr->name;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <osThreadNew+0x6e>
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b38      	cmp	r3, #56	; 0x38
 8003874:	d805      	bhi.n	8003882 <osThreadNew+0x6e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <osThreadNew+0x72>
        return (NULL);
 8003882:	2300      	movs	r3, #0
 8003884:	e054      	b.n	8003930 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00e      	beq.n	80038bc <osThreadNew+0xa8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b5b      	cmp	r3, #91	; 0x5b
 80038a4:	d90a      	bls.n	80038bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <osThreadNew+0xa8>
        mem = 1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	e010      	b.n	80038de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10c      	bne.n	80038de <osThreadNew+0xca>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d108      	bne.n	80038de <osThreadNew+0xca>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d104      	bne.n	80038de <osThreadNew+0xca>
          mem = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	e001      	b.n	80038de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d110      	bne.n	8003906 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038ec:	9202      	str	r2, [sp, #8]
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6a3a      	ldr	r2, [r7, #32]
 80038f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fe0c 	bl	8004518 <xTaskCreateStatic>
 8003900:	4603      	mov	r3, r0
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	e013      	b.n	800392e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d110      	bne.n	800392e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	b29a      	uxth	r2, r3
 8003910:	f107 0310 	add.w	r3, r7, #16
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fe57 	bl	80045d2 <xTaskCreate>
 8003924:	4603      	mov	r3, r0
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <osThreadNew+0x11a>
            hTask = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800392e:	693b      	ldr	r3, [r7, #16]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3728      	adds	r7, #40	; 0x28
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003940:	f3ef 8305 	mrs	r3, IPSR
 8003944:	60bb      	str	r3, [r7, #8]
  return(result);
 8003946:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <osDelay+0x1c>
    stat = osErrorISR;
 800394c:	f06f 0305 	mvn.w	r3, #5
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e007      	b.n	8003964 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <osDelay+0x2c>
      vTaskDelay(ticks);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 ff7c 	bl	800485c <vTaskDelay>
    }
  }

  return (stat);
 8003964:	68fb      	ldr	r3, [r7, #12]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a07      	ldr	r2, [pc, #28]	; (800399c <vApplicationGetIdleTaskMemory+0x2c>)
 8003980:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4a06      	ldr	r2, [pc, #24]	; (80039a0 <vApplicationGetIdleTaskMemory+0x30>)
 8003986:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	601a      	str	r2, [r3, #0]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	200000c8 	.word	0x200000c8
 80039a0:	20000124 	.word	0x20000124

080039a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a07      	ldr	r2, [pc, #28]	; (80039d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80039b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4a06      	ldr	r2, [pc, #24]	; (80039d4 <vApplicationGetTimerTaskMemory+0x30>)
 80039ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039c2:	601a      	str	r2, [r3, #0]
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	20000324 	.word	0x20000324
 80039d4:	20000380 	.word	0x20000380

080039d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f103 0208 	add.w	r2, r3, #8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f103 0208 	add.w	r2, r3, #8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f103 0208 	add.w	r2, r3, #8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a32:	b480      	push	{r7}
 8003a34:	b085      	sub	sp, #20
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	601a      	str	r2, [r3, #0]
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a90:	d103      	bne.n	8003a9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e00c      	b.n	8003ab4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e002      	b.n	8003aa8 <vListInsert+0x2e>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d2f6      	bcs.n	8003aa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	601a      	str	r2, [r3, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6892      	ldr	r2, [r2, #8]
 8003b02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6852      	ldr	r2, [r2, #4]
 8003b0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d103      	bne.n	8003b20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	1e5a      	subs	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b6a:	f002 f84b 	bl	8005c04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	441a      	add	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	441a      	add	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	22ff      	movs	r2, #255	; 0xff
 8003bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	22ff      	movs	r2, #255	; 0xff
 8003bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d114      	bne.n	8003bea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01a      	beq.n	8003bfe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3310      	adds	r3, #16
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 f903 	bl	8004dd8 <xTaskRemoveFromEventList>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d012      	beq.n	8003bfe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <xQueueGenericReset+0xcc>)
 8003bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	e009      	b.n	8003bfe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3310      	adds	r3, #16
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff fef2 	bl	80039d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3324      	adds	r3, #36	; 0x24
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff feed 	bl	80039d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003bfe:	f002 f831 	bl	8005c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c02:	2301      	movs	r3, #1
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08e      	sub	sp, #56	; 0x38
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <xQueueGenericCreateStatic+0x52>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <xQueueGenericCreateStatic+0x56>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <xQueueGenericCreateStatic+0x58>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	623b      	str	r3, [r7, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	e7fe      	b.n	8003c80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <xQueueGenericCreateStatic+0x7e>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <xQueueGenericCreateStatic+0x82>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <xQueueGenericCreateStatic+0x84>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	61fb      	str	r3, [r7, #28]
}
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cae:	2350      	movs	r3, #80	; 0x50
 8003cb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b50      	cmp	r3, #80	; 0x50
 8003cb6:	d00a      	beq.n	8003cce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	61bb      	str	r3, [r7, #24]
}
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003cce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00d      	beq.n	8003cf6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ce2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f805 	bl	8003d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3730      	adds	r7, #48	; 0x30
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d103      	bne.n	8003d1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e002      	b.n	8003d22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d2e:	2101      	movs	r1, #1
 8003d30:	69b8      	ldr	r0, [r7, #24]
 8003d32:	f7ff ff05 	bl	8003b40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08e      	sub	sp, #56	; 0x38
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d56:	2300      	movs	r3, #0
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <xQueueGenericSend+0x32>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d76:	bf00      	nop
 8003d78:	e7fe      	b.n	8003d78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <xQueueGenericSend+0x40>
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <xQueueGenericSend+0x44>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <xQueueGenericSend+0x46>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <xQueueGenericSend+0x60>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003da4:	bf00      	nop
 8003da6:	e7fe      	b.n	8003da6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d103      	bne.n	8003db6 <xQueueGenericSend+0x6e>
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <xQueueGenericSend+0x72>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <xQueueGenericSend+0x74>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	623b      	str	r3, [r7, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dd6:	f001 f9bd 	bl	8005154 <xTaskGetSchedulerState>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <xQueueGenericSend+0x9e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <xQueueGenericSend+0xa2>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <xQueueGenericSend+0xa4>
 8003dea:	2300      	movs	r3, #0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <xQueueGenericSend+0xbe>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	61fb      	str	r3, [r7, #28]
}
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e06:	f001 fefd 	bl	8005c04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d302      	bcc.n	8003e1c <xQueueGenericSend+0xd4>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d129      	bne.n	8003e70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e22:	f000 fa0b 	bl	800423c <prvCopyDataToQueue>
 8003e26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d010      	beq.n	8003e52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	3324      	adds	r3, #36	; 0x24
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 ffcf 	bl	8004dd8 <xTaskRemoveFromEventList>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d013      	beq.n	8003e68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e40:	4b3f      	ldr	r3, [pc, #252]	; (8003f40 <xQueueGenericSend+0x1f8>)
 8003e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	e00a      	b.n	8003e68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e58:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <xQueueGenericSend+0x1f8>)
 8003e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e68:	f001 fefc 	bl	8005c64 <vPortExitCritical>
				return pdPASS;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e063      	b.n	8003f38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e76:	f001 fef5 	bl	8005c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e05c      	b.n	8003f38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 f809 	bl	8004ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e92:	f001 fee7 	bl	8005c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e96:	f000 fd7b 	bl	8004990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e9a:	f001 feb3 	bl	8005c04 <vPortEnterCritical>
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ea4:	b25b      	sxtb	r3, r3
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eaa:	d103      	bne.n	8003eb4 <xQueueGenericSend+0x16c>
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eba:	b25b      	sxtb	r3, r3
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec0:	d103      	bne.n	8003eca <xQueueGenericSend+0x182>
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eca:	f001 fecb 	bl	8005c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ece:	1d3a      	adds	r2, r7, #4
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fff8 	bl	8004ecc <xTaskCheckForTimeOut>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d124      	bne.n	8003f2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ee4:	f000 faa2 	bl	800442c <prvIsQueueFull>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	3310      	adds	r3, #16
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 ff1e 	bl	8004d38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003efe:	f000 fa2d 	bl	800435c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f02:	f000 fd53 	bl	80049ac <xTaskResumeAll>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f47f af7c 	bne.w	8003e06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <xQueueGenericSend+0x1f8>)
 8003f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	e772      	b.n	8003e06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f22:	f000 fa1b 	bl	800435c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f26:	f000 fd41 	bl	80049ac <xTaskResumeAll>
 8003f2a:	e76c      	b.n	8003e06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f2e:	f000 fa15 	bl	800435c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f32:	f000 fd3b 	bl	80049ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3738      	adds	r7, #56	; 0x38
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b090      	sub	sp, #64	; 0x40
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <xQueueGenericSendFromISR+0x3c>
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <xQueueGenericSendFromISR+0x40>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <xQueueGenericSendFromISR+0x42>
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d103      	bne.n	8003fae <xQueueGenericSendFromISR+0x6a>
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <xQueueGenericSendFromISR+0x6e>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <xQueueGenericSendFromISR+0x70>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	623b      	str	r3, [r7, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fce:	f001 fefb 	bl	8005dc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fd2:	f3ef 8211 	mrs	r2, BASEPRI
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	61fa      	str	r2, [r7, #28]
 8003fe8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <xQueueGenericSendFromISR+0xbc>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d12f      	bne.n	8004060 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004016:	f000 f911 	bl	800423c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800401a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004022:	d112      	bne.n	800404a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	d016      	beq.n	800405a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	3324      	adds	r3, #36	; 0x24
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fed1 	bl	8004dd8 <xTaskRemoveFromEventList>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00e      	beq.n	800405a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00b      	beq.n	800405a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e007      	b.n	800405a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800404a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800404e:	3301      	adds	r3, #1
 8004050:	b2db      	uxtb	r3, r3
 8004052:	b25a      	sxtb	r2, r3
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800405a:	2301      	movs	r3, #1
 800405c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800405e:	e001      	b.n	8004064 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004060:	2300      	movs	r3, #0
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800406e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004072:	4618      	mov	r0, r3
 8004074:	3740      	adds	r7, #64	; 0x40
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08c      	sub	sp, #48	; 0x30
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004088:	2300      	movs	r3, #0
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <xQueueReceive+0x30>
	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	623b      	str	r3, [r7, #32]
}
 80040a8:	bf00      	nop
 80040aa:	e7fe      	b.n	80040aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <xQueueReceive+0x3e>
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <xQueueReceive+0x42>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <xQueueReceive+0x44>
 80040be:	2300      	movs	r3, #0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10a      	bne.n	80040da <xQueueReceive+0x5e>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	61fb      	str	r3, [r7, #28]
}
 80040d6:	bf00      	nop
 80040d8:	e7fe      	b.n	80040d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040da:	f001 f83b 	bl	8005154 <xTaskGetSchedulerState>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <xQueueReceive+0x6e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <xQueueReceive+0x72>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <xQueueReceive+0x74>
 80040ee:	2300      	movs	r3, #0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <xQueueReceive+0x8e>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	61bb      	str	r3, [r7, #24]
}
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800410a:	f001 fd7b 	bl	8005c04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01f      	beq.n	800415a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800411e:	f000 f8f7 	bl	8004310 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00f      	beq.n	8004152 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	3310      	adds	r3, #16
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fe4e 	bl	8004dd8 <xTaskRemoveFromEventList>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004142:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <xQueueReceive+0x1bc>)
 8004144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004152:	f001 fd87 	bl	8005c64 <vPortExitCritical>
				return pdPASS;
 8004156:	2301      	movs	r3, #1
 8004158:	e069      	b.n	800422e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d103      	bne.n	8004168 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004160:	f001 fd80 	bl	8005c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004164:	2300      	movs	r3, #0
 8004166:	e062      	b.n	800422e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800416e:	f107 0310 	add.w	r3, r7, #16
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fe94 	bl	8004ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004178:	2301      	movs	r3, #1
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800417c:	f001 fd72 	bl	8005c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004180:	f000 fc06 	bl	8004990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004184:	f001 fd3e 	bl	8005c04 <vPortEnterCritical>
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800418e:	b25b      	sxtb	r3, r3
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004194:	d103      	bne.n	800419e <xQueueReceive+0x122>
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041a4:	b25b      	sxtb	r3, r3
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041aa:	d103      	bne.n	80041b4 <xQueueReceive+0x138>
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041b4:	f001 fd56 	bl	8005c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041b8:	1d3a      	adds	r2, r7, #4
 80041ba:	f107 0310 	add.w	r3, r7, #16
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fe83 	bl	8004ecc <xTaskCheckForTimeOut>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d123      	bne.n	8004214 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ce:	f000 f917 	bl	8004400 <prvIsQueueEmpty>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d017      	beq.n	8004208 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	3324      	adds	r3, #36	; 0x24
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fda9 	bl	8004d38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041e8:	f000 f8b8 	bl	800435c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041ec:	f000 fbde 	bl	80049ac <xTaskResumeAll>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d189      	bne.n	800410a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <xQueueReceive+0x1bc>)
 80041f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	e780      	b.n	800410a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800420a:	f000 f8a7 	bl	800435c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800420e:	f000 fbcd 	bl	80049ac <xTaskResumeAll>
 8004212:	e77a      	b.n	800410a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004216:	f000 f8a1 	bl	800435c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800421a:	f000 fbc7 	bl	80049ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800421e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004220:	f000 f8ee 	bl	8004400 <prvIsQueueEmpty>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	f43f af6f 	beq.w	800410a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800422c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800422e:	4618      	mov	r0, r3
 8004230:	3730      	adds	r7, #48	; 0x30
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10d      	bne.n	8004276 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d14d      	bne.n	80042fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	4618      	mov	r0, r3
 8004268:	f000 ff92 	bl	8005190 <xTaskPriorityDisinherit>
 800426c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	e043      	b.n	80042fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d119      	bne.n	80042b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6858      	ldr	r0, [r3, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	461a      	mov	r2, r3
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	f001 ffec 	bl	8006264 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	441a      	add	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d32b      	bcc.n	80042fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	e026      	b.n	80042fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	68d8      	ldr	r0, [r3, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	461a      	mov	r2, r3
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	f001 ffd2 	bl	8006264 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	425b      	negs	r3, r3
 80042ca:	441a      	add	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d207      	bcs.n	80042ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	425b      	negs	r3, r3
 80042e6:	441a      	add	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d105      	bne.n	80042fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004306:	697b      	ldr	r3, [r7, #20]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d018      	beq.n	8004354 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	441a      	add	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	d303      	bcc.n	8004344 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68d9      	ldr	r1, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	461a      	mov	r2, r3
 800434e:	6838      	ldr	r0, [r7, #0]
 8004350:	f001 ff88 	bl	8006264 <memcpy>
	}
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004364:	f001 fc4e 	bl	8005c04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800436e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004370:	e011      	b.n	8004396 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d012      	beq.n	80043a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3324      	adds	r3, #36	; 0x24
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fd2a 	bl	8004dd8 <xTaskRemoveFromEventList>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800438a:	f000 fe01 	bl	8004f90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	3b01      	subs	r3, #1
 8004392:	b2db      	uxtb	r3, r3
 8004394:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	dce9      	bgt.n	8004372 <prvUnlockQueue+0x16>
 800439e:	e000      	b.n	80043a2 <prvUnlockQueue+0x46>
					break;
 80043a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	22ff      	movs	r2, #255	; 0xff
 80043a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80043aa:	f001 fc5b 	bl	8005c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043ae:	f001 fc29 	bl	8005c04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043ba:	e011      	b.n	80043e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d012      	beq.n	80043ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3310      	adds	r3, #16
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fd05 	bl	8004dd8 <xTaskRemoveFromEventList>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043d4:	f000 fddc 	bl	8004f90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043d8:	7bbb      	ldrb	r3, [r7, #14]
 80043da:	3b01      	subs	r3, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	dce9      	bgt.n	80043bc <prvUnlockQueue+0x60>
 80043e8:	e000      	b.n	80043ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	22ff      	movs	r2, #255	; 0xff
 80043f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80043f4:	f001 fc36 	bl	8005c64 <vPortExitCritical>
}
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004408:	f001 fbfc 	bl	8005c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004414:	2301      	movs	r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	e001      	b.n	800441e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800441e:	f001 fc21 	bl	8005c64 <vPortExitCritical>

	return xReturn;
 8004422:	68fb      	ldr	r3, [r7, #12]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004434:	f001 fbe6 	bl	8005c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	429a      	cmp	r2, r3
 8004442:	d102      	bne.n	800444a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e001      	b.n	800444e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800444e:	f001 fc09 	bl	8005c64 <vPortExitCritical>

	return xReturn;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e014      	b.n	8004496 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800446c:	4a0f      	ldr	r2, [pc, #60]	; (80044ac <vQueueAddToRegistry+0x50>)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004478:	490c      	ldr	r1, [pc, #48]	; (80044ac <vQueueAddToRegistry+0x50>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004482:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <vQueueAddToRegistry+0x50>)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800448e:	e006      	b.n	800449e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3301      	adds	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b07      	cmp	r3, #7
 800449a:	d9e7      	bls.n	800446c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	200019dc 	.word	0x200019dc

080044b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044c0:	f001 fba0 	bl	8005c04 <vPortEnterCritical>
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044ca:	b25b      	sxtb	r3, r3
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044d0:	d103      	bne.n	80044da <vQueueWaitForMessageRestricted+0x2a>
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044e0:	b25b      	sxtb	r3, r3
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e6:	d103      	bne.n	80044f0 <vQueueWaitForMessageRestricted+0x40>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044f0:	f001 fbb8 	bl	8005c64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	3324      	adds	r3, #36	; 0x24
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fc3b 	bl	8004d80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f7ff ff26 	bl	800435c <prvUnlockQueue>
	}
 8004510:	bf00      	nop
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08e      	sub	sp, #56	; 0x38
 800451c:	af04      	add	r7, sp, #16
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <xTaskCreateStatic+0x2a>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	623b      	str	r3, [r7, #32]
}
 800453e:	bf00      	nop
 8004540:	e7fe      	b.n	8004540 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <xTaskCreateStatic+0x46>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	61fb      	str	r3, [r7, #28]
}
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800455e:	235c      	movs	r3, #92	; 0x5c
 8004560:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b5c      	cmp	r3, #92	; 0x5c
 8004566:	d00a      	beq.n	800457e <xTaskCreateStatic+0x66>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	61bb      	str	r3, [r7, #24]
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800457e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01e      	beq.n	80045c4 <xTaskCreateStatic+0xac>
 8004586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01b      	beq.n	80045c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004594:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	2202      	movs	r2, #2
 800459a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800459e:	2300      	movs	r3, #0
 80045a0:	9303      	str	r3, [sp, #12]
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	9302      	str	r3, [sp, #8]
 80045a6:	f107 0314 	add.w	r3, r7, #20
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f850 	bl	800465c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045be:	f000 f8dd 	bl	800477c <prvAddNewTaskToReadyList>
 80045c2:	e001      	b.n	80045c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045c8:	697b      	ldr	r3, [r7, #20]
	}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3728      	adds	r7, #40	; 0x28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b08c      	sub	sp, #48	; 0x30
 80045d6:	af04      	add	r7, sp, #16
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	4613      	mov	r3, r2
 80045e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 fc2e 	bl	8005e48 <pvPortMalloc>
 80045ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00e      	beq.n	8004612 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045f4:	205c      	movs	r0, #92	; 0x5c
 80045f6:	f001 fc27 	bl	8005e48 <pvPortMalloc>
 80045fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
 8004608:	e005      	b.n	8004616 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800460a:	6978      	ldr	r0, [r7, #20]
 800460c:	f001 fce8 	bl	8005fe0 <vPortFree>
 8004610:	e001      	b.n	8004616 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d017      	beq.n	800464c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	2300      	movs	r3, #0
 8004628:	9303      	str	r3, [sp, #12]
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	9302      	str	r3, [sp, #8]
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f80e 	bl	800465c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004640:	69f8      	ldr	r0, [r7, #28]
 8004642:	f000 f89b 	bl	800477c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004646:	2301      	movs	r3, #1
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	e002      	b.n	8004652 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800464c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004650:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004652:	69bb      	ldr	r3, [r7, #24]
	}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	461a      	mov	r2, r3
 8004674:	21a5      	movs	r1, #165	; 0xa5
 8004676:	f001 fe03 	bl	8006280 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004684:	3b01      	subs	r3, #1
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f023 0307 	bic.w	r3, r3, #7
 8004692:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	617b      	str	r3, [r7, #20]
}
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01f      	beq.n	80046fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	e012      	b.n	80046e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	7819      	ldrb	r1, [r3, #0]
 80046c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	4413      	add	r3, r2
 80046ce:	3334      	adds	r3, #52	; 0x34
 80046d0:	460a      	mov	r2, r1
 80046d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d006      	beq.n	80046ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	3301      	adds	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b0f      	cmp	r3, #15
 80046ea:	d9e9      	bls.n	80046c0 <prvInitialiseNewTask+0x64>
 80046ec:	e000      	b.n	80046f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80046ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046f8:	e003      	b.n	8004702 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	2b37      	cmp	r3, #55	; 0x37
 8004706:	d901      	bls.n	800470c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004708:	2337      	movs	r3, #55	; 0x37
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004716:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	2200      	movs	r2, #0
 800471c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff f978 	bl	8003a18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	3318      	adds	r3, #24
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff f973 	bl	8003a18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004736:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004746:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	2200      	movs	r2, #0
 800474c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	68f9      	ldr	r1, [r7, #12]
 800475a:	69b8      	ldr	r0, [r7, #24]
 800475c:	f001 f928 	bl	80059b0 <pxPortInitialiseStack>
 8004760:	4602      	mov	r2, r0
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004770:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004772:	bf00      	nop
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004784:	f001 fa3e 	bl	8005c04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004788:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <prvAddNewTaskToReadyList+0xc4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	4a2c      	ldr	r2, [pc, #176]	; (8004840 <prvAddNewTaskToReadyList+0xc4>)
 8004790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004792:	4b2c      	ldr	r3, [pc, #176]	; (8004844 <prvAddNewTaskToReadyList+0xc8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800479a:	4a2a      	ldr	r2, [pc, #168]	; (8004844 <prvAddNewTaskToReadyList+0xc8>)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047a0:	4b27      	ldr	r3, [pc, #156]	; (8004840 <prvAddNewTaskToReadyList+0xc4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d110      	bne.n	80047ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047a8:	f000 fc16 	bl	8004fd8 <prvInitialiseTaskLists>
 80047ac:	e00d      	b.n	80047ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047ae:	4b26      	ldr	r3, [pc, #152]	; (8004848 <prvAddNewTaskToReadyList+0xcc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047b6:	4b23      	ldr	r3, [pc, #140]	; (8004844 <prvAddNewTaskToReadyList+0xc8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d802      	bhi.n	80047ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047c4:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <prvAddNewTaskToReadyList+0xc8>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047ca:	4b20      	ldr	r3, [pc, #128]	; (800484c <prvAddNewTaskToReadyList+0xd0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3301      	adds	r3, #1
 80047d0:	4a1e      	ldr	r2, [pc, #120]	; (800484c <prvAddNewTaskToReadyList+0xd0>)
 80047d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80047d4:	4b1d      	ldr	r3, [pc, #116]	; (800484c <prvAddNewTaskToReadyList+0xd0>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <prvAddNewTaskToReadyList+0xd4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d903      	bls.n	80047f0 <prvAddNewTaskToReadyList+0x74>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <prvAddNewTaskToReadyList+0xd4>)
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4a15      	ldr	r2, [pc, #84]	; (8004854 <prvAddNewTaskToReadyList+0xd8>)
 80047fe:	441a      	add	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f7ff f913 	bl	8003a32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800480c:	f001 fa2a 	bl	8005c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004810:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <prvAddNewTaskToReadyList+0xcc>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <prvAddNewTaskToReadyList+0xc8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	429a      	cmp	r2, r3
 8004824:	d207      	bcs.n	8004836 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004826:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <prvAddNewTaskToReadyList+0xdc>)
 8004828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000c54 	.word	0x20000c54
 8004844:	20000780 	.word	0x20000780
 8004848:	20000c60 	.word	0x20000c60
 800484c:	20000c70 	.word	0x20000c70
 8004850:	20000c5c 	.word	0x20000c5c
 8004854:	20000784 	.word	0x20000784
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d017      	beq.n	800489e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <vTaskDelay+0x60>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <vTaskDelay+0x30>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	60bb      	str	r3, [r7, #8]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800488c:	f000 f880 	bl	8004990 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004890:	2100      	movs	r1, #0
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fcea 	bl	800526c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004898:	f000 f888 	bl	80049ac <xTaskResumeAll>
 800489c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d107      	bne.n	80048b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80048a4:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <vTaskDelay+0x64>)
 80048a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000c7c 	.word	0x20000c7c
 80048c0:	e000ed04 	.word	0xe000ed04

080048c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048d2:	463a      	mov	r2, r7
 80048d4:	1d39      	adds	r1, r7, #4
 80048d6:	f107 0308 	add.w	r3, r7, #8
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff f848 	bl	8003970 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048e0:	6839      	ldr	r1, [r7, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	9202      	str	r2, [sp, #8]
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	2300      	movs	r3, #0
 80048f0:	460a      	mov	r2, r1
 80048f2:	4921      	ldr	r1, [pc, #132]	; (8004978 <vTaskStartScheduler+0xb4>)
 80048f4:	4821      	ldr	r0, [pc, #132]	; (800497c <vTaskStartScheduler+0xb8>)
 80048f6:	f7ff fe0f 	bl	8004518 <xTaskCreateStatic>
 80048fa:	4603      	mov	r3, r0
 80048fc:	4a20      	ldr	r2, [pc, #128]	; (8004980 <vTaskStartScheduler+0xbc>)
 80048fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004900:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <vTaskStartScheduler+0xbc>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004908:	2301      	movs	r3, #1
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	e001      	b.n	8004912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d102      	bne.n	800491e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004918:	f000 fcfc 	bl	8005314 <xTimerCreateTimerTask>
 800491c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d116      	bne.n	8004952 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	613b      	str	r3, [r7, #16]
}
 8004936:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <vTaskStartScheduler+0xc0>)
 800493a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800493e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004940:	4b11      	ldr	r3, [pc, #68]	; (8004988 <vTaskStartScheduler+0xc4>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <vTaskStartScheduler+0xc8>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800494c:	f001 f8b8 	bl	8005ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004950:	e00e      	b.n	8004970 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004958:	d10a      	bne.n	8004970 <vTaskStartScheduler+0xac>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	60fb      	str	r3, [r7, #12]
}
 800496c:	bf00      	nop
 800496e:	e7fe      	b.n	800496e <vTaskStartScheduler+0xaa>
}
 8004970:	bf00      	nop
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	080062c4 	.word	0x080062c4
 800497c:	08004fa9 	.word	0x08004fa9
 8004980:	20000c78 	.word	0x20000c78
 8004984:	20000c74 	.word	0x20000c74
 8004988:	20000c60 	.word	0x20000c60
 800498c:	20000c58 	.word	0x20000c58

08004990 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <vTaskSuspendAll+0x18>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	4a03      	ldr	r2, [pc, #12]	; (80049a8 <vTaskSuspendAll+0x18>)
 800499c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800499e:	bf00      	nop
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	20000c7c 	.word	0x20000c7c

080049ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80049ba:	4b42      	ldr	r3, [pc, #264]	; (8004ac4 <xTaskResumeAll+0x118>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	603b      	str	r3, [r7, #0]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049d8:	f001 f914 	bl	8005c04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049dc:	4b39      	ldr	r3, [pc, #228]	; (8004ac4 <xTaskResumeAll+0x118>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	4a38      	ldr	r2, [pc, #224]	; (8004ac4 <xTaskResumeAll+0x118>)
 80049e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e6:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <xTaskResumeAll+0x118>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d162      	bne.n	8004ab4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049ee:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <xTaskResumeAll+0x11c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d05e      	beq.n	8004ab4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049f6:	e02f      	b.n	8004a58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f8:	4b34      	ldr	r3, [pc, #208]	; (8004acc <xTaskResumeAll+0x120>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3318      	adds	r3, #24
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff f871 	bl	8003aec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff f86c 	bl	8003aec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a18:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <xTaskResumeAll+0x124>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d903      	bls.n	8004a28 <xTaskResumeAll+0x7c>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <xTaskResumeAll+0x124>)
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <xTaskResumeAll+0x128>)
 8004a36:	441a      	add	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f7fe fff7 	bl	8003a32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <xTaskResumeAll+0x12c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d302      	bcc.n	8004a58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004a52:	4b22      	ldr	r3, [pc, #136]	; (8004adc <xTaskResumeAll+0x130>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a58:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <xTaskResumeAll+0x120>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1cb      	bne.n	80049f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a66:	f000 fb55 	bl	8005114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <xTaskResumeAll+0x134>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d010      	beq.n	8004a98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a76:	f000 f847 	bl	8004b08 <xTaskIncrementTick>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a80:	4b16      	ldr	r3, [pc, #88]	; (8004adc <xTaskResumeAll+0x130>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f1      	bne.n	8004a76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a92:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <xTaskResumeAll+0x134>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a98:	4b10      	ldr	r3, [pc, #64]	; (8004adc <xTaskResumeAll+0x130>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d009      	beq.n	8004ab4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <xTaskResumeAll+0x138>)
 8004aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ab4:	f001 f8d6 	bl	8005c64 <vPortExitCritical>

	return xAlreadyYielded;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000c7c 	.word	0x20000c7c
 8004ac8:	20000c54 	.word	0x20000c54
 8004acc:	20000c14 	.word	0x20000c14
 8004ad0:	20000c5c 	.word	0x20000c5c
 8004ad4:	20000784 	.word	0x20000784
 8004ad8:	20000780 	.word	0x20000780
 8004adc:	20000c68 	.word	0x20000c68
 8004ae0:	20000c64 	.word	0x20000c64
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <xTaskGetTickCount+0x1c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004af4:	687b      	ldr	r3, [r7, #4]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000c58 	.word	0x20000c58

08004b08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b12:	4b4f      	ldr	r3, [pc, #316]	; (8004c50 <xTaskIncrementTick+0x148>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f040 808f 	bne.w	8004c3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b1c:	4b4d      	ldr	r3, [pc, #308]	; (8004c54 <xTaskIncrementTick+0x14c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3301      	adds	r3, #1
 8004b22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b24:	4a4b      	ldr	r2, [pc, #300]	; (8004c54 <xTaskIncrementTick+0x14c>)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d120      	bne.n	8004b72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b30:	4b49      	ldr	r3, [pc, #292]	; (8004c58 <xTaskIncrementTick+0x150>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <xTaskIncrementTick+0x48>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	603b      	str	r3, [r7, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <xTaskIncrementTick+0x46>
 8004b50:	4b41      	ldr	r3, [pc, #260]	; (8004c58 <xTaskIncrementTick+0x150>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	4b41      	ldr	r3, [pc, #260]	; (8004c5c <xTaskIncrementTick+0x154>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a3f      	ldr	r2, [pc, #252]	; (8004c58 <xTaskIncrementTick+0x150>)
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4a3f      	ldr	r2, [pc, #252]	; (8004c5c <xTaskIncrementTick+0x154>)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	4b3e      	ldr	r3, [pc, #248]	; (8004c60 <xTaskIncrementTick+0x158>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	4a3d      	ldr	r2, [pc, #244]	; (8004c60 <xTaskIncrementTick+0x158>)
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	f000 fad1 	bl	8005114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b72:	4b3c      	ldr	r3, [pc, #240]	; (8004c64 <xTaskIncrementTick+0x15c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d349      	bcc.n	8004c10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b7c:	4b36      	ldr	r3, [pc, #216]	; (8004c58 <xTaskIncrementTick+0x150>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b86:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <xTaskIncrementTick+0x15c>)
 8004b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b8c:	601a      	str	r2, [r3, #0]
					break;
 8004b8e:	e03f      	b.n	8004c10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b90:	4b31      	ldr	r3, [pc, #196]	; (8004c58 <xTaskIncrementTick+0x150>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d203      	bcs.n	8004bb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ba8:	4a2e      	ldr	r2, [pc, #184]	; (8004c64 <xTaskIncrementTick+0x15c>)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004bae:	e02f      	b.n	8004c10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe ff99 	bl	8003aec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d004      	beq.n	8004bcc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	3318      	adds	r3, #24
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe ff90 	bl	8003aec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd0:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <xTaskIncrementTick+0x160>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d903      	bls.n	8004be0 <xTaskIncrementTick+0xd8>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	4a22      	ldr	r2, [pc, #136]	; (8004c68 <xTaskIncrementTick+0x160>)
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <xTaskIncrementTick+0x164>)
 8004bee:	441a      	add	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	f7fe ff1b 	bl	8003a32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <xTaskIncrementTick+0x168>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d3b8      	bcc.n	8004b7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c0e:	e7b5      	b.n	8004b7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c10:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <xTaskIncrementTick+0x168>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c16:	4915      	ldr	r1, [pc, #84]	; (8004c6c <xTaskIncrementTick+0x164>)
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d901      	bls.n	8004c2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c2c:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <xTaskIncrementTick+0x16c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	e004      	b.n	8004c44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <xTaskIncrementTick+0x170>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <xTaskIncrementTick+0x170>)
 8004c42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c44:	697b      	ldr	r3, [r7, #20]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000c7c 	.word	0x20000c7c
 8004c54:	20000c58 	.word	0x20000c58
 8004c58:	20000c0c 	.word	0x20000c0c
 8004c5c:	20000c10 	.word	0x20000c10
 8004c60:	20000c6c 	.word	0x20000c6c
 8004c64:	20000c74 	.word	0x20000c74
 8004c68:	20000c5c 	.word	0x20000c5c
 8004c6c:	20000784 	.word	0x20000784
 8004c70:	20000780 	.word	0x20000780
 8004c74:	20000c68 	.word	0x20000c68
 8004c78:	20000c64 	.word	0x20000c64

08004c7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c82:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <vTaskSwitchContext+0xa8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c8a:	4b27      	ldr	r3, [pc, #156]	; (8004d28 <vTaskSwitchContext+0xac>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c90:	e041      	b.n	8004d16 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004c92:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <vTaskSwitchContext+0xac>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c98:	4b24      	ldr	r3, [pc, #144]	; (8004d2c <vTaskSwitchContext+0xb0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e010      	b.n	8004cc2 <vTaskSwitchContext+0x46>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <vTaskSwitchContext+0x40>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	607b      	str	r3, [r7, #4]
}
 8004cb8:	bf00      	nop
 8004cba:	e7fe      	b.n	8004cba <vTaskSwitchContext+0x3e>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	491b      	ldr	r1, [pc, #108]	; (8004d30 <vTaskSwitchContext+0xb4>)
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0e4      	beq.n	8004ca0 <vTaskSwitchContext+0x24>
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4a13      	ldr	r2, [pc, #76]	; (8004d30 <vTaskSwitchContext+0xb4>)
 8004ce2:	4413      	add	r3, r2
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	605a      	str	r2, [r3, #4]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d104      	bne.n	8004d06 <vTaskSwitchContext+0x8a>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <vTaskSwitchContext+0xb8>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4a06      	ldr	r2, [pc, #24]	; (8004d2c <vTaskSwitchContext+0xb0>)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6013      	str	r3, [r2, #0]
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20000c7c 	.word	0x20000c7c
 8004d28:	20000c68 	.word	0x20000c68
 8004d2c:	20000c5c 	.word	0x20000c5c
 8004d30:	20000784 	.word	0x20000784
 8004d34:	20000780 	.word	0x20000780

08004d38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	60fb      	str	r3, [r7, #12]
}
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d5e:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <vTaskPlaceOnEventList+0x44>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3318      	adds	r3, #24
 8004d64:	4619      	mov	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fe fe87 	bl	8003a7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	6838      	ldr	r0, [r7, #0]
 8004d70:	f000 fa7c 	bl	800526c <prvAddCurrentTaskToDelayedList>
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20000780 	.word	0x20000780

08004d80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10a      	bne.n	8004da8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	617b      	str	r3, [r7, #20]
}
 8004da4:	bf00      	nop
 8004da6:	e7fe      	b.n	8004da6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004da8:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3318      	adds	r3, #24
 8004dae:	4619      	mov	r1, r3
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7fe fe3e 	bl	8003a32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dc0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	68b8      	ldr	r0, [r7, #8]
 8004dc6:	f000 fa51 	bl	800526c <prvAddCurrentTaskToDelayedList>
	}
 8004dca:	bf00      	nop
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000780 	.word	0x20000780

08004dd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	60fb      	str	r3, [r7, #12]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	3318      	adds	r3, #24
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fe fe6f 	bl	8003aec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <xTaskRemoveFromEventList+0xb0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d11d      	bne.n	8004e52 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe fe66 	bl	8003aec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <xTaskRemoveFromEventList+0xb4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d903      	bls.n	8004e34 <xTaskRemoveFromEventList+0x5c>
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	4a16      	ldr	r2, [pc, #88]	; (8004e8c <xTaskRemoveFromEventList+0xb4>)
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <xTaskRemoveFromEventList+0xb8>)
 8004e42:	441a      	add	r2, r3
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	f7fe fdf1 	bl	8003a32 <vListInsertEnd>
 8004e50:	e005      	b.n	8004e5e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	3318      	adds	r3, #24
 8004e56:	4619      	mov	r1, r3
 8004e58:	480e      	ldr	r0, [pc, #56]	; (8004e94 <xTaskRemoveFromEventList+0xbc>)
 8004e5a:	f7fe fdea 	bl	8003a32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <xTaskRemoveFromEventList+0xc0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d905      	bls.n	8004e78 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <xTaskRemoveFromEventList+0xc4>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e001      	b.n	8004e7c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e7c:	697b      	ldr	r3, [r7, #20]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000c7c 	.word	0x20000c7c
 8004e8c:	20000c5c 	.word	0x20000c5c
 8004e90:	20000784 	.word	0x20000784
 8004e94:	20000c14 	.word	0x20000c14
 8004e98:	20000780 	.word	0x20000780
 8004e9c:	20000c68 	.word	0x20000c68

08004ea0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <vTaskInternalSetTimeOutState+0x24>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <vTaskInternalSetTimeOutState+0x28>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	605a      	str	r2, [r3, #4]
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	20000c6c 	.word	0x20000c6c
 8004ec8:	20000c58 	.word	0x20000c58

08004ecc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	613b      	str	r3, [r7, #16]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	60fb      	str	r3, [r7, #12]
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004f0e:	f000 fe79 	bl	8005c04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f12:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <xTaskCheckForTimeOut+0xbc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f2a:	d102      	bne.n	8004f32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	e023      	b.n	8004f7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <xTaskCheckForTimeOut+0xc0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d007      	beq.n	8004f4e <xTaskCheckForTimeOut+0x82>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d302      	bcc.n	8004f4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e015      	b.n	8004f7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d20b      	bcs.n	8004f70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff ff9b 	bl	8004ea0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	e004      	b.n	8004f7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f76:	2301      	movs	r3, #1
 8004f78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f7a:	f000 fe73 	bl	8005c64 <vPortExitCritical>

	return xReturn;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000c58 	.word	0x20000c58
 8004f8c:	20000c6c 	.word	0x20000c6c

08004f90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <vTaskMissedYield+0x14>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
}
 8004f9a:	bf00      	nop
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	20000c68 	.word	0x20000c68

08004fa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fb0:	f000 f852 	bl	8005058 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fb4:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <prvIdleTask+0x28>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d9f9      	bls.n	8004fb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <prvIdleTask+0x2c>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fcc:	e7f0      	b.n	8004fb0 <prvIdleTask+0x8>
 8004fce:	bf00      	nop
 8004fd0:	20000784 	.word	0x20000784
 8004fd4:	e000ed04 	.word	0xe000ed04

08004fd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fde:	2300      	movs	r3, #0
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	e00c      	b.n	8004ffe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4a12      	ldr	r2, [pc, #72]	; (8005038 <prvInitialiseTaskLists+0x60>)
 8004ff0:	4413      	add	r3, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe fcf0 	bl	80039d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	607b      	str	r3, [r7, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b37      	cmp	r3, #55	; 0x37
 8005002:	d9ef      	bls.n	8004fe4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005004:	480d      	ldr	r0, [pc, #52]	; (800503c <prvInitialiseTaskLists+0x64>)
 8005006:	f7fe fce7 	bl	80039d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800500a:	480d      	ldr	r0, [pc, #52]	; (8005040 <prvInitialiseTaskLists+0x68>)
 800500c:	f7fe fce4 	bl	80039d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005010:	480c      	ldr	r0, [pc, #48]	; (8005044 <prvInitialiseTaskLists+0x6c>)
 8005012:	f7fe fce1 	bl	80039d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005016:	480c      	ldr	r0, [pc, #48]	; (8005048 <prvInitialiseTaskLists+0x70>)
 8005018:	f7fe fcde 	bl	80039d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800501c:	480b      	ldr	r0, [pc, #44]	; (800504c <prvInitialiseTaskLists+0x74>)
 800501e:	f7fe fcdb 	bl	80039d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005022:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <prvInitialiseTaskLists+0x78>)
 8005024:	4a05      	ldr	r2, [pc, #20]	; (800503c <prvInitialiseTaskLists+0x64>)
 8005026:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <prvInitialiseTaskLists+0x7c>)
 800502a:	4a05      	ldr	r2, [pc, #20]	; (8005040 <prvInitialiseTaskLists+0x68>)
 800502c:	601a      	str	r2, [r3, #0]
}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000784 	.word	0x20000784
 800503c:	20000be4 	.word	0x20000be4
 8005040:	20000bf8 	.word	0x20000bf8
 8005044:	20000c14 	.word	0x20000c14
 8005048:	20000c28 	.word	0x20000c28
 800504c:	20000c40 	.word	0x20000c40
 8005050:	20000c0c 	.word	0x20000c0c
 8005054:	20000c10 	.word	0x20000c10

08005058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800505e:	e019      	b.n	8005094 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005060:	f000 fdd0 	bl	8005c04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005064:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <prvCheckTasksWaitingTermination+0x50>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe fd3b 	bl	8003aec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005076:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <prvCheckTasksWaitingTermination+0x54>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3b01      	subs	r3, #1
 800507c:	4a0b      	ldr	r2, [pc, #44]	; (80050ac <prvCheckTasksWaitingTermination+0x54>)
 800507e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <prvCheckTasksWaitingTermination+0x58>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3b01      	subs	r3, #1
 8005086:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <prvCheckTasksWaitingTermination+0x58>)
 8005088:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800508a:	f000 fdeb 	bl	8005c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f810 	bl	80050b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <prvCheckTasksWaitingTermination+0x58>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e1      	bne.n	8005060 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000c28 	.word	0x20000c28
 80050ac:	20000c54 	.word	0x20000c54
 80050b0:	20000c3c 	.word	0x20000c3c

080050b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d108      	bne.n	80050d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 ff88 	bl	8005fe0 <vPortFree>
				vPortFree( pxTCB );
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 ff85 	bl	8005fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050d6:	e018      	b.n	800510a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d103      	bne.n	80050ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 ff7c 	bl	8005fe0 <vPortFree>
	}
 80050e8:	e00f      	b.n	800510a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d00a      	beq.n	800510a <prvDeleteTCB+0x56>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	60fb      	str	r3, [r7, #12]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <prvDeleteTCB+0x54>
	}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800511a:	4b0c      	ldr	r3, [pc, #48]	; (800514c <prvResetNextTaskUnblockTime+0x38>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005124:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <prvResetNextTaskUnblockTime+0x3c>)
 8005126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800512a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800512c:	e008      	b.n	8005140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800512e:	4b07      	ldr	r3, [pc, #28]	; (800514c <prvResetNextTaskUnblockTime+0x38>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4a04      	ldr	r2, [pc, #16]	; (8005150 <prvResetNextTaskUnblockTime+0x3c>)
 800513e:	6013      	str	r3, [r2, #0]
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	20000c0c 	.word	0x20000c0c
 8005150:	20000c74 	.word	0x20000c74

08005154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800515a:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <xTaskGetSchedulerState+0x34>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d102      	bne.n	8005168 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005162:	2301      	movs	r3, #1
 8005164:	607b      	str	r3, [r7, #4]
 8005166:	e008      	b.n	800517a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005168:	4b08      	ldr	r3, [pc, #32]	; (800518c <xTaskGetSchedulerState+0x38>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d102      	bne.n	8005176 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005170:	2302      	movs	r3, #2
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	e001      	b.n	800517a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005176:	2300      	movs	r3, #0
 8005178:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800517a:	687b      	ldr	r3, [r7, #4]
	}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	20000c60 	.word	0x20000c60
 800518c:	20000c7c 	.word	0x20000c7c

08005190 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d056      	beq.n	8005254 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051a6:	4b2e      	ldr	r3, [pc, #184]	; (8005260 <xTaskPriorityDisinherit+0xd0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d00a      	beq.n	80051c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	60fb      	str	r3, [r7, #12]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10a      	bne.n	80051e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	60bb      	str	r3, [r7, #8]
}
 80051e0:	bf00      	nop
 80051e2:	e7fe      	b.n	80051e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e8:	1e5a      	subs	r2, r3, #1
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d02c      	beq.n	8005254 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d128      	bne.n	8005254 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	3304      	adds	r3, #4
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe fc70 	bl	8003aec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <xTaskPriorityDisinherit+0xd4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d903      	bls.n	8005234 <xTaskPriorityDisinherit+0xa4>
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4a0c      	ldr	r2, [pc, #48]	; (8005264 <xTaskPriorityDisinherit+0xd4>)
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4a09      	ldr	r2, [pc, #36]	; (8005268 <xTaskPriorityDisinherit+0xd8>)
 8005242:	441a      	add	r2, r3
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f7fe fbf1 	bl	8003a32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005254:	697b      	ldr	r3, [r7, #20]
	}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000780 	.word	0x20000780
 8005264:	20000c5c 	.word	0x20000c5c
 8005268:	20000784 	.word	0x20000784

0800526c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005276:	4b21      	ldr	r3, [pc, #132]	; (80052fc <prvAddCurrentTaskToDelayedList+0x90>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800527c:	4b20      	ldr	r3, [pc, #128]	; (8005300 <prvAddCurrentTaskToDelayedList+0x94>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3304      	adds	r3, #4
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fc32 	bl	8003aec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800528e:	d10a      	bne.n	80052a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005296:	4b1a      	ldr	r3, [pc, #104]	; (8005300 <prvAddCurrentTaskToDelayedList+0x94>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3304      	adds	r3, #4
 800529c:	4619      	mov	r1, r3
 800529e:	4819      	ldr	r0, [pc, #100]	; (8005304 <prvAddCurrentTaskToDelayedList+0x98>)
 80052a0:	f7fe fbc7 	bl	8003a32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052a4:	e026      	b.n	80052f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4413      	add	r3, r2
 80052ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052ae:	4b14      	ldr	r3, [pc, #80]	; (8005300 <prvAddCurrentTaskToDelayedList+0x94>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d209      	bcs.n	80052d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <prvAddCurrentTaskToDelayedList+0x9c>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <prvAddCurrentTaskToDelayedList+0x94>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f7fe fbd5 	bl	8003a7a <vListInsert>
}
 80052d0:	e010      	b.n	80052f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052d2:	4b0e      	ldr	r3, [pc, #56]	; (800530c <prvAddCurrentTaskToDelayedList+0xa0>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <prvAddCurrentTaskToDelayedList+0x94>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f7fe fbcb 	bl	8003a7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d202      	bcs.n	80052f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80052ee:	4a08      	ldr	r2, [pc, #32]	; (8005310 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6013      	str	r3, [r2, #0]
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000c58 	.word	0x20000c58
 8005300:	20000780 	.word	0x20000780
 8005304:	20000c40 	.word	0x20000c40
 8005308:	20000c10 	.word	0x20000c10
 800530c:	20000c0c 	.word	0x20000c0c
 8005310:	20000c74 	.word	0x20000c74

08005314 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	; 0x28
 8005318:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800531e:	f000 fb07 	bl	8005930 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005322:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <xTimerCreateTimerTask+0x80>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d021      	beq.n	800536e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005332:	1d3a      	adds	r2, r7, #4
 8005334:	f107 0108 	add.w	r1, r7, #8
 8005338:	f107 030c 	add.w	r3, r7, #12
 800533c:	4618      	mov	r0, r3
 800533e:	f7fe fb31 	bl	80039a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	9202      	str	r2, [sp, #8]
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	2302      	movs	r3, #2
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	2300      	movs	r3, #0
 8005352:	460a      	mov	r2, r1
 8005354:	4910      	ldr	r1, [pc, #64]	; (8005398 <xTimerCreateTimerTask+0x84>)
 8005356:	4811      	ldr	r0, [pc, #68]	; (800539c <xTimerCreateTimerTask+0x88>)
 8005358:	f7ff f8de 	bl	8004518 <xTaskCreateStatic>
 800535c:	4603      	mov	r3, r0
 800535e:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <xTimerCreateTimerTask+0x8c>)
 8005360:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005362:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <xTimerCreateTimerTask+0x8c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800536a:	2301      	movs	r3, #1
 800536c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	613b      	str	r3, [r7, #16]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800538a:	697b      	ldr	r3, [r7, #20]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000cb0 	.word	0x20000cb0
 8005398:	080062cc 	.word	0x080062cc
 800539c:	080054d9 	.word	0x080054d9
 80053a0:	20000cb4 	.word	0x20000cb4

080053a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	623b      	str	r3, [r7, #32]
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80053d2:	4b1a      	ldr	r3, [pc, #104]	; (800543c <xTimerGenericCommand+0x98>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d02a      	beq.n	8005430 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b05      	cmp	r3, #5
 80053ea:	dc18      	bgt.n	800541e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053ec:	f7ff feb2 	bl	8005154 <xTaskGetSchedulerState>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d109      	bne.n	800540a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053f6:	4b11      	ldr	r3, [pc, #68]	; (800543c <xTimerGenericCommand+0x98>)
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	f107 0110 	add.w	r1, r7, #16
 80053fe:	2300      	movs	r3, #0
 8005400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005402:	f7fe fca1 	bl	8003d48 <xQueueGenericSend>
 8005406:	6278      	str	r0, [r7, #36]	; 0x24
 8005408:	e012      	b.n	8005430 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800540a:	4b0c      	ldr	r3, [pc, #48]	; (800543c <xTimerGenericCommand+0x98>)
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	f107 0110 	add.w	r1, r7, #16
 8005412:	2300      	movs	r3, #0
 8005414:	2200      	movs	r2, #0
 8005416:	f7fe fc97 	bl	8003d48 <xQueueGenericSend>
 800541a:	6278      	str	r0, [r7, #36]	; 0x24
 800541c:	e008      	b.n	8005430 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800541e:	4b07      	ldr	r3, [pc, #28]	; (800543c <xTimerGenericCommand+0x98>)
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	f107 0110 	add.w	r1, r7, #16
 8005426:	2300      	movs	r3, #0
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	f7fe fd8b 	bl	8003f44 <xQueueGenericSendFromISR>
 800542e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005432:	4618      	mov	r0, r3
 8005434:	3728      	adds	r7, #40	; 0x28
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000cb0 	.word	0x20000cb0

08005440 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544a:	4b22      	ldr	r3, [pc, #136]	; (80054d4 <prvProcessExpiredTimer+0x94>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	3304      	adds	r3, #4
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe fb47 	bl	8003aec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d022      	beq.n	80054b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	18d1      	adds	r1, r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	6978      	ldr	r0, [r7, #20]
 800547a:	f000 f8d1 	bl	8005620 <prvInsertTimerInActiveList>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01f      	beq.n	80054c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005484:	2300      	movs	r3, #0
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	2300      	movs	r3, #0
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	2100      	movs	r1, #0
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	f7ff ff88 	bl	80053a4 <xTimerGenericCommand>
 8005494:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d113      	bne.n	80054c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	60fb      	str	r3, [r7, #12]
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054b8:	f023 0301 	bic.w	r3, r3, #1
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	6978      	ldr	r0, [r7, #20]
 80054ca:	4798      	blx	r3
}
 80054cc:	bf00      	nop
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000ca8 	.word	0x20000ca8

080054d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054e0:	f107 0308 	add.w	r3, r7, #8
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 f857 	bl	8005598 <prvGetNextExpireTime>
 80054ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4619      	mov	r1, r3
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f803 	bl	80054fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054f6:	f000 f8d5 	bl	80056a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054fa:	e7f1      	b.n	80054e0 <prvTimerTask+0x8>

080054fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005506:	f7ff fa43 	bl	8004990 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f866 	bl	80055e0 <prvSampleTimeNow>
 8005514:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d130      	bne.n	800557e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <prvProcessTimerOrBlockTask+0x3c>
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	429a      	cmp	r2, r3
 8005528:	d806      	bhi.n	8005538 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800552a:	f7ff fa3f 	bl	80049ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff ff85 	bl	8005440 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005536:	e024      	b.n	8005582 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d008      	beq.n	8005550 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800553e:	4b13      	ldr	r3, [pc, #76]	; (800558c <prvProcessTimerOrBlockTask+0x90>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <prvProcessTimerOrBlockTask+0x50>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <prvProcessTimerOrBlockTask+0x52>
 800554c:	2300      	movs	r3, #0
 800554e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005550:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <prvProcessTimerOrBlockTask+0x94>)
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	4619      	mov	r1, r3
 800555e:	f7fe ffa7 	bl	80044b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005562:	f7ff fa23 	bl	80049ac <xTaskResumeAll>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <prvProcessTimerOrBlockTask+0x98>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	f3bf 8f6f 	isb	sy
}
 800557c:	e001      	b.n	8005582 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800557e:	f7ff fa15 	bl	80049ac <xTaskResumeAll>
}
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000cac 	.word	0x20000cac
 8005590:	20000cb0 	.word	0x20000cb0
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055a0:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <prvGetNextExpireTime+0x44>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <prvGetNextExpireTime+0x16>
 80055aa:	2201      	movs	r2, #1
 80055ac:	e000      	b.n	80055b0 <prvGetNextExpireTime+0x18>
 80055ae:	2200      	movs	r2, #0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d105      	bne.n	80055c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055bc:	4b07      	ldr	r3, [pc, #28]	; (80055dc <prvGetNextExpireTime+0x44>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	e001      	b.n	80055cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055cc:	68fb      	ldr	r3, [r7, #12]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000ca8 	.word	0x20000ca8

080055e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055e8:	f7ff fa7e 	bl	8004ae8 <xTaskGetTickCount>
 80055ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <prvSampleTimeNow+0x3c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d205      	bcs.n	8005604 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055f8:	f000 f936 	bl	8005868 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	e002      	b.n	800560a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800560a:	4a04      	ldr	r2, [pc, #16]	; (800561c <prvSampleTimeNow+0x3c>)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005610:	68fb      	ldr	r3, [r7, #12]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000cb8 	.word	0x20000cb8

08005620 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	429a      	cmp	r2, r3
 8005644:	d812      	bhi.n	800566c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	1ad2      	subs	r2, r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	429a      	cmp	r2, r3
 8005652:	d302      	bcc.n	800565a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	e01b      	b.n	8005692 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800565a:	4b10      	ldr	r3, [pc, #64]	; (800569c <prvInsertTimerInActiveList+0x7c>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3304      	adds	r3, #4
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f7fe fa08 	bl	8003a7a <vListInsert>
 800566a:	e012      	b.n	8005692 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d206      	bcs.n	8005682 <prvInsertTimerInActiveList+0x62>
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d302      	bcc.n	8005682 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e007      	b.n	8005692 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005682:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <prvInsertTimerInActiveList+0x80>)
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3304      	adds	r3, #4
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f7fe f9f4 	bl	8003a7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005692:	697b      	ldr	r3, [r7, #20]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000cac 	.word	0x20000cac
 80056a0:	20000ca8 	.word	0x20000ca8

080056a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08e      	sub	sp, #56	; 0x38
 80056a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056aa:	e0ca      	b.n	8005842 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	da18      	bge.n	80056e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056b2:	1d3b      	adds	r3, r7, #4
 80056b4:	3304      	adds	r3, #4
 80056b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	61fb      	str	r3, [r7, #28]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056da:	6850      	ldr	r0, [r2, #4]
 80056dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056de:	6892      	ldr	r2, [r2, #8]
 80056e0:	4611      	mov	r1, r2
 80056e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f2c0 80aa 	blt.w	8005840 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	3304      	adds	r3, #4
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe f9f5 	bl	8003aec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005702:	463b      	mov	r3, r7
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff6b 	bl	80055e0 <prvSampleTimeNow>
 800570a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b09      	cmp	r3, #9
 8005710:	f200 8097 	bhi.w	8005842 <prvProcessReceivedCommands+0x19e>
 8005714:	a201      	add	r2, pc, #4	; (adr r2, 800571c <prvProcessReceivedCommands+0x78>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005745 	.word	0x08005745
 8005720:	08005745 	.word	0x08005745
 8005724:	08005745 	.word	0x08005745
 8005728:	080057b9 	.word	0x080057b9
 800572c:	080057cd 	.word	0x080057cd
 8005730:	08005817 	.word	0x08005817
 8005734:	08005745 	.word	0x08005745
 8005738:	08005745 	.word	0x08005745
 800573c:	080057b9 	.word	0x080057b9
 8005740:	080057cd 	.word	0x080057cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	b2da      	uxtb	r2, r3
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	18d1      	adds	r1, r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005764:	f7ff ff5c 	bl	8005620 <prvInsertTimerInActiveList>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d069      	beq.n	8005842 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005774:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d05e      	beq.n	8005842 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	441a      	add	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	2300      	movs	r3, #0
 8005792:	2100      	movs	r1, #0
 8005794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005796:	f7ff fe05 	bl	80053a4 <xTimerGenericCommand>
 800579a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d14f      	bne.n	8005842 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	61bb      	str	r3, [r7, #24]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057be:	f023 0301 	bic.w	r3, r3, #1
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80057ca:	e03a      	b.n	8005842 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	617b      	str	r3, [r7, #20]
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	18d1      	adds	r1, r2, r3
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005810:	f7ff ff06 	bl	8005620 <prvInsertTimerInActiveList>
					break;
 8005814:	e015      	b.n	8005842 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d103      	bne.n	800582c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005826:	f000 fbdb 	bl	8005fe0 <vPortFree>
 800582a:	e00a      	b.n	8005842 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	b2da      	uxtb	r2, r3
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800583e:	e000      	b.n	8005842 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005840:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <prvProcessReceivedCommands+0x1c0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	1d39      	adds	r1, r7, #4
 8005848:	2200      	movs	r2, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe fc16 	bl	800407c <xQueueReceive>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	f47f af2a 	bne.w	80056ac <prvProcessReceivedCommands+0x8>
	}
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	3730      	adds	r7, #48	; 0x30
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000cb0 	.word	0x20000cb0

08005868 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800586e:	e048      	b.n	8005902 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005870:	4b2d      	ldr	r3, [pc, #180]	; (8005928 <prvSwitchTimerLists+0xc0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587a:	4b2b      	ldr	r3, [pc, #172]	; (8005928 <prvSwitchTimerLists+0xc0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3304      	adds	r3, #4
 8005888:	4618      	mov	r0, r3
 800588a:	f7fe f92f 	bl	8003aec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d02e      	beq.n	8005902 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4413      	add	r3, r2
 80058ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d90e      	bls.n	80058d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058c2:	4b19      	ldr	r3, [pc, #100]	; (8005928 <prvSwitchTimerLists+0xc0>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3304      	adds	r3, #4
 80058ca:	4619      	mov	r1, r3
 80058cc:	4610      	mov	r0, r2
 80058ce:	f7fe f8d4 	bl	8003a7a <vListInsert>
 80058d2:	e016      	b.n	8005902 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058d4:	2300      	movs	r3, #0
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	2300      	movs	r3, #0
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	2100      	movs	r1, #0
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7ff fd60 	bl	80053a4 <xTimerGenericCommand>
 80058e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	603b      	str	r3, [r7, #0]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <prvSwitchTimerLists+0xc0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1b1      	bne.n	8005870 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800590c:	4b06      	ldr	r3, [pc, #24]	; (8005928 <prvSwitchTimerLists+0xc0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005912:	4b06      	ldr	r3, [pc, #24]	; (800592c <prvSwitchTimerLists+0xc4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a04      	ldr	r2, [pc, #16]	; (8005928 <prvSwitchTimerLists+0xc0>)
 8005918:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800591a:	4a04      	ldr	r2, [pc, #16]	; (800592c <prvSwitchTimerLists+0xc4>)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	6013      	str	r3, [r2, #0]
}
 8005920:	bf00      	nop
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000ca8 	.word	0x20000ca8
 800592c:	20000cac 	.word	0x20000cac

08005930 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005936:	f000 f965 	bl	8005c04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800593a:	4b15      	ldr	r3, [pc, #84]	; (8005990 <prvCheckForValidListAndQueue+0x60>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d120      	bne.n	8005984 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005942:	4814      	ldr	r0, [pc, #80]	; (8005994 <prvCheckForValidListAndQueue+0x64>)
 8005944:	f7fe f848 	bl	80039d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005948:	4813      	ldr	r0, [pc, #76]	; (8005998 <prvCheckForValidListAndQueue+0x68>)
 800594a:	f7fe f845 	bl	80039d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800594e:	4b13      	ldr	r3, [pc, #76]	; (800599c <prvCheckForValidListAndQueue+0x6c>)
 8005950:	4a10      	ldr	r2, [pc, #64]	; (8005994 <prvCheckForValidListAndQueue+0x64>)
 8005952:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005954:	4b12      	ldr	r3, [pc, #72]	; (80059a0 <prvCheckForValidListAndQueue+0x70>)
 8005956:	4a10      	ldr	r2, [pc, #64]	; (8005998 <prvCheckForValidListAndQueue+0x68>)
 8005958:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800595a:	2300      	movs	r3, #0
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <prvCheckForValidListAndQueue+0x74>)
 8005960:	4a11      	ldr	r2, [pc, #68]	; (80059a8 <prvCheckForValidListAndQueue+0x78>)
 8005962:	2110      	movs	r1, #16
 8005964:	200a      	movs	r0, #10
 8005966:	f7fe f953 	bl	8003c10 <xQueueGenericCreateStatic>
 800596a:	4603      	mov	r3, r0
 800596c:	4a08      	ldr	r2, [pc, #32]	; (8005990 <prvCheckForValidListAndQueue+0x60>)
 800596e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005970:	4b07      	ldr	r3, [pc, #28]	; (8005990 <prvCheckForValidListAndQueue+0x60>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005978:	4b05      	ldr	r3, [pc, #20]	; (8005990 <prvCheckForValidListAndQueue+0x60>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	490b      	ldr	r1, [pc, #44]	; (80059ac <prvCheckForValidListAndQueue+0x7c>)
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fd6c 	bl	800445c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005984:	f000 f96e 	bl	8005c64 <vPortExitCritical>
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000cb0 	.word	0x20000cb0
 8005994:	20000c80 	.word	0x20000c80
 8005998:	20000c94 	.word	0x20000c94
 800599c:	20000ca8 	.word	0x20000ca8
 80059a0:	20000cac 	.word	0x20000cac
 80059a4:	20000d5c 	.word	0x20000d5c
 80059a8:	20000cbc 	.word	0x20000cbc
 80059ac:	080062d4 	.word	0x080062d4

080059b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3b04      	subs	r3, #4
 80059c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3b04      	subs	r3, #4
 80059ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f023 0201 	bic.w	r2, r3, #1
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3b04      	subs	r3, #4
 80059de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059e0:	4a0c      	ldr	r2, [pc, #48]	; (8005a14 <pxPortInitialiseStack+0x64>)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3b14      	subs	r3, #20
 80059ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3b04      	subs	r3, #4
 80059f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f06f 0202 	mvn.w	r2, #2
 80059fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3b20      	subs	r3, #32
 8005a04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a06:	68fb      	ldr	r3, [r7, #12]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	08005a19 	.word	0x08005a19

08005a18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <prvTaskExitError+0x54>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a2a:	d00a      	beq.n	8005a42 <prvTaskExitError+0x2a>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60fb      	str	r3, [r7, #12]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <prvTaskExitError+0x28>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	60bb      	str	r3, [r7, #8]
}
 8005a54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a56:	bf00      	nop
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0fc      	beq.n	8005a58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	2000000c 	.word	0x2000000c

08005a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <pxCurrentTCBConst2>)
 8005a72:	6819      	ldr	r1, [r3, #0]
 8005a74:	6808      	ldr	r0, [r1, #0]
 8005a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7a:	f380 8809 	msr	PSP, r0
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	f380 8811 	msr	BASEPRI, r0
 8005a8a:	4770      	bx	lr
 8005a8c:	f3af 8000 	nop.w

08005a90 <pxCurrentTCBConst2>:
 8005a90:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop

08005a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a98:	4808      	ldr	r0, [pc, #32]	; (8005abc <prvPortStartFirstTask+0x24>)
 8005a9a:	6800      	ldr	r0, [r0, #0]
 8005a9c:	6800      	ldr	r0, [r0, #0]
 8005a9e:	f380 8808 	msr	MSP, r0
 8005aa2:	f04f 0000 	mov.w	r0, #0
 8005aa6:	f380 8814 	msr	CONTROL, r0
 8005aaa:	b662      	cpsie	i
 8005aac:	b661      	cpsie	f
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	df00      	svc	0
 8005ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005aba:	bf00      	nop
 8005abc:	e000ed08 	.word	0xe000ed08

08005ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ac6:	4b46      	ldr	r3, [pc, #280]	; (8005be0 <xPortStartScheduler+0x120>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a46      	ldr	r2, [pc, #280]	; (8005be4 <xPortStartScheduler+0x124>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d10a      	bne.n	8005ae6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	613b      	str	r3, [r7, #16]
}
 8005ae2:	bf00      	nop
 8005ae4:	e7fe      	b.n	8005ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ae6:	4b3e      	ldr	r3, [pc, #248]	; (8005be0 <xPortStartScheduler+0x120>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a3f      	ldr	r2, [pc, #252]	; (8005be8 <xPortStartScheduler+0x128>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d10a      	bne.n	8005b06 <xPortStartScheduler+0x46>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60fb      	str	r3, [r7, #12]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b06:	4b39      	ldr	r3, [pc, #228]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	22ff      	movs	r2, #255	; 0xff
 8005b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	4b31      	ldr	r3, [pc, #196]	; (8005bf0 <xPortStartScheduler+0x130>)
 8005b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b2e:	4b31      	ldr	r3, [pc, #196]	; (8005bf4 <xPortStartScheduler+0x134>)
 8005b30:	2207      	movs	r2, #7
 8005b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b34:	e009      	b.n	8005b4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b36:	4b2f      	ldr	r3, [pc, #188]	; (8005bf4 <xPortStartScheduler+0x134>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	4a2d      	ldr	r2, [pc, #180]	; (8005bf4 <xPortStartScheduler+0x134>)
 8005b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b4a:	78fb      	ldrb	r3, [r7, #3]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b52:	2b80      	cmp	r3, #128	; 0x80
 8005b54:	d0ef      	beq.n	8005b36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b56:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <xPortStartScheduler+0x134>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f1c3 0307 	rsb	r3, r3, #7
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d00a      	beq.n	8005b78 <xPortStartScheduler+0xb8>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	60bb      	str	r3, [r7, #8]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b78:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <xPortStartScheduler+0x134>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	4a1d      	ldr	r2, [pc, #116]	; (8005bf4 <xPortStartScheduler+0x134>)
 8005b80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b82:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <xPortStartScheduler+0x134>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b8a:	4a1a      	ldr	r2, [pc, #104]	; (8005bf4 <xPortStartScheduler+0x134>)
 8005b8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b96:	4b18      	ldr	r3, [pc, #96]	; (8005bf8 <xPortStartScheduler+0x138>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <xPortStartScheduler+0x138>)
 8005b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <xPortStartScheduler+0x138>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <xPortStartScheduler+0x138>)
 8005ba8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bae:	f000 f8dd 	bl	8005d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bb2:	4b12      	ldr	r3, [pc, #72]	; (8005bfc <xPortStartScheduler+0x13c>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bb8:	f000 f8fc 	bl	8005db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bbc:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <xPortStartScheduler+0x140>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0f      	ldr	r2, [pc, #60]	; (8005c00 <xPortStartScheduler+0x140>)
 8005bc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005bc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bc8:	f7ff ff66 	bl	8005a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bcc:	f7ff f856 	bl	8004c7c <vTaskSwitchContext>
	prvTaskExitError();
 8005bd0:	f7ff ff22 	bl	8005a18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	e000ed00 	.word	0xe000ed00
 8005be4:	410fc271 	.word	0x410fc271
 8005be8:	410fc270 	.word	0x410fc270
 8005bec:	e000e400 	.word	0xe000e400
 8005bf0:	20000dac 	.word	0x20000dac
 8005bf4:	20000db0 	.word	0x20000db0
 8005bf8:	e000ed20 	.word	0xe000ed20
 8005bfc:	2000000c 	.word	0x2000000c
 8005c00:	e000ef34 	.word	0xe000ef34

08005c04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	607b      	str	r3, [r7, #4]
}
 8005c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <vPortEnterCritical+0x58>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3301      	adds	r3, #1
 8005c24:	4a0d      	ldr	r2, [pc, #52]	; (8005c5c <vPortEnterCritical+0x58>)
 8005c26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c28:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <vPortEnterCritical+0x58>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d10f      	bne.n	8005c50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <vPortEnterCritical+0x5c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	603b      	str	r3, [r7, #0]
}
 8005c4c:	bf00      	nop
 8005c4e:	e7fe      	b.n	8005c4e <vPortEnterCritical+0x4a>
	}
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	2000000c 	.word	0x2000000c
 8005c60:	e000ed04 	.word	0xe000ed04

08005c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c6a:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <vPortExitCritical+0x50>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <vPortExitCritical+0x24>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	607b      	str	r3, [r7, #4]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <vPortExitCritical+0x50>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	4a09      	ldr	r2, [pc, #36]	; (8005cb4 <vPortExitCritical+0x50>)
 8005c90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c92:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <vPortExitCritical+0x50>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d105      	bne.n	8005ca6 <vPortExitCritical+0x42>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	f383 8811 	msr	BASEPRI, r3
}
 8005ca4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	2000000c 	.word	0x2000000c
	...

08005cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cc0:	f3ef 8009 	mrs	r0, PSP
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <pxCurrentTCBConst>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	f01e 0f10 	tst.w	lr, #16
 8005cd0:	bf08      	it	eq
 8005cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cda:	6010      	str	r0, [r2, #0]
 8005cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ce4:	f380 8811 	msr	BASEPRI, r0
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f7fe ffc4 	bl	8004c7c <vTaskSwitchContext>
 8005cf4:	f04f 0000 	mov.w	r0, #0
 8005cf8:	f380 8811 	msr	BASEPRI, r0
 8005cfc:	bc09      	pop	{r0, r3}
 8005cfe:	6819      	ldr	r1, [r3, #0]
 8005d00:	6808      	ldr	r0, [r1, #0]
 8005d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d06:	f01e 0f10 	tst.w	lr, #16
 8005d0a:	bf08      	it	eq
 8005d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d10:	f380 8809 	msr	PSP, r0
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	f3af 8000 	nop.w

08005d20 <pxCurrentTCBConst>:
 8005d20:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	607b      	str	r3, [r7, #4]
}
 8005d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d42:	f7fe fee1 	bl	8004b08 <xTaskIncrementTick>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <xPortSysTickHandler+0x40>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	2300      	movs	r3, #0
 8005d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	f383 8811 	msr	BASEPRI, r3
}
 8005d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <vPortSetupTimerInterrupt+0x34>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d76:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <vPortSetupTimerInterrupt+0x38>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <vPortSetupTimerInterrupt+0x3c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a0a      	ldr	r2, [pc, #40]	; (8005dac <vPortSetupTimerInterrupt+0x40>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	099b      	lsrs	r3, r3, #6
 8005d88:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <vPortSetupTimerInterrupt+0x44>)
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d8e:	4b04      	ldr	r3, [pc, #16]	; (8005da0 <vPortSetupTimerInterrupt+0x34>)
 8005d90:	2207      	movs	r2, #7
 8005d92:	601a      	str	r2, [r3, #0]
}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	e000e010 	.word	0xe000e010
 8005da4:	e000e018 	.word	0xe000e018
 8005da8:	20000000 	.word	0x20000000
 8005dac:	10624dd3 	.word	0x10624dd3
 8005db0:	e000e014 	.word	0xe000e014

08005db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005db4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005dc4 <vPortEnableVFP+0x10>
 8005db8:	6801      	ldr	r1, [r0, #0]
 8005dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005dbe:	6001      	str	r1, [r0, #0]
 8005dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005dc2:	bf00      	nop
 8005dc4:	e000ed88 	.word	0xe000ed88

08005dc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dce:	f3ef 8305 	mrs	r3, IPSR
 8005dd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	d914      	bls.n	8005e04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dda:	4a17      	ldr	r2, [pc, #92]	; (8005e38 <vPortValidateInterruptPriority+0x70>)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005de4:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <vPortValidateInterruptPriority+0x74>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	7afa      	ldrb	r2, [r7, #11]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d20a      	bcs.n	8005e04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	607b      	str	r3, [r7, #4]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e04:	4b0e      	ldr	r3, [pc, #56]	; (8005e40 <vPortValidateInterruptPriority+0x78>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e0c:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <vPortValidateInterruptPriority+0x7c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d90a      	bls.n	8005e2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	603b      	str	r3, [r7, #0]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <vPortValidateInterruptPriority+0x60>
	}
 8005e2a:	bf00      	nop
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	e000e3f0 	.word	0xe000e3f0
 8005e3c:	20000dac 	.word	0x20000dac
 8005e40:	e000ed0c 	.word	0xe000ed0c
 8005e44:	20000db0 	.word	0x20000db0

08005e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e54:	f7fe fd9c 	bl	8004990 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e58:	4b5b      	ldr	r3, [pc, #364]	; (8005fc8 <pvPortMalloc+0x180>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e60:	f000 f920 	bl	80060a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e64:	4b59      	ldr	r3, [pc, #356]	; (8005fcc <pvPortMalloc+0x184>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f040 8093 	bne.w	8005f98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01d      	beq.n	8005eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e78:	2208      	movs	r2, #8
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d014      	beq.n	8005eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f023 0307 	bic.w	r3, r3, #7
 8005e90:	3308      	adds	r3, #8
 8005e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	617b      	str	r3, [r7, #20]
}
 8005eb0:	bf00      	nop
 8005eb2:	e7fe      	b.n	8005eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d06e      	beq.n	8005f98 <pvPortMalloc+0x150>
 8005eba:	4b45      	ldr	r3, [pc, #276]	; (8005fd0 <pvPortMalloc+0x188>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d869      	bhi.n	8005f98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ec4:	4b43      	ldr	r3, [pc, #268]	; (8005fd4 <pvPortMalloc+0x18c>)
 8005ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ec8:	4b42      	ldr	r3, [pc, #264]	; (8005fd4 <pvPortMalloc+0x18c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ece:	e004      	b.n	8005eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d903      	bls.n	8005eec <pvPortMalloc+0xa4>
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1f1      	bne.n	8005ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005eec:	4b36      	ldr	r3, [pc, #216]	; (8005fc8 <pvPortMalloc+0x180>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d050      	beq.n	8005f98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2208      	movs	r2, #8
 8005efc:	4413      	add	r3, r2
 8005efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	2308      	movs	r3, #8
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d91f      	bls.n	8005f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <pvPortMalloc+0xf8>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	613b      	str	r3, [r7, #16]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	1ad2      	subs	r2, r2, r3
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f52:	69b8      	ldr	r0, [r7, #24]
 8005f54:	f000 f908 	bl	8006168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f58:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <pvPortMalloc+0x188>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	4a1b      	ldr	r2, [pc, #108]	; (8005fd0 <pvPortMalloc+0x188>)
 8005f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f66:	4b1a      	ldr	r3, [pc, #104]	; (8005fd0 <pvPortMalloc+0x188>)
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <pvPortMalloc+0x190>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d203      	bcs.n	8005f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f72:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <pvPortMalloc+0x188>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a18      	ldr	r2, [pc, #96]	; (8005fd8 <pvPortMalloc+0x190>)
 8005f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <pvPortMalloc+0x184>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f8e:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <pvPortMalloc+0x194>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	4a11      	ldr	r2, [pc, #68]	; (8005fdc <pvPortMalloc+0x194>)
 8005f96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f98:	f7fe fd08 	bl	80049ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <pvPortMalloc+0x174>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	60fb      	str	r3, [r7, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	e7fe      	b.n	8005fba <pvPortMalloc+0x172>
	return pvReturn;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3728      	adds	r7, #40	; 0x28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20001974 	.word	0x20001974
 8005fcc:	20001988 	.word	0x20001988
 8005fd0:	20001978 	.word	0x20001978
 8005fd4:	2000196c 	.word	0x2000196c
 8005fd8:	2000197c 	.word	0x2000197c
 8005fdc:	20001980 	.word	0x20001980

08005fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d04d      	beq.n	800608e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	425b      	negs	r3, r3
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	4b24      	ldr	r3, [pc, #144]	; (8006098 <vPortFree+0xb8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4013      	ands	r3, r2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <vPortFree+0x44>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	60fb      	str	r3, [r7, #12]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <vPortFree+0x62>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	60bb      	str	r3, [r7, #8]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	4b14      	ldr	r3, [pc, #80]	; (8006098 <vPortFree+0xb8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4013      	ands	r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01e      	beq.n	800608e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d11a      	bne.n	800608e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	4b0e      	ldr	r3, [pc, #56]	; (8006098 <vPortFree+0xb8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	43db      	mvns	r3, r3
 8006062:	401a      	ands	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006068:	f7fe fc92 	bl	8004990 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <vPortFree+0xbc>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4413      	add	r3, r2
 8006076:	4a09      	ldr	r2, [pc, #36]	; (800609c <vPortFree+0xbc>)
 8006078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800607a:	6938      	ldr	r0, [r7, #16]
 800607c:	f000 f874 	bl	8006168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006080:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <vPortFree+0xc0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <vPortFree+0xc0>)
 8006088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800608a:	f7fe fc8f 	bl	80049ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800608e:	bf00      	nop
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20001988 	.word	0x20001988
 800609c:	20001978 	.word	0x20001978
 80060a0:	20001984 	.word	0x20001984

080060a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80060ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060b0:	4b27      	ldr	r3, [pc, #156]	; (8006150 <prvHeapInit+0xac>)
 80060b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3307      	adds	r3, #7
 80060c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0307 	bic.w	r3, r3, #7
 80060ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	4a1f      	ldr	r2, [pc, #124]	; (8006150 <prvHeapInit+0xac>)
 80060d4:	4413      	add	r3, r2
 80060d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060dc:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <prvHeapInit+0xb0>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060e2:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <prvHeapInit+0xb0>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	4413      	add	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060f0:	2208      	movs	r2, #8
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0307 	bic.w	r3, r3, #7
 80060fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4a15      	ldr	r2, [pc, #84]	; (8006158 <prvHeapInit+0xb4>)
 8006104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006106:	4b14      	ldr	r3, [pc, #80]	; (8006158 <prvHeapInit+0xb4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800610e:	4b12      	ldr	r3, [pc, #72]	; (8006158 <prvHeapInit+0xb4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006124:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <prvHeapInit+0xb4>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a0a      	ldr	r2, [pc, #40]	; (800615c <prvHeapInit+0xb8>)
 8006132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4a09      	ldr	r2, [pc, #36]	; (8006160 <prvHeapInit+0xbc>)
 800613a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <prvHeapInit+0xc0>)
 800613e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	20000db4 	.word	0x20000db4
 8006154:	2000196c 	.word	0x2000196c
 8006158:	20001974 	.word	0x20001974
 800615c:	2000197c 	.word	0x2000197c
 8006160:	20001978 	.word	0x20001978
 8006164:	20001988 	.word	0x20001988

08006168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006170:	4b28      	ldr	r3, [pc, #160]	; (8006214 <prvInsertBlockIntoFreeList+0xac>)
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	e002      	b.n	800617c <prvInsertBlockIntoFreeList+0x14>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d8f7      	bhi.n	8006176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	d108      	bne.n	80061aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	441a      	add	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	441a      	add	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d118      	bne.n	80061f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4b15      	ldr	r3, [pc, #84]	; (8006218 <prvInsertBlockIntoFreeList+0xb0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d00d      	beq.n	80061e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	441a      	add	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e008      	b.n	80061f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <prvInsertBlockIntoFreeList+0xb0>)
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	e003      	b.n	80061f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d002      	beq.n	8006206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006206:	bf00      	nop
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	2000196c 	.word	0x2000196c
 8006218:	20001974 	.word	0x20001974

0800621c <__libc_init_array>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	4d0d      	ldr	r5, [pc, #52]	; (8006254 <__libc_init_array+0x38>)
 8006220:	4c0d      	ldr	r4, [pc, #52]	; (8006258 <__libc_init_array+0x3c>)
 8006222:	1b64      	subs	r4, r4, r5
 8006224:	10a4      	asrs	r4, r4, #2
 8006226:	2600      	movs	r6, #0
 8006228:	42a6      	cmp	r6, r4
 800622a:	d109      	bne.n	8006240 <__libc_init_array+0x24>
 800622c:	4d0b      	ldr	r5, [pc, #44]	; (800625c <__libc_init_array+0x40>)
 800622e:	4c0c      	ldr	r4, [pc, #48]	; (8006260 <__libc_init_array+0x44>)
 8006230:	f000 f82e 	bl	8006290 <_init>
 8006234:	1b64      	subs	r4, r4, r5
 8006236:	10a4      	asrs	r4, r4, #2
 8006238:	2600      	movs	r6, #0
 800623a:	42a6      	cmp	r6, r4
 800623c:	d105      	bne.n	800624a <__libc_init_array+0x2e>
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	f855 3b04 	ldr.w	r3, [r5], #4
 8006244:	4798      	blx	r3
 8006246:	3601      	adds	r6, #1
 8006248:	e7ee      	b.n	8006228 <__libc_init_array+0xc>
 800624a:	f855 3b04 	ldr.w	r3, [r5], #4
 800624e:	4798      	blx	r3
 8006250:	3601      	adds	r6, #1
 8006252:	e7f2      	b.n	800623a <__libc_init_array+0x1e>
 8006254:	08006350 	.word	0x08006350
 8006258:	08006350 	.word	0x08006350
 800625c:	08006350 	.word	0x08006350
 8006260:	08006358 	.word	0x08006358

08006264 <memcpy>:
 8006264:	440a      	add	r2, r1
 8006266:	4291      	cmp	r1, r2
 8006268:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800626c:	d100      	bne.n	8006270 <memcpy+0xc>
 800626e:	4770      	bx	lr
 8006270:	b510      	push	{r4, lr}
 8006272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800627a:	4291      	cmp	r1, r2
 800627c:	d1f9      	bne.n	8006272 <memcpy+0xe>
 800627e:	bd10      	pop	{r4, pc}

08006280 <memset>:
 8006280:	4402      	add	r2, r0
 8006282:	4603      	mov	r3, r0
 8006284:	4293      	cmp	r3, r2
 8006286:	d100      	bne.n	800628a <memset+0xa>
 8006288:	4770      	bx	lr
 800628a:	f803 1b01 	strb.w	r1, [r3], #1
 800628e:	e7f9      	b.n	8006284 <memset+0x4>

08006290 <_init>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr

0800629c <_fini>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr
