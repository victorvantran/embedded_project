
hello_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08006e28  08006e28  00016e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007088  08007088  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007090  08007090  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007090  08007090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007098  08007098  00017098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080070a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a2c  20000078  08007118  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aa4  08007118  00021aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f61e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b2a  00000000  00000000  0003f6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  000431f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  00044af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000066ca  00000000  00000000  000462b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181bb  00000000  00000000  0004c982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100c2e  00000000  00000000  00064b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016576b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e90  00000000  00000000  001657c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e10 	.word	0x08006e10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006e10 	.word	0x08006e10

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f001 f80c 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8d0 	bl	8000678 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004d8:	f000 f89a 	bl	8000610 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f003 fe40 	bl	8004160 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <main+0x30>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x34>)
 80004e6:	f003 fe85 	bl	80041f4 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <main+0x38>)
 80004ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f0:	f003 fe5a 	bl	80041a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x2c>
 80004f6:	bf00      	nop
 80004f8:	08006f40 	.word	0x08006f40
 80004fc:	0800077d 	.word	0x0800077d
 8000500:	20000118 	.word	0x20000118

08000504 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b0b8      	sub	sp, #224	; 0xe0
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f006 fbd2 	bl	8006cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2288      	movs	r2, #136	; 0x88
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f006 fbc4 	bl	8006cbc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	2303      	movs	r3, #3
 800054a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000554:	230a      	movs	r3, #10
 8000556:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800055a:	2307      	movs	r3, #7
 800055c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000570:	4618      	mov	r0, r3
 8000572:	f001 fb33 	bl	8001bdc <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000586:	f000 f919 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2303      	movs	r3, #3
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005ac:	2104      	movs	r1, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fefa 	bl	80023a8 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80005c4:	f000 f8fa 	bl	80007bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 f91e 	bl	8002814 <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf14      	ite	ne
 80005de:	2301      	movne	r3, #1
 80005e0:	2300      	moveq	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 80005e8:	f000 f8e8 	bl	80007bc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f0:	f001 fa9e 	bl	8001b30 <HAL_PWREx_ControlVoltageScaling>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000604:	f000 f8da 	bl	80007bc <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	37e0      	adds	r7, #224	; 0xe0
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000654:	f003 f86c 	bl	8003730 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf14      	ite	ne
 800065e:	2301      	movne	r3, #1
 8000660:	2300      	moveq	r3, #0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000668:	f000 f8a8 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000094 	.word	0x20000094
 8000674:	40004400 	.word	0x40004400

08000678 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b2f      	ldr	r3, [pc, #188]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a2e      	ldr	r2, [pc, #184]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a28      	ldr	r2, [pc, #160]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a22      	ldr	r2, [pc, #136]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	4816      	ldr	r0, [pc, #88]	; (8000750 <_ZL12MX_GPIO_Initv+0xd8>)
 80006f6:	f001 f9c3 	bl	8001a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <_ZL12MX_GPIO_Initv+0xdc>)
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000704:	2301      	movs	r3, #1
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4812      	ldr	r0, [pc, #72]	; (8000758 <_ZL12MX_GPIO_Initv+0xe0>)
 8000710:	f001 f80c 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <_ZL12MX_GPIO_Initv+0xd8>)
 800072e:	f000 fffd 	bl	800172c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2105      	movs	r1, #5
 8000736:	2028      	movs	r0, #40	; 0x28
 8000738:	f000 ffce 	bl	80016d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800073c:	2028      	movs	r0, #40	; 0x28
 800073e:	f000 ffe7 	bl	8001710 <HAL_NVIC_EnableIRQ>

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	48000800 	.word	0x48000800
 8000754:	10210000 	.word	0x10210000
 8000758:	48000400 	.word	0x48000400

0800075c <HAL_GPIO_EXTI_Callback>:
#define LEFT_BUTTON 	GPIO_PIN_13
#define RIGHT_BUTTON 	GPIO_PIN_12


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
	xUI.vEXTI(GPIO_Pin);
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	4619      	mov	r1, r3
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <HAL_GPIO_EXTI_Callback+0x1c>)
 800076c:	f000 fe02 	bl	8001374 <_ZN2UI5vEXTIEt>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000011c 	.word	0x2000011c

0800077c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	//HAL_UART_Transmit(&huart2, (uint8_t *)("hello\r\n"), sizeof("hello\r\n"), 100);
  	xUI.vUpdate();
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <_Z16StartDefaultTaskPv+0x18>)
 8000786:	f000 fd71 	bl	800126c <_ZN2UI7vUpdateEv>
    osDelay(250);
 800078a:	20fa      	movs	r0, #250	; 0xfa
 800078c:	f003 fdc4 	bl	8004318 <osDelay>
  	xUI.vUpdate();
 8000790:	e7f8      	b.n	8000784 <_Z16StartDefaultTaskPv+0x8>
 8000792:	bf00      	nop
 8000794:	2000011c 	.word	0x2000011c

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007aa:	f000 febd 	bl	8001528 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40001000 	.word	0x40001000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d108      	bne.n	80007ea <_Z41__static_initialization_and_destruction_0ii+0x22>
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007de:	4293      	cmp	r3, r2
 80007e0:	d103      	bne.n	80007ea <_Z41__static_initialization_and_destruction_0ii+0x22>
UI xUI(&huart2);
 80007e2:	4909      	ldr	r1, [pc, #36]	; (8000808 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007e6:	f000 fcee 	bl	80011c6 <_ZN2UIC1EP20__UART_HandleTypeDef>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d107      	bne.n	8000800 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d102      	bne.n	8000800 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007fc:	f000 fd10 	bl	8001220 <_ZN2UID1Ev>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000094 	.word	0x20000094
 800080c:	2000011c 	.word	0x2000011c

08000810 <_GLOBAL__sub_I_huart2>:
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
 8000814:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff ffd5 	bl	80007c8 <_Z41__static_initialization_and_destruction_0ii>
 800081e:	bd80      	pop	{r7, pc}

08000820 <_GLOBAL__sub_D_huart2>:
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
 8000824:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff ffcd 	bl	80007c8 <_Z41__static_initialization_and_destruction_0ii>
 800082e:	bd80      	pop	{r7, pc}

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <HAL_MspInit+0x4c>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <HAL_MspInit+0x4c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6613      	str	r3, [r2, #96]	; 0x60
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <HAL_MspInit+0x4c>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_MspInit+0x4c>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6593      	str	r3, [r2, #88]	; 0x58
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_MspInit+0x4c>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f000 ff33 	bl	80016d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a17      	ldr	r2, [pc, #92]	; (80008fc <HAL_UART_MspInit+0x7c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d128      	bne.n	80008f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6593      	str	r3, [r2, #88]	; 0x58
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d2:	230c      	movs	r3, #12
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e2:	2307      	movs	r3, #7
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f000 ff1c 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40004400 	.word	0x40004400
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	2036      	movs	r0, #54	; 0x36
 800091a:	f000 fedd 	bl	80016d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800091e:	2036      	movs	r0, #54	; 0x36
 8000920:	f000 fef6 	bl	8001710 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <HAL_InitTick+0x9c>)
 8000926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000928:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <HAL_InitTick+0x9c>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6593      	str	r3, [r2, #88]	; 0x58
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_InitTick+0x9c>)
 8000932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800093c:	f107 0210 	add.w	r2, r7, #16
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fed2 	bl	80026f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800094c:	f001 fea4 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8000950:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000954:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <HAL_InitTick+0xa0>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	0c9b      	lsrs	r3, r3, #18
 800095c:	3b01      	subs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_InitTick+0xa4>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <HAL_InitTick+0xa8>)
 8000964:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_InitTick+0xa4>)
 8000968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800096c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_InitTick+0xa4>)
 8000970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000972:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_InitTick+0xa4>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_InitTick+0xa4>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <HAL_InitTick+0xa4>)
 8000982:	f002 fc03 	bl	800318c <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d104      	bne.n	8000996 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <HAL_InitTick+0xa4>)
 800098e:	f002 fc5f 	bl	8003250 <HAL_TIM_Base_Start_IT>
 8000992:	4603      	mov	r3, r0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3730      	adds	r7, #48	; 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	20001a04 	.word	0x20001a04
 80009ac:	40001000 	.word	0x40001000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80009e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009e4:	f001 f87e 	bl	8001ae4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009ec:	f001 f87a 	bl	8001ae4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80009f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009f4:	f001 f876 	bl	8001ae4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80009f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009fc:	f001 f872 	bl	8001ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIM6_DAC_IRQHandler+0x10>)
 8000a0a:	f002 fc91 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20001a04 	.word	0x20001a04

08000a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	return 1;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_kill>:

int _kill(int pid, int sig)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a32:	f006 f903 	bl	8006c3c <__errno>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2216      	movs	r2, #22
 8000a3a:	601a      	str	r2, [r3, #0]
	return -1;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_exit>:

void _exit (int status)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ffe7 	bl	8000a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a5a:	e7fe      	b.n	8000a5a <_exit+0x12>

08000a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <SystemInit+0x5c>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <SystemInit+0x5c>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <SystemInit+0x60>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a11      	ldr	r2, [pc, #68]	; (8000abc <SystemInit+0x60>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <SystemInit+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <SystemInit+0x60>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <SystemInit+0x60>)
 8000a88:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a8c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <SystemInit+0x60>)
 8000a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a98:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <SystemInit+0x60>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <SystemInit+0x60>)
 8000aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SystemInit+0x60>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00
 8000abc:	40021000 	.word	0x40021000

08000ac0 <_ZN2UI17DEBUG_PRINT_STATEEv>:

	UART_HandleTypeDef* pxGetUART(void);


	// Debug
	void DEBUG_PRINT_STATE(void)
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	{
		if (this->_pxCurrentState == &this->_xMainMenu)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	695a      	ldr	r2, [r3, #20]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d107      	bne.n	8000ae2 <_ZN2UI17DEBUG_PRINT_STATEEv+0x22>
		{
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("MAIN_MENU\r\n"), sizeof("MAIN_MENU\r\n"), 100);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6998      	ldr	r0, [r3, #24]
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	220c      	movs	r2, #12
 8000ada:	4918      	ldr	r1, [pc, #96]	; (8000b3c <_ZN2UI17DEBUG_PRINT_STATEEv+0x7c>)
 8000adc:	f002 fe76 	bl	80037cc <HAL_UART_Transmit>
		else
		{

		}

	}
 8000ae0:	e028      	b.n	8000b34 <_ZN2UI17DEBUG_PRINT_STATEEv+0x74>
		else if (this->_pxCurrentState == &this->_xMusic)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	695a      	ldr	r2, [r3, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3308      	adds	r3, #8
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d107      	bne.n	8000afe <_ZN2UI17DEBUG_PRINT_STATEEv+0x3e>
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("MUSIC\r\n"), sizeof("MUSIC\r\n"), 100);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6998      	ldr	r0, [r3, #24]
 8000af2:	2364      	movs	r3, #100	; 0x64
 8000af4:	2208      	movs	r2, #8
 8000af6:	4912      	ldr	r1, [pc, #72]	; (8000b40 <_ZN2UI17DEBUG_PRINT_STATEEv+0x80>)
 8000af8:	f002 fe68 	bl	80037cc <HAL_UART_Transmit>
	}
 8000afc:	e01a      	b.n	8000b34 <_ZN2UI17DEBUG_PRINT_STATEEv+0x74>
		else if (this->_pxCurrentState == &this->_xProfile)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	330c      	adds	r3, #12
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d107      	bne.n	8000b1a <_ZN2UI17DEBUG_PRINT_STATEEv+0x5a>
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("PROFILE\r\n"), sizeof("PROFILE\r\n"), 100);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6998      	ldr	r0, [r3, #24]
 8000b0e:	2364      	movs	r3, #100	; 0x64
 8000b10:	220a      	movs	r2, #10
 8000b12:	490c      	ldr	r1, [pc, #48]	; (8000b44 <_ZN2UI17DEBUG_PRINT_STATEEv+0x84>)
 8000b14:	f002 fe5a 	bl	80037cc <HAL_UART_Transmit>
	}
 8000b18:	e00c      	b.n	8000b34 <_ZN2UI17DEBUG_PRINT_STATEEv+0x74>
		else if (this->_pxCurrentState == &this->_xSettings)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	695a      	ldr	r2, [r3, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3310      	adds	r3, #16
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d106      	bne.n	8000b34 <_ZN2UI17DEBUG_PRINT_STATEEv+0x74>
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("SETTINGS\r\n"), sizeof("SETTINGS\r\n"), 100);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6998      	ldr	r0, [r3, #24]
 8000b2a:	2364      	movs	r3, #100	; 0x64
 8000b2c:	220b      	movs	r2, #11
 8000b2e:	4906      	ldr	r1, [pc, #24]	; (8000b48 <_ZN2UI17DEBUG_PRINT_STATEEv+0x88>)
 8000b30:	f002 fe4c 	bl	80037cc <HAL_UART_Transmit>
	}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	08006e34 	.word	0x08006e34
 8000b40:	08006e40 	.word	0x08006e40
 8000b44:	08006e48 	.word	0x08006e48
 8000b48:	08006e54 	.word	0x08006e54

08000b4c <_ZN7UIStateC1Ev>:
#include "ui.h"



// UIState
UIState::UIState() {}
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <_ZN7UIStateC1Ev+0x1c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	08007064 	.word	0x08007064

08000b6c <_ZN7UIStateD1Ev>:
UIState::~UIState() {}
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <_ZN7UIStateD1Ev+0x1c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	08007064 	.word	0x08007064

08000b8c <_ZN13MainMenuStateC1Ev>:




// MainMenuState
MainMenuState::MainMenuState() {}
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ffd8 	bl	8000b4c <_ZN7UIStateC1Ev>
 8000b9c:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <_ZN13MainMenuStateC1Ev+0x28>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	08007038 	.word	0x08007038

08000bb8 <_ZN13MainMenuStateD1Ev>:
MainMenuState::~MainMenuState() {}
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <_ZN13MainMenuStateD1Ev+0x20>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ffcf 	bl	8000b6c <_ZN7UIStateD1Ev>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	08007038 	.word	0x08007038

08000bdc <_ZN13MainMenuStateD0Ev>:
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ffe7 	bl	8000bb8 <_ZN13MainMenuStateD1Ev>
 8000bea:	2108      	movs	r1, #8
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f006 f805 	bl	8006bfc <_ZdlPvj>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_ZN13MainMenuState7vUpdateEP2UI>:

void MainMenuState::vUpdate(UI* pxUI)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	this->DEBUG_PRINT_STATE_OPTION(pxUI);
 8000c06:	6839      	ldr	r1, [r7, #0]
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 f8bd 	bl	8000d88 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <_ZN13MainMenuState6vEnterEP2UI>:


void MainMenuState::vEnter(UI* pxUI)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("enter: main menu\r\n"), sizeof("enter: main menu\r\n"), 100);
 8000c22:	6838      	ldr	r0, [r7, #0]
 8000c24:	f000 fc29 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000c28:	2364      	movs	r3, #100	; 0x64
 8000c2a:	2213      	movs	r2, #19
 8000c2c:	4903      	ldr	r1, [pc, #12]	; (8000c3c <_ZN13MainMenuState6vEnterEP2UI+0x24>)
 8000c2e:	f002 fdcd 	bl	80037cc <HAL_UART_Transmit>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08006e60 	.word	0x08006e60

08000c40 <_ZN13MainMenuState5vExitEP2UI>:


void MainMenuState::vExit(UI* pxUI)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("exit: main menu\r\n"), sizeof("exit: main menu\r\n"), 100);
 8000c4a:	6838      	ldr	r0, [r7, #0]
 8000c4c:	f000 fc15 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000c50:	2364      	movs	r3, #100	; 0x64
 8000c52:	2212      	movs	r2, #18
 8000c54:	4903      	ldr	r1, [pc, #12]	; (8000c64 <_ZN13MainMenuState5vExitEP2UI+0x24>)
 8000c56:	f002 fdb9 	bl	80037cc <HAL_UART_Transmit>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	08006e74 	.word	0x08006e74

08000c68 <_ZN13MainMenuState8vEventUpEP2UI>:


void MainMenuState::vEventUp(UI* pxUI)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	pxUI->xGetMainMenuState().vMoveUpStateOption();
 8000c72:	6838      	ldr	r0, [r7, #0]
 8000c74:	f000 fbd2 	bl	800141c <_ZN2UI17xGetMainMenuStateEv>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f850 	bl	8000d20 <_ZN13MainMenuState18vMoveUpStateOptionEv>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <_ZN13MainMenuState10vEventDownEP2UI>:


void MainMenuState::vEventDown(UI* pxUI)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
	pxUI->xGetMainMenuState().vMoveDownStateOption();
 8000c92:	6838      	ldr	r0, [r7, #0]
 8000c94:	f000 fbc2 	bl	800141c <_ZN2UI17xGetMainMenuStateEv>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f85a 	bl	8000d54 <_ZN13MainMenuState20vMoveDownStateOptionEv>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_ZN13MainMenuState10vEventLeftEP2UI>:


void MainMenuState::vEventLeft(UI* pxUI)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	// NOP
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_ZN13MainMenuState11vEventRightEP2UI>:


void MainMenuState::vEventRight(UI* pxUI)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
	switch (this->_eStateOption)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d018      	beq.n	8000d02 <_ZN13MainMenuState11vEventRightEP2UI+0x44>
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	dc1f      	bgt.n	8000d14 <_ZN13MainMenuState11vEventRightEP2UI+0x56>
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <_ZN13MainMenuState11vEventRightEP2UI+0x20>
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d009      	beq.n	8000cf0 <_ZN13MainMenuState11vEventRightEP2UI+0x32>
	break;
	case StateOption::SETTINGS:
		pxUI->vTransitionState(pxUI->xGetSettingsState());
	break;
	default:
	break;
 8000cdc:	e01a      	b.n	8000d14 <_ZN13MainMenuState11vEventRightEP2UI+0x56>
		pxUI->vTransitionState(pxUI->xGetMusicState());
 8000cde:	6838      	ldr	r0, [r7, #0]
 8000ce0:	f000 fba7 	bl	8001432 <_ZN2UI14xGetMusicStateEv>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	6838      	ldr	r0, [r7, #0]
 8000cea:	f000 fadb 	bl	80012a4 <_ZN2UI16vTransitionStateER7UIState>
	break;
 8000cee:	e012      	b.n	8000d16 <_ZN13MainMenuState11vEventRightEP2UI+0x58>
		pxUI->vTransitionState(pxUI->xGetProfileState());
 8000cf0:	6838      	ldr	r0, [r7, #0]
 8000cf2:	f000 fbaa 	bl	800144a <_ZN2UI16xGetProfileStateEv>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	6838      	ldr	r0, [r7, #0]
 8000cfc:	f000 fad2 	bl	80012a4 <_ZN2UI16vTransitionStateER7UIState>
	break;
 8000d00:	e009      	b.n	8000d16 <_ZN13MainMenuState11vEventRightEP2UI+0x58>
		pxUI->vTransitionState(pxUI->xGetSettingsState());
 8000d02:	6838      	ldr	r0, [r7, #0]
 8000d04:	f000 fbad 	bl	8001462 <_ZN2UI17xGetSettingsStateEv>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	6838      	ldr	r0, [r7, #0]
 8000d0e:	f000 fac9 	bl	80012a4 <_ZN2UI16vTransitionStateER7UIState>
	break;
 8000d12:	e000      	b.n	8000d16 <_ZN13MainMenuState11vEventRightEP2UI+0x58>
	break;
 8000d14:	bf00      	nop
	}
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <_ZN13MainMenuState18vMoveUpStateOptionEv>:


void MainMenuState::vMoveUpStateOption(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	this->_eStateOption = (StateOption)(((int32_t)this->_eStateOption + ((int32_t)StateOption::COUNT - 1)) % (int32_t)StateOption::COUNT);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	1c99      	adds	r1, r3, #2
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <_ZN13MainMenuState18vMoveUpStateOptionEv+0x30>)
 8000d30:	fb83 3201 	smull	r3, r2, r3, r1
 8000d34:	17cb      	asrs	r3, r1, #31
 8000d36:	1ad2      	subs	r2, r2, r3
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	1aca      	subs	r2, r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	605a      	str	r2, [r3, #4]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	55555556 	.word	0x55555556

08000d54 <_ZN13MainMenuState20vMoveDownStateOptionEv>:


void MainMenuState::vMoveDownStateOption(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	this->_eStateOption = (StateOption)(((int32_t)this->_eStateOption + 1) % (int32_t)StateOption::COUNT);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	1c59      	adds	r1, r3, #1
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_ZN13MainMenuState20vMoveDownStateOptionEv+0x30>)
 8000d64:	fb83 3201 	smull	r3, r2, r3, r1
 8000d68:	17cb      	asrs	r3, r1, #31
 8000d6a:	1ad2      	subs	r2, r2, r3
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	1aca      	subs	r2, r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	605a      	str	r2, [r3, #4]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	55555556 	.word	0x55555556

08000d88 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI>:




void MainMenuState::DEBUG_PRINT_STATE_OPTION(UI* pxUI)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	switch (this->_eStateOption)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d038      	beq.n	8000e0c <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0x84>
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	dc4f      	bgt.n	8000e3e <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xb6>
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0x20>
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d019      	beq.n	8000dda <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0x52>
 8000da6:	e04a      	b.n	8000e3e <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xb6>
	{
	case StateOption::MUSIC:
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("-> music\r\n"), 	 	sizeof("-> music\r\n"), 		100);
 8000da8:	6838      	ldr	r0, [r7, #0]
 8000daa:	f000 fb66 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	220b      	movs	r2, #11
 8000db2:	4929      	ldr	r1, [pc, #164]	; (8000e58 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xd0>)
 8000db4:	f002 fd0a 	bl	80037cc <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   profile\r\n"), 	sizeof("   profile\r\n"), 	100);
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f000 fb5e 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000dbe:	2364      	movs	r3, #100	; 0x64
 8000dc0:	220d      	movs	r2, #13
 8000dc2:	4926      	ldr	r1, [pc, #152]	; (8000e5c <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xd4>)
 8000dc4:	f002 fd02 	bl	80037cc <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   settings\r\n"),	sizeof("   settings\r\n"), 100);
 8000dc8:	6838      	ldr	r0, [r7, #0]
 8000dca:	f000 fb56 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000dce:	2364      	movs	r3, #100	; 0x64
 8000dd0:	220e      	movs	r2, #14
 8000dd2:	4923      	ldr	r1, [pc, #140]	; (8000e60 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xd8>)
 8000dd4:	f002 fcfa 	bl	80037cc <HAL_UART_Transmit>
		break;
 8000dd8:	e03a      	b.n	8000e50 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xc8>
	case StateOption::PROFILE:
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   music\r\n"), 	 	sizeof("   music\r\n"), 		100);
 8000dda:	6838      	ldr	r0, [r7, #0]
 8000ddc:	f000 fb4d 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	220b      	movs	r2, #11
 8000de4:	491f      	ldr	r1, [pc, #124]	; (8000e64 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xdc>)
 8000de6:	f002 fcf1 	bl	80037cc <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("-> profile\r\n"), 	sizeof("-> profile\r\n"), 	100);
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f000 fb45 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000df0:	2364      	movs	r3, #100	; 0x64
 8000df2:	220d      	movs	r2, #13
 8000df4:	491c      	ldr	r1, [pc, #112]	; (8000e68 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xe0>)
 8000df6:	f002 fce9 	bl	80037cc <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   settings\r\n"),	sizeof("   settings\r\n"), 100);
 8000dfa:	6838      	ldr	r0, [r7, #0]
 8000dfc:	f000 fb3d 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000e00:	2364      	movs	r3, #100	; 0x64
 8000e02:	220e      	movs	r2, #14
 8000e04:	4916      	ldr	r1, [pc, #88]	; (8000e60 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xd8>)
 8000e06:	f002 fce1 	bl	80037cc <HAL_UART_Transmit>
		break;
 8000e0a:	e021      	b.n	8000e50 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xc8>
	case StateOption::SETTINGS:
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   music\r\n"), 	 	sizeof("   music\r\n"), 		100);
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f000 fb34 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	220b      	movs	r2, #11
 8000e16:	4913      	ldr	r1, [pc, #76]	; (8000e64 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xdc>)
 8000e18:	f002 fcd8 	bl	80037cc <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("   profile\r\n"), 	sizeof("   profile\r\n"), 	100);
 8000e1c:	6838      	ldr	r0, [r7, #0]
 8000e1e:	f000 fb2c 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000e22:	2364      	movs	r3, #100	; 0x64
 8000e24:	220d      	movs	r2, #13
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xd4>)
 8000e28:	f002 fcd0 	bl	80037cc <HAL_UART_Transmit>
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("-> settings\r\n"),	sizeof("-> settings\r\n"), 100);
 8000e2c:	6838      	ldr	r0, [r7, #0]
 8000e2e:	f000 fb24 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000e32:	2364      	movs	r3, #100	; 0x64
 8000e34:	220e      	movs	r2, #14
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xe4>)
 8000e38:	f002 fcc8 	bl	80037cc <HAL_UART_Transmit>
		break;
 8000e3c:	e008      	b.n	8000e50 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xc8>
	default:
		HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("idk\r\n"), sizeof("idk\r\n"), 100);
 8000e3e:	6838      	ldr	r0, [r7, #0]
 8000e40:	f000 fb1b 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	2206      	movs	r2, #6
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <_ZN13MainMenuState24DEBUG_PRINT_STATE_OPTIONEP2UI+0xe8>)
 8000e4a:	f002 fcbf 	bl	80037cc <HAL_UART_Transmit>
		break;
 8000e4e:	bf00      	nop
	}
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	08006e88 	.word	0x08006e88
 8000e5c:	08006e94 	.word	0x08006e94
 8000e60:	08006ea4 	.word	0x08006ea4
 8000e64:	08006eb4 	.word	0x08006eb4
 8000e68:	08006ec0 	.word	0x08006ec0
 8000e6c:	08006ed0 	.word	0x08006ed0
 8000e70:	08006ee0 	.word	0x08006ee0

08000e74 <_ZN10MusicStateC1Ev>:




// MusicState
MusicState::MusicState() {}
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fe64 	bl	8000b4c <_ZN7UIStateC1Ev>
 8000e84:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <_ZN10MusicStateC1Ev+0x20>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	0800700c 	.word	0x0800700c

08000e98 <_ZN10MusicStateD1Ev>:
MusicState::~MusicState() {}
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <_ZN10MusicStateD1Ev+0x20>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe5f 	bl	8000b6c <_ZN7UIStateD1Ev>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	0800700c 	.word	0x0800700c

08000ebc <_ZN10MusicStateD0Ev>:
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ffe7 	bl	8000e98 <_ZN10MusicStateD1Ev>
 8000eca:	2104      	movs	r1, #4
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f005 fe95 	bl	8006bfc <_ZdlPvj>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZN10MusicState7vUpdateEP2UI>:

void MusicState::vUpdate(UI* pxUI)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]

}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <_ZN10MusicState6vEnterEP2UI>:

void MusicState::vEnter(UI* pxUI)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("enter: music\r\n"), sizeof("enter: music\r\n"), 100);
 8000efe:	6838      	ldr	r0, [r7, #0]
 8000f00:	f000 fabb 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	220f      	movs	r2, #15
 8000f08:	4903      	ldr	r1, [pc, #12]	; (8000f18 <_ZN10MusicState6vEnterEP2UI+0x24>)
 8000f0a:	f002 fc5f 	bl	80037cc <HAL_UART_Transmit>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	08006ee8 	.word	0x08006ee8

08000f1c <_ZN10MusicState5vExitEP2UI>:


void MusicState::vExit(UI* pxUI)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("exit: music\r\n"), sizeof("exit: music\r\n"), 100);
 8000f26:	6838      	ldr	r0, [r7, #0]
 8000f28:	f000 faa7 	bl	800147a <_ZN2UI9pxGetUARTEv>
 8000f2c:	2364      	movs	r3, #100	; 0x64
 8000f2e:	220e      	movs	r2, #14
 8000f30:	4903      	ldr	r1, [pc, #12]	; (8000f40 <_ZN10MusicState5vExitEP2UI+0x24>)
 8000f32:	f002 fc4b 	bl	80037cc <HAL_UART_Transmit>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08006ef8 	.word	0x08006ef8

08000f44 <_ZN10MusicState8vEventUpEP2UI>:


void MusicState::vEventUp(UI* pxUI)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]

}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_ZN10MusicState10vEventDownEP2UI>:


void MusicState::vEventDown(UI* pxUI)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]

}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <_ZN10MusicState10vEventLeftEP2UI>:


void MusicState::vEventLeft(UI* pxUI)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	pxUI->vTransitionState(pxUI->xGetMainMenuState());
 8000f7a:	6838      	ldr	r0, [r7, #0]
 8000f7c:	f000 fa4e 	bl	800141c <_ZN2UI17xGetMainMenuStateEv>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4619      	mov	r1, r3
 8000f84:	6838      	ldr	r0, [r7, #0]
 8000f86:	f000 f98d 	bl	80012a4 <_ZN2UI16vTransitionStateER7UIState>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_ZN10MusicState11vEventRightEP2UI>:


void MusicState::vEventRight(UI* pxUI)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]


}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_ZN12ProfileStateC1Ev>:



// ProfileState
ProfileState::ProfileState() {}
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fdca 	bl	8000b4c <_ZN7UIStateC1Ev>
 8000fb8:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <_ZN12ProfileStateC1Ev+0x20>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	08006fe0 	.word	0x08006fe0

08000fcc <_ZN12ProfileStateD1Ev>:
ProfileState::~ProfileState() {}
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <_ZN12ProfileStateD1Ev+0x20>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fdc5 	bl	8000b6c <_ZN7UIStateD1Ev>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	08006fe0 	.word	0x08006fe0

08000ff0 <_ZN12ProfileStateD0Ev>:
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffe7 	bl	8000fcc <_ZN12ProfileStateD1Ev>
 8000ffe:	2104      	movs	r1, #4
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f005 fdfb 	bl	8006bfc <_ZdlPvj>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZN12ProfileState7vUpdateEP2UI>:

void ProfileState::vUpdate(UI* pxUI)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]

}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_ZN12ProfileState6vEnterEP2UI>:

void ProfileState::vEnter(UI* pxUI)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]

}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_ZN12ProfileState5vExitEP2UI>:


void ProfileState::vExit(UI* pxUI)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]

}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <_ZN12ProfileState8vEventUpEP2UI>:


void ProfileState::vEventUp(UI* pxUI)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]

}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <_ZN12ProfileState10vEventDownEP2UI>:


void ProfileState::vEventDown(UI* pxUI)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]

}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <_ZN12ProfileState10vEventLeftEP2UI>:


void ProfileState::vEventLeft(UI* pxUI)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
	pxUI->vTransitionState(pxUI->xGetMainMenuState());
 8001088:	6838      	ldr	r0, [r7, #0]
 800108a:	f000 f9c7 	bl	800141c <_ZN2UI17xGetMainMenuStateEv>
 800108e:	4603      	mov	r3, r0
 8001090:	4619      	mov	r1, r3
 8001092:	6838      	ldr	r0, [r7, #0]
 8001094:	f000 f906 	bl	80012a4 <_ZN2UI16vTransitionStateER7UIState>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN12ProfileState11vEventRightEP2UI>:


void ProfileState::vEventRight(UI* pxUI)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]


}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <_ZN13SettingsStateC1Ev>:



// SettingsState
SettingsState::SettingsState() {}
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fd42 	bl	8000b4c <_ZN7UIStateC1Ev>
 80010c8:	4a03      	ldr	r2, [pc, #12]	; (80010d8 <_ZN13SettingsStateC1Ev+0x20>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	08006fb4 	.word	0x08006fb4

080010dc <_ZN13SettingsStateD1Ev>:
SettingsState::~SettingsState() {}
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <_ZN13SettingsStateD1Ev+0x20>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fd3d 	bl	8000b6c <_ZN7UIStateD1Ev>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	08006fb4 	.word	0x08006fb4

08001100 <_ZN13SettingsStateD0Ev>:
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ffe7 	bl	80010dc <_ZN13SettingsStateD1Ev>
 800110e:	2104      	movs	r1, #4
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f005 fd73 	bl	8006bfc <_ZdlPvj>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <_ZN13SettingsState7vUpdateEP2UI>:

void SettingsState::vUpdate(UI* pxUI)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]

}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_ZN13SettingsState6vEnterEP2UI>:

void SettingsState::vEnter(UI* pxUI)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]

}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <_ZN13SettingsState5vExitEP2UI>:


void SettingsState::vExit(UI* pxUI)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]

}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_ZN13SettingsState8vEventUpEP2UI>:


void SettingsState::vEventUp(UI* pxUI)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]

}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_ZN13SettingsState10vEventDownEP2UI>:


void SettingsState::vEventDown(UI* pxUI)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]

}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_ZN13SettingsState10vEventLeftEP2UI>:


void SettingsState::vEventLeft(UI* pxUI)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
	pxUI->vTransitionState(pxUI->xGetMainMenuState());
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f000 f93f 	bl	800141c <_ZN2UI17xGetMainMenuStateEv>
 800119e:	4603      	mov	r3, r0
 80011a0:	4619      	mov	r1, r3
 80011a2:	6838      	ldr	r0, [r7, #0]
 80011a4:	f000 f87e 	bl	80012a4 <_ZN2UI16vTransitionStateER7UIState>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZN13SettingsState11vEventRightEP2UI>:


void SettingsState::vEventRight(UI* pxUI)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]


}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_ZN2UIC1EP20__UART_HandleTypeDef>:
// UI
UI::UI() : _xMainMenu(), _xMusic(), _xProfile(), _xSettings(), _pxCurrentState(&this->_xMainMenu),
		_pxUART(nullptr) {}


UI::UI(UART_HandleTypeDef *pxUART) : _xMainMenu(), _xMusic(), _xProfile(), _xSettings(), _pxCurrentState(&this->_xMainMenu),
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
		_pxUART(pxUART)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fcda 	bl	8000b8c <_ZN13MainMenuStateC1Ev>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3308      	adds	r3, #8
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fe49 	bl	8000e74 <_ZN10MusicStateC1Ev>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	330c      	adds	r3, #12
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fede 	bl	8000fa8 <_ZN12ProfileStateC1Ev>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3310      	adds	r3, #16
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff61 	bl	80010b8 <_ZN13SettingsStateC1Ev>
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	619a      	str	r2, [r3, #24]
{
	this->_pxCurrentState->vEnter(this);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	330c      	adds	r3, #12
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4610      	mov	r0, r2
 8001214:	4798      	blx	r3
}
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZN2UID1Ev>:




UI::~UI()
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
{
	this->_pxCurrentState->vExit(this);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695a      	ldr	r2, [r3, #20]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3310      	adds	r3, #16
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4610      	mov	r0, r2
 800123a:	4798      	blx	r3
UI::~UI()
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3310      	adds	r3, #16
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff4b 	bl	80010dc <_ZN13SettingsStateD1Ev>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	330c      	adds	r3, #12
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff febe 	bl	8000fcc <_ZN12ProfileStateD1Ev>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3308      	adds	r3, #8
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe1f 	bl	8000e98 <_ZN10MusicStateD1Ev>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fcab 	bl	8000bb8 <_ZN13MainMenuStateD1Ev>
}
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZN2UI7vUpdateEv>:




void UI::vUpdate(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8001274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <_ZN2UI7vUpdateEv+0x34>)
 800127a:	f000 fc19 	bl	8001ab0 <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
  //HAL_UART_Transmit(this->_pxUART, (uint8_t *)("update ui\r\n"), sizeof("update ui\r\n"), 100);
	this->_pxCurrentState->vUpdate(this);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695a      	ldr	r2, [r3, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3308      	adds	r3, #8
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4610      	mov	r0, r2
 8001290:	4798      	blx	r3
	DEBUG_PRINT_STATE();
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fc14 	bl	8000ac0 <_ZN2UI17DEBUG_PRINT_STATEEv>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	48000800 	.word	0x48000800

080012a4 <_ZN2UI16vTransitionStateER7UIState>:
	return this->_pxCurrentState;
}


void UI::vTransitionState(UIState& xNextState)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
	this->_pxCurrentState->vExit(this);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695a      	ldr	r2, [r3, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3310      	adds	r3, #16
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4610      	mov	r0, r2
 80012c0:	4798      	blx	r3
	this->_pxCurrentState = &xNextState;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	615a      	str	r2, [r3, #20]
	this->_pxCurrentState->vEnter(this);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	330c      	adds	r3, #12
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4610      	mov	r0, r2
 80012da:	4798      	blx	r3
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_ZN2UI14vPressUpButtonEv>:


void UI::vPressUpButton(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventUp(this);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3314      	adds	r3, #20
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4610      	mov	r0, r2
 80012fe:	4798      	blx	r3
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_ZN2UI16vPressDownButtonEv>:


void UI::vPressDownButton(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventDown(this);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695a      	ldr	r2, [r3, #20]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3318      	adds	r3, #24
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4610      	mov	r0, r2
 8001322:	4798      	blx	r3
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZN2UI16vPressLeftButtonEv>:


void UI::vPressLeftButton(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventLeft(this);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	331c      	adds	r3, #28
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4610      	mov	r0, r2
 8001346:	4798      	blx	r3
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_ZN2UI17vPressRightButtonEv>:


void UI::vPressRightButton(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventRight(this);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695a      	ldr	r2, [r3, #20]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3320      	adds	r3, #32
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4610      	mov	r0, r2
 800136a:	4798      	blx	r3
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_ZN2UI5vEXTIEt>:



void UI::vEXTI(uint16_t GPIO_Pin)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
	switch (GPIO_Pin)
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001386:	d00f      	beq.n	80013a8 <_ZN2UI5vEXTIEt+0x34>
 8001388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800138c:	dc38      	bgt.n	8001400 <_ZN2UI5vEXTIEt+0x8c>
 800138e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001392:	d014      	beq.n	80013be <_ZN2UI5vEXTIEt+0x4a>
 8001394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001398:	dc32      	bgt.n	8001400 <_ZN2UI5vEXTIEt+0x8c>
 800139a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800139e:	d024      	beq.n	80013ea <_ZN2UI5vEXTIEt+0x76>
 80013a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013a4:	d016      	beq.n	80013d4 <_ZN2UI5vEXTIEt+0x60>
	case RIGHT_BUTTON:
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("right\r\n"), sizeof("right\r\n"), 100);
		this->vPressRightButton();
		break;
	default:
		break;
 80013a6:	e02b      	b.n	8001400 <_ZN2UI5vEXTIEt+0x8c>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("up\r\n"), sizeof("up\r\n"), 100);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6998      	ldr	r0, [r3, #24]
 80013ac:	2364      	movs	r3, #100	; 0x64
 80013ae:	2205      	movs	r2, #5
 80013b0:	4916      	ldr	r1, [pc, #88]	; (800140c <_ZN2UI5vEXTIEt+0x98>)
 80013b2:	f002 fa0b 	bl	80037cc <HAL_UART_Transmit>
		this->vPressUpButton();
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff94 	bl	80012e4 <_ZN2UI14vPressUpButtonEv>
		break;
 80013bc:	e021      	b.n	8001402 <_ZN2UI5vEXTIEt+0x8e>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("down\r\n"), sizeof("down\r\n"), 100);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6998      	ldr	r0, [r3, #24]
 80013c2:	2364      	movs	r3, #100	; 0x64
 80013c4:	2207      	movs	r2, #7
 80013c6:	4912      	ldr	r1, [pc, #72]	; (8001410 <_ZN2UI5vEXTIEt+0x9c>)
 80013c8:	f002 fa00 	bl	80037cc <HAL_UART_Transmit>
		this->vPressDownButton();
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff9b 	bl	8001308 <_ZN2UI16vPressDownButtonEv>
		break;
 80013d2:	e016      	b.n	8001402 <_ZN2UI5vEXTIEt+0x8e>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("left\r\n"), sizeof("left\r\n"), 100);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6998      	ldr	r0, [r3, #24]
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	2207      	movs	r2, #7
 80013dc:	490d      	ldr	r1, [pc, #52]	; (8001414 <_ZN2UI5vEXTIEt+0xa0>)
 80013de:	f002 f9f5 	bl	80037cc <HAL_UART_Transmit>
		this->vPressLeftButton();
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa2 	bl	800132c <_ZN2UI16vPressLeftButtonEv>
		break;
 80013e8:	e00b      	b.n	8001402 <_ZN2UI5vEXTIEt+0x8e>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("right\r\n"), sizeof("right\r\n"), 100);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6998      	ldr	r0, [r3, #24]
 80013ee:	2364      	movs	r3, #100	; 0x64
 80013f0:	2208      	movs	r2, #8
 80013f2:	4909      	ldr	r1, [pc, #36]	; (8001418 <_ZN2UI5vEXTIEt+0xa4>)
 80013f4:	f002 f9ea 	bl	80037cc <HAL_UART_Transmit>
		this->vPressRightButton();
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ffa9 	bl	8001350 <_ZN2UI17vPressRightButtonEv>
		break;
 80013fe:	e000      	b.n	8001402 <_ZN2UI5vEXTIEt+0x8e>
		break;
 8001400:	bf00      	nop
	}
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	08006f08 	.word	0x08006f08
 8001410:	08006f10 	.word	0x08006f10
 8001414:	08006f18 	.word	0x08006f18
 8001418:	08006f20 	.word	0x08006f20

0800141c <_ZN2UI17xGetMainMenuStateEv>:



MainMenuState& UI::xGetMainMenuState(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	return this->_xMainMenu;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_ZN2UI14xGetMusicStateEv>:

MusicState& UI::xGetMusicState(void)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
	return this->_xMusic;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3308      	adds	r3, #8
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_ZN2UI16xGetProfileStateEv>:

ProfileState& UI::xGetProfileState(void)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
	return this->_xProfile;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	330c      	adds	r3, #12
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_ZN2UI17xGetSettingsStateEv>:

SettingsState& UI::xGetSettingsState(void)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
	return this->_xSettings;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3310      	adds	r3, #16
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <_ZN2UI9pxGetUARTEv>:

UART_HandleTypeDef* UI::pxGetUART(void)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
	return this->_pxUART;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001498:	f7ff fae0 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800149c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800149e:	e003      	b.n	80014a8 <LoopCopyDataInit>

080014a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014a6:	3104      	adds	r1, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014b0:	d3f6      	bcc.n	80014a0 <CopyDataInit>
	ldr	r2, =_sbss
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80014b4:	e002      	b.n	80014bc <LoopFillZerobss>

080014b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014b8:	f842 3b04 	str.w	r3, [r2], #4

080014bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <LoopForever+0x16>)
	cmp	r2, r3
 80014be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014c0:	d3f9      	bcc.n	80014b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c2:	f005 fbc1 	bl	8006c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014c6:	f7fe ffff 	bl	80004c8 <main>

080014ca <LoopForever>:

LoopForever:
    b LoopForever
 80014ca:	e7fe      	b.n	80014ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014cc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014d0:	080070a0 	.word	0x080070a0
	ldr	r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014d8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80014dc:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80014e0:	20001aa4 	.word	0x20001aa4

080014e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC1_2_IRQHandler>
	...

080014e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_Init+0x3c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <HAL_Init+0x3c>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fe:	2003      	movs	r0, #3
 8001500:	f000 f8df 	bl	80016c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff f9fd 	bl	8000904 <HAL_InitTick>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	e001      	b.n	800151a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001516:	f7ff f98b 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800151a:	79fb      	ldrb	r3, [r7, #7]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40022000 	.word	0x40022000

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008
 800154c:	20001a50 	.word	0x20001a50

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20001a50 	.word	0x20001a50

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <__NVIC_EnableIRQ+0x38>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ff4c 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ea:	f7ff ff61 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 80016ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	6978      	ldr	r0, [r7, #20]
 80016f6:	f7ff ffb1 	bl	800165c <NVIC_EncodePriority>
 80016fa:	4602      	mov	r2, r0
 80016fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff80 	bl	8001608 <__NVIC_SetPriority>
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff54 	bl	80015cc <__NVIC_EnableIRQ>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	e17f      	b.n	8001a3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2101      	movs	r1, #1
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8171 	beq.w	8001a36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d00b      	beq.n	8001774 <HAL_GPIO_Init+0x48>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d007      	beq.n	8001774 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001768:	2b11      	cmp	r3, #17
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b12      	cmp	r3, #18
 8001772:	d130      	bne.n	80017d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017aa:	2201      	movs	r2, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 0201 	and.w	r2, r3, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d118      	bne.n	8001814 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	f003 0201 	and.w	r2, r3, #1
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x128>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b12      	cmp	r3, #18
 8001852:	d123      	bne.n	800189c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	6939      	ldr	r1, [r7, #16]
 8001898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80ac 	beq.w	8001a36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	4b5f      	ldr	r3, [pc, #380]	; (8001a5c <HAL_GPIO_Init+0x330>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e2:	4a5e      	ldr	r2, [pc, #376]	; (8001a5c <HAL_GPIO_Init+0x330>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6613      	str	r3, [r2, #96]	; 0x60
 80018ea:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <HAL_GPIO_Init+0x330>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018f6:	4a5a      	ldr	r2, [pc, #360]	; (8001a60 <HAL_GPIO_Init+0x334>)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	3302      	adds	r3, #2
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001920:	d025      	beq.n	800196e <HAL_GPIO_Init+0x242>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4f      	ldr	r2, [pc, #316]	; (8001a64 <HAL_GPIO_Init+0x338>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01f      	beq.n	800196a <HAL_GPIO_Init+0x23e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4e      	ldr	r2, [pc, #312]	; (8001a68 <HAL_GPIO_Init+0x33c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d019      	beq.n	8001966 <HAL_GPIO_Init+0x23a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4d      	ldr	r2, [pc, #308]	; (8001a6c <HAL_GPIO_Init+0x340>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0x236>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <HAL_GPIO_Init+0x344>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00d      	beq.n	800195e <HAL_GPIO_Init+0x232>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4b      	ldr	r2, [pc, #300]	; (8001a74 <HAL_GPIO_Init+0x348>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d007      	beq.n	800195a <HAL_GPIO_Init+0x22e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4a      	ldr	r2, [pc, #296]	; (8001a78 <HAL_GPIO_Init+0x34c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_GPIO_Init+0x22a>
 8001952:	2306      	movs	r3, #6
 8001954:	e00c      	b.n	8001970 <HAL_GPIO_Init+0x244>
 8001956:	2307      	movs	r3, #7
 8001958:	e00a      	b.n	8001970 <HAL_GPIO_Init+0x244>
 800195a:	2305      	movs	r3, #5
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x244>
 800195e:	2304      	movs	r3, #4
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x244>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x244>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x244>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x244>
 800196e:	2300      	movs	r3, #0
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001980:	4937      	ldr	r1, [pc, #220]	; (8001a60 <HAL_GPIO_Init+0x334>)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_GPIO_Init+0x350>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019b2:	4a32      	ldr	r2, [pc, #200]	; (8001a7c <HAL_GPIO_Init+0x350>)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_GPIO_Init+0x350>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019dc:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <HAL_GPIO_Init+0x350>)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <HAL_GPIO_Init+0x350>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a06:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <HAL_GPIO_Init+0x350>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_GPIO_Init+0x350>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a30:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <HAL_GPIO_Init+0x350>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f47f ae78 	bne.w	800173c <HAL_GPIO_Init+0x10>
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000
 8001a64:	48000400 	.word	0x48000400
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	48000c00 	.word	0x48000c00
 8001a70:	48001000 	.word	0x48001000
 8001a74:	48001400 	.word	0x48001400
 8001a78:	48001800 	.word	0x48001800
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a90:	787b      	ldrb	r3, [r7, #1]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	041a      	lsls	r2, r3, #16
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43d9      	mvns	r1, r3
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	619a      	str	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fe2a 	bl	800075c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40010400 	.word	0x40010400

08001b14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40007000 	.word	0x40007000

08001b30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b3e:	d130      	bne.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b4c:	d038      	beq.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b56:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2232      	movs	r2, #50	; 0x32
 8001b64:	fb02 f303 	mul.w	r3, r2, r3
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9b      	lsrs	r3, r3, #18
 8001b70:	3301      	adds	r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b74:	e002      	b.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b88:	d102      	bne.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f2      	bne.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9c:	d110      	bne.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e00f      	b.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bae:	d007      	beq.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bb8:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	431bde83 	.word	0x431bde83

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e3d4      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bee:	4ba1      	ldr	r3, [pc, #644]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf8:	4b9e      	ldr	r3, [pc, #632]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80e4 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_RCC_OscConfig+0x4a>
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	f040 808b 	bne.w	8001d34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	f040 8087 	bne.w	8001d34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c26:	4b93      	ldr	r3, [pc, #588]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x62>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e3ac      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1a      	ldr	r2, [r3, #32]
 8001c42:	4b8c      	ldr	r3, [pc, #560]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <HAL_RCC_OscConfig+0x7c>
 8001c4e:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c56:	e005      	b.n	8001c64 <HAL_RCC_OscConfig+0x88>
 8001c58:	4b86      	ldr	r3, [pc, #536]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d223      	bcs.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fd71 	bl	8002754 <RCC_SetFlashLatencyFromMSIRange>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e38d      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c7c:	4b7d      	ldr	r3, [pc, #500]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a7c      	ldr	r2, [pc, #496]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b7a      	ldr	r3, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4977      	ldr	r1, [pc, #476]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c9a:	4b76      	ldr	r3, [pc, #472]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	4972      	ldr	r1, [pc, #456]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
 8001cae:	e025      	b.n	8001cfc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb0:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a6f      	ldr	r2, [pc, #444]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b6d      	ldr	r3, [pc, #436]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	496a      	ldr	r1, [pc, #424]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cce:	4b69      	ldr	r3, [pc, #420]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	4965      	ldr	r1, [pc, #404]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fd31 	bl	8002754 <RCC_SetFlashLatencyFromMSIRange>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e34d      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cfc:	f000 fc36 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b5c      	ldr	r3, [pc, #368]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	495a      	ldr	r1, [pc, #360]	; (8001e78 <HAL_RCC_OscConfig+0x29c>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <HAL_RCC_OscConfig+0x2a0>)
 8001d1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d1c:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <HAL_RCC_OscConfig+0x2a4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fdef 	bl	8000904 <HAL_InitTick>
 8001d26:	4603      	mov	r3, r0
 8001d28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d052      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	e331      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d032      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d3c:	4b4d      	ldr	r3, [pc, #308]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a4c      	ldr	r2, [pc, #304]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fc02 	bl	8001550 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d50:	f7ff fbfe 	bl	8001550 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e31a      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d62:	4b44      	ldr	r3, [pc, #272]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a40      	ldr	r2, [pc, #256]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	493b      	ldr	r1, [pc, #236]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8c:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	4936      	ldr	r1, [pc, #216]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
 8001da0:	e01a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001da2:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a33      	ldr	r2, [pc, #204]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dae:	f7ff fbcf 	bl	8001550 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db6:	f7ff fbcb 	bl	8001550 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e2e7      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1da>
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d074      	beq.n	8001ece <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x21a>
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d10e      	bne.n	8001e0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d10b      	bne.n	8001e0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d064      	beq.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d160      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e2c4      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x24a>
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e01d      	b.n	8001e62 <HAL_RCC_OscConfig+0x286>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e2e:	d10c      	bne.n	8001e4a <HAL_RCC_OscConfig+0x26e>
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e00b      	b.n	8001e62 <HAL_RCC_OscConfig+0x286>
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <HAL_RCC_OscConfig+0x298>)
 8001e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d01c      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb71 	bl	8001550 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e70:	e011      	b.n	8001e96 <HAL_RCC_OscConfig+0x2ba>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08006f64 	.word	0x08006f64
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fb64 	bl	8001550 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e280      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e96:	4baf      	ldr	r3, [pc, #700]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x2a8>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fb54 	bl	8001550 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff fb50 	bl	8001550 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e26c      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ebe:	4ba5      	ldr	r3, [pc, #660]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x2d0>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d060      	beq.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x310>
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d119      	bne.n	8001f1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d116      	bne.n	8001f1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eec:	4b99      	ldr	r3, [pc, #612]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_OscConfig+0x328>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e249      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b93      	ldr	r3, [pc, #588]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	4990      	ldr	r1, [pc, #576]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f18:	e040      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d023      	beq.n	8001f6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f22:	4b8c      	ldr	r3, [pc, #560]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a8b      	ldr	r2, [pc, #556]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fb0f 	bl	8001550 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff fb0b 	bl	8001550 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e227      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f48:	4b82      	ldr	r3, [pc, #520]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	497c      	ldr	r1, [pc, #496]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e018      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b7a      	ldr	r3, [pc, #488]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a79      	ldr	r2, [pc, #484]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff faeb 	bl	8001550 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fae7 	bl	8001550 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e203      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f90:	4b70      	ldr	r3, [pc, #448]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03c      	beq.n	8002022 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01c      	beq.n	8001fea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb0:	4b68      	ldr	r3, [pc, #416]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb6:	4a67      	ldr	r2, [pc, #412]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff fac6 	bl	8001550 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff fac2 	bl	8001550 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1de      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fda:	4b5e      	ldr	r3, [pc, #376]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ef      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x3ec>
 8001fe8:	e01b      	b.n	8002022 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fea:	4b5a      	ldr	r3, [pc, #360]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff0:	4a58      	ldr	r2, [pc, #352]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffa:	f7ff faa9 	bl	8001550 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002002:	f7ff faa5 	bl	8001550 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1c1      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002014:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8002016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ef      	bne.n	8002002 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80a6 	beq.w	800217c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002034:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10d      	bne.n	800205c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	4b44      	ldr	r3, [pc, #272]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	4a43      	ldr	r2, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	; 0x58
 800204c:	4b41      	ldr	r3, [pc, #260]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002058:	2301      	movs	r3, #1
 800205a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205c:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_RCC_OscConfig+0x57c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d118      	bne.n	800209a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002068:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <HAL_RCC_OscConfig+0x57c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a3a      	ldr	r2, [pc, #232]	; (8002158 <HAL_RCC_OscConfig+0x57c>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002074:	f7ff fa6c 	bl	8001550 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207c:	f7ff fa68 	bl	8001550 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e184      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208e:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_RCC_OscConfig+0x57c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4d8>
 80020a2:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	4a2a      	ldr	r2, [pc, #168]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b2:	e024      	b.n	80020fe <HAL_RCC_OscConfig+0x522>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d110      	bne.n	80020de <HAL_RCC_OscConfig+0x502>
 80020bc:	4b25      	ldr	r3, [pc, #148]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	4a24      	ldr	r2, [pc, #144]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020cc:	4b21      	ldr	r3, [pc, #132]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	4a20      	ldr	r2, [pc, #128]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020dc:	e00f      	b.n	80020fe <HAL_RCC_OscConfig+0x522>
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	4a17      	ldr	r2, [pc, #92]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 80020f6:	f023 0304 	bic.w	r3, r3, #4
 80020fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d016      	beq.n	8002134 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7ff fa23 	bl	8001550 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff fa1f 	bl	8001550 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e139      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_OscConfig+0x578>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0ed      	beq.n	800210e <HAL_RCC_OscConfig+0x532>
 8002132:	e01a      	b.n	800216a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7ff fa0c 	bl	8001550 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800213a:	e00f      	b.n	800215c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213c:	f7ff fa08 	bl	8001550 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d906      	bls.n	800215c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e122      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800215c:	4b90      	ldr	r3, [pc, #576]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e8      	bne.n	800213c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800216a:	7ffb      	ldrb	r3, [r7, #31]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	4a8a      	ldr	r2, [pc, #552]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8108 	beq.w	8002396 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	2b02      	cmp	r3, #2
 800218c:	f040 80d0 	bne.w	8002330 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002190:	4b83      	ldr	r3, [pc, #524]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d130      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	3b01      	subs	r3, #1
 80021b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d127      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d11f      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021d0:	2a07      	cmp	r2, #7
 80021d2:	bf14      	ite	ne
 80021d4:	2201      	movne	r2, #1
 80021d6:	2200      	moveq	r2, #0
 80021d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021da:	4293      	cmp	r3, r2
 80021dc:	d113      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d109      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	3b01      	subs	r3, #1
 8002200:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d06e      	beq.n	80022e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d069      	beq.n	80022e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800220c:	4b64      	ldr	r3, [pc, #400]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d105      	bne.n	8002224 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002218:	4b61      	ldr	r3, [pc, #388]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b7      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002228:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a5c      	ldr	r2, [pc, #368]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 800222e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002232:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002234:	f7ff f98c 	bl	8001550 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7ff f988 	bl	8001550 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e0a4      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b54      	ldr	r3, [pc, #336]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225a:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	4b51      	ldr	r3, [pc, #324]	; (80023a4 <HAL_RCC_OscConfig+0x7c8>)
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800226a:	3a01      	subs	r2, #1
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	4311      	orrs	r1, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002274:	0212      	lsls	r2, r2, #8
 8002276:	4311      	orrs	r1, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800227c:	0852      	lsrs	r2, r2, #1
 800227e:	3a01      	subs	r2, #1
 8002280:	0552      	lsls	r2, r2, #21
 8002282:	4311      	orrs	r1, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002288:	0852      	lsrs	r2, r2, #1
 800228a:	3a01      	subs	r2, #1
 800228c:	0652      	lsls	r2, r2, #25
 800228e:	4311      	orrs	r1, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002294:	0912      	lsrs	r2, r2, #4
 8002296:	0452      	lsls	r2, r2, #17
 8002298:	430a      	orrs	r2, r1
 800229a:	4941      	ldr	r1, [pc, #260]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022a0:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a3e      	ldr	r2, [pc, #248]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 80022a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022ac:	4b3c      	ldr	r3, [pc, #240]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a3b      	ldr	r2, [pc, #236]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 80022b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022b8:	f7ff f94a 	bl	8001550 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff f946 	bl	8001550 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e062      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d2:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022de:	e05a      	b.n	8002396 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e059      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d152      	bne.n	8002396 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2a      	ldr	r2, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002306:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002308:	f7ff f922 	bl	8001550 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7ff f91e 	bl	8001550 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e03a      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x734>
 800232e:	e032      	b.n	8002396 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d02d      	beq.n	8002392 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 800233c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002340:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800234e:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002354:	f023 0303 	bic.w	r3, r3, #3
 8002358:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002360:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002368:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7ff f8f1 	bl	8001550 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7ff f8ed 	bl	8001550 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e009      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_RCC_OscConfig+0x7c4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x796>
 8002390:	e001      	b.n	8002396 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000
 80023a4:	f99d808c 	.word	0xf99d808c

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0c8      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b66      	ldr	r3, [pc, #408]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d910      	bls.n	80023ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b63      	ldr	r3, [pc, #396]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	4961      	ldr	r1, [pc, #388]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b0      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d04c      	beq.n	8002492 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002400:	4b56      	ldr	r3, [pc, #344]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d121      	bne.n	8002450 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e09e      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d107      	bne.n	8002428 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002418:	4b50      	ldr	r3, [pc, #320]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d115      	bne.n	8002450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e092      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002430:	4b4a      	ldr	r3, [pc, #296]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e086      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002440:	4b46      	ldr	r3, [pc, #280]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e07e      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 0203 	bic.w	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	493f      	ldr	r1, [pc, #252]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002462:	f7ff f875 	bl	8001550 <HAL_GetTick>
 8002466:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002468:	e00a      	b.n	8002480 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246a:	f7ff f871 	bl	8001550 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e066      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 020c 	and.w	r2, r3, #12
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	429a      	cmp	r2, r3
 8002490:	d1eb      	bne.n	800246a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249e:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	492c      	ldr	r1, [pc, #176]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d210      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0207 	bic.w	r2, r3, #7
 80024c6:	4924      	ldr	r1, [pc, #144]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b22      	ldr	r3, [pc, #136]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e036      	b.n	800254e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4918      	ldr	r1, [pc, #96]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4910      	ldr	r1, [pc, #64]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800251e:	f000 f825 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_RCC_ClockConfig+0x1b4>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	490c      	ldr	r1, [pc, #48]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	fa22 f303 	lsr.w	r3, r2, r3
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe f9de 	bl	8000904 <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
 800254a:	72fb      	strb	r3, [r7, #11]

  return status;
 800254c:	7afb      	ldrb	r3, [r7, #11]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40022000 	.word	0x40022000
 800255c:	40021000 	.word	0x40021000
 8002560:	08006f64 	.word	0x08006f64
 8002564:	20000000 	.word	0x20000000
 8002568:	20000004 	.word	0x20000004

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800257a:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002584:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d121      	bne.n	80025de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d11e      	bne.n	80025de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025a0:	4b34      	ldr	r3, [pc, #208]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025ac:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	e005      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025c8:	4a2b      	ldr	r2, [pc, #172]	; (8002678 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d102      	bne.n	80025ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_GetSysClockFreq+0x110>)
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	e004      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_GetSysClockFreq+0x110>)
 80025f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b0c      	cmp	r3, #12
 80025f8:	d134      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0xa6>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d003      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0xac>
 8002610:	e005      	b.n	800261e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_RCC_GetSysClockFreq+0x110>)
 8002614:	617b      	str	r3, [r7, #20]
      break;
 8002616:	e005      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <HAL_RCC_GetSysClockFreq+0x110>)
 800261a:	617b      	str	r3, [r7, #20]
      break;
 800261c:	e002      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	617b      	str	r3, [r7, #20]
      break;
 8002622:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	3301      	adds	r3, #1
 8002630:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	fb02 f203 	mul.w	r2, r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_RCC_GetSysClockFreq+0x108>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	0e5b      	lsrs	r3, r3, #25
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	3301      	adds	r3, #1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002664:	69bb      	ldr	r3, [r7, #24]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	08006f7c 	.word	0x08006f7c
 800267c:	00f42400 	.word	0x00f42400

08002680 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800269c:	f7ff fff0 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4904      	ldr	r1, [pc, #16]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08006f74 	.word	0x08006f74

080026c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026c8:	f7ff ffda 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0adb      	lsrs	r3, r3, #11
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4904      	ldr	r1, [pc, #16]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08006f74 	.word	0x08006f74

080026f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	220f      	movs	r2, #15
 80026fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0203 	and.w	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <HAL_RCC_GetClockConfig+0x60>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0207 	and.w	r2, r3, #7
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	601a      	str	r2, [r3, #0]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40022000 	.word	0x40022000

08002754 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800276c:	f7ff f9d2 	bl	8001b14 <HAL_PWREx_GetVoltageRange>
 8002770:	6178      	str	r0, [r7, #20]
 8002772:	e014      	b.n	800279e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	4a24      	ldr	r2, [pc, #144]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800277a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277e:	6593      	str	r3, [r2, #88]	; 0x58
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800278c:	f7ff f9c2 	bl	8001b14 <HAL_PWREx_GetVoltageRange>
 8002790:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	4a1d      	ldr	r2, [pc, #116]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a4:	d10b      	bne.n	80027be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b80      	cmp	r3, #128	; 0x80
 80027aa:	d919      	bls.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2ba0      	cmp	r3, #160	; 0xa0
 80027b0:	d902      	bls.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027b2:	2302      	movs	r3, #2
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	e013      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027b8:	2301      	movs	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	e010      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d902      	bls.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027c4:	2303      	movs	r3, #3
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	e00a      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d102      	bne.n	80027d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027d0:	2302      	movs	r3, #2
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	e004      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b70      	cmp	r3, #112	; 0x70
 80027da:	d101      	bne.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027dc:	2301      	movs	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 0207 	bic.w	r2, r3, #7
 80027e8:	4909      	ldr	r1, [pc, #36]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d001      	beq.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	40022000 	.word	0x40022000

08002814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800281c:	2300      	movs	r3, #0
 800281e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002820:	2300      	movs	r3, #0
 8002822:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800282c:	2b00      	cmp	r3, #0
 800282e:	d041      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002834:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002838:	d02a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800283a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800283e:	d824      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002840:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002844:	d008      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002846:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800284a:	d81e      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002854:	d010      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002856:	e018      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002858:	4b86      	ldr	r3, [pc, #536]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a85      	ldr	r2, [pc, #532]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002864:	e015      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fabb 	bl	8002de8 <RCCEx_PLLSAI1_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002876:	e00c      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3320      	adds	r3, #32
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fba6 	bl	8002fd0 <RCCEx_PLLSAI2_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002888:	e003      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	74fb      	strb	r3, [r7, #19]
      break;
 800288e:	e000      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10b      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002898:	4b76      	ldr	r3, [pc, #472]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a6:	4973      	ldr	r1, [pc, #460]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ae:	e001      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d041      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028c8:	d02a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028ce:	d824      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028d4:	d008      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028da:	d81e      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e4:	d010      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028e6:	e018      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028e8:	4b62      	ldr	r3, [pc, #392]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a61      	ldr	r2, [pc, #388]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028f4:	e015      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 fa73 	bl	8002de8 <RCCEx_PLLSAI1_Config>
 8002902:	4603      	mov	r3, r0
 8002904:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002906:	e00c      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3320      	adds	r3, #32
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fb5e 	bl	8002fd0 <RCCEx_PLLSAI2_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002918:	e003      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	74fb      	strb	r3, [r7, #19]
      break;
 800291e:	e000      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10b      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002928:	4b52      	ldr	r3, [pc, #328]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002936:	494f      	ldr	r1, [pc, #316]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800293e:	e001      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80a0 	beq.w	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296c:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	4a40      	ldr	r2, [pc, #256]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002976:	6593      	str	r3, [r2, #88]	; 0x58
 8002978:	4b3e      	ldr	r3, [pc, #248]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002984:	2301      	movs	r3, #1
 8002986:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002988:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a3a      	ldr	r2, [pc, #232]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800298e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002992:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002994:	f7fe fddc 	bl	8001550 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800299a:	e009      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299c:	f7fe fdd8 	bl	8001550 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d902      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	74fb      	strb	r3, [r7, #19]
        break;
 80029ae:	e005      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029b0:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ef      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d15c      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01f      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d019      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029e0:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029ec:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a0c:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fd97 	bl	8001550 <HAL_GetTick>
 8002a22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a24:	e00b      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fe fd93 	bl	8001550 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d902      	bls.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	74fb      	strb	r3, [r7, #19]
            break;
 8002a3c:	e006      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0ec      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a62:	4904      	ldr	r1, [pc, #16]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a6a:	e009      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	74bb      	strb	r3, [r7, #18]
 8002a70:	e006      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a80:	7c7b      	ldrb	r3, [r7, #17]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d105      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a86:	4b9e      	ldr	r3, [pc, #632]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	4a9d      	ldr	r2, [pc, #628]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a9e:	4b98      	ldr	r3, [pc, #608]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f023 0203 	bic.w	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	4994      	ldr	r1, [pc, #592]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac0:	4b8f      	ldr	r3, [pc, #572]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f023 020c 	bic.w	r2, r3, #12
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	498c      	ldr	r1, [pc, #560]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ae2:	4b87      	ldr	r3, [pc, #540]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	4983      	ldr	r1, [pc, #524]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	497b      	ldr	r1, [pc, #492]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b26:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b34:	4972      	ldr	r1, [pc, #456]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b48:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	496a      	ldr	r1, [pc, #424]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b6a:	4b65      	ldr	r3, [pc, #404]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	4961      	ldr	r1, [pc, #388]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b8c:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	4959      	ldr	r1, [pc, #356]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bae:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbc:	4950      	ldr	r1, [pc, #320]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	4948      	ldr	r1, [pc, #288]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf2:	4b43      	ldr	r3, [pc, #268]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c00:	493f      	ldr	r1, [pc, #252]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d028      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c14:	4b3a      	ldr	r3, [pc, #232]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c22:	4937      	ldr	r1, [pc, #220]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c32:	d106      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c34:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c3e:	60d3      	str	r3, [r2, #12]
 8002c40:	e011      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c4a:	d10c      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f8c8 	bl	8002de8 <RCCEx_PLLSAI1_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c5c:	7cfb      	ldrb	r3, [r7, #19]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c62:	7cfb      	ldrb	r3, [r7, #19]
 8002c64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d028      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c72:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	491f      	ldr	r1, [pc, #124]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	4a1a      	ldr	r2, [pc, #104]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9c:	60d3      	str	r3, [r2, #12]
 8002c9e:	e011      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f899 	bl	8002de8 <RCCEx_PLLSAI1_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d02b      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cde:	4908      	ldr	r1, [pc, #32]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cee:	d109      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a02      	ldr	r2, [pc, #8]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfa:	60d3      	str	r3, [r2, #12]
 8002cfc:	e014      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2101      	movs	r1, #1
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 f867 	bl	8002de8 <RCCEx_PLLSAI1_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d02f      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d34:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d42:	4928      	ldr	r1, [pc, #160]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d52:	d10d      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3304      	adds	r3, #4
 8002d58:	2102      	movs	r1, #2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f844 	bl	8002de8 <RCCEx_PLLSAI1_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d014      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	74bb      	strb	r3, [r7, #18]
 8002d6e:	e011      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3320      	adds	r3, #32
 8002d7e:	2102      	movs	r1, #2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 f925 	bl	8002fd0 <RCCEx_PLLSAI2_Config>
 8002d86:	4603      	mov	r3, r0
 8002d88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d8a:	7cfb      	ldrb	r3, [r7, #19]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dae:	490d      	ldr	r1, [pc, #52]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd2:	4904      	ldr	r1, [pc, #16]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002dda:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000

08002de8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002df6:	4b75      	ldr	r3, [pc, #468]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d018      	beq.n	8002e34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e02:	4b72      	ldr	r3, [pc, #456]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0203 	and.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d10d      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
       ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e1a:	4b6c      	ldr	r3, [pc, #432]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
       ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d047      	beq.n	8002ebe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e044      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d018      	beq.n	8002e6e <RCCEx_PLLSAI1_Config+0x86>
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d825      	bhi.n	8002e8c <RCCEx_PLLSAI1_Config+0xa4>
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d002      	beq.n	8002e4a <RCCEx_PLLSAI1_Config+0x62>
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d009      	beq.n	8002e5c <RCCEx_PLLSAI1_Config+0x74>
 8002e48:	e020      	b.n	8002e8c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e4a:	4b60      	ldr	r3, [pc, #384]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d11d      	bne.n	8002e92 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5a:	e01a      	b.n	8002e92 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e5c:	4b5b      	ldr	r3, [pc, #364]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d116      	bne.n	8002e96 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6c:	e013      	b.n	8002e96 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e6e:	4b57      	ldr	r3, [pc, #348]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10f      	bne.n	8002e9a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e7a:	4b54      	ldr	r3, [pc, #336]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e8a:	e006      	b.n	8002e9a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e90:	e004      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e92:	bf00      	nop
 8002e94:	e002      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e96:	bf00      	nop
 8002e98:	e000      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10d      	bne.n	8002ebe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6819      	ldr	r1, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	4944      	ldr	r1, [pc, #272]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d17d      	bne.n	8002fc0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ec4:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a40      	ldr	r2, [pc, #256]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ece:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed0:	f7fe fb3e 	bl	8001550 <HAL_GetTick>
 8002ed4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ed6:	e009      	b.n	8002eec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ed8:	f7fe fb3a 	bl	8001550 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d902      	bls.n	8002eec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	73fb      	strb	r3, [r7, #15]
        break;
 8002eea:	e005      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eec:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ef      	bne.n	8002ed8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d160      	bne.n	8002fc0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d111      	bne.n	8002f28 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f04:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6892      	ldr	r2, [r2, #8]
 8002f14:	0211      	lsls	r1, r2, #8
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68d2      	ldr	r2, [r2, #12]
 8002f1a:	0912      	lsrs	r2, r2, #4
 8002f1c:	0452      	lsls	r2, r2, #17
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	492a      	ldr	r1, [pc, #168]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	610b      	str	r3, [r1, #16]
 8002f26:	e027      	b.n	8002f78 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d112      	bne.n	8002f54 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6892      	ldr	r2, [r2, #8]
 8002f3e:	0211      	lsls	r1, r2, #8
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6912      	ldr	r2, [r2, #16]
 8002f44:	0852      	lsrs	r2, r2, #1
 8002f46:	3a01      	subs	r2, #1
 8002f48:	0552      	lsls	r2, r2, #21
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	491f      	ldr	r1, [pc, #124]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	610b      	str	r3, [r1, #16]
 8002f52:	e011      	b.n	8002f78 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f54:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6892      	ldr	r2, [r2, #8]
 8002f64:	0211      	lsls	r1, r2, #8
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6952      	ldr	r2, [r2, #20]
 8002f6a:	0852      	lsrs	r2, r2, #1
 8002f6c:	3a01      	subs	r2, #1
 8002f6e:	0652      	lsls	r2, r2, #25
 8002f70:	430a      	orrs	r2, r1
 8002f72:	4916      	ldr	r1, [pc, #88]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe fae4 	bl	8001550 <HAL_GetTick>
 8002f88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f8a:	e009      	b.n	8002fa0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f8c:	f7fe fae0 	bl	8001550 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d902      	bls.n	8002fa0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f9e:	e005      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ef      	beq.n	8002f8c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	4904      	ldr	r1, [pc, #16]	; (8002fcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fde:	4b6a      	ldr	r3, [pc, #424]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d018      	beq.n	800301c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fea:	4b67      	ldr	r3, [pc, #412]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0203 	and.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d10d      	bne.n	8003016 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003002:	4b61      	ldr	r3, [pc, #388]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
       ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d047      	beq.n	80030a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
 800301a:	e044      	b.n	80030a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d018      	beq.n	8003056 <RCCEx_PLLSAI2_Config+0x86>
 8003024:	2b03      	cmp	r3, #3
 8003026:	d825      	bhi.n	8003074 <RCCEx_PLLSAI2_Config+0xa4>
 8003028:	2b01      	cmp	r3, #1
 800302a:	d002      	beq.n	8003032 <RCCEx_PLLSAI2_Config+0x62>
 800302c:	2b02      	cmp	r3, #2
 800302e:	d009      	beq.n	8003044 <RCCEx_PLLSAI2_Config+0x74>
 8003030:	e020      	b.n	8003074 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003032:	4b55      	ldr	r3, [pc, #340]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d11d      	bne.n	800307a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003042:	e01a      	b.n	800307a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003044:	4b50      	ldr	r3, [pc, #320]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d116      	bne.n	800307e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003054:	e013      	b.n	800307e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003056:	4b4c      	ldr	r3, [pc, #304]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003062:	4b49      	ldr	r3, [pc, #292]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003072:	e006      	b.n	8003082 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      break;
 8003078:	e004      	b.n	8003084 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800307a:	bf00      	nop
 800307c:	e002      	b.n	8003084 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003082:	bf00      	nop
    }

    if(status == HAL_OK)
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10d      	bne.n	80030a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800308a:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	3b01      	subs	r3, #1
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	430b      	orrs	r3, r1
 80030a0:	4939      	ldr	r1, [pc, #228]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d167      	bne.n	800317c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030ac:	4b36      	ldr	r3, [pc, #216]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a35      	ldr	r2, [pc, #212]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b8:	f7fe fa4a 	bl	8001550 <HAL_GetTick>
 80030bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030be:	e009      	b.n	80030d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030c0:	f7fe fa46 	bl	8001550 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d902      	bls.n	80030d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	73fb      	strb	r3, [r7, #15]
        break;
 80030d2:	e005      	b.n	80030e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030d4:	4b2c      	ldr	r3, [pc, #176]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ef      	bne.n	80030c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d14a      	bne.n	800317c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d111      	bne.n	8003110 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030ec:	4b26      	ldr	r3, [pc, #152]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6892      	ldr	r2, [r2, #8]
 80030fc:	0211      	lsls	r1, r2, #8
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68d2      	ldr	r2, [r2, #12]
 8003102:	0912      	lsrs	r2, r2, #4
 8003104:	0452      	lsls	r2, r2, #17
 8003106:	430a      	orrs	r2, r1
 8003108:	491f      	ldr	r1, [pc, #124]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310a:	4313      	orrs	r3, r2
 800310c:	614b      	str	r3, [r1, #20]
 800310e:	e011      	b.n	8003134 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003118:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6892      	ldr	r2, [r2, #8]
 8003120:	0211      	lsls	r1, r2, #8
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6912      	ldr	r2, [r2, #16]
 8003126:	0852      	lsrs	r2, r2, #1
 8003128:	3a01      	subs	r2, #1
 800312a:	0652      	lsls	r2, r2, #25
 800312c:	430a      	orrs	r2, r1
 800312e:	4916      	ldr	r1, [pc, #88]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a13      	ldr	r2, [pc, #76]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003140:	f7fe fa06 	bl	8001550 <HAL_GetTick>
 8003144:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003146:	e009      	b.n	800315c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003148:	f7fe fa02 	bl	8001550 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d902      	bls.n	800315c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	73fb      	strb	r3, [r7, #15]
          break;
 800315a:	e005      	b.n	8003168 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ef      	beq.n	8003148 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	4904      	ldr	r1, [pc, #16]	; (8003188 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003178:	4313      	orrs	r3, r2
 800317a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e049      	b.n	8003232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f841 	bl	800323a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f000 f9f8 	bl	80035c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d001      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e04f      	b.n	8003308 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a23      	ldr	r2, [pc, #140]	; (8003314 <HAL_TIM_Base_Start_IT+0xc4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01d      	beq.n	80032c6 <HAL_TIM_Base_Start_IT+0x76>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d018      	beq.n	80032c6 <HAL_TIM_Base_Start_IT+0x76>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <HAL_TIM_Base_Start_IT+0xc8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_TIM_Base_Start_IT+0x76>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1e      	ldr	r2, [pc, #120]	; (800331c <HAL_TIM_Base_Start_IT+0xcc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_TIM_Base_Start_IT+0x76>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <HAL_TIM_Base_Start_IT+0xd0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_TIM_Base_Start_IT+0x76>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <HAL_TIM_Base_Start_IT+0xd4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_TIM_Base_Start_IT+0x76>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_TIM_Base_Start_IT+0xd8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d115      	bne.n	80032f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	4b17      	ldr	r3, [pc, #92]	; (800332c <HAL_TIM_Base_Start_IT+0xdc>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b06      	cmp	r3, #6
 80032d6:	d015      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0xb4>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032de:	d011      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f0:	e008      	b.n	8003304 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e000      	b.n	8003306 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003304:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40000c00 	.word	0x40000c00
 8003324:	40013400 	.word	0x40013400
 8003328:	40014000 	.word	0x40014000
 800332c:	00010007 	.word	0x00010007

08003330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b02      	cmp	r3, #2
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0202 	mvn.w	r2, #2
 800335c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f905 	bl	8003582 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f8f7 	bl	800356e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f908 	bl	8003596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b04      	cmp	r3, #4
 8003398:	d122      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d11b      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0204 	mvn.w	r2, #4
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8db 	bl	8003582 <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f8cd 	bl	800356e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f8de 	bl	8003596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d122      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d11b      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0208 	mvn.w	r2, #8
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2204      	movs	r2, #4
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8b1 	bl	8003582 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8a3 	bl	800356e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f8b4 	bl	8003596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b10      	cmp	r3, #16
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0210 	mvn.w	r2, #16
 8003458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2208      	movs	r2, #8
 800345e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f887 	bl	8003582 <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f879 	bl	800356e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f88a 	bl	8003596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0201 	mvn.w	r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd f972 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	2b80      	cmp	r3, #128	; 0x80
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b80      	cmp	r3, #128	; 0x80
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f914 	bl	8003708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ee:	d10e      	bne.n	800350e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d107      	bne.n	800350e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f907 	bl	800371c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d10e      	bne.n	800353a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d107      	bne.n	800353a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f838 	bl	80035aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b20      	cmp	r3, #32
 8003546:	d10e      	bne.n	8003566 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b20      	cmp	r3, #32
 8003554:	d107      	bne.n	8003566 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0220 	mvn.w	r2, #32
 800355e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f8c7 	bl	80036f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a40      	ldr	r2, [pc, #256]	; (80036d4 <TIM_Base_SetConfig+0x114>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035de:	d00f      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3d      	ldr	r2, [pc, #244]	; (80036d8 <TIM_Base_SetConfig+0x118>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00b      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3c      	ldr	r2, [pc, #240]	; (80036dc <TIM_Base_SetConfig+0x11c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d007      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3b      	ldr	r2, [pc, #236]	; (80036e0 <TIM_Base_SetConfig+0x120>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3a      	ldr	r2, [pc, #232]	; (80036e4 <TIM_Base_SetConfig+0x124>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d108      	bne.n	8003612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2f      	ldr	r2, [pc, #188]	; (80036d4 <TIM_Base_SetConfig+0x114>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01f      	beq.n	800365a <TIM_Base_SetConfig+0x9a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d01b      	beq.n	800365a <TIM_Base_SetConfig+0x9a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <TIM_Base_SetConfig+0x118>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d017      	beq.n	800365a <TIM_Base_SetConfig+0x9a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a2b      	ldr	r2, [pc, #172]	; (80036dc <TIM_Base_SetConfig+0x11c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <TIM_Base_SetConfig+0x9a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <TIM_Base_SetConfig+0x120>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00f      	beq.n	800365a <TIM_Base_SetConfig+0x9a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a29      	ldr	r2, [pc, #164]	; (80036e4 <TIM_Base_SetConfig+0x124>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0x9a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <TIM_Base_SetConfig+0x128>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0x9a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a27      	ldr	r2, [pc, #156]	; (80036ec <TIM_Base_SetConfig+0x12c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0x9a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a26      	ldr	r2, [pc, #152]	; (80036f0 <TIM_Base_SetConfig+0x130>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <TIM_Base_SetConfig+0x114>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00f      	beq.n	80036b8 <TIM_Base_SetConfig+0xf8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <TIM_Base_SetConfig+0x124>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00b      	beq.n	80036b8 <TIM_Base_SetConfig+0xf8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <TIM_Base_SetConfig+0x128>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d007      	beq.n	80036b8 <TIM_Base_SetConfig+0xf8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a10      	ldr	r2, [pc, #64]	; (80036ec <TIM_Base_SetConfig+0x12c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <TIM_Base_SetConfig+0xf8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <TIM_Base_SetConfig+0x130>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d103      	bne.n	80036c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	615a      	str	r2, [r3, #20]
}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800
 80036e0:	40000c00 	.word	0x40000c00
 80036e4:	40013400 	.word	0x40013400
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400
 80036f0:	40014800 	.word	0x40014800

080036f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e040      	b.n	80037c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd f894 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	; 0x24
 800375c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8c0 	bl	80038f4 <UART_SetConfig>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e022      	b.n	80037c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fb3e 	bl	8003e08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800379a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fbc5 	bl	8003f4c <UART_CheckIdleState>
 80037c2:	4603      	mov	r3, r0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	f040 8082 	bne.w	80038ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_UART_Transmit+0x26>
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07a      	b.n	80038ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_UART_Transmit+0x38>
 8003800:	2302      	movs	r3, #2
 8003802:	e073      	b.n	80038ec <HAL_UART_Transmit+0x120>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2221      	movs	r2, #33	; 0x21
 8003818:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800381a:	f7fd fe99 	bl	8001550 <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003838:	d108      	bne.n	800384c <HAL_UART_Transmit+0x80>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d104      	bne.n	800384c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	e003      	b.n	8003854 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800385c:	e02d      	b.n	80038ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	2180      	movs	r1, #128	; 0x80
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fbb8 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e039      	b.n	80038ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10b      	bne.n	8003896 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	881a      	ldrh	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800388a:	b292      	uxth	r2, r2
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	3302      	adds	r3, #2
 8003892:	61bb      	str	r3, [r7, #24]
 8003894:	e008      	b.n	80038a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	b292      	uxth	r2, r2
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1cb      	bne.n	800385e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2140      	movs	r1, #64	; 0x40
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fb84 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e005      	b.n	80038ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
  }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f4:	b5b0      	push	{r4, r5, r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4313      	orrs	r3, r2
 8003916:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4bad      	ldr	r3, [pc, #692]	; (8003bd4 <UART_SetConfig+0x2e0>)
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	69f9      	ldr	r1, [r7, #28]
 8003928:	430b      	orrs	r3, r1
 800392a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4aa2      	ldr	r2, [pc, #648]	; (8003bd8 <UART_SetConfig+0x2e4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	4313      	orrs	r3, r2
 800395a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a99      	ldr	r2, [pc, #612]	; (8003bdc <UART_SetConfig+0x2e8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d121      	bne.n	80039be <UART_SetConfig+0xca>
 800397a:	4b99      	ldr	r3, [pc, #612]	; (8003be0 <UART_SetConfig+0x2ec>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b03      	cmp	r3, #3
 8003986:	d817      	bhi.n	80039b8 <UART_SetConfig+0xc4>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <UART_SetConfig+0x9c>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039ad 	.word	0x080039ad
 8003998:	080039a7 	.word	0x080039a7
 800399c:	080039b3 	.word	0x080039b3
 80039a0:	2301      	movs	r3, #1
 80039a2:	76fb      	strb	r3, [r7, #27]
 80039a4:	e0e7      	b.n	8003b76 <UART_SetConfig+0x282>
 80039a6:	2302      	movs	r3, #2
 80039a8:	76fb      	strb	r3, [r7, #27]
 80039aa:	e0e4      	b.n	8003b76 <UART_SetConfig+0x282>
 80039ac:	2304      	movs	r3, #4
 80039ae:	76fb      	strb	r3, [r7, #27]
 80039b0:	e0e1      	b.n	8003b76 <UART_SetConfig+0x282>
 80039b2:	2308      	movs	r3, #8
 80039b4:	76fb      	strb	r3, [r7, #27]
 80039b6:	e0de      	b.n	8003b76 <UART_SetConfig+0x282>
 80039b8:	2310      	movs	r3, #16
 80039ba:	76fb      	strb	r3, [r7, #27]
 80039bc:	e0db      	b.n	8003b76 <UART_SetConfig+0x282>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a88      	ldr	r2, [pc, #544]	; (8003be4 <UART_SetConfig+0x2f0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d132      	bne.n	8003a2e <UART_SetConfig+0x13a>
 80039c8:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <UART_SetConfig+0x2ec>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d828      	bhi.n	8003a28 <UART_SetConfig+0x134>
 80039d6:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <UART_SetConfig+0xe8>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a11 	.word	0x08003a11
 80039e0:	08003a29 	.word	0x08003a29
 80039e4:	08003a29 	.word	0x08003a29
 80039e8:	08003a29 	.word	0x08003a29
 80039ec:	08003a1d 	.word	0x08003a1d
 80039f0:	08003a29 	.word	0x08003a29
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003a29 	.word	0x08003a29
 80039fc:	08003a17 	.word	0x08003a17
 8003a00:	08003a29 	.word	0x08003a29
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003a29 	.word	0x08003a29
 8003a0c:	08003a23 	.word	0x08003a23
 8003a10:	2300      	movs	r3, #0
 8003a12:	76fb      	strb	r3, [r7, #27]
 8003a14:	e0af      	b.n	8003b76 <UART_SetConfig+0x282>
 8003a16:	2302      	movs	r3, #2
 8003a18:	76fb      	strb	r3, [r7, #27]
 8003a1a:	e0ac      	b.n	8003b76 <UART_SetConfig+0x282>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	76fb      	strb	r3, [r7, #27]
 8003a20:	e0a9      	b.n	8003b76 <UART_SetConfig+0x282>
 8003a22:	2308      	movs	r3, #8
 8003a24:	76fb      	strb	r3, [r7, #27]
 8003a26:	e0a6      	b.n	8003b76 <UART_SetConfig+0x282>
 8003a28:	2310      	movs	r3, #16
 8003a2a:	76fb      	strb	r3, [r7, #27]
 8003a2c:	e0a3      	b.n	8003b76 <UART_SetConfig+0x282>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6d      	ldr	r2, [pc, #436]	; (8003be8 <UART_SetConfig+0x2f4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d120      	bne.n	8003a7a <UART_SetConfig+0x186>
 8003a38:	4b69      	ldr	r3, [pc, #420]	; (8003be0 <UART_SetConfig+0x2ec>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a42:	2b30      	cmp	r3, #48	; 0x30
 8003a44:	d013      	beq.n	8003a6e <UART_SetConfig+0x17a>
 8003a46:	2b30      	cmp	r3, #48	; 0x30
 8003a48:	d814      	bhi.n	8003a74 <UART_SetConfig+0x180>
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d009      	beq.n	8003a62 <UART_SetConfig+0x16e>
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d810      	bhi.n	8003a74 <UART_SetConfig+0x180>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <UART_SetConfig+0x168>
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d006      	beq.n	8003a68 <UART_SetConfig+0x174>
 8003a5a:	e00b      	b.n	8003a74 <UART_SetConfig+0x180>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	76fb      	strb	r3, [r7, #27]
 8003a60:	e089      	b.n	8003b76 <UART_SetConfig+0x282>
 8003a62:	2302      	movs	r3, #2
 8003a64:	76fb      	strb	r3, [r7, #27]
 8003a66:	e086      	b.n	8003b76 <UART_SetConfig+0x282>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	76fb      	strb	r3, [r7, #27]
 8003a6c:	e083      	b.n	8003b76 <UART_SetConfig+0x282>
 8003a6e:	2308      	movs	r3, #8
 8003a70:	76fb      	strb	r3, [r7, #27]
 8003a72:	e080      	b.n	8003b76 <UART_SetConfig+0x282>
 8003a74:	2310      	movs	r3, #16
 8003a76:	76fb      	strb	r3, [r7, #27]
 8003a78:	e07d      	b.n	8003b76 <UART_SetConfig+0x282>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a5b      	ldr	r2, [pc, #364]	; (8003bec <UART_SetConfig+0x2f8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d120      	bne.n	8003ac6 <UART_SetConfig+0x1d2>
 8003a84:	4b56      	ldr	r3, [pc, #344]	; (8003be0 <UART_SetConfig+0x2ec>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a90:	d013      	beq.n	8003aba <UART_SetConfig+0x1c6>
 8003a92:	2bc0      	cmp	r3, #192	; 0xc0
 8003a94:	d814      	bhi.n	8003ac0 <UART_SetConfig+0x1cc>
 8003a96:	2b80      	cmp	r3, #128	; 0x80
 8003a98:	d009      	beq.n	8003aae <UART_SetConfig+0x1ba>
 8003a9a:	2b80      	cmp	r3, #128	; 0x80
 8003a9c:	d810      	bhi.n	8003ac0 <UART_SetConfig+0x1cc>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <UART_SetConfig+0x1b4>
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d006      	beq.n	8003ab4 <UART_SetConfig+0x1c0>
 8003aa6:	e00b      	b.n	8003ac0 <UART_SetConfig+0x1cc>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	76fb      	strb	r3, [r7, #27]
 8003aac:	e063      	b.n	8003b76 <UART_SetConfig+0x282>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	76fb      	strb	r3, [r7, #27]
 8003ab2:	e060      	b.n	8003b76 <UART_SetConfig+0x282>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	76fb      	strb	r3, [r7, #27]
 8003ab8:	e05d      	b.n	8003b76 <UART_SetConfig+0x282>
 8003aba:	2308      	movs	r3, #8
 8003abc:	76fb      	strb	r3, [r7, #27]
 8003abe:	e05a      	b.n	8003b76 <UART_SetConfig+0x282>
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	e057      	b.n	8003b76 <UART_SetConfig+0x282>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a49      	ldr	r2, [pc, #292]	; (8003bf0 <UART_SetConfig+0x2fc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d125      	bne.n	8003b1c <UART_SetConfig+0x228>
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <UART_SetConfig+0x2ec>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ade:	d017      	beq.n	8003b10 <UART_SetConfig+0x21c>
 8003ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae4:	d817      	bhi.n	8003b16 <UART_SetConfig+0x222>
 8003ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aea:	d00b      	beq.n	8003b04 <UART_SetConfig+0x210>
 8003aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af0:	d811      	bhi.n	8003b16 <UART_SetConfig+0x222>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <UART_SetConfig+0x20a>
 8003af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003afa:	d006      	beq.n	8003b0a <UART_SetConfig+0x216>
 8003afc:	e00b      	b.n	8003b16 <UART_SetConfig+0x222>
 8003afe:	2300      	movs	r3, #0
 8003b00:	76fb      	strb	r3, [r7, #27]
 8003b02:	e038      	b.n	8003b76 <UART_SetConfig+0x282>
 8003b04:	2302      	movs	r3, #2
 8003b06:	76fb      	strb	r3, [r7, #27]
 8003b08:	e035      	b.n	8003b76 <UART_SetConfig+0x282>
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	76fb      	strb	r3, [r7, #27]
 8003b0e:	e032      	b.n	8003b76 <UART_SetConfig+0x282>
 8003b10:	2308      	movs	r3, #8
 8003b12:	76fb      	strb	r3, [r7, #27]
 8003b14:	e02f      	b.n	8003b76 <UART_SetConfig+0x282>
 8003b16:	2310      	movs	r3, #16
 8003b18:	76fb      	strb	r3, [r7, #27]
 8003b1a:	e02c      	b.n	8003b76 <UART_SetConfig+0x282>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a2d      	ldr	r2, [pc, #180]	; (8003bd8 <UART_SetConfig+0x2e4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d125      	bne.n	8003b72 <UART_SetConfig+0x27e>
 8003b26:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <UART_SetConfig+0x2ec>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b34:	d017      	beq.n	8003b66 <UART_SetConfig+0x272>
 8003b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b3a:	d817      	bhi.n	8003b6c <UART_SetConfig+0x278>
 8003b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b40:	d00b      	beq.n	8003b5a <UART_SetConfig+0x266>
 8003b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b46:	d811      	bhi.n	8003b6c <UART_SetConfig+0x278>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <UART_SetConfig+0x260>
 8003b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b50:	d006      	beq.n	8003b60 <UART_SetConfig+0x26c>
 8003b52:	e00b      	b.n	8003b6c <UART_SetConfig+0x278>
 8003b54:	2300      	movs	r3, #0
 8003b56:	76fb      	strb	r3, [r7, #27]
 8003b58:	e00d      	b.n	8003b76 <UART_SetConfig+0x282>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	76fb      	strb	r3, [r7, #27]
 8003b5e:	e00a      	b.n	8003b76 <UART_SetConfig+0x282>
 8003b60:	2304      	movs	r3, #4
 8003b62:	76fb      	strb	r3, [r7, #27]
 8003b64:	e007      	b.n	8003b76 <UART_SetConfig+0x282>
 8003b66:	2308      	movs	r3, #8
 8003b68:	76fb      	strb	r3, [r7, #27]
 8003b6a:	e004      	b.n	8003b76 <UART_SetConfig+0x282>
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	76fb      	strb	r3, [r7, #27]
 8003b70:	e001      	b.n	8003b76 <UART_SetConfig+0x282>
 8003b72:	2310      	movs	r3, #16
 8003b74:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <UART_SetConfig+0x2e4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	f040 8087 	bne.w	8003c90 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b82:	7efb      	ldrb	r3, [r7, #27]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d837      	bhi.n	8003bf8 <UART_SetConfig+0x304>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0x29c>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bf9 	.word	0x08003bf9
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bf9 	.word	0x08003bf9
 8003ba0:	08003bc3 	.word	0x08003bc3
 8003ba4:	08003bf9 	.word	0x08003bf9
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003bf9 	.word	0x08003bf9
 8003bb0:	08003bcb 	.word	0x08003bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f7fe fd70 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003bb8:	6178      	str	r0, [r7, #20]
        break;
 8003bba:	e022      	b.n	8003c02 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <UART_SetConfig+0x300>)
 8003bbe:	617b      	str	r3, [r7, #20]
        break;
 8003bc0:	e01f      	b.n	8003c02 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc2:	f7fe fcd3 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8003bc6:	6178      	str	r0, [r7, #20]
        break;
 8003bc8:	e01b      	b.n	8003c02 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bce:	617b      	str	r3, [r7, #20]
        break;
 8003bd0:	e017      	b.n	8003c02 <UART_SetConfig+0x30e>
 8003bd2:	bf00      	nop
 8003bd4:	efff69f3 	.word	0xefff69f3
 8003bd8:	40008000 	.word	0x40008000
 8003bdc:	40013800 	.word	0x40013800
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40004400 	.word	0x40004400
 8003be8:	40004800 	.word	0x40004800
 8003bec:	40004c00 	.word	0x40004c00
 8003bf0:	40005000 	.word	0x40005000
 8003bf4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	76bb      	strb	r3, [r7, #26]
        break;
 8003c00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80f1 	beq.w	8003dec <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	4413      	add	r3, r2
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d305      	bcc.n	8003c26 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d902      	bls.n	8003c2c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	76bb      	strb	r3, [r7, #26]
 8003c2a:	e0df      	b.n	8003dec <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	020b      	lsls	r3, r1, #8
 8003c3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c42:	0202      	lsls	r2, r0, #8
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	6849      	ldr	r1, [r1, #4]
 8003c48:	0849      	lsrs	r1, r1, #1
 8003c4a:	4608      	mov	r0, r1
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	1814      	adds	r4, r2, r0
 8003c52:	eb43 0501 	adc.w	r5, r3, r1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	4620      	mov	r0, r4
 8003c62:	4629      	mov	r1, r5
 8003c64:	f7fc fab4 	bl	80001d0 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c76:	d308      	bcc.n	8003c8a <UART_SetConfig+0x396>
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7e:	d204      	bcs.n	8003c8a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	60da      	str	r2, [r3, #12]
 8003c88:	e0b0      	b.n	8003dec <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	76bb      	strb	r3, [r7, #26]
 8003c8e:	e0ad      	b.n	8003dec <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c98:	d15c      	bne.n	8003d54 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003c9a:	7efb      	ldrb	r3, [r7, #27]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d828      	bhi.n	8003cf2 <UART_SetConfig+0x3fe>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x3b4>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003cd5 	.word	0x08003cd5
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003cf3 	.word	0x08003cf3
 8003cb8:	08003ce3 	.word	0x08003ce3
 8003cbc:	08003cf3 	.word	0x08003cf3
 8003cc0:	08003cf3 	.word	0x08003cf3
 8003cc4:	08003cf3 	.word	0x08003cf3
 8003cc8:	08003ceb 	.word	0x08003ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe fce4 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	6178      	str	r0, [r7, #20]
        break;
 8003cd2:	e013      	b.n	8003cfc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd4:	f7fe fcf6 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 8003cd8:	6178      	str	r0, [r7, #20]
        break;
 8003cda:	e00f      	b.n	8003cfc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cdc:	4b49      	ldr	r3, [pc, #292]	; (8003e04 <UART_SetConfig+0x510>)
 8003cde:	617b      	str	r3, [r7, #20]
        break;
 8003ce0:	e00c      	b.n	8003cfc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce2:	f7fe fc43 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8003ce6:	6178      	str	r0, [r7, #20]
        break;
 8003ce8:	e008      	b.n	8003cfc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cee:	617b      	str	r3, [r7, #20]
        break;
 8003cf0:	e004      	b.n	8003cfc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	76bb      	strb	r3, [r7, #26]
        break;
 8003cfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d074      	beq.n	8003dec <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005a      	lsls	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b0f      	cmp	r3, #15
 8003d1e:	d916      	bls.n	8003d4e <UART_SetConfig+0x45a>
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d26:	d212      	bcs.n	8003d4e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f023 030f 	bic.w	r3, r3, #15
 8003d30:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	89fb      	ldrh	r3, [r7, #14]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	89fa      	ldrh	r2, [r7, #14]
 8003d4a:	60da      	str	r2, [r3, #12]
 8003d4c:	e04e      	b.n	8003dec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	76bb      	strb	r3, [r7, #26]
 8003d52:	e04b      	b.n	8003dec <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d54:	7efb      	ldrb	r3, [r7, #27]
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d827      	bhi.n	8003daa <UART_SetConfig+0x4b6>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <UART_SetConfig+0x46c>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d85 	.word	0x08003d85
 8003d64:	08003d8d 	.word	0x08003d8d
 8003d68:	08003d95 	.word	0x08003d95
 8003d6c:	08003dab 	.word	0x08003dab
 8003d70:	08003d9b 	.word	0x08003d9b
 8003d74:	08003dab 	.word	0x08003dab
 8003d78:	08003dab 	.word	0x08003dab
 8003d7c:	08003dab 	.word	0x08003dab
 8003d80:	08003da3 	.word	0x08003da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d84:	f7fe fc88 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003d88:	6178      	str	r0, [r7, #20]
        break;
 8003d8a:	e013      	b.n	8003db4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d8c:	f7fe fc9a 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 8003d90:	6178      	str	r0, [r7, #20]
        break;
 8003d92:	e00f      	b.n	8003db4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d94:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <UART_SetConfig+0x510>)
 8003d96:	617b      	str	r3, [r7, #20]
        break;
 8003d98:	e00c      	b.n	8003db4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9a:	f7fe fbe7 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8003d9e:	6178      	str	r0, [r7, #20]
        break;
 8003da0:	e008      	b.n	8003db4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da6:	617b      	str	r3, [r7, #20]
        break;
 8003da8:	e004      	b.n	8003db4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	76bb      	strb	r3, [r7, #26]
        break;
 8003db2:	bf00      	nop
    }

    if (pclk != 0U)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d018      	beq.n	8003dec <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	085a      	lsrs	r2, r3, #1
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	441a      	add	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	d908      	bls.n	8003de8 <UART_SetConfig+0x4f4>
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ddc:	d204      	bcs.n	8003de8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	e001      	b.n	8003dec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003df8:	7ebb      	ldrb	r3, [r7, #26]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bdb0      	pop	{r4, r5, r7, pc}
 8003e02:	bf00      	nop
 8003e04:	00f42400 	.word	0x00f42400

08003e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01a      	beq.n	8003f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f06:	d10a      	bne.n	8003f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f5c:	f7fd faf8 	bl	8001550 <HAL_GetTick>
 8003f60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d10e      	bne.n	8003f8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f82d 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e023      	b.n	8003fd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d10e      	bne.n	8003fba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f817 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e00d      	b.n	8003fd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fee:	e05e      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ff6:	d05a      	beq.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff8:	f7fd faaa 	bl	8001550 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	d302      	bcc.n	800400e <UART_WaitOnFlagUntilTimeout+0x30>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11b      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800401c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e043      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02c      	beq.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004062:	d124      	bne.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800406c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800407c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e00f      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4013      	ands	r3, r2
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	bf0c      	ite	eq
 80040be:	2301      	moveq	r3, #1
 80040c0:	2300      	movne	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d091      	beq.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <__NVIC_SetPriority>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	6039      	str	r1, [r7, #0]
 80040e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	db0a      	blt.n	8004102 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	490c      	ldr	r1, [pc, #48]	; (8004124 <__NVIC_SetPriority+0x4c>)
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	0112      	lsls	r2, r2, #4
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	440b      	add	r3, r1
 80040fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004100:	e00a      	b.n	8004118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4908      	ldr	r1, [pc, #32]	; (8004128 <__NVIC_SetPriority+0x50>)
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	3b04      	subs	r3, #4
 8004110:	0112      	lsls	r2, r2, #4
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	440b      	add	r3, r1
 8004116:	761a      	strb	r2, [r3, #24]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000e100 	.word	0xe000e100
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <SysTick_Handler+0x1c>)
 8004132:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004134:	f001 fcfe 	bl	8005b34 <xTaskGetSchedulerState>
 8004138:	4603      	mov	r3, r0
 800413a:	2b01      	cmp	r3, #1
 800413c:	d001      	beq.n	8004142 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800413e:	f002 fae3 	bl	8006708 <xPortSysTickHandler>
  }
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	e000e010 	.word	0xe000e010

0800414c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004150:	2100      	movs	r1, #0
 8004152:	f06f 0004 	mvn.w	r0, #4
 8004156:	f7ff ffbf 	bl	80040d8 <__NVIC_SetPriority>
#endif
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004166:	f3ef 8305 	mrs	r3, IPSR
 800416a:	603b      	str	r3, [r7, #0]
  return(result);
 800416c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004172:	f06f 0305 	mvn.w	r3, #5
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	e00c      	b.n	8004194 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <osKernelInitialize+0x44>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004182:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <osKernelInitialize+0x44>)
 8004184:	2201      	movs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004188:	2300      	movs	r3, #0
 800418a:	607b      	str	r3, [r7, #4]
 800418c:	e002      	b.n	8004194 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800418e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004192:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004194:	687b      	ldr	r3, [r7, #4]
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000138 	.word	0x20000138

080041a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ae:	f3ef 8305 	mrs	r3, IPSR
 80041b2:	603b      	str	r3, [r7, #0]
  return(result);
 80041b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80041ba:	f06f 0305 	mvn.w	r3, #5
 80041be:	607b      	str	r3, [r7, #4]
 80041c0:	e010      	b.n	80041e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <osKernelStart+0x48>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d109      	bne.n	80041de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80041ca:	f7ff ffbf 	bl	800414c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80041ce:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <osKernelStart+0x48>)
 80041d0:	2202      	movs	r2, #2
 80041d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80041d4:	f001 f866 	bl	80052a4 <vTaskStartScheduler>
      stat = osOK;
 80041d8:	2300      	movs	r3, #0
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	e002      	b.n	80041e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80041e4:	687b      	ldr	r3, [r7, #4]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000138 	.word	0x20000138

080041f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08e      	sub	sp, #56	; 0x38
 80041f8:	af04      	add	r7, sp, #16
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004204:	f3ef 8305 	mrs	r3, IPSR
 8004208:	617b      	str	r3, [r7, #20]
  return(result);
 800420a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800420c:	2b00      	cmp	r3, #0
 800420e:	d17e      	bne.n	800430e <osThreadNew+0x11a>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d07b      	beq.n	800430e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800421a:	2318      	movs	r3, #24
 800421c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800421e:	2300      	movs	r3, #0
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004226:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d045      	beq.n	80042ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <osThreadNew+0x48>
        name = attr->name;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <osThreadNew+0x6e>
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2b38      	cmp	r3, #56	; 0x38
 8004254:	d805      	bhi.n	8004262 <osThreadNew+0x6e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <osThreadNew+0x72>
        return (NULL);
 8004262:	2300      	movs	r3, #0
 8004264:	e054      	b.n	8004310 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00e      	beq.n	800429c <osThreadNew+0xa8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b5b      	cmp	r3, #91	; 0x5b
 8004284:	d90a      	bls.n	800429c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <osThreadNew+0xa8>
        mem = 1;
 8004296:	2301      	movs	r3, #1
 8004298:	61bb      	str	r3, [r7, #24]
 800429a:	e010      	b.n	80042be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10c      	bne.n	80042be <osThreadNew+0xca>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d108      	bne.n	80042be <osThreadNew+0xca>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <osThreadNew+0xca>
          mem = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	e001      	b.n	80042be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d110      	bne.n	80042e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042cc:	9202      	str	r2, [sp, #8]
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	6a3a      	ldr	r2, [r7, #32]
 80042d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fe0c 	bl	8004ef8 <xTaskCreateStatic>
 80042e0:	4603      	mov	r3, r0
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	e013      	b.n	800430e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d110      	bne.n	800430e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	f107 0310 	add.w	r3, r7, #16
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fe57 	bl	8004fb2 <xTaskCreate>
 8004304:	4603      	mov	r3, r0
 8004306:	2b01      	cmp	r3, #1
 8004308:	d001      	beq.n	800430e <osThreadNew+0x11a>
            hTask = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800430e:	693b      	ldr	r3, [r7, #16]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3728      	adds	r7, #40	; 0x28
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004320:	f3ef 8305 	mrs	r3, IPSR
 8004324:	60bb      	str	r3, [r7, #8]
  return(result);
 8004326:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <osDelay+0x1c>
    stat = osErrorISR;
 800432c:	f06f 0305 	mvn.w	r3, #5
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e007      	b.n	8004344 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <osDelay+0x2c>
      vTaskDelay(ticks);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 ff7c 	bl	800523c <vTaskDelay>
    }
  }

  return (stat);
 8004344:	68fb      	ldr	r3, [r7, #12]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a07      	ldr	r2, [pc, #28]	; (800437c <vApplicationGetIdleTaskMemory+0x2c>)
 8004360:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4a06      	ldr	r2, [pc, #24]	; (8004380 <vApplicationGetIdleTaskMemory+0x30>)
 8004366:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	601a      	str	r2, [r3, #0]
}
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	2000013c 	.word	0x2000013c
 8004380:	20000198 	.word	0x20000198

08004384 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004394:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4a06      	ldr	r2, [pc, #24]	; (80043b4 <vApplicationGetTimerTaskMemory+0x30>)
 800439a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043a2:	601a      	str	r2, [r3, #0]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	20000398 	.word	0x20000398
 80043b4:	200003f4 	.word	0x200003f4

080043b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f103 0208 	add.w	r2, r3, #8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f103 0208 	add.w	r2, r3, #8
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f103 0208 	add.w	r2, r3, #8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	601a      	str	r2, [r3, #0]
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800445a:	b480      	push	{r7}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004470:	d103      	bne.n	800447a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e00c      	b.n	8004494 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3308      	adds	r3, #8
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e002      	b.n	8004488 <vListInsert+0x2e>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	d2f6      	bcs.n	8004482 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	601a      	str	r2, [r3, #0]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6892      	ldr	r2, [r2, #8]
 80044e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6852      	ldr	r2, [r2, #4]
 80044ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d103      	bne.n	8004500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	1e5a      	subs	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800454a:	f002 f84b 	bl	80065e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	441a      	add	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	3b01      	subs	r3, #1
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	441a      	add	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	22ff      	movs	r2, #255	; 0xff
 800458e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	22ff      	movs	r2, #255	; 0xff
 8004596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d114      	bne.n	80045ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01a      	beq.n	80045de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3310      	adds	r3, #16
 80045ac:	4618      	mov	r0, r3
 80045ae:	f001 f903 	bl	80057b8 <xTaskRemoveFromEventList>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d012      	beq.n	80045de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <xQueueGenericReset+0xcc>)
 80045ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	e009      	b.n	80045de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3310      	adds	r3, #16
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fef2 	bl	80043b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3324      	adds	r3, #36	; 0x24
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff feed 	bl	80043b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045de:	f002 f831 	bl	8006644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045e2:	2301      	movs	r3, #1
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08e      	sub	sp, #56	; 0x38
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <xQueueGenericCreateStatic+0x52>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <xQueueGenericCreateStatic+0x56>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <xQueueGenericCreateStatic+0x58>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	623b      	str	r3, [r7, #32]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <xQueueGenericCreateStatic+0x7e>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <xQueueGenericCreateStatic+0x82>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <xQueueGenericCreateStatic+0x84>
 8004672:	2300      	movs	r3, #0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	61fb      	str	r3, [r7, #28]
}
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800468e:	2350      	movs	r3, #80	; 0x50
 8004690:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b50      	cmp	r3, #80	; 0x50
 8004696:	d00a      	beq.n	80046ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	61bb      	str	r3, [r7, #24]
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00d      	beq.n	80046d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f805 	bl	80046e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046d8:	4618      	mov	r0, r3
 80046da:	3730      	adds	r7, #48	; 0x30
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d103      	bne.n	80046fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e002      	b.n	8004702 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800470e:	2101      	movs	r1, #1
 8004710:	69b8      	ldr	r0, [r7, #24]
 8004712:	f7ff ff05 	bl	8004520 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08e      	sub	sp, #56	; 0x38
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004736:	2300      	movs	r3, #0
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <xQueueGenericSend+0x32>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <xQueueGenericSend+0x40>
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <xQueueGenericSend+0x44>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <xQueueGenericSend+0x46>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <xQueueGenericSend+0x60>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d103      	bne.n	8004796 <xQueueGenericSend+0x6e>
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <xQueueGenericSend+0x72>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <xQueueGenericSend+0x74>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	623b      	str	r3, [r7, #32]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047b6:	f001 f9bd 	bl	8005b34 <xTaskGetSchedulerState>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <xQueueGenericSend+0x9e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <xQueueGenericSend+0xa2>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <xQueueGenericSend+0xa4>
 80047ca:	2300      	movs	r3, #0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	61fb      	str	r3, [r7, #28]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047e6:	f001 fefd 	bl	80065e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <xQueueGenericSend+0xd4>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d129      	bne.n	8004850 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004802:	f000 fa0b 	bl	8004c1c <prvCopyDataToQueue>
 8004806:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	d010      	beq.n	8004832 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	3324      	adds	r3, #36	; 0x24
 8004814:	4618      	mov	r0, r3
 8004816:	f000 ffcf 	bl	80057b8 <xTaskRemoveFromEventList>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d013      	beq.n	8004848 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004820:	4b3f      	ldr	r3, [pc, #252]	; (8004920 <xQueueGenericSend+0x1f8>)
 8004822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	e00a      	b.n	8004848 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004838:	4b39      	ldr	r3, [pc, #228]	; (8004920 <xQueueGenericSend+0x1f8>)
 800483a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004848:	f001 fefc 	bl	8006644 <vPortExitCritical>
				return pdPASS;
 800484c:	2301      	movs	r3, #1
 800484e:	e063      	b.n	8004918 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d103      	bne.n	800485e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004856:	f001 fef5 	bl	8006644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800485a:	2300      	movs	r3, #0
 800485c:	e05c      	b.n	8004918 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	4618      	mov	r0, r3
 800486a:	f001 f809 	bl	8005880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800486e:	2301      	movs	r3, #1
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004872:	f001 fee7 	bl	8006644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004876:	f000 fd7b 	bl	8005370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800487a:	f001 feb3 	bl	80065e4 <vPortEnterCritical>
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004884:	b25b      	sxtb	r3, r3
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800488a:	d103      	bne.n	8004894 <xQueueGenericSend+0x16c>
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800489a:	b25b      	sxtb	r3, r3
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a0:	d103      	bne.n	80048aa <xQueueGenericSend+0x182>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048aa:	f001 fecb 	bl	8006644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048ae:	1d3a      	adds	r2, r7, #4
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fff8 	bl	80058ac <xTaskCheckForTimeOut>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d124      	bne.n	800490c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048c4:	f000 faa2 	bl	8004e0c <prvIsQueueFull>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d018      	beq.n	8004900 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	3310      	adds	r3, #16
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 ff1e 	bl	8005718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048de:	f000 fa2d 	bl	8004d3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048e2:	f000 fd53 	bl	800538c <xTaskResumeAll>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f47f af7c 	bne.w	80047e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <xQueueGenericSend+0x1f8>)
 80048f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	e772      	b.n	80047e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004902:	f000 fa1b 	bl	8004d3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004906:	f000 fd41 	bl	800538c <xTaskResumeAll>
 800490a:	e76c      	b.n	80047e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800490c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800490e:	f000 fa15 	bl	8004d3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004912:	f000 fd3b 	bl	800538c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004916:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004918:	4618      	mov	r0, r3
 800491a:	3738      	adds	r7, #56	; 0x38
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	e000ed04 	.word	0xe000ed04

08004924 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b090      	sub	sp, #64	; 0x40
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d103      	bne.n	8004960 <xQueueGenericSendFromISR+0x3c>
 8004958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <xQueueGenericSendFromISR+0x40>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <xQueueGenericSendFromISR+0x42>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d103      	bne.n	800498e <xQueueGenericSendFromISR+0x6a>
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <xQueueGenericSendFromISR+0x6e>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <xQueueGenericSendFromISR+0x70>
 8004992:	2300      	movs	r3, #0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	623b      	str	r3, [r7, #32]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049ae:	f001 fefb 	bl	80067a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049b2:	f3ef 8211 	mrs	r2, BASEPRI
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	61fa      	str	r2, [r7, #28]
 80049c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <xQueueGenericSendFromISR+0xbc>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d12f      	bne.n	8004a40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049f6:	f000 f911 	bl	8004c1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a02:	d112      	bne.n	8004a2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d016      	beq.n	8004a3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0e:	3324      	adds	r3, #36	; 0x24
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fed1 	bl	80057b8 <xTaskRemoveFromEventList>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00e      	beq.n	8004a3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00b      	beq.n	8004a3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	e007      	b.n	8004a3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a2e:	3301      	adds	r3, #1
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	b25a      	sxtb	r2, r3
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004a3e:	e001      	b.n	8004a44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3740      	adds	r7, #64	; 0x40
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08c      	sub	sp, #48	; 0x30
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <xQueueReceive+0x30>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	623b      	str	r3, [r7, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d103      	bne.n	8004a9a <xQueueReceive+0x3e>
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <xQueueReceive+0x42>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <xQueueReceive+0x44>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <xQueueReceive+0x5e>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	61fb      	str	r3, [r7, #28]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aba:	f001 f83b 	bl	8005b34 <xTaskGetSchedulerState>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <xQueueReceive+0x6e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <xQueueReceive+0x72>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <xQueueReceive+0x74>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <xQueueReceive+0x8e>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	61bb      	str	r3, [r7, #24]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aea:	f001 fd7b 	bl	80065e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01f      	beq.n	8004b3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004afe:	f000 f8f7 	bl	8004cf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	1e5a      	subs	r2, r3, #1
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00f      	beq.n	8004b32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	3310      	adds	r3, #16
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fe4e 	bl	80057b8 <xTaskRemoveFromEventList>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <xQueueReceive+0x1bc>)
 8004b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b32:	f001 fd87 	bl	8006644 <vPortExitCritical>
				return pdPASS;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e069      	b.n	8004c0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b40:	f001 fd80 	bl	8006644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e062      	b.n	8004c0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b4e:	f107 0310 	add.w	r3, r7, #16
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fe94 	bl	8005880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b5c:	f001 fd72 	bl	8006644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b60:	f000 fc06 	bl	8005370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b64:	f001 fd3e 	bl	80065e4 <vPortEnterCritical>
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b6e:	b25b      	sxtb	r3, r3
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b74:	d103      	bne.n	8004b7e <xQueueReceive+0x122>
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b84:	b25b      	sxtb	r3, r3
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b8a:	d103      	bne.n	8004b94 <xQueueReceive+0x138>
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b94:	f001 fd56 	bl	8006644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b98:	1d3a      	adds	r2, r7, #4
 8004b9a:	f107 0310 	add.w	r3, r7, #16
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fe83 	bl	80058ac <xTaskCheckForTimeOut>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d123      	bne.n	8004bf4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bae:	f000 f917 	bl	8004de0 <prvIsQueueEmpty>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d017      	beq.n	8004be8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fda9 	bl	8005718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc8:	f000 f8b8 	bl	8004d3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bcc:	f000 fbde 	bl	800538c <xTaskResumeAll>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d189      	bne.n	8004aea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <xQueueReceive+0x1bc>)
 8004bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	e780      	b.n	8004aea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bea:	f000 f8a7 	bl	8004d3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bee:	f000 fbcd 	bl	800538c <xTaskResumeAll>
 8004bf2:	e77a      	b.n	8004aea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf6:	f000 f8a1 	bl	8004d3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bfa:	f000 fbc7 	bl	800538c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c00:	f000 f8ee 	bl	8004de0 <prvIsQueueEmpty>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f43f af6f 	beq.w	8004aea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3730      	adds	r7, #48	; 0x30
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	e000ed04 	.word	0xe000ed04

08004c1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10d      	bne.n	8004c56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d14d      	bne.n	8004cde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 ff92 	bl	8005b70 <xTaskPriorityDisinherit>
 8004c4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	e043      	b.n	8004cde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d119      	bne.n	8004c90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6858      	ldr	r0, [r3, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	461a      	mov	r2, r3
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	f002 f81a 	bl	8006ca0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	441a      	add	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d32b      	bcc.n	8004cde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	e026      	b.n	8004cde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68d8      	ldr	r0, [r3, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	f002 f800 	bl	8006ca0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	425b      	negs	r3, r3
 8004caa:	441a      	add	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d207      	bcs.n	8004ccc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	441a      	add	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d105      	bne.n	8004cde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ce6:	697b      	ldr	r3, [r7, #20]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d018      	beq.n	8004d34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	441a      	add	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d303      	bcc.n	8004d24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68d9      	ldr	r1, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6838      	ldr	r0, [r7, #0]
 8004d30:	f001 ffb6 	bl	8006ca0 <memcpy>
	}
}
 8004d34:	bf00      	nop
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d44:	f001 fc4e 	bl	80065e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d50:	e011      	b.n	8004d76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d012      	beq.n	8004d80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3324      	adds	r3, #36	; 0x24
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fd2a 	bl	80057b8 <xTaskRemoveFromEventList>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d6a:	f000 fe01 	bl	8005970 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	dce9      	bgt.n	8004d52 <prvUnlockQueue+0x16>
 8004d7e:	e000      	b.n	8004d82 <prvUnlockQueue+0x46>
					break;
 8004d80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	22ff      	movs	r2, #255	; 0xff
 8004d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d8a:	f001 fc5b 	bl	8006644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d8e:	f001 fc29 	bl	80065e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d9a:	e011      	b.n	8004dc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d012      	beq.n	8004dca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3310      	adds	r3, #16
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fd05 	bl	80057b8 <xTaskRemoveFromEventList>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004db4:	f000 fddc 	bl	8005970 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004db8:	7bbb      	ldrb	r3, [r7, #14]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dce9      	bgt.n	8004d9c <prvUnlockQueue+0x60>
 8004dc8:	e000      	b.n	8004dcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	22ff      	movs	r2, #255	; 0xff
 8004dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004dd4:	f001 fc36 	bl	8006644 <vPortExitCritical>
}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004de8:	f001 fbfc 	bl	80065e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004df4:	2301      	movs	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e001      	b.n	8004dfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dfe:	f001 fc21 	bl	8006644 <vPortExitCritical>

	return xReturn;
 8004e02:	68fb      	ldr	r3, [r7, #12]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e14:	f001 fbe6 	bl	80065e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d102      	bne.n	8004e2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e001      	b.n	8004e2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e2e:	f001 fc09 	bl	8006644 <vPortExitCritical>

	return xReturn;
 8004e32:	68fb      	ldr	r3, [r7, #12]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	e014      	b.n	8004e76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e4c:	4a0f      	ldr	r2, [pc, #60]	; (8004e8c <vQueueAddToRegistry+0x50>)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e58:	490c      	ldr	r1, [pc, #48]	; (8004e8c <vQueueAddToRegistry+0x50>)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e62:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <vQueueAddToRegistry+0x50>)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e6e:	e006      	b.n	8004e7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b07      	cmp	r3, #7
 8004e7a:	d9e7      	bls.n	8004e4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20001a54 	.word	0x20001a54

08004e90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ea0:	f001 fba0 	bl	80065e4 <vPortEnterCritical>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eaa:	b25b      	sxtb	r3, r3
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eb0:	d103      	bne.n	8004eba <vQueueWaitForMessageRestricted+0x2a>
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ec0:	b25b      	sxtb	r3, r3
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec6:	d103      	bne.n	8004ed0 <vQueueWaitForMessageRestricted+0x40>
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ed0:	f001 fbb8 	bl	8006644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	3324      	adds	r3, #36	; 0x24
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fc3b 	bl	8005760 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004eea:	6978      	ldr	r0, [r7, #20]
 8004eec:	f7ff ff26 	bl	8004d3c <prvUnlockQueue>
	}
 8004ef0:	bf00      	nop
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08e      	sub	sp, #56	; 0x38
 8004efc:	af04      	add	r7, sp, #16
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	623b      	str	r3, [r7, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <xTaskCreateStatic+0x46>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	61fb      	str	r3, [r7, #28]
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f3e:	235c      	movs	r3, #92	; 0x5c
 8004f40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b5c      	cmp	r3, #92	; 0x5c
 8004f46:	d00a      	beq.n	8004f5e <xTaskCreateStatic+0x66>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	61bb      	str	r3, [r7, #24]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01e      	beq.n	8004fa4 <xTaskCreateStatic+0xac>
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01b      	beq.n	8004fa4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	2202      	movs	r2, #2
 8004f7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f7e:	2300      	movs	r3, #0
 8004f80:	9303      	str	r3, [sp, #12]
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	9302      	str	r3, [sp, #8]
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f850 	bl	800503c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f9e:	f000 f8dd 	bl	800515c <prvAddNewTaskToReadyList>
 8004fa2:	e001      	b.n	8004fa8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fa8:	697b      	ldr	r3, [r7, #20]
	}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3728      	adds	r7, #40	; 0x28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b08c      	sub	sp, #48	; 0x30
 8004fb6:	af04      	add	r7, sp, #16
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 fc2e 	bl	8006828 <pvPortMalloc>
 8004fcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00e      	beq.n	8004ff2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fd4:	205c      	movs	r0, #92	; 0x5c
 8004fd6:	f001 fc27 	bl	8006828 <pvPortMalloc>
 8004fda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8004fe8:	e005      	b.n	8004ff6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	f001 fce8 	bl	80069c0 <vPortFree>
 8004ff0:	e001      	b.n	8004ff6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d017      	beq.n	800502c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005004:	88fa      	ldrh	r2, [r7, #6]
 8005006:	2300      	movs	r3, #0
 8005008:	9303      	str	r3, [sp, #12]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	9302      	str	r3, [sp, #8]
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f80e 	bl	800503c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005020:	69f8      	ldr	r0, [r7, #28]
 8005022:	f000 f89b 	bl	800515c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005026:	2301      	movs	r3, #1
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	e002      	b.n	8005032 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800502c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005030:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005032:	69bb      	ldr	r3, [r7, #24]
	}
 8005034:	4618      	mov	r0, r3
 8005036:	3720      	adds	r7, #32
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	461a      	mov	r2, r3
 8005054:	21a5      	movs	r1, #165	; 0xa5
 8005056:	f001 fe31 	bl	8006cbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005064:	3b01      	subs	r3, #1
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f023 0307 	bic.w	r3, r3, #7
 8005072:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <prvInitialiseNewTask+0x58>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	617b      	str	r3, [r7, #20]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01f      	beq.n	80050da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	e012      	b.n	80050c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	7819      	ldrb	r1, [r3, #0]
 80050a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	3334      	adds	r3, #52	; 0x34
 80050b0:	460a      	mov	r2, r1
 80050b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	2b0f      	cmp	r3, #15
 80050ca:	d9e9      	bls.n	80050a0 <prvInitialiseNewTask+0x64>
 80050cc:	e000      	b.n	80050d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80050ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050d8:	e003      	b.n	80050e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	2b37      	cmp	r3, #55	; 0x37
 80050e6:	d901      	bls.n	80050ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050e8:	2337      	movs	r3, #55	; 0x37
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	2200      	movs	r2, #0
 80050fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	3304      	adds	r3, #4
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff f978 	bl	80043f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	3318      	adds	r3, #24
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff f973 	bl	80043f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005116:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	2200      	movs	r2, #0
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	68f9      	ldr	r1, [r7, #12]
 800513a:	69b8      	ldr	r0, [r7, #24]
 800513c:	f001 f928 	bl	8006390 <pxPortInitialiseStack>
 8005140:	4602      	mov	r2, r0
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005152:	bf00      	nop
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005164:	f001 fa3e 	bl	80065e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005168:	4b2d      	ldr	r3, [pc, #180]	; (8005220 <prvAddNewTaskToReadyList+0xc4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3301      	adds	r3, #1
 800516e:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <prvAddNewTaskToReadyList+0xc4>)
 8005170:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005172:	4b2c      	ldr	r3, [pc, #176]	; (8005224 <prvAddNewTaskToReadyList+0xc8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800517a:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <prvAddNewTaskToReadyList+0xc8>)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005180:	4b27      	ldr	r3, [pc, #156]	; (8005220 <prvAddNewTaskToReadyList+0xc4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d110      	bne.n	80051aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005188:	f000 fc16 	bl	80059b8 <prvInitialiseTaskLists>
 800518c:	e00d      	b.n	80051aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800518e:	4b26      	ldr	r3, [pc, #152]	; (8005228 <prvAddNewTaskToReadyList+0xcc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005196:	4b23      	ldr	r3, [pc, #140]	; (8005224 <prvAddNewTaskToReadyList+0xc8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d802      	bhi.n	80051aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051a4:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <prvAddNewTaskToReadyList+0xc8>)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051aa:	4b20      	ldr	r3, [pc, #128]	; (800522c <prvAddNewTaskToReadyList+0xd0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3301      	adds	r3, #1
 80051b0:	4a1e      	ldr	r2, [pc, #120]	; (800522c <prvAddNewTaskToReadyList+0xd0>)
 80051b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051b4:	4b1d      	ldr	r3, [pc, #116]	; (800522c <prvAddNewTaskToReadyList+0xd0>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <prvAddNewTaskToReadyList+0xd4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d903      	bls.n	80051d0 <prvAddNewTaskToReadyList+0x74>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	4a18      	ldr	r2, [pc, #96]	; (8005230 <prvAddNewTaskToReadyList+0xd4>)
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4a15      	ldr	r2, [pc, #84]	; (8005234 <prvAddNewTaskToReadyList+0xd8>)
 80051de:	441a      	add	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f7ff f913 	bl	8004412 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051ec:	f001 fa2a 	bl	8006644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051f0:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <prvAddNewTaskToReadyList+0xcc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00e      	beq.n	8005216 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <prvAddNewTaskToReadyList+0xc8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	429a      	cmp	r2, r3
 8005204:	d207      	bcs.n	8005216 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <prvAddNewTaskToReadyList+0xdc>)
 8005208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000cc8 	.word	0x20000cc8
 8005224:	200007f4 	.word	0x200007f4
 8005228:	20000cd4 	.word	0x20000cd4
 800522c:	20000ce4 	.word	0x20000ce4
 8005230:	20000cd0 	.word	0x20000cd0
 8005234:	200007f8 	.word	0x200007f8
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d017      	beq.n	800527e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <vTaskDelay+0x60>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <vTaskDelay+0x30>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	60bb      	str	r3, [r7, #8]
}
 8005268:	bf00      	nop
 800526a:	e7fe      	b.n	800526a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800526c:	f000 f880 	bl	8005370 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005270:	2100      	movs	r1, #0
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fcea 	bl	8005c4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005278:	f000 f888 	bl	800538c <xTaskResumeAll>
 800527c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d107      	bne.n	8005294 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <vTaskDelay+0x64>)
 8005286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000cf0 	.word	0x20000cf0
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052b2:	463a      	mov	r2, r7
 80052b4:	1d39      	adds	r1, r7, #4
 80052b6:	f107 0308 	add.w	r3, r7, #8
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff f848 	bl	8004350 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052c0:	6839      	ldr	r1, [r7, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	9202      	str	r2, [sp, #8]
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	2300      	movs	r3, #0
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	2300      	movs	r3, #0
 80052d0:	460a      	mov	r2, r1
 80052d2:	4921      	ldr	r1, [pc, #132]	; (8005358 <vTaskStartScheduler+0xb4>)
 80052d4:	4821      	ldr	r0, [pc, #132]	; (800535c <vTaskStartScheduler+0xb8>)
 80052d6:	f7ff fe0f 	bl	8004ef8 <xTaskCreateStatic>
 80052da:	4603      	mov	r3, r0
 80052dc:	4a20      	ldr	r2, [pc, #128]	; (8005360 <vTaskStartScheduler+0xbc>)
 80052de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052e0:	4b1f      	ldr	r3, [pc, #124]	; (8005360 <vTaskStartScheduler+0xbc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052e8:	2301      	movs	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e001      	b.n	80052f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d102      	bne.n	80052fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052f8:	f000 fcfc 	bl	8005cf4 <xTimerCreateTimerTask>
 80052fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d116      	bne.n	8005332 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	613b      	str	r3, [r7, #16]
}
 8005316:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005318:	4b12      	ldr	r3, [pc, #72]	; (8005364 <vTaskStartScheduler+0xc0>)
 800531a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800531e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005320:	4b11      	ldr	r3, [pc, #68]	; (8005368 <vTaskStartScheduler+0xc4>)
 8005322:	2201      	movs	r2, #1
 8005324:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005326:	4b11      	ldr	r3, [pc, #68]	; (800536c <vTaskStartScheduler+0xc8>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800532c:	f001 f8b8 	bl	80064a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005330:	e00e      	b.n	8005350 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005338:	d10a      	bne.n	8005350 <vTaskStartScheduler+0xac>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	60fb      	str	r3, [r7, #12]
}
 800534c:	bf00      	nop
 800534e:	e7fe      	b.n	800534e <vTaskStartScheduler+0xaa>
}
 8005350:	bf00      	nop
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	08006f28 	.word	0x08006f28
 800535c:	08005989 	.word	0x08005989
 8005360:	20000cec 	.word	0x20000cec
 8005364:	20000ce8 	.word	0x20000ce8
 8005368:	20000cd4 	.word	0x20000cd4
 800536c:	20000ccc 	.word	0x20000ccc

08005370 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005374:	4b04      	ldr	r3, [pc, #16]	; (8005388 <vTaskSuspendAll+0x18>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3301      	adds	r3, #1
 800537a:	4a03      	ldr	r2, [pc, #12]	; (8005388 <vTaskSuspendAll+0x18>)
 800537c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800537e:	bf00      	nop
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	20000cf0 	.word	0x20000cf0

0800538c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005396:	2300      	movs	r3, #0
 8005398:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800539a:	4b42      	ldr	r3, [pc, #264]	; (80054a4 <xTaskResumeAll+0x118>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	603b      	str	r3, [r7, #0]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053b8:	f001 f914 	bl	80065e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053bc:	4b39      	ldr	r3, [pc, #228]	; (80054a4 <xTaskResumeAll+0x118>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	4a38      	ldr	r2, [pc, #224]	; (80054a4 <xTaskResumeAll+0x118>)
 80053c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c6:	4b37      	ldr	r3, [pc, #220]	; (80054a4 <xTaskResumeAll+0x118>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d162      	bne.n	8005494 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053ce:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <xTaskResumeAll+0x11c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d05e      	beq.n	8005494 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053d6:	e02f      	b.n	8005438 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d8:	4b34      	ldr	r3, [pc, #208]	; (80054ac <xTaskResumeAll+0x120>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3318      	adds	r3, #24
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff f871 	bl	80044cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff f86c 	bl	80044cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	4b2d      	ldr	r3, [pc, #180]	; (80054b0 <xTaskResumeAll+0x124>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d903      	bls.n	8005408 <xTaskResumeAll+0x7c>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	4a2a      	ldr	r2, [pc, #168]	; (80054b0 <xTaskResumeAll+0x124>)
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4a27      	ldr	r2, [pc, #156]	; (80054b4 <xTaskResumeAll+0x128>)
 8005416:	441a      	add	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3304      	adds	r3, #4
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f7fe fff7 	bl	8004412 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	4b23      	ldr	r3, [pc, #140]	; (80054b8 <xTaskResumeAll+0x12c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <xTaskResumeAll+0x130>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005438:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <xTaskResumeAll+0x120>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1cb      	bne.n	80053d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005446:	f000 fb55 	bl	8005af4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800544a:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <xTaskResumeAll+0x134>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005456:	f000 f847 	bl	80054e8 <xTaskIncrementTick>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005460:	4b16      	ldr	r3, [pc, #88]	; (80054bc <xTaskResumeAll+0x130>)
 8005462:	2201      	movs	r2, #1
 8005464:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3b01      	subs	r3, #1
 800546a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f1      	bne.n	8005456 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005472:	4b13      	ldr	r3, [pc, #76]	; (80054c0 <xTaskResumeAll+0x134>)
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005478:	4b10      	ldr	r3, [pc, #64]	; (80054bc <xTaskResumeAll+0x130>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005480:	2301      	movs	r3, #1
 8005482:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005484:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <xTaskResumeAll+0x138>)
 8005486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005494:	f001 f8d6 	bl	8006644 <vPortExitCritical>

	return xAlreadyYielded;
 8005498:	68bb      	ldr	r3, [r7, #8]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000cf0 	.word	0x20000cf0
 80054a8:	20000cc8 	.word	0x20000cc8
 80054ac:	20000c88 	.word	0x20000c88
 80054b0:	20000cd0 	.word	0x20000cd0
 80054b4:	200007f8 	.word	0x200007f8
 80054b8:	200007f4 	.word	0x200007f4
 80054bc:	20000cdc 	.word	0x20000cdc
 80054c0:	20000cd8 	.word	0x20000cd8
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <xTaskGetTickCount+0x1c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054d4:	687b      	ldr	r3, [r7, #4]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000ccc 	.word	0x20000ccc

080054e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f2:	4b4f      	ldr	r3, [pc, #316]	; (8005630 <xTaskIncrementTick+0x148>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f040 808f 	bne.w	800561a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054fc:	4b4d      	ldr	r3, [pc, #308]	; (8005634 <xTaskIncrementTick+0x14c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3301      	adds	r3, #1
 8005502:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005504:	4a4b      	ldr	r2, [pc, #300]	; (8005634 <xTaskIncrementTick+0x14c>)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d120      	bne.n	8005552 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005510:	4b49      	ldr	r3, [pc, #292]	; (8005638 <xTaskIncrementTick+0x150>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <xTaskIncrementTick+0x48>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	603b      	str	r3, [r7, #0]
}
 800552c:	bf00      	nop
 800552e:	e7fe      	b.n	800552e <xTaskIncrementTick+0x46>
 8005530:	4b41      	ldr	r3, [pc, #260]	; (8005638 <xTaskIncrementTick+0x150>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	4b41      	ldr	r3, [pc, #260]	; (800563c <xTaskIncrementTick+0x154>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a3f      	ldr	r2, [pc, #252]	; (8005638 <xTaskIncrementTick+0x150>)
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	4a3f      	ldr	r2, [pc, #252]	; (800563c <xTaskIncrementTick+0x154>)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	4b3e      	ldr	r3, [pc, #248]	; (8005640 <xTaskIncrementTick+0x158>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	4a3d      	ldr	r2, [pc, #244]	; (8005640 <xTaskIncrementTick+0x158>)
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	f000 fad1 	bl	8005af4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005552:	4b3c      	ldr	r3, [pc, #240]	; (8005644 <xTaskIncrementTick+0x15c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	429a      	cmp	r2, r3
 800555a:	d349      	bcc.n	80055f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800555c:	4b36      	ldr	r3, [pc, #216]	; (8005638 <xTaskIncrementTick+0x150>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005566:	4b37      	ldr	r3, [pc, #220]	; (8005644 <xTaskIncrementTick+0x15c>)
 8005568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800556c:	601a      	str	r2, [r3, #0]
					break;
 800556e:	e03f      	b.n	80055f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005570:	4b31      	ldr	r3, [pc, #196]	; (8005638 <xTaskIncrementTick+0x150>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	429a      	cmp	r2, r3
 8005586:	d203      	bcs.n	8005590 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005588:	4a2e      	ldr	r2, [pc, #184]	; (8005644 <xTaskIncrementTick+0x15c>)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800558e:	e02f      	b.n	80055f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	3304      	adds	r3, #4
 8005594:	4618      	mov	r0, r3
 8005596:	f7fe ff99 	bl	80044cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	3318      	adds	r3, #24
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe ff90 	bl	80044cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	4b25      	ldr	r3, [pc, #148]	; (8005648 <xTaskIncrementTick+0x160>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d903      	bls.n	80055c0 <xTaskIncrementTick+0xd8>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	4a22      	ldr	r2, [pc, #136]	; (8005648 <xTaskIncrementTick+0x160>)
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4a1f      	ldr	r2, [pc, #124]	; (800564c <xTaskIncrementTick+0x164>)
 80055ce:	441a      	add	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	4610      	mov	r0, r2
 80055d8:	f7fe ff1b 	bl	8004412 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e0:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <xTaskIncrementTick+0x168>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d3b8      	bcc.n	800555c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ee:	e7b5      	b.n	800555c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055f0:	4b17      	ldr	r3, [pc, #92]	; (8005650 <xTaskIncrementTick+0x168>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	4915      	ldr	r1, [pc, #84]	; (800564c <xTaskIncrementTick+0x164>)
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d901      	bls.n	800560c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800560c:	4b11      	ldr	r3, [pc, #68]	; (8005654 <xTaskIncrementTick+0x16c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005614:	2301      	movs	r3, #1
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e004      	b.n	8005624 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800561a:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <xTaskIncrementTick+0x170>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3301      	adds	r3, #1
 8005620:	4a0d      	ldr	r2, [pc, #52]	; (8005658 <xTaskIncrementTick+0x170>)
 8005622:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005624:	697b      	ldr	r3, [r7, #20]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000cf0 	.word	0x20000cf0
 8005634:	20000ccc 	.word	0x20000ccc
 8005638:	20000c80 	.word	0x20000c80
 800563c:	20000c84 	.word	0x20000c84
 8005640:	20000ce0 	.word	0x20000ce0
 8005644:	20000ce8 	.word	0x20000ce8
 8005648:	20000cd0 	.word	0x20000cd0
 800564c:	200007f8 	.word	0x200007f8
 8005650:	200007f4 	.word	0x200007f4
 8005654:	20000cdc 	.word	0x20000cdc
 8005658:	20000cd8 	.word	0x20000cd8

0800565c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005662:	4b28      	ldr	r3, [pc, #160]	; (8005704 <vTaskSwitchContext+0xa8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800566a:	4b27      	ldr	r3, [pc, #156]	; (8005708 <vTaskSwitchContext+0xac>)
 800566c:	2201      	movs	r2, #1
 800566e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005670:	e041      	b.n	80056f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005672:	4b25      	ldr	r3, [pc, #148]	; (8005708 <vTaskSwitchContext+0xac>)
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005678:	4b24      	ldr	r3, [pc, #144]	; (800570c <vTaskSwitchContext+0xb0>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e010      	b.n	80056a2 <vTaskSwitchContext+0x46>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10a      	bne.n	800569c <vTaskSwitchContext+0x40>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	607b      	str	r3, [r7, #4]
}
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <vTaskSwitchContext+0x3e>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3b01      	subs	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	491b      	ldr	r1, [pc, #108]	; (8005710 <vTaskSwitchContext+0xb4>)
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0e4      	beq.n	8005680 <vTaskSwitchContext+0x24>
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4a13      	ldr	r2, [pc, #76]	; (8005710 <vTaskSwitchContext+0xb4>)
 80056c2:	4413      	add	r3, r2
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	605a      	str	r2, [r3, #4]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	3308      	adds	r3, #8
 80056d8:	429a      	cmp	r2, r3
 80056da:	d104      	bne.n	80056e6 <vTaskSwitchContext+0x8a>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a09      	ldr	r2, [pc, #36]	; (8005714 <vTaskSwitchContext+0xb8>)
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	4a06      	ldr	r2, [pc, #24]	; (800570c <vTaskSwitchContext+0xb0>)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6013      	str	r3, [r2, #0]
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20000cf0 	.word	0x20000cf0
 8005708:	20000cdc 	.word	0x20000cdc
 800570c:	20000cd0 	.word	0x20000cd0
 8005710:	200007f8 	.word	0x200007f8
 8005714:	200007f4 	.word	0x200007f4

08005718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60fb      	str	r3, [r7, #12]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <vTaskPlaceOnEventList+0x44>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3318      	adds	r3, #24
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fe fe87 	bl	800445a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800574c:	2101      	movs	r1, #1
 800574e:	6838      	ldr	r0, [r7, #0]
 8005750:	f000 fa7c 	bl	8005c4c <prvAddCurrentTaskToDelayedList>
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	200007f4 	.word	0x200007f4

08005760 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	617b      	str	r3, [r7, #20]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3318      	adds	r3, #24
 800578e:	4619      	mov	r1, r3
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7fe fe3e 	bl	8004412 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800579c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	68b8      	ldr	r0, [r7, #8]
 80057a6:	f000 fa51 	bl	8005c4c <prvAddCurrentTaskToDelayedList>
	}
 80057aa:	bf00      	nop
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	200007f4 	.word	0x200007f4

080057b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	60fb      	str	r3, [r7, #12]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	3318      	adds	r3, #24
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe fe6f 	bl	80044cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ee:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <xTaskRemoveFromEventList+0xb0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d11d      	bne.n	8005832 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fe66 	bl	80044cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <xTaskRemoveFromEventList+0xb4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d903      	bls.n	8005814 <xTaskRemoveFromEventList+0x5c>
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	4a16      	ldr	r2, [pc, #88]	; (800586c <xTaskRemoveFromEventList+0xb4>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4a13      	ldr	r2, [pc, #76]	; (8005870 <xTaskRemoveFromEventList+0xb8>)
 8005822:	441a      	add	r2, r3
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe fdf1 	bl	8004412 <vListInsertEnd>
 8005830:	e005      	b.n	800583e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	3318      	adds	r3, #24
 8005836:	4619      	mov	r1, r3
 8005838:	480e      	ldr	r0, [pc, #56]	; (8005874 <xTaskRemoveFromEventList+0xbc>)
 800583a:	f7fe fdea 	bl	8004412 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <xTaskRemoveFromEventList+0xc0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	429a      	cmp	r2, r3
 800584a:	d905      	bls.n	8005858 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800584c:	2301      	movs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <xTaskRemoveFromEventList+0xc4>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e001      	b.n	800585c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800585c:	697b      	ldr	r3, [r7, #20]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000cf0 	.word	0x20000cf0
 800586c:	20000cd0 	.word	0x20000cd0
 8005870:	200007f8 	.word	0x200007f8
 8005874:	20000c88 	.word	0x20000c88
 8005878:	200007f4 	.word	0x200007f4
 800587c:	20000cdc 	.word	0x20000cdc

08005880 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <vTaskInternalSetTimeOutState+0x24>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <vTaskInternalSetTimeOutState+0x28>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	605a      	str	r2, [r3, #4]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	20000ce0 	.word	0x20000ce0
 80058a8:	20000ccc 	.word	0x20000ccc

080058ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	613b      	str	r3, [r7, #16]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	60fb      	str	r3, [r7, #12]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058ee:	f000 fe79 	bl	80065e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <xTaskCheckForTimeOut+0xbc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800590a:	d102      	bne.n	8005912 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800590c:	2300      	movs	r3, #0
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	e023      	b.n	800595a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <xTaskCheckForTimeOut+0xc0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d007      	beq.n	800592e <xTaskCheckForTimeOut+0x82>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	429a      	cmp	r2, r3
 8005926:	d302      	bcc.n	800592e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	e015      	b.n	800595a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	429a      	cmp	r2, r3
 8005936:	d20b      	bcs.n	8005950 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff ff9b 	bl	8005880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	e004      	b.n	800595a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005956:	2301      	movs	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800595a:	f000 fe73 	bl	8006644 <vPortExitCritical>

	return xReturn;
 800595e:	69fb      	ldr	r3, [r7, #28]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3720      	adds	r7, #32
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000ccc 	.word	0x20000ccc
 800596c:	20000ce0 	.word	0x20000ce0

08005970 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <vTaskMissedYield+0x14>)
 8005976:	2201      	movs	r2, #1
 8005978:	601a      	str	r2, [r3, #0]
}
 800597a:	bf00      	nop
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	20000cdc 	.word	0x20000cdc

08005988 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005990:	f000 f852 	bl	8005a38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005994:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <prvIdleTask+0x28>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d9f9      	bls.n	8005990 <prvIdleTask+0x8>
			{
				taskYIELD();
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <prvIdleTask+0x2c>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059ac:	e7f0      	b.n	8005990 <prvIdleTask+0x8>
 80059ae:	bf00      	nop
 80059b0:	200007f8 	.word	0x200007f8
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059be:	2300      	movs	r3, #0
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	e00c      	b.n	80059de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <prvInitialiseTaskLists+0x60>)
 80059d0:	4413      	add	r3, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fcf0 	bl	80043b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3301      	adds	r3, #1
 80059dc:	607b      	str	r3, [r7, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b37      	cmp	r3, #55	; 0x37
 80059e2:	d9ef      	bls.n	80059c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059e4:	480d      	ldr	r0, [pc, #52]	; (8005a1c <prvInitialiseTaskLists+0x64>)
 80059e6:	f7fe fce7 	bl	80043b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ea:	480d      	ldr	r0, [pc, #52]	; (8005a20 <prvInitialiseTaskLists+0x68>)
 80059ec:	f7fe fce4 	bl	80043b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059f0:	480c      	ldr	r0, [pc, #48]	; (8005a24 <prvInitialiseTaskLists+0x6c>)
 80059f2:	f7fe fce1 	bl	80043b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059f6:	480c      	ldr	r0, [pc, #48]	; (8005a28 <prvInitialiseTaskLists+0x70>)
 80059f8:	f7fe fcde 	bl	80043b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059fc:	480b      	ldr	r0, [pc, #44]	; (8005a2c <prvInitialiseTaskLists+0x74>)
 80059fe:	f7fe fcdb 	bl	80043b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a02:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <prvInitialiseTaskLists+0x78>)
 8005a04:	4a05      	ldr	r2, [pc, #20]	; (8005a1c <prvInitialiseTaskLists+0x64>)
 8005a06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <prvInitialiseTaskLists+0x7c>)
 8005a0a:	4a05      	ldr	r2, [pc, #20]	; (8005a20 <prvInitialiseTaskLists+0x68>)
 8005a0c:	601a      	str	r2, [r3, #0]
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	200007f8 	.word	0x200007f8
 8005a1c:	20000c58 	.word	0x20000c58
 8005a20:	20000c6c 	.word	0x20000c6c
 8005a24:	20000c88 	.word	0x20000c88
 8005a28:	20000c9c 	.word	0x20000c9c
 8005a2c:	20000cb4 	.word	0x20000cb4
 8005a30:	20000c80 	.word	0x20000c80
 8005a34:	20000c84 	.word	0x20000c84

08005a38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a3e:	e019      	b.n	8005a74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a40:	f000 fdd0 	bl	80065e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a44:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <prvCheckTasksWaitingTermination+0x50>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe fd3b 	bl	80044cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <prvCheckTasksWaitingTermination+0x54>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	4a0b      	ldr	r2, [pc, #44]	; (8005a8c <prvCheckTasksWaitingTermination+0x54>)
 8005a5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a6a:	f000 fdeb 	bl	8006644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f810 	bl	8005a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a74:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e1      	bne.n	8005a40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000c9c 	.word	0x20000c9c
 8005a8c:	20000cc8 	.word	0x20000cc8
 8005a90:	20000cb0 	.word	0x20000cb0

08005a94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d108      	bne.n	8005ab8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 ff88 	bl	80069c0 <vPortFree>
				vPortFree( pxTCB );
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 ff85 	bl	80069c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ab6:	e018      	b.n	8005aea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d103      	bne.n	8005aca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 ff7c 	bl	80069c0 <vPortFree>
	}
 8005ac8:	e00f      	b.n	8005aea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d00a      	beq.n	8005aea <prvDeleteTCB+0x56>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60fb      	str	r3, [r7, #12]
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <prvDeleteTCB+0x54>
	}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <prvResetNextTaskUnblockTime+0x38>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b04:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <prvResetNextTaskUnblockTime+0x3c>)
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b0c:	e008      	b.n	8005b20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <prvResetNextTaskUnblockTime+0x38>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a04      	ldr	r2, [pc, #16]	; (8005b30 <prvResetNextTaskUnblockTime+0x3c>)
 8005b1e:	6013      	str	r3, [r2, #0]
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000c80 	.word	0x20000c80
 8005b30:	20000ce8 	.word	0x20000ce8

08005b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <xTaskGetSchedulerState+0x34>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b42:	2301      	movs	r3, #1
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	e008      	b.n	8005b5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b48:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <xTaskGetSchedulerState+0x38>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b50:	2302      	movs	r3, #2
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	e001      	b.n	8005b5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b56:	2300      	movs	r3, #0
 8005b58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b5a:	687b      	ldr	r3, [r7, #4]
	}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	20000cd4 	.word	0x20000cd4
 8005b6c:	20000cf0 	.word	0x20000cf0

08005b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d056      	beq.n	8005c34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b86:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <xTaskPriorityDisinherit+0xd0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d00a      	beq.n	8005ba6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60fb      	str	r3, [r7, #12]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60bb      	str	r3, [r7, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc8:	1e5a      	subs	r2, r3, #1
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d02c      	beq.n	8005c34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d128      	bne.n	8005c34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fc70 	bl	80044cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <xTaskPriorityDisinherit+0xd4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d903      	bls.n	8005c14 <xTaskPriorityDisinherit+0xa4>
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <xTaskPriorityDisinherit+0xd4>)
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <xTaskPriorityDisinherit+0xd8>)
 8005c22:	441a      	add	r2, r3
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	3304      	adds	r3, #4
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	f7fe fbf1 	bl	8004412 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c34:	697b      	ldr	r3, [r7, #20]
	}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	200007f4 	.word	0x200007f4
 8005c44:	20000cd0 	.word	0x20000cd0
 8005c48:	200007f8 	.word	0x200007f8

08005c4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c56:	4b21      	ldr	r3, [pc, #132]	; (8005cdc <prvAddCurrentTaskToDelayedList+0x90>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c5c:	4b20      	ldr	r3, [pc, #128]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3304      	adds	r3, #4
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fc32 	bl	80044cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c6e:	d10a      	bne.n	8005c86 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c76:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4819      	ldr	r0, [pc, #100]	; (8005ce4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c80:	f7fe fbc7 	bl	8004412 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c84:	e026      	b.n	8005cd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c8e:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d209      	bcs.n	8005cb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4610      	mov	r0, r2
 8005cac:	f7fe fbd5 	bl	800445a <vListInsert>
}
 8005cb0:	e010      	b.n	8005cd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cb2:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <prvAddCurrentTaskToDelayedList+0xa0>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b0a      	ldr	r3, [pc, #40]	; (8005ce0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f7fe fbcb 	bl	800445a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d202      	bcs.n	8005cd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cce:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6013      	str	r3, [r2, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000ccc 	.word	0x20000ccc
 8005ce0:	200007f4 	.word	0x200007f4
 8005ce4:	20000cb4 	.word	0x20000cb4
 8005ce8:	20000c84 	.word	0x20000c84
 8005cec:	20000c80 	.word	0x20000c80
 8005cf0:	20000ce8 	.word	0x20000ce8

08005cf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cfe:	f000 fb07 	bl	8006310 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <xTimerCreateTimerTask+0x80>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d021      	beq.n	8005d4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d12:	1d3a      	adds	r2, r7, #4
 8005d14:	f107 0108 	add.w	r1, r7, #8
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe fb31 	bl	8004384 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	9202      	str	r2, [sp, #8]
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	2300      	movs	r3, #0
 8005d32:	460a      	mov	r2, r1
 8005d34:	4910      	ldr	r1, [pc, #64]	; (8005d78 <xTimerCreateTimerTask+0x84>)
 8005d36:	4811      	ldr	r0, [pc, #68]	; (8005d7c <xTimerCreateTimerTask+0x88>)
 8005d38:	f7ff f8de 	bl	8004ef8 <xTaskCreateStatic>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4a10      	ldr	r2, [pc, #64]	; (8005d80 <xTimerCreateTimerTask+0x8c>)
 8005d40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d42:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <xTimerCreateTimerTask+0x8c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	613b      	str	r3, [r7, #16]
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d6a:	697b      	ldr	r3, [r7, #20]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000d24 	.word	0x20000d24
 8005d78:	08006f30 	.word	0x08006f30
 8005d7c:	08005eb9 	.word	0x08005eb9
 8005d80:	20000d28 	.word	0x20000d28

08005d84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	623b      	str	r3, [r7, #32]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005db2:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d02a      	beq.n	8005e10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	dc18      	bgt.n	8005dfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005dcc:	f7ff feb2 	bl	8005b34 <xTaskGetSchedulerState>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d109      	bne.n	8005dea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005dd6:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	f107 0110 	add.w	r1, r7, #16
 8005dde:	2300      	movs	r3, #0
 8005de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de2:	f7fe fca1 	bl	8004728 <xQueueGenericSend>
 8005de6:	6278      	str	r0, [r7, #36]	; 0x24
 8005de8:	e012      	b.n	8005e10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dea:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	f107 0110 	add.w	r1, r7, #16
 8005df2:	2300      	movs	r3, #0
 8005df4:	2200      	movs	r2, #0
 8005df6:	f7fe fc97 	bl	8004728 <xQueueGenericSend>
 8005dfa:	6278      	str	r0, [r7, #36]	; 0x24
 8005dfc:	e008      	b.n	8005e10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dfe:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <xTimerGenericCommand+0x98>)
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	f107 0110 	add.w	r1, r7, #16
 8005e06:	2300      	movs	r3, #0
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	f7fe fd8b 	bl	8004924 <xQueueGenericSendFromISR>
 8005e0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3728      	adds	r7, #40	; 0x28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000d24 	.word	0x20000d24

08005e20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2a:	4b22      	ldr	r3, [pc, #136]	; (8005eb4 <prvProcessExpiredTimer+0x94>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fb47 	bl	80044cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d022      	beq.n	8005e92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	699a      	ldr	r2, [r3, #24]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	18d1      	adds	r1, r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	6978      	ldr	r0, [r7, #20]
 8005e5a:	f000 f8d1 	bl	8006000 <prvInsertTimerInActiveList>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01f      	beq.n	8005ea4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e64:	2300      	movs	r3, #0
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	6978      	ldr	r0, [r7, #20]
 8005e70:	f7ff ff88 	bl	8005d84 <xTimerGenericCommand>
 8005e74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d113      	bne.n	8005ea4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	60fb      	str	r3, [r7, #12]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	6978      	ldr	r0, [r7, #20]
 8005eaa:	4798      	blx	r3
}
 8005eac:	bf00      	nop
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000d1c 	.word	0x20000d1c

08005eb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ec0:	f107 0308 	add.w	r3, r7, #8
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 f857 	bl	8005f78 <prvGetNextExpireTime>
 8005eca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f803 	bl	8005edc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ed6:	f000 f8d5 	bl	8006084 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eda:	e7f1      	b.n	8005ec0 <prvTimerTask+0x8>

08005edc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ee6:	f7ff fa43 	bl	8005370 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eea:	f107 0308 	add.w	r3, r7, #8
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f866 	bl	8005fc0 <prvSampleTimeNow>
 8005ef4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d130      	bne.n	8005f5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <prvProcessTimerOrBlockTask+0x3c>
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d806      	bhi.n	8005f18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f0a:	f7ff fa3f 	bl	800538c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff85 	bl	8005e20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f16:	e024      	b.n	8005f62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <prvProcessTimerOrBlockTask+0x90>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <prvProcessTimerOrBlockTask+0x50>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <prvProcessTimerOrBlockTask+0x52>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f30:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <prvProcessTimerOrBlockTask+0x94>)
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f7fe ffa7 	bl	8004e90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f42:	f7ff fa23 	bl	800538c <xTaskResumeAll>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <prvProcessTimerOrBlockTask+0x98>)
 8005f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	f3bf 8f6f 	isb	sy
}
 8005f5c:	e001      	b.n	8005f62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f5e:	f7ff fa15 	bl	800538c <xTaskResumeAll>
}
 8005f62:	bf00      	nop
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000d20 	.word	0x20000d20
 8005f70:	20000d24 	.word	0x20000d24
 8005f74:	e000ed04 	.word	0xe000ed04

08005f78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <prvGetNextExpireTime+0x44>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <prvGetNextExpireTime+0x16>
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	e000      	b.n	8005f90 <prvGetNextExpireTime+0x18>
 8005f8e:	2200      	movs	r2, #0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d105      	bne.n	8005fa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <prvGetNextExpireTime+0x44>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	e001      	b.n	8005fac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fac:	68fb      	ldr	r3, [r7, #12]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20000d1c 	.word	0x20000d1c

08005fc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fc8:	f7ff fa7e 	bl	80054c8 <xTaskGetTickCount>
 8005fcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <prvSampleTimeNow+0x3c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d205      	bcs.n	8005fe4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fd8:	f000 f936 	bl	8006248 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e002      	b.n	8005fea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fea:	4a04      	ldr	r2, [pc, #16]	; (8005ffc <prvSampleTimeNow+0x3c>)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000d2c 	.word	0x20000d2c

08006000 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d812      	bhi.n	800604c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	1ad2      	subs	r2, r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	429a      	cmp	r2, r3
 8006032:	d302      	bcc.n	800603a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006034:	2301      	movs	r3, #1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e01b      	b.n	8006072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800603a:	4b10      	ldr	r3, [pc, #64]	; (800607c <prvInsertTimerInActiveList+0x7c>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3304      	adds	r3, #4
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f7fe fa08 	bl	800445a <vListInsert>
 800604a:	e012      	b.n	8006072 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d206      	bcs.n	8006062 <prvInsertTimerInActiveList+0x62>
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d302      	bcc.n	8006062 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e007      	b.n	8006072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <prvInsertTimerInActiveList+0x80>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3304      	adds	r3, #4
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f7fe f9f4 	bl	800445a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006072:	697b      	ldr	r3, [r7, #20]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20000d20 	.word	0x20000d20
 8006080:	20000d1c 	.word	0x20000d1c

08006084 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08e      	sub	sp, #56	; 0x38
 8006088:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800608a:	e0ca      	b.n	8006222 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	da18      	bge.n	80060c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006092:	1d3b      	adds	r3, r7, #4
 8006094:	3304      	adds	r3, #4
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	61fb      	str	r3, [r7, #28]
}
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ba:	6850      	ldr	r0, [r2, #4]
 80060bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060be:	6892      	ldr	r2, [r2, #8]
 80060c0:	4611      	mov	r1, r2
 80060c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f2c0 80aa 	blt.w	8006220 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	3304      	adds	r3, #4
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe f9f5 	bl	80044cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060e2:	463b      	mov	r3, r7
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff ff6b 	bl	8005fc0 <prvSampleTimeNow>
 80060ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b09      	cmp	r3, #9
 80060f0:	f200 8097 	bhi.w	8006222 <prvProcessReceivedCommands+0x19e>
 80060f4:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <prvProcessReceivedCommands+0x78>)
 80060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fa:	bf00      	nop
 80060fc:	08006125 	.word	0x08006125
 8006100:	08006125 	.word	0x08006125
 8006104:	08006125 	.word	0x08006125
 8006108:	08006199 	.word	0x08006199
 800610c:	080061ad 	.word	0x080061ad
 8006110:	080061f7 	.word	0x080061f7
 8006114:	08006125 	.word	0x08006125
 8006118:	08006125 	.word	0x08006125
 800611c:	08006199 	.word	0x08006199
 8006120:	080061ad 	.word	0x080061ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800612a:	f043 0301 	orr.w	r3, r3, #1
 800612e:	b2da      	uxtb	r2, r3
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	18d1      	adds	r1, r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006144:	f7ff ff5c 	bl	8006000 <prvInsertTimerInActiveList>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d069      	beq.n	8006222 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006154:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d05e      	beq.n	8006222 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	441a      	add	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2300      	movs	r3, #0
 8006172:	2100      	movs	r1, #0
 8006174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006176:	f7ff fe05 	bl	8005d84 <xTimerGenericCommand>
 800617a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d14f      	bne.n	8006222 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	61bb      	str	r3, [r7, #24]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800619e:	f023 0301 	bic.w	r3, r3, #1
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80061aa:	e03a      	b.n	8006222 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	617b      	str	r3, [r7, #20]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	18d1      	adds	r1, r2, r3
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f0:	f7ff ff06 	bl	8006000 <prvInsertTimerInActiveList>
					break;
 80061f4:	e015      	b.n	8006222 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d103      	bne.n	800620c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006206:	f000 fbdb 	bl	80069c0 <vPortFree>
 800620a:	e00a      	b.n	8006222 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006212:	f023 0301 	bic.w	r3, r3, #1
 8006216:	b2da      	uxtb	r2, r3
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800621e:	e000      	b.n	8006222 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006220:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006222:	4b08      	ldr	r3, [pc, #32]	; (8006244 <prvProcessReceivedCommands+0x1c0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	1d39      	adds	r1, r7, #4
 8006228:	2200      	movs	r2, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fc16 	bl	8004a5c <xQueueReceive>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	f47f af2a 	bne.w	800608c <prvProcessReceivedCommands+0x8>
	}
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	3730      	adds	r7, #48	; 0x30
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000d24 	.word	0x20000d24

08006248 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800624e:	e048      	b.n	80062e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006250:	4b2d      	ldr	r3, [pc, #180]	; (8006308 <prvSwitchTimerLists+0xc0>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625a:	4b2b      	ldr	r3, [pc, #172]	; (8006308 <prvSwitchTimerLists+0xc0>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3304      	adds	r3, #4
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe f92f 	bl	80044cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d02e      	beq.n	80062e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4413      	add	r3, r2
 800628c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	429a      	cmp	r2, r3
 8006294:	d90e      	bls.n	80062b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062a2:	4b19      	ldr	r3, [pc, #100]	; (8006308 <prvSwitchTimerLists+0xc0>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f7fe f8d4 	bl	800445a <vListInsert>
 80062b2:	e016      	b.n	80062e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062b4:	2300      	movs	r3, #0
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	2100      	movs	r1, #0
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff fd60 	bl	8005d84 <xTimerGenericCommand>
 80062c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	603b      	str	r3, [r7, #0]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062e2:	4b09      	ldr	r3, [pc, #36]	; (8006308 <prvSwitchTimerLists+0xc0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1b1      	bne.n	8006250 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <prvSwitchTimerLists+0xc0>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062f2:	4b06      	ldr	r3, [pc, #24]	; (800630c <prvSwitchTimerLists+0xc4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a04      	ldr	r2, [pc, #16]	; (8006308 <prvSwitchTimerLists+0xc0>)
 80062f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062fa:	4a04      	ldr	r2, [pc, #16]	; (800630c <prvSwitchTimerLists+0xc4>)
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	6013      	str	r3, [r2, #0]
}
 8006300:	bf00      	nop
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	20000d1c 	.word	0x20000d1c
 800630c:	20000d20 	.word	0x20000d20

08006310 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006316:	f000 f965 	bl	80065e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800631a:	4b15      	ldr	r3, [pc, #84]	; (8006370 <prvCheckForValidListAndQueue+0x60>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d120      	bne.n	8006364 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006322:	4814      	ldr	r0, [pc, #80]	; (8006374 <prvCheckForValidListAndQueue+0x64>)
 8006324:	f7fe f848 	bl	80043b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006328:	4813      	ldr	r0, [pc, #76]	; (8006378 <prvCheckForValidListAndQueue+0x68>)
 800632a:	f7fe f845 	bl	80043b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <prvCheckForValidListAndQueue+0x6c>)
 8006330:	4a10      	ldr	r2, [pc, #64]	; (8006374 <prvCheckForValidListAndQueue+0x64>)
 8006332:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006334:	4b12      	ldr	r3, [pc, #72]	; (8006380 <prvCheckForValidListAndQueue+0x70>)
 8006336:	4a10      	ldr	r2, [pc, #64]	; (8006378 <prvCheckForValidListAndQueue+0x68>)
 8006338:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800633a:	2300      	movs	r3, #0
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <prvCheckForValidListAndQueue+0x74>)
 8006340:	4a11      	ldr	r2, [pc, #68]	; (8006388 <prvCheckForValidListAndQueue+0x78>)
 8006342:	2110      	movs	r1, #16
 8006344:	200a      	movs	r0, #10
 8006346:	f7fe f953 	bl	80045f0 <xQueueGenericCreateStatic>
 800634a:	4603      	mov	r3, r0
 800634c:	4a08      	ldr	r2, [pc, #32]	; (8006370 <prvCheckForValidListAndQueue+0x60>)
 800634e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006350:	4b07      	ldr	r3, [pc, #28]	; (8006370 <prvCheckForValidListAndQueue+0x60>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006358:	4b05      	ldr	r3, [pc, #20]	; (8006370 <prvCheckForValidListAndQueue+0x60>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	490b      	ldr	r1, [pc, #44]	; (800638c <prvCheckForValidListAndQueue+0x7c>)
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe fd6c 	bl	8004e3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006364:	f000 f96e 	bl	8006644 <vPortExitCritical>
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000d24 	.word	0x20000d24
 8006374:	20000cf4 	.word	0x20000cf4
 8006378:	20000d08 	.word	0x20000d08
 800637c:	20000d1c 	.word	0x20000d1c
 8006380:	20000d20 	.word	0x20000d20
 8006384:	20000dd0 	.word	0x20000dd0
 8006388:	20000d30 	.word	0x20000d30
 800638c:	08006f38 	.word	0x08006f38

08006390 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3b04      	subs	r3, #4
 80063a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3b04      	subs	r3, #4
 80063ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f023 0201 	bic.w	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3b04      	subs	r3, #4
 80063be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063c0:	4a0c      	ldr	r2, [pc, #48]	; (80063f4 <pxPortInitialiseStack+0x64>)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3b14      	subs	r3, #20
 80063ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3b04      	subs	r3, #4
 80063d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f06f 0202 	mvn.w	r2, #2
 80063de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3b20      	subs	r3, #32
 80063e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063e6:	68fb      	ldr	r3, [r7, #12]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	080063f9 	.word	0x080063f9

080063f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006402:	4b12      	ldr	r3, [pc, #72]	; (800644c <prvTaskExitError+0x54>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640a:	d00a      	beq.n	8006422 <prvTaskExitError+0x2a>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60fb      	str	r3, [r7, #12]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <prvTaskExitError+0x28>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	60bb      	str	r3, [r7, #8]
}
 8006434:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006436:	bf00      	nop
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0fc      	beq.n	8006438 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	2000000c 	.word	0x2000000c

08006450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006450:	4b07      	ldr	r3, [pc, #28]	; (8006470 <pxCurrentTCBConst2>)
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	6808      	ldr	r0, [r1, #0]
 8006456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	f380 8809 	msr	PSP, r0
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f380 8811 	msr	BASEPRI, r0
 800646a:	4770      	bx	lr
 800646c:	f3af 8000 	nop.w

08006470 <pxCurrentTCBConst2>:
 8006470:	200007f4 	.word	0x200007f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop

08006478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006478:	4808      	ldr	r0, [pc, #32]	; (800649c <prvPortStartFirstTask+0x24>)
 800647a:	6800      	ldr	r0, [r0, #0]
 800647c:	6800      	ldr	r0, [r0, #0]
 800647e:	f380 8808 	msr	MSP, r0
 8006482:	f04f 0000 	mov.w	r0, #0
 8006486:	f380 8814 	msr	CONTROL, r0
 800648a:	b662      	cpsie	i
 800648c:	b661      	cpsie	f
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	df00      	svc	0
 8006498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800649a:	bf00      	nop
 800649c:	e000ed08 	.word	0xe000ed08

080064a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064a6:	4b46      	ldr	r3, [pc, #280]	; (80065c0 <xPortStartScheduler+0x120>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a46      	ldr	r2, [pc, #280]	; (80065c4 <xPortStartScheduler+0x124>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d10a      	bne.n	80064c6 <xPortStartScheduler+0x26>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	613b      	str	r3, [r7, #16]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064c6:	4b3e      	ldr	r3, [pc, #248]	; (80065c0 <xPortStartScheduler+0x120>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a3f      	ldr	r2, [pc, #252]	; (80065c8 <xPortStartScheduler+0x128>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d10a      	bne.n	80064e6 <xPortStartScheduler+0x46>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	60fb      	str	r3, [r7, #12]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064e6:	4b39      	ldr	r3, [pc, #228]	; (80065cc <xPortStartScheduler+0x12c>)
 80064e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	22ff      	movs	r2, #255	; 0xff
 80064f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006508:	b2da      	uxtb	r2, r3
 800650a:	4b31      	ldr	r3, [pc, #196]	; (80065d0 <xPortStartScheduler+0x130>)
 800650c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800650e:	4b31      	ldr	r3, [pc, #196]	; (80065d4 <xPortStartScheduler+0x134>)
 8006510:	2207      	movs	r2, #7
 8006512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006514:	e009      	b.n	800652a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006516:	4b2f      	ldr	r3, [pc, #188]	; (80065d4 <xPortStartScheduler+0x134>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3b01      	subs	r3, #1
 800651c:	4a2d      	ldr	r2, [pc, #180]	; (80065d4 <xPortStartScheduler+0x134>)
 800651e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	b2db      	uxtb	r3, r3
 8006528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	2b80      	cmp	r3, #128	; 0x80
 8006534:	d0ef      	beq.n	8006516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006536:	4b27      	ldr	r3, [pc, #156]	; (80065d4 <xPortStartScheduler+0x134>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f1c3 0307 	rsb	r3, r3, #7
 800653e:	2b04      	cmp	r3, #4
 8006540:	d00a      	beq.n	8006558 <xPortStartScheduler+0xb8>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	60bb      	str	r3, [r7, #8]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006558:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <xPortStartScheduler+0x134>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <xPortStartScheduler+0x134>)
 8006560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006562:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <xPortStartScheduler+0x134>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800656a:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <xPortStartScheduler+0x134>)
 800656c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006576:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <xPortStartScheduler+0x138>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <xPortStartScheduler+0x138>)
 800657c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006582:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <xPortStartScheduler+0x138>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a14      	ldr	r2, [pc, #80]	; (80065d8 <xPortStartScheduler+0x138>)
 8006588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800658c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800658e:	f000 f8dd 	bl	800674c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006592:	4b12      	ldr	r3, [pc, #72]	; (80065dc <xPortStartScheduler+0x13c>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006598:	f000 f8fc 	bl	8006794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800659c:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <xPortStartScheduler+0x140>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a0f      	ldr	r2, [pc, #60]	; (80065e0 <xPortStartScheduler+0x140>)
 80065a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065a8:	f7ff ff66 	bl	8006478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065ac:	f7ff f856 	bl	800565c <vTaskSwitchContext>
	prvTaskExitError();
 80065b0:	f7ff ff22 	bl	80063f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	e000ed00 	.word	0xe000ed00
 80065c4:	410fc271 	.word	0x410fc271
 80065c8:	410fc270 	.word	0x410fc270
 80065cc:	e000e400 	.word	0xe000e400
 80065d0:	20000e20 	.word	0x20000e20
 80065d4:	20000e24 	.word	0x20000e24
 80065d8:	e000ed20 	.word	0xe000ed20
 80065dc:	2000000c 	.word	0x2000000c
 80065e0:	e000ef34 	.word	0xe000ef34

080065e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	607b      	str	r3, [r7, #4]
}
 80065fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065fe:	4b0f      	ldr	r3, [pc, #60]	; (800663c <vPortEnterCritical+0x58>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	4a0d      	ldr	r2, [pc, #52]	; (800663c <vPortEnterCritical+0x58>)
 8006606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <vPortEnterCritical+0x58>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d10f      	bne.n	8006630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <vPortEnterCritical+0x5c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <vPortEnterCritical+0x4c>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	603b      	str	r3, [r7, #0]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <vPortEnterCritical+0x4a>
	}
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	2000000c 	.word	0x2000000c
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <vPortExitCritical+0x50>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <vPortExitCritical+0x24>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	607b      	str	r3, [r7, #4]
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <vPortExitCritical+0x50>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3b01      	subs	r3, #1
 800666e:	4a09      	ldr	r2, [pc, #36]	; (8006694 <vPortExitCritical+0x50>)
 8006670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006672:	4b08      	ldr	r3, [pc, #32]	; (8006694 <vPortExitCritical+0x50>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d105      	bne.n	8006686 <vPortExitCritical+0x42>
 800667a:	2300      	movs	r3, #0
 800667c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f383 8811 	msr	BASEPRI, r3
}
 8006684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	2000000c 	.word	0x2000000c
	...

080066a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066a0:	f3ef 8009 	mrs	r0, PSP
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	4b15      	ldr	r3, [pc, #84]	; (8006700 <pxCurrentTCBConst>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	f01e 0f10 	tst.w	lr, #16
 80066b0:	bf08      	it	eq
 80066b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	6010      	str	r0, [r2, #0]
 80066bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066c4:	f380 8811 	msr	BASEPRI, r0
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f7fe ffc4 	bl	800565c <vTaskSwitchContext>
 80066d4:	f04f 0000 	mov.w	r0, #0
 80066d8:	f380 8811 	msr	BASEPRI, r0
 80066dc:	bc09      	pop	{r0, r3}
 80066de:	6819      	ldr	r1, [r3, #0]
 80066e0:	6808      	ldr	r0, [r1, #0]
 80066e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e6:	f01e 0f10 	tst.w	lr, #16
 80066ea:	bf08      	it	eq
 80066ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066f0:	f380 8809 	msr	PSP, r0
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	f3af 8000 	nop.w

08006700 <pxCurrentTCBConst>:
 8006700:	200007f4 	.word	0x200007f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop

08006708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	607b      	str	r3, [r7, #4]
}
 8006720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006722:	f7fe fee1 	bl	80054e8 <xTaskIncrementTick>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <xPortSysTickHandler+0x40>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	2300      	movs	r3, #0
 8006736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f383 8811 	msr	BASEPRI, r3
}
 800673e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <vPortSetupTimerInterrupt+0x34>)
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <vPortSetupTimerInterrupt+0x38>)
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800675c:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <vPortSetupTimerInterrupt+0x3c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a0a      	ldr	r2, [pc, #40]	; (800678c <vPortSetupTimerInterrupt+0x40>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	099b      	lsrs	r3, r3, #6
 8006768:	4a09      	ldr	r2, [pc, #36]	; (8006790 <vPortSetupTimerInterrupt+0x44>)
 800676a:	3b01      	subs	r3, #1
 800676c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800676e:	4b04      	ldr	r3, [pc, #16]	; (8006780 <vPortSetupTimerInterrupt+0x34>)
 8006770:	2207      	movs	r2, #7
 8006772:	601a      	str	r2, [r3, #0]
}
 8006774:	bf00      	nop
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	e000e010 	.word	0xe000e010
 8006784:	e000e018 	.word	0xe000e018
 8006788:	20000000 	.word	0x20000000
 800678c:	10624dd3 	.word	0x10624dd3
 8006790:	e000e014 	.word	0xe000e014

08006794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067a4 <vPortEnableVFP+0x10>
 8006798:	6801      	ldr	r1, [r0, #0]
 800679a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800679e:	6001      	str	r1, [r0, #0]
 80067a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067a2:	bf00      	nop
 80067a4:	e000ed88 	.word	0xe000ed88

080067a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067ae:	f3ef 8305 	mrs	r3, IPSR
 80067b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b0f      	cmp	r3, #15
 80067b8:	d914      	bls.n	80067e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067ba:	4a17      	ldr	r2, [pc, #92]	; (8006818 <vPortValidateInterruptPriority+0x70>)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067c4:	4b15      	ldr	r3, [pc, #84]	; (800681c <vPortValidateInterruptPriority+0x74>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	7afa      	ldrb	r2, [r7, #11]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d20a      	bcs.n	80067e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	607b      	str	r3, [r7, #4]
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067e4:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <vPortValidateInterruptPriority+0x78>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067ec:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <vPortValidateInterruptPriority+0x7c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d90a      	bls.n	800680a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	603b      	str	r3, [r7, #0]
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <vPortValidateInterruptPriority+0x60>
	}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	e000e3f0 	.word	0xe000e3f0
 800681c:	20000e20 	.word	0x20000e20
 8006820:	e000ed0c 	.word	0xe000ed0c
 8006824:	20000e24 	.word	0x20000e24

08006828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006834:	f7fe fd9c 	bl	8005370 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006838:	4b5b      	ldr	r3, [pc, #364]	; (80069a8 <pvPortMalloc+0x180>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006840:	f000 f920 	bl	8006a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006844:	4b59      	ldr	r3, [pc, #356]	; (80069ac <pvPortMalloc+0x184>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 8093 	bne.w	8006978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01d      	beq.n	8006894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006858:	2208      	movs	r2, #8
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	2b00      	cmp	r3, #0
 8006868:	d014      	beq.n	8006894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f023 0307 	bic.w	r3, r3, #7
 8006870:	3308      	adds	r3, #8
 8006872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <pvPortMalloc+0x6c>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	617b      	str	r3, [r7, #20]
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d06e      	beq.n	8006978 <pvPortMalloc+0x150>
 800689a:	4b45      	ldr	r3, [pc, #276]	; (80069b0 <pvPortMalloc+0x188>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d869      	bhi.n	8006978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068a4:	4b43      	ldr	r3, [pc, #268]	; (80069b4 <pvPortMalloc+0x18c>)
 80068a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068a8:	4b42      	ldr	r3, [pc, #264]	; (80069b4 <pvPortMalloc+0x18c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ae:	e004      	b.n	80068ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d903      	bls.n	80068cc <pvPortMalloc+0xa4>
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f1      	bne.n	80068b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068cc:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <pvPortMalloc+0x180>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d050      	beq.n	8006978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2208      	movs	r2, #8
 80068dc:	4413      	add	r3, r2
 80068de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	2308      	movs	r3, #8
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d91f      	bls.n	8006938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4413      	add	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <pvPortMalloc+0xf8>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	613b      	str	r3, [r7, #16]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006932:	69b8      	ldr	r0, [r7, #24]
 8006934:	f000 f908 	bl	8006b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006938:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <pvPortMalloc+0x188>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	4a1b      	ldr	r2, [pc, #108]	; (80069b0 <pvPortMalloc+0x188>)
 8006944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006946:	4b1a      	ldr	r3, [pc, #104]	; (80069b0 <pvPortMalloc+0x188>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <pvPortMalloc+0x190>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d203      	bcs.n	800695a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006952:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <pvPortMalloc+0x188>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <pvPortMalloc+0x190>)
 8006958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <pvPortMalloc+0x184>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	431a      	orrs	r2, r3
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <pvPortMalloc+0x194>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	4a11      	ldr	r2, [pc, #68]	; (80069bc <pvPortMalloc+0x194>)
 8006976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006978:	f7fe fd08 	bl	800538c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <pvPortMalloc+0x174>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60fb      	str	r3, [r7, #12]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <pvPortMalloc+0x172>
	return pvReturn;
 800699c:	69fb      	ldr	r3, [r7, #28]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3728      	adds	r7, #40	; 0x28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	200019e8 	.word	0x200019e8
 80069ac:	200019fc 	.word	0x200019fc
 80069b0:	200019ec 	.word	0x200019ec
 80069b4:	200019e0 	.word	0x200019e0
 80069b8:	200019f0 	.word	0x200019f0
 80069bc:	200019f4 	.word	0x200019f4

080069c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d04d      	beq.n	8006a6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069d2:	2308      	movs	r3, #8
 80069d4:	425b      	negs	r3, r3
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4413      	add	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <vPortFree+0xb8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10a      	bne.n	8006a04 <vPortFree+0x44>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60fb      	str	r3, [r7, #12]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <vPortFree+0x62>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	60bb      	str	r3, [r7, #8]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <vPortFree+0xb8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01e      	beq.n	8006a6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d11a      	bne.n	8006a6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <vPortFree+0xb8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	401a      	ands	r2, r3
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a48:	f7fe fc92 	bl	8005370 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <vPortFree+0xbc>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4413      	add	r3, r2
 8006a56:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <vPortFree+0xbc>)
 8006a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a5a:	6938      	ldr	r0, [r7, #16]
 8006a5c:	f000 f874 	bl	8006b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <vPortFree+0xc0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3301      	adds	r3, #1
 8006a66:	4a06      	ldr	r2, [pc, #24]	; (8006a80 <vPortFree+0xc0>)
 8006a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a6a:	f7fe fc8f 	bl	800538c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a6e:	bf00      	nop
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	200019fc 	.word	0x200019fc
 8006a7c:	200019ec 	.word	0x200019ec
 8006a80:	200019f8 	.word	0x200019f8

08006a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <prvHeapInit+0xac>)
 8006a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00c      	beq.n	8006ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3307      	adds	r3, #7
 8006aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0307 	bic.w	r3, r3, #7
 8006aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <prvHeapInit+0xac>)
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006abc:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <prvHeapInit+0xb0>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ac2:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <prvHeapInit+0xb0>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0307 	bic.w	r3, r3, #7
 8006ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <prvHeapInit+0xb4>)
 8006ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <prvHeapInit+0xb4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2200      	movs	r2, #0
 8006aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aee:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <prvHeapInit+0xb4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b04:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <prvHeapInit+0xb4>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <prvHeapInit+0xb8>)
 8006b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <prvHeapInit+0xbc>)
 8006b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <prvHeapInit+0xc0>)
 8006b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	20000e28 	.word	0x20000e28
 8006b34:	200019e0 	.word	0x200019e0
 8006b38:	200019e8 	.word	0x200019e8
 8006b3c:	200019f0 	.word	0x200019f0
 8006b40:	200019ec 	.word	0x200019ec
 8006b44:	200019fc 	.word	0x200019fc

08006b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b50:	4b28      	ldr	r3, [pc, #160]	; (8006bf4 <prvInsertBlockIntoFreeList+0xac>)
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	e002      	b.n	8006b5c <prvInsertBlockIntoFreeList+0x14>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d8f7      	bhi.n	8006b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	4413      	add	r3, r2
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d108      	bne.n	8006b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	441a      	add	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	441a      	add	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d118      	bne.n	8006bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d00d      	beq.n	8006bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e008      	b.n	8006bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e003      	b.n	8006bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d002      	beq.n	8006be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	200019e0 	.word	0x200019e0
 8006bf8:	200019e8 	.word	0x200019e8

08006bfc <_ZdlPvj>:
 8006bfc:	f000 b803 	b.w	8006c06 <_ZdlPv>

08006c00 <__cxa_pure_virtual>:
 8006c00:	b508      	push	{r3, lr}
 8006c02:	f000 f80f 	bl	8006c24 <_ZSt9terminatev>

08006c06 <_ZdlPv>:
 8006c06:	f000 b843 	b.w	8006c90 <free>

08006c0a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006c0a:	b508      	push	{r3, lr}
 8006c0c:	4780      	blx	r0
 8006c0e:	f000 f80e 	bl	8006c2e <abort>
	...

08006c14 <_ZSt13get_terminatev>:
 8006c14:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <_ZSt13get_terminatev+0xc>)
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	f3bf 8f5b 	dmb	ish
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	20000010 	.word	0x20000010

08006c24 <_ZSt9terminatev>:
 8006c24:	b508      	push	{r3, lr}
 8006c26:	f7ff fff5 	bl	8006c14 <_ZSt13get_terminatev>
 8006c2a:	f7ff ffee 	bl	8006c0a <_ZN10__cxxabiv111__terminateEPFvvE>

08006c2e <abort>:
 8006c2e:	b508      	push	{r3, lr}
 8006c30:	2006      	movs	r0, #6
 8006c32:	f000 f8c3 	bl	8006dbc <raise>
 8006c36:	2001      	movs	r0, #1
 8006c38:	f7f9 ff06 	bl	8000a48 <_exit>

08006c3c <__errno>:
 8006c3c:	4b01      	ldr	r3, [pc, #4]	; (8006c44 <__errno+0x8>)
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20000014 	.word	0x20000014

08006c48 <__libc_init_array>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	4d0d      	ldr	r5, [pc, #52]	; (8006c80 <__libc_init_array+0x38>)
 8006c4c:	4c0d      	ldr	r4, [pc, #52]	; (8006c84 <__libc_init_array+0x3c>)
 8006c4e:	1b64      	subs	r4, r4, r5
 8006c50:	10a4      	asrs	r4, r4, #2
 8006c52:	2600      	movs	r6, #0
 8006c54:	42a6      	cmp	r6, r4
 8006c56:	d109      	bne.n	8006c6c <__libc_init_array+0x24>
 8006c58:	4d0b      	ldr	r5, [pc, #44]	; (8006c88 <__libc_init_array+0x40>)
 8006c5a:	4c0c      	ldr	r4, [pc, #48]	; (8006c8c <__libc_init_array+0x44>)
 8006c5c:	f000 f8d8 	bl	8006e10 <_init>
 8006c60:	1b64      	subs	r4, r4, r5
 8006c62:	10a4      	asrs	r4, r4, #2
 8006c64:	2600      	movs	r6, #0
 8006c66:	42a6      	cmp	r6, r4
 8006c68:	d105      	bne.n	8006c76 <__libc_init_array+0x2e>
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c70:	4798      	blx	r3
 8006c72:	3601      	adds	r6, #1
 8006c74:	e7ee      	b.n	8006c54 <__libc_init_array+0xc>
 8006c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7a:	4798      	blx	r3
 8006c7c:	3601      	adds	r6, #1
 8006c7e:	e7f2      	b.n	8006c66 <__libc_init_array+0x1e>
 8006c80:	08007090 	.word	0x08007090
 8006c84:	08007090 	.word	0x08007090
 8006c88:	08007090 	.word	0x08007090
 8006c8c:	08007098 	.word	0x08007098

08006c90 <free>:
 8006c90:	4b02      	ldr	r3, [pc, #8]	; (8006c9c <free+0xc>)
 8006c92:	4601      	mov	r1, r0
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	f000 b819 	b.w	8006ccc <_free_r>
 8006c9a:	bf00      	nop
 8006c9c:	20000014 	.word	0x20000014

08006ca0 <memcpy>:
 8006ca0:	440a      	add	r2, r1
 8006ca2:	4291      	cmp	r1, r2
 8006ca4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ca8:	d100      	bne.n	8006cac <memcpy+0xc>
 8006caa:	4770      	bx	lr
 8006cac:	b510      	push	{r4, lr}
 8006cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cb6:	4291      	cmp	r1, r2
 8006cb8:	d1f9      	bne.n	8006cae <memcpy+0xe>
 8006cba:	bd10      	pop	{r4, pc}

08006cbc <memset>:
 8006cbc:	4402      	add	r2, r0
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d100      	bne.n	8006cc6 <memset+0xa>
 8006cc4:	4770      	bx	lr
 8006cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cca:	e7f9      	b.n	8006cc0 <memset+0x4>

08006ccc <_free_r>:
 8006ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cce:	2900      	cmp	r1, #0
 8006cd0:	d048      	beq.n	8006d64 <_free_r+0x98>
 8006cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd6:	9001      	str	r0, [sp, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f1a1 0404 	sub.w	r4, r1, #4
 8006cde:	bfb8      	it	lt
 8006ce0:	18e4      	addlt	r4, r4, r3
 8006ce2:	f000 f887 	bl	8006df4 <__malloc_lock>
 8006ce6:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <_free_r+0x9c>)
 8006ce8:	9801      	ldr	r0, [sp, #4]
 8006cea:	6813      	ldr	r3, [r2, #0]
 8006cec:	4615      	mov	r5, r2
 8006cee:	b933      	cbnz	r3, 8006cfe <_free_r+0x32>
 8006cf0:	6063      	str	r3, [r4, #4]
 8006cf2:	6014      	str	r4, [r2, #0]
 8006cf4:	b003      	add	sp, #12
 8006cf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cfa:	f000 b881 	b.w	8006e00 <__malloc_unlock>
 8006cfe:	42a3      	cmp	r3, r4
 8006d00:	d90b      	bls.n	8006d1a <_free_r+0x4e>
 8006d02:	6821      	ldr	r1, [r4, #0]
 8006d04:	1862      	adds	r2, r4, r1
 8006d06:	4293      	cmp	r3, r2
 8006d08:	bf04      	itt	eq
 8006d0a:	681a      	ldreq	r2, [r3, #0]
 8006d0c:	685b      	ldreq	r3, [r3, #4]
 8006d0e:	6063      	str	r3, [r4, #4]
 8006d10:	bf04      	itt	eq
 8006d12:	1852      	addeq	r2, r2, r1
 8006d14:	6022      	streq	r2, [r4, #0]
 8006d16:	602c      	str	r4, [r5, #0]
 8006d18:	e7ec      	b.n	8006cf4 <_free_r+0x28>
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	b10b      	cbz	r3, 8006d24 <_free_r+0x58>
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	d9fa      	bls.n	8006d1a <_free_r+0x4e>
 8006d24:	6811      	ldr	r1, [r2, #0]
 8006d26:	1855      	adds	r5, r2, r1
 8006d28:	42a5      	cmp	r5, r4
 8006d2a:	d10b      	bne.n	8006d44 <_free_r+0x78>
 8006d2c:	6824      	ldr	r4, [r4, #0]
 8006d2e:	4421      	add	r1, r4
 8006d30:	1854      	adds	r4, r2, r1
 8006d32:	42a3      	cmp	r3, r4
 8006d34:	6011      	str	r1, [r2, #0]
 8006d36:	d1dd      	bne.n	8006cf4 <_free_r+0x28>
 8006d38:	681c      	ldr	r4, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	6053      	str	r3, [r2, #4]
 8006d3e:	4421      	add	r1, r4
 8006d40:	6011      	str	r1, [r2, #0]
 8006d42:	e7d7      	b.n	8006cf4 <_free_r+0x28>
 8006d44:	d902      	bls.n	8006d4c <_free_r+0x80>
 8006d46:	230c      	movs	r3, #12
 8006d48:	6003      	str	r3, [r0, #0]
 8006d4a:	e7d3      	b.n	8006cf4 <_free_r+0x28>
 8006d4c:	6825      	ldr	r5, [r4, #0]
 8006d4e:	1961      	adds	r1, r4, r5
 8006d50:	428b      	cmp	r3, r1
 8006d52:	bf04      	itt	eq
 8006d54:	6819      	ldreq	r1, [r3, #0]
 8006d56:	685b      	ldreq	r3, [r3, #4]
 8006d58:	6063      	str	r3, [r4, #4]
 8006d5a:	bf04      	itt	eq
 8006d5c:	1949      	addeq	r1, r1, r5
 8006d5e:	6021      	streq	r1, [r4, #0]
 8006d60:	6054      	str	r4, [r2, #4]
 8006d62:	e7c7      	b.n	8006cf4 <_free_r+0x28>
 8006d64:	b003      	add	sp, #12
 8006d66:	bd30      	pop	{r4, r5, pc}
 8006d68:	20001a00 	.word	0x20001a00

08006d6c <_raise_r>:
 8006d6c:	291f      	cmp	r1, #31
 8006d6e:	b538      	push	{r3, r4, r5, lr}
 8006d70:	4604      	mov	r4, r0
 8006d72:	460d      	mov	r5, r1
 8006d74:	d904      	bls.n	8006d80 <_raise_r+0x14>
 8006d76:	2316      	movs	r3, #22
 8006d78:	6003      	str	r3, [r0, #0]
 8006d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d82:	b112      	cbz	r2, 8006d8a <_raise_r+0x1e>
 8006d84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d88:	b94b      	cbnz	r3, 8006d9e <_raise_r+0x32>
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 f830 	bl	8006df0 <_getpid_r>
 8006d90:	462a      	mov	r2, r5
 8006d92:	4601      	mov	r1, r0
 8006d94:	4620      	mov	r0, r4
 8006d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d9a:	f000 b817 	b.w	8006dcc <_kill_r>
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d00a      	beq.n	8006db8 <_raise_r+0x4c>
 8006da2:	1c59      	adds	r1, r3, #1
 8006da4:	d103      	bne.n	8006dae <_raise_r+0x42>
 8006da6:	2316      	movs	r3, #22
 8006da8:	6003      	str	r3, [r0, #0]
 8006daa:	2001      	movs	r0, #1
 8006dac:	e7e7      	b.n	8006d7e <_raise_r+0x12>
 8006dae:	2400      	movs	r4, #0
 8006db0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006db4:	4628      	mov	r0, r5
 8006db6:	4798      	blx	r3
 8006db8:	2000      	movs	r0, #0
 8006dba:	e7e0      	b.n	8006d7e <_raise_r+0x12>

08006dbc <raise>:
 8006dbc:	4b02      	ldr	r3, [pc, #8]	; (8006dc8 <raise+0xc>)
 8006dbe:	4601      	mov	r1, r0
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	f7ff bfd3 	b.w	8006d6c <_raise_r>
 8006dc6:	bf00      	nop
 8006dc8:	20000014 	.word	0x20000014

08006dcc <_kill_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4d07      	ldr	r5, [pc, #28]	; (8006dec <_kill_r+0x20>)
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	602b      	str	r3, [r5, #0]
 8006dda:	f7f9 fe25 	bl	8000a28 <_kill>
 8006dde:	1c43      	adds	r3, r0, #1
 8006de0:	d102      	bne.n	8006de8 <_kill_r+0x1c>
 8006de2:	682b      	ldr	r3, [r5, #0]
 8006de4:	b103      	cbz	r3, 8006de8 <_kill_r+0x1c>
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	bd38      	pop	{r3, r4, r5, pc}
 8006dea:	bf00      	nop
 8006dec:	20001a94 	.word	0x20001a94

08006df0 <_getpid_r>:
 8006df0:	f7f9 be12 	b.w	8000a18 <_getpid>

08006df4 <__malloc_lock>:
 8006df4:	4801      	ldr	r0, [pc, #4]	; (8006dfc <__malloc_lock+0x8>)
 8006df6:	f000 b809 	b.w	8006e0c <__retarget_lock_acquire_recursive>
 8006dfa:	bf00      	nop
 8006dfc:	20001a9c 	.word	0x20001a9c

08006e00 <__malloc_unlock>:
 8006e00:	4801      	ldr	r0, [pc, #4]	; (8006e08 <__malloc_unlock+0x8>)
 8006e02:	f000 b804 	b.w	8006e0e <__retarget_lock_release_recursive>
 8006e06:	bf00      	nop
 8006e08:	20001a9c 	.word	0x20001a9c

08006e0c <__retarget_lock_acquire_recursive>:
 8006e0c:	4770      	bx	lr

08006e0e <__retarget_lock_release_recursive>:
 8006e0e:	4770      	bx	lr

08006e10 <_init>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr

08006e1c <_fini>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	bf00      	nop
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr
