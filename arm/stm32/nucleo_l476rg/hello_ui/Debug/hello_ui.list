
hello_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e8  080063e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063f0  080063f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a0c  20000010  08006410  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a1c  08006410  00021a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4ef  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bd  00000000  00000000  0003d52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  00040cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  000423a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051ee  00000000  00000000  00043928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173a6  00000000  00000000  00048b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe112  00000000  00000000  0005febc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015dfce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc0  00000000  00000000  0015e024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006330 	.word	0x08006330

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006330 	.word	0x08006330

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb82 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8d0 	bl	8000678 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004d8:	f000 f89a 	bl	8000610 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f003 f99e 	bl	800381c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <main+0x30>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x34>)
 80004e6:	f003 f9e3 	bl	80038b0 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <main+0x38>)
 80004ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f0:	f003 f9b8 	bl	8003864 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x2c>
 80004f6:	bf00      	nop
 80004f8:	0800637c 	.word	0x0800637c
 80004fc:	08000729 	.word	0x08000729
 8000500:	200000b0 	.word	0x200000b0

08000504 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b0b8      	sub	sp, #224	; 0xe0
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f005 ff04 	bl	8006320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2288      	movs	r2, #136	; 0x88
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f005 fef6 	bl	8006320 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	2303      	movs	r3, #3
 800054a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000554:	230a      	movs	r3, #10
 8000556:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800055a:	2307      	movs	r3, #7
 800055c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fe91 	bl	8001298 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000586:	f000 f8f9 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2303      	movs	r3, #3
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005ac:	2104      	movs	r1, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fa58 	bl	8001a64 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80005c4:	f000 f8da 	bl	800077c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fc7c 	bl	8001ed0 <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf14      	ite	ne
 80005de:	2301      	movne	r3, #1
 80005e0:	2300      	moveq	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 80005e8:	f000 f8c8 	bl	800077c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f0:	f000 fdfc 	bl	80011ec <HAL_PWREx_ControlVoltageScaling>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000604:	f000 f8ba 	bl	800077c <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	37e0      	adds	r7, #224	; 0xe0
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000654:	f002 fbca 	bl	8002dec <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf14      	ite	ne
 800065e:	2301      	movne	r3, #1
 8000660:	2300      	moveq	r3, #0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000668:	f000 f888 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40004400 	.word	0x40004400

08000678 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a23      	ldr	r2, [pc, #140]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a1d      	ldr	r2, [pc, #116]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <_ZL12MX_GPIO_Initv+0xac>)
 80006f6:	f000 fd39 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <_ZL12MX_GPIO_Initv+0xac>)
 8000714:	f000 fb80 	bl	8000e18 <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3728      	adds	r7, #40	; 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	48000800 	.word	0x48000800

08000728 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	HAL_UART_Transmit(&huart2, (uint8_t *)("hello\r\n"), sizeof("hello\r\n"), 100);
 8000730:	2364      	movs	r3, #100	; 0x64
 8000732:	2208      	movs	r2, #8
 8000734:	4905      	ldr	r1, [pc, #20]	; (800074c <_Z16StartDefaultTaskPv+0x24>)
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <_Z16StartDefaultTaskPv+0x28>)
 8000738:	f002 fba6 	bl	8002e88 <HAL_UART_Transmit>
  	xUI.test();
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <_Z16StartDefaultTaskPv+0x2c>)
 800073e:	f000 fa07 	bl	8000b50 <_ZN2UI4testEv>
    osDelay(250);
 8000742:	20fa      	movs	r0, #250	; 0xfa
 8000744:	f003 f946 	bl	80039d4 <osDelay>
  	HAL_UART_Transmit(&huart2, (uint8_t *)("hello\r\n"), sizeof("hello\r\n"), 100);
 8000748:	e7f2      	b.n	8000730 <_Z16StartDefaultTaskPv+0x8>
 800074a:	bf00      	nop
 800074c:	08006354 	.word	0x08006354
 8000750:	2000002c 	.word	0x2000002c
 8000754:	200000b4 	.word	0x200000b4

08000758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d101      	bne.n	800076e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076a:	f000 fa53 	bl	8000c14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40001000 	.word	0x40001000

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d108      	bne.n	80007aa <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800079e:	4293      	cmp	r3, r2
 80007a0:	d103      	bne.n	80007aa <_Z41__static_initialization_and_destruction_0ii+0x22>
UI xUI(&huart2);
 80007a2:	4909      	ldr	r1, [pc, #36]	; (80007c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007a6:	f000 f9a0 	bl	8000aea <_ZN2UIC1EP20__UART_HandleTypeDef>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d107      	bne.n	80007c0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d102      	bne.n	80007c0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007bc:	f000 f9b0 	bl	8000b20 <_ZN2UID1Ev>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000002c 	.word	0x2000002c
 80007cc:	200000b4 	.word	0x200000b4

080007d0 <_GLOBAL__sub_I_huart2>:
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff ffd5 	bl	8000788 <_Z41__static_initialization_and_destruction_0ii>
 80007de:	bd80      	pop	{r7, pc}

080007e0 <_GLOBAL__sub_D_huart2>:
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff ffcd 	bl	8000788 <_Z41__static_initialization_and_destruction_0ii>
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_MspInit+0x4c>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <HAL_MspInit+0x4c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6613      	str	r3, [r2, #96]	; 0x60
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_MspInit+0x4c>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <HAL_MspInit+0x4c>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6593      	str	r3, [r2, #88]	; 0x58
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_MspInit+0x4c>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	210f      	movs	r1, #15
 800082a:	f06f 0001 	mvn.w	r0, #1
 800082e:	f000 fac9 	bl	8000dc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_UART_MspInit+0x7c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d128      	bne.n	80008b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	6593      	str	r3, [r2, #88]	; 0x58
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_UART_MspInit+0x80>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_UART_MspInit+0x80>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000892:	230c      	movs	r3, #12
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a2:	2307      	movs	r3, #7
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f000 fab2 	bl	8000e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40004400 	.word	0x40004400
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	2036      	movs	r0, #54	; 0x36
 80008da:	f000 fa73 	bl	8000dc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008de:	2036      	movs	r0, #54	; 0x36
 80008e0:	f000 fa8c 	bl	8000dfc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <HAL_InitTick+0x9c>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_InitTick+0x9c>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6593      	str	r3, [r2, #88]	; 0x58
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_InitTick+0x9c>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fc:	f107 0210 	add.w	r2, r7, #16
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f001 fa50 	bl	8001dac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800090c:	f001 fa22 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8000910:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <HAL_InitTick+0xa0>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	0c9b      	lsrs	r3, r3, #18
 800091c:	3b01      	subs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_InitTick+0xa4>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <HAL_InitTick+0xa8>)
 8000924:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_InitTick+0xa4>)
 8000928:	f240 32e7 	movw	r2, #999	; 0x3e7
 800092c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_InitTick+0xa4>)
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_InitTick+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_InitTick+0xa4>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <HAL_InitTick+0xa4>)
 8000942:	f001 ff81 	bl	8002848 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d104      	bne.n	8000956 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <HAL_InitTick+0xa4>)
 800094e:	f001 ffdd 	bl	800290c <HAL_TIM_Base_Start_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000
 8000964:	431bde83 	.word	0x431bde83
 8000968:	2000198c 	.word	0x2000198c
 800096c:	40001000 	.word	0x40001000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <TIM6_DAC_IRQHandler+0x10>)
 80009a2:	f002 f823 	bl	80029ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000198c 	.word	0x2000198c

080009b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <SystemInit+0x5c>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <SystemInit+0x5c>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <SystemInit+0x60>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <SystemInit+0x60>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <SystemInit+0x60>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <SystemInit+0x60>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <SystemInit+0x60>)
 80009dc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009e0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <SystemInit+0x60>)
 80009e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <SystemInit+0x60>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <SystemInit+0x60>)
 80009f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <SystemInit+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00
 8000a10:	40021000 	.word	0x40021000

08000a14 <_ZN7UIStateC1E9EnumState>:
#include "ui.h"



// UI State
UIState::UIState(EnumState eState) : _eState(eState) {}
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_ZN7UIStateD1Ev>:
UIState::~UIState() {}
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_ZN13MainMenuStateC1Ev>:


MainMenuState::MainMenuState() : UIState(EnumState::MAIN_MENU) {}
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ffdd 	bl	8000a14 <_ZN7UIStateC1E9EnumState>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZN13MainMenuStateD1Ev>:
MainMenuState::~MainMenuState() {}
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ffdf 	bl	8000a32 <_ZN7UIStateD1Ev>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_ZN10MusicStateC1Ev>:

MusicState::MusicState() : UIState(EnumState::MUSIC) {}
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ffc2 	bl	8000a14 <_ZN7UIStateC1E9EnumState>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_ZN10MusicStateD1Ev>:
MusicState::~MusicState() {}
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ffc4 	bl	8000a32 <_ZN7UIStateD1Ev>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_ZN13SettingsStateC1Ev>:

SettingsState::SettingsState() : UIState(EnumState::SETTINGS) {}
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ffa7 	bl	8000a14 <_ZN7UIStateC1E9EnumState>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_ZN13SettingsStateD1Ev>:
SettingsState::~SettingsState() {}
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ffa9 	bl	8000a32 <_ZN7UIStateD1Ev>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_ZN2UIC1EP20__UART_HandleTypeDef>:

// UI
UI::UI() : _xMainMenu(), _xMusic(), _xSettings(), _pxUART(nullptr) {}


UI::UI(UART_HandleTypeDef *pxUART) : _xMainMenu(), _xMusic(), _xSettings(), _pxUART(pxUART) {}
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ffa6 	bl	8000a48 <_ZN13MainMenuStateC1Ev>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3304      	adds	r3, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ffbc 	bl	8000a7e <_ZN10MusicStateC1Ev>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3308      	adds	r3, #8
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffd2 	bl	8000ab4 <_ZN13SettingsStateC1Ev>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <_ZN2UID1Ev>:


UI::~UI() {}
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3308      	adds	r3, #8
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ffcf 	bl	8000ad0 <_ZN13SettingsStateD1Ev>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ffaf 	bl	8000a9a <_ZN10MusicStateD1Ev>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff90 	bl	8000a64 <_ZN13MainMenuStateD1Ev>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <_ZN2UI4testEv>:


void UI::test(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <_ZN2UI4testEv+0x28>)
 8000b5e:	f000 fb1d 	bl	800119c <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("test\r\n"), sizeof("test\r\n"), 100);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68d8      	ldr	r0, [r3, #12]
 8000b66:	2364      	movs	r3, #100	; 0x64
 8000b68:	2207      	movs	r2, #7
 8000b6a:	4904      	ldr	r1, [pc, #16]	; (8000b7c <_ZN2UI4testEv+0x2c>)
 8000b6c:	f002 f98c 	bl	8002e88 <HAL_UART_Transmit>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	48000800 	.word	0x48000800
 8000b7c:	0800635c 	.word	0x0800635c

08000b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b84:	f7ff ff14 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b8a:	e003      	b.n	8000b94 <LoopCopyDataInit>

08000b8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b92:	3104      	adds	r1, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b94:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b9c:	d3f6      	bcc.n	8000b8c <CopyDataInit>
	ldr	r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ba0:	e002      	b.n	8000ba8 <LoopFillZerobss>

08000ba2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ba2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ba4:	f842 3b04 	str.w	r3, [r2], #4

08000ba8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <LoopForever+0x16>)
	cmp	r2, r3
 8000baa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bac:	d3f9      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f005 fb85 	bl	80062bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb2:	f7ff fc89 	bl	80004c8 <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bbc:	08006400 	.word	0x08006400
	ldr	r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bc4:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000bc8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000bcc:	20001a1c 	.word	0x20001a1c

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_Init+0x3c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <HAL_Init+0x3c>)
 8000be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bea:	2003      	movs	r0, #3
 8000bec:	f000 f8df 	bl	8000dae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fe67 	bl	80008c4 <HAL_InitTick>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	e001      	b.n	8000c06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c02:	f7ff fdf5 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c06:	79fb      	ldrb	r3, [r7, #7]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	200019d8 	.word	0x200019d8

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	200019d8 	.word	0x200019d8

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <__NVIC_EnableIRQ+0x38>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ff4c 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd6:	f7ff ff61 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000dda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	6978      	ldr	r0, [r7, #20]
 8000de2:	f7ff ffb1 	bl	8000d48 <NVIC_EncodePriority>
 8000de6:	4602      	mov	r2, r0
 8000de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff80 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000df4:	bf00      	nop
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff54 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	e17f      	b.n	8001128 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8171 	beq.w	8001122 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d00b      	beq.n	8000e60 <HAL_GPIO_Init+0x48>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e54:	2b11      	cmp	r3, #17
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b12      	cmp	r3, #18
 8000e5e:	d130      	bne.n	8000ec2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e96:	2201      	movs	r2, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 0201 	and.w	r2, r3, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d118      	bne.n	8000f00 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	08db      	lsrs	r3, r3, #3
 8000eea:	f003 0201 	and.w	r2, r3, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x128>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b12      	cmp	r3, #18
 8000f3e:	d123      	bne.n	8000f88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	6939      	ldr	r1, [r7, #16]
 8000f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0203 	and.w	r2, r3, #3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 80ac 	beq.w	8001122 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4b5f      	ldr	r3, [pc, #380]	; (8001148 <HAL_GPIO_Init+0x330>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	4a5e      	ldr	r2, [pc, #376]	; (8001148 <HAL_GPIO_Init+0x330>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd6:	4b5c      	ldr	r3, [pc, #368]	; (8001148 <HAL_GPIO_Init+0x330>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe2:	4a5a      	ldr	r2, [pc, #360]	; (800114c <HAL_GPIO_Init+0x334>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800100c:	d025      	beq.n	800105a <HAL_GPIO_Init+0x242>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x338>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d01f      	beq.n	8001056 <HAL_GPIO_Init+0x23e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <HAL_GPIO_Init+0x33c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d019      	beq.n	8001052 <HAL_GPIO_Init+0x23a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <HAL_GPIO_Init+0x340>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0x236>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <HAL_GPIO_Init+0x344>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00d      	beq.n	800104a <HAL_GPIO_Init+0x232>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4b      	ldr	r2, [pc, #300]	; (8001160 <HAL_GPIO_Init+0x348>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d007      	beq.n	8001046 <HAL_GPIO_Init+0x22e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4a      	ldr	r2, [pc, #296]	; (8001164 <HAL_GPIO_Init+0x34c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_GPIO_Init+0x22a>
 800103e:	2306      	movs	r3, #6
 8001040:	e00c      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001042:	2307      	movs	r3, #7
 8001044:	e00a      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001046:	2305      	movs	r3, #5
 8001048:	e008      	b.n	800105c <HAL_GPIO_Init+0x244>
 800104a:	2304      	movs	r3, #4
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x244>
 800104e:	2303      	movs	r3, #3
 8001050:	e004      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001052:	2302      	movs	r3, #2
 8001054:	e002      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <HAL_GPIO_Init+0x244>
 800105a:	2300      	movs	r3, #0
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	f002 0203 	and.w	r2, r2, #3
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	4093      	lsls	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106c:	4937      	ldr	r1, [pc, #220]	; (800114c <HAL_GPIO_Init+0x334>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <HAL_GPIO_Init+0x350>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800109e:	4a32      	ldr	r2, [pc, #200]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010a4:	4b30      	ldr	r3, [pc, #192]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <HAL_GPIO_Init+0x350>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa22 f303 	lsr.w	r3, r2, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	f47f ae78 	bne.w	8000e28 <HAL_GPIO_Init+0x10>
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	48000c00 	.word	0x48000c00
 800115c:	48001000 	.word	0x48001000
 8001160:	48001400 	.word	0x48001400
 8001164:	48001800 	.word	0x48001800
 8001168:	40010400 	.word	0x40010400

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001188:	e002      	b.n	8001190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4013      	ands	r3, r2
 80011b4:	041a      	lsls	r2, r3, #16
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43d9      	mvns	r1, r3
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	400b      	ands	r3, r1
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40007000 	.word	0x40007000

080011ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fa:	d130      	bne.n	800125e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001208:	d038      	beq.n	800127c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001218:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2232      	movs	r2, #50	; 0x32
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9b      	lsrs	r3, r3, #18
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001230:	e002      	b.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3b01      	subs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001244:	d102      	bne.n	800124c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f2      	bne.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001258:	d110      	bne.n	800127c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e00f      	b.n	800127e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126a:	d007      	beq.n	800127c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001274:	4a05      	ldr	r2, [pc, #20]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40007000 	.word	0x40007000
 8001290:	20000000 	.word	0x20000000
 8001294:	431bde83 	.word	0x431bde83

08001298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e3d4      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012aa:	4ba1      	ldr	r3, [pc, #644]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b4:	4b9e      	ldr	r3, [pc, #632]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 80e4 	beq.w	8001494 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <HAL_RCC_OscConfig+0x4a>
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b0c      	cmp	r3, #12
 80012d6:	f040 808b 	bne.w	80013f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	f040 8087 	bne.w	80013f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e2:	4b93      	ldr	r3, [pc, #588]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x62>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e3ac      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	4b8c      	ldr	r3, [pc, #560]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d004      	beq.n	8001314 <HAL_RCC_OscConfig+0x7c>
 800130a:	4b89      	ldr	r3, [pc, #548]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001312:	e005      	b.n	8001320 <HAL_RCC_OscConfig+0x88>
 8001314:	4b86      	ldr	r3, [pc, #536]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001320:	4293      	cmp	r3, r2
 8001322:	d223      	bcs.n	800136c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fd71 	bl	8001e10 <RCC_SetFlashLatencyFromMSIRange>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e38d      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001338:	4b7d      	ldr	r3, [pc, #500]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a7c      	ldr	r2, [pc, #496]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b7a      	ldr	r3, [pc, #488]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4977      	ldr	r1, [pc, #476]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001356:	4b76      	ldr	r3, [pc, #472]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	4972      	ldr	r1, [pc, #456]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
 800136a:	e025      	b.n	80013b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136c:	4b70      	ldr	r3, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a6f      	ldr	r2, [pc, #444]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b6d      	ldr	r3, [pc, #436]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	496a      	ldr	r1, [pc, #424]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138a:	4b69      	ldr	r3, [pc, #420]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	4965      	ldr	r1, [pc, #404]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d109      	bne.n	80013b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fd31 	bl	8001e10 <RCC_SetFlashLatencyFromMSIRange>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e34d      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013b8:	f000 fc36 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 80013bc:	4602      	mov	r2, r0
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	495a      	ldr	r1, [pc, #360]	; (8001534 <HAL_RCC_OscConfig+0x29c>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	4a58      	ldr	r2, [pc, #352]	; (8001538 <HAL_RCC_OscConfig+0x2a0>)
 80013d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013d8:	4b58      	ldr	r3, [pc, #352]	; (800153c <HAL_RCC_OscConfig+0x2a4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fa71 	bl	80008c4 <HAL_InitTick>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d052      	beq.n	8001492 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	e331      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d032      	beq.n	800145e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013f8:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001404:	f7ff fc1a 	bl	8000c3c <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140c:	f7ff fc16 	bl	8000c3c <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e31a      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800141e:	4b44      	ldr	r3, [pc, #272]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a40      	ldr	r2, [pc, #256]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	493b      	ldr	r1, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	4936      	ldr	r1, [pc, #216]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
 800145c:	e01a      	b.n	8001494 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a33      	ldr	r2, [pc, #204]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800146a:	f7ff fbe7 	bl	8000c3c <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001472:	f7ff fbe3 	bl	8000c3c <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e2e7      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001484:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x1da>
 8001490:	e000      	b.n	8001494 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001492:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d074      	beq.n	800158a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d005      	beq.n	80014b2 <HAL_RCC_OscConfig+0x21a>
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b0c      	cmp	r3, #12
 80014aa:	d10e      	bne.n	80014ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d10b      	bne.n	80014ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d064      	beq.n	8001588 <HAL_RCC_OscConfig+0x2f0>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d160      	bne.n	8001588 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e2c4      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x24a>
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a15      	ldr	r2, [pc, #84]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e01d      	b.n	800151e <HAL_RCC_OscConfig+0x286>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0x26e>
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e00b      	b.n	800151e <HAL_RCC_OscConfig+0x286>
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800150c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01c      	beq.n	8001560 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fb89 	bl	8000c3c <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800152c:	e011      	b.n	8001552 <HAL_RCC_OscConfig+0x2ba>
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	080063a0 	.word	0x080063a0
 8001538:	20000000 	.word	0x20000000
 800153c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fb7c 	bl	8000c3c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	; 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e280      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001552:	4baf      	ldr	r3, [pc, #700]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x2a8>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fb6c 	bl	8000c3c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fb68 	bl	8000c3c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	; 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e26c      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800157a:	4ba5      	ldr	r3, [pc, #660]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x2d0>
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d060      	beq.n	8001658 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2b04      	cmp	r3, #4
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_OscConfig+0x310>
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2b0c      	cmp	r3, #12
 80015a0:	d119      	bne.n	80015d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d116      	bne.n	80015d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a8:	4b99      	ldr	r3, [pc, #612]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_OscConfig+0x328>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e249      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b93      	ldr	r3, [pc, #588]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	4990      	ldr	r1, [pc, #576]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d4:	e040      	b.n	8001658 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d023      	beq.n	8001626 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015de:	4b8c      	ldr	r3, [pc, #560]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a8b      	ldr	r2, [pc, #556]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fb27 	bl	8000c3c <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fb23 	bl	8000c3c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e227      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001604:	4b82      	ldr	r3, [pc, #520]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b7f      	ldr	r3, [pc, #508]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	497c      	ldr	r1, [pc, #496]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	e018      	b.n	8001658 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b7a      	ldr	r3, [pc, #488]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a79      	ldr	r2, [pc, #484]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800162c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff fb03 	bl	8000c3c <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff faff 	bl	8000c3c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e203      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800164c:	4b70      	ldr	r3, [pc, #448]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d03c      	beq.n	80016de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166c:	4b68      	ldr	r3, [pc, #416]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800166e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001672:	4a67      	ldr	r2, [pc, #412]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167c:	f7ff fade 	bl	8000c3c <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff fada 	bl	8000c3c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1de      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001696:	4b5e      	ldr	r3, [pc, #376]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0ef      	beq.n	8001684 <HAL_RCC_OscConfig+0x3ec>
 80016a4:	e01b      	b.n	80016de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a6:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80016a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ac:	4a58      	ldr	r2, [pc, #352]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fac1 	bl	8000c3c <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fabd 	bl	8000c3c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1c1      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d0:	4b4f      	ldr	r3, [pc, #316]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80016d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ef      	bne.n	80016be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80a6 	beq.w	8001838 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016f0:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10d      	bne.n	8001718 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	4b44      	ldr	r3, [pc, #272]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	4a43      	ldr	r2, [pc, #268]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6593      	str	r3, [r2, #88]	; 0x58
 8001708:	4b41      	ldr	r3, [pc, #260]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001714:	2301      	movs	r3, #1
 8001716:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001718:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <HAL_RCC_OscConfig+0x57c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d118      	bne.n	8001756 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001724:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_OscConfig+0x57c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a3a      	ldr	r2, [pc, #232]	; (8001814 <HAL_RCC_OscConfig+0x57c>)
 800172a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001730:	f7ff fa84 	bl	8000c3c <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001738:	f7ff fa80 	bl	8000c3c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e184      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174a:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_RCC_OscConfig+0x57c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d108      	bne.n	8001770 <HAL_RCC_OscConfig+0x4d8>
 800175e:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001764:	4a2a      	ldr	r2, [pc, #168]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800176e:	e024      	b.n	80017ba <HAL_RCC_OscConfig+0x522>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d110      	bne.n	800179a <HAL_RCC_OscConfig+0x502>
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177e:	4a24      	ldr	r2, [pc, #144]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178e:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001798:	e00f      	b.n	80017ba <HAL_RCC_OscConfig+0x522>
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80017ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80017b2:	f023 0304 	bic.w	r3, r3, #4
 80017b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d016      	beq.n	80017f0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff fa3b 	bl	8000c3c <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff fa37 	bl	8000c3c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e139      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0ed      	beq.n	80017ca <HAL_RCC_OscConfig+0x532>
 80017ee:	e01a      	b.n	8001826 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fa24 	bl	8000c3c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f6:	e00f      	b.n	8001818 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f7ff fa20 	bl	8000c3c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d906      	bls.n	8001818 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e122      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001818:	4b90      	ldr	r3, [pc, #576]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1e8      	bne.n	80017f8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	4b8b      	ldr	r3, [pc, #556]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	4a8a      	ldr	r2, [pc, #552]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001836:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8108 	beq.w	8001a52 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	2b02      	cmp	r3, #2
 8001848:	f040 80d0 	bne.w	80019ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800184c:	4b83      	ldr	r3, [pc, #524]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	429a      	cmp	r2, r3
 800185e:	d130      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	3b01      	subs	r3, #1
 800186c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d127      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d11f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800188c:	2a07      	cmp	r2, #7
 800188e:	bf14      	ite	ne
 8001890:	2201      	movne	r2, #1
 8001892:	2200      	moveq	r2, #0
 8001894:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001896:	4293      	cmp	r3, r2
 8001898:	d113      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	3b01      	subs	r3, #1
 80018a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	085b      	lsrs	r3, r3, #1
 80018ba:	3b01      	subs	r3, #1
 80018bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d06e      	beq.n	80019a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d069      	beq.n	800199c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018c8:	4b64      	ldr	r3, [pc, #400]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018d4:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0b7      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018e4:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a5c      	ldr	r2, [pc, #368]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80018ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018f0:	f7ff f9a4 	bl	8000c3c <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff f9a0 	bl	8000c3c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0a4      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190a:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001916:	4b51      	ldr	r3, [pc, #324]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	4b51      	ldr	r3, [pc, #324]	; (8001a60 <HAL_RCC_OscConfig+0x7c8>)
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001926:	3a01      	subs	r2, #1
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001930:	0212      	lsls	r2, r2, #8
 8001932:	4311      	orrs	r1, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001938:	0852      	lsrs	r2, r2, #1
 800193a:	3a01      	subs	r2, #1
 800193c:	0552      	lsls	r2, r2, #21
 800193e:	4311      	orrs	r1, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001944:	0852      	lsrs	r2, r2, #1
 8001946:	3a01      	subs	r2, #1
 8001948:	0652      	lsls	r2, r2, #25
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001950:	0912      	lsrs	r2, r2, #4
 8001952:	0452      	lsls	r2, r2, #17
 8001954:	430a      	orrs	r2, r1
 8001956:	4941      	ldr	r1, [pc, #260]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001958:	4313      	orrs	r3, r2
 800195a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800195c:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a3e      	ldr	r2, [pc, #248]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001968:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a3b      	ldr	r2, [pc, #236]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001974:	f7ff f962 	bl	8000c3c <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f95e 	bl	8000c3c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e062      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199a:	e05a      	b.n	8001a52 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e059      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d152      	bne.n	8001a52 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2a      	ldr	r2, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a27      	ldr	r2, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019c4:	f7ff f93a 	bl	8000c3c <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f936 	bl	8000c3c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e03a      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x734>
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d02d      	beq.n	8001a4e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a10:	f023 0303 	bic.w	r3, r3, #3
 8001a14:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a10      	ldr	r2, [pc, #64]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a24:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff f909 	bl	8000c3c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7ff f905 	bl	8000c3c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e009      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x796>
 8001a4c:	e001      	b.n	8001a52 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	f99d808c 	.word	0xf99d808c

08001a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0c8      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b63      	ldr	r3, [pc, #396]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	4961      	ldr	r1, [pc, #388]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b0      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d04c      	beq.n	8001b4e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abc:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d121      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e09e      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad4:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d115      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e092      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aec:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e086      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afc:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e07e      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b0c:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 0203 	bic.w	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	493f      	ldr	r1, [pc, #252]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b1e:	f7ff f88d 	bl	8000c3c <HAL_GetTick>
 8001b22:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b26:	f7ff f889 	bl	8000c3c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e066      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 020c 	and.w	r2, r3, #12
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d1eb      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5a:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	492c      	ldr	r1, [pc, #176]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d210      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 0207 	bic.w	r2, r3, #7
 8001b82:	4924      	ldr	r1, [pc, #144]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e036      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4918      	ldr	r1, [pc, #96]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4910      	ldr	r1, [pc, #64]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bda:	f000 f825 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	490c      	ldr	r1, [pc, #48]	; (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	5ccb      	ldrb	r3, [r1, r3]
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fe60 	bl	80008c4 <HAL_InitTick>
 8001c04:	4603      	mov	r3, r0
 8001c06:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c08:	7afb      	ldrb	r3, [r7, #11]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40022000 	.word	0x40022000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	080063a0 	.word	0x080063a0
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000004 	.word	0x20000004

08001c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c36:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c40:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x34>
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d121      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d11e      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c5c:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e005      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c78:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c84:	4a2b      	ldr	r2, [pc, #172]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10d      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c98:	e00a      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	e004      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d134      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0xa6>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d003      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xac>
 8001ccc:	e005      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cd0:	617b      	str	r3, [r7, #20]
      break;
 8001cd2:	e005      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cd6:	617b      	str	r3, [r7, #20]
      break;
 8001cd8:	e002      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	617b      	str	r3, [r7, #20]
      break;
 8001cde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	3301      	adds	r3, #1
 8001cec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	fb02 f203 	mul.w	r2, r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	0e5b      	lsrs	r3, r3, #25
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	3301      	adds	r3, #1
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d20:	69bb      	ldr	r3, [r7, #24]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	080063b8 	.word	0x080063b8
 8001d38:	00f42400 	.word	0x00f42400

08001d3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000000 	.word	0x20000000

08001d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d58:	f7ff fff0 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4904      	ldr	r1, [pc, #16]	; (8001d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	080063b0 	.word	0x080063b0

08001d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d84:	f7ff ffda 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0adb      	lsrs	r3, r3, #11
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4904      	ldr	r1, [pc, #16]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	080063b0 	.word	0x080063b0

08001dac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	220f      	movs	r2, #15
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0203 	and.w	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_RCC_GetClockConfig+0x60>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0207 	and.w	r2, r3, #7
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	601a      	str	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40022000 	.word	0x40022000

08001e10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e28:	f7ff f9d2 	bl	80011d0 <HAL_PWREx_GetVoltageRange>
 8001e2c:	6178      	str	r0, [r7, #20]
 8001e2e:	e014      	b.n	8001e5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	4a24      	ldr	r2, [pc, #144]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e48:	f7ff f9c2 	bl	80011d0 <HAL_PWREx_GetVoltageRange>
 8001e4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e60:	d10b      	bne.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d919      	bls.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2ba0      	cmp	r3, #160	; 0xa0
 8001e6c:	d902      	bls.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e6e:	2302      	movs	r3, #2
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	e013      	b.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e74:	2301      	movs	r3, #1
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e010      	b.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b80      	cmp	r3, #128	; 0x80
 8001e7e:	d902      	bls.n	8001e86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e80:	2303      	movs	r3, #3
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	e00a      	b.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b80      	cmp	r3, #128	; 0x80
 8001e8a:	d102      	bne.n	8001e92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e004      	b.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b70      	cmp	r3, #112	; 0x70
 8001e96:	d101      	bne.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e98:	2301      	movs	r3, #1
 8001e9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 0207 	bic.w	r2, r3, #7
 8001ea4:	4909      	ldr	r1, [pc, #36]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40022000 	.word	0x40022000

08001ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ed8:	2300      	movs	r3, #0
 8001eda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001edc:	2300      	movs	r3, #0
 8001ede:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d041      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ef0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef4:	d02a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ef6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001efa:	d824      	bhi.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001efc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f00:	d008      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f06:	d81e      	bhi.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f10:	d010      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f12:	e018      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f14:	4b86      	ldr	r3, [pc, #536]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a85      	ldr	r2, [pc, #532]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f20:	e015      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fabb 	bl	80024a4 <RCCEx_PLLSAI1_Config>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f32:	e00c      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3320      	adds	r3, #32
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fba6 	bl	800268c <RCCEx_PLLSAI2_Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f44:	e003      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	74fb      	strb	r3, [r7, #19]
      break;
 8001f4a:	e000      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f54:	4b76      	ldr	r3, [pc, #472]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f62:	4973      	ldr	r1, [pc, #460]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f6a:	e001      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d041      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f84:	d02a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f8a:	d824      	bhi.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f90:	d008      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f96:	d81e      	bhi.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fa2:	e018      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa4:	4b62      	ldr	r3, [pc, #392]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a61      	ldr	r2, [pc, #388]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb0:	e015      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fa73 	bl	80024a4 <RCCEx_PLLSAI1_Config>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fc2:	e00c      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3320      	adds	r3, #32
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fb5e 	bl	800268c <RCCEx_PLLSAI2_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fd4:	e003      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fda:	e000      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fde:	7cfb      	ldrb	r3, [r7, #19]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fe4:	4b52      	ldr	r3, [pc, #328]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ff2:	494f      	ldr	r1, [pc, #316]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ffa:	e001      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80a0 	beq.w	800214e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002022:	2300      	movs	r3, #0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00d      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002028:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	4a40      	ldr	r2, [pc, #256]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002032:	6593      	str	r3, [r2, #88]	; 0x58
 8002034:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002040:	2301      	movs	r3, #1
 8002042:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a3a      	ldr	r2, [pc, #232]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002050:	f7fe fdf4 	bl	8000c3c <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002056:	e009      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002058:	f7fe fdf0 	bl	8000c3c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d902      	bls.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	74fb      	strb	r3, [r7, #19]
        break;
 800206a:	e005      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800206c:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ef      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d15c      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800207e:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002088:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01f      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	d019      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800209c:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	4a20      	ldr	r2, [pc, #128]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d016      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7fe fdaf 	bl	8000c3c <HAL_GetTick>
 80020de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e0:	e00b      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7fe fdab 	bl	8000c3c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d902      	bls.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	74fb      	strb	r3, [r7, #19]
            break;
 80020f8:	e006      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ec      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211e:	4904      	ldr	r1, [pc, #16]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002126:	e009      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002128:	7cfb      	ldrb	r3, [r7, #19]
 800212a:	74bb      	strb	r3, [r7, #18]
 800212c:	e006      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002138:	7cfb      	ldrb	r3, [r7, #19]
 800213a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800213c:	7c7b      	ldrb	r3, [r7, #17]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d105      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002142:	4b9e      	ldr	r3, [pc, #632]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a9d      	ldr	r2, [pc, #628]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800215a:	4b98      	ldr	r3, [pc, #608]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002160:	f023 0203 	bic.w	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	4994      	ldr	r1, [pc, #592]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800217c:	4b8f      	ldr	r3, [pc, #572]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f023 020c 	bic.w	r2, r3, #12
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	498c      	ldr	r1, [pc, #560]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800219e:	4b87      	ldr	r3, [pc, #540]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4983      	ldr	r1, [pc, #524]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021c0:	4b7e      	ldr	r3, [pc, #504]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	497b      	ldr	r1, [pc, #492]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f0:	4972      	ldr	r1, [pc, #456]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002204:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	496a      	ldr	r1, [pc, #424]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002226:	4b65      	ldr	r3, [pc, #404]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	4961      	ldr	r1, [pc, #388]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002248:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002256:	4959      	ldr	r1, [pc, #356]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226a:	4b54      	ldr	r3, [pc, #336]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002278:	4950      	ldr	r1, [pc, #320]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800228c:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	4948      	ldr	r1, [pc, #288]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ae:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	493f      	ldr	r1, [pc, #252]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d028      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d0:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022de:	4937      	ldr	r1, [pc, #220]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ee:	d106      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a31      	ldr	r2, [pc, #196]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fa:	60d3      	str	r3, [r2, #12]
 80022fc:	e011      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002306:	d10c      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	2101      	movs	r1, #1
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f8c8 	bl	80024a4 <RCCEx_PLLSAI1_Config>
 8002314:	4603      	mov	r3, r0
 8002316:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d028      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	491f      	ldr	r1, [pc, #124]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800234c:	d106      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002358:	60d3      	str	r3, [r2, #12]
 800235a:	e011      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002364:	d10c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	2101      	movs	r1, #1
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f899 	bl	80024a4 <RCCEx_PLLSAI1_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d02b      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023aa:	d109      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a02      	ldr	r2, [pc, #8]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b6:	60d3      	str	r3, [r2, #12]
 80023b8:	e014      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2101      	movs	r1, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f867 	bl	80024a4 <RCCEx_PLLSAI1_Config>
 80023d6:	4603      	mov	r3, r0
 80023d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d02f      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f0:	4b2b      	ldr	r3, [pc, #172]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023fe:	4928      	ldr	r1, [pc, #160]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800240a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800240e:	d10d      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	2102      	movs	r1, #2
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f844 	bl	80024a4 <RCCEx_PLLSAI1_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d014      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	74bb      	strb	r3, [r7, #18]
 800242a:	e011      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002434:	d10c      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3320      	adds	r3, #32
 800243a:	2102      	movs	r1, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f925 	bl	800268c <RCCEx_PLLSAI2_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002446:	7cfb      	ldrb	r3, [r7, #19]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800246a:	490d      	ldr	r1, [pc, #52]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800248e:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002496:	7cbb      	ldrb	r3, [r7, #18]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000

080024a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024b2:	4b75      	ldr	r3, [pc, #468]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d018      	beq.n	80024f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024be:	4b72      	ldr	r3, [pc, #456]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0203 	and.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d10d      	bne.n	80024ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
       ||
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024d6:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
       ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d047      	beq.n	800257a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	e044      	b.n	800257a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d018      	beq.n	800252a <RCCEx_PLLSAI1_Config+0x86>
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d825      	bhi.n	8002548 <RCCEx_PLLSAI1_Config+0xa4>
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d002      	beq.n	8002506 <RCCEx_PLLSAI1_Config+0x62>
 8002500:	2b02      	cmp	r3, #2
 8002502:	d009      	beq.n	8002518 <RCCEx_PLLSAI1_Config+0x74>
 8002504:	e020      	b.n	8002548 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002506:	4b60      	ldr	r3, [pc, #384]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d11d      	bne.n	800254e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002516:	e01a      	b.n	800254e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002518:	4b5b      	ldr	r3, [pc, #364]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d116      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002528:	e013      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800252a:	4b57      	ldr	r3, [pc, #348]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002536:	4b54      	ldr	r3, [pc, #336]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002546:	e006      	b.n	8002556 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      break;
 800254c:	e004      	b.n	8002558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254e:	bf00      	nop
 8002550:	e002      	b.n	8002558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002552:	bf00      	nop
 8002554:	e000      	b.n	8002558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002556:	bf00      	nop
    }

    if(status == HAL_OK)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10d      	bne.n	800257a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800255e:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	430b      	orrs	r3, r1
 8002574:	4944      	ldr	r1, [pc, #272]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d17d      	bne.n	800267c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002580:	4b41      	ldr	r3, [pc, #260]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a40      	ldr	r2, [pc, #256]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002586:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800258a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258c:	f7fe fb56 	bl	8000c3c <HAL_GetTick>
 8002590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002592:	e009      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002594:	f7fe fb52 	bl	8000c3c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d902      	bls.n	80025a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	73fb      	strb	r3, [r7, #15]
        break;
 80025a6:	e005      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025a8:	4b37      	ldr	r3, [pc, #220]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ef      	bne.n	8002594 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d160      	bne.n	800267c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d111      	bne.n	80025e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c0:	4b31      	ldr	r3, [pc, #196]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6892      	ldr	r2, [r2, #8]
 80025d0:	0211      	lsls	r1, r2, #8
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68d2      	ldr	r2, [r2, #12]
 80025d6:	0912      	lsrs	r2, r2, #4
 80025d8:	0452      	lsls	r2, r2, #17
 80025da:	430a      	orrs	r2, r1
 80025dc:	492a      	ldr	r1, [pc, #168]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	610b      	str	r3, [r1, #16]
 80025e2:	e027      	b.n	8002634 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d112      	bne.n	8002610 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ea:	4b27      	ldr	r3, [pc, #156]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6892      	ldr	r2, [r2, #8]
 80025fa:	0211      	lsls	r1, r2, #8
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6912      	ldr	r2, [r2, #16]
 8002600:	0852      	lsrs	r2, r2, #1
 8002602:	3a01      	subs	r2, #1
 8002604:	0552      	lsls	r2, r2, #21
 8002606:	430a      	orrs	r2, r1
 8002608:	491f      	ldr	r1, [pc, #124]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	610b      	str	r3, [r1, #16]
 800260e:	e011      	b.n	8002634 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6892      	ldr	r2, [r2, #8]
 8002620:	0211      	lsls	r1, r2, #8
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6952      	ldr	r2, [r2, #20]
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	0652      	lsls	r2, r2, #25
 800262c:	430a      	orrs	r2, r1
 800262e:	4916      	ldr	r1, [pc, #88]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a13      	ldr	r2, [pc, #76]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800263e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7fe fafc 	bl	8000c3c <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002646:	e009      	b.n	800265c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002648:	f7fe faf8 	bl	8000c3c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d902      	bls.n	800265c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	73fb      	strb	r3, [r7, #15]
          break;
 800265a:	e005      	b.n	8002668 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ef      	beq.n	8002648 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	4904      	ldr	r1, [pc, #16]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000

0800268c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800269a:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d018      	beq.n	80026d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026a6:	4b67      	ldr	r3, [pc, #412]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0203 	and.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d10d      	bne.n	80026d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
       ||
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026be:	4b61      	ldr	r3, [pc, #388]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
       ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d047      	beq.n	8002762 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e044      	b.n	8002762 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d018      	beq.n	8002712 <RCCEx_PLLSAI2_Config+0x86>
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d825      	bhi.n	8002730 <RCCEx_PLLSAI2_Config+0xa4>
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d002      	beq.n	80026ee <RCCEx_PLLSAI2_Config+0x62>
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d009      	beq.n	8002700 <RCCEx_PLLSAI2_Config+0x74>
 80026ec:	e020      	b.n	8002730 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ee:	4b55      	ldr	r3, [pc, #340]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11d      	bne.n	8002736 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fe:	e01a      	b.n	8002736 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002700:	4b50      	ldr	r3, [pc, #320]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002708:	2b00      	cmp	r3, #0
 800270a:	d116      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002710:	e013      	b.n	800273a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002712:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800271e:	4b49      	ldr	r3, [pc, #292]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800272e:	e006      	b.n	800273e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      break;
 8002734:	e004      	b.n	8002740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002736:	bf00      	nop
 8002738:	e002      	b.n	8002740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273a:	bf00      	nop
 800273c:	e000      	b.n	8002740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10d      	bne.n	8002762 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002746:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6819      	ldr	r1, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	430b      	orrs	r3, r1
 800275c:	4939      	ldr	r1, [pc, #228]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d167      	bne.n	8002838 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002768:	4b36      	ldr	r3, [pc, #216]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a35      	ldr	r2, [pc, #212]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002774:	f7fe fa62 	bl	8000c3c <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800277a:	e009      	b.n	8002790 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800277c:	f7fe fa5e 	bl	8000c3c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d902      	bls.n	8002790 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	73fb      	strb	r3, [r7, #15]
        break;
 800278e:	e005      	b.n	800279c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ef      	bne.n	800277c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d14a      	bne.n	8002838 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d111      	bne.n	80027cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a8:	4b26      	ldr	r3, [pc, #152]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6892      	ldr	r2, [r2, #8]
 80027b8:	0211      	lsls	r1, r2, #8
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	0912      	lsrs	r2, r2, #4
 80027c0:	0452      	lsls	r2, r2, #17
 80027c2:	430a      	orrs	r2, r1
 80027c4:	491f      	ldr	r1, [pc, #124]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	614b      	str	r3, [r1, #20]
 80027ca:	e011      	b.n	80027f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6892      	ldr	r2, [r2, #8]
 80027dc:	0211      	lsls	r1, r2, #8
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6912      	ldr	r2, [r2, #16]
 80027e2:	0852      	lsrs	r2, r2, #1
 80027e4:	3a01      	subs	r2, #1
 80027e6:	0652      	lsls	r2, r2, #25
 80027e8:	430a      	orrs	r2, r1
 80027ea:	4916      	ldr	r1, [pc, #88]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a13      	ldr	r2, [pc, #76]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7fe fa1e 	bl	8000c3c <HAL_GetTick>
 8002800:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002802:	e009      	b.n	8002818 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002804:	f7fe fa1a 	bl	8000c3c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d902      	bls.n	8002818 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	73fb      	strb	r3, [r7, #15]
          break;
 8002816:	e005      	b.n	8002824 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ef      	beq.n	8002804 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	4904      	ldr	r1, [pc, #16]	; (8002844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002834:	4313      	orrs	r3, r2
 8002836:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000

08002848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e049      	b.n	80028ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f841 	bl	80028f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f000 f9f8 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d001      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e04f      	b.n	80029c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a23      	ldr	r2, [pc, #140]	; (80029d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01d      	beq.n	8002982 <HAL_TIM_Base_Start_IT+0x76>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294e:	d018      	beq.n	8002982 <HAL_TIM_Base_Start_IT+0x76>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1f      	ldr	r2, [pc, #124]	; (80029d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_TIM_Base_Start_IT+0x76>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00e      	beq.n	8002982 <HAL_TIM_Base_Start_IT+0x76>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <HAL_TIM_Base_Start_IT+0xd0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_TIM_Base_Start_IT+0x76>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1b      	ldr	r2, [pc, #108]	; (80029e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d004      	beq.n	8002982 <HAL_TIM_Base_Start_IT+0x76>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d115      	bne.n	80029ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800298a:	4013      	ands	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b06      	cmp	r3, #6
 8002992:	d015      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0xb4>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299a:	d011      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ac:	e008      	b.n	80029c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e000      	b.n	80029c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40000800 	.word	0x40000800
 80029dc:	40000c00 	.word	0x40000c00
 80029e0:	40013400 	.word	0x40013400
 80029e4:	40014000 	.word	0x40014000
 80029e8:	00010007 	.word	0x00010007

080029ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d122      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d11b      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0202 	mvn.w	r2, #2
 8002a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f905 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 8002a34:	e005      	b.n	8002a42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f8f7 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f908 	bl	8002c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d122      	bne.n	8002a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d11b      	bne.n	8002a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0204 	mvn.w	r2, #4
 8002a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8db 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f8cd 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f8de 	bl	8002c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0208 	mvn.w	r2, #8
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8b1 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8a3 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f8b4 	bl	8002c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0210 	mvn.w	r2, #16
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f887 	bl	8002c3e <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f879 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f88a 	bl	8002c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d10e      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d107      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0201 	mvn.w	r2, #1
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fd fdf4 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7a:	2b80      	cmp	r3, #128	; 0x80
 8002b7c:	d10e      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b80      	cmp	r3, #128	; 0x80
 8002b8a:	d107      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f914 	bl	8002dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002baa:	d10e      	bne.n	8002bca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	2b80      	cmp	r3, #128	; 0x80
 8002bb8:	d107      	bne.n	8002bca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f907 	bl	8002dd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d10e      	bne.n	8002bf6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	d107      	bne.n	8002bf6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f838 	bl	8002c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d10e      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d107      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f06f 0220 	mvn.w	r2, #32
 8002c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f8c7 	bl	8002db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a40      	ldr	r2, [pc, #256]	; (8002d90 <TIM_Base_SetConfig+0x114>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d00f      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3d      	ldr	r2, [pc, #244]	; (8002d94 <TIM_Base_SetConfig+0x118>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00b      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3c      	ldr	r2, [pc, #240]	; (8002d98 <TIM_Base_SetConfig+0x11c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3b      	ldr	r2, [pc, #236]	; (8002d9c <TIM_Base_SetConfig+0x120>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3a      	ldr	r2, [pc, #232]	; (8002da0 <TIM_Base_SetConfig+0x124>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d108      	bne.n	8002cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a2f      	ldr	r2, [pc, #188]	; (8002d90 <TIM_Base_SetConfig+0x114>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01f      	beq.n	8002d16 <TIM_Base_SetConfig+0x9a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cdc:	d01b      	beq.n	8002d16 <TIM_Base_SetConfig+0x9a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2c      	ldr	r2, [pc, #176]	; (8002d94 <TIM_Base_SetConfig+0x118>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d017      	beq.n	8002d16 <TIM_Base_SetConfig+0x9a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a2b      	ldr	r2, [pc, #172]	; (8002d98 <TIM_Base_SetConfig+0x11c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <TIM_Base_SetConfig+0x9a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <TIM_Base_SetConfig+0x120>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00f      	beq.n	8002d16 <TIM_Base_SetConfig+0x9a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <TIM_Base_SetConfig+0x124>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00b      	beq.n	8002d16 <TIM_Base_SetConfig+0x9a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a28      	ldr	r2, [pc, #160]	; (8002da4 <TIM_Base_SetConfig+0x128>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <TIM_Base_SetConfig+0x9a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <TIM_Base_SetConfig+0x12c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d003      	beq.n	8002d16 <TIM_Base_SetConfig+0x9a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a26      	ldr	r2, [pc, #152]	; (8002dac <TIM_Base_SetConfig+0x130>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d108      	bne.n	8002d28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <TIM_Base_SetConfig+0x114>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00f      	beq.n	8002d74 <TIM_Base_SetConfig+0xf8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <TIM_Base_SetConfig+0x124>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00b      	beq.n	8002d74 <TIM_Base_SetConfig+0xf8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <TIM_Base_SetConfig+0x128>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d007      	beq.n	8002d74 <TIM_Base_SetConfig+0xf8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <TIM_Base_SetConfig+0x12c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_Base_SetConfig+0xf8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <TIM_Base_SetConfig+0x130>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d103      	bne.n	8002d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	615a      	str	r2, [r3, #20]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	40000c00 	.word	0x40000c00
 8002da0:	40013400 	.word	0x40013400
 8002da4:	40014000 	.word	0x40014000
 8002da8:	40014400 	.word	0x40014400
 8002dac:	40014800 	.word	0x40014800

08002db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e040      	b.n	8002e80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fd16 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2224      	movs	r2, #36	; 0x24
 8002e18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8c0 	bl	8002fb0 <UART_SetConfig>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e022      	b.n	8002e80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fb3e 	bl	80034c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fbc5 	bl	8003608 <UART_CheckIdleState>
 8002e7e:	4603      	mov	r3, r0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	f040 8082 	bne.w	8002fa6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_UART_Transmit+0x26>
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07a      	b.n	8002fa8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_UART_Transmit+0x38>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e073      	b.n	8002fa8 <HAL_UART_Transmit+0x120>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2221      	movs	r2, #33	; 0x21
 8002ed4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed6:	f7fd feb1 	bl	8000c3c <HAL_GetTick>
 8002eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	88fa      	ldrh	r2, [r7, #6]
 8002ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef4:	d108      	bne.n	8002f08 <HAL_UART_Transmit+0x80>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d104      	bne.n	8002f08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e003      	b.n	8002f10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f18:	e02d      	b.n	8002f76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fbb8 	bl	800369a <UART_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e039      	b.n	8002fa8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10b      	bne.n	8002f52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	881a      	ldrh	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f46:	b292      	uxth	r2, r2
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	e008      	b.n	8002f64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	781a      	ldrb	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b292      	uxth	r2, r2
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3301      	adds	r3, #1
 8002f62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1cb      	bne.n	8002f1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2140      	movs	r1, #64	; 0x40
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fb84 	bl	800369a <UART_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e005      	b.n	8002fa8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb0:	b5b0      	push	{r4, r5, r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4bad      	ldr	r3, [pc, #692]	; (8003290 <UART_SetConfig+0x2e0>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	69f9      	ldr	r1, [r7, #28]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4aa2      	ldr	r2, [pc, #648]	; (8003294 <UART_SetConfig+0x2e4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	4313      	orrs	r3, r2
 8003016:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	430a      	orrs	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a99      	ldr	r2, [pc, #612]	; (8003298 <UART_SetConfig+0x2e8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d121      	bne.n	800307a <UART_SetConfig+0xca>
 8003036:	4b99      	ldr	r3, [pc, #612]	; (800329c <UART_SetConfig+0x2ec>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b03      	cmp	r3, #3
 8003042:	d817      	bhi.n	8003074 <UART_SetConfig+0xc4>
 8003044:	a201      	add	r2, pc, #4	; (adr r2, 800304c <UART_SetConfig+0x9c>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	0800305d 	.word	0x0800305d
 8003050:	08003069 	.word	0x08003069
 8003054:	08003063 	.word	0x08003063
 8003058:	0800306f 	.word	0x0800306f
 800305c:	2301      	movs	r3, #1
 800305e:	76fb      	strb	r3, [r7, #27]
 8003060:	e0e7      	b.n	8003232 <UART_SetConfig+0x282>
 8003062:	2302      	movs	r3, #2
 8003064:	76fb      	strb	r3, [r7, #27]
 8003066:	e0e4      	b.n	8003232 <UART_SetConfig+0x282>
 8003068:	2304      	movs	r3, #4
 800306a:	76fb      	strb	r3, [r7, #27]
 800306c:	e0e1      	b.n	8003232 <UART_SetConfig+0x282>
 800306e:	2308      	movs	r3, #8
 8003070:	76fb      	strb	r3, [r7, #27]
 8003072:	e0de      	b.n	8003232 <UART_SetConfig+0x282>
 8003074:	2310      	movs	r3, #16
 8003076:	76fb      	strb	r3, [r7, #27]
 8003078:	e0db      	b.n	8003232 <UART_SetConfig+0x282>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a88      	ldr	r2, [pc, #544]	; (80032a0 <UART_SetConfig+0x2f0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d132      	bne.n	80030ea <UART_SetConfig+0x13a>
 8003084:	4b85      	ldr	r3, [pc, #532]	; (800329c <UART_SetConfig+0x2ec>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d828      	bhi.n	80030e4 <UART_SetConfig+0x134>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_SetConfig+0xe8>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080030e5 	.word	0x080030e5
 80030a0:	080030e5 	.word	0x080030e5
 80030a4:	080030e5 	.word	0x080030e5
 80030a8:	080030d9 	.word	0x080030d9
 80030ac:	080030e5 	.word	0x080030e5
 80030b0:	080030e5 	.word	0x080030e5
 80030b4:	080030e5 	.word	0x080030e5
 80030b8:	080030d3 	.word	0x080030d3
 80030bc:	080030e5 	.word	0x080030e5
 80030c0:	080030e5 	.word	0x080030e5
 80030c4:	080030e5 	.word	0x080030e5
 80030c8:	080030df 	.word	0x080030df
 80030cc:	2300      	movs	r3, #0
 80030ce:	76fb      	strb	r3, [r7, #27]
 80030d0:	e0af      	b.n	8003232 <UART_SetConfig+0x282>
 80030d2:	2302      	movs	r3, #2
 80030d4:	76fb      	strb	r3, [r7, #27]
 80030d6:	e0ac      	b.n	8003232 <UART_SetConfig+0x282>
 80030d8:	2304      	movs	r3, #4
 80030da:	76fb      	strb	r3, [r7, #27]
 80030dc:	e0a9      	b.n	8003232 <UART_SetConfig+0x282>
 80030de:	2308      	movs	r3, #8
 80030e0:	76fb      	strb	r3, [r7, #27]
 80030e2:	e0a6      	b.n	8003232 <UART_SetConfig+0x282>
 80030e4:	2310      	movs	r3, #16
 80030e6:	76fb      	strb	r3, [r7, #27]
 80030e8:	e0a3      	b.n	8003232 <UART_SetConfig+0x282>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6d      	ldr	r2, [pc, #436]	; (80032a4 <UART_SetConfig+0x2f4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d120      	bne.n	8003136 <UART_SetConfig+0x186>
 80030f4:	4b69      	ldr	r3, [pc, #420]	; (800329c <UART_SetConfig+0x2ec>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030fe:	2b30      	cmp	r3, #48	; 0x30
 8003100:	d013      	beq.n	800312a <UART_SetConfig+0x17a>
 8003102:	2b30      	cmp	r3, #48	; 0x30
 8003104:	d814      	bhi.n	8003130 <UART_SetConfig+0x180>
 8003106:	2b20      	cmp	r3, #32
 8003108:	d009      	beq.n	800311e <UART_SetConfig+0x16e>
 800310a:	2b20      	cmp	r3, #32
 800310c:	d810      	bhi.n	8003130 <UART_SetConfig+0x180>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <UART_SetConfig+0x168>
 8003112:	2b10      	cmp	r3, #16
 8003114:	d006      	beq.n	8003124 <UART_SetConfig+0x174>
 8003116:	e00b      	b.n	8003130 <UART_SetConfig+0x180>
 8003118:	2300      	movs	r3, #0
 800311a:	76fb      	strb	r3, [r7, #27]
 800311c:	e089      	b.n	8003232 <UART_SetConfig+0x282>
 800311e:	2302      	movs	r3, #2
 8003120:	76fb      	strb	r3, [r7, #27]
 8003122:	e086      	b.n	8003232 <UART_SetConfig+0x282>
 8003124:	2304      	movs	r3, #4
 8003126:	76fb      	strb	r3, [r7, #27]
 8003128:	e083      	b.n	8003232 <UART_SetConfig+0x282>
 800312a:	2308      	movs	r3, #8
 800312c:	76fb      	strb	r3, [r7, #27]
 800312e:	e080      	b.n	8003232 <UART_SetConfig+0x282>
 8003130:	2310      	movs	r3, #16
 8003132:	76fb      	strb	r3, [r7, #27]
 8003134:	e07d      	b.n	8003232 <UART_SetConfig+0x282>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a5b      	ldr	r2, [pc, #364]	; (80032a8 <UART_SetConfig+0x2f8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d120      	bne.n	8003182 <UART_SetConfig+0x1d2>
 8003140:	4b56      	ldr	r3, [pc, #344]	; (800329c <UART_SetConfig+0x2ec>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800314a:	2bc0      	cmp	r3, #192	; 0xc0
 800314c:	d013      	beq.n	8003176 <UART_SetConfig+0x1c6>
 800314e:	2bc0      	cmp	r3, #192	; 0xc0
 8003150:	d814      	bhi.n	800317c <UART_SetConfig+0x1cc>
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d009      	beq.n	800316a <UART_SetConfig+0x1ba>
 8003156:	2b80      	cmp	r3, #128	; 0x80
 8003158:	d810      	bhi.n	800317c <UART_SetConfig+0x1cc>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <UART_SetConfig+0x1b4>
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d006      	beq.n	8003170 <UART_SetConfig+0x1c0>
 8003162:	e00b      	b.n	800317c <UART_SetConfig+0x1cc>
 8003164:	2300      	movs	r3, #0
 8003166:	76fb      	strb	r3, [r7, #27]
 8003168:	e063      	b.n	8003232 <UART_SetConfig+0x282>
 800316a:	2302      	movs	r3, #2
 800316c:	76fb      	strb	r3, [r7, #27]
 800316e:	e060      	b.n	8003232 <UART_SetConfig+0x282>
 8003170:	2304      	movs	r3, #4
 8003172:	76fb      	strb	r3, [r7, #27]
 8003174:	e05d      	b.n	8003232 <UART_SetConfig+0x282>
 8003176:	2308      	movs	r3, #8
 8003178:	76fb      	strb	r3, [r7, #27]
 800317a:	e05a      	b.n	8003232 <UART_SetConfig+0x282>
 800317c:	2310      	movs	r3, #16
 800317e:	76fb      	strb	r3, [r7, #27]
 8003180:	e057      	b.n	8003232 <UART_SetConfig+0x282>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a49      	ldr	r2, [pc, #292]	; (80032ac <UART_SetConfig+0x2fc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d125      	bne.n	80031d8 <UART_SetConfig+0x228>
 800318c:	4b43      	ldr	r3, [pc, #268]	; (800329c <UART_SetConfig+0x2ec>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800319a:	d017      	beq.n	80031cc <UART_SetConfig+0x21c>
 800319c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a0:	d817      	bhi.n	80031d2 <UART_SetConfig+0x222>
 80031a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a6:	d00b      	beq.n	80031c0 <UART_SetConfig+0x210>
 80031a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ac:	d811      	bhi.n	80031d2 <UART_SetConfig+0x222>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <UART_SetConfig+0x20a>
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d006      	beq.n	80031c6 <UART_SetConfig+0x216>
 80031b8:	e00b      	b.n	80031d2 <UART_SetConfig+0x222>
 80031ba:	2300      	movs	r3, #0
 80031bc:	76fb      	strb	r3, [r7, #27]
 80031be:	e038      	b.n	8003232 <UART_SetConfig+0x282>
 80031c0:	2302      	movs	r3, #2
 80031c2:	76fb      	strb	r3, [r7, #27]
 80031c4:	e035      	b.n	8003232 <UART_SetConfig+0x282>
 80031c6:	2304      	movs	r3, #4
 80031c8:	76fb      	strb	r3, [r7, #27]
 80031ca:	e032      	b.n	8003232 <UART_SetConfig+0x282>
 80031cc:	2308      	movs	r3, #8
 80031ce:	76fb      	strb	r3, [r7, #27]
 80031d0:	e02f      	b.n	8003232 <UART_SetConfig+0x282>
 80031d2:	2310      	movs	r3, #16
 80031d4:	76fb      	strb	r3, [r7, #27]
 80031d6:	e02c      	b.n	8003232 <UART_SetConfig+0x282>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <UART_SetConfig+0x2e4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d125      	bne.n	800322e <UART_SetConfig+0x27e>
 80031e2:	4b2e      	ldr	r3, [pc, #184]	; (800329c <UART_SetConfig+0x2ec>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f0:	d017      	beq.n	8003222 <UART_SetConfig+0x272>
 80031f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f6:	d817      	bhi.n	8003228 <UART_SetConfig+0x278>
 80031f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fc:	d00b      	beq.n	8003216 <UART_SetConfig+0x266>
 80031fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003202:	d811      	bhi.n	8003228 <UART_SetConfig+0x278>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <UART_SetConfig+0x260>
 8003208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320c:	d006      	beq.n	800321c <UART_SetConfig+0x26c>
 800320e:	e00b      	b.n	8003228 <UART_SetConfig+0x278>
 8003210:	2300      	movs	r3, #0
 8003212:	76fb      	strb	r3, [r7, #27]
 8003214:	e00d      	b.n	8003232 <UART_SetConfig+0x282>
 8003216:	2302      	movs	r3, #2
 8003218:	76fb      	strb	r3, [r7, #27]
 800321a:	e00a      	b.n	8003232 <UART_SetConfig+0x282>
 800321c:	2304      	movs	r3, #4
 800321e:	76fb      	strb	r3, [r7, #27]
 8003220:	e007      	b.n	8003232 <UART_SetConfig+0x282>
 8003222:	2308      	movs	r3, #8
 8003224:	76fb      	strb	r3, [r7, #27]
 8003226:	e004      	b.n	8003232 <UART_SetConfig+0x282>
 8003228:	2310      	movs	r3, #16
 800322a:	76fb      	strb	r3, [r7, #27]
 800322c:	e001      	b.n	8003232 <UART_SetConfig+0x282>
 800322e:	2310      	movs	r3, #16
 8003230:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a17      	ldr	r2, [pc, #92]	; (8003294 <UART_SetConfig+0x2e4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	f040 8087 	bne.w	800334c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800323e:	7efb      	ldrb	r3, [r7, #27]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d837      	bhi.n	80032b4 <UART_SetConfig+0x304>
 8003244:	a201      	add	r2, pc, #4	; (adr r2, 800324c <UART_SetConfig+0x29c>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	08003271 	.word	0x08003271
 8003250:	080032b5 	.word	0x080032b5
 8003254:	08003279 	.word	0x08003279
 8003258:	080032b5 	.word	0x080032b5
 800325c:	0800327f 	.word	0x0800327f
 8003260:	080032b5 	.word	0x080032b5
 8003264:	080032b5 	.word	0x080032b5
 8003268:	080032b5 	.word	0x080032b5
 800326c:	08003287 	.word	0x08003287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003270:	f7fe fd70 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8003274:	6178      	str	r0, [r7, #20]
        break;
 8003276:	e022      	b.n	80032be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003278:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <UART_SetConfig+0x300>)
 800327a:	617b      	str	r3, [r7, #20]
        break;
 800327c:	e01f      	b.n	80032be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800327e:	f7fe fcd3 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8003282:	6178      	str	r0, [r7, #20]
        break;
 8003284:	e01b      	b.n	80032be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800328a:	617b      	str	r3, [r7, #20]
        break;
 800328c:	e017      	b.n	80032be <UART_SetConfig+0x30e>
 800328e:	bf00      	nop
 8003290:	efff69f3 	.word	0xefff69f3
 8003294:	40008000 	.word	0x40008000
 8003298:	40013800 	.word	0x40013800
 800329c:	40021000 	.word	0x40021000
 80032a0:	40004400 	.word	0x40004400
 80032a4:	40004800 	.word	0x40004800
 80032a8:	40004c00 	.word	0x40004c00
 80032ac:	40005000 	.word	0x40005000
 80032b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	76bb      	strb	r3, [r7, #26]
        break;
 80032bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80f1 	beq.w	80034a8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d305      	bcc.n	80032e2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d902      	bls.n	80032e8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	76bb      	strb	r3, [r7, #26]
 80032e6:	e0df      	b.n	80034a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	020b      	lsls	r3, r1, #8
 80032fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032fe:	0202      	lsls	r2, r0, #8
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	6849      	ldr	r1, [r1, #4]
 8003304:	0849      	lsrs	r1, r1, #1
 8003306:	4608      	mov	r0, r1
 8003308:	f04f 0100 	mov.w	r1, #0
 800330c:	1814      	adds	r4, r2, r0
 800330e:	eb43 0501 	adc.w	r5, r3, r1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	461a      	mov	r2, r3
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	4620      	mov	r0, r4
 800331e:	4629      	mov	r1, r5
 8003320:	f7fc ff56 	bl	80001d0 <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4613      	mov	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003332:	d308      	bcc.n	8003346 <UART_SetConfig+0x396>
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333a:	d204      	bcs.n	8003346 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	e0b0      	b.n	80034a8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	76bb      	strb	r3, [r7, #26]
 800334a:	e0ad      	b.n	80034a8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003354:	d15c      	bne.n	8003410 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003356:	7efb      	ldrb	r3, [r7, #27]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d828      	bhi.n	80033ae <UART_SetConfig+0x3fe>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <UART_SetConfig+0x3b4>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003389 	.word	0x08003389
 8003368:	08003391 	.word	0x08003391
 800336c:	08003399 	.word	0x08003399
 8003370:	080033af 	.word	0x080033af
 8003374:	0800339f 	.word	0x0800339f
 8003378:	080033af 	.word	0x080033af
 800337c:	080033af 	.word	0x080033af
 8003380:	080033af 	.word	0x080033af
 8003384:	080033a7 	.word	0x080033a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003388:	f7fe fce4 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 800338c:	6178      	str	r0, [r7, #20]
        break;
 800338e:	e013      	b.n	80033b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003390:	f7fe fcf6 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 8003394:	6178      	str	r0, [r7, #20]
        break;
 8003396:	e00f      	b.n	80033b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003398:	4b49      	ldr	r3, [pc, #292]	; (80034c0 <UART_SetConfig+0x510>)
 800339a:	617b      	str	r3, [r7, #20]
        break;
 800339c:	e00c      	b.n	80033b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339e:	f7fe fc43 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 80033a2:	6178      	str	r0, [r7, #20]
        break;
 80033a4:	e008      	b.n	80033b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033aa:	617b      	str	r3, [r7, #20]
        break;
 80033ac:	e004      	b.n	80033b8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	76bb      	strb	r3, [r7, #26]
        break;
 80033b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d074      	beq.n	80034a8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005a      	lsls	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	441a      	add	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b0f      	cmp	r3, #15
 80033da:	d916      	bls.n	800340a <UART_SetConfig+0x45a>
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e2:	d212      	bcs.n	800340a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f023 030f 	bic.w	r3, r3, #15
 80033ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	085b      	lsrs	r3, r3, #1
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	89fb      	ldrh	r3, [r7, #14]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	89fa      	ldrh	r2, [r7, #14]
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	e04e      	b.n	80034a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	76bb      	strb	r3, [r7, #26]
 800340e:	e04b      	b.n	80034a8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003410:	7efb      	ldrb	r3, [r7, #27]
 8003412:	2b08      	cmp	r3, #8
 8003414:	d827      	bhi.n	8003466 <UART_SetConfig+0x4b6>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <UART_SetConfig+0x46c>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	08003441 	.word	0x08003441
 8003420:	08003449 	.word	0x08003449
 8003424:	08003451 	.word	0x08003451
 8003428:	08003467 	.word	0x08003467
 800342c:	08003457 	.word	0x08003457
 8003430:	08003467 	.word	0x08003467
 8003434:	08003467 	.word	0x08003467
 8003438:	08003467 	.word	0x08003467
 800343c:	0800345f 	.word	0x0800345f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003440:	f7fe fc88 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8003444:	6178      	str	r0, [r7, #20]
        break;
 8003446:	e013      	b.n	8003470 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003448:	f7fe fc9a 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 800344c:	6178      	str	r0, [r7, #20]
        break;
 800344e:	e00f      	b.n	8003470 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003450:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <UART_SetConfig+0x510>)
 8003452:	617b      	str	r3, [r7, #20]
        break;
 8003454:	e00c      	b.n	8003470 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003456:	f7fe fbe7 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 800345a:	6178      	str	r0, [r7, #20]
        break;
 800345c:	e008      	b.n	8003470 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003462:	617b      	str	r3, [r7, #20]
        break;
 8003464:	e004      	b.n	8003470 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	76bb      	strb	r3, [r7, #26]
        break;
 800346e:	bf00      	nop
    }

    if (pclk != 0U)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d018      	beq.n	80034a8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	085a      	lsrs	r2, r3, #1
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	441a      	add	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	b29b      	uxth	r3, r3
 800348a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b0f      	cmp	r3, #15
 8003490:	d908      	bls.n	80034a4 <UART_SetConfig+0x4f4>
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003498:	d204      	bcs.n	80034a4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	e001      	b.n	80034a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80034b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bdb0      	pop	{r4, r5, r7, pc}
 80034be:	bf00      	nop
 80034c0:	00f42400 	.word	0x00f42400

080034c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01a      	beq.n	80035da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c2:	d10a      	bne.n	80035da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af02      	add	r7, sp, #8
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003618:	f7fd fb10 	bl	8000c3c <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b08      	cmp	r3, #8
 800362a:	d10e      	bne.n	800364a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800362c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f82d 	bl	800369a <UART_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e023      	b.n	8003692 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b04      	cmp	r3, #4
 8003656:	d10e      	bne.n	8003676 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f817 	bl	800369a <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e00d      	b.n	8003692 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	603b      	str	r3, [r7, #0]
 80036a6:	4613      	mov	r3, r2
 80036a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036aa:	e05e      	b.n	800376a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b2:	d05a      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7fd fac2 	bl	8000c3c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <UART_WaitOnFlagUntilTimeout+0x30>
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d11b      	bne.n	8003702 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e043      	b.n	800378a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d02c      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800371a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800371e:	d124      	bne.n	800376a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003728:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003738:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e00f      	b.n	800378a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4013      	ands	r3, r2
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	429a      	cmp	r2, r3
 8003778:	bf0c      	ite	eq
 800377a:	2301      	moveq	r3, #1
 800377c:	2300      	movne	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	429a      	cmp	r2, r3
 8003786:	d091      	beq.n	80036ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <__NVIC_SetPriority>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db0a      	blt.n	80037be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	490c      	ldr	r1, [pc, #48]	; (80037e0 <__NVIC_SetPriority+0x4c>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037bc:	e00a      	b.n	80037d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4908      	ldr	r1, [pc, #32]	; (80037e4 <__NVIC_SetPriority+0x50>)
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3b04      	subs	r3, #4
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	761a      	strb	r2, [r3, #24]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <SysTick_Handler+0x1c>)
 80037ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80037f0:	f001 fcfe 	bl	80051f0 <xTaskGetSchedulerState>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d001      	beq.n	80037fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80037fa:	f002 fae5 	bl	8005dc8 <xPortSysTickHandler>
  }
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	e000e010 	.word	0xe000e010

08003808 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800380c:	2100      	movs	r1, #0
 800380e:	f06f 0004 	mvn.w	r0, #4
 8003812:	f7ff ffbf 	bl	8003794 <__NVIC_SetPriority>
#endif
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003822:	f3ef 8305 	mrs	r3, IPSR
 8003826:	603b      	str	r3, [r7, #0]
  return(result);
 8003828:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800382e:	f06f 0305 	mvn.w	r3, #5
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	e00c      	b.n	8003850 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <osKernelInitialize+0x44>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <osKernelInitialize+0x44>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003844:	2300      	movs	r3, #0
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	e002      	b.n	8003850 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800384e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003850:	687b      	ldr	r3, [r7, #4]
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	200000c4 	.word	0x200000c4

08003864 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800386a:	f3ef 8305 	mrs	r3, IPSR
 800386e:	603b      	str	r3, [r7, #0]
  return(result);
 8003870:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003876:	f06f 0305 	mvn.w	r3, #5
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	e010      	b.n	80038a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <osKernelStart+0x48>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d109      	bne.n	800389a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003886:	f7ff ffbf 	bl	8003808 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800388a:	4b08      	ldr	r3, [pc, #32]	; (80038ac <osKernelStart+0x48>)
 800388c:	2202      	movs	r2, #2
 800388e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003890:	f001 f866 	bl	8004960 <vTaskStartScheduler>
      stat = osOK;
 8003894:	2300      	movs	r3, #0
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	e002      	b.n	80038a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800389e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038a0:	687b      	ldr	r3, [r7, #4]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200000c4 	.word	0x200000c4

080038b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08e      	sub	sp, #56	; 0x38
 80038b4:	af04      	add	r7, sp, #16
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038c0:	f3ef 8305 	mrs	r3, IPSR
 80038c4:	617b      	str	r3, [r7, #20]
  return(result);
 80038c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d17e      	bne.n	80039ca <osThreadNew+0x11a>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d07b      	beq.n	80039ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038d6:	2318      	movs	r3, #24
 80038d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d045      	beq.n	8003976 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <osThreadNew+0x48>
        name = attr->name;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <osThreadNew+0x6e>
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b38      	cmp	r3, #56	; 0x38
 8003910:	d805      	bhi.n	800391e <osThreadNew+0x6e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <osThreadNew+0x72>
        return (NULL);
 800391e:	2300      	movs	r3, #0
 8003920:	e054      	b.n	80039cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	089b      	lsrs	r3, r3, #2
 8003930:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00e      	beq.n	8003958 <osThreadNew+0xa8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b5b      	cmp	r3, #91	; 0x5b
 8003940:	d90a      	bls.n	8003958 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003946:	2b00      	cmp	r3, #0
 8003948:	d006      	beq.n	8003958 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <osThreadNew+0xa8>
        mem = 1;
 8003952:	2301      	movs	r3, #1
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e010      	b.n	800397a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10c      	bne.n	800397a <osThreadNew+0xca>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d108      	bne.n	800397a <osThreadNew+0xca>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d104      	bne.n	800397a <osThreadNew+0xca>
          mem = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e001      	b.n	800397a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d110      	bne.n	80039a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003988:	9202      	str	r2, [sp, #8]
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fe0c 	bl	80045b4 <xTaskCreateStatic>
 800399c:	4603      	mov	r3, r0
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	e013      	b.n	80039ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d110      	bne.n	80039ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fe57 	bl	800466e <xTaskCreate>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d001      	beq.n	80039ca <osThreadNew+0x11a>
            hTask = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039ca:	693b      	ldr	r3, [r7, #16]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039dc:	f3ef 8305 	mrs	r3, IPSR
 80039e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80039e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <osDelay+0x1c>
    stat = osErrorISR;
 80039e8:	f06f 0305 	mvn.w	r3, #5
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e007      	b.n	8003a00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <osDelay+0x2c>
      vTaskDelay(ticks);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 ff7c 	bl	80048f8 <vTaskDelay>
    }
  }

  return (stat);
 8003a00:	68fb      	ldr	r3, [r7, #12]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <vApplicationGetIdleTaskMemory+0x30>)
 8003a22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	601a      	str	r2, [r3, #0]
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	200000c8 	.word	0x200000c8
 8003a3c:	20000124 	.word	0x20000124

08003a40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <vApplicationGetTimerTaskMemory+0x2c>)
 8003a50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4a06      	ldr	r2, [pc, #24]	; (8003a70 <vApplicationGetTimerTaskMemory+0x30>)
 8003a56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a5e:	601a      	str	r2, [r3, #0]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	20000324 	.word	0x20000324
 8003a70:	20000380 	.word	0x20000380

08003a74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f103 0208 	add.w	r2, r3, #8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f103 0208 	add.w	r2, r3, #8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f103 0208 	add.w	r2, r3, #8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b085      	sub	sp, #20
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	601a      	str	r2, [r3, #0]
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b2c:	d103      	bne.n	8003b36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e00c      	b.n	8003b50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3308      	adds	r3, #8
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e002      	b.n	8003b44 <vListInsert+0x2e>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d2f6      	bcs.n	8003b3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	601a      	str	r2, [r3, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6892      	ldr	r2, [r2, #8]
 8003b9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6852      	ldr	r2, [r2, #4]
 8003ba8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d103      	bne.n	8003bbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c02:	bf00      	nop
 8003c04:	e7fe      	b.n	8003c04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c06:	f002 f84d 	bl	8005ca4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	68f9      	ldr	r1, [r7, #12]
 8003c14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	441a      	add	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	3b01      	subs	r3, #1
 8003c38:	68f9      	ldr	r1, [r7, #12]
 8003c3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	441a      	add	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	22ff      	movs	r2, #255	; 0xff
 8003c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	22ff      	movs	r2, #255	; 0xff
 8003c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d114      	bne.n	8003c86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01a      	beq.n	8003c9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3310      	adds	r3, #16
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 f903 	bl	8004e74 <xTaskRemoveFromEventList>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d012      	beq.n	8003c9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <xQueueGenericReset+0xcc>)
 8003c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	e009      	b.n	8003c9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3310      	adds	r3, #16
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fef2 	bl	8003a74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3324      	adds	r3, #36	; 0x24
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff feed 	bl	8003a74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c9a:	f002 f833 	bl	8005d04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c9e:	2301      	movs	r3, #1
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08e      	sub	sp, #56	; 0x38
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <xQueueGenericCreateStatic+0x52>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <xQueueGenericCreateStatic+0x56>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <xQueueGenericCreateStatic+0x58>
 8003d02:	2300      	movs	r3, #0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	623b      	str	r3, [r7, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	e7fe      	b.n	8003d1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <xQueueGenericCreateStatic+0x7e>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <xQueueGenericCreateStatic+0x82>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <xQueueGenericCreateStatic+0x84>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	61fb      	str	r3, [r7, #28]
}
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d4a:	2350      	movs	r3, #80	; 0x50
 8003d4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b50      	cmp	r3, #80	; 0x50
 8003d52:	d00a      	beq.n	8003d6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	61bb      	str	r3, [r7, #24]
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	4613      	mov	r3, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f805 	bl	8003d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3730      	adds	r7, #48	; 0x30
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d103      	bne.n	8003db8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e002      	b.n	8003dbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003dca:	2101      	movs	r1, #1
 8003dcc:	69b8      	ldr	r0, [r7, #24]
 8003dce:	f7ff ff05 	bl	8003bdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08e      	sub	sp, #56	; 0x38
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003df2:	2300      	movs	r3, #0
 8003df4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <xQueueGenericSend+0x32>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <xQueueGenericSend+0x40>
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <xQueueGenericSend+0x44>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <xQueueGenericSend+0x46>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <xQueueGenericSend+0x60>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d103      	bne.n	8003e52 <xQueueGenericSend+0x6e>
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <xQueueGenericSend+0x72>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <xQueueGenericSend+0x74>
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <xQueueGenericSend+0x8e>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	623b      	str	r3, [r7, #32]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e72:	f001 f9bd 	bl	80051f0 <xTaskGetSchedulerState>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <xQueueGenericSend+0x9e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <xQueueGenericSend+0xa2>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <xQueueGenericSend+0xa4>
 8003e86:	2300      	movs	r3, #0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	61fb      	str	r3, [r7, #28]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ea2:	f001 feff 	bl	8005ca4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <xQueueGenericSend+0xd4>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d129      	bne.n	8003f0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ebe:	f000 fa0b 	bl	80042d8 <prvCopyDataToQueue>
 8003ec2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	3324      	adds	r3, #36	; 0x24
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 ffcf 	bl	8004e74 <xTaskRemoveFromEventList>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d013      	beq.n	8003f04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003edc:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <xQueueGenericSend+0x1f8>)
 8003ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	e00a      	b.n	8003f04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <xQueueGenericSend+0x1f8>)
 8003ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f04:	f001 fefe 	bl	8005d04 <vPortExitCritical>
				return pdPASS;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e063      	b.n	8003fd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f12:	f001 fef7 	bl	8005d04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e05c      	b.n	8003fd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d106      	bne.n	8003f2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f20:	f107 0314 	add.w	r3, r7, #20
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 f809 	bl	8004f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f2e:	f001 fee9 	bl	8005d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f32:	f000 fd7b 	bl	8004a2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f36:	f001 feb5 	bl	8005ca4 <vPortEnterCritical>
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f40:	b25b      	sxtb	r3, r3
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f46:	d103      	bne.n	8003f50 <xQueueGenericSend+0x16c>
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f56:	b25b      	sxtb	r3, r3
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f5c:	d103      	bne.n	8003f66 <xQueueGenericSend+0x182>
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f66:	f001 fecd 	bl	8005d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f6a:	1d3a      	adds	r2, r7, #4
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	4611      	mov	r1, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fff8 	bl	8004f68 <xTaskCheckForTimeOut>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d124      	bne.n	8003fc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f80:	f000 faa2 	bl	80044c8 <prvIsQueueFull>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d018      	beq.n	8003fbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	3310      	adds	r3, #16
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 ff1e 	bl	8004dd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f9a:	f000 fa2d 	bl	80043f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f9e:	f000 fd53 	bl	8004a48 <xTaskResumeAll>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f47f af7c 	bne.w	8003ea2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <xQueueGenericSend+0x1f8>)
 8003fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	e772      	b.n	8003ea2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fbe:	f000 fa1b 	bl	80043f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fc2:	f000 fd41 	bl	8004a48 <xTaskResumeAll>
 8003fc6:	e76c      	b.n	8003ea2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fca:	f000 fa15 	bl	80043f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fce:	f000 fd3b 	bl	8004a48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003fd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3738      	adds	r7, #56	; 0x38
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b090      	sub	sp, #64	; 0x40
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10a      	bne.n	800400e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d103      	bne.n	800401c <xQueueGenericSendFromISR+0x3c>
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <xQueueGenericSendFromISR+0x40>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <xQueueGenericSendFromISR+0x42>
 8004020:	2300      	movs	r3, #0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d103      	bne.n	800404a <xQueueGenericSendFromISR+0x6a>
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <xQueueGenericSendFromISR+0x6e>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <xQueueGenericSendFromISR+0x70>
 800404e:	2300      	movs	r3, #0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	623b      	str	r3, [r7, #32]
}
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800406a:	f001 fefd 	bl	8005e68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800406e:	f3ef 8211 	mrs	r2, BASEPRI
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	61fa      	str	r2, [r7, #28]
 8004084:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004086:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	429a      	cmp	r2, r3
 8004094:	d302      	bcc.n	800409c <xQueueGenericSendFromISR+0xbc>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d12f      	bne.n	80040fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040b2:	f000 f911 	bl	80042d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040be:	d112      	bne.n	80040e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d016      	beq.n	80040f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	3324      	adds	r3, #36	; 0x24
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fed1 	bl	8004e74 <xTaskRemoveFromEventList>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00e      	beq.n	80040f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e007      	b.n	80040f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040ea:	3301      	adds	r3, #1
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	b25a      	sxtb	r2, r3
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040f6:	2301      	movs	r3, #1
 80040f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80040fa:	e001      	b.n	8004100 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004102:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800410a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800410c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800410e:	4618      	mov	r0, r3
 8004110:	3740      	adds	r7, #64	; 0x40
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08c      	sub	sp, #48	; 0x30
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004124:	2300      	movs	r3, #0
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <xQueueReceive+0x30>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	623b      	str	r3, [r7, #32]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <xQueueReceive+0x3e>
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <xQueueReceive+0x42>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <xQueueReceive+0x44>
 800415a:	2300      	movs	r3, #0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <xQueueReceive+0x5e>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	61fb      	str	r3, [r7, #28]
}
 8004172:	bf00      	nop
 8004174:	e7fe      	b.n	8004174 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004176:	f001 f83b 	bl	80051f0 <xTaskGetSchedulerState>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <xQueueReceive+0x6e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <xQueueReceive+0x72>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <xQueueReceive+0x74>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <xQueueReceive+0x8e>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	61bb      	str	r3, [r7, #24]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041a6:	f001 fd7d 	bl	8005ca4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01f      	beq.n	80041f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ba:	f000 f8f7 	bl	80043ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	1e5a      	subs	r2, r3, #1
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00f      	beq.n	80041ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	3310      	adds	r3, #16
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fe4e 	bl	8004e74 <xTaskRemoveFromEventList>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041de:	4b3d      	ldr	r3, [pc, #244]	; (80042d4 <xQueueReceive+0x1bc>)
 80041e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041ee:	f001 fd89 	bl	8005d04 <vPortExitCritical>
				return pdPASS;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e069      	b.n	80042ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041fc:	f001 fd82 	bl	8005d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004200:	2300      	movs	r3, #0
 8004202:	e062      	b.n	80042ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800420a:	f107 0310 	add.w	r3, r7, #16
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fe94 	bl	8004f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004214:	2301      	movs	r3, #1
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004218:	f001 fd74 	bl	8005d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800421c:	f000 fc06 	bl	8004a2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004220:	f001 fd40 	bl	8005ca4 <vPortEnterCritical>
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422a:	b25b      	sxtb	r3, r3
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004230:	d103      	bne.n	800423a <xQueueReceive+0x122>
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004240:	b25b      	sxtb	r3, r3
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004246:	d103      	bne.n	8004250 <xQueueReceive+0x138>
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004250:	f001 fd58 	bl	8005d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004254:	1d3a      	adds	r2, r7, #4
 8004256:	f107 0310 	add.w	r3, r7, #16
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fe83 	bl	8004f68 <xTaskCheckForTimeOut>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d123      	bne.n	80042b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800426a:	f000 f917 	bl	800449c <prvIsQueueEmpty>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d017      	beq.n	80042a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	3324      	adds	r3, #36	; 0x24
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fda9 	bl	8004dd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004284:	f000 f8b8 	bl	80043f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004288:	f000 fbde 	bl	8004a48 <xTaskResumeAll>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d189      	bne.n	80041a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004292:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <xQueueReceive+0x1bc>)
 8004294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	e780      	b.n	80041a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042a6:	f000 f8a7 	bl	80043f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042aa:	f000 fbcd 	bl	8004a48 <xTaskResumeAll>
 80042ae:	e77a      	b.n	80041a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b2:	f000 f8a1 	bl	80043f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042b6:	f000 fbc7 	bl	8004a48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042bc:	f000 f8ee 	bl	800449c <prvIsQueueEmpty>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f43f af6f 	beq.w	80041a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3730      	adds	r7, #48	; 0x30
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	e000ed04 	.word	0xe000ed04

080042d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10d      	bne.n	8004312 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d14d      	bne.n	800439a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 ff92 	bl	800522c <xTaskPriorityDisinherit>
 8004308:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	e043      	b.n	800439a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d119      	bne.n	800434c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6858      	ldr	r0, [r3, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	461a      	mov	r2, r3
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	f001 ffee 	bl	8006304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	441a      	add	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	d32b      	bcc.n	800439a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	e026      	b.n	800439a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68d8      	ldr	r0, [r3, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	461a      	mov	r2, r3
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	f001 ffd4 	bl	8006304 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	425b      	negs	r3, r3
 8004366:	441a      	add	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d207      	bcs.n	8004388 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	425b      	negs	r3, r3
 8004382:	441a      	add	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d105      	bne.n	800439a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	3b01      	subs	r3, #1
 8004398:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043a2:	697b      	ldr	r3, [r7, #20]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d018      	beq.n	80043f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	441a      	add	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d303      	bcc.n	80043e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68d9      	ldr	r1, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	461a      	mov	r2, r3
 80043ea:	6838      	ldr	r0, [r7, #0]
 80043ec:	f001 ff8a 	bl	8006304 <memcpy>
	}
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004400:	f001 fc50 	bl	8005ca4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800440a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800440c:	e011      	b.n	8004432 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	2b00      	cmp	r3, #0
 8004414:	d012      	beq.n	800443c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3324      	adds	r3, #36	; 0x24
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fd2a 	bl	8004e74 <xTaskRemoveFromEventList>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004426:	f000 fe01 	bl	800502c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	3b01      	subs	r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004436:	2b00      	cmp	r3, #0
 8004438:	dce9      	bgt.n	800440e <prvUnlockQueue+0x16>
 800443a:	e000      	b.n	800443e <prvUnlockQueue+0x46>
					break;
 800443c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	22ff      	movs	r2, #255	; 0xff
 8004442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004446:	f001 fc5d 	bl	8005d04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800444a:	f001 fc2b 	bl	8005ca4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004454:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004456:	e011      	b.n	800447c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d012      	beq.n	8004486 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3310      	adds	r3, #16
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fd05 	bl	8004e74 <xTaskRemoveFromEventList>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004470:	f000 fddc 	bl	800502c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004474:	7bbb      	ldrb	r3, [r7, #14]
 8004476:	3b01      	subs	r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800447c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004480:	2b00      	cmp	r3, #0
 8004482:	dce9      	bgt.n	8004458 <prvUnlockQueue+0x60>
 8004484:	e000      	b.n	8004488 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004486:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	22ff      	movs	r2, #255	; 0xff
 800448c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004490:	f001 fc38 	bl	8005d04 <vPortExitCritical>
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044a4:	f001 fbfe 	bl	8005ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044b0:	2301      	movs	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e001      	b.n	80044ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044ba:	f001 fc23 	bl	8005d04 <vPortExitCritical>

	return xReturn;
 80044be:	68fb      	ldr	r3, [r7, #12]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044d0:	f001 fbe8 	bl	8005ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	429a      	cmp	r2, r3
 80044de:	d102      	bne.n	80044e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044e0:	2301      	movs	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e001      	b.n	80044ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044ea:	f001 fc0b 	bl	8005d04 <vPortExitCritical>

	return xReturn;
 80044ee:	68fb      	ldr	r3, [r7, #12]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e014      	b.n	8004532 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004508:	4a0f      	ldr	r2, [pc, #60]	; (8004548 <vQueueAddToRegistry+0x50>)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004514:	490c      	ldr	r1, [pc, #48]	; (8004548 <vQueueAddToRegistry+0x50>)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <vQueueAddToRegistry+0x50>)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4413      	add	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800452a:	e006      	b.n	800453a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b07      	cmp	r3, #7
 8004536:	d9e7      	bls.n	8004508 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	200019dc 	.word	0x200019dc

0800454c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800455c:	f001 fba2 	bl	8005ca4 <vPortEnterCritical>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004566:	b25b      	sxtb	r3, r3
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800456c:	d103      	bne.n	8004576 <vQueueWaitForMessageRestricted+0x2a>
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800457c:	b25b      	sxtb	r3, r3
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004582:	d103      	bne.n	800458c <vQueueWaitForMessageRestricted+0x40>
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800458c:	f001 fbba 	bl	8005d04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3324      	adds	r3, #36	; 0x24
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fc3b 	bl	8004e1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045a6:	6978      	ldr	r0, [r7, #20]
 80045a8:	f7ff ff26 	bl	80043f8 <prvUnlockQueue>
	}
 80045ac:	bf00      	nop
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08e      	sub	sp, #56	; 0x38
 80045b8:	af04      	add	r7, sp, #16
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <xTaskCreateStatic+0x2a>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	623b      	str	r3, [r7, #32]
}
 80045da:	bf00      	nop
 80045dc:	e7fe      	b.n	80045dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <xTaskCreateStatic+0x46>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	61fb      	str	r3, [r7, #28]
}
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045fa:	235c      	movs	r3, #92	; 0x5c
 80045fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b5c      	cmp	r3, #92	; 0x5c
 8004602:	d00a      	beq.n	800461a <xTaskCreateStatic+0x66>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	61bb      	str	r3, [r7, #24]
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800461a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01e      	beq.n	8004660 <xTaskCreateStatic+0xac>
 8004622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01b      	beq.n	8004660 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004630:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800463a:	2300      	movs	r3, #0
 800463c:	9303      	str	r3, [sp, #12]
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	9302      	str	r3, [sp, #8]
 8004642:	f107 0314 	add.w	r3, r7, #20
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f850 	bl	80046f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800465a:	f000 f8dd 	bl	8004818 <prvAddNewTaskToReadyList>
 800465e:	e001      	b.n	8004664 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004664:	697b      	ldr	r3, [r7, #20]
	}
 8004666:	4618      	mov	r0, r3
 8004668:	3728      	adds	r7, #40	; 0x28
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800466e:	b580      	push	{r7, lr}
 8004670:	b08c      	sub	sp, #48	; 0x30
 8004672:	af04      	add	r7, sp, #16
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4613      	mov	r3, r2
 800467c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4618      	mov	r0, r3
 8004684:	f001 fc30 	bl	8005ee8 <pvPortMalloc>
 8004688:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00e      	beq.n	80046ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004690:	205c      	movs	r0, #92	; 0x5c
 8004692:	f001 fc29 	bl	8005ee8 <pvPortMalloc>
 8004696:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
 80046a4:	e005      	b.n	80046b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046a6:	6978      	ldr	r0, [r7, #20]
 80046a8:	f001 fcea 	bl	8006080 <vPortFree>
 80046ac:	e001      	b.n	80046b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d017      	beq.n	80046e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046c0:	88fa      	ldrh	r2, [r7, #6]
 80046c2:	2300      	movs	r3, #0
 80046c4:	9303      	str	r3, [sp, #12]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	9302      	str	r3, [sp, #8]
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f80e 	bl	80046f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046dc:	69f8      	ldr	r0, [r7, #28]
 80046de:	f000 f89b 	bl	8004818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046e2:	2301      	movs	r3, #1
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	e002      	b.n	80046ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046ee:	69bb      	ldr	r3, [r7, #24]
	}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	461a      	mov	r2, r3
 8004710:	21a5      	movs	r1, #165	; 0xa5
 8004712:	f001 fe05 	bl	8006320 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004720:	3b01      	subs	r3, #1
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f023 0307 	bic.w	r3, r3, #7
 800472e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <prvInitialiseNewTask+0x58>
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	617b      	str	r3, [r7, #20]
}
 800474c:	bf00      	nop
 800474e:	e7fe      	b.n	800474e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01f      	beq.n	8004796 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	e012      	b.n	8004782 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4413      	add	r3, r2
 8004762:	7819      	ldrb	r1, [r3, #0]
 8004764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	3334      	adds	r3, #52	; 0x34
 800476c:	460a      	mov	r2, r1
 800476e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	4413      	add	r3, r2
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d006      	beq.n	800478a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	3301      	adds	r3, #1
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	2b0f      	cmp	r3, #15
 8004786:	d9e9      	bls.n	800475c <prvInitialiseNewTask+0x64>
 8004788:	e000      	b.n	800478c <prvInitialiseNewTask+0x94>
			{
				break;
 800478a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004794:	e003      	b.n	800479e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	2b37      	cmp	r3, #55	; 0x37
 80047a2:	d901      	bls.n	80047a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047a4:	2337      	movs	r3, #55	; 0x37
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	2200      	movs	r2, #0
 80047b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	3304      	adds	r3, #4
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff f978 	bl	8003ab4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	3318      	adds	r3, #24
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff f973 	bl	8003ab4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	2200      	movs	r2, #0
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	68f9      	ldr	r1, [r7, #12]
 80047f6:	69b8      	ldr	r0, [r7, #24]
 80047f8:	f001 f928 	bl	8005a4c <pxPortInitialiseStack>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800480e:	bf00      	nop
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004820:	f001 fa40 	bl	8005ca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004824:	4b2d      	ldr	r3, [pc, #180]	; (80048dc <prvAddNewTaskToReadyList+0xc4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3301      	adds	r3, #1
 800482a:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <prvAddNewTaskToReadyList+0xc4>)
 800482c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800482e:	4b2c      	ldr	r3, [pc, #176]	; (80048e0 <prvAddNewTaskToReadyList+0xc8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004836:	4a2a      	ldr	r2, [pc, #168]	; (80048e0 <prvAddNewTaskToReadyList+0xc8>)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <prvAddNewTaskToReadyList+0xc4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d110      	bne.n	8004866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004844:	f000 fc16 	bl	8005074 <prvInitialiseTaskLists>
 8004848:	e00d      	b.n	8004866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800484a:	4b26      	ldr	r3, [pc, #152]	; (80048e4 <prvAddNewTaskToReadyList+0xcc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004852:	4b23      	ldr	r3, [pc, #140]	; (80048e0 <prvAddNewTaskToReadyList+0xc8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	429a      	cmp	r2, r3
 800485e:	d802      	bhi.n	8004866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004860:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <prvAddNewTaskToReadyList+0xc8>)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004866:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <prvAddNewTaskToReadyList+0xd0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3301      	adds	r3, #1
 800486c:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <prvAddNewTaskToReadyList+0xd0>)
 800486e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004870:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <prvAddNewTaskToReadyList+0xd0>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	4b1b      	ldr	r3, [pc, #108]	; (80048ec <prvAddNewTaskToReadyList+0xd4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d903      	bls.n	800488c <prvAddNewTaskToReadyList+0x74>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	4a18      	ldr	r2, [pc, #96]	; (80048ec <prvAddNewTaskToReadyList+0xd4>)
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <prvAddNewTaskToReadyList+0xd8>)
 800489a:	441a      	add	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f7ff f913 	bl	8003ace <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048a8:	f001 fa2c 	bl	8005d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048ac:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <prvAddNewTaskToReadyList+0xcc>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00e      	beq.n	80048d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <prvAddNewTaskToReadyList+0xc8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	429a      	cmp	r2, r3
 80048c0:	d207      	bcs.n	80048d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <prvAddNewTaskToReadyList+0xdc>)
 80048c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000c54 	.word	0x20000c54
 80048e0:	20000780 	.word	0x20000780
 80048e4:	20000c60 	.word	0x20000c60
 80048e8:	20000c70 	.word	0x20000c70
 80048ec:	20000c5c 	.word	0x20000c5c
 80048f0:	20000784 	.word	0x20000784
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d017      	beq.n	800493a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <vTaskDelay+0x60>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <vTaskDelay+0x30>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60bb      	str	r3, [r7, #8]
}
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004928:	f000 f880 	bl	8004a2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800492c:	2100      	movs	r1, #0
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fcea 	bl	8005308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004934:	f000 f888 	bl	8004a48 <xTaskResumeAll>
 8004938:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d107      	bne.n	8004950 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <vTaskDelay+0x64>)
 8004942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000c7c 	.word	0x20000c7c
 800495c:	e000ed04 	.word	0xe000ed04

08004960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004966:	2300      	movs	r3, #0
 8004968:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800496a:	2300      	movs	r3, #0
 800496c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800496e:	463a      	mov	r2, r7
 8004970:	1d39      	adds	r1, r7, #4
 8004972:	f107 0308 	add.w	r3, r7, #8
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff f848 	bl	8003a0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800497c:	6839      	ldr	r1, [r7, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	9202      	str	r2, [sp, #8]
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	2300      	movs	r3, #0
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	2300      	movs	r3, #0
 800498c:	460a      	mov	r2, r1
 800498e:	4921      	ldr	r1, [pc, #132]	; (8004a14 <vTaskStartScheduler+0xb4>)
 8004990:	4821      	ldr	r0, [pc, #132]	; (8004a18 <vTaskStartScheduler+0xb8>)
 8004992:	f7ff fe0f 	bl	80045b4 <xTaskCreateStatic>
 8004996:	4603      	mov	r3, r0
 8004998:	4a20      	ldr	r2, [pc, #128]	; (8004a1c <vTaskStartScheduler+0xbc>)
 800499a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800499c:	4b1f      	ldr	r3, [pc, #124]	; (8004a1c <vTaskStartScheduler+0xbc>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049a4:	2301      	movs	r3, #1
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	e001      	b.n	80049ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d102      	bne.n	80049ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80049b4:	f000 fcfc 	bl	80053b0 <xTimerCreateTimerTask>
 80049b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d116      	bne.n	80049ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	613b      	str	r3, [r7, #16]
}
 80049d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049d4:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <vTaskStartScheduler+0xc0>)
 80049d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <vTaskStartScheduler+0xc4>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049e2:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <vTaskStartScheduler+0xc8>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049e8:	f001 f8ba 	bl	8005b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049ec:	e00e      	b.n	8004a0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f4:	d10a      	bne.n	8004a0c <vTaskStartScheduler+0xac>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	60fb      	str	r3, [r7, #12]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <vTaskStartScheduler+0xaa>
}
 8004a0c:	bf00      	nop
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	08006364 	.word	0x08006364
 8004a18:	08005045 	.word	0x08005045
 8004a1c:	20000c78 	.word	0x20000c78
 8004a20:	20000c74 	.word	0x20000c74
 8004a24:	20000c60 	.word	0x20000c60
 8004a28:	20000c58 	.word	0x20000c58

08004a2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <vTaskSuspendAll+0x18>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	4a03      	ldr	r2, [pc, #12]	; (8004a44 <vTaskSuspendAll+0x18>)
 8004a38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a3a:	bf00      	nop
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	20000c7c 	.word	0x20000c7c

08004a48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a56:	4b42      	ldr	r3, [pc, #264]	; (8004b60 <xTaskResumeAll+0x118>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <xTaskResumeAll+0x2c>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	603b      	str	r3, [r7, #0]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a74:	f001 f916 	bl	8005ca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a78:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <xTaskResumeAll+0x118>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	4a38      	ldr	r2, [pc, #224]	; (8004b60 <xTaskResumeAll+0x118>)
 8004a80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a82:	4b37      	ldr	r3, [pc, #220]	; (8004b60 <xTaskResumeAll+0x118>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d162      	bne.n	8004b50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a8a:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <xTaskResumeAll+0x11c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d05e      	beq.n	8004b50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a92:	e02f      	b.n	8004af4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a94:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <xTaskResumeAll+0x120>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3318      	adds	r3, #24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff f871 	bl	8003b88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff f86c 	bl	8003b88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	; (8004b6c <xTaskResumeAll+0x124>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d903      	bls.n	8004ac4 <xTaskResumeAll+0x7c>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <xTaskResumeAll+0x124>)
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4a27      	ldr	r2, [pc, #156]	; (8004b70 <xTaskResumeAll+0x128>)
 8004ad2:	441a      	add	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f7fe fff7 	bl	8003ace <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae4:	4b23      	ldr	r3, [pc, #140]	; (8004b74 <xTaskResumeAll+0x12c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d302      	bcc.n	8004af4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004aee:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <xTaskResumeAll+0x130>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004af4:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <xTaskResumeAll+0x120>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1cb      	bne.n	8004a94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b02:	f000 fb55 	bl	80051b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b06:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <xTaskResumeAll+0x134>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d010      	beq.n	8004b34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b12:	f000 f847 	bl	8004ba4 <xTaskIncrementTick>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b1c:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <xTaskResumeAll+0x130>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f1      	bne.n	8004b12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004b2e:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <xTaskResumeAll+0x134>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b34:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <xTaskResumeAll+0x130>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b40:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <xTaskResumeAll+0x138>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b50:	f001 f8d8 	bl	8005d04 <vPortExitCritical>

	return xAlreadyYielded;
 8004b54:	68bb      	ldr	r3, [r7, #8]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000c7c 	.word	0x20000c7c
 8004b64:	20000c54 	.word	0x20000c54
 8004b68:	20000c14 	.word	0x20000c14
 8004b6c:	20000c5c 	.word	0x20000c5c
 8004b70:	20000784 	.word	0x20000784
 8004b74:	20000780 	.word	0x20000780
 8004b78:	20000c68 	.word	0x20000c68
 8004b7c:	20000c64 	.word	0x20000c64
 8004b80:	e000ed04 	.word	0xe000ed04

08004b84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <xTaskGetTickCount+0x1c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b90:	687b      	ldr	r3, [r7, #4]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000c58 	.word	0x20000c58

08004ba4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bae:	4b4f      	ldr	r3, [pc, #316]	; (8004cec <xTaskIncrementTick+0x148>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 808f 	bne.w	8004cd6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bb8:	4b4d      	ldr	r3, [pc, #308]	; (8004cf0 <xTaskIncrementTick+0x14c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bc0:	4a4b      	ldr	r2, [pc, #300]	; (8004cf0 <xTaskIncrementTick+0x14c>)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d120      	bne.n	8004c0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bcc:	4b49      	ldr	r3, [pc, #292]	; (8004cf4 <xTaskIncrementTick+0x150>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <xTaskIncrementTick+0x48>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	603b      	str	r3, [r7, #0]
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <xTaskIncrementTick+0x46>
 8004bec:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <xTaskIncrementTick+0x150>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	4b41      	ldr	r3, [pc, #260]	; (8004cf8 <xTaskIncrementTick+0x154>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a3f      	ldr	r2, [pc, #252]	; (8004cf4 <xTaskIncrementTick+0x150>)
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4a3f      	ldr	r2, [pc, #252]	; (8004cf8 <xTaskIncrementTick+0x154>)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	4b3e      	ldr	r3, [pc, #248]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	4a3d      	ldr	r2, [pc, #244]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	f000 fad1 	bl	80051b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c0e:	4b3c      	ldr	r3, [pc, #240]	; (8004d00 <xTaskIncrementTick+0x15c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d349      	bcc.n	8004cac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c18:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <xTaskIncrementTick+0x150>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c22:	4b37      	ldr	r3, [pc, #220]	; (8004d00 <xTaskIncrementTick+0x15c>)
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c28:	601a      	str	r2, [r3, #0]
					break;
 8004c2a:	e03f      	b.n	8004cac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c2c:	4b31      	ldr	r3, [pc, #196]	; (8004cf4 <xTaskIncrementTick+0x150>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d203      	bcs.n	8004c4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c44:	4a2e      	ldr	r2, [pc, #184]	; (8004d00 <xTaskIncrementTick+0x15c>)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c4a:	e02f      	b.n	8004cac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fe ff99 	bl	8003b88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	3318      	adds	r3, #24
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe ff90 	bl	8003b88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6c:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <xTaskIncrementTick+0x160>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d903      	bls.n	8004c7c <xTaskIncrementTick+0xd8>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	4a22      	ldr	r2, [pc, #136]	; (8004d04 <xTaskIncrementTick+0x160>)
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4a1f      	ldr	r2, [pc, #124]	; (8004d08 <xTaskIncrementTick+0x164>)
 8004c8a:	441a      	add	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4619      	mov	r1, r3
 8004c92:	4610      	mov	r0, r2
 8004c94:	f7fe ff1b 	bl	8003ace <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <xTaskIncrementTick+0x168>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d3b8      	bcc.n	8004c18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004caa:	e7b5      	b.n	8004c18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cac:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <xTaskIncrementTick+0x168>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb2:	4915      	ldr	r1, [pc, #84]	; (8004d08 <xTaskIncrementTick+0x164>)
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d901      	bls.n	8004cc8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <xTaskIncrementTick+0x16c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	e004      	b.n	8004ce0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004cd6:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <xTaskIncrementTick+0x170>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	4a0d      	ldr	r2, [pc, #52]	; (8004d14 <xTaskIncrementTick+0x170>)
 8004cde:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ce0:	697b      	ldr	r3, [r7, #20]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000c7c 	.word	0x20000c7c
 8004cf0:	20000c58 	.word	0x20000c58
 8004cf4:	20000c0c 	.word	0x20000c0c
 8004cf8:	20000c10 	.word	0x20000c10
 8004cfc:	20000c6c 	.word	0x20000c6c
 8004d00:	20000c74 	.word	0x20000c74
 8004d04:	20000c5c 	.word	0x20000c5c
 8004d08:	20000784 	.word	0x20000784
 8004d0c:	20000780 	.word	0x20000780
 8004d10:	20000c68 	.word	0x20000c68
 8004d14:	20000c64 	.word	0x20000c64

08004d18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d1e:	4b28      	ldr	r3, [pc, #160]	; (8004dc0 <vTaskSwitchContext+0xa8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d26:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <vTaskSwitchContext+0xac>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d2c:	e041      	b.n	8004db2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004d2e:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <vTaskSwitchContext+0xac>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d34:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <vTaskSwitchContext+0xb0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	e010      	b.n	8004d5e <vTaskSwitchContext+0x46>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <vTaskSwitchContext+0x40>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	607b      	str	r3, [r7, #4]
}
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <vTaskSwitchContext+0x3e>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	491b      	ldr	r1, [pc, #108]	; (8004dcc <vTaskSwitchContext+0xb4>)
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0e4      	beq.n	8004d3c <vTaskSwitchContext+0x24>
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <vTaskSwitchContext+0xb4>)
 8004d7e:	4413      	add	r3, r2
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	605a      	str	r2, [r3, #4]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	3308      	adds	r3, #8
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d104      	bne.n	8004da2 <vTaskSwitchContext+0x8a>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	605a      	str	r2, [r3, #4]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <vTaskSwitchContext+0xb8>)
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	4a06      	ldr	r2, [pc, #24]	; (8004dc8 <vTaskSwitchContext+0xb0>)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6013      	str	r3, [r2, #0]
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000c7c 	.word	0x20000c7c
 8004dc4:	20000c68 	.word	0x20000c68
 8004dc8:	20000c5c 	.word	0x20000c5c
 8004dcc:	20000784 	.word	0x20000784
 8004dd0:	20000780 	.word	0x20000780

08004dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	60fb      	str	r3, [r7, #12]
}
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <vTaskPlaceOnEventList+0x44>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3318      	adds	r3, #24
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fe fe87 	bl	8003b16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e08:	2101      	movs	r1, #1
 8004e0a:	6838      	ldr	r0, [r7, #0]
 8004e0c:	f000 fa7c 	bl	8005308 <prvAddCurrentTaskToDelayedList>
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	20000780 	.word	0x20000780

08004e1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	617b      	str	r3, [r7, #20]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3318      	adds	r3, #24
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7fe fe3e 	bl	8003ace <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	68b8      	ldr	r0, [r7, #8]
 8004e62:	f000 fa51 	bl	8005308 <prvAddCurrentTaskToDelayedList>
	}
 8004e66:	bf00      	nop
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000780 	.word	0x20000780

08004e74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	60fb      	str	r3, [r7, #12]
}
 8004e9c:	bf00      	nop
 8004e9e:	e7fe      	b.n	8004e9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fe fe6f 	bl	8003b88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eaa:	4b1e      	ldr	r3, [pc, #120]	; (8004f24 <xTaskRemoveFromEventList+0xb0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d11d      	bne.n	8004eee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fe66 	bl	8003b88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <xTaskRemoveFromEventList+0xb4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d903      	bls.n	8004ed0 <xTaskRemoveFromEventList+0x5c>
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	4a16      	ldr	r2, [pc, #88]	; (8004f28 <xTaskRemoveFromEventList+0xb4>)
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4a13      	ldr	r2, [pc, #76]	; (8004f2c <xTaskRemoveFromEventList+0xb8>)
 8004ede:	441a      	add	r2, r3
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7fe fdf1 	bl	8003ace <vListInsertEnd>
 8004eec:	e005      	b.n	8004efa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3318      	adds	r3, #24
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	480e      	ldr	r0, [pc, #56]	; (8004f30 <xTaskRemoveFromEventList+0xbc>)
 8004ef6:	f7fe fdea 	bl	8003ace <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efe:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <xTaskRemoveFromEventList+0xc0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d905      	bls.n	8004f14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <xTaskRemoveFromEventList+0xc4>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e001      	b.n	8004f18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f18:	697b      	ldr	r3, [r7, #20]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000c7c 	.word	0x20000c7c
 8004f28:	20000c5c 	.word	0x20000c5c
 8004f2c:	20000784 	.word	0x20000784
 8004f30:	20000c14 	.word	0x20000c14
 8004f34:	20000780 	.word	0x20000780
 8004f38:	20000c68 	.word	0x20000c68

08004f3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f44:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <vTaskInternalSetTimeOutState+0x24>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <vTaskInternalSetTimeOutState+0x28>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	605a      	str	r2, [r3, #4]
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	20000c6c 	.word	0x20000c6c
 8004f64:	20000c58 	.word	0x20000c58

08004f68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	613b      	str	r3, [r7, #16]
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	60fb      	str	r3, [r7, #12]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004faa:	f000 fe7b 	bl	8005ca4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fae:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <xTaskCheckForTimeOut+0xbc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fc6:	d102      	bne.n	8004fce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e023      	b.n	8005016 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <xTaskCheckForTimeOut+0xc0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d007      	beq.n	8004fea <xTaskCheckForTimeOut+0x82>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d302      	bcc.n	8004fea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	e015      	b.n	8005016 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d20b      	bcs.n	800500c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1ad2      	subs	r2, r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ff9b 	bl	8004f3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	e004      	b.n	8005016 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005012:	2301      	movs	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005016:	f000 fe75 	bl	8005d04 <vPortExitCritical>

	return xReturn;
 800501a:	69fb      	ldr	r3, [r7, #28]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000c58 	.word	0x20000c58
 8005028:	20000c6c 	.word	0x20000c6c

0800502c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005030:	4b03      	ldr	r3, [pc, #12]	; (8005040 <vTaskMissedYield+0x14>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	20000c68 	.word	0x20000c68

08005044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800504c:	f000 f852 	bl	80050f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005050:	4b06      	ldr	r3, [pc, #24]	; (800506c <prvIdleTask+0x28>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d9f9      	bls.n	800504c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <prvIdleTask+0x2c>)
 800505a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005068:	e7f0      	b.n	800504c <prvIdleTask+0x8>
 800506a:	bf00      	nop
 800506c:	20000784 	.word	0x20000784
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	e00c      	b.n	800509a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <prvInitialiseTaskLists+0x60>)
 800508c:	4413      	add	r3, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe fcf0 	bl	8003a74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b37      	cmp	r3, #55	; 0x37
 800509e:	d9ef      	bls.n	8005080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050a0:	480d      	ldr	r0, [pc, #52]	; (80050d8 <prvInitialiseTaskLists+0x64>)
 80050a2:	f7fe fce7 	bl	8003a74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050a6:	480d      	ldr	r0, [pc, #52]	; (80050dc <prvInitialiseTaskLists+0x68>)
 80050a8:	f7fe fce4 	bl	8003a74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050ac:	480c      	ldr	r0, [pc, #48]	; (80050e0 <prvInitialiseTaskLists+0x6c>)
 80050ae:	f7fe fce1 	bl	8003a74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050b2:	480c      	ldr	r0, [pc, #48]	; (80050e4 <prvInitialiseTaskLists+0x70>)
 80050b4:	f7fe fcde 	bl	8003a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050b8:	480b      	ldr	r0, [pc, #44]	; (80050e8 <prvInitialiseTaskLists+0x74>)
 80050ba:	f7fe fcdb 	bl	8003a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050be:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <prvInitialiseTaskLists+0x78>)
 80050c0:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <prvInitialiseTaskLists+0x64>)
 80050c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <prvInitialiseTaskLists+0x7c>)
 80050c6:	4a05      	ldr	r2, [pc, #20]	; (80050dc <prvInitialiseTaskLists+0x68>)
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000784 	.word	0x20000784
 80050d8:	20000be4 	.word	0x20000be4
 80050dc:	20000bf8 	.word	0x20000bf8
 80050e0:	20000c14 	.word	0x20000c14
 80050e4:	20000c28 	.word	0x20000c28
 80050e8:	20000c40 	.word	0x20000c40
 80050ec:	20000c0c 	.word	0x20000c0c
 80050f0:	20000c10 	.word	0x20000c10

080050f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050fa:	e019      	b.n	8005130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050fc:	f000 fdd2 	bl	8005ca4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005100:	4b10      	ldr	r3, [pc, #64]	; (8005144 <prvCheckTasksWaitingTermination+0x50>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe fd3b 	bl	8003b88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005112:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <prvCheckTasksWaitingTermination+0x54>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	4a0b      	ldr	r2, [pc, #44]	; (8005148 <prvCheckTasksWaitingTermination+0x54>)
 800511a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <prvCheckTasksWaitingTermination+0x58>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3b01      	subs	r3, #1
 8005122:	4a0a      	ldr	r2, [pc, #40]	; (800514c <prvCheckTasksWaitingTermination+0x58>)
 8005124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005126:	f000 fded 	bl	8005d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f810 	bl	8005150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <prvCheckTasksWaitingTermination+0x58>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e1      	bne.n	80050fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000c28 	.word	0x20000c28
 8005148:	20000c54 	.word	0x20000c54
 800514c:	20000c3c 	.word	0x20000c3c

08005150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800515e:	2b00      	cmp	r3, #0
 8005160:	d108      	bne.n	8005174 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	4618      	mov	r0, r3
 8005168:	f000 ff8a 	bl	8006080 <vPortFree>
				vPortFree( pxTCB );
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 ff87 	bl	8006080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005172:	e018      	b.n	80051a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800517a:	2b01      	cmp	r3, #1
 800517c:	d103      	bne.n	8005186 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 ff7e 	bl	8006080 <vPortFree>
	}
 8005184:	e00f      	b.n	80051a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800518c:	2b02      	cmp	r3, #2
 800518e:	d00a      	beq.n	80051a6 <prvDeleteTCB+0x56>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	60fb      	str	r3, [r7, #12]
}
 80051a2:	bf00      	nop
 80051a4:	e7fe      	b.n	80051a4 <prvDeleteTCB+0x54>
	}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051b6:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <prvResetNextTaskUnblockTime+0x38>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <prvResetNextTaskUnblockTime+0x3c>)
 80051c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051c8:	e008      	b.n	80051dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <prvResetNextTaskUnblockTime+0x38>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4a04      	ldr	r2, [pc, #16]	; (80051ec <prvResetNextTaskUnblockTime+0x3c>)
 80051da:	6013      	str	r3, [r2, #0]
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	20000c0c 	.word	0x20000c0c
 80051ec:	20000c74 	.word	0x20000c74

080051f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <xTaskGetSchedulerState+0x34>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051fe:	2301      	movs	r3, #1
 8005200:	607b      	str	r3, [r7, #4]
 8005202:	e008      	b.n	8005216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005204:	4b08      	ldr	r3, [pc, #32]	; (8005228 <xTaskGetSchedulerState+0x38>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800520c:	2302      	movs	r3, #2
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	e001      	b.n	8005216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005216:	687b      	ldr	r3, [r7, #4]
	}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	20000c60 	.word	0x20000c60
 8005228:	20000c7c 	.word	0x20000c7c

0800522c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d056      	beq.n	80052f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005242:	4b2e      	ldr	r3, [pc, #184]	; (80052fc <xTaskPriorityDisinherit+0xd0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	429a      	cmp	r2, r3
 800524a:	d00a      	beq.n	8005262 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	60fb      	str	r3, [r7, #12]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	60bb      	str	r3, [r7, #8]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005284:	1e5a      	subs	r2, r3, #1
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005292:	429a      	cmp	r2, r3
 8005294:	d02c      	beq.n	80052f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529a:	2b00      	cmp	r3, #0
 800529c:	d128      	bne.n	80052f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fc70 	bl	8003b88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c0:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <xTaskPriorityDisinherit+0xd4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d903      	bls.n	80052d0 <xTaskPriorityDisinherit+0xa4>
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	4a0c      	ldr	r2, [pc, #48]	; (8005300 <xTaskPriorityDisinherit+0xd4>)
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4a09      	ldr	r2, [pc, #36]	; (8005304 <xTaskPriorityDisinherit+0xd8>)
 80052de:	441a      	add	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f7fe fbf1 	bl	8003ace <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052f0:	697b      	ldr	r3, [r7, #20]
	}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000780 	.word	0x20000780
 8005300:	20000c5c 	.word	0x20000c5c
 8005304:	20000784 	.word	0x20000784

08005308 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005312:	4b21      	ldr	r3, [pc, #132]	; (8005398 <prvAddCurrentTaskToDelayedList+0x90>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005318:	4b20      	ldr	r3, [pc, #128]	; (800539c <prvAddCurrentTaskToDelayedList+0x94>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3304      	adds	r3, #4
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe fc32 	bl	8003b88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800532a:	d10a      	bne.n	8005342 <prvAddCurrentTaskToDelayedList+0x3a>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005332:	4b1a      	ldr	r3, [pc, #104]	; (800539c <prvAddCurrentTaskToDelayedList+0x94>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4819      	ldr	r0, [pc, #100]	; (80053a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800533c:	f7fe fbc7 	bl	8003ace <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005340:	e026      	b.n	8005390 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4413      	add	r3, r2
 8005348:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800534a:	4b14      	ldr	r3, [pc, #80]	; (800539c <prvAddCurrentTaskToDelayedList+0x94>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	429a      	cmp	r2, r3
 8005358:	d209      	bcs.n	800536e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b0f      	ldr	r3, [pc, #60]	; (800539c <prvAddCurrentTaskToDelayedList+0x94>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3304      	adds	r3, #4
 8005364:	4619      	mov	r1, r3
 8005366:	4610      	mov	r0, r2
 8005368:	f7fe fbd5 	bl	8003b16 <vListInsert>
}
 800536c:	e010      	b.n	8005390 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800536e:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b0a      	ldr	r3, [pc, #40]	; (800539c <prvAddCurrentTaskToDelayedList+0x94>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f7fe fbcb 	bl	8003b16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005380:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	429a      	cmp	r2, r3
 8005388:	d202      	bcs.n	8005390 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800538a:	4a08      	ldr	r2, [pc, #32]	; (80053ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	6013      	str	r3, [r2, #0]
}
 8005390:	bf00      	nop
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000c58 	.word	0x20000c58
 800539c:	20000780 	.word	0x20000780
 80053a0:	20000c40 	.word	0x20000c40
 80053a4:	20000c10 	.word	0x20000c10
 80053a8:	20000c0c 	.word	0x20000c0c
 80053ac:	20000c74 	.word	0x20000c74

080053b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08a      	sub	sp, #40	; 0x28
 80053b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053ba:	f000 fb07 	bl	80059cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053be:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <xTimerCreateTimerTask+0x80>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d021      	beq.n	800540a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053ce:	1d3a      	adds	r2, r7, #4
 80053d0:	f107 0108 	add.w	r1, r7, #8
 80053d4:	f107 030c 	add.w	r3, r7, #12
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fe fb31 	bl	8003a40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	9202      	str	r2, [sp, #8]
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	2302      	movs	r3, #2
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	2300      	movs	r3, #0
 80053ee:	460a      	mov	r2, r1
 80053f0:	4910      	ldr	r1, [pc, #64]	; (8005434 <xTimerCreateTimerTask+0x84>)
 80053f2:	4811      	ldr	r0, [pc, #68]	; (8005438 <xTimerCreateTimerTask+0x88>)
 80053f4:	f7ff f8de 	bl	80045b4 <xTaskCreateStatic>
 80053f8:	4603      	mov	r3, r0
 80053fa:	4a10      	ldr	r2, [pc, #64]	; (800543c <xTimerCreateTimerTask+0x8c>)
 80053fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <xTimerCreateTimerTask+0x8c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005406:	2301      	movs	r3, #1
 8005408:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	613b      	str	r3, [r7, #16]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005426:	697b      	ldr	r3, [r7, #20]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000cb0 	.word	0x20000cb0
 8005434:	0800636c 	.word	0x0800636c
 8005438:	08005575 	.word	0x08005575
 800543c:	20000cb4 	.word	0x20000cb4

08005440 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08a      	sub	sp, #40	; 0x28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800544e:	2300      	movs	r3, #0
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	623b      	str	r3, [r7, #32]
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800546e:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <xTimerGenericCommand+0x98>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d02a      	beq.n	80054cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b05      	cmp	r3, #5
 8005486:	dc18      	bgt.n	80054ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005488:	f7ff feb2 	bl	80051f0 <xTaskGetSchedulerState>
 800548c:	4603      	mov	r3, r0
 800548e:	2b02      	cmp	r3, #2
 8005490:	d109      	bne.n	80054a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005492:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <xTimerGenericCommand+0x98>)
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	f107 0110 	add.w	r1, r7, #16
 800549a:	2300      	movs	r3, #0
 800549c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549e:	f7fe fca1 	bl	8003de4 <xQueueGenericSend>
 80054a2:	6278      	str	r0, [r7, #36]	; 0x24
 80054a4:	e012      	b.n	80054cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054a6:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <xTimerGenericCommand+0x98>)
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	f107 0110 	add.w	r1, r7, #16
 80054ae:	2300      	movs	r3, #0
 80054b0:	2200      	movs	r2, #0
 80054b2:	f7fe fc97 	bl	8003de4 <xQueueGenericSend>
 80054b6:	6278      	str	r0, [r7, #36]	; 0x24
 80054b8:	e008      	b.n	80054cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054ba:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <xTimerGenericCommand+0x98>)
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	f107 0110 	add.w	r1, r7, #16
 80054c2:	2300      	movs	r3, #0
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	f7fe fd8b 	bl	8003fe0 <xQueueGenericSendFromISR>
 80054ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3728      	adds	r7, #40	; 0x28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000cb0 	.word	0x20000cb0

080054dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e6:	4b22      	ldr	r3, [pc, #136]	; (8005570 <prvProcessExpiredTimer+0x94>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe fb47 	bl	8003b88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d022      	beq.n	800554e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	18d1      	adds	r1, r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	6978      	ldr	r0, [r7, #20]
 8005516:	f000 f8d1 	bl	80056bc <prvInsertTimerInActiveList>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01f      	beq.n	8005560 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005520:	2300      	movs	r3, #0
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	2300      	movs	r3, #0
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	2100      	movs	r1, #0
 800552a:	6978      	ldr	r0, [r7, #20]
 800552c:	f7ff ff88 	bl	8005440 <xTimerGenericCommand>
 8005530:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d113      	bne.n	8005560 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	60fb      	str	r3, [r7, #12]
}
 800554a:	bf00      	nop
 800554c:	e7fe      	b.n	800554c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	b2da      	uxtb	r2, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	6978      	ldr	r0, [r7, #20]
 8005566:	4798      	blx	r3
}
 8005568:	bf00      	nop
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20000ca8 	.word	0x20000ca8

08005574 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800557c:	f107 0308 	add.w	r3, r7, #8
 8005580:	4618      	mov	r0, r3
 8005582:	f000 f857 	bl	8005634 <prvGetNextExpireTime>
 8005586:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4619      	mov	r1, r3
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f803 	bl	8005598 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005592:	f000 f8d5 	bl	8005740 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005596:	e7f1      	b.n	800557c <prvTimerTask+0x8>

08005598 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055a2:	f7ff fa43 	bl	8004a2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055a6:	f107 0308 	add.w	r3, r7, #8
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f866 	bl	800567c <prvSampleTimeNow>
 80055b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d130      	bne.n	800561a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <prvProcessTimerOrBlockTask+0x3c>
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d806      	bhi.n	80055d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055c6:	f7ff fa3f 	bl	8004a48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff ff85 	bl	80054dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055d2:	e024      	b.n	800561e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055da:	4b13      	ldr	r3, [pc, #76]	; (8005628 <prvProcessTimerOrBlockTask+0x90>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <prvProcessTimerOrBlockTask+0x50>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <prvProcessTimerOrBlockTask+0x52>
 80055e8:	2300      	movs	r3, #0
 80055ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055ec:	4b0f      	ldr	r3, [pc, #60]	; (800562c <prvProcessTimerOrBlockTask+0x94>)
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	4619      	mov	r1, r3
 80055fa:	f7fe ffa7 	bl	800454c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055fe:	f7ff fa23 	bl	8004a48 <xTaskResumeAll>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <prvProcessTimerOrBlockTask+0x98>)
 800560a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	f3bf 8f6f 	isb	sy
}
 8005618:	e001      	b.n	800561e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800561a:	f7ff fa15 	bl	8004a48 <xTaskResumeAll>
}
 800561e:	bf00      	nop
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000cac 	.word	0x20000cac
 800562c:	20000cb0 	.word	0x20000cb0
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800563c:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <prvGetNextExpireTime+0x44>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <prvGetNextExpireTime+0x16>
 8005646:	2201      	movs	r2, #1
 8005648:	e000      	b.n	800564c <prvGetNextExpireTime+0x18>
 800564a:	2200      	movs	r2, #0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d105      	bne.n	8005664 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005658:	4b07      	ldr	r3, [pc, #28]	; (8005678 <prvGetNextExpireTime+0x44>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e001      	b.n	8005668 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005668:	68fb      	ldr	r3, [r7, #12]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20000ca8 	.word	0x20000ca8

0800567c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005684:	f7ff fa7e 	bl	8004b84 <xTaskGetTickCount>
 8005688:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800568a:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <prvSampleTimeNow+0x3c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	429a      	cmp	r2, r3
 8005692:	d205      	bcs.n	80056a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005694:	f000 f936 	bl	8005904 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e002      	b.n	80056a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056a6:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <prvSampleTimeNow+0x3c>)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80056ac:	68fb      	ldr	r3, [r7, #12]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000cb8 	.word	0x20000cb8

080056bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d812      	bhi.n	8005708 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	1ad2      	subs	r2, r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d302      	bcc.n	80056f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	e01b      	b.n	800572e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056f6:	4b10      	ldr	r3, [pc, #64]	; (8005738 <prvInsertTimerInActiveList+0x7c>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f7fe fa08 	bl	8003b16 <vListInsert>
 8005706:	e012      	b.n	800572e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d206      	bcs.n	800571e <prvInsertTimerInActiveList+0x62>
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	d302      	bcc.n	800571e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005718:	2301      	movs	r3, #1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e007      	b.n	800572e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800571e:	4b07      	ldr	r3, [pc, #28]	; (800573c <prvInsertTimerInActiveList+0x80>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3304      	adds	r3, #4
 8005726:	4619      	mov	r1, r3
 8005728:	4610      	mov	r0, r2
 800572a:	f7fe f9f4 	bl	8003b16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800572e:	697b      	ldr	r3, [r7, #20]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000cac 	.word	0x20000cac
 800573c:	20000ca8 	.word	0x20000ca8

08005740 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08e      	sub	sp, #56	; 0x38
 8005744:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005746:	e0ca      	b.n	80058de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	da18      	bge.n	8005780 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	3304      	adds	r3, #4
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	61fb      	str	r3, [r7, #28]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005776:	6850      	ldr	r0, [r2, #4]
 8005778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577a:	6892      	ldr	r2, [r2, #8]
 800577c:	4611      	mov	r1, r2
 800577e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f2c0 80aa 	blt.w	80058dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	3304      	adds	r3, #4
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe f9f5 	bl	8003b88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800579e:	463b      	mov	r3, r7
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff ff6b 	bl	800567c <prvSampleTimeNow>
 80057a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b09      	cmp	r3, #9
 80057ac:	f200 8097 	bhi.w	80058de <prvProcessReceivedCommands+0x19e>
 80057b0:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <prvProcessReceivedCommands+0x78>)
 80057b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b6:	bf00      	nop
 80057b8:	080057e1 	.word	0x080057e1
 80057bc:	080057e1 	.word	0x080057e1
 80057c0:	080057e1 	.word	0x080057e1
 80057c4:	08005855 	.word	0x08005855
 80057c8:	08005869 	.word	0x08005869
 80057cc:	080058b3 	.word	0x080058b3
 80057d0:	080057e1 	.word	0x080057e1
 80057d4:	080057e1 	.word	0x080057e1
 80057d8:	08005855 	.word	0x08005855
 80057dc:	08005869 	.word	0x08005869
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	18d1      	adds	r1, r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005800:	f7ff ff5c 	bl	80056bc <prvInsertTimerInActiveList>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d069      	beq.n	80058de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005810:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d05e      	beq.n	80058de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	441a      	add	r2, r3
 8005828:	2300      	movs	r3, #0
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	2300      	movs	r3, #0
 800582e:	2100      	movs	r1, #0
 8005830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005832:	f7ff fe05 	bl	8005440 <xTimerGenericCommand>
 8005836:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d14f      	bne.n	80058de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	61bb      	str	r3, [r7, #24]
}
 8005850:	bf00      	nop
 8005852:	e7fe      	b.n	8005852 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	b2da      	uxtb	r2, r3
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005866:	e03a      	b.n	80058de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	b2da      	uxtb	r2, r3
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	617b      	str	r3, [r7, #20]
}
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	18d1      	adds	r1, r2, r3
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ac:	f7ff ff06 	bl	80056bc <prvInsertTimerInActiveList>
					break;
 80058b0:	e015      	b.n	80058de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d103      	bne.n	80058c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80058c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c2:	f000 fbdd 	bl	8006080 <vPortFree>
 80058c6:	e00a      	b.n	80058de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058da:	e000      	b.n	80058de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80058dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058de:	4b08      	ldr	r3, [pc, #32]	; (8005900 <prvProcessReceivedCommands+0x1c0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	1d39      	adds	r1, r7, #4
 80058e4:	2200      	movs	r2, #0
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fe fc16 	bl	8004118 <xQueueReceive>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f47f af2a 	bne.w	8005748 <prvProcessReceivedCommands+0x8>
	}
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	3730      	adds	r7, #48	; 0x30
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000cb0 	.word	0x20000cb0

08005904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800590a:	e048      	b.n	800599e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800590c:	4b2d      	ldr	r3, [pc, #180]	; (80059c4 <prvSwitchTimerLists+0xc0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005916:	4b2b      	ldr	r3, [pc, #172]	; (80059c4 <prvSwitchTimerLists+0xc0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3304      	adds	r3, #4
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe f92f 	bl	8003b88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d02e      	beq.n	800599e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4413      	add	r3, r2
 8005948:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	429a      	cmp	r2, r3
 8005950:	d90e      	bls.n	8005970 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800595e:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <prvSwitchTimerLists+0xc0>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3304      	adds	r3, #4
 8005966:	4619      	mov	r1, r3
 8005968:	4610      	mov	r0, r2
 800596a:	f7fe f8d4 	bl	8003b16 <vListInsert>
 800596e:	e016      	b.n	800599e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005970:	2300      	movs	r3, #0
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	2300      	movs	r3, #0
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	2100      	movs	r1, #0
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff fd60 	bl	8005440 <xTimerGenericCommand>
 8005980:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	603b      	str	r3, [r7, #0]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800599e:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <prvSwitchTimerLists+0xc0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1b1      	bne.n	800590c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <prvSwitchTimerLists+0xc0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <prvSwitchTimerLists+0xc4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a04      	ldr	r2, [pc, #16]	; (80059c4 <prvSwitchTimerLists+0xc0>)
 80059b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059b6:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <prvSwitchTimerLists+0xc4>)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	6013      	str	r3, [r2, #0]
}
 80059bc:	bf00      	nop
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20000ca8 	.word	0x20000ca8
 80059c8:	20000cac 	.word	0x20000cac

080059cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059d2:	f000 f967 	bl	8005ca4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059d6:	4b15      	ldr	r3, [pc, #84]	; (8005a2c <prvCheckForValidListAndQueue+0x60>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d120      	bne.n	8005a20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059de:	4814      	ldr	r0, [pc, #80]	; (8005a30 <prvCheckForValidListAndQueue+0x64>)
 80059e0:	f7fe f848 	bl	8003a74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059e4:	4813      	ldr	r0, [pc, #76]	; (8005a34 <prvCheckForValidListAndQueue+0x68>)
 80059e6:	f7fe f845 	bl	8003a74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059ea:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <prvCheckForValidListAndQueue+0x6c>)
 80059ec:	4a10      	ldr	r2, [pc, #64]	; (8005a30 <prvCheckForValidListAndQueue+0x64>)
 80059ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059f0:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <prvCheckForValidListAndQueue+0x70>)
 80059f2:	4a10      	ldr	r2, [pc, #64]	; (8005a34 <prvCheckForValidListAndQueue+0x68>)
 80059f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059f6:	2300      	movs	r3, #0
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <prvCheckForValidListAndQueue+0x74>)
 80059fc:	4a11      	ldr	r2, [pc, #68]	; (8005a44 <prvCheckForValidListAndQueue+0x78>)
 80059fe:	2110      	movs	r1, #16
 8005a00:	200a      	movs	r0, #10
 8005a02:	f7fe f953 	bl	8003cac <xQueueGenericCreateStatic>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4a08      	ldr	r2, [pc, #32]	; (8005a2c <prvCheckForValidListAndQueue+0x60>)
 8005a0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a0c:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <prvCheckForValidListAndQueue+0x60>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <prvCheckForValidListAndQueue+0x60>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	490b      	ldr	r1, [pc, #44]	; (8005a48 <prvCheckForValidListAndQueue+0x7c>)
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe fd6c 	bl	80044f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a20:	f000 f970 	bl	8005d04 <vPortExitCritical>
}
 8005a24:	bf00      	nop
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000cb0 	.word	0x20000cb0
 8005a30:	20000c80 	.word	0x20000c80
 8005a34:	20000c94 	.word	0x20000c94
 8005a38:	20000ca8 	.word	0x20000ca8
 8005a3c:	20000cac 	.word	0x20000cac
 8005a40:	20000d5c 	.word	0x20000d5c
 8005a44:	20000cbc 	.word	0x20000cbc
 8005a48:	08006374 	.word	0x08006374

08005a4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3b04      	subs	r3, #4
 8005a5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3b04      	subs	r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3b04      	subs	r3, #4
 8005a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a7c:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <pxPortInitialiseStack+0x64>)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3b14      	subs	r3, #20
 8005a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3b04      	subs	r3, #4
 8005a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f06f 0202 	mvn.w	r2, #2
 8005a9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3b20      	subs	r3, #32
 8005aa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	08005ab5 	.word	0x08005ab5

08005ab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005abe:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <prvTaskExitError+0x54>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac6:	d00a      	beq.n	8005ade <prvTaskExitError+0x2a>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	60fb      	str	r3, [r7, #12]
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <prvTaskExitError+0x28>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	60bb      	str	r3, [r7, #8]
}
 8005af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005af2:	bf00      	nop
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0fc      	beq.n	8005af4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005afa:	bf00      	nop
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	2000000c 	.word	0x2000000c
 8005b0c:	00000000 	.word	0x00000000

08005b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b10:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <pxCurrentTCBConst2>)
 8005b12:	6819      	ldr	r1, [r3, #0]
 8005b14:	6808      	ldr	r0, [r1, #0]
 8005b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1a:	f380 8809 	msr	PSP, r0
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f380 8811 	msr	BASEPRI, r0
 8005b2a:	4770      	bx	lr
 8005b2c:	f3af 8000 	nop.w

08005b30 <pxCurrentTCBConst2>:
 8005b30:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop

08005b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b38:	4808      	ldr	r0, [pc, #32]	; (8005b5c <prvPortStartFirstTask+0x24>)
 8005b3a:	6800      	ldr	r0, [r0, #0]
 8005b3c:	6800      	ldr	r0, [r0, #0]
 8005b3e:	f380 8808 	msr	MSP, r0
 8005b42:	f04f 0000 	mov.w	r0, #0
 8005b46:	f380 8814 	msr	CONTROL, r0
 8005b4a:	b662      	cpsie	i
 8005b4c:	b661      	cpsie	f
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	df00      	svc	0
 8005b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b5a:	bf00      	nop
 8005b5c:	e000ed08 	.word	0xe000ed08

08005b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b66:	4b46      	ldr	r3, [pc, #280]	; (8005c80 <xPortStartScheduler+0x120>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a46      	ldr	r2, [pc, #280]	; (8005c84 <xPortStartScheduler+0x124>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10a      	bne.n	8005b86 <xPortStartScheduler+0x26>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	613b      	str	r3, [r7, #16]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b86:	4b3e      	ldr	r3, [pc, #248]	; (8005c80 <xPortStartScheduler+0x120>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a3f      	ldr	r2, [pc, #252]	; (8005c88 <xPortStartScheduler+0x128>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d10a      	bne.n	8005ba6 <xPortStartScheduler+0x46>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60fb      	str	r3, [r7, #12]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ba6:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <xPortStartScheduler+0x12c>)
 8005ba8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	22ff      	movs	r2, #255	; 0xff
 8005bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	4b31      	ldr	r3, [pc, #196]	; (8005c90 <xPortStartScheduler+0x130>)
 8005bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bce:	4b31      	ldr	r3, [pc, #196]	; (8005c94 <xPortStartScheduler+0x134>)
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bd4:	e009      	b.n	8005bea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005bd6:	4b2f      	ldr	r3, [pc, #188]	; (8005c94 <xPortStartScheduler+0x134>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	4a2d      	ldr	r2, [pc, #180]	; (8005c94 <xPortStartScheduler+0x134>)
 8005bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	2b80      	cmp	r3, #128	; 0x80
 8005bf4:	d0ef      	beq.n	8005bd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bf6:	4b27      	ldr	r3, [pc, #156]	; (8005c94 <xPortStartScheduler+0x134>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f1c3 0307 	rsb	r3, r3, #7
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d00a      	beq.n	8005c18 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	60bb      	str	r3, [r7, #8]
}
 8005c14:	bf00      	nop
 8005c16:	e7fe      	b.n	8005c16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c18:	4b1e      	ldr	r3, [pc, #120]	; (8005c94 <xPortStartScheduler+0x134>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	4a1d      	ldr	r2, [pc, #116]	; (8005c94 <xPortStartScheduler+0x134>)
 8005c20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c22:	4b1c      	ldr	r3, [pc, #112]	; (8005c94 <xPortStartScheduler+0x134>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c2a:	4a1a      	ldr	r2, [pc, #104]	; (8005c94 <xPortStartScheduler+0x134>)
 8005c2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c36:	4b18      	ldr	r3, [pc, #96]	; (8005c98 <xPortStartScheduler+0x138>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a17      	ldr	r2, [pc, #92]	; (8005c98 <xPortStartScheduler+0x138>)
 8005c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c42:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <xPortStartScheduler+0x138>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a14      	ldr	r2, [pc, #80]	; (8005c98 <xPortStartScheduler+0x138>)
 8005c48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c4e:	f000 f8dd 	bl	8005e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c52:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <xPortStartScheduler+0x13c>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c58:	f000 f8fc 	bl	8005e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c5c:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <xPortStartScheduler+0x140>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <xPortStartScheduler+0x140>)
 8005c62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c68:	f7ff ff66 	bl	8005b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c6c:	f7ff f854 	bl	8004d18 <vTaskSwitchContext>
	prvTaskExitError();
 8005c70:	f7ff ff20 	bl	8005ab4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	e000ed00 	.word	0xe000ed00
 8005c84:	410fc271 	.word	0x410fc271
 8005c88:	410fc270 	.word	0x410fc270
 8005c8c:	e000e400 	.word	0xe000e400
 8005c90:	20000dac 	.word	0x20000dac
 8005c94:	20000db0 	.word	0x20000db0
 8005c98:	e000ed20 	.word	0xe000ed20
 8005c9c:	2000000c 	.word	0x2000000c
 8005ca0:	e000ef34 	.word	0xe000ef34

08005ca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	607b      	str	r3, [r7, #4]
}
 8005cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cbe:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <vPortEnterCritical+0x58>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	4a0d      	ldr	r2, [pc, #52]	; (8005cfc <vPortEnterCritical+0x58>)
 8005cc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <vPortEnterCritical+0x58>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d10f      	bne.n	8005cf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <vPortEnterCritical+0x5c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	603b      	str	r3, [r7, #0]
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <vPortEnterCritical+0x4a>
	}
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	2000000c 	.word	0x2000000c
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d0a:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <vPortExitCritical+0x50>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <vPortExitCritical+0x24>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	607b      	str	r3, [r7, #4]
}
 8005d24:	bf00      	nop
 8005d26:	e7fe      	b.n	8005d26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <vPortExitCritical+0x50>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	4a09      	ldr	r2, [pc, #36]	; (8005d54 <vPortExitCritical+0x50>)
 8005d30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d32:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <vPortExitCritical+0x50>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d105      	bne.n	8005d46 <vPortExitCritical+0x42>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	f383 8811 	msr	BASEPRI, r3
}
 8005d44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	2000000c 	.word	0x2000000c
	...

08005d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d60:	f3ef 8009 	mrs	r0, PSP
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <pxCurrentTCBConst>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	f01e 0f10 	tst.w	lr, #16
 8005d70:	bf08      	it	eq
 8005d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	6010      	str	r0, [r2, #0]
 8005d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d84:	f380 8811 	msr	BASEPRI, r0
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f7fe ffc2 	bl	8004d18 <vTaskSwitchContext>
 8005d94:	f04f 0000 	mov.w	r0, #0
 8005d98:	f380 8811 	msr	BASEPRI, r0
 8005d9c:	bc09      	pop	{r0, r3}
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	6808      	ldr	r0, [r1, #0]
 8005da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da6:	f01e 0f10 	tst.w	lr, #16
 8005daa:	bf08      	it	eq
 8005dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005db0:	f380 8809 	msr	PSP, r0
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	f3af 8000 	nop.w

08005dc0 <pxCurrentTCBConst>:
 8005dc0:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop

08005dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	607b      	str	r3, [r7, #4]
}
 8005de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005de2:	f7fe fedf 	bl	8004ba4 <xTaskIncrementTick>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dec:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <xPortSysTickHandler+0x40>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	f383 8811 	msr	BASEPRI, r3
}
 8005dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e00:	bf00      	nop
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <vPortSetupTimerInterrupt+0x34>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e16:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <vPortSetupTimerInterrupt+0x38>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <vPortSetupTimerInterrupt+0x3c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <vPortSetupTimerInterrupt+0x40>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	099b      	lsrs	r3, r3, #6
 8005e28:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <vPortSetupTimerInterrupt+0x44>)
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e2e:	4b04      	ldr	r3, [pc, #16]	; (8005e40 <vPortSetupTimerInterrupt+0x34>)
 8005e30:	2207      	movs	r2, #7
 8005e32:	601a      	str	r2, [r3, #0]
}
 8005e34:	bf00      	nop
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	e000e010 	.word	0xe000e010
 8005e44:	e000e018 	.word	0xe000e018
 8005e48:	20000000 	.word	0x20000000
 8005e4c:	10624dd3 	.word	0x10624dd3
 8005e50:	e000e014 	.word	0xe000e014

08005e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e64 <vPortEnableVFP+0x10>
 8005e58:	6801      	ldr	r1, [r0, #0]
 8005e5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e5e:	6001      	str	r1, [r0, #0]
 8005e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e62:	bf00      	nop
 8005e64:	e000ed88 	.word	0xe000ed88

08005e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e6e:	f3ef 8305 	mrs	r3, IPSR
 8005e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b0f      	cmp	r3, #15
 8005e78:	d914      	bls.n	8005ea4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e7a:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <vPortValidateInterruptPriority+0x70>)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e84:	4b15      	ldr	r3, [pc, #84]	; (8005edc <vPortValidateInterruptPriority+0x74>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	7afa      	ldrb	r2, [r7, #11]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d20a      	bcs.n	8005ea4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	607b      	str	r3, [r7, #4]
}
 8005ea0:	bf00      	nop
 8005ea2:	e7fe      	b.n	8005ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ea4:	4b0e      	ldr	r3, [pc, #56]	; (8005ee0 <vPortValidateInterruptPriority+0x78>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005eac:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <vPortValidateInterruptPriority+0x7c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d90a      	bls.n	8005eca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	603b      	str	r3, [r7, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <vPortValidateInterruptPriority+0x60>
	}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	e000e3f0 	.word	0xe000e3f0
 8005edc:	20000dac 	.word	0x20000dac
 8005ee0:	e000ed0c 	.word	0xe000ed0c
 8005ee4:	20000db0 	.word	0x20000db0

08005ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	; 0x28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ef4:	f7fe fd9a 	bl	8004a2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ef8:	4b5b      	ldr	r3, [pc, #364]	; (8006068 <pvPortMalloc+0x180>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f00:	f000 f920 	bl	8006144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f04:	4b59      	ldr	r3, [pc, #356]	; (800606c <pvPortMalloc+0x184>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 8093 	bne.w	8006038 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01d      	beq.n	8005f54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005f18:	2208      	movs	r2, #8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d014      	beq.n	8005f54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f023 0307 	bic.w	r3, r3, #7
 8005f30:	3308      	adds	r3, #8
 8005f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <pvPortMalloc+0x6c>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	617b      	str	r3, [r7, #20]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d06e      	beq.n	8006038 <pvPortMalloc+0x150>
 8005f5a:	4b45      	ldr	r3, [pc, #276]	; (8006070 <pvPortMalloc+0x188>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d869      	bhi.n	8006038 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f64:	4b43      	ldr	r3, [pc, #268]	; (8006074 <pvPortMalloc+0x18c>)
 8005f66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f68:	4b42      	ldr	r3, [pc, #264]	; (8006074 <pvPortMalloc+0x18c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f6e:	e004      	b.n	8005f7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d903      	bls.n	8005f8c <pvPortMalloc+0xa4>
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f1      	bne.n	8005f70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f8c:	4b36      	ldr	r3, [pc, #216]	; (8006068 <pvPortMalloc+0x180>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d050      	beq.n	8006038 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2208      	movs	r2, #8
 8005f9c:	4413      	add	r3, r2
 8005f9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d91f      	bls.n	8005ff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <pvPortMalloc+0xf8>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	613b      	str	r3, [r7, #16]
}
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	1ad2      	subs	r2, r2, r3
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ff2:	69b8      	ldr	r0, [r7, #24]
 8005ff4:	f000 f908 	bl	8006208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ff8:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <pvPortMalloc+0x188>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	4a1b      	ldr	r2, [pc, #108]	; (8006070 <pvPortMalloc+0x188>)
 8006004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006006:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <pvPortMalloc+0x188>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4b1b      	ldr	r3, [pc, #108]	; (8006078 <pvPortMalloc+0x190>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d203      	bcs.n	800601a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006012:	4b17      	ldr	r3, [pc, #92]	; (8006070 <pvPortMalloc+0x188>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a18      	ldr	r2, [pc, #96]	; (8006078 <pvPortMalloc+0x190>)
 8006018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	4b13      	ldr	r3, [pc, #76]	; (800606c <pvPortMalloc+0x184>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	431a      	orrs	r2, r3
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800602e:	4b13      	ldr	r3, [pc, #76]	; (800607c <pvPortMalloc+0x194>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	4a11      	ldr	r2, [pc, #68]	; (800607c <pvPortMalloc+0x194>)
 8006036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006038:	f7fe fd06 	bl	8004a48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <pvPortMalloc+0x174>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	60fb      	str	r3, [r7, #12]
}
 8006058:	bf00      	nop
 800605a:	e7fe      	b.n	800605a <pvPortMalloc+0x172>
	return pvReturn;
 800605c:	69fb      	ldr	r3, [r7, #28]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3728      	adds	r7, #40	; 0x28
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20001974 	.word	0x20001974
 800606c:	20001988 	.word	0x20001988
 8006070:	20001978 	.word	0x20001978
 8006074:	2000196c 	.word	0x2000196c
 8006078:	2000197c 	.word	0x2000197c
 800607c:	20001980 	.word	0x20001980

08006080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d04d      	beq.n	800612e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006092:	2308      	movs	r3, #8
 8006094:	425b      	negs	r3, r3
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4413      	add	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	4b24      	ldr	r3, [pc, #144]	; (8006138 <vPortFree+0xb8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <vPortFree+0x44>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	60fb      	str	r3, [r7, #12]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <vPortFree+0x62>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	60bb      	str	r3, [r7, #8]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	4b14      	ldr	r3, [pc, #80]	; (8006138 <vPortFree+0xb8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4013      	ands	r3, r2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01e      	beq.n	800612e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11a      	bne.n	800612e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <vPortFree+0xb8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	43db      	mvns	r3, r3
 8006102:	401a      	ands	r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006108:	f7fe fc90 	bl	8004a2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	4b0a      	ldr	r3, [pc, #40]	; (800613c <vPortFree+0xbc>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4413      	add	r3, r2
 8006116:	4a09      	ldr	r2, [pc, #36]	; (800613c <vPortFree+0xbc>)
 8006118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800611a:	6938      	ldr	r0, [r7, #16]
 800611c:	f000 f874 	bl	8006208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006120:	4b07      	ldr	r3, [pc, #28]	; (8006140 <vPortFree+0xc0>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3301      	adds	r3, #1
 8006126:	4a06      	ldr	r2, [pc, #24]	; (8006140 <vPortFree+0xc0>)
 8006128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800612a:	f7fe fc8d 	bl	8004a48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800612e:	bf00      	nop
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20001988 	.word	0x20001988
 800613c:	20001978 	.word	0x20001978
 8006140:	20001984 	.word	0x20001984

08006144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800614a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800614e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006150:	4b27      	ldr	r3, [pc, #156]	; (80061f0 <prvHeapInit+0xac>)
 8006152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00c      	beq.n	8006178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3307      	adds	r3, #7
 8006162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0307 	bic.w	r3, r3, #7
 800616a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	4a1f      	ldr	r2, [pc, #124]	; (80061f0 <prvHeapInit+0xac>)
 8006174:	4413      	add	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800617c:	4a1d      	ldr	r2, [pc, #116]	; (80061f4 <prvHeapInit+0xb0>)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006182:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <prvHeapInit+0xb0>)
 8006184:	2200      	movs	r2, #0
 8006186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	4413      	add	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006190:	2208      	movs	r2, #8
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0307 	bic.w	r3, r3, #7
 800619e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <prvHeapInit+0xb4>)
 80061a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061a6:	4b14      	ldr	r3, [pc, #80]	; (80061f8 <prvHeapInit+0xb4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2200      	movs	r2, #0
 80061ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061ae:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <prvHeapInit+0xb4>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <prvHeapInit+0xb4>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	4a0a      	ldr	r2, [pc, #40]	; (80061fc <prvHeapInit+0xb8>)
 80061d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4a09      	ldr	r2, [pc, #36]	; (8006200 <prvHeapInit+0xbc>)
 80061da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061dc:	4b09      	ldr	r3, [pc, #36]	; (8006204 <prvHeapInit+0xc0>)
 80061de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061e2:	601a      	str	r2, [r3, #0]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	20000db4 	.word	0x20000db4
 80061f4:	2000196c 	.word	0x2000196c
 80061f8:	20001974 	.word	0x20001974
 80061fc:	2000197c 	.word	0x2000197c
 8006200:	20001978 	.word	0x20001978
 8006204:	20001988 	.word	0x20001988

08006208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006210:	4b28      	ldr	r3, [pc, #160]	; (80062b4 <prvInsertBlockIntoFreeList+0xac>)
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e002      	b.n	800621c <prvInsertBlockIntoFreeList+0x14>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	429a      	cmp	r2, r3
 8006224:	d8f7      	bhi.n	8006216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	4413      	add	r3, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	429a      	cmp	r2, r3
 8006236:	d108      	bne.n	800624a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	441a      	add	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	441a      	add	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d118      	bne.n	8006290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d00d      	beq.n	8006286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	441a      	add	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	e008      	b.n	8006298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006286:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e003      	b.n	8006298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	429a      	cmp	r2, r3
 800629e:	d002      	beq.n	80062a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	2000196c 	.word	0x2000196c
 80062b8:	20001974 	.word	0x20001974

080062bc <__libc_init_array>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	4d0d      	ldr	r5, [pc, #52]	; (80062f4 <__libc_init_array+0x38>)
 80062c0:	4c0d      	ldr	r4, [pc, #52]	; (80062f8 <__libc_init_array+0x3c>)
 80062c2:	1b64      	subs	r4, r4, r5
 80062c4:	10a4      	asrs	r4, r4, #2
 80062c6:	2600      	movs	r6, #0
 80062c8:	42a6      	cmp	r6, r4
 80062ca:	d109      	bne.n	80062e0 <__libc_init_array+0x24>
 80062cc:	4d0b      	ldr	r5, [pc, #44]	; (80062fc <__libc_init_array+0x40>)
 80062ce:	4c0c      	ldr	r4, [pc, #48]	; (8006300 <__libc_init_array+0x44>)
 80062d0:	f000 f82e 	bl	8006330 <_init>
 80062d4:	1b64      	subs	r4, r4, r5
 80062d6:	10a4      	asrs	r4, r4, #2
 80062d8:	2600      	movs	r6, #0
 80062da:	42a6      	cmp	r6, r4
 80062dc:	d105      	bne.n	80062ea <__libc_init_array+0x2e>
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e4:	4798      	blx	r3
 80062e6:	3601      	adds	r6, #1
 80062e8:	e7ee      	b.n	80062c8 <__libc_init_array+0xc>
 80062ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ee:	4798      	blx	r3
 80062f0:	3601      	adds	r6, #1
 80062f2:	e7f2      	b.n	80062da <__libc_init_array+0x1e>
 80062f4:	080063f0 	.word	0x080063f0
 80062f8:	080063f0 	.word	0x080063f0
 80062fc:	080063f0 	.word	0x080063f0
 8006300:	080063f8 	.word	0x080063f8

08006304 <memcpy>:
 8006304:	440a      	add	r2, r1
 8006306:	4291      	cmp	r1, r2
 8006308:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800630c:	d100      	bne.n	8006310 <memcpy+0xc>
 800630e:	4770      	bx	lr
 8006310:	b510      	push	{r4, lr}
 8006312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800631a:	4291      	cmp	r1, r2
 800631c:	d1f9      	bne.n	8006312 <memcpy+0xe>
 800631e:	bd10      	pop	{r4, pc}

08006320 <memset>:
 8006320:	4402      	add	r2, r0
 8006322:	4603      	mov	r3, r0
 8006324:	4293      	cmp	r3, r2
 8006326:	d100      	bne.n	800632a <memset+0xa>
 8006328:	4770      	bx	lr
 800632a:	f803 1b01 	strb.w	r1, [r3], #1
 800632e:	e7f9      	b.n	8006324 <memset+0x4>

08006330 <_init>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	bf00      	nop
 8006334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006336:	bc08      	pop	{r3}
 8006338:	469e      	mov	lr, r3
 800633a:	4770      	bx	lr

0800633c <_fini>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	bf00      	nop
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr
