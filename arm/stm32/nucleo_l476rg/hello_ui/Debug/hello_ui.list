
hello_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080070dc  080070dc  000170dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072fc  080072fc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080072fc  080072fc  000172fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007304  08007304  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007304  08007304  00017304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad4  2000007c  08007390  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b50  08007390  00021b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff47  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de4  00000000  00000000  0003fff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  00043dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d8  00000000  00000000  00045708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006a04  00000000  00000000  00046ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186b7  00000000  00000000  0004d8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100c14  00000000  00000000  00065f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166baf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f9c  00000000  00000000  00166c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070c4 	.word	0x080070c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080070c4 	.word	0x080070c4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f001 f876 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8d0 	bl	8000678 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004d8:	f000 f89a 	bl	8000610 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f003 feaa 	bl	8004234 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <main+0x30>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x34>)
 80004e6:	f003 feef 	bl	80042c8 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <main+0x38>)
 80004ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f0:	f003 fec4 	bl	800427c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x2c>
 80004f6:	bf00      	nop
 80004f8:	080071c8 	.word	0x080071c8
 80004fc:	0800077d 	.word	0x0800077d
 8000500:	2000011c 	.word	0x2000011c

08000504 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b0b8      	sub	sp, #224	; 0xe0
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f006 fc5e 	bl	8006dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2288      	movs	r2, #136	; 0x88
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f006 fc50 	bl	8006dd4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	2303      	movs	r3, #3
 800054a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000554:	230a      	movs	r3, #10
 8000556:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800055a:	2307      	movs	r3, #7
 800055c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000570:	4618      	mov	r0, r3
 8000572:	f001 fb9d 	bl	8001cb0 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000586:	f000 f919 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2303      	movs	r3, #3
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005ac:	2104      	movs	r1, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 ff64 	bl	800247c <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80005c4:	f000 f8fa 	bl	80007bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 f988 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf14      	ite	ne
 80005de:	2301      	movne	r3, #1
 80005e0:	2300      	moveq	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 80005e8:	f000 f8e8 	bl	80007bc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f0:	f001 fb08 	bl	8001c04 <HAL_PWREx_ControlVoltageScaling>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000604:	f000 f8da 	bl	80007bc <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	37e0      	adds	r7, #224	; 0xe0
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000654:	f003 f8d6 	bl	8003804 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf14      	ite	ne
 800065e:	2301      	movne	r3, #1
 8000660:	2300      	moveq	r3, #0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000668:	f000 f8a8 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000098 	.word	0x20000098
 8000674:	40004400 	.word	0x40004400

08000678 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b2f      	ldr	r3, [pc, #188]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a2e      	ldr	r2, [pc, #184]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a28      	ldr	r2, [pc, #160]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a22      	ldr	r2, [pc, #136]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <_ZL12MX_GPIO_Initv+0xd4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	4816      	ldr	r0, [pc, #88]	; (8000750 <_ZL12MX_GPIO_Initv+0xd8>)
 80006f6:	f001 fa2d 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <_ZL12MX_GPIO_Initv+0xdc>)
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000704:	2301      	movs	r3, #1
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4812      	ldr	r0, [pc, #72]	; (8000758 <_ZL12MX_GPIO_Initv+0xe0>)
 8000710:	f001 f876 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <_ZL12MX_GPIO_Initv+0xd8>)
 800072e:	f001 f867 	bl	8001800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2105      	movs	r1, #5
 8000736:	2028      	movs	r0, #40	; 0x28
 8000738:	f001 f838 	bl	80017ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800073c:	2028      	movs	r0, #40	; 0x28
 800073e:	f001 f851 	bl	80017e4 <HAL_NVIC_EnableIRQ>

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	48000800 	.word	0x48000800
 8000754:	10210000 	.word	0x10210000
 8000758:	48000400 	.word	0x48000400

0800075c <HAL_GPIO_EXTI_Callback>:
#define LEFT_BUTTON 	GPIO_PIN_13
#define RIGHT_BUTTON 	GPIO_PIN_12


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
	xUI.vEXTI(GPIO_Pin);
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	4619      	mov	r1, r3
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <HAL_GPIO_EXTI_Callback+0x1c>)
 800076c:	f000 fe9c 	bl	80014a8 <_ZN2UI5vEXTIEt>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000120 	.word	0x20000120

0800077c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	//HAL_UART_Transmit(&huart2, (uint8_t *)("hello\r\n"), sizeof("hello\r\n"), 100);
  	xUI.vUpdate();
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <_Z16StartDefaultTaskPv+0x18>)
 8000786:	f000 fe11 	bl	80013ac <_ZN2UI7vUpdateEv>
    osDelay(250);
 800078a:	20fa      	movs	r0, #250	; 0xfa
 800078c:	f003 fe2e 	bl	80043ec <osDelay>
  	xUI.vUpdate();
 8000790:	e7f8      	b.n	8000784 <_Z16StartDefaultTaskPv+0x8>
 8000792:	bf00      	nop
 8000794:	20000120 	.word	0x20000120

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007aa:	f000 ff27 	bl	80015fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40001000 	.word	0x40001000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d108      	bne.n	80007ea <_Z41__static_initialization_and_destruction_0ii+0x22>
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007de:	4293      	cmp	r3, r2
 80007e0:	d103      	bne.n	80007ea <_Z41__static_initialization_and_destruction_0ii+0x22>
UI xUI(&huart2);
 80007e2:	4909      	ldr	r1, [pc, #36]	; (8000808 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007e6:	f000 fd79 	bl	80012dc <_ZN2UIC1EP20__UART_HandleTypeDef>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d107      	bne.n	8000800 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d102      	bne.n	8000800 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80007fc:	f000 fd8f 	bl	800131e <_ZN2UID1Ev>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000098 	.word	0x20000098
 800080c:	20000120 	.word	0x20000120

08000810 <_GLOBAL__sub_I_huart2>:
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
 8000814:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff ffd5 	bl	80007c8 <_Z41__static_initialization_and_destruction_0ii>
 800081e:	bd80      	pop	{r7, pc}

08000820 <_GLOBAL__sub_D_huart2>:
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
 8000824:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff ffcd 	bl	80007c8 <_Z41__static_initialization_and_destruction_0ii>
 800082e:	bd80      	pop	{r7, pc}

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <HAL_MspInit+0x4c>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <HAL_MspInit+0x4c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6613      	str	r3, [r2, #96]	; 0x60
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <HAL_MspInit+0x4c>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_MspInit+0x4c>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6593      	str	r3, [r2, #88]	; 0x58
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_MspInit+0x4c>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f000 ff9d 	bl	80017ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a17      	ldr	r2, [pc, #92]	; (80008fc <HAL_UART_MspInit+0x7c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d128      	bne.n	80008f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6593      	str	r3, [r2, #88]	; 0x58
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_UART_MspInit+0x80>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d2:	230c      	movs	r3, #12
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e2:	2307      	movs	r3, #7
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f000 ff86 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40004400 	.word	0x40004400
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	2036      	movs	r0, #54	; 0x36
 800091a:	f000 ff47 	bl	80017ac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800091e:	2036      	movs	r0, #54	; 0x36
 8000920:	f000 ff60 	bl	80017e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <HAL_InitTick+0x9c>)
 8000926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000928:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <HAL_InitTick+0x9c>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6593      	str	r3, [r2, #88]	; 0x58
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_InitTick+0x9c>)
 8000932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800093c:	f107 0210 	add.w	r2, r7, #16
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f001 ff3c 	bl	80027c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800094c:	f001 ff0e 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8000950:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000954:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <HAL_InitTick+0xa0>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	0c9b      	lsrs	r3, r3, #18
 800095c:	3b01      	subs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_InitTick+0xa4>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <HAL_InitTick+0xa8>)
 8000964:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_InitTick+0xa4>)
 8000968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800096c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_InitTick+0xa4>)
 8000970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000972:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_InitTick+0xa4>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_InitTick+0xa4>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <HAL_InitTick+0xa4>)
 8000982:	f002 fc6d 	bl	8003260 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d104      	bne.n	8000996 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <HAL_InitTick+0xa4>)
 800098e:	f002 fcc9 	bl	8003324 <HAL_TIM_Base_Start_IT>
 8000992:	4603      	mov	r3, r0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3730      	adds	r7, #48	; 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	20001ab0 	.word	0x20001ab0
 80009ac:	40001000 	.word	0x40001000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80009e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009e4:	f001 f8e8 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009ec:	f001 f8e4 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80009f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009f4:	f001 f8e0 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80009f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009fc:	f001 f8dc 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIM6_DAC_IRQHandler+0x10>)
 8000a0a:	f002 fcfb 	bl	8003404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20001ab0 	.word	0x20001ab0

08000a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	return 1;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_kill>:

int _kill(int pid, int sig)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a32:	f006 f987 	bl	8006d44 <__errno>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2216      	movs	r2, #22
 8000a3a:	601a      	str	r2, [r3, #0]
	return -1;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_exit>:

void _exit (int status)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ffe7 	bl	8000a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a5a:	e7fe      	b.n	8000a5a <_exit+0x12>

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f006 f95a 	bl	8006d44 <__errno>
 8000a90:	4603      	mov	r3, r0
 8000a92:	220c      	movs	r2, #12
 8000a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20018000 	.word	0x20018000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	2000012c 	.word	0x2000012c
 8000ac4:	20001b50 	.word	0x20001b50

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <SystemInit+0x5c>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <SystemInit+0x5c>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <SystemInit+0x60>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <SystemInit+0x60>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <SystemInit+0x60>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <SystemInit+0x60>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <SystemInit+0x60>)
 8000af4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000af8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000afc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <SystemInit+0x60>)
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <SystemInit+0x60>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <SystemInit+0x60>)
 8000b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SystemInit+0x60>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00
 8000b28:	40021000 	.word	0x40021000

08000b2c <_ZN2UI17DEBUG_PRINT_STATEEv>:

	~UI();



	void DEBUG_PRINT_STATE(void)
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	{

		if (this->_pxCurrentState == &MainMenuState::getInstance())
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681c      	ldr	r4, [r3, #0]
 8000b38:	f000 f96c 	bl	8000e14 <_ZN13MainMenuState11getInstanceEv>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	429c      	cmp	r4, r3
 8000b40:	bf0c      	ite	eq
 8000b42:	2301      	moveq	r3, #1
 8000b44:	2300      	movne	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d007      	beq.n	8000b5c <_ZN2UI17DEBUG_PRINT_STATEEv+0x30>
		{
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("MAIN_MENU\r\n"), sizeof("MAIN_MENU\r\n"), 100);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6858      	ldr	r0, [r3, #4]
 8000b50:	2364      	movs	r3, #100	; 0x64
 8000b52:	220c      	movs	r2, #12
 8000b54:	4921      	ldr	r1, [pc, #132]	; (8000bdc <_ZN2UI17DEBUG_PRINT_STATEEv+0xb0>)
 8000b56:	f002 fea3 	bl	80038a0 <HAL_UART_Transmit>
		else
		{

		}

	}
 8000b5a:	e03a      	b.n	8000bd2 <_ZN2UI17DEBUG_PRINT_STATEEv+0xa6>
		else if (this->_pxCurrentState == &MusicState::getInstance())
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681c      	ldr	r4, [r3, #0]
 8000b60:	f000 fa1c 	bl	8000f9c <_ZN10MusicState11getInstanceEv>
 8000b64:	4603      	mov	r3, r0
 8000b66:	429c      	cmp	r4, r3
 8000b68:	bf0c      	ite	eq
 8000b6a:	2301      	moveq	r3, #1
 8000b6c:	2300      	movne	r3, #0
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d007      	beq.n	8000b84 <_ZN2UI17DEBUG_PRINT_STATEEv+0x58>
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("MUSIC\r\n"), sizeof("MUSIC\r\n"), 100);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6858      	ldr	r0, [r3, #4]
 8000b78:	2364      	movs	r3, #100	; 0x64
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	4918      	ldr	r1, [pc, #96]	; (8000be0 <_ZN2UI17DEBUG_PRINT_STATEEv+0xb4>)
 8000b7e:	f002 fe8f 	bl	80038a0 <HAL_UART_Transmit>
	}
 8000b82:	e026      	b.n	8000bd2 <_ZN2UI17DEBUG_PRINT_STATEEv+0xa6>
		else if (this->_pxCurrentState == &ProfileState::getInstance())
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681c      	ldr	r4, [r3, #0]
 8000b88:	f000 faba 	bl	8001100 <_ZN12ProfileState11getInstanceEv>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	429c      	cmp	r4, r3
 8000b90:	bf0c      	ite	eq
 8000b92:	2301      	moveq	r3, #1
 8000b94:	2300      	movne	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d007      	beq.n	8000bac <_ZN2UI17DEBUG_PRINT_STATEEv+0x80>
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("PROFILE\r\n"), sizeof("PROFILE\r\n"), 100);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6858      	ldr	r0, [r3, #4]
 8000ba0:	2364      	movs	r3, #100	; 0x64
 8000ba2:	220a      	movs	r2, #10
 8000ba4:	490f      	ldr	r1, [pc, #60]	; (8000be4 <_ZN2UI17DEBUG_PRINT_STATEEv+0xb8>)
 8000ba6:	f002 fe7b 	bl	80038a0 <HAL_UART_Transmit>
	}
 8000baa:	e012      	b.n	8000bd2 <_ZN2UI17DEBUG_PRINT_STATEEv+0xa6>
		else if (this->_pxCurrentState == &SettingsState::getInstance())
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681c      	ldr	r4, [r3, #0]
 8000bb0:	f000 fb58 	bl	8001264 <_ZN13SettingsState11getInstanceEv>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	429c      	cmp	r4, r3
 8000bb8:	bf0c      	ite	eq
 8000bba:	2301      	moveq	r3, #1
 8000bbc:	2300      	movne	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <_ZN2UI17DEBUG_PRINT_STATEEv+0xa6>
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("SETTINGS\r\n"), sizeof("SETTINGS\r\n"), 100);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6858      	ldr	r0, [r3, #4]
 8000bc8:	2364      	movs	r3, #100	; 0x64
 8000bca:	220b      	movs	r2, #11
 8000bcc:	4906      	ldr	r1, [pc, #24]	; (8000be8 <_ZN2UI17DEBUG_PRINT_STATEEv+0xbc>)
 8000bce:	f002 fe67 	bl	80038a0 <HAL_UART_Transmit>
	}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd90      	pop	{r4, r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	080070e8 	.word	0x080070e8
 8000be0:	080070f4 	.word	0x080070f4
 8000be4:	080070fc 	.word	0x080070fc
 8000be8:	08007108 	.word	0x08007108

08000bec <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv>:



	} xMainMenu;

	void DEBUG_PRINT_STATE_OPTION(void)
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	{
		switch (this->xMainMenu.eStateOption)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d016      	beq.n	8000c2a <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x3e>
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	dc1c      	bgt.n	8000c3a <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x4e>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x1e>
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d008      	beq.n	8000c1a <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x2e>
 8000c08:	e017      	b.n	8000c3a <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x4e>
		{
		case StateOption::MUSIC:
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("-> music\r\n"), sizeof("-> music\r\n"), 100);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6858      	ldr	r0, [r3, #4]
 8000c0e:	2364      	movs	r3, #100	; 0x64
 8000c10:	220b      	movs	r2, #11
 8000c12:	4910      	ldr	r1, [pc, #64]	; (8000c54 <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x68>)
 8000c14:	f002 fe44 	bl	80038a0 <HAL_UART_Transmit>
			break;
 8000c18:	e017      	b.n	8000c4a <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x5e>
		case StateOption::PROFILE:
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("-> profile\r\n"), sizeof("-> profile\r\n"), 100);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6858      	ldr	r0, [r3, #4]
 8000c1e:	2364      	movs	r3, #100	; 0x64
 8000c20:	220d      	movs	r2, #13
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x6c>)
 8000c24:	f002 fe3c 	bl	80038a0 <HAL_UART_Transmit>
			break;
 8000c28:	e00f      	b.n	8000c4a <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x5e>
		case StateOption::SETTINGS:
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("-> settings\r\n"), sizeof("-> settings\r\n"), 100);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6858      	ldr	r0, [r3, #4]
 8000c2e:	2364      	movs	r3, #100	; 0x64
 8000c30:	220e      	movs	r2, #14
 8000c32:	490a      	ldr	r1, [pc, #40]	; (8000c5c <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x70>)
 8000c34:	f002 fe34 	bl	80038a0 <HAL_UART_Transmit>
			break;
 8000c38:	e007      	b.n	8000c4a <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x5e>
		default:
		  HAL_UART_Transmit(this->_pxUART, (uint8_t *)("idk\r\n"), sizeof("idk\r\n"), 100);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6858      	ldr	r0, [r3, #4]
 8000c3e:	2364      	movs	r3, #100	; 0x64
 8000c40:	2206      	movs	r2, #6
 8000c42:	4907      	ldr	r1, [pc, #28]	; (8000c60 <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv+0x74>)
 8000c44:	f002 fe2c 	bl	80038a0 <HAL_UART_Transmit>
			break;
 8000c48:	bf00      	nop
		}
	}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	08007114 	.word	0x08007114
 8000c58:	08007120 	.word	0x08007120
 8000c5c:	08007130 	.word	0x08007130
 8000c60:	08007140 	.word	0x08007140

08000c64 <_ZN7UIStateC1Ev>:
#include "ui.h"



// UIState
UIState::UIState() {}
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <_ZN7UIStateC1Ev+0x1c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	080072dc 	.word	0x080072dc

08000c84 <_ZN7UIStateD1Ev>:
UIState::~UIState() {}
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <_ZN7UIStateD1Ev+0x1c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	080072dc 	.word	0x080072dc

08000ca4 <_ZN13MainMenuStateC1Ev>:




// MainMenuState
MainMenuState::MainMenuState() {}
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ffd8 	bl	8000c64 <_ZN7UIStateC1Ev>
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <_ZN13MainMenuStateC1Ev+0x20>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	080072b4 	.word	0x080072b4

08000cc8 <_ZN13MainMenuStateD1Ev>:
MainMenuState::~MainMenuState() {}
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_ZN13MainMenuStateD1Ev+0x20>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ffd3 	bl	8000c84 <_ZN7UIStateD1Ev>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	080072b4 	.word	0x080072b4

08000cec <_ZN13MainMenuStateD0Ev>:
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ffe7 	bl	8000cc8 <_ZN13MainMenuStateD1Ev>
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f005 ffed 	bl	8006cdc <_ZdlPvj>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_ZNK13MainMenuState6vEnterEP2UI>:

void MainMenuState::vEnter(UI* pxUI) const
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("enter: main menu\r\n"), sizeof("enter: main menu\r\n"), 100);
 8000d16:	6838      	ldr	r0, [r7, #0]
 8000d18:	f000 fc1a 	bl	8001550 <_ZN2UI9pxGetUARTEv>
 8000d1c:	2364      	movs	r3, #100	; 0x64
 8000d1e:	2213      	movs	r2, #19
 8000d20:	4903      	ldr	r1, [pc, #12]	; (8000d30 <_ZNK13MainMenuState6vEnterEP2UI+0x24>)
 8000d22:	f002 fdbd 	bl	80038a0 <HAL_UART_Transmit>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	08007148 	.word	0x08007148

08000d34 <_ZNK13MainMenuState5vExitEP2UI>:


void MainMenuState::vExit(UI* pxUI) const
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("exit: main menu\r\n"), sizeof("exit: main menu\r\n"), 100);
 8000d3e:	6838      	ldr	r0, [r7, #0]
 8000d40:	f000 fc06 	bl	8001550 <_ZN2UI9pxGetUARTEv>
 8000d44:	2364      	movs	r3, #100	; 0x64
 8000d46:	2212      	movs	r2, #18
 8000d48:	4903      	ldr	r1, [pc, #12]	; (8000d58 <_ZNK13MainMenuState5vExitEP2UI+0x24>)
 8000d4a:	f002 fda9 	bl	80038a0 <HAL_UART_Transmit>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	0800715c 	.word	0x0800715c

08000d5c <_ZNK13MainMenuState8vEventUpEP2UI>:


void MainMenuState::vEventUp(UI* pxUI) const
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	pxUI->xMainMenu.vMoveUpStateOption();
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	3308      	adds	r3, #8
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 faea 	bl	8001344 <_ZN2UI8MainMenu18vMoveUpStateOptionEv>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_ZNK13MainMenuState10vEventDownEP2UI>:


void MainMenuState::vEventDown(UI* pxUI) const
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	pxUI->xMainMenu.vMoveDownStateOption();
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	3308      	adds	r3, #8
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 faf6 	bl	8001378 <_ZN2UI8MainMenu20vMoveDownStateOptionEv>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <_ZNK13MainMenuState10vEventLeftEP2UI>:


void MainMenuState::vEventLeft(UI* pxUI) const
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	// NOP
	//pxUI->vTransitionState(MainMenuState::getInstance());
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_ZNK13MainMenuState11vEventRightEP2UI>:


void MainMenuState::vEventRight(UI* pxUI) const
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
	switch (pxUI->xMainMenu.eStateOption)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d016      	beq.n	8000dea <_ZNK13MainMenuState11vEventRightEP2UI+0x40>
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	dc1c      	bgt.n	8000dfa <_ZNK13MainMenuState11vEventRightEP2UI+0x50>
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <_ZNK13MainMenuState11vEventRightEP2UI+0x20>
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d008      	beq.n	8000dda <_ZNK13MainMenuState11vEventRightEP2UI+0x30>
	break;
	case StateOption::SETTINGS:
		pxUI->vTransitionState(SettingsState::getInstance());
	break;
	default:
	break;
 8000dc8:	e017      	b.n	8000dfa <_ZNK13MainMenuState11vEventRightEP2UI+0x50>
		pxUI->vTransitionState(MusicState::getInstance());
 8000dca:	f000 f8e7 	bl	8000f9c <_ZN10MusicState11getInstanceEv>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	6838      	ldr	r0, [r7, #0]
 8000dd4:	f000 fb00 	bl	80013d8 <_ZN2UI16vTransitionStateERK7UIState>
	break;
 8000dd8:	e010      	b.n	8000dfc <_ZNK13MainMenuState11vEventRightEP2UI+0x52>
		pxUI->vTransitionState(ProfileState::getInstance());
 8000dda:	f000 f991 	bl	8001100 <_ZN12ProfileState11getInstanceEv>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4619      	mov	r1, r3
 8000de2:	6838      	ldr	r0, [r7, #0]
 8000de4:	f000 faf8 	bl	80013d8 <_ZN2UI16vTransitionStateERK7UIState>
	break;
 8000de8:	e008      	b.n	8000dfc <_ZNK13MainMenuState11vEventRightEP2UI+0x52>
		pxUI->vTransitionState(SettingsState::getInstance());
 8000dea:	f000 fa3b 	bl	8001264 <_ZN13SettingsState11getInstanceEv>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4619      	mov	r1, r3
 8000df2:	6838      	ldr	r0, [r7, #0]
 8000df4:	f000 faf0 	bl	80013d8 <_ZN2UI16vTransitionStateERK7UIState>
	break;
 8000df8:	e000      	b.n	8000dfc <_ZNK13MainMenuState11vEventRightEP2UI+0x52>
	break;
 8000dfa:	bf00      	nop
	}
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <__tcf_0>:


const UIState& MainMenuState::getInstance(void)
{
	static const MainMenuState xSingleton;
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4801      	ldr	r0, [pc, #4]	; (8000e10 <__tcf_0+0xc>)
 8000e0a:	f7ff ff5d 	bl	8000cc8 <_ZN13MainMenuStateD1Ev>
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000130 	.word	0x20000130

08000e14 <_ZN13MainMenuState11getInstanceEv>:
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	static const MainMenuState xSingleton;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <_ZN13MainMenuState11getInstanceEv+0x50>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	f3bf 8f5b 	dmb	ish
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf0c      	ite	eq
 8000e2a:	2301      	moveq	r3, #1
 8000e2c:	2300      	movne	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d013      	beq.n	8000e5c <_ZN13MainMenuState11getInstanceEv+0x48>
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <_ZN13MainMenuState11getInstanceEv+0x50>)
 8000e36:	f005 ff53 	bl	8006ce0 <__cxa_guard_acquire>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bf14      	ite	ne
 8000e40:	2301      	movne	r3, #1
 8000e42:	2300      	moveq	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d008      	beq.n	8000e5c <_ZN13MainMenuState11getInstanceEv+0x48>
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <_ZN13MainMenuState11getInstanceEv+0x54>)
 8000e4c:	f7ff ff2a 	bl	8000ca4 <_ZN13MainMenuStateC1Ev>
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <_ZN13MainMenuState11getInstanceEv+0x50>)
 8000e52:	f005 ff51 	bl	8006cf8 <__cxa_guard_release>
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <_ZN13MainMenuState11getInstanceEv+0x58>)
 8000e58:	f005 ff6e 	bl	8006d38 <atexit>
	return xSingleton;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <_ZN13MainMenuState11getInstanceEv+0x54>)
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000134 	.word	0x20000134
 8000e68:	20000130 	.word	0x20000130
 8000e6c:	08000e05 	.word	0x08000e05

08000e70 <_ZN10MusicStateC1Ev>:


// MusicState
MusicState::MusicState() {}
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fef2 	bl	8000c64 <_ZN7UIStateC1Ev>
 8000e80:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <_ZN10MusicStateC1Ev+0x20>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	0800728c 	.word	0x0800728c

08000e94 <_ZN10MusicStateD1Ev>:
MusicState::~MusicState() {}
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <_ZN10MusicStateD1Ev+0x20>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff feed 	bl	8000c84 <_ZN7UIStateD1Ev>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	0800728c 	.word	0x0800728c

08000eb8 <_ZN10MusicStateD0Ev>:
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ffe7 	bl	8000e94 <_ZN10MusicStateD1Ev>
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f005 ff07 	bl	8006cdc <_ZdlPvj>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_ZNK10MusicState6vEnterEP2UI>:

void MusicState::vEnter(UI* pxUI) const
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("enter: music\r\n"), sizeof("enter: music\r\n"), 100);
 8000ee2:	6838      	ldr	r0, [r7, #0]
 8000ee4:	f000 fb34 	bl	8001550 <_ZN2UI9pxGetUARTEv>
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	220f      	movs	r2, #15
 8000eec:	4903      	ldr	r1, [pc, #12]	; (8000efc <_ZNK10MusicState6vEnterEP2UI+0x24>)
 8000eee:	f002 fcd7 	bl	80038a0 <HAL_UART_Transmit>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	08007170 	.word	0x08007170

08000f00 <_ZNK10MusicState5vExitEP2UI>:


void MusicState::vExit(UI* pxUI) const
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(pxUI->pxGetUART(), (uint8_t *)("exit: music\r\n"), sizeof("exit: music\r\n"), 100);
 8000f0a:	6838      	ldr	r0, [r7, #0]
 8000f0c:	f000 fb20 	bl	8001550 <_ZN2UI9pxGetUARTEv>
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	220e      	movs	r2, #14
 8000f14:	4903      	ldr	r1, [pc, #12]	; (8000f24 <_ZNK10MusicState5vExitEP2UI+0x24>)
 8000f16:	f002 fcc3 	bl	80038a0 <HAL_UART_Transmit>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	08007180 	.word	0x08007180

08000f28 <_ZNK10MusicState8vEventUpEP2UI>:


void MusicState::vEventUp(UI* pxUI) const
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]

}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_ZNK10MusicState10vEventDownEP2UI>:


void MusicState::vEventDown(UI* pxUI) const
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]

}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZNK10MusicState10vEventLeftEP2UI>:


void MusicState::vEventLeft(UI* pxUI) const
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	pxUI->vTransitionState(MainMenuState::getInstance());
 8000f5e:	f7ff ff59 	bl	8000e14 <_ZN13MainMenuState11getInstanceEv>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4619      	mov	r1, r3
 8000f66:	6838      	ldr	r0, [r7, #0]
 8000f68:	f000 fa36 	bl	80013d8 <_ZN2UI16vTransitionStateERK7UIState>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_ZNK10MusicState11vEventRightEP2UI>:


void MusicState::vEventRight(UI* pxUI) const
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]


}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <__tcf_1>:

const UIState& MusicState::getInstance(void)
{
	static const MusicState xSingleton;
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4801      	ldr	r0, [pc, #4]	; (8000f98 <__tcf_1+0xc>)
 8000f92:	f7ff ff7f 	bl	8000e94 <_ZN10MusicStateD1Ev>
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000138 	.word	0x20000138

08000f9c <_ZN10MusicState11getInstanceEv>:
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	static const MusicState xSingleton;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <_ZN10MusicState11getInstanceEv+0x50>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f3bf 8f5b 	dmb	ish
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2301      	moveq	r3, #1
 8000fb4:	2300      	movne	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <_ZN10MusicState11getInstanceEv+0x48>
 8000fbc:	480b      	ldr	r0, [pc, #44]	; (8000fec <_ZN10MusicState11getInstanceEv+0x50>)
 8000fbe:	f005 fe8f 	bl	8006ce0 <__cxa_guard_acquire>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bf14      	ite	ne
 8000fc8:	2301      	movne	r3, #1
 8000fca:	2300      	moveq	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d008      	beq.n	8000fe4 <_ZN10MusicState11getInstanceEv+0x48>
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <_ZN10MusicState11getInstanceEv+0x54>)
 8000fd4:	f7ff ff4c 	bl	8000e70 <_ZN10MusicStateC1Ev>
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <_ZN10MusicState11getInstanceEv+0x50>)
 8000fda:	f005 fe8d 	bl	8006cf8 <__cxa_guard_release>
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <_ZN10MusicState11getInstanceEv+0x58>)
 8000fe0:	f005 feaa 	bl	8006d38 <atexit>
	return xSingleton;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <_ZN10MusicState11getInstanceEv+0x54>)
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000013c 	.word	0x2000013c
 8000ff0:	20000138 	.word	0x20000138
 8000ff4:	08000f8d 	.word	0x08000f8d

08000ff8 <_ZN12ProfileStateC1Ev>:

// ProfileState


// MainMenuState
ProfileState::ProfileState() {}
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fe2e 	bl	8000c64 <_ZN7UIStateC1Ev>
 8001008:	4a03      	ldr	r2, [pc, #12]	; (8001018 <_ZN12ProfileStateC1Ev+0x20>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	08007264 	.word	0x08007264

0800101c <_ZN12ProfileStateD1Ev>:
ProfileState::~ProfileState() {}
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <_ZN12ProfileStateD1Ev+0x20>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fe29 	bl	8000c84 <_ZN7UIStateD1Ev>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	08007264 	.word	0x08007264

08001040 <_ZN12ProfileStateD0Ev>:
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ffe7 	bl	800101c <_ZN12ProfileStateD1Ev>
 800104e:	2104      	movs	r1, #4
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f005 fe43 	bl	8006cdc <_ZdlPvj>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <_ZNK12ProfileState6vEnterEP2UI>:

void ProfileState::vEnter(UI* pxUI) const
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]

}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_ZNK12ProfileState5vExitEP2UI>:


void ProfileState::vExit(UI* pxUI) const
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]

}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_ZNK12ProfileState8vEventUpEP2UI>:


void ProfileState::vEventUp(UI* pxUI) const
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]

}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_ZNK12ProfileState10vEventDownEP2UI>:


void ProfileState::vEventDown(UI* pxUI) const
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]

}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNK12ProfileState10vEventLeftEP2UI>:


void ProfileState::vEventLeft(UI* pxUI) const
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
	pxUI->vTransitionState(MainMenuState::getInstance());
 80010c2:	f7ff fea7 	bl	8000e14 <_ZN13MainMenuState11getInstanceEv>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4619      	mov	r1, r3
 80010ca:	6838      	ldr	r0, [r7, #0]
 80010cc:	f000 f984 	bl	80013d8 <_ZN2UI16vTransitionStateERK7UIState>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZNK12ProfileState11vEventRightEP2UI>:


void ProfileState::vEventRight(UI* pxUI) const
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]


}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <__tcf_2>:


const UIState& ProfileState::getInstance(void)
{
	static const ProfileState xSingleton;
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4801      	ldr	r0, [pc, #4]	; (80010fc <__tcf_2+0xc>)
 80010f6:	f7ff ff91 	bl	800101c <_ZN12ProfileStateD1Ev>
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000140 	.word	0x20000140

08001100 <_ZN12ProfileState11getInstanceEv>:
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	static const ProfileState xSingleton;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <_ZN12ProfileState11getInstanceEv+0x50>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	f3bf 8f5b 	dmb	ish
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <_ZN12ProfileState11getInstanceEv+0x48>
 8001120:	480b      	ldr	r0, [pc, #44]	; (8001150 <_ZN12ProfileState11getInstanceEv+0x50>)
 8001122:	f005 fddd 	bl	8006ce0 <__cxa_guard_acquire>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	bf14      	ite	ne
 800112c:	2301      	movne	r3, #1
 800112e:	2300      	moveq	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <_ZN12ProfileState11getInstanceEv+0x48>
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <_ZN12ProfileState11getInstanceEv+0x54>)
 8001138:	f7ff ff5e 	bl	8000ff8 <_ZN12ProfileStateC1Ev>
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <_ZN12ProfileState11getInstanceEv+0x50>)
 800113e:	f005 fddb 	bl	8006cf8 <__cxa_guard_release>
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <_ZN12ProfileState11getInstanceEv+0x58>)
 8001144:	f005 fdf8 	bl	8006d38 <atexit>
	return xSingleton;
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <_ZN12ProfileState11getInstanceEv+0x54>)
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000144 	.word	0x20000144
 8001154:	20000140 	.word	0x20000140
 8001158:	080010f1 	.word	0x080010f1

0800115c <_ZN13SettingsStateC1Ev>:



// SettingsState
SettingsState::SettingsState() {}
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fd7c 	bl	8000c64 <_ZN7UIStateC1Ev>
 800116c:	4a03      	ldr	r2, [pc, #12]	; (800117c <_ZN13SettingsStateC1Ev+0x20>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	0800723c 	.word	0x0800723c

08001180 <_ZN13SettingsStateD1Ev>:
SettingsState::~SettingsState() {}
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <_ZN13SettingsStateD1Ev+0x20>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fd77 	bl	8000c84 <_ZN7UIStateD1Ev>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	0800723c 	.word	0x0800723c

080011a4 <_ZN13SettingsStateD0Ev>:
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffe7 	bl	8001180 <_ZN13SettingsStateD1Ev>
 80011b2:	2104      	movs	r1, #4
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f005 fd91 	bl	8006cdc <_ZdlPvj>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_ZNK13SettingsState6vEnterEP2UI>:

void SettingsState::vEnter(UI* pxUI) const
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]

}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_ZNK13SettingsState5vExitEP2UI>:


void SettingsState::vExit(UI* pxUI) const
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]

}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <_ZNK13SettingsState8vEventUpEP2UI>:


void SettingsState::vEventUp(UI* pxUI) const
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]

}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_ZNK13SettingsState10vEventDownEP2UI>:


void SettingsState::vEventDown(UI* pxUI) const
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]

}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_ZNK13SettingsState10vEventLeftEP2UI>:


void SettingsState::vEventLeft(UI* pxUI) const
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	pxUI->vTransitionState(MainMenuState::getInstance());
 8001226:	f7ff fdf5 	bl	8000e14 <_ZN13MainMenuState11getInstanceEv>
 800122a:	4603      	mov	r3, r0
 800122c:	4619      	mov	r1, r3
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f000 f8d2 	bl	80013d8 <_ZN2UI16vTransitionStateERK7UIState>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_ZNK13SettingsState11vEventRightEP2UI>:


void SettingsState::vEventRight(UI* pxUI) const
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]


}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <__tcf_3>:


const UIState& SettingsState::getInstance(void)
{
	static const SettingsState xSingleton;
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
 8001258:	4801      	ldr	r0, [pc, #4]	; (8001260 <__tcf_3+0xc>)
 800125a:	f7ff ff91 	bl	8001180 <_ZN13SettingsStateD1Ev>
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000148 	.word	0x20000148

08001264 <_ZN13SettingsState11getInstanceEv>:
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	static const SettingsState xSingleton;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <_ZN13SettingsState11getInstanceEv+0x50>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f3bf 8f5b 	dmb	ish
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	bf0c      	ite	eq
 800127a:	2301      	moveq	r3, #1
 800127c:	2300      	movne	r3, #0
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <_ZN13SettingsState11getInstanceEv+0x48>
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <_ZN13SettingsState11getInstanceEv+0x50>)
 8001286:	f005 fd2b 	bl	8006ce0 <__cxa_guard_acquire>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d008      	beq.n	80012ac <_ZN13SettingsState11getInstanceEv+0x48>
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <_ZN13SettingsState11getInstanceEv+0x54>)
 800129c:	f7ff ff5e 	bl	800115c <_ZN13SettingsStateC1Ev>
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <_ZN13SettingsState11getInstanceEv+0x50>)
 80012a2:	f005 fd29 	bl	8006cf8 <__cxa_guard_release>
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <_ZN13SettingsState11getInstanceEv+0x58>)
 80012a8:	f005 fd46 	bl	8006d38 <atexit>
	return xSingleton;
 80012ac:	4b02      	ldr	r3, [pc, #8]	; (80012b8 <_ZN13SettingsState11getInstanceEv+0x54>)
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000014c 	.word	0x2000014c
 80012b8:	20000148 	.word	0x20000148
 80012bc:	08001255 	.word	0x08001255

080012c0 <_ZN2UI8MainMenuC1Ev>:
	struct MainMenu
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_ZN2UIC1EP20__UART_HandleTypeDef>:
*/

UI::UI() : _pxCurrentState(&MainMenuState::getInstance()), _pxUART(nullptr) {}


UI::UI(UART_HandleTypeDef *pxUART) : _pxCurrentState(&MainMenuState::getInstance()),_pxUART(pxUART)
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	f7ff fd95 	bl	8000e14 <_ZN13MainMenuState11getInstanceEv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3308      	adds	r3, #8
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ffe0 	bl	80012c0 <_ZN2UI8MainMenuC1Ev>
{
	this->_pxCurrentState->vEnter(this);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3308      	adds	r3, #8
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4610      	mov	r0, r2
 8001312:	4798      	blx	r3
}
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_ZN2UID1Ev>:


UI::~UI()
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
{
	this->_pxCurrentState->vExit(this);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	330c      	adds	r3, #12
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4610      	mov	r0, r2
 8001338:	4798      	blx	r3
}
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_ZN2UI8MainMenu18vMoveUpStateOptionEv>:


// Main Menu

void UI::MainMenu::vMoveUpStateOption(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	this->eStateOption = (StateOption)(((int32_t)this->eStateOption + ((int32_t)StateOption::COUNT - 1)) % (int32_t)StateOption::COUNT);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	1c99      	adds	r1, r3, #2
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_ZN2UI8MainMenu18vMoveUpStateOptionEv+0x30>)
 8001354:	fb83 3201 	smull	r3, r2, r3, r1
 8001358:	17cb      	asrs	r3, r1, #31
 800135a:	1ad2      	subs	r2, r2, r3
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	1aca      	subs	r2, r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	55555556 	.word	0x55555556

08001378 <_ZN2UI8MainMenu20vMoveDownStateOptionEv>:


void UI::MainMenu::vMoveDownStateOption(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	this->eStateOption = (StateOption)(((int32_t)this->eStateOption + 1) % (int32_t)StateOption::COUNT);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	1c59      	adds	r1, r3, #1
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <_ZN2UI8MainMenu20vMoveDownStateOptionEv+0x30>)
 8001388:	fb83 3201 	smull	r3, r2, r3, r1
 800138c:	17cb      	asrs	r3, r1, #31
 800138e:	1ad2      	subs	r2, r2, r3
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	1aca      	subs	r2, r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	601a      	str	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	55555556 	.word	0x55555556

080013ac <_ZN2UI7vUpdateEv>:



void UI::vUpdate(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80013b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b8:	4806      	ldr	r0, [pc, #24]	; (80013d4 <_ZN2UI7vUpdateEv+0x28>)
 80013ba:	f000 fbe3 	bl	8001b84 <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
  //HAL_UART_Transmit(this->_pxUART, (uint8_t *)("update ui\r\n"), sizeof("update ui\r\n"), 100);
	DEBUG_PRINT_STATE();
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fbb4 	bl	8000b2c <_ZN2UI17DEBUG_PRINT_STATEEv>
	DEBUG_PRINT_STATE_OPTION();
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fc11 	bl	8000bec <_ZN2UI24DEBUG_PRINT_STATE_OPTIONEv>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	48000800 	.word	0x48000800

080013d8 <_ZN2UI16vTransitionStateERK7UIState>:
	return this->_pxCurrentState;
}


void UI::vTransitionState(const UIState& xNextState)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	this->_pxCurrentState->vExit(this);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	330c      	adds	r3, #12
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4610      	mov	r0, r2
 80013f4:	4798      	blx	r3
	this->_pxCurrentState = &xNextState;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	601a      	str	r2, [r3, #0]
	this->_pxCurrentState->vEnter(this);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3308      	adds	r3, #8
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4610      	mov	r0, r2
 800140e:	4798      	blx	r3
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZN2UI14vPressUpButtonEv>:


void UI::vPressUpButton(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventUp(this);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3310      	adds	r3, #16
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4610      	mov	r0, r2
 8001432:	4798      	blx	r3
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <_ZN2UI16vPressDownButtonEv>:


void UI::vPressDownButton(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventDown(this);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3314      	adds	r3, #20
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4610      	mov	r0, r2
 8001456:	4798      	blx	r3
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_ZN2UI16vPressLeftButtonEv>:


void UI::vPressLeftButton(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventLeft(this);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3318      	adds	r3, #24
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4610      	mov	r0, r2
 800147a:	4798      	blx	r3
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZN2UI17vPressRightButtonEv>:


void UI::vPressRightButton(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	this->_pxCurrentState->vEventRight(this);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	331c      	adds	r3, #28
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4610      	mov	r0, r2
 800149e:	4798      	blx	r3
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_ZN2UI5vEXTIEt>:



void UI::vEXTI(uint16_t GPIO_Pin)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
	switch (GPIO_Pin)
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014ba:	d00f      	beq.n	80014dc <_ZN2UI5vEXTIEt+0x34>
 80014bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014c0:	dc38      	bgt.n	8001534 <_ZN2UI5vEXTIEt+0x8c>
 80014c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014c6:	d014      	beq.n	80014f2 <_ZN2UI5vEXTIEt+0x4a>
 80014c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014cc:	dc32      	bgt.n	8001534 <_ZN2UI5vEXTIEt+0x8c>
 80014ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014d2:	d024      	beq.n	800151e <_ZN2UI5vEXTIEt+0x76>
 80014d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d8:	d016      	beq.n	8001508 <_ZN2UI5vEXTIEt+0x60>
	case RIGHT_BUTTON:
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("right\r\n"), sizeof("right\r\n"), 100);
		this->vPressRightButton();
		break;
	default:
		break;
 80014da:	e02b      	b.n	8001534 <_ZN2UI5vEXTIEt+0x8c>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("up\r\n"), sizeof("up\r\n"), 100);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6858      	ldr	r0, [r3, #4]
 80014e0:	2364      	movs	r3, #100	; 0x64
 80014e2:	2205      	movs	r2, #5
 80014e4:	4916      	ldr	r1, [pc, #88]	; (8001540 <_ZN2UI5vEXTIEt+0x98>)
 80014e6:	f002 f9db 	bl	80038a0 <HAL_UART_Transmit>
		this->vPressUpButton();
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff94 	bl	8001418 <_ZN2UI14vPressUpButtonEv>
		break;
 80014f0:	e021      	b.n	8001536 <_ZN2UI5vEXTIEt+0x8e>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("down\r\n"), sizeof("down\r\n"), 100);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6858      	ldr	r0, [r3, #4]
 80014f6:	2364      	movs	r3, #100	; 0x64
 80014f8:	2207      	movs	r2, #7
 80014fa:	4912      	ldr	r1, [pc, #72]	; (8001544 <_ZN2UI5vEXTIEt+0x9c>)
 80014fc:	f002 f9d0 	bl	80038a0 <HAL_UART_Transmit>
		this->vPressDownButton();
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff9b 	bl	800143c <_ZN2UI16vPressDownButtonEv>
		break;
 8001506:	e016      	b.n	8001536 <_ZN2UI5vEXTIEt+0x8e>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("left\r\n"), sizeof("left\r\n"), 100);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6858      	ldr	r0, [r3, #4]
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	2207      	movs	r2, #7
 8001510:	490d      	ldr	r1, [pc, #52]	; (8001548 <_ZN2UI5vEXTIEt+0xa0>)
 8001512:	f002 f9c5 	bl	80038a0 <HAL_UART_Transmit>
		this->vPressLeftButton();
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <_ZN2UI16vPressLeftButtonEv>
		break;
 800151c:	e00b      	b.n	8001536 <_ZN2UI5vEXTIEt+0x8e>
		HAL_UART_Transmit(this->_pxUART, (uint8_t *)("right\r\n"), sizeof("right\r\n"), 100);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6858      	ldr	r0, [r3, #4]
 8001522:	2364      	movs	r3, #100	; 0x64
 8001524:	2208      	movs	r2, #8
 8001526:	4909      	ldr	r1, [pc, #36]	; (800154c <_ZN2UI5vEXTIEt+0xa4>)
 8001528:	f002 f9ba 	bl	80038a0 <HAL_UART_Transmit>
		this->vPressRightButton();
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffa9 	bl	8001484 <_ZN2UI17vPressRightButtonEv>
		break;
 8001532:	e000      	b.n	8001536 <_ZN2UI5vEXTIEt+0x8e>
		break;
 8001534:	bf00      	nop
	}
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	08007190 	.word	0x08007190
 8001544:	08007198 	.word	0x08007198
 8001548:	080071a0 	.word	0x080071a0
 800154c:	080071a8 	.word	0x080071a8

08001550 <_ZN2UI9pxGetUARTEv>:



UART_HandleTypeDef* UI::pxGetUART(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	return this->_pxUART;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800156c:	f7ff faac 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001570:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001572:	e003      	b.n	800157c <LoopCopyDataInit>

08001574 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001576:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001578:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800157a:	3104      	adds	r1, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <LoopForever+0xe>)
	adds	r2, r0, r1
 8001580:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001582:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001584:	d3f6      	bcc.n	8001574 <CopyDataInit>
	ldr	r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001588:	e002      	b.n	8001590 <LoopFillZerobss>

0800158a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800158a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800158c:	f842 3b04 	str.w	r3, [r2], #4

08001590 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <LoopForever+0x16>)
	cmp	r2, r3
 8001592:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001594:	d3f9      	bcc.n	800158a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f005 fbdb 	bl	8006d50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159a:	f7fe ff95 	bl	80004c8 <main>

0800159e <LoopForever>:

LoopForever:
    b LoopForever
 800159e:	e7fe      	b.n	800159e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015a0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80015a4:	08007314 	.word	0x08007314
	ldr	r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015ac:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80015b0:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 80015b4:	20001b50 	.word	0x20001b50

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>
	...

080015bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_Init+0x3c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <HAL_Init+0x3c>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d2:	2003      	movs	r0, #3
 80015d4:	f000 f8df 	bl	8001796 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff f993 	bl	8000904 <HAL_InitTick>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	71fb      	strb	r3, [r7, #7]
 80015e8:	e001      	b.n	80015ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ea:	f7ff f921 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40022000 	.word	0x40022000

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008
 8001620:	20001afc 	.word	0x20001afc

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20001afc 	.word	0x20001afc

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff4c 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017be:	f7ff ff61 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	68b9      	ldr	r1, [r7, #8]
 80017c8:	6978      	ldr	r0, [r7, #20]
 80017ca:	f7ff ffb1 	bl	8001730 <NVIC_EncodePriority>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff80 	bl	80016dc <__NVIC_SetPriority>
}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff54 	bl	80016a0 <__NVIC_EnableIRQ>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180e:	e17f      	b.n	8001b10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8171 	beq.w	8001b0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d00b      	beq.n	8001848 <HAL_GPIO_Init+0x48>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183c:	2b11      	cmp	r3, #17
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b12      	cmp	r3, #18
 8001846:	d130      	bne.n	80018aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800187e:	2201      	movs	r2, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	f003 0201 	and.w	r2, r3, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d118      	bne.n	80018e8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018bc:	2201      	movs	r2, #1
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	08db      	lsrs	r3, r3, #3
 80018d2:	f003 0201 	and.w	r2, r3, #1
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x128>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b12      	cmp	r3, #18
 8001926:	d123      	bne.n	8001970 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	08da      	lsrs	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3208      	adds	r2, #8
 8001930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	08da      	lsrs	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3208      	adds	r2, #8
 800196a:	6939      	ldr	r1, [r7, #16]
 800196c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0203 	and.w	r2, r3, #3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80ac 	beq.w	8001b0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b5f      	ldr	r3, [pc, #380]	; (8001b30 <HAL_GPIO_Init+0x330>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	4a5e      	ldr	r2, [pc, #376]	; (8001b30 <HAL_GPIO_Init+0x330>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6613      	str	r3, [r2, #96]	; 0x60
 80019be:	4b5c      	ldr	r3, [pc, #368]	; (8001b30 <HAL_GPIO_Init+0x330>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ca:	4a5a      	ldr	r2, [pc, #360]	; (8001b34 <HAL_GPIO_Init+0x334>)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019f4:	d025      	beq.n	8001a42 <HAL_GPIO_Init+0x242>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4f      	ldr	r2, [pc, #316]	; (8001b38 <HAL_GPIO_Init+0x338>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01f      	beq.n	8001a3e <HAL_GPIO_Init+0x23e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4e      	ldr	r2, [pc, #312]	; (8001b3c <HAL_GPIO_Init+0x33c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d019      	beq.n	8001a3a <HAL_GPIO_Init+0x23a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4d      	ldr	r2, [pc, #308]	; (8001b40 <HAL_GPIO_Init+0x340>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0x236>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_GPIO_Init+0x344>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00d      	beq.n	8001a32 <HAL_GPIO_Init+0x232>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <HAL_GPIO_Init+0x348>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <HAL_GPIO_Init+0x22e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <HAL_GPIO_Init+0x34c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_GPIO_Init+0x22a>
 8001a26:	2306      	movs	r3, #6
 8001a28:	e00c      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	e00a      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a2e:	2305      	movs	r3, #5
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x244>
 8001a42:	2300      	movs	r3, #0
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	f002 0203 	and.w	r2, r2, #3
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a54:	4937      	ldr	r1, [pc, #220]	; (8001b34 <HAL_GPIO_Init+0x334>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a62:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a86:	4a32      	ldr	r2, [pc, #200]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a8c:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ab0:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ada:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f ae78 	bne.w	8001810 <HAL_GPIO_Init+0x10>
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010000 	.word	0x40010000
 8001b38:	48000400 	.word	0x48000400
 8001b3c:	48000800 	.word	0x48000800
 8001b40:	48000c00 	.word	0x48000c00
 8001b44:	48001000 	.word	0x48001000
 8001b48:	48001400 	.word	0x48001400
 8001b4c:	48001800 	.word	0x48001800
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b64:	787b      	ldrb	r3, [r7, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b70:	e002      	b.n	8001b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	041a      	lsls	r2, r3, #16
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43d9      	mvns	r1, r3
 8001ba2:	887b      	ldrh	r3, [r7, #2]
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fdc0 	bl	800075c <HAL_GPIO_EXTI_Callback>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40007000 	.word	0x40007000

08001c04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c12:	d130      	bne.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c20:	d038      	beq.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2232      	movs	r2, #50	; 0x32
 8001c38:	fb02 f303 	mul.w	r3, r2, r3
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0c9b      	lsrs	r3, r3, #18
 8001c44:	3301      	adds	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c48:	e002      	b.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5c:	d102      	bne.n	8001c64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f2      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c70:	d110      	bne.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e00f      	b.n	8001c96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c82:	d007      	beq.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c8c:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	431bde83 	.word	0x431bde83

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e3d4      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc2:	4ba1      	ldr	r3, [pc, #644]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 80e4 	beq.w	8001eac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_RCC_OscConfig+0x4a>
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	f040 808b 	bne.w	8001e08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	f040 8087 	bne.w	8001e08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cfa:	4b93      	ldr	r3, [pc, #588]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x62>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e3ac      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1a      	ldr	r2, [r3, #32]
 8001d16:	4b8c      	ldr	r3, [pc, #560]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d004      	beq.n	8001d2c <HAL_RCC_OscConfig+0x7c>
 8001d22:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2a:	e005      	b.n	8001d38 <HAL_RCC_OscConfig+0x88>
 8001d2c:	4b86      	ldr	r3, [pc, #536]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d223      	bcs.n	8001d84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fd71 	bl	8002828 <RCC_SetFlashLatencyFromMSIRange>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e38d      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d50:	4b7d      	ldr	r3, [pc, #500]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a7c      	ldr	r2, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d56:	f043 0308 	orr.w	r3, r3, #8
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b7a      	ldr	r3, [pc, #488]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4977      	ldr	r1, [pc, #476]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d6e:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	4972      	ldr	r1, [pc, #456]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
 8001d82:	e025      	b.n	8001dd0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d84:	4b70      	ldr	r3, [pc, #448]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a6f      	ldr	r2, [pc, #444]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d8a:	f043 0308 	orr.w	r3, r3, #8
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b6d      	ldr	r3, [pc, #436]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	496a      	ldr	r1, [pc, #424]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da2:	4b69      	ldr	r3, [pc, #420]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	4965      	ldr	r1, [pc, #404]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fd31 	bl	8002828 <RCC_SetFlashLatencyFromMSIRange>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e34d      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dd0:	f000 fc36 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b5c      	ldr	r3, [pc, #368]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	495a      	ldr	r1, [pc, #360]	; (8001f4c <HAL_RCC_OscConfig+0x29c>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dec:	4a58      	ldr	r2, [pc, #352]	; (8001f50 <HAL_RCC_OscConfig+0x2a0>)
 8001dee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001df0:	4b58      	ldr	r3, [pc, #352]	; (8001f54 <HAL_RCC_OscConfig+0x2a4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fd85 	bl	8000904 <HAL_InitTick>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d052      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	e331      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d032      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e10:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fc02 	bl	8001624 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e24:	f7ff fbfe 	bl	8001624 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e31a      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e36:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a40      	ldr	r2, [pc, #256]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	493b      	ldr	r1, [pc, #236]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	4936      	ldr	r1, [pc, #216]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
 8001e74:	e01a      	b.n	8001eac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a33      	ldr	r2, [pc, #204]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e82:	f7ff fbcf 	bl	8001624 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fbcb 	bl	8001624 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e2e7      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x1da>
 8001ea8:	e000      	b.n	8001eac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eaa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d074      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d005      	beq.n	8001eca <HAL_RCC_OscConfig+0x21a>
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d10e      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d064      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d160      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e2c4      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x24a>
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a15      	ldr	r2, [pc, #84]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e01d      	b.n	8001f36 <HAL_RCC_OscConfig+0x286>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f02:	d10c      	bne.n	8001f1e <HAL_RCC_OscConfig+0x26e>
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	e00b      	b.n	8001f36 <HAL_RCC_OscConfig+0x286>
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a06      	ldr	r2, [pc, #24]	; (8001f48 <HAL_RCC_OscConfig+0x298>)
 8001f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fb71 	bl	8001624 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f44:	e011      	b.n	8001f6a <HAL_RCC_OscConfig+0x2ba>
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	080071ec 	.word	0x080071ec
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff fb64 	bl	8001624 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e280      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6a:	4baf      	ldr	r3, [pc, #700]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x2a8>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff fb54 	bl	8001624 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff fb50 	bl	8001624 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e26c      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f92:	4ba5      	ldr	r3, [pc, #660]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x2d0>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d060      	beq.n	8002070 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x310>
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d119      	bne.n	8001fee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d116      	bne.n	8001fee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc0:	4b99      	ldr	r3, [pc, #612]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x328>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e249      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b93      	ldr	r3, [pc, #588]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	4990      	ldr	r1, [pc, #576]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fec:	e040      	b.n	8002070 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d023      	beq.n	800203e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff6:	4b8c      	ldr	r3, [pc, #560]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a8b      	ldr	r2, [pc, #556]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7ff fb0f 	bl	8001624 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff fb0b 	bl	8001624 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e227      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800201c:	4b82      	ldr	r3, [pc, #520]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b7f      	ldr	r3, [pc, #508]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	061b      	lsls	r3, r3, #24
 8002036:	497c      	ldr	r1, [pc, #496]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
 800203c:	e018      	b.n	8002070 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203e:	4b7a      	ldr	r3, [pc, #488]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a79      	ldr	r2, [pc, #484]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8002044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff faeb 	bl	8001624 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002052:	f7ff fae7 	bl	8001624 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e203      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002064:	4b70      	ldr	r3, [pc, #448]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d03c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01c      	beq.n	80020be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002084:	4b68      	ldr	r3, [pc, #416]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208a:	4a67      	ldr	r2, [pc, #412]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7ff fac6 	bl	8001624 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209c:	f7ff fac2 	bl	8001624 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1de      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ae:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 80020b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ef      	beq.n	800209c <HAL_RCC_OscConfig+0x3ec>
 80020bc:	e01b      	b.n	80020f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020be:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c4:	4a58      	ldr	r2, [pc, #352]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7ff faa9 	bl	8001624 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff faa5 	bl	8001624 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e1c1      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e8:	4b4f      	ldr	r3, [pc, #316]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 80020ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1ef      	bne.n	80020d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80a6 	beq.w	8002250 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002108:	4b47      	ldr	r3, [pc, #284]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10d      	bne.n	8002130 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	4b44      	ldr	r3, [pc, #272]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	4a43      	ldr	r2, [pc, #268]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 800211a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211e:	6593      	str	r3, [r2, #88]	; 0x58
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212c:	2301      	movs	r3, #1
 800212e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002130:	4b3e      	ldr	r3, [pc, #248]	; (800222c <HAL_RCC_OscConfig+0x57c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d118      	bne.n	800216e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_RCC_OscConfig+0x57c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a3a      	ldr	r2, [pc, #232]	; (800222c <HAL_RCC_OscConfig+0x57c>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002148:	f7ff fa6c 	bl	8001624 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002150:	f7ff fa68 	bl	8001624 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e184      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002162:	4b32      	ldr	r3, [pc, #200]	; (800222c <HAL_RCC_OscConfig+0x57c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d108      	bne.n	8002188 <HAL_RCC_OscConfig+0x4d8>
 8002176:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002186:	e024      	b.n	80021d2 <HAL_RCC_OscConfig+0x522>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b05      	cmp	r3, #5
 800218e:	d110      	bne.n	80021b2 <HAL_RCC_OscConfig+0x502>
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	4a24      	ldr	r2, [pc, #144]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a0:	4b21      	ldr	r3, [pc, #132]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	4a20      	ldr	r2, [pc, #128]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021b0:	e00f      	b.n	80021d2 <HAL_RCC_OscConfig+0x522>
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b8:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c8:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 80021ca:	f023 0304 	bic.w	r3, r3, #4
 80021ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff fa23 	bl	8001624 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff fa1f 	bl	8001624 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e139      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_OscConfig+0x578>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0ed      	beq.n	80021e2 <HAL_RCC_OscConfig+0x532>
 8002206:	e01a      	b.n	800223e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff fa0c 	bl	8001624 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800220e:	e00f      	b.n	8002230 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7ff fa08 	bl	8001624 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d906      	bls.n	8002230 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e122      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002230:	4b90      	ldr	r3, [pc, #576]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1e8      	bne.n	8002210 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223e:	7ffb      	ldrb	r3, [r7, #31]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002244:	4b8b      	ldr	r3, [pc, #556]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	4a8a      	ldr	r2, [pc, #552]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 800224a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8108 	beq.w	800246a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	2b02      	cmp	r3, #2
 8002260:	f040 80d0 	bne.w	8002404 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002264:	4b83      	ldr	r3, [pc, #524]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 0203 	and.w	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	429a      	cmp	r2, r3
 8002276:	d130      	bne.n	80022da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	3b01      	subs	r3, #1
 8002284:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d127      	bne.n	80022da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002294:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d11f      	bne.n	80022da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022a4:	2a07      	cmp	r2, #7
 80022a6:	bf14      	ite	ne
 80022a8:	2201      	movne	r2, #1
 80022aa:	2200      	moveq	r2, #0
 80022ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d113      	bne.n	80022da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	085b      	lsrs	r3, r3, #1
 80022be:	3b01      	subs	r3, #1
 80022c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d109      	bne.n	80022da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	3b01      	subs	r3, #1
 80022d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d06e      	beq.n	80023b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	d069      	beq.n	80023b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022e0:	4b64      	ldr	r3, [pc, #400]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022ec:	4b61      	ldr	r3, [pc, #388]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0b7      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022fc:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a5c      	ldr	r2, [pc, #368]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002306:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002308:	f7ff f98c 	bl	8001624 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7ff f988 	bl	8001624 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e0a4      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002322:	4b54      	ldr	r3, [pc, #336]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232e:	4b51      	ldr	r3, [pc, #324]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	4b51      	ldr	r3, [pc, #324]	; (8002478 <HAL_RCC_OscConfig+0x7c8>)
 8002334:	4013      	ands	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800233e:	3a01      	subs	r2, #1
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	4311      	orrs	r1, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002348:	0212      	lsls	r2, r2, #8
 800234a:	4311      	orrs	r1, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002350:	0852      	lsrs	r2, r2, #1
 8002352:	3a01      	subs	r2, #1
 8002354:	0552      	lsls	r2, r2, #21
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800235c:	0852      	lsrs	r2, r2, #1
 800235e:	3a01      	subs	r2, #1
 8002360:	0652      	lsls	r2, r2, #25
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002368:	0912      	lsrs	r2, r2, #4
 800236a:	0452      	lsls	r2, r2, #17
 800236c:	430a      	orrs	r2, r1
 800236e:	4941      	ldr	r1, [pc, #260]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002370:	4313      	orrs	r3, r2
 8002372:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002374:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a3e      	ldr	r2, [pc, #248]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002380:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a3b      	ldr	r2, [pc, #236]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800238c:	f7ff f94a 	bl	8001624 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff f946 	bl	8001624 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e062      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b2:	e05a      	b.n	800246a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e059      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b8:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d152      	bne.n	800246a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023c4:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 80023ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a27      	ldr	r2, [pc, #156]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023dc:	f7ff f922 	bl	8001624 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e4:	f7ff f91e 	bl	8001624 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e03a      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x734>
 8002402:	e032      	b.n	800246a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d02d      	beq.n	8002466 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002410:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002414:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4a13      	ldr	r2, [pc, #76]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002428:	f023 0303 	bic.w	r3, r3, #3
 800242c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4a10      	ldr	r2, [pc, #64]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 8002434:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7ff f8f1 	bl	8001624 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7ff f8ed 	bl	8001624 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e009      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_OscConfig+0x7c4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x796>
 8002464:	e001      	b.n	800246a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	f99d808c 	.word	0xf99d808c

0800247c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0c8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002490:	4b66      	ldr	r3, [pc, #408]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d910      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0207 	bic.w	r2, r3, #7
 80024a6:	4961      	ldr	r1, [pc, #388]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0b0      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d04c      	beq.n	8002566 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d4:	4b56      	ldr	r3, [pc, #344]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d121      	bne.n	8002524 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e09e      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d115      	bne.n	8002524 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e092      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002504:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e086      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002514:	4b46      	ldr	r3, [pc, #280]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e07e      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002524:	4b42      	ldr	r3, [pc, #264]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 0203 	bic.w	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	493f      	ldr	r1, [pc, #252]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002536:	f7ff f875 	bl	8001624 <HAL_GetTick>
 800253a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253c:	e00a      	b.n	8002554 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253e:	f7ff f871 	bl	8001624 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e066      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002554:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 020c 	and.w	r2, r3, #12
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	429a      	cmp	r2, r3
 8002564:	d1eb      	bne.n	800253e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	492c      	ldr	r1, [pc, #176]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002584:	4b29      	ldr	r3, [pc, #164]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d210      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 0207 	bic.w	r2, r3, #7
 800259a:	4924      	ldr	r1, [pc, #144]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x1b0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e036      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4918      	ldr	r1, [pc, #96]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4910      	ldr	r1, [pc, #64]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f2:	f000 f825 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025f6:	4602      	mov	r2, r0
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_RCC_ClockConfig+0x1b4>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	490c      	ldr	r1, [pc, #48]	; (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 8002604:	5ccb      	ldrb	r3, [r1, r3]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe f974 	bl	8000904 <HAL_InitTick>
 800261c:	4603      	mov	r3, r0
 800261e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002620:	7afb      	ldrb	r3, [r7, #11]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
 8002634:	080071ec 	.word	0x080071ec
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264e:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002658:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x34>
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d121      	bne.n	80026b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d11e      	bne.n	80026b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002674:	4b34      	ldr	r3, [pc, #208]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002680:	4b31      	ldr	r3, [pc, #196]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e005      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002690:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800269c:	4a2b      	ldr	r2, [pc, #172]	; (800274c <HAL_RCC_GetSysClockFreq+0x10c>)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d102      	bne.n	80026be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e004      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_RCC_GetSysClockFreq+0x110>)
 80026c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d134      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d003      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0xac>
 80026e4:	e005      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_RCC_GetSysClockFreq+0x110>)
 80026e8:	617b      	str	r3, [r7, #20]
      break;
 80026ea:	e005      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026ec:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ee:	617b      	str	r3, [r7, #20]
      break;
 80026f0:	e002      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	617b      	str	r3, [r7, #20]
      break;
 80026f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f8:	4b13      	ldr	r3, [pc, #76]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	3301      	adds	r3, #1
 8002704:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	fb02 f203 	mul.w	r2, r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	0e5b      	lsrs	r3, r3, #25
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	3301      	adds	r3, #1
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	fbb2 f3f3 	udiv	r3, r2, r3
 8002736:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002738:	69bb      	ldr	r3, [r7, #24]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	08007204 	.word	0x08007204
 8002750:	00f42400 	.word	0x00f42400

08002754 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_RCC_GetHCLKFreq+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000000 	.word	0x20000000

0800276c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002770:	f7ff fff0 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4904      	ldr	r1, [pc, #16]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	080071fc 	.word	0x080071fc

08002798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800279c:	f7ff ffda 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0adb      	lsrs	r3, r3, #11
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4904      	ldr	r1, [pc, #16]	; (80027c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	080071fc 	.word	0x080071fc

080027c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	220f      	movs	r2, #15
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_RCC_GetClockConfig+0x60>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0207 	and.w	r2, r3, #7
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	601a      	str	r2, [r3, #0]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	40022000 	.word	0x40022000

08002828 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002834:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002840:	f7ff f9d2 	bl	8001be8 <HAL_PWREx_GetVoltageRange>
 8002844:	6178      	str	r0, [r7, #20]
 8002846:	e014      	b.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	4a24      	ldr	r2, [pc, #144]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002852:	6593      	str	r3, [r2, #88]	; 0x58
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002860:	f7ff f9c2 	bl	8001be8 <HAL_PWREx_GetVoltageRange>
 8002864:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002866:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800286c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002870:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002878:	d10b      	bne.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d919      	bls.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2ba0      	cmp	r3, #160	; 0xa0
 8002884:	d902      	bls.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002886:	2302      	movs	r3, #2
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	e013      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800288c:	2301      	movs	r3, #1
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	e010      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b80      	cmp	r3, #128	; 0x80
 8002896:	d902      	bls.n	800289e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002898:	2303      	movs	r3, #3
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	e00a      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b80      	cmp	r3, #128	; 0x80
 80028a2:	d102      	bne.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028a4:	2302      	movs	r3, #2
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	e004      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b70      	cmp	r3, #112	; 0x70
 80028ae:	d101      	bne.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028b0:	2301      	movs	r3, #1
 80028b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 0207 	bic.w	r2, r3, #7
 80028bc:	4909      	ldr	r1, [pc, #36]	; (80028e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d001      	beq.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40022000 	.word	0x40022000

080028e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028f0:	2300      	movs	r3, #0
 80028f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028f4:	2300      	movs	r3, #0
 80028f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002900:	2b00      	cmp	r3, #0
 8002902:	d041      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002908:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800290c:	d02a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800290e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002912:	d824      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002918:	d008      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800291a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800291e:	d81e      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002928:	d010      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800292a:	e018      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800292c:	4b86      	ldr	r3, [pc, #536]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a85      	ldr	r2, [pc, #532]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002936:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002938:	e015      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fabb 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800294a:	e00c      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3320      	adds	r3, #32
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fba6 	bl	80030a4 <RCCEx_PLLSAI2_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800295c:	e003      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	74fb      	strb	r3, [r7, #19]
      break;
 8002962:	e000      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002966:	7cfb      	ldrb	r3, [r7, #19]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800296c:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297a:	4973      	ldr	r1, [pc, #460]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002982:	e001      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d041      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002998:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800299c:	d02a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800299e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029a2:	d824      	bhi.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029a8:	d008      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029ae:	d81e      	bhi.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d010      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029ba:	e018      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029bc:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a61      	ldr	r2, [pc, #388]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029c8:	e015      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fa73 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 80029d6:	4603      	mov	r3, r0
 80029d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029da:	e00c      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3320      	adds	r3, #32
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fb5e 	bl	80030a4 <RCCEx_PLLSAI2_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029ec:	e003      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	74fb      	strb	r3, [r7, #19]
      break;
 80029f2:	e000      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10b      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029fc:	4b52      	ldr	r3, [pc, #328]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a0a:	494f      	ldr	r1, [pc, #316]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a12:	e001      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80a0 	beq.w	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00d      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	4a40      	ldr	r2, [pc, #256]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4c:	4b3e      	ldr	r3, [pc, #248]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a5c:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a3a      	ldr	r2, [pc, #232]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a68:	f7fe fddc 	bl	8001624 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a6e:	e009      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a70:	f7fe fdd8 	bl	8001624 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d902      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	74fb      	strb	r3, [r7, #19]
        break;
 8002a82:	e005      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a84:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0ef      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d15c      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a96:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01f      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d019      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe fd97 	bl	8001624 <HAL_GetTick>
 8002af6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af8:	e00b      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fd93 	bl	8001624 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d902      	bls.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	74fb      	strb	r3, [r7, #19]
            break;
 8002b10:	e006      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ec      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b36:	4904      	ldr	r1, [pc, #16]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b3e:	e009      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	74bb      	strb	r3, [r7, #18]
 8002b44:	e006      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b54:	7c7b      	ldrb	r3, [r7, #17]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d105      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5a:	4b9e      	ldr	r3, [pc, #632]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	4a9d      	ldr	r2, [pc, #628]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b72:	4b98      	ldr	r3, [pc, #608]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f023 0203 	bic.w	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	4994      	ldr	r1, [pc, #592]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b94:	4b8f      	ldr	r3, [pc, #572]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f023 020c 	bic.w	r2, r3, #12
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	498c      	ldr	r1, [pc, #560]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bb6:	4b87      	ldr	r3, [pc, #540]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	4983      	ldr	r1, [pc, #524]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bd8:	4b7e      	ldr	r3, [pc, #504]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	497b      	ldr	r1, [pc, #492]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c08:	4972      	ldr	r1, [pc, #456]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c1c:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	496a      	ldr	r1, [pc, #424]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c3e:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	4961      	ldr	r1, [pc, #388]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c60:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6e:	4959      	ldr	r1, [pc, #356]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c82:	4b54      	ldr	r3, [pc, #336]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c90:	4950      	ldr	r1, [pc, #320]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	4948      	ldr	r1, [pc, #288]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cc6:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	493f      	ldr	r1, [pc, #252]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d028      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ce8:	4b3a      	ldr	r3, [pc, #232]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf6:	4937      	ldr	r1, [pc, #220]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d06:	d106      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d08:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a31      	ldr	r2, [pc, #196]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d12:	60d3      	str	r3, [r2, #12]
 8002d14:	e011      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	2101      	movs	r1, #1
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f8c8 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d028      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d46:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	491f      	ldr	r1, [pc, #124]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d64:	d106      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d66:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4a1a      	ldr	r2, [pc, #104]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d70:	60d3      	str	r3, [r2, #12]
 8002d72:	e011      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2101      	movs	r1, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f899 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d94:	7cfb      	ldrb	r3, [r7, #19]
 8002d96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02b      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db2:	4908      	ldr	r1, [pc, #32]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc2:	d109      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4a02      	ldr	r2, [pc, #8]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dce:	60d3      	str	r3, [r2, #12]
 8002dd0:	e014      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2101      	movs	r1, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f867 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d02f      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e08:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e16:	4928      	ldr	r1, [pc, #160]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e26:	d10d      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	2102      	movs	r1, #2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f844 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d014      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	74bb      	strb	r3, [r7, #18]
 8002e42:	e011      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3320      	adds	r3, #32
 8002e52:	2102      	movs	r1, #2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 f925 	bl	80030a4 <RCCEx_PLLSAI2_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e5e:	7cfb      	ldrb	r3, [r7, #19]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e82:	490d      	ldr	r1, [pc, #52]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea6:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002eae:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000

08002ebc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eca:	4b75      	ldr	r3, [pc, #468]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d018      	beq.n	8002f08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ed6:	4b72      	ldr	r3, [pc, #456]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0203 	and.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d10d      	bne.n	8002f02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eee:	4b6c      	ldr	r3, [pc, #432]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
       ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d047      	beq.n	8002f92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e044      	b.n	8002f92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d018      	beq.n	8002f42 <RCCEx_PLLSAI1_Config+0x86>
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d825      	bhi.n	8002f60 <RCCEx_PLLSAI1_Config+0xa4>
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d002      	beq.n	8002f1e <RCCEx_PLLSAI1_Config+0x62>
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d009      	beq.n	8002f30 <RCCEx_PLLSAI1_Config+0x74>
 8002f1c:	e020      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f1e:	4b60      	ldr	r3, [pc, #384]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11d      	bne.n	8002f66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2e:	e01a      	b.n	8002f66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f30:	4b5b      	ldr	r3, [pc, #364]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d116      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f40:	e013      	b.n	8002f6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f42:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f4e:	4b54      	ldr	r3, [pc, #336]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f5e:	e006      	b.n	8002f6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      break;
 8002f64:	e004      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f66:	bf00      	nop
 8002f68:	e002      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e000      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f76:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	4944      	ldr	r1, [pc, #272]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d17d      	bne.n	8003094 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f98:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a40      	ldr	r2, [pc, #256]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fb3e 	bl	8001624 <HAL_GetTick>
 8002fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002faa:	e009      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fac:	f7fe fb3a 	bl	8001624 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d902      	bls.n	8002fc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002fbe:	e005      	b.n	8002fcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fc0:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ef      	bne.n	8002fac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d160      	bne.n	8003094 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d111      	bne.n	8002ffc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd8:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	0211      	lsls	r1, r2, #8
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	0912      	lsrs	r2, r2, #4
 8002ff0:	0452      	lsls	r2, r2, #17
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	492a      	ldr	r1, [pc, #168]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	610b      	str	r3, [r1, #16]
 8002ffa:	e027      	b.n	800304c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d112      	bne.n	8003028 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003002:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800300a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6892      	ldr	r2, [r2, #8]
 8003012:	0211      	lsls	r1, r2, #8
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6912      	ldr	r2, [r2, #16]
 8003018:	0852      	lsrs	r2, r2, #1
 800301a:	3a01      	subs	r2, #1
 800301c:	0552      	lsls	r2, r2, #21
 800301e:	430a      	orrs	r2, r1
 8003020:	491f      	ldr	r1, [pc, #124]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	610b      	str	r3, [r1, #16]
 8003026:	e011      	b.n	800304c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003030:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6892      	ldr	r2, [r2, #8]
 8003038:	0211      	lsls	r1, r2, #8
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6952      	ldr	r2, [r2, #20]
 800303e:	0852      	lsrs	r2, r2, #1
 8003040:	3a01      	subs	r2, #1
 8003042:	0652      	lsls	r2, r2, #25
 8003044:	430a      	orrs	r2, r1
 8003046:	4916      	ldr	r1, [pc, #88]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003048:	4313      	orrs	r3, r2
 800304a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003052:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003056:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fe fae4 	bl	8001624 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800305e:	e009      	b.n	8003074 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003060:	f7fe fae0 	bl	8001624 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d902      	bls.n	8003074 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	73fb      	strb	r3, [r7, #15]
          break;
 8003072:	e005      	b.n	8003080 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ef      	beq.n	8003060 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003086:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	4904      	ldr	r1, [pc, #16]	; (80030a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003090:	4313      	orrs	r3, r2
 8003092:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000

080030a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030b2:	4b6a      	ldr	r3, [pc, #424]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d018      	beq.n	80030f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030be:	4b67      	ldr	r3, [pc, #412]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0203 	and.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d10d      	bne.n	80030ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
       ||
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030d6:	4b61      	ldr	r3, [pc, #388]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	091b      	lsrs	r3, r3, #4
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
       ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d047      	beq.n	800317a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	e044      	b.n	800317a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d018      	beq.n	800312a <RCCEx_PLLSAI2_Config+0x86>
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d825      	bhi.n	8003148 <RCCEx_PLLSAI2_Config+0xa4>
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d002      	beq.n	8003106 <RCCEx_PLLSAI2_Config+0x62>
 8003100:	2b02      	cmp	r3, #2
 8003102:	d009      	beq.n	8003118 <RCCEx_PLLSAI2_Config+0x74>
 8003104:	e020      	b.n	8003148 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003106:	4b55      	ldr	r3, [pc, #340]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d11d      	bne.n	800314e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003116:	e01a      	b.n	800314e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d116      	bne.n	8003152 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003128:	e013      	b.n	8003152 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800312a:	4b4c      	ldr	r3, [pc, #304]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10f      	bne.n	8003156 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003146:	e006      	b.n	8003156 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      break;
 800314c:	e004      	b.n	8003158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800314e:	bf00      	nop
 8003150:	e002      	b.n	8003158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003156:	bf00      	nop
    }

    if(status == HAL_OK)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10d      	bne.n	800317a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800315e:	4b3f      	ldr	r3, [pc, #252]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	3b01      	subs	r3, #1
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	430b      	orrs	r3, r1
 8003174:	4939      	ldr	r1, [pc, #228]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d167      	bne.n	8003250 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003180:	4b36      	ldr	r3, [pc, #216]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a35      	ldr	r2, [pc, #212]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800318c:	f7fe fa4a 	bl	8001624 <HAL_GetTick>
 8003190:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003192:	e009      	b.n	80031a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003194:	f7fe fa46 	bl	8001624 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d902      	bls.n	80031a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	73fb      	strb	r3, [r7, #15]
        break;
 80031a6:	e005      	b.n	80031b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031a8:	4b2c      	ldr	r3, [pc, #176]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ef      	bne.n	8003194 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d14a      	bne.n	8003250 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d111      	bne.n	80031e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031c0:	4b26      	ldr	r3, [pc, #152]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6892      	ldr	r2, [r2, #8]
 80031d0:	0211      	lsls	r1, r2, #8
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68d2      	ldr	r2, [r2, #12]
 80031d6:	0912      	lsrs	r2, r2, #4
 80031d8:	0452      	lsls	r2, r2, #17
 80031da:	430a      	orrs	r2, r1
 80031dc:	491f      	ldr	r1, [pc, #124]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	614b      	str	r3, [r1, #20]
 80031e2:	e011      	b.n	8003208 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6892      	ldr	r2, [r2, #8]
 80031f4:	0211      	lsls	r1, r2, #8
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6912      	ldr	r2, [r2, #16]
 80031fa:	0852      	lsrs	r2, r2, #1
 80031fc:	3a01      	subs	r2, #1
 80031fe:	0652      	lsls	r2, r2, #25
 8003200:	430a      	orrs	r2, r1
 8003202:	4916      	ldr	r1, [pc, #88]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a13      	ldr	r2, [pc, #76]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 800320e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003212:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003214:	f7fe fa06 	bl	8001624 <HAL_GetTick>
 8003218:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800321a:	e009      	b.n	8003230 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800321c:	f7fe fa02 	bl	8001624 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d902      	bls.n	8003230 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	73fb      	strb	r3, [r7, #15]
          break;
 800322e:	e005      	b.n	800323c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ef      	beq.n	800321c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4904      	ldr	r1, [pc, #16]	; (800325c <RCCEx_PLLSAI2_Config+0x1b8>)
 800324c:	4313      	orrs	r3, r2
 800324e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003250:	7bfb      	ldrb	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e049      	b.n	8003306 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f841 	bl	800330e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f000 f9f8 	bl	8003694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d001      	beq.n	800333c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e04f      	b.n	80033dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a23      	ldr	r2, [pc, #140]	; (80033e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01d      	beq.n	800339a <HAL_TIM_Base_Start_IT+0x76>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003366:	d018      	beq.n	800339a <HAL_TIM_Base_Start_IT+0x76>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_TIM_Base_Start_IT+0xc8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <HAL_TIM_Base_Start_IT+0x76>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1e      	ldr	r2, [pc, #120]	; (80033f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00e      	beq.n	800339a <HAL_TIM_Base_Start_IT+0x76>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1c      	ldr	r2, [pc, #112]	; (80033f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d009      	beq.n	800339a <HAL_TIM_Base_Start_IT+0x76>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <HAL_TIM_Base_Start_IT+0x76>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a19      	ldr	r2, [pc, #100]	; (80033fc <HAL_TIM_Base_Start_IT+0xd8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d115      	bne.n	80033c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <HAL_TIM_Base_Start_IT+0xdc>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b06      	cmp	r3, #6
 80033aa:	d015      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0xb4>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b2:	d011      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	e008      	b.n	80033d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e000      	b.n	80033da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40000c00 	.word	0x40000c00
 80033f8:	40013400 	.word	0x40013400
 80033fc:	40014000 	.word	0x40014000
 8003400:	00010007 	.word	0x00010007

08003404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0202 	mvn.w	r2, #2
 8003430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f905 	bl	8003656 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8f7 	bl	8003642 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f908 	bl	800366a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0204 	mvn.w	r2, #4
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8db 	bl	8003656 <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8cd 	bl	8003642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f8de 	bl	800366a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0208 	mvn.w	r2, #8
 80034d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2204      	movs	r2, #4
 80034de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8b1 	bl	8003656 <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8a3 	bl	8003642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f8b4 	bl	800366a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b10      	cmp	r3, #16
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b10      	cmp	r3, #16
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0210 	mvn.w	r2, #16
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2208      	movs	r2, #8
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f887 	bl	8003656 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f879 	bl	8003642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f88a 	bl	800366a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d107      	bne.n	8003588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0201 	mvn.w	r2, #1
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd f908 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b80      	cmp	r3, #128	; 0x80
 8003594:	d10e      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d107      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f914 	bl	80037dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c2:	d10e      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ce:	2b80      	cmp	r3, #128	; 0x80
 80035d0:	d107      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f907 	bl	80037f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d10e      	bne.n	800360e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fa:	2b40      	cmp	r3, #64	; 0x40
 80035fc:	d107      	bne.n	800360e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f838 	bl	800367e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b20      	cmp	r3, #32
 800361a:	d10e      	bne.n	800363a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b20      	cmp	r3, #32
 8003628:	d107      	bne.n	800363a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f06f 0220 	mvn.w	r2, #32
 8003632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f8c7 	bl	80037c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a40      	ldr	r2, [pc, #256]	; (80037a8 <TIM_Base_SetConfig+0x114>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <TIM_Base_SetConfig+0x40>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b2:	d00f      	beq.n	80036d4 <TIM_Base_SetConfig+0x40>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a3d      	ldr	r2, [pc, #244]	; (80037ac <TIM_Base_SetConfig+0x118>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00b      	beq.n	80036d4 <TIM_Base_SetConfig+0x40>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a3c      	ldr	r2, [pc, #240]	; (80037b0 <TIM_Base_SetConfig+0x11c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_Base_SetConfig+0x40>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a3b      	ldr	r2, [pc, #236]	; (80037b4 <TIM_Base_SetConfig+0x120>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0x40>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a3a      	ldr	r2, [pc, #232]	; (80037b8 <TIM_Base_SetConfig+0x124>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d108      	bne.n	80036e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a2f      	ldr	r2, [pc, #188]	; (80037a8 <TIM_Base_SetConfig+0x114>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01f      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f4:	d01b      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2c      	ldr	r2, [pc, #176]	; (80037ac <TIM_Base_SetConfig+0x118>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d017      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <TIM_Base_SetConfig+0x11c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2a      	ldr	r2, [pc, #168]	; (80037b4 <TIM_Base_SetConfig+0x120>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00f      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a29      	ldr	r2, [pc, #164]	; (80037b8 <TIM_Base_SetConfig+0x124>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a28      	ldr	r2, [pc, #160]	; (80037bc <TIM_Base_SetConfig+0x128>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a27      	ldr	r2, [pc, #156]	; (80037c0 <TIM_Base_SetConfig+0x12c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_Base_SetConfig+0x9a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <TIM_Base_SetConfig+0x130>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d108      	bne.n	8003740 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <TIM_Base_SetConfig+0x114>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00f      	beq.n	800378c <TIM_Base_SetConfig+0xf8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <TIM_Base_SetConfig+0x124>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00b      	beq.n	800378c <TIM_Base_SetConfig+0xf8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a11      	ldr	r2, [pc, #68]	; (80037bc <TIM_Base_SetConfig+0x128>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <TIM_Base_SetConfig+0xf8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <TIM_Base_SetConfig+0x12c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_Base_SetConfig+0xf8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <TIM_Base_SetConfig+0x130>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d103      	bne.n	8003794 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	615a      	str	r2, [r3, #20]
}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40000400 	.word	0x40000400
 80037b0:	40000800 	.word	0x40000800
 80037b4:	40000c00 	.word	0x40000c00
 80037b8:	40013400 	.word	0x40013400
 80037bc:	40014000 	.word	0x40014000
 80037c0:	40014400 	.word	0x40014400
 80037c4:	40014800 	.word	0x40014800

080037c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e040      	b.n	8003898 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd f82a 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	; 0x24
 8003830:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f8c0 	bl	80039c8 <UART_SetConfig>
 8003848:	4603      	mov	r3, r0
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e022      	b.n	8003898 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fb3e 	bl	8003edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800386e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800387e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fbc5 	bl	8004020 <UART_CheckIdleState>
 8003896:	4603      	mov	r3, r0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	f040 8082 	bne.w	80039be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_UART_Transmit+0x26>
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07a      	b.n	80039c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_UART_Transmit+0x38>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e073      	b.n	80039c0 <HAL_UART_Transmit+0x120>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2221      	movs	r2, #33	; 0x21
 80038ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ee:	f7fd fe99 	bl	8001624 <HAL_GetTick>
 80038f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390c:	d108      	bne.n	8003920 <HAL_UART_Transmit+0x80>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	e003      	b.n	8003928 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003930:	e02d      	b.n	800398e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2200      	movs	r2, #0
 800393a:	2180      	movs	r1, #128	; 0x80
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fbb8 	bl	80040b2 <UART_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e039      	b.n	80039c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10b      	bne.n	800396a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	881a      	ldrh	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800395e:	b292      	uxth	r2, r2
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	3302      	adds	r3, #2
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	e008      	b.n	800397c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	b292      	uxth	r2, r2
 8003974:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3301      	adds	r3, #1
 800397a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1cb      	bne.n	8003932 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2140      	movs	r1, #64	; 0x40
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fb84 	bl	80040b2 <UART_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e005      	b.n	80039c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
  }
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c8:	b5b0      	push	{r4, r5, r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4bad      	ldr	r3, [pc, #692]	; (8003ca8 <UART_SetConfig+0x2e0>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	69f9      	ldr	r1, [r7, #28]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4aa2      	ldr	r2, [pc, #648]	; (8003cac <UART_SetConfig+0x2e4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d004      	beq.n	8003a30 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a99      	ldr	r2, [pc, #612]	; (8003cb0 <UART_SetConfig+0x2e8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d121      	bne.n	8003a92 <UART_SetConfig+0xca>
 8003a4e:	4b99      	ldr	r3, [pc, #612]	; (8003cb4 <UART_SetConfig+0x2ec>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d817      	bhi.n	8003a8c <UART_SetConfig+0xc4>
 8003a5c:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <UART_SetConfig+0x9c>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a81 	.word	0x08003a81
 8003a6c:	08003a7b 	.word	0x08003a7b
 8003a70:	08003a87 	.word	0x08003a87
 8003a74:	2301      	movs	r3, #1
 8003a76:	76fb      	strb	r3, [r7, #27]
 8003a78:	e0e7      	b.n	8003c4a <UART_SetConfig+0x282>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	76fb      	strb	r3, [r7, #27]
 8003a7e:	e0e4      	b.n	8003c4a <UART_SetConfig+0x282>
 8003a80:	2304      	movs	r3, #4
 8003a82:	76fb      	strb	r3, [r7, #27]
 8003a84:	e0e1      	b.n	8003c4a <UART_SetConfig+0x282>
 8003a86:	2308      	movs	r3, #8
 8003a88:	76fb      	strb	r3, [r7, #27]
 8003a8a:	e0de      	b.n	8003c4a <UART_SetConfig+0x282>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	76fb      	strb	r3, [r7, #27]
 8003a90:	e0db      	b.n	8003c4a <UART_SetConfig+0x282>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a88      	ldr	r2, [pc, #544]	; (8003cb8 <UART_SetConfig+0x2f0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d132      	bne.n	8003b02 <UART_SetConfig+0x13a>
 8003a9c:	4b85      	ldr	r3, [pc, #532]	; (8003cb4 <UART_SetConfig+0x2ec>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d828      	bhi.n	8003afc <UART_SetConfig+0x134>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <UART_SetConfig+0xe8>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ae5 	.word	0x08003ae5
 8003ab4:	08003afd 	.word	0x08003afd
 8003ab8:	08003afd 	.word	0x08003afd
 8003abc:	08003afd 	.word	0x08003afd
 8003ac0:	08003af1 	.word	0x08003af1
 8003ac4:	08003afd 	.word	0x08003afd
 8003ac8:	08003afd 	.word	0x08003afd
 8003acc:	08003afd 	.word	0x08003afd
 8003ad0:	08003aeb 	.word	0x08003aeb
 8003ad4:	08003afd 	.word	0x08003afd
 8003ad8:	08003afd 	.word	0x08003afd
 8003adc:	08003afd 	.word	0x08003afd
 8003ae0:	08003af7 	.word	0x08003af7
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	76fb      	strb	r3, [r7, #27]
 8003ae8:	e0af      	b.n	8003c4a <UART_SetConfig+0x282>
 8003aea:	2302      	movs	r3, #2
 8003aec:	76fb      	strb	r3, [r7, #27]
 8003aee:	e0ac      	b.n	8003c4a <UART_SetConfig+0x282>
 8003af0:	2304      	movs	r3, #4
 8003af2:	76fb      	strb	r3, [r7, #27]
 8003af4:	e0a9      	b.n	8003c4a <UART_SetConfig+0x282>
 8003af6:	2308      	movs	r3, #8
 8003af8:	76fb      	strb	r3, [r7, #27]
 8003afa:	e0a6      	b.n	8003c4a <UART_SetConfig+0x282>
 8003afc:	2310      	movs	r3, #16
 8003afe:	76fb      	strb	r3, [r7, #27]
 8003b00:	e0a3      	b.n	8003c4a <UART_SetConfig+0x282>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6d      	ldr	r2, [pc, #436]	; (8003cbc <UART_SetConfig+0x2f4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d120      	bne.n	8003b4e <UART_SetConfig+0x186>
 8003b0c:	4b69      	ldr	r3, [pc, #420]	; (8003cb4 <UART_SetConfig+0x2ec>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b16:	2b30      	cmp	r3, #48	; 0x30
 8003b18:	d013      	beq.n	8003b42 <UART_SetConfig+0x17a>
 8003b1a:	2b30      	cmp	r3, #48	; 0x30
 8003b1c:	d814      	bhi.n	8003b48 <UART_SetConfig+0x180>
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d009      	beq.n	8003b36 <UART_SetConfig+0x16e>
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d810      	bhi.n	8003b48 <UART_SetConfig+0x180>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <UART_SetConfig+0x168>
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d006      	beq.n	8003b3c <UART_SetConfig+0x174>
 8003b2e:	e00b      	b.n	8003b48 <UART_SetConfig+0x180>
 8003b30:	2300      	movs	r3, #0
 8003b32:	76fb      	strb	r3, [r7, #27]
 8003b34:	e089      	b.n	8003c4a <UART_SetConfig+0x282>
 8003b36:	2302      	movs	r3, #2
 8003b38:	76fb      	strb	r3, [r7, #27]
 8003b3a:	e086      	b.n	8003c4a <UART_SetConfig+0x282>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	76fb      	strb	r3, [r7, #27]
 8003b40:	e083      	b.n	8003c4a <UART_SetConfig+0x282>
 8003b42:	2308      	movs	r3, #8
 8003b44:	76fb      	strb	r3, [r7, #27]
 8003b46:	e080      	b.n	8003c4a <UART_SetConfig+0x282>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	76fb      	strb	r3, [r7, #27]
 8003b4c:	e07d      	b.n	8003c4a <UART_SetConfig+0x282>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5b      	ldr	r2, [pc, #364]	; (8003cc0 <UART_SetConfig+0x2f8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d120      	bne.n	8003b9a <UART_SetConfig+0x1d2>
 8003b58:	4b56      	ldr	r3, [pc, #344]	; (8003cb4 <UART_SetConfig+0x2ec>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b62:	2bc0      	cmp	r3, #192	; 0xc0
 8003b64:	d013      	beq.n	8003b8e <UART_SetConfig+0x1c6>
 8003b66:	2bc0      	cmp	r3, #192	; 0xc0
 8003b68:	d814      	bhi.n	8003b94 <UART_SetConfig+0x1cc>
 8003b6a:	2b80      	cmp	r3, #128	; 0x80
 8003b6c:	d009      	beq.n	8003b82 <UART_SetConfig+0x1ba>
 8003b6e:	2b80      	cmp	r3, #128	; 0x80
 8003b70:	d810      	bhi.n	8003b94 <UART_SetConfig+0x1cc>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <UART_SetConfig+0x1b4>
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d006      	beq.n	8003b88 <UART_SetConfig+0x1c0>
 8003b7a:	e00b      	b.n	8003b94 <UART_SetConfig+0x1cc>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	76fb      	strb	r3, [r7, #27]
 8003b80:	e063      	b.n	8003c4a <UART_SetConfig+0x282>
 8003b82:	2302      	movs	r3, #2
 8003b84:	76fb      	strb	r3, [r7, #27]
 8003b86:	e060      	b.n	8003c4a <UART_SetConfig+0x282>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	76fb      	strb	r3, [r7, #27]
 8003b8c:	e05d      	b.n	8003c4a <UART_SetConfig+0x282>
 8003b8e:	2308      	movs	r3, #8
 8003b90:	76fb      	strb	r3, [r7, #27]
 8003b92:	e05a      	b.n	8003c4a <UART_SetConfig+0x282>
 8003b94:	2310      	movs	r3, #16
 8003b96:	76fb      	strb	r3, [r7, #27]
 8003b98:	e057      	b.n	8003c4a <UART_SetConfig+0x282>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a49      	ldr	r2, [pc, #292]	; (8003cc4 <UART_SetConfig+0x2fc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d125      	bne.n	8003bf0 <UART_SetConfig+0x228>
 8003ba4:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <UART_SetConfig+0x2ec>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb2:	d017      	beq.n	8003be4 <UART_SetConfig+0x21c>
 8003bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb8:	d817      	bhi.n	8003bea <UART_SetConfig+0x222>
 8003bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bbe:	d00b      	beq.n	8003bd8 <UART_SetConfig+0x210>
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc4:	d811      	bhi.n	8003bea <UART_SetConfig+0x222>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <UART_SetConfig+0x20a>
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bce:	d006      	beq.n	8003bde <UART_SetConfig+0x216>
 8003bd0:	e00b      	b.n	8003bea <UART_SetConfig+0x222>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	76fb      	strb	r3, [r7, #27]
 8003bd6:	e038      	b.n	8003c4a <UART_SetConfig+0x282>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	76fb      	strb	r3, [r7, #27]
 8003bdc:	e035      	b.n	8003c4a <UART_SetConfig+0x282>
 8003bde:	2304      	movs	r3, #4
 8003be0:	76fb      	strb	r3, [r7, #27]
 8003be2:	e032      	b.n	8003c4a <UART_SetConfig+0x282>
 8003be4:	2308      	movs	r3, #8
 8003be6:	76fb      	strb	r3, [r7, #27]
 8003be8:	e02f      	b.n	8003c4a <UART_SetConfig+0x282>
 8003bea:	2310      	movs	r3, #16
 8003bec:	76fb      	strb	r3, [r7, #27]
 8003bee:	e02c      	b.n	8003c4a <UART_SetConfig+0x282>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2d      	ldr	r2, [pc, #180]	; (8003cac <UART_SetConfig+0x2e4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d125      	bne.n	8003c46 <UART_SetConfig+0x27e>
 8003bfa:	4b2e      	ldr	r3, [pc, #184]	; (8003cb4 <UART_SetConfig+0x2ec>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c08:	d017      	beq.n	8003c3a <UART_SetConfig+0x272>
 8003c0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c0e:	d817      	bhi.n	8003c40 <UART_SetConfig+0x278>
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c14:	d00b      	beq.n	8003c2e <UART_SetConfig+0x266>
 8003c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c1a:	d811      	bhi.n	8003c40 <UART_SetConfig+0x278>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <UART_SetConfig+0x260>
 8003c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c24:	d006      	beq.n	8003c34 <UART_SetConfig+0x26c>
 8003c26:	e00b      	b.n	8003c40 <UART_SetConfig+0x278>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	76fb      	strb	r3, [r7, #27]
 8003c2c:	e00d      	b.n	8003c4a <UART_SetConfig+0x282>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	76fb      	strb	r3, [r7, #27]
 8003c32:	e00a      	b.n	8003c4a <UART_SetConfig+0x282>
 8003c34:	2304      	movs	r3, #4
 8003c36:	76fb      	strb	r3, [r7, #27]
 8003c38:	e007      	b.n	8003c4a <UART_SetConfig+0x282>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	76fb      	strb	r3, [r7, #27]
 8003c3e:	e004      	b.n	8003c4a <UART_SetConfig+0x282>
 8003c40:	2310      	movs	r3, #16
 8003c42:	76fb      	strb	r3, [r7, #27]
 8003c44:	e001      	b.n	8003c4a <UART_SetConfig+0x282>
 8003c46:	2310      	movs	r3, #16
 8003c48:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a17      	ldr	r2, [pc, #92]	; (8003cac <UART_SetConfig+0x2e4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	f040 8087 	bne.w	8003d64 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c56:	7efb      	ldrb	r3, [r7, #27]
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d837      	bhi.n	8003ccc <UART_SetConfig+0x304>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <UART_SetConfig+0x29c>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003ccd 	.word	0x08003ccd
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003ccd 	.word	0x08003ccd
 8003c74:	08003c97 	.word	0x08003c97
 8003c78:	08003ccd 	.word	0x08003ccd
 8003c7c:	08003ccd 	.word	0x08003ccd
 8003c80:	08003ccd 	.word	0x08003ccd
 8003c84:	08003c9f 	.word	0x08003c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7fe fd70 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8003c8c:	6178      	str	r0, [r7, #20]
        break;
 8003c8e:	e022      	b.n	8003cd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <UART_SetConfig+0x300>)
 8003c92:	617b      	str	r3, [r7, #20]
        break;
 8003c94:	e01f      	b.n	8003cd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c96:	f7fe fcd3 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8003c9a:	6178      	str	r0, [r7, #20]
        break;
 8003c9c:	e01b      	b.n	8003cd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca2:	617b      	str	r3, [r7, #20]
        break;
 8003ca4:	e017      	b.n	8003cd6 <UART_SetConfig+0x30e>
 8003ca6:	bf00      	nop
 8003ca8:	efff69f3 	.word	0xefff69f3
 8003cac:	40008000 	.word	0x40008000
 8003cb0:	40013800 	.word	0x40013800
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40004400 	.word	0x40004400
 8003cbc:	40004800 	.word	0x40004800
 8003cc0:	40004c00 	.word	0x40004c00
 8003cc4:	40005000 	.word	0x40005000
 8003cc8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	76bb      	strb	r3, [r7, #26]
        break;
 8003cd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80f1 	beq.w	8003ec0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d305      	bcc.n	8003cfa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d902      	bls.n	8003d00 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	76bb      	strb	r3, [r7, #26]
 8003cfe:	e0df      	b.n	8003ec0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	020b      	lsls	r3, r1, #8
 8003d12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d16:	0202      	lsls	r2, r0, #8
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	6849      	ldr	r1, [r1, #4]
 8003d1c:	0849      	lsrs	r1, r1, #1
 8003d1e:	4608      	mov	r0, r1
 8003d20:	f04f 0100 	mov.w	r1, #0
 8003d24:	1814      	adds	r4, r2, r0
 8003d26:	eb43 0501 	adc.w	r5, r3, r1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	4620      	mov	r0, r4
 8003d36:	4629      	mov	r1, r5
 8003d38:	f7fc fa4a 	bl	80001d0 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4613      	mov	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d4a:	d308      	bcc.n	8003d5e <UART_SetConfig+0x396>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d52:	d204      	bcs.n	8003d5e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	e0b0      	b.n	8003ec0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	76bb      	strb	r3, [r7, #26]
 8003d62:	e0ad      	b.n	8003ec0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6c:	d15c      	bne.n	8003e28 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003d6e:	7efb      	ldrb	r3, [r7, #27]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d828      	bhi.n	8003dc6 <UART_SetConfig+0x3fe>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <UART_SetConfig+0x3b4>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003da1 	.word	0x08003da1
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	08003db1 	.word	0x08003db1
 8003d88:	08003dc7 	.word	0x08003dc7
 8003d8c:	08003db7 	.word	0x08003db7
 8003d90:	08003dc7 	.word	0x08003dc7
 8003d94:	08003dc7 	.word	0x08003dc7
 8003d98:	08003dc7 	.word	0x08003dc7
 8003d9c:	08003dbf 	.word	0x08003dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da0:	f7fe fce4 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8003da4:	6178      	str	r0, [r7, #20]
        break;
 8003da6:	e013      	b.n	8003dd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da8:	f7fe fcf6 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 8003dac:	6178      	str	r0, [r7, #20]
        break;
 8003dae:	e00f      	b.n	8003dd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db0:	4b49      	ldr	r3, [pc, #292]	; (8003ed8 <UART_SetConfig+0x510>)
 8003db2:	617b      	str	r3, [r7, #20]
        break;
 8003db4:	e00c      	b.n	8003dd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db6:	f7fe fc43 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8003dba:	6178      	str	r0, [r7, #20]
        break;
 8003dbc:	e008      	b.n	8003dd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc2:	617b      	str	r3, [r7, #20]
        break;
 8003dc4:	e004      	b.n	8003dd0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	76bb      	strb	r3, [r7, #26]
        break;
 8003dce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d074      	beq.n	8003ec0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	005a      	lsls	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b0f      	cmp	r3, #15
 8003df2:	d916      	bls.n	8003e22 <UART_SetConfig+0x45a>
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfa:	d212      	bcs.n	8003e22 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f023 030f 	bic.w	r3, r3, #15
 8003e04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	89fb      	ldrh	r3, [r7, #14]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	89fa      	ldrh	r2, [r7, #14]
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	e04e      	b.n	8003ec0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	76bb      	strb	r3, [r7, #26]
 8003e26:	e04b      	b.n	8003ec0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e28:	7efb      	ldrb	r3, [r7, #27]
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d827      	bhi.n	8003e7e <UART_SetConfig+0x4b6>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <UART_SetConfig+0x46c>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e69 	.word	0x08003e69
 8003e40:	08003e7f 	.word	0x08003e7f
 8003e44:	08003e6f 	.word	0x08003e6f
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003e7f 	.word	0x08003e7f
 8003e50:	08003e7f 	.word	0x08003e7f
 8003e54:	08003e77 	.word	0x08003e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e58:	f7fe fc88 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8003e5c:	6178      	str	r0, [r7, #20]
        break;
 8003e5e:	e013      	b.n	8003e88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e60:	f7fe fc9a 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 8003e64:	6178      	str	r0, [r7, #20]
        break;
 8003e66:	e00f      	b.n	8003e88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e68:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <UART_SetConfig+0x510>)
 8003e6a:	617b      	str	r3, [r7, #20]
        break;
 8003e6c:	e00c      	b.n	8003e88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6e:	f7fe fbe7 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8003e72:	6178      	str	r0, [r7, #20]
        break;
 8003e74:	e008      	b.n	8003e88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7a:	617b      	str	r3, [r7, #20]
        break;
 8003e7c:	e004      	b.n	8003e88 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	76bb      	strb	r3, [r7, #26]
        break;
 8003e86:	bf00      	nop
    }

    if (pclk != 0U)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d018      	beq.n	8003ec0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	085a      	lsrs	r2, r3, #1
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	441a      	add	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d908      	bls.n	8003ebc <UART_SetConfig+0x4f4>
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d204      	bcs.n	8003ebc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	e001      	b.n	8003ec0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ecc:	7ebb      	ldrb	r3, [r7, #26]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	00f42400 	.word	0x00f42400

08003edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01a      	beq.n	8003ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fda:	d10a      	bne.n	8003ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af02      	add	r7, sp, #8
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004030:	f7fd faf8 	bl	8001624 <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d10e      	bne.n	8004062 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f82d 	bl	80040b2 <UART_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e023      	b.n	80040aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b04      	cmp	r3, #4
 800406e:	d10e      	bne.n	800408e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f817 	bl	80040b2 <UART_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e00d      	b.n	80040aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c2:	e05e      	b.n	8004182 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ca:	d05a      	beq.n	8004182 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040cc:	f7fd faaa 	bl	8001624 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d302      	bcc.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d11b      	bne.n	800411a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e043      	b.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02c      	beq.n	8004182 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004136:	d124      	bne.n	8004182 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004140:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004150:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e00f      	b.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4013      	ands	r3, r2
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	429a      	cmp	r2, r3
 8004190:	bf0c      	ite	eq
 8004192:	2301      	moveq	r3, #1
 8004194:	2300      	movne	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	429a      	cmp	r2, r3
 800419e:	d091      	beq.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <__NVIC_SetPriority>:
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	6039      	str	r1, [r7, #0]
 80041b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	db0a      	blt.n	80041d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	490c      	ldr	r1, [pc, #48]	; (80041f8 <__NVIC_SetPriority+0x4c>)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	0112      	lsls	r2, r2, #4
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	440b      	add	r3, r1
 80041d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041d4:	e00a      	b.n	80041ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	4908      	ldr	r1, [pc, #32]	; (80041fc <__NVIC_SetPriority+0x50>)
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	3b04      	subs	r3, #4
 80041e4:	0112      	lsls	r2, r2, #4
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	440b      	add	r3, r1
 80041ea:	761a      	strb	r2, [r3, #24]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	e000e100 	.word	0xe000e100
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <SysTick_Handler+0x1c>)
 8004206:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004208:	f001 fcfe 	bl	8005c08 <xTaskGetSchedulerState>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d001      	beq.n	8004216 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004212:	f002 fae9 	bl	80067e8 <xPortSysTickHandler>
  }
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	e000e010 	.word	0xe000e010

08004220 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004224:	2100      	movs	r1, #0
 8004226:	f06f 0004 	mvn.w	r0, #4
 800422a:	f7ff ffbf 	bl	80041ac <__NVIC_SetPriority>
#endif
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800423a:	f3ef 8305 	mrs	r3, IPSR
 800423e:	603b      	str	r3, [r7, #0]
  return(result);
 8004240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004246:	f06f 0305 	mvn.w	r3, #5
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	e00c      	b.n	8004268 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <osKernelInitialize+0x44>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d105      	bne.n	8004262 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <osKernelInitialize+0x44>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800425c:	2300      	movs	r3, #0
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	e002      	b.n	8004268 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004266:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004268:	687b      	ldr	r3, [r7, #4]
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000150 	.word	0x20000150

0800427c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004282:	f3ef 8305 	mrs	r3, IPSR
 8004286:	603b      	str	r3, [r7, #0]
  return(result);
 8004288:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <osKernelStart+0x1a>
    stat = osErrorISR;
 800428e:	f06f 0305 	mvn.w	r3, #5
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	e010      	b.n	80042b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <osKernelStart+0x48>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d109      	bne.n	80042b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800429e:	f7ff ffbf 	bl	8004220 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <osKernelStart+0x48>)
 80042a4:	2202      	movs	r2, #2
 80042a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042a8:	f001 f866 	bl	8005378 <vTaskStartScheduler>
      stat = osOK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	e002      	b.n	80042b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80042b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042b8:	687b      	ldr	r3, [r7, #4]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000150 	.word	0x20000150

080042c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08e      	sub	sp, #56	; 0x38
 80042cc:	af04      	add	r7, sp, #16
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042d8:	f3ef 8305 	mrs	r3, IPSR
 80042dc:	617b      	str	r3, [r7, #20]
  return(result);
 80042de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d17e      	bne.n	80043e2 <osThreadNew+0x11a>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d07b      	beq.n	80043e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80042ee:	2318      	movs	r3, #24
 80042f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d045      	beq.n	800438e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <osThreadNew+0x48>
        name = attr->name;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <osThreadNew+0x6e>
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b38      	cmp	r3, #56	; 0x38
 8004328:	d805      	bhi.n	8004336 <osThreadNew+0x6e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <osThreadNew+0x72>
        return (NULL);
 8004336:	2300      	movs	r3, #0
 8004338:	e054      	b.n	80043e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00e      	beq.n	8004370 <osThreadNew+0xa8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2b5b      	cmp	r3, #91	; 0x5b
 8004358:	d90a      	bls.n	8004370 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <osThreadNew+0xa8>
        mem = 1;
 800436a:	2301      	movs	r3, #1
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	e010      	b.n	8004392 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10c      	bne.n	8004392 <osThreadNew+0xca>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d108      	bne.n	8004392 <osThreadNew+0xca>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d104      	bne.n	8004392 <osThreadNew+0xca>
          mem = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	e001      	b.n	8004392 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d110      	bne.n	80043ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043a0:	9202      	str	r2, [sp, #8]
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	6a3a      	ldr	r2, [r7, #32]
 80043ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fe0c 	bl	8004fcc <xTaskCreateStatic>
 80043b4:	4603      	mov	r3, r0
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	e013      	b.n	80043e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d110      	bne.n	80043e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	f107 0310 	add.w	r3, r7, #16
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fe57 	bl	8005086 <xTaskCreate>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d001      	beq.n	80043e2 <osThreadNew+0x11a>
            hTask = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043e2:	693b      	ldr	r3, [r7, #16]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043f4:	f3ef 8305 	mrs	r3, IPSR
 80043f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80043fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <osDelay+0x1c>
    stat = osErrorISR;
 8004400:	f06f 0305 	mvn.w	r3, #5
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e007      	b.n	8004418 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 ff7c 	bl	8005310 <vTaskDelay>
    }
  }

  return (stat);
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a07      	ldr	r2, [pc, #28]	; (8004450 <vApplicationGetIdleTaskMemory+0x2c>)
 8004434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4a06      	ldr	r2, [pc, #24]	; (8004454 <vApplicationGetIdleTaskMemory+0x30>)
 800443a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2280      	movs	r2, #128	; 0x80
 8004440:	601a      	str	r2, [r3, #0]
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000154 	.word	0x20000154
 8004454:	200001b0 	.word	0x200001b0

08004458 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4a07      	ldr	r2, [pc, #28]	; (8004484 <vApplicationGetTimerTaskMemory+0x2c>)
 8004468:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a06      	ldr	r2, [pc, #24]	; (8004488 <vApplicationGetTimerTaskMemory+0x30>)
 800446e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004476:	601a      	str	r2, [r3, #0]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	200003b0 	.word	0x200003b0
 8004488:	2000040c 	.word	0x2000040c

0800448c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f103 0208 	add.w	r2, r3, #8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f103 0208 	add.w	r2, r3, #8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f103 0208 	add.w	r2, r3, #8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]
}
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800452e:	b480      	push	{r7}
 8004530:	b085      	sub	sp, #20
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004544:	d103      	bne.n	800454e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e00c      	b.n	8004568 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3308      	adds	r3, #8
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e002      	b.n	800455c <vListInsert+0x2e>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	d2f6      	bcs.n	8004556 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	601a      	str	r2, [r3, #0]
}
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6892      	ldr	r2, [r2, #8]
 80045b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6852      	ldr	r2, [r2, #4]
 80045c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d103      	bne.n	80045d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	1e5a      	subs	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800461e:	f002 f851 	bl	80066c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	441a      	add	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	3b01      	subs	r3, #1
 8004650:	68f9      	ldr	r1, [r7, #12]
 8004652:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	441a      	add	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	22ff      	movs	r2, #255	; 0xff
 8004662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	22ff      	movs	r2, #255	; 0xff
 800466a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d114      	bne.n	800469e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01a      	beq.n	80046b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3310      	adds	r3, #16
 8004680:	4618      	mov	r0, r3
 8004682:	f001 f903 	bl	800588c <xTaskRemoveFromEventList>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d012      	beq.n	80046b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <xQueueGenericReset+0xcc>)
 800468e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	e009      	b.n	80046b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3310      	adds	r3, #16
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fef2 	bl	800448c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3324      	adds	r3, #36	; 0x24
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff feed 	bl	800448c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046b2:	f002 f837 	bl	8006724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046b6:	2301      	movs	r3, #1
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08e      	sub	sp, #56	; 0x38
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <xQueueGenericCreateStatic+0x52>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <xQueueGenericCreateStatic+0x56>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <xQueueGenericCreateStatic+0x58>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	623b      	str	r3, [r7, #32]
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d102      	bne.n	8004742 <xQueueGenericCreateStatic+0x7e>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <xQueueGenericCreateStatic+0x82>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <xQueueGenericCreateStatic+0x84>
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	61fb      	str	r3, [r7, #28]
}
 800475e:	bf00      	nop
 8004760:	e7fe      	b.n	8004760 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004762:	2350      	movs	r3, #80	; 0x50
 8004764:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b50      	cmp	r3, #80	; 0x50
 800476a:	d00a      	beq.n	8004782 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61bb      	str	r3, [r7, #24]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004782:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00d      	beq.n	80047aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004796:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	4613      	mov	r3, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f805 	bl	80047b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3730      	adds	r7, #48	; 0x30
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e002      	b.n	80047d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047e2:	2101      	movs	r1, #1
 80047e4:	69b8      	ldr	r0, [r7, #24]
 80047e6:	f7ff ff05 	bl	80045f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08e      	sub	sp, #56	; 0x38
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800480a:	2300      	movs	r3, #0
 800480c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <xQueueGenericSend+0x32>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d103      	bne.n	800483c <xQueueGenericSend+0x40>
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <xQueueGenericSend+0x44>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <xQueueGenericSend+0x46>
 8004840:	2300      	movs	r3, #0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <xQueueGenericSend+0x60>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d103      	bne.n	800486a <xQueueGenericSend+0x6e>
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <xQueueGenericSend+0x72>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <xQueueGenericSend+0x74>
 800486e:	2300      	movs	r3, #0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <xQueueGenericSend+0x8e>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	623b      	str	r3, [r7, #32]
}
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800488a:	f001 f9bd 	bl	8005c08 <xTaskGetSchedulerState>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <xQueueGenericSend+0x9e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <xQueueGenericSend+0xa2>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <xQueueGenericSend+0xa4>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xQueueGenericSend+0xbe>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	61fb      	str	r3, [r7, #28]
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048ba:	f001 ff03 	bl	80066c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d302      	bcc.n	80048d0 <xQueueGenericSend+0xd4>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d129      	bne.n	8004924 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048d6:	f000 fa0b 	bl	8004cf0 <prvCopyDataToQueue>
 80048da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	3324      	adds	r3, #36	; 0x24
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 ffcf 	bl	800588c <xTaskRemoveFromEventList>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d013      	beq.n	800491c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048f4:	4b3f      	ldr	r3, [pc, #252]	; (80049f4 <xQueueGenericSend+0x1f8>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	e00a      	b.n	800491c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800490c:	4b39      	ldr	r3, [pc, #228]	; (80049f4 <xQueueGenericSend+0x1f8>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800491c:	f001 ff02 	bl	8006724 <vPortExitCritical>
				return pdPASS;
 8004920:	2301      	movs	r3, #1
 8004922:	e063      	b.n	80049ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800492a:	f001 fefb 	bl	8006724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800492e:	2300      	movs	r3, #0
 8004930:	e05c      	b.n	80049ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4618      	mov	r0, r3
 800493e:	f001 f809 	bl	8005954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004942:	2301      	movs	r3, #1
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004946:	f001 feed 	bl	8006724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800494a:	f000 fd7b 	bl	8005444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800494e:	f001 feb9 	bl	80066c4 <vPortEnterCritical>
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004958:	b25b      	sxtb	r3, r3
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800495e:	d103      	bne.n	8004968 <xQueueGenericSend+0x16c>
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800496e:	b25b      	sxtb	r3, r3
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004974:	d103      	bne.n	800497e <xQueueGenericSend+0x182>
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800497e:	f001 fed1 	bl	8006724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004982:	1d3a      	adds	r2, r7, #4
 8004984:	f107 0314 	add.w	r3, r7, #20
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fff8 	bl	8005980 <xTaskCheckForTimeOut>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d124      	bne.n	80049e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004998:	f000 faa2 	bl	8004ee0 <prvIsQueueFull>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d018      	beq.n	80049d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	3310      	adds	r3, #16
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ff1e 	bl	80057ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b2:	f000 fa2d 	bl	8004e10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049b6:	f000 fd53 	bl	8005460 <xTaskResumeAll>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f47f af7c 	bne.w	80048ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049c2:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <xQueueGenericSend+0x1f8>)
 80049c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	e772      	b.n	80048ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d6:	f000 fa1b 	bl	8004e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049da:	f000 fd41 	bl	8005460 <xTaskResumeAll>
 80049de:	e76c      	b.n	80048ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e2:	f000 fa15 	bl	8004e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049e6:	f000 fd3b 	bl	8005460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3738      	adds	r7, #56	; 0x38
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	e000ed04 	.word	0xe000ed04

080049f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b090      	sub	sp, #64	; 0x40
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d103      	bne.n	8004a34 <xQueueGenericSendFromISR+0x3c>
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <xQueueGenericSendFromISR+0x40>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <xQueueGenericSendFromISR+0x42>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a50:	bf00      	nop
 8004a52:	e7fe      	b.n	8004a52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d103      	bne.n	8004a62 <xQueueGenericSendFromISR+0x6a>
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <xQueueGenericSendFromISR+0x6e>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <xQueueGenericSendFromISR+0x70>
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	623b      	str	r3, [r7, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a82:	f001 ff01 	bl	8006888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a86:	f3ef 8211 	mrs	r2, BASEPRI
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	61fa      	str	r2, [r7, #28]
 8004a9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d302      	bcc.n	8004ab4 <xQueueGenericSendFromISR+0xbc>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d12f      	bne.n	8004b14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004aca:	f000 f911 	bl	8004cf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ace:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad6:	d112      	bne.n	8004afe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d016      	beq.n	8004b0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae2:	3324      	adds	r3, #36	; 0x24
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fed1 	bl	800588c <xTaskRemoveFromEventList>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e007      	b.n	8004b0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004afe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b02:	3301      	adds	r3, #1
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	b25a      	sxtb	r2, r3
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b12:	e001      	b.n	8004b18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3740      	adds	r7, #64	; 0x40
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	; 0x30
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <xQueueReceive+0x30>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	623b      	str	r3, [r7, #32]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d103      	bne.n	8004b6e <xQueueReceive+0x3e>
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <xQueueReceive+0x42>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <xQueueReceive+0x44>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <xQueueReceive+0x5e>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	61fb      	str	r3, [r7, #28]
}
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b8e:	f001 f83b 	bl	8005c08 <xTaskGetSchedulerState>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <xQueueReceive+0x6e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <xQueueReceive+0x72>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueReceive+0x74>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueReceive+0x8e>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	61bb      	str	r3, [r7, #24]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bbe:	f001 fd81 	bl	80066c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01f      	beq.n	8004c0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bd2:	f000 f8f7 	bl	8004dc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	1e5a      	subs	r2, r3, #1
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00f      	beq.n	8004c06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	3310      	adds	r3, #16
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fe4e 	bl	800588c <xTaskRemoveFromEventList>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bf6:	4b3d      	ldr	r3, [pc, #244]	; (8004cec <xQueueReceive+0x1bc>)
 8004bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c06:	f001 fd8d 	bl	8006724 <vPortExitCritical>
				return pdPASS;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e069      	b.n	8004ce2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d103      	bne.n	8004c1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c14:	f001 fd86 	bl	8006724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e062      	b.n	8004ce2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c22:	f107 0310 	add.w	r3, r7, #16
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fe94 	bl	8005954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c30:	f001 fd78 	bl	8006724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c34:	f000 fc06 	bl	8005444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c38:	f001 fd44 	bl	80066c4 <vPortEnterCritical>
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c48:	d103      	bne.n	8004c52 <xQueueReceive+0x122>
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c58:	b25b      	sxtb	r3, r3
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c5e:	d103      	bne.n	8004c68 <xQueueReceive+0x138>
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c68:	f001 fd5c 	bl	8006724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c6c:	1d3a      	adds	r2, r7, #4
 8004c6e:	f107 0310 	add.w	r3, r7, #16
 8004c72:	4611      	mov	r1, r2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fe83 	bl	8005980 <xTaskCheckForTimeOut>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d123      	bne.n	8004cc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c82:	f000 f917 	bl	8004eb4 <prvIsQueueEmpty>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d017      	beq.n	8004cbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	3324      	adds	r3, #36	; 0x24
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fda9 	bl	80057ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c9c:	f000 f8b8 	bl	8004e10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ca0:	f000 fbde 	bl	8005460 <xTaskResumeAll>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d189      	bne.n	8004bbe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004caa:	4b10      	ldr	r3, [pc, #64]	; (8004cec <xQueueReceive+0x1bc>)
 8004cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	e780      	b.n	8004bbe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cbe:	f000 f8a7 	bl	8004e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cc2:	f000 fbcd 	bl	8005460 <xTaskResumeAll>
 8004cc6:	e77a      	b.n	8004bbe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cca:	f000 f8a1 	bl	8004e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cce:	f000 fbc7 	bl	8005460 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd4:	f000 f8ee 	bl	8004eb4 <prvIsQueueEmpty>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f43f af6f 	beq.w	8004bbe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ce0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3730      	adds	r7, #48	; 0x30
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	e000ed04 	.word	0xe000ed04

08004cf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10d      	bne.n	8004d2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d14d      	bne.n	8004db2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 ff92 	bl	8005c44 <xTaskPriorityDisinherit>
 8004d20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	e043      	b.n	8004db2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d119      	bne.n	8004d64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6858      	ldr	r0, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	461a      	mov	r2, r3
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	f002 f83c 	bl	8006db8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	441a      	add	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d32b      	bcc.n	8004db2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	e026      	b.n	8004db2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68d8      	ldr	r0, [r3, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	f002 f822 	bl	8006db8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	425b      	negs	r3, r3
 8004d7e:	441a      	add	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d207      	bcs.n	8004da0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	425b      	negs	r3, r3
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d105      	bne.n	8004db2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dba:	697b      	ldr	r3, [r7, #20]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d018      	beq.n	8004e08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	441a      	add	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d303      	bcc.n	8004df8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68d9      	ldr	r1, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	461a      	mov	r2, r3
 8004e02:	6838      	ldr	r0, [r7, #0]
 8004e04:	f001 ffd8 	bl	8006db8 <memcpy>
	}
}
 8004e08:	bf00      	nop
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e18:	f001 fc54 	bl	80066c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e24:	e011      	b.n	8004e4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d012      	beq.n	8004e54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3324      	adds	r3, #36	; 0x24
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fd2a 	bl	800588c <xTaskRemoveFromEventList>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e3e:	f000 fe01 	bl	8005a44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	dce9      	bgt.n	8004e26 <prvUnlockQueue+0x16>
 8004e52:	e000      	b.n	8004e56 <prvUnlockQueue+0x46>
					break;
 8004e54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	22ff      	movs	r2, #255	; 0xff
 8004e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e5e:	f001 fc61 	bl	8006724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e62:	f001 fc2f 	bl	80066c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e6e:	e011      	b.n	8004e94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d012      	beq.n	8004e9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3310      	adds	r3, #16
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fd05 	bl	800588c <xTaskRemoveFromEventList>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e88:	f000 fddc 	bl	8005a44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e8c:	7bbb      	ldrb	r3, [r7, #14]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	dce9      	bgt.n	8004e70 <prvUnlockQueue+0x60>
 8004e9c:	e000      	b.n	8004ea0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	22ff      	movs	r2, #255	; 0xff
 8004ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ea8:	f001 fc3c 	bl	8006724 <vPortExitCritical>
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ebc:	f001 fc02 	bl	80066c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	e001      	b.n	8004ed2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ed2:	f001 fc27 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ee8:	f001 fbec 	bl	80066c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d102      	bne.n	8004efe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e001      	b.n	8004f02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f02:	f001 fc0f 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8004f06:	68fb      	ldr	r3, [r7, #12]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e014      	b.n	8004f4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f20:	4a0f      	ldr	r2, [pc, #60]	; (8004f60 <vQueueAddToRegistry+0x50>)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f2c:	490c      	ldr	r1, [pc, #48]	; (8004f60 <vQueueAddToRegistry+0x50>)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <vQueueAddToRegistry+0x50>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f42:	e006      	b.n	8004f52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b07      	cmp	r3, #7
 8004f4e:	d9e7      	bls.n	8004f20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20001b00 	.word	0x20001b00

08004f64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f74:	f001 fba6 	bl	80066c4 <vPortEnterCritical>
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f7e:	b25b      	sxtb	r3, r3
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f84:	d103      	bne.n	8004f8e <vQueueWaitForMessageRestricted+0x2a>
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f94:	b25b      	sxtb	r3, r3
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9a:	d103      	bne.n	8004fa4 <vQueueWaitForMessageRestricted+0x40>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa4:	f001 fbbe 	bl	8006724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3324      	adds	r3, #36	; 0x24
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fc3b 	bl	8005834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004fbe:	6978      	ldr	r0, [r7, #20]
 8004fc0:	f7ff ff26 	bl	8004e10 <prvUnlockQueue>
	}
 8004fc4:	bf00      	nop
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08e      	sub	sp, #56	; 0x38
 8004fd0:	af04      	add	r7, sp, #16
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	623b      	str	r3, [r7, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <xTaskCreateStatic+0x46>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	61fb      	str	r3, [r7, #28]
}
 800500e:	bf00      	nop
 8005010:	e7fe      	b.n	8005010 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005012:	235c      	movs	r3, #92	; 0x5c
 8005014:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b5c      	cmp	r3, #92	; 0x5c
 800501a:	d00a      	beq.n	8005032 <xTaskCreateStatic+0x66>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	61bb      	str	r3, [r7, #24]
}
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005032:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01e      	beq.n	8005078 <xTaskCreateStatic+0xac>
 800503a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01b      	beq.n	8005078 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005048:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	2202      	movs	r2, #2
 800504e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005052:	2300      	movs	r3, #0
 8005054:	9303      	str	r3, [sp, #12]
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	9302      	str	r3, [sp, #8]
 800505a:	f107 0314 	add.w	r3, r7, #20
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f850 	bl	8005110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005072:	f000 f8dd 	bl	8005230 <prvAddNewTaskToReadyList>
 8005076:	e001      	b.n	800507c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800507c:	697b      	ldr	r3, [r7, #20]
	}
 800507e:	4618      	mov	r0, r3
 8005080:	3728      	adds	r7, #40	; 0x28
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005086:	b580      	push	{r7, lr}
 8005088:	b08c      	sub	sp, #48	; 0x30
 800508a:	af04      	add	r7, sp, #16
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	603b      	str	r3, [r7, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4618      	mov	r0, r3
 800509c:	f001 fc34 	bl	8006908 <pvPortMalloc>
 80050a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00e      	beq.n	80050c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050a8:	205c      	movs	r0, #92	; 0x5c
 80050aa:	f001 fc2d 	bl	8006908 <pvPortMalloc>
 80050ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
 80050bc:	e005      	b.n	80050ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050be:	6978      	ldr	r0, [r7, #20]
 80050c0:	f001 fcee 	bl	8006aa0 <vPortFree>
 80050c4:	e001      	b.n	80050ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d017      	beq.n	8005100 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050d8:	88fa      	ldrh	r2, [r7, #6]
 80050da:	2300      	movs	r3, #0
 80050dc:	9303      	str	r3, [sp, #12]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	9302      	str	r3, [sp, #8]
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f80e 	bl	8005110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050f4:	69f8      	ldr	r0, [r7, #28]
 80050f6:	f000 f89b 	bl	8005230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050fa:	2301      	movs	r3, #1
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	e002      	b.n	8005106 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005104:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005106:	69bb      	ldr	r3, [r7, #24]
	}
 8005108:	4618      	mov	r0, r3
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	461a      	mov	r2, r3
 8005128:	21a5      	movs	r1, #165	; 0xa5
 800512a:	f001 fe53 	bl	8006dd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005138:	3b01      	subs	r3, #1
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f023 0307 	bic.w	r3, r3, #7
 8005146:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	617b      	str	r3, [r7, #20]
}
 8005164:	bf00      	nop
 8005166:	e7fe      	b.n	8005166 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01f      	beq.n	80051ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	e012      	b.n	800519a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	7819      	ldrb	r1, [r3, #0]
 800517c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4413      	add	r3, r2
 8005182:	3334      	adds	r3, #52	; 0x34
 8005184:	460a      	mov	r2, r1
 8005186:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d006      	beq.n	80051a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3301      	adds	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	2b0f      	cmp	r3, #15
 800519e:	d9e9      	bls.n	8005174 <prvInitialiseNewTask+0x64>
 80051a0:	e000      	b.n	80051a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80051a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051ac:	e003      	b.n	80051b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	2b37      	cmp	r3, #55	; 0x37
 80051ba:	d901      	bls.n	80051c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051bc:	2337      	movs	r3, #55	; 0x37
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	2200      	movs	r2, #0
 80051d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	3304      	adds	r3, #4
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff f978 	bl	80044cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	3318      	adds	r3, #24
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff f973 	bl	80044cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	2200      	movs	r2, #0
 8005200:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	68f9      	ldr	r1, [r7, #12]
 800520e:	69b8      	ldr	r0, [r7, #24]
 8005210:	f001 f928 	bl	8006464 <pxPortInitialiseStack>
 8005214:	4602      	mov	r2, r0
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005226:	bf00      	nop
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005238:	f001 fa44 	bl	80066c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800523c:	4b2d      	ldr	r3, [pc, #180]	; (80052f4 <prvAddNewTaskToReadyList+0xc4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <prvAddNewTaskToReadyList+0xc4>)
 8005244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005246:	4b2c      	ldr	r3, [pc, #176]	; (80052f8 <prvAddNewTaskToReadyList+0xc8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800524e:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <prvAddNewTaskToReadyList+0xc8>)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005254:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <prvAddNewTaskToReadyList+0xc4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d110      	bne.n	800527e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800525c:	f000 fc16 	bl	8005a8c <prvInitialiseTaskLists>
 8005260:	e00d      	b.n	800527e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <prvAddNewTaskToReadyList+0xcc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d109      	bne.n	800527e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800526a:	4b23      	ldr	r3, [pc, #140]	; (80052f8 <prvAddNewTaskToReadyList+0xc8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	429a      	cmp	r2, r3
 8005276:	d802      	bhi.n	800527e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005278:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <prvAddNewTaskToReadyList+0xc8>)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800527e:	4b20      	ldr	r3, [pc, #128]	; (8005300 <prvAddNewTaskToReadyList+0xd0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <prvAddNewTaskToReadyList+0xd0>)
 8005286:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005288:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <prvAddNewTaskToReadyList+0xd0>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <prvAddNewTaskToReadyList+0xd4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d903      	bls.n	80052a4 <prvAddNewTaskToReadyList+0x74>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	4a18      	ldr	r2, [pc, #96]	; (8005304 <prvAddNewTaskToReadyList+0xd4>)
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4a15      	ldr	r2, [pc, #84]	; (8005308 <prvAddNewTaskToReadyList+0xd8>)
 80052b2:	441a      	add	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7ff f913 	bl	80044e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052c0:	f001 fa30 	bl	8006724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052c4:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <prvAddNewTaskToReadyList+0xcc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00e      	beq.n	80052ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <prvAddNewTaskToReadyList+0xc8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d207      	bcs.n	80052ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <prvAddNewTaskToReadyList+0xdc>)
 80052dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000ce0 	.word	0x20000ce0
 80052f8:	2000080c 	.word	0x2000080c
 80052fc:	20000cec 	.word	0x20000cec
 8005300:	20000cfc 	.word	0x20000cfc
 8005304:	20000ce8 	.word	0x20000ce8
 8005308:	20000810 	.word	0x20000810
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d017      	beq.n	8005352 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005322:	4b13      	ldr	r3, [pc, #76]	; (8005370 <vTaskDelay+0x60>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <vTaskDelay+0x30>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	60bb      	str	r3, [r7, #8]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005340:	f000 f880 	bl	8005444 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005344:	2100      	movs	r1, #0
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fcea 	bl	8005d20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800534c:	f000 f888 	bl	8005460 <xTaskResumeAll>
 8005350:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <vTaskDelay+0x64>)
 800535a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000d08 	.word	0x20000d08
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005386:	463a      	mov	r2, r7
 8005388:	1d39      	adds	r1, r7, #4
 800538a:	f107 0308 	add.w	r3, r7, #8
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff f848 	bl	8004424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	9202      	str	r2, [sp, #8]
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	2300      	movs	r3, #0
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	2300      	movs	r3, #0
 80053a4:	460a      	mov	r2, r1
 80053a6:	4921      	ldr	r1, [pc, #132]	; (800542c <vTaskStartScheduler+0xb4>)
 80053a8:	4821      	ldr	r0, [pc, #132]	; (8005430 <vTaskStartScheduler+0xb8>)
 80053aa:	f7ff fe0f 	bl	8004fcc <xTaskCreateStatic>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4a20      	ldr	r2, [pc, #128]	; (8005434 <vTaskStartScheduler+0xbc>)
 80053b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053b4:	4b1f      	ldr	r3, [pc, #124]	; (8005434 <vTaskStartScheduler+0xbc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053bc:	2301      	movs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e001      	b.n	80053c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d102      	bne.n	80053d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053cc:	f000 fcfc 	bl	8005dc8 <xTimerCreateTimerTask>
 80053d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d116      	bne.n	8005406 <vTaskStartScheduler+0x8e>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	613b      	str	r3, [r7, #16]
}
 80053ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053ec:	4b12      	ldr	r3, [pc, #72]	; (8005438 <vTaskStartScheduler+0xc0>)
 80053ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <vTaskStartScheduler+0xc4>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053fa:	4b11      	ldr	r3, [pc, #68]	; (8005440 <vTaskStartScheduler+0xc8>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005400:	f001 f8be 	bl	8006580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005404:	e00e      	b.n	8005424 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800540c:	d10a      	bne.n	8005424 <vTaskStartScheduler+0xac>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60fb      	str	r3, [r7, #12]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <vTaskStartScheduler+0xaa>
}
 8005424:	bf00      	nop
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	080071b0 	.word	0x080071b0
 8005430:	08005a5d 	.word	0x08005a5d
 8005434:	20000d04 	.word	0x20000d04
 8005438:	20000d00 	.word	0x20000d00
 800543c:	20000cec 	.word	0x20000cec
 8005440:	20000ce4 	.word	0x20000ce4

08005444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005448:	4b04      	ldr	r3, [pc, #16]	; (800545c <vTaskSuspendAll+0x18>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3301      	adds	r3, #1
 800544e:	4a03      	ldr	r2, [pc, #12]	; (800545c <vTaskSuspendAll+0x18>)
 8005450:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005452:	bf00      	nop
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	20000d08 	.word	0x20000d08

08005460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800546e:	4b42      	ldr	r3, [pc, #264]	; (8005578 <xTaskResumeAll+0x118>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <xTaskResumeAll+0x2c>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	603b      	str	r3, [r7, #0]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800548c:	f001 f91a 	bl	80066c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005490:	4b39      	ldr	r3, [pc, #228]	; (8005578 <xTaskResumeAll+0x118>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3b01      	subs	r3, #1
 8005496:	4a38      	ldr	r2, [pc, #224]	; (8005578 <xTaskResumeAll+0x118>)
 8005498:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549a:	4b37      	ldr	r3, [pc, #220]	; (8005578 <xTaskResumeAll+0x118>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d162      	bne.n	8005568 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054a2:	4b36      	ldr	r3, [pc, #216]	; (800557c <xTaskResumeAll+0x11c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d05e      	beq.n	8005568 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054aa:	e02f      	b.n	800550c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ac:	4b34      	ldr	r3, [pc, #208]	; (8005580 <xTaskResumeAll+0x120>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3318      	adds	r3, #24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff f871 	bl	80045a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff f86c 	bl	80045a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	4b2d      	ldr	r3, [pc, #180]	; (8005584 <xTaskResumeAll+0x124>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d903      	bls.n	80054dc <xTaskResumeAll+0x7c>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	4a2a      	ldr	r2, [pc, #168]	; (8005584 <xTaskResumeAll+0x124>)
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4a27      	ldr	r2, [pc, #156]	; (8005588 <xTaskResumeAll+0x128>)
 80054ea:	441a      	add	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f7fe fff7 	bl	80044e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fc:	4b23      	ldr	r3, [pc, #140]	; (800558c <xTaskResumeAll+0x12c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005506:	4b22      	ldr	r3, [pc, #136]	; (8005590 <xTaskResumeAll+0x130>)
 8005508:	2201      	movs	r2, #1
 800550a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800550c:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <xTaskResumeAll+0x120>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1cb      	bne.n	80054ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800551a:	f000 fb55 	bl	8005bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800551e:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <xTaskResumeAll+0x134>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d010      	beq.n	800554c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800552a:	f000 f847 	bl	80055bc <xTaskIncrementTick>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005534:	4b16      	ldr	r3, [pc, #88]	; (8005590 <xTaskResumeAll+0x130>)
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3b01      	subs	r3, #1
 800553e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f1      	bne.n	800552a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <xTaskResumeAll+0x134>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800554c:	4b10      	ldr	r3, [pc, #64]	; (8005590 <xTaskResumeAll+0x130>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d009      	beq.n	8005568 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <xTaskResumeAll+0x138>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005568:	f001 f8dc 	bl	8006724 <vPortExitCritical>

	return xAlreadyYielded;
 800556c:	68bb      	ldr	r3, [r7, #8]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000d08 	.word	0x20000d08
 800557c:	20000ce0 	.word	0x20000ce0
 8005580:	20000ca0 	.word	0x20000ca0
 8005584:	20000ce8 	.word	0x20000ce8
 8005588:	20000810 	.word	0x20000810
 800558c:	2000080c 	.word	0x2000080c
 8005590:	20000cf4 	.word	0x20000cf4
 8005594:	20000cf0 	.word	0x20000cf0
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <xTaskGetTickCount+0x1c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055a8:	687b      	ldr	r3, [r7, #4]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	20000ce4 	.word	0x20000ce4

080055bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055c6:	4b4f      	ldr	r3, [pc, #316]	; (8005704 <xTaskIncrementTick+0x148>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f040 808f 	bne.w	80056ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055d0:	4b4d      	ldr	r3, [pc, #308]	; (8005708 <xTaskIncrementTick+0x14c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3301      	adds	r3, #1
 80055d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055d8:	4a4b      	ldr	r2, [pc, #300]	; (8005708 <xTaskIncrementTick+0x14c>)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d120      	bne.n	8005626 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055e4:	4b49      	ldr	r3, [pc, #292]	; (800570c <xTaskIncrementTick+0x150>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <xTaskIncrementTick+0x48>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	603b      	str	r3, [r7, #0]
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <xTaskIncrementTick+0x46>
 8005604:	4b41      	ldr	r3, [pc, #260]	; (800570c <xTaskIncrementTick+0x150>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	4b41      	ldr	r3, [pc, #260]	; (8005710 <xTaskIncrementTick+0x154>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a3f      	ldr	r2, [pc, #252]	; (800570c <xTaskIncrementTick+0x150>)
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	4a3f      	ldr	r2, [pc, #252]	; (8005710 <xTaskIncrementTick+0x154>)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	4b3e      	ldr	r3, [pc, #248]	; (8005714 <xTaskIncrementTick+0x158>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3301      	adds	r3, #1
 800561e:	4a3d      	ldr	r2, [pc, #244]	; (8005714 <xTaskIncrementTick+0x158>)
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	f000 fad1 	bl	8005bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005626:	4b3c      	ldr	r3, [pc, #240]	; (8005718 <xTaskIncrementTick+0x15c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	429a      	cmp	r2, r3
 800562e:	d349      	bcc.n	80056c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005630:	4b36      	ldr	r3, [pc, #216]	; (800570c <xTaskIncrementTick+0x150>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d104      	bne.n	8005644 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800563a:	4b37      	ldr	r3, [pc, #220]	; (8005718 <xTaskIncrementTick+0x15c>)
 800563c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005640:	601a      	str	r2, [r3, #0]
					break;
 8005642:	e03f      	b.n	80056c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005644:	4b31      	ldr	r3, [pc, #196]	; (800570c <xTaskIncrementTick+0x150>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	429a      	cmp	r2, r3
 800565a:	d203      	bcs.n	8005664 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800565c:	4a2e      	ldr	r2, [pc, #184]	; (8005718 <xTaskIncrementTick+0x15c>)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005662:	e02f      	b.n	80056c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	3304      	adds	r3, #4
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe ff99 	bl	80045a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d004      	beq.n	8005680 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	3318      	adds	r3, #24
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe ff90 	bl	80045a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	4b25      	ldr	r3, [pc, #148]	; (800571c <xTaskIncrementTick+0x160>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d903      	bls.n	8005694 <xTaskIncrementTick+0xd8>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	4a22      	ldr	r2, [pc, #136]	; (800571c <xTaskIncrementTick+0x160>)
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4a1f      	ldr	r2, [pc, #124]	; (8005720 <xTaskIncrementTick+0x164>)
 80056a2:	441a      	add	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f7fe ff1b 	bl	80044e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <xTaskIncrementTick+0x168>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d3b8      	bcc.n	8005630 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80056be:	2301      	movs	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c2:	e7b5      	b.n	8005630 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056c4:	4b17      	ldr	r3, [pc, #92]	; (8005724 <xTaskIncrementTick+0x168>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	4915      	ldr	r1, [pc, #84]	; (8005720 <xTaskIncrementTick+0x164>)
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d901      	bls.n	80056e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80056dc:	2301      	movs	r3, #1
 80056de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80056e0:	4b11      	ldr	r3, [pc, #68]	; (8005728 <xTaskIncrementTick+0x16c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e004      	b.n	80056f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056ee:	4b0f      	ldr	r3, [pc, #60]	; (800572c <xTaskIncrementTick+0x170>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3301      	adds	r3, #1
 80056f4:	4a0d      	ldr	r2, [pc, #52]	; (800572c <xTaskIncrementTick+0x170>)
 80056f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056f8:	697b      	ldr	r3, [r7, #20]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000d08 	.word	0x20000d08
 8005708:	20000ce4 	.word	0x20000ce4
 800570c:	20000c98 	.word	0x20000c98
 8005710:	20000c9c 	.word	0x20000c9c
 8005714:	20000cf8 	.word	0x20000cf8
 8005718:	20000d00 	.word	0x20000d00
 800571c:	20000ce8 	.word	0x20000ce8
 8005720:	20000810 	.word	0x20000810
 8005724:	2000080c 	.word	0x2000080c
 8005728:	20000cf4 	.word	0x20000cf4
 800572c:	20000cf0 	.word	0x20000cf0

08005730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005736:	4b28      	ldr	r3, [pc, #160]	; (80057d8 <vTaskSwitchContext+0xa8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800573e:	4b27      	ldr	r3, [pc, #156]	; (80057dc <vTaskSwitchContext+0xac>)
 8005740:	2201      	movs	r2, #1
 8005742:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005744:	e041      	b.n	80057ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005746:	4b25      	ldr	r3, [pc, #148]	; (80057dc <vTaskSwitchContext+0xac>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800574c:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <vTaskSwitchContext+0xb0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	e010      	b.n	8005776 <vTaskSwitchContext+0x46>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <vTaskSwitchContext+0x40>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	607b      	str	r3, [r7, #4]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <vTaskSwitchContext+0x3e>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3b01      	subs	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	491b      	ldr	r1, [pc, #108]	; (80057e4 <vTaskSwitchContext+0xb4>)
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0e4      	beq.n	8005754 <vTaskSwitchContext+0x24>
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <vTaskSwitchContext+0xb4>)
 8005796:	4413      	add	r3, r2
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	3308      	adds	r3, #8
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d104      	bne.n	80057ba <vTaskSwitchContext+0x8a>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4a09      	ldr	r2, [pc, #36]	; (80057e8 <vTaskSwitchContext+0xb8>)
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	4a06      	ldr	r2, [pc, #24]	; (80057e0 <vTaskSwitchContext+0xb0>)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6013      	str	r3, [r2, #0]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000d08 	.word	0x20000d08
 80057dc:	20000cf4 	.word	0x20000cf4
 80057e0:	20000ce8 	.word	0x20000ce8
 80057e4:	20000810 	.word	0x20000810
 80057e8:	2000080c 	.word	0x2000080c

080057ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	60fb      	str	r3, [r7, #12]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <vTaskPlaceOnEventList+0x44>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3318      	adds	r3, #24
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fe fe87 	bl	800452e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005820:	2101      	movs	r1, #1
 8005822:	6838      	ldr	r0, [r7, #0]
 8005824:	f000 fa7c 	bl	8005d20 <prvAddCurrentTaskToDelayedList>
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	2000080c 	.word	0x2000080c

08005834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	617b      	str	r3, [r7, #20]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <vTaskPlaceOnEventListRestricted+0x54>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3318      	adds	r3, #24
 8005862:	4619      	mov	r1, r3
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7fe fe3e 	bl	80044e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005874:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	68b8      	ldr	r0, [r7, #8]
 800587a:	f000 fa51 	bl	8005d20 <prvAddCurrentTaskToDelayedList>
	}
 800587e:	bf00      	nop
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	2000080c 	.word	0x2000080c

0800588c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	60fb      	str	r3, [r7, #12]
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	3318      	adds	r3, #24
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fe fe6f 	bl	80045a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c2:	4b1e      	ldr	r3, [pc, #120]	; (800593c <xTaskRemoveFromEventList+0xb0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d11d      	bne.n	8005906 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3304      	adds	r3, #4
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fe66 	bl	80045a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	4b19      	ldr	r3, [pc, #100]	; (8005940 <xTaskRemoveFromEventList+0xb4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d903      	bls.n	80058e8 <xTaskRemoveFromEventList+0x5c>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a16      	ldr	r2, [pc, #88]	; (8005940 <xTaskRemoveFromEventList+0xb4>)
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <xTaskRemoveFromEventList+0xb8>)
 80058f6:	441a      	add	r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f7fe fdf1 	bl	80044e6 <vListInsertEnd>
 8005904:	e005      	b.n	8005912 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3318      	adds	r3, #24
 800590a:	4619      	mov	r1, r3
 800590c:	480e      	ldr	r0, [pc, #56]	; (8005948 <xTaskRemoveFromEventList+0xbc>)
 800590e:	f7fe fdea 	bl	80044e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005916:	4b0d      	ldr	r3, [pc, #52]	; (800594c <xTaskRemoveFromEventList+0xc0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	429a      	cmp	r2, r3
 800591e:	d905      	bls.n	800592c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <xTaskRemoveFromEventList+0xc4>)
 8005926:	2201      	movs	r2, #1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e001      	b.n	8005930 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005930:	697b      	ldr	r3, [r7, #20]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000d08 	.word	0x20000d08
 8005940:	20000ce8 	.word	0x20000ce8
 8005944:	20000810 	.word	0x20000810
 8005948:	20000ca0 	.word	0x20000ca0
 800594c:	2000080c 	.word	0x2000080c
 8005950:	20000cf4 	.word	0x20000cf4

08005954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <vTaskInternalSetTimeOutState+0x24>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <vTaskInternalSetTimeOutState+0x28>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	605a      	str	r2, [r3, #4]
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	20000cf8 	.word	0x20000cf8
 800597c:	20000ce4 	.word	0x20000ce4

08005980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	613b      	str	r3, [r7, #16]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	60fb      	str	r3, [r7, #12]
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80059c2:	f000 fe7f 	bl	80066c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059c6:	4b1d      	ldr	r3, [pc, #116]	; (8005a3c <xTaskCheckForTimeOut+0xbc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059de:	d102      	bne.n	80059e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	e023      	b.n	8005a2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <xTaskCheckForTimeOut+0xc0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d007      	beq.n	8005a02 <xTaskCheckForTimeOut+0x82>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	e015      	b.n	8005a2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d20b      	bcs.n	8005a24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad2      	subs	r2, r2, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff ff9b 	bl	8005954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	e004      	b.n	8005a2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a2e:	f000 fe79 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8005a32:	69fb      	ldr	r3, [r7, #28]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3720      	adds	r7, #32
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000ce4 	.word	0x20000ce4
 8005a40:	20000cf8 	.word	0x20000cf8

08005a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a48:	4b03      	ldr	r3, [pc, #12]	; (8005a58 <vTaskMissedYield+0x14>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
}
 8005a4e:	bf00      	nop
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	20000cf4 	.word	0x20000cf4

08005a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a64:	f000 f852 	bl	8005b0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <prvIdleTask+0x28>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d9f9      	bls.n	8005a64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <prvIdleTask+0x2c>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a80:	e7f0      	b.n	8005a64 <prvIdleTask+0x8>
 8005a82:	bf00      	nop
 8005a84:	20000810 	.word	0x20000810
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a92:	2300      	movs	r3, #0
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	e00c      	b.n	8005ab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4a12      	ldr	r2, [pc, #72]	; (8005aec <prvInitialiseTaskLists+0x60>)
 8005aa4:	4413      	add	r3, r2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fcf0 	bl	800448c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b37      	cmp	r3, #55	; 0x37
 8005ab6:	d9ef      	bls.n	8005a98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ab8:	480d      	ldr	r0, [pc, #52]	; (8005af0 <prvInitialiseTaskLists+0x64>)
 8005aba:	f7fe fce7 	bl	800448c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005abe:	480d      	ldr	r0, [pc, #52]	; (8005af4 <prvInitialiseTaskLists+0x68>)
 8005ac0:	f7fe fce4 	bl	800448c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ac4:	480c      	ldr	r0, [pc, #48]	; (8005af8 <prvInitialiseTaskLists+0x6c>)
 8005ac6:	f7fe fce1 	bl	800448c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005aca:	480c      	ldr	r0, [pc, #48]	; (8005afc <prvInitialiseTaskLists+0x70>)
 8005acc:	f7fe fcde 	bl	800448c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ad0:	480b      	ldr	r0, [pc, #44]	; (8005b00 <prvInitialiseTaskLists+0x74>)
 8005ad2:	f7fe fcdb 	bl	800448c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <prvInitialiseTaskLists+0x78>)
 8005ad8:	4a05      	ldr	r2, [pc, #20]	; (8005af0 <prvInitialiseTaskLists+0x64>)
 8005ada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <prvInitialiseTaskLists+0x7c>)
 8005ade:	4a05      	ldr	r2, [pc, #20]	; (8005af4 <prvInitialiseTaskLists+0x68>)
 8005ae0:	601a      	str	r2, [r3, #0]
}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000810 	.word	0x20000810
 8005af0:	20000c70 	.word	0x20000c70
 8005af4:	20000c84 	.word	0x20000c84
 8005af8:	20000ca0 	.word	0x20000ca0
 8005afc:	20000cb4 	.word	0x20000cb4
 8005b00:	20000ccc 	.word	0x20000ccc
 8005b04:	20000c98 	.word	0x20000c98
 8005b08:	20000c9c 	.word	0x20000c9c

08005b0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b12:	e019      	b.n	8005b48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b14:	f000 fdd6 	bl	80066c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b18:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <prvCheckTasksWaitingTermination+0x50>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fe fd3b 	bl	80045a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <prvCheckTasksWaitingTermination+0x54>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	4a0b      	ldr	r2, [pc, #44]	; (8005b60 <prvCheckTasksWaitingTermination+0x54>)
 8005b32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <prvCheckTasksWaitingTermination+0x58>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	4a0a      	ldr	r2, [pc, #40]	; (8005b64 <prvCheckTasksWaitingTermination+0x58>)
 8005b3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b3e:	f000 fdf1 	bl	8006724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f810 	bl	8005b68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <prvCheckTasksWaitingTermination+0x58>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e1      	bne.n	8005b14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000cb4 	.word	0x20000cb4
 8005b60:	20000ce0 	.word	0x20000ce0
 8005b64:	20000cc8 	.word	0x20000cc8

08005b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d108      	bne.n	8005b8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 ff8e 	bl	8006aa0 <vPortFree>
				vPortFree( pxTCB );
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 ff8b 	bl	8006aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b8a:	e018      	b.n	8005bbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d103      	bne.n	8005b9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 ff82 	bl	8006aa0 <vPortFree>
	}
 8005b9c:	e00f      	b.n	8005bbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d00a      	beq.n	8005bbe <prvDeleteTCB+0x56>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	60fb      	str	r3, [r7, #12]
}
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <prvDeleteTCB+0x54>
	}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bce:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <prvResetNextTaskUnblockTime+0x38>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d104      	bne.n	8005be2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <prvResetNextTaskUnblockTime+0x3c>)
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005be0:	e008      	b.n	8005bf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be2:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <prvResetNextTaskUnblockTime+0x38>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a04      	ldr	r2, [pc, #16]	; (8005c04 <prvResetNextTaskUnblockTime+0x3c>)
 8005bf2:	6013      	str	r3, [r2, #0]
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	20000c98 	.word	0x20000c98
 8005c04:	20000d00 	.word	0x20000d00

08005c08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <xTaskGetSchedulerState+0x34>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d102      	bne.n	8005c1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c16:	2301      	movs	r3, #1
 8005c18:	607b      	str	r3, [r7, #4]
 8005c1a:	e008      	b.n	8005c2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c1c:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <xTaskGetSchedulerState+0x38>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c24:	2302      	movs	r3, #2
 8005c26:	607b      	str	r3, [r7, #4]
 8005c28:	e001      	b.n	8005c2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c2e:	687b      	ldr	r3, [r7, #4]
	}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20000cec 	.word	0x20000cec
 8005c40:	20000d08 	.word	0x20000d08

08005c44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d056      	beq.n	8005d08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c5a:	4b2e      	ldr	r3, [pc, #184]	; (8005d14 <xTaskPriorityDisinherit+0xd0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d00a      	beq.n	8005c7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	60fb      	str	r3, [r7, #12]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	60bb      	str	r3, [r7, #8]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9c:	1e5a      	subs	r2, r3, #1
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d02c      	beq.n	8005d08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d128      	bne.n	8005d08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fc70 	bl	80045a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <xTaskPriorityDisinherit+0xd4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d903      	bls.n	8005ce8 <xTaskPriorityDisinherit+0xa4>
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	4a0c      	ldr	r2, [pc, #48]	; (8005d18 <xTaskPriorityDisinherit+0xd4>)
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <xTaskPriorityDisinherit+0xd8>)
 8005cf6:	441a      	add	r2, r3
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	f7fe fbf1 	bl	80044e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d04:	2301      	movs	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d08:	697b      	ldr	r3, [r7, #20]
	}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	2000080c 	.word	0x2000080c
 8005d18:	20000ce8 	.word	0x20000ce8
 8005d1c:	20000810 	.word	0x20000810

08005d20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d2a:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d30:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fc32 	bl	80045a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d42:	d10a      	bne.n	8005d5a <prvAddCurrentTaskToDelayedList+0x3a>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d4a:	4b1a      	ldr	r3, [pc, #104]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4819      	ldr	r0, [pc, #100]	; (8005db8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d54:	f7fe fbc7 	bl	80044e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d58:	e026      	b.n	8005da8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d62:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d209      	bcs.n	8005d86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f7fe fbd5 	bl	800452e <vListInsert>
}
 8005d84:	e010      	b.n	8005da8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d86:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f7fe fbcb 	bl	800452e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d202      	bcs.n	8005da8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005da2:	4a08      	ldr	r2, [pc, #32]	; (8005dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6013      	str	r3, [r2, #0]
}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000ce4 	.word	0x20000ce4
 8005db4:	2000080c 	.word	0x2000080c
 8005db8:	20000ccc 	.word	0x20000ccc
 8005dbc:	20000c9c 	.word	0x20000c9c
 8005dc0:	20000c98 	.word	0x20000c98
 8005dc4:	20000d00 	.word	0x20000d00

08005dc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dd2:	f000 fb07 	bl	80063e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dd6:	4b1c      	ldr	r3, [pc, #112]	; (8005e48 <xTimerCreateTimerTask+0x80>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d021      	beq.n	8005e22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005de6:	1d3a      	adds	r2, r7, #4
 8005de8:	f107 0108 	add.w	r1, r7, #8
 8005dec:	f107 030c 	add.w	r3, r7, #12
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fe fb31 	bl	8004458 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	9202      	str	r2, [sp, #8]
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	2302      	movs	r3, #2
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2300      	movs	r3, #0
 8005e06:	460a      	mov	r2, r1
 8005e08:	4910      	ldr	r1, [pc, #64]	; (8005e4c <xTimerCreateTimerTask+0x84>)
 8005e0a:	4811      	ldr	r0, [pc, #68]	; (8005e50 <xTimerCreateTimerTask+0x88>)
 8005e0c:	f7ff f8de 	bl	8004fcc <xTaskCreateStatic>
 8005e10:	4603      	mov	r3, r0
 8005e12:	4a10      	ldr	r2, [pc, #64]	; (8005e54 <xTimerCreateTimerTask+0x8c>)
 8005e14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e16:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <xTimerCreateTimerTask+0x8c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	613b      	str	r3, [r7, #16]
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e3e:	697b      	ldr	r3, [r7, #20]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000d3c 	.word	0x20000d3c
 8005e4c:	080071b8 	.word	0x080071b8
 8005e50:	08005f8d 	.word	0x08005f8d
 8005e54:	20000d40 	.word	0x20000d40

08005e58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	623b      	str	r3, [r7, #32]
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e86:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <xTimerGenericCommand+0x98>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d02a      	beq.n	8005ee4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b05      	cmp	r3, #5
 8005e9e:	dc18      	bgt.n	8005ed2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ea0:	f7ff feb2 	bl	8005c08 <xTaskGetSchedulerState>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d109      	bne.n	8005ebe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005eaa:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <xTimerGenericCommand+0x98>)
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	f107 0110 	add.w	r1, r7, #16
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb6:	f7fe fca1 	bl	80047fc <xQueueGenericSend>
 8005eba:	6278      	str	r0, [r7, #36]	; 0x24
 8005ebc:	e012      	b.n	8005ee4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <xTimerGenericCommand+0x98>)
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	f107 0110 	add.w	r1, r7, #16
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f7fe fc97 	bl	80047fc <xQueueGenericSend>
 8005ece:	6278      	str	r0, [r7, #36]	; 0x24
 8005ed0:	e008      	b.n	8005ee4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ed2:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <xTimerGenericCommand+0x98>)
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	f107 0110 	add.w	r1, r7, #16
 8005eda:	2300      	movs	r3, #0
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	f7fe fd8b 	bl	80049f8 <xQueueGenericSendFromISR>
 8005ee2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3728      	adds	r7, #40	; 0x28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000d3c 	.word	0x20000d3c

08005ef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efe:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <prvProcessExpiredTimer+0x94>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe fb47 	bl	80045a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d022      	beq.n	8005f66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	18d1      	adds	r1, r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	6978      	ldr	r0, [r7, #20]
 8005f2e:	f000 f8d1 	bl	80060d4 <prvInsertTimerInActiveList>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01f      	beq.n	8005f78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f38:	2300      	movs	r3, #0
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	2100      	movs	r1, #0
 8005f42:	6978      	ldr	r0, [r7, #20]
 8005f44:	f7ff ff88 	bl	8005e58 <xTimerGenericCommand>
 8005f48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d113      	bne.n	8005f78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60fb      	str	r3, [r7, #12]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	6978      	ldr	r0, [r7, #20]
 8005f7e:	4798      	blx	r3
}
 8005f80:	bf00      	nop
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000d34 	.word	0x20000d34

08005f8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 f857 	bl	800604c <prvGetNextExpireTime>
 8005f9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f803 	bl	8005fb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005faa:	f000 f8d5 	bl	8006158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fae:	e7f1      	b.n	8005f94 <prvTimerTask+0x8>

08005fb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fba:	f7ff fa43 	bl	8005444 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fbe:	f107 0308 	add.w	r3, r7, #8
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f866 	bl	8006094 <prvSampleTimeNow>
 8005fc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d130      	bne.n	8006032 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <prvProcessTimerOrBlockTask+0x3c>
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d806      	bhi.n	8005fec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fde:	f7ff fa3f 	bl	8005460 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fe2:	68f9      	ldr	r1, [r7, #12]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff ff85 	bl	8005ef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fea:	e024      	b.n	8006036 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ff2:	4b13      	ldr	r3, [pc, #76]	; (8006040 <prvProcessTimerOrBlockTask+0x90>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <prvProcessTimerOrBlockTask+0x50>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <prvProcessTimerOrBlockTask+0x52>
 8006000:	2300      	movs	r3, #0
 8006002:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006004:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <prvProcessTimerOrBlockTask+0x94>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	4619      	mov	r1, r3
 8006012:	f7fe ffa7 	bl	8004f64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006016:	f7ff fa23 	bl	8005460 <xTaskResumeAll>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006020:	4b09      	ldr	r3, [pc, #36]	; (8006048 <prvProcessTimerOrBlockTask+0x98>)
 8006022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
}
 8006030:	e001      	b.n	8006036 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006032:	f7ff fa15 	bl	8005460 <xTaskResumeAll>
}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000d38 	.word	0x20000d38
 8006044:	20000d3c 	.word	0x20000d3c
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <prvGetNextExpireTime+0x44>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <prvGetNextExpireTime+0x16>
 800605e:	2201      	movs	r2, #1
 8006060:	e000      	b.n	8006064 <prvGetNextExpireTime+0x18>
 8006062:	2200      	movs	r2, #0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d105      	bne.n	800607c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <prvGetNextExpireTime+0x44>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	e001      	b.n	8006080 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006080:	68fb      	ldr	r3, [r7, #12]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20000d34 	.word	0x20000d34

08006094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800609c:	f7ff fa7e 	bl	800559c <xTaskGetTickCount>
 80060a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <prvSampleTimeNow+0x3c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d205      	bcs.n	80060b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060ac:	f000 f936 	bl	800631c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e002      	b.n	80060be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060be:	4a04      	ldr	r2, [pc, #16]	; (80060d0 <prvSampleTimeNow+0x3c>)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060c4:	68fb      	ldr	r3, [r7, #12]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000d44 	.word	0x20000d44

080060d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d812      	bhi.n	8006120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	1ad2      	subs	r2, r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	429a      	cmp	r2, r3
 8006106:	d302      	bcc.n	800610e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006108:	2301      	movs	r3, #1
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	e01b      	b.n	8006146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800610e:	4b10      	ldr	r3, [pc, #64]	; (8006150 <prvInsertTimerInActiveList+0x7c>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f7fe fa08 	bl	800452e <vListInsert>
 800611e:	e012      	b.n	8006146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d206      	bcs.n	8006136 <prvInsertTimerInActiveList+0x62>
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d302      	bcc.n	8006136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006130:	2301      	movs	r3, #1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	e007      	b.n	8006146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006136:	4b07      	ldr	r3, [pc, #28]	; (8006154 <prvInsertTimerInActiveList+0x80>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7fe f9f4 	bl	800452e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006146:	697b      	ldr	r3, [r7, #20]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000d38 	.word	0x20000d38
 8006154:	20000d34 	.word	0x20000d34

08006158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08e      	sub	sp, #56	; 0x38
 800615c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800615e:	e0ca      	b.n	80062f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	da18      	bge.n	8006198 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006166:	1d3b      	adds	r3, r7, #4
 8006168:	3304      	adds	r3, #4
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	61fb      	str	r3, [r7, #28]
}
 8006184:	bf00      	nop
 8006186:	e7fe      	b.n	8006186 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800618e:	6850      	ldr	r0, [r2, #4]
 8006190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006192:	6892      	ldr	r2, [r2, #8]
 8006194:	4611      	mov	r1, r2
 8006196:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f2c0 80aa 	blt.w	80062f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d004      	beq.n	80061b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	3304      	adds	r3, #4
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe f9f5 	bl	80045a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061b6:	463b      	mov	r3, r7
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff ff6b 	bl	8006094 <prvSampleTimeNow>
 80061be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b09      	cmp	r3, #9
 80061c4:	f200 8097 	bhi.w	80062f6 <prvProcessReceivedCommands+0x19e>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <prvProcessReceivedCommands+0x78>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080061f9 	.word	0x080061f9
 80061d4:	080061f9 	.word	0x080061f9
 80061d8:	080061f9 	.word	0x080061f9
 80061dc:	0800626d 	.word	0x0800626d
 80061e0:	08006281 	.word	0x08006281
 80061e4:	080062cb 	.word	0x080062cb
 80061e8:	080061f9 	.word	0x080061f9
 80061ec:	080061f9 	.word	0x080061f9
 80061f0:	0800626d 	.word	0x0800626d
 80061f4:	08006281 	.word	0x08006281
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061fe:	f043 0301 	orr.w	r3, r3, #1
 8006202:	b2da      	uxtb	r2, r3
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	18d1      	adds	r1, r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006218:	f7ff ff5c 	bl	80060d4 <prvInsertTimerInActiveList>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d069      	beq.n	80062f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006228:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d05e      	beq.n	80062f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	441a      	add	r2, r3
 8006240:	2300      	movs	r3, #0
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	2300      	movs	r3, #0
 8006246:	2100      	movs	r1, #0
 8006248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800624a:	f7ff fe05 	bl	8005e58 <xTimerGenericCommand>
 800624e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d14f      	bne.n	80062f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	61bb      	str	r3, [r7, #24]
}
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	b2da      	uxtb	r2, r3
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800627e:	e03a      	b.n	80062f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006286:	f043 0301 	orr.w	r3, r3, #1
 800628a:	b2da      	uxtb	r2, r3
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	617b      	str	r3, [r7, #20]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	18d1      	adds	r1, r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c4:	f7ff ff06 	bl	80060d4 <prvInsertTimerInActiveList>
					break;
 80062c8:	e015      	b.n	80062f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80062d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062da:	f000 fbe1 	bl	8006aa0 <vPortFree>
 80062de:	e00a      	b.n	80062f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062f2:	e000      	b.n	80062f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80062f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062f6:	4b08      	ldr	r3, [pc, #32]	; (8006318 <prvProcessReceivedCommands+0x1c0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	1d39      	adds	r1, r7, #4
 80062fc:	2200      	movs	r2, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fc16 	bl	8004b30 <xQueueReceive>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	f47f af2a 	bne.w	8006160 <prvProcessReceivedCommands+0x8>
	}
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	3730      	adds	r7, #48	; 0x30
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000d3c 	.word	0x20000d3c

0800631c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006322:	e048      	b.n	80063b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006324:	4b2d      	ldr	r3, [pc, #180]	; (80063dc <prvSwitchTimerLists+0xc0>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632e:	4b2b      	ldr	r3, [pc, #172]	; (80063dc <prvSwitchTimerLists+0xc0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3304      	adds	r3, #4
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe f92f 	bl	80045a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d02e      	beq.n	80063b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	429a      	cmp	r2, r3
 8006368:	d90e      	bls.n	8006388 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006376:	4b19      	ldr	r3, [pc, #100]	; (80063dc <prvSwitchTimerLists+0xc0>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3304      	adds	r3, #4
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f7fe f8d4 	bl	800452e <vListInsert>
 8006386:	e016      	b.n	80063b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006388:	2300      	movs	r3, #0
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	2300      	movs	r3, #0
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	2100      	movs	r1, #0
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff fd60 	bl	8005e58 <xTimerGenericCommand>
 8006398:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	603b      	str	r3, [r7, #0]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <prvSwitchTimerLists+0xc0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1b1      	bne.n	8006324 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063c0:	4b06      	ldr	r3, [pc, #24]	; (80063dc <prvSwitchTimerLists+0xc0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <prvSwitchTimerLists+0xc4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a04      	ldr	r2, [pc, #16]	; (80063dc <prvSwitchTimerLists+0xc0>)
 80063cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063ce:	4a04      	ldr	r2, [pc, #16]	; (80063e0 <prvSwitchTimerLists+0xc4>)
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	6013      	str	r3, [r2, #0]
}
 80063d4:	bf00      	nop
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	20000d34 	.word	0x20000d34
 80063e0:	20000d38 	.word	0x20000d38

080063e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063ea:	f000 f96b 	bl	80066c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063ee:	4b15      	ldr	r3, [pc, #84]	; (8006444 <prvCheckForValidListAndQueue+0x60>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d120      	bne.n	8006438 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063f6:	4814      	ldr	r0, [pc, #80]	; (8006448 <prvCheckForValidListAndQueue+0x64>)
 80063f8:	f7fe f848 	bl	800448c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063fc:	4813      	ldr	r0, [pc, #76]	; (800644c <prvCheckForValidListAndQueue+0x68>)
 80063fe:	f7fe f845 	bl	800448c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006402:	4b13      	ldr	r3, [pc, #76]	; (8006450 <prvCheckForValidListAndQueue+0x6c>)
 8006404:	4a10      	ldr	r2, [pc, #64]	; (8006448 <prvCheckForValidListAndQueue+0x64>)
 8006406:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006408:	4b12      	ldr	r3, [pc, #72]	; (8006454 <prvCheckForValidListAndQueue+0x70>)
 800640a:	4a10      	ldr	r2, [pc, #64]	; (800644c <prvCheckForValidListAndQueue+0x68>)
 800640c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800640e:	2300      	movs	r3, #0
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <prvCheckForValidListAndQueue+0x74>)
 8006414:	4a11      	ldr	r2, [pc, #68]	; (800645c <prvCheckForValidListAndQueue+0x78>)
 8006416:	2110      	movs	r1, #16
 8006418:	200a      	movs	r0, #10
 800641a:	f7fe f953 	bl	80046c4 <xQueueGenericCreateStatic>
 800641e:	4603      	mov	r3, r0
 8006420:	4a08      	ldr	r2, [pc, #32]	; (8006444 <prvCheckForValidListAndQueue+0x60>)
 8006422:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006424:	4b07      	ldr	r3, [pc, #28]	; (8006444 <prvCheckForValidListAndQueue+0x60>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <prvCheckForValidListAndQueue+0x60>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	490b      	ldr	r1, [pc, #44]	; (8006460 <prvCheckForValidListAndQueue+0x7c>)
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fd6c 	bl	8004f10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006438:	f000 f974 	bl	8006724 <vPortExitCritical>
}
 800643c:	bf00      	nop
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000d3c 	.word	0x20000d3c
 8006448:	20000d0c 	.word	0x20000d0c
 800644c:	20000d20 	.word	0x20000d20
 8006450:	20000d34 	.word	0x20000d34
 8006454:	20000d38 	.word	0x20000d38
 8006458:	20000de8 	.word	0x20000de8
 800645c:	20000d48 	.word	0x20000d48
 8006460:	080071c0 	.word	0x080071c0

08006464 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3b04      	subs	r3, #4
 8006474:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800647c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3b04      	subs	r3, #4
 8006482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f023 0201 	bic.w	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3b04      	subs	r3, #4
 8006492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006494:	4a0c      	ldr	r2, [pc, #48]	; (80064c8 <pxPortInitialiseStack+0x64>)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3b14      	subs	r3, #20
 800649e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3b04      	subs	r3, #4
 80064aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f06f 0202 	mvn.w	r2, #2
 80064b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3b20      	subs	r3, #32
 80064b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064ba:	68fb      	ldr	r3, [r7, #12]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	080064cd 	.word	0x080064cd

080064cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064d6:	4b12      	ldr	r3, [pc, #72]	; (8006520 <prvTaskExitError+0x54>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064de:	d00a      	beq.n	80064f6 <prvTaskExitError+0x2a>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <prvTaskExitError+0x28>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	60bb      	str	r3, [r7, #8]
}
 8006508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800650a:	bf00      	nop
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0fc      	beq.n	800650c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006512:	bf00      	nop
 8006514:	bf00      	nop
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	2000000c 	.word	0x2000000c
	...

08006530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <pxCurrentTCBConst2>)
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	f380 8809 	msr	PSP, r0
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f380 8811 	msr	BASEPRI, r0
 800654a:	4770      	bx	lr
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst2>:
 8006550:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop

08006558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006558:	4808      	ldr	r0, [pc, #32]	; (800657c <prvPortStartFirstTask+0x24>)
 800655a:	6800      	ldr	r0, [r0, #0]
 800655c:	6800      	ldr	r0, [r0, #0]
 800655e:	f380 8808 	msr	MSP, r0
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f380 8814 	msr	CONTROL, r0
 800656a:	b662      	cpsie	i
 800656c:	b661      	cpsie	f
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	df00      	svc	0
 8006578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800657a:	bf00      	nop
 800657c:	e000ed08 	.word	0xe000ed08

08006580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006586:	4b46      	ldr	r3, [pc, #280]	; (80066a0 <xPortStartScheduler+0x120>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a46      	ldr	r2, [pc, #280]	; (80066a4 <xPortStartScheduler+0x124>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10a      	bne.n	80065a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	613b      	str	r3, [r7, #16]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065a6:	4b3e      	ldr	r3, [pc, #248]	; (80066a0 <xPortStartScheduler+0x120>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a3f      	ldr	r2, [pc, #252]	; (80066a8 <xPortStartScheduler+0x128>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d10a      	bne.n	80065c6 <xPortStartScheduler+0x46>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	60fb      	str	r3, [r7, #12]
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065c6:	4b39      	ldr	r3, [pc, #228]	; (80066ac <xPortStartScheduler+0x12c>)
 80065c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	22ff      	movs	r2, #255	; 0xff
 80065d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4b31      	ldr	r3, [pc, #196]	; (80066b0 <xPortStartScheduler+0x130>)
 80065ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065ee:	4b31      	ldr	r3, [pc, #196]	; (80066b4 <xPortStartScheduler+0x134>)
 80065f0:	2207      	movs	r2, #7
 80065f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065f4:	e009      	b.n	800660a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065f6:	4b2f      	ldr	r3, [pc, #188]	; (80066b4 <xPortStartScheduler+0x134>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	4a2d      	ldr	r2, [pc, #180]	; (80066b4 <xPortStartScheduler+0x134>)
 80065fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	b2db      	uxtb	r3, r3
 8006608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006612:	2b80      	cmp	r3, #128	; 0x80
 8006614:	d0ef      	beq.n	80065f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006616:	4b27      	ldr	r3, [pc, #156]	; (80066b4 <xPortStartScheduler+0x134>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1c3 0307 	rsb	r3, r3, #7
 800661e:	2b04      	cmp	r3, #4
 8006620:	d00a      	beq.n	8006638 <xPortStartScheduler+0xb8>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	60bb      	str	r3, [r7, #8]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006638:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <xPortStartScheduler+0x134>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <xPortStartScheduler+0x134>)
 8006640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006642:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <xPortStartScheduler+0x134>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800664a:	4a1a      	ldr	r2, [pc, #104]	; (80066b4 <xPortStartScheduler+0x134>)
 800664c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006656:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <xPortStartScheduler+0x138>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <xPortStartScheduler+0x138>)
 800665c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006662:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <xPortStartScheduler+0x138>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <xPortStartScheduler+0x138>)
 8006668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800666c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800666e:	f000 f8dd 	bl	800682c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006672:	4b12      	ldr	r3, [pc, #72]	; (80066bc <xPortStartScheduler+0x13c>)
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006678:	f000 f8fc 	bl	8006874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800667c:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <xPortStartScheduler+0x140>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a0f      	ldr	r2, [pc, #60]	; (80066c0 <xPortStartScheduler+0x140>)
 8006682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006688:	f7ff ff66 	bl	8006558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800668c:	f7ff f850 	bl	8005730 <vTaskSwitchContext>
	prvTaskExitError();
 8006690:	f7ff ff1c 	bl	80064cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	e000ed00 	.word	0xe000ed00
 80066a4:	410fc271 	.word	0x410fc271
 80066a8:	410fc270 	.word	0x410fc270
 80066ac:	e000e400 	.word	0xe000e400
 80066b0:	20000e38 	.word	0x20000e38
 80066b4:	20000e3c 	.word	0x20000e3c
 80066b8:	e000ed20 	.word	0xe000ed20
 80066bc:	2000000c 	.word	0x2000000c
 80066c0:	e000ef34 	.word	0xe000ef34

080066c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	607b      	str	r3, [r7, #4]
}
 80066dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066de:	4b0f      	ldr	r3, [pc, #60]	; (800671c <vPortEnterCritical+0x58>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	4a0d      	ldr	r2, [pc, #52]	; (800671c <vPortEnterCritical+0x58>)
 80066e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <vPortEnterCritical+0x58>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d10f      	bne.n	8006710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <vPortEnterCritical+0x5c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <vPortEnterCritical+0x4c>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	603b      	str	r3, [r7, #0]
}
 800670c:	bf00      	nop
 800670e:	e7fe      	b.n	800670e <vPortEnterCritical+0x4a>
	}
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	2000000c 	.word	0x2000000c
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800672a:	4b12      	ldr	r3, [pc, #72]	; (8006774 <vPortExitCritical+0x50>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10a      	bne.n	8006748 <vPortExitCritical+0x24>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	607b      	str	r3, [r7, #4]
}
 8006744:	bf00      	nop
 8006746:	e7fe      	b.n	8006746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <vPortExitCritical+0x50>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3b01      	subs	r3, #1
 800674e:	4a09      	ldr	r2, [pc, #36]	; (8006774 <vPortExitCritical+0x50>)
 8006750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006752:	4b08      	ldr	r3, [pc, #32]	; (8006774 <vPortExitCritical+0x50>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <vPortExitCritical+0x42>
 800675a:	2300      	movs	r3, #0
 800675c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	f383 8811 	msr	BASEPRI, r3
}
 8006764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	2000000c 	.word	0x2000000c
	...

08006780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006780:	f3ef 8009 	mrs	r0, PSP
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <pxCurrentTCBConst>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	f01e 0f10 	tst.w	lr, #16
 8006790:	bf08      	it	eq
 8006792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	6010      	str	r0, [r2, #0]
 800679c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067a4:	f380 8811 	msr	BASEPRI, r0
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f7fe ffbe 	bl	8005730 <vTaskSwitchContext>
 80067b4:	f04f 0000 	mov.w	r0, #0
 80067b8:	f380 8811 	msr	BASEPRI, r0
 80067bc:	bc09      	pop	{r0, r3}
 80067be:	6819      	ldr	r1, [r3, #0]
 80067c0:	6808      	ldr	r0, [r1, #0]
 80067c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c6:	f01e 0f10 	tst.w	lr, #16
 80067ca:	bf08      	it	eq
 80067cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067d0:	f380 8809 	msr	PSP, r0
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	f3af 8000 	nop.w

080067e0 <pxCurrentTCBConst>:
 80067e0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop

080067e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	607b      	str	r3, [r7, #4]
}
 8006800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006802:	f7fe fedb 	bl	80055bc <xTaskIncrementTick>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <xPortSysTickHandler+0x40>)
 800680e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	2300      	movs	r3, #0
 8006816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f383 8811 	msr	BASEPRI, r3
}
 800681e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006820:	bf00      	nop
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006830:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <vPortSetupTimerInterrupt+0x34>)
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006836:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <vPortSetupTimerInterrupt+0x38>)
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800683c:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <vPortSetupTimerInterrupt+0x3c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <vPortSetupTimerInterrupt+0x40>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	099b      	lsrs	r3, r3, #6
 8006848:	4a09      	ldr	r2, [pc, #36]	; (8006870 <vPortSetupTimerInterrupt+0x44>)
 800684a:	3b01      	subs	r3, #1
 800684c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800684e:	4b04      	ldr	r3, [pc, #16]	; (8006860 <vPortSetupTimerInterrupt+0x34>)
 8006850:	2207      	movs	r2, #7
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	e000e010 	.word	0xe000e010
 8006864:	e000e018 	.word	0xe000e018
 8006868:	20000000 	.word	0x20000000
 800686c:	10624dd3 	.word	0x10624dd3
 8006870:	e000e014 	.word	0xe000e014

08006874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006884 <vPortEnableVFP+0x10>
 8006878:	6801      	ldr	r1, [r0, #0]
 800687a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800687e:	6001      	str	r1, [r0, #0]
 8006880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006882:	bf00      	nop
 8006884:	e000ed88 	.word	0xe000ed88

08006888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800688e:	f3ef 8305 	mrs	r3, IPSR
 8006892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b0f      	cmp	r3, #15
 8006898:	d914      	bls.n	80068c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800689a:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <vPortValidateInterruptPriority+0x70>)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068a4:	4b15      	ldr	r3, [pc, #84]	; (80068fc <vPortValidateInterruptPriority+0x74>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	7afa      	ldrb	r2, [r7, #11]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d20a      	bcs.n	80068c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
}
 80068c0:	bf00      	nop
 80068c2:	e7fe      	b.n	80068c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068c4:	4b0e      	ldr	r3, [pc, #56]	; (8006900 <vPortValidateInterruptPriority+0x78>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068cc:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <vPortValidateInterruptPriority+0x7c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d90a      	bls.n	80068ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	603b      	str	r3, [r7, #0]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <vPortValidateInterruptPriority+0x60>
	}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	e000e3f0 	.word	0xe000e3f0
 80068fc:	20000e38 	.word	0x20000e38
 8006900:	e000ed0c 	.word	0xe000ed0c
 8006904:	20000e3c 	.word	0x20000e3c

08006908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006914:	f7fe fd96 	bl	8005444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006918:	4b5b      	ldr	r3, [pc, #364]	; (8006a88 <pvPortMalloc+0x180>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006920:	f000 f920 	bl	8006b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006924:	4b59      	ldr	r3, [pc, #356]	; (8006a8c <pvPortMalloc+0x184>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4013      	ands	r3, r2
 800692c:	2b00      	cmp	r3, #0
 800692e:	f040 8093 	bne.w	8006a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01d      	beq.n	8006974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006938:	2208      	movs	r2, #8
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4413      	add	r3, r2
 800693e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b00      	cmp	r3, #0
 8006948:	d014      	beq.n	8006974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f023 0307 	bic.w	r3, r3, #7
 8006950:	3308      	adds	r3, #8
 8006952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <pvPortMalloc+0x6c>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	617b      	str	r3, [r7, #20]
}
 8006970:	bf00      	nop
 8006972:	e7fe      	b.n	8006972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d06e      	beq.n	8006a58 <pvPortMalloc+0x150>
 800697a:	4b45      	ldr	r3, [pc, #276]	; (8006a90 <pvPortMalloc+0x188>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	429a      	cmp	r2, r3
 8006982:	d869      	bhi.n	8006a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006984:	4b43      	ldr	r3, [pc, #268]	; (8006a94 <pvPortMalloc+0x18c>)
 8006986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006988:	4b42      	ldr	r3, [pc, #264]	; (8006a94 <pvPortMalloc+0x18c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800698e:	e004      	b.n	800699a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d903      	bls.n	80069ac <pvPortMalloc+0xa4>
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f1      	bne.n	8006990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069ac:	4b36      	ldr	r3, [pc, #216]	; (8006a88 <pvPortMalloc+0x180>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d050      	beq.n	8006a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2208      	movs	r2, #8
 80069bc:	4413      	add	r3, r2
 80069be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	1ad2      	subs	r2, r2, r3
 80069d0:	2308      	movs	r3, #8
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d91f      	bls.n	8006a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4413      	add	r3, r2
 80069de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <pvPortMalloc+0xf8>
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	613b      	str	r3, [r7, #16]
}
 80069fc:	bf00      	nop
 80069fe:	e7fe      	b.n	80069fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	1ad2      	subs	r2, r2, r3
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a12:	69b8      	ldr	r0, [r7, #24]
 8006a14:	f000 f908 	bl	8006c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a18:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <pvPortMalloc+0x188>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <pvPortMalloc+0x188>)
 8006a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a26:	4b1a      	ldr	r3, [pc, #104]	; (8006a90 <pvPortMalloc+0x188>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b1b      	ldr	r3, [pc, #108]	; (8006a98 <pvPortMalloc+0x190>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d203      	bcs.n	8006a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a32:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <pvPortMalloc+0x188>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <pvPortMalloc+0x190>)
 8006a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <pvPortMalloc+0x184>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <pvPortMalloc+0x194>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3301      	adds	r3, #1
 8006a54:	4a11      	ldr	r2, [pc, #68]	; (8006a9c <pvPortMalloc+0x194>)
 8006a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a58:	f7fe fd02 	bl	8005460 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <pvPortMalloc+0x174>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	60fb      	str	r3, [r7, #12]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <pvPortMalloc+0x172>
	return pvReturn;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3728      	adds	r7, #40	; 0x28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20001a00 	.word	0x20001a00
 8006a8c:	20001a14 	.word	0x20001a14
 8006a90:	20001a04 	.word	0x20001a04
 8006a94:	200019f8 	.word	0x200019f8
 8006a98:	20001a08 	.word	0x20001a08
 8006a9c:	20001a0c 	.word	0x20001a0c

08006aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d04d      	beq.n	8006b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	425b      	negs	r3, r3
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	4b24      	ldr	r3, [pc, #144]	; (8006b58 <vPortFree+0xb8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <vPortFree+0x44>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	60fb      	str	r3, [r7, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <vPortFree+0x62>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60bb      	str	r3, [r7, #8]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	4b14      	ldr	r3, [pc, #80]	; (8006b58 <vPortFree+0xb8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01e      	beq.n	8006b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11a      	bne.n	8006b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <vPortFree+0xb8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	43db      	mvns	r3, r3
 8006b22:	401a      	ands	r2, r3
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b28:	f7fe fc8c 	bl	8005444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <vPortFree+0xbc>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4413      	add	r3, r2
 8006b36:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <vPortFree+0xbc>)
 8006b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b3a:	6938      	ldr	r0, [r7, #16]
 8006b3c:	f000 f874 	bl	8006c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <vPortFree+0xc0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3301      	adds	r3, #1
 8006b46:	4a06      	ldr	r2, [pc, #24]	; (8006b60 <vPortFree+0xc0>)
 8006b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b4a:	f7fe fc89 	bl	8005460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b4e:	bf00      	nop
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20001a14 	.word	0x20001a14
 8006b5c:	20001a04 	.word	0x20001a04
 8006b60:	20001a10 	.word	0x20001a10

08006b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b6a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b70:	4b27      	ldr	r3, [pc, #156]	; (8006c10 <prvHeapInit+0xac>)
 8006b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00c      	beq.n	8006b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3307      	adds	r3, #7
 8006b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0307 	bic.w	r3, r3, #7
 8006b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	4a1f      	ldr	r2, [pc, #124]	; (8006c10 <prvHeapInit+0xac>)
 8006b94:	4413      	add	r3, r2
 8006b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b9c:	4a1d      	ldr	r2, [pc, #116]	; (8006c14 <prvHeapInit+0xb0>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ba2:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <prvHeapInit+0xb0>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	4413      	add	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0307 	bic.w	r3, r3, #7
 8006bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <prvHeapInit+0xb4>)
 8006bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bc6:	4b14      	ldr	r3, [pc, #80]	; (8006c18 <prvHeapInit+0xb4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bce:	4b12      	ldr	r3, [pc, #72]	; (8006c18 <prvHeapInit+0xb4>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006be4:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <prvHeapInit+0xb4>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	4a0a      	ldr	r2, [pc, #40]	; (8006c1c <prvHeapInit+0xb8>)
 8006bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	4a09      	ldr	r2, [pc, #36]	; (8006c20 <prvHeapInit+0xbc>)
 8006bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <prvHeapInit+0xc0>)
 8006bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c02:	601a      	str	r2, [r3, #0]
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	20000e40 	.word	0x20000e40
 8006c14:	200019f8 	.word	0x200019f8
 8006c18:	20001a00 	.word	0x20001a00
 8006c1c:	20001a08 	.word	0x20001a08
 8006c20:	20001a04 	.word	0x20001a04
 8006c24:	20001a14 	.word	0x20001a14

08006c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c30:	4b28      	ldr	r3, [pc, #160]	; (8006cd4 <prvInsertBlockIntoFreeList+0xac>)
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e002      	b.n	8006c3c <prvInsertBlockIntoFreeList+0x14>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d8f7      	bhi.n	8006c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	4413      	add	r3, r2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d108      	bne.n	8006c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	441a      	add	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	441a      	add	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d118      	bne.n	8006cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b15      	ldr	r3, [pc, #84]	; (8006cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d00d      	beq.n	8006ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	441a      	add	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e008      	b.n	8006cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e003      	b.n	8006cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d002      	beq.n	8006cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	200019f8 	.word	0x200019f8
 8006cd8:	20001a00 	.word	0x20001a00

08006cdc <_ZdlPvj>:
 8006cdc:	f000 b812 	b.w	8006d04 <_ZdlPv>

08006ce0 <__cxa_guard_acquire>:
 8006ce0:	6803      	ldr	r3, [r0, #0]
 8006ce2:	07db      	lsls	r3, r3, #31
 8006ce4:	d406      	bmi.n	8006cf4 <__cxa_guard_acquire+0x14>
 8006ce6:	7843      	ldrb	r3, [r0, #1]
 8006ce8:	b103      	cbz	r3, 8006cec <__cxa_guard_acquire+0xc>
 8006cea:	deff      	udf	#255	; 0xff
 8006cec:	2301      	movs	r3, #1
 8006cee:	7043      	strb	r3, [r0, #1]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	4770      	bx	lr
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	4770      	bx	lr

08006cf8 <__cxa_guard_release>:
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	6003      	str	r3, [r0, #0]
 8006cfc:	4770      	bx	lr

08006cfe <__cxa_pure_virtual>:
 8006cfe:	b508      	push	{r3, lr}
 8006d00:	f000 f80e 	bl	8006d20 <_ZSt9terminatev>

08006d04 <_ZdlPv>:
 8006d04:	f000 b850 	b.w	8006da8 <free>

08006d08 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006d08:	b508      	push	{r3, lr}
 8006d0a:	4780      	blx	r0
 8006d0c:	f000 f80d 	bl	8006d2a <abort>

08006d10 <_ZSt13get_terminatev>:
 8006d10:	4b02      	ldr	r3, [pc, #8]	; (8006d1c <_ZSt13get_terminatev+0xc>)
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	f3bf 8f5b 	dmb	ish
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20000010 	.word	0x20000010

08006d20 <_ZSt9terminatev>:
 8006d20:	b508      	push	{r3, lr}
 8006d22:	f7ff fff5 	bl	8006d10 <_ZSt13get_terminatev>
 8006d26:	f7ff ffef 	bl	8006d08 <_ZN10__cxxabiv111__terminateEPFvvE>

08006d2a <abort>:
 8006d2a:	b508      	push	{r3, lr}
 8006d2c:	2006      	movs	r0, #6
 8006d2e:	f000 f93b 	bl	8006fa8 <raise>
 8006d32:	2001      	movs	r0, #1
 8006d34:	f7f9 fe88 	bl	8000a48 <_exit>

08006d38 <atexit>:
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4601      	mov	r1, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 b94e 	b.w	8006fe0 <__register_exitproc>

08006d44 <__errno>:
 8006d44:	4b01      	ldr	r3, [pc, #4]	; (8006d4c <__errno+0x8>)
 8006d46:	6818      	ldr	r0, [r3, #0]
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	20000014 	.word	0x20000014

08006d50 <__libc_init_array>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	4d0d      	ldr	r5, [pc, #52]	; (8006d88 <__libc_init_array+0x38>)
 8006d54:	4c0d      	ldr	r4, [pc, #52]	; (8006d8c <__libc_init_array+0x3c>)
 8006d56:	1b64      	subs	r4, r4, r5
 8006d58:	10a4      	asrs	r4, r4, #2
 8006d5a:	2600      	movs	r6, #0
 8006d5c:	42a6      	cmp	r6, r4
 8006d5e:	d109      	bne.n	8006d74 <__libc_init_array+0x24>
 8006d60:	4d0b      	ldr	r5, [pc, #44]	; (8006d90 <__libc_init_array+0x40>)
 8006d62:	4c0c      	ldr	r4, [pc, #48]	; (8006d94 <__libc_init_array+0x44>)
 8006d64:	f000 f9ae 	bl	80070c4 <_init>
 8006d68:	1b64      	subs	r4, r4, r5
 8006d6a:	10a4      	asrs	r4, r4, #2
 8006d6c:	2600      	movs	r6, #0
 8006d6e:	42a6      	cmp	r6, r4
 8006d70:	d105      	bne.n	8006d7e <__libc_init_array+0x2e>
 8006d72:	bd70      	pop	{r4, r5, r6, pc}
 8006d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d78:	4798      	blx	r3
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	e7ee      	b.n	8006d5c <__libc_init_array+0xc>
 8006d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d82:	4798      	blx	r3
 8006d84:	3601      	adds	r6, #1
 8006d86:	e7f2      	b.n	8006d6e <__libc_init_array+0x1e>
 8006d88:	08007304 	.word	0x08007304
 8006d8c:	08007304 	.word	0x08007304
 8006d90:	08007304 	.word	0x08007304
 8006d94:	0800730c 	.word	0x0800730c

08006d98 <malloc>:
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <malloc+0xc>)
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f000 b871 	b.w	8006e84 <_malloc_r>
 8006da2:	bf00      	nop
 8006da4:	20000014 	.word	0x20000014

08006da8 <free>:
 8006da8:	4b02      	ldr	r3, [pc, #8]	; (8006db4 <free+0xc>)
 8006daa:	4601      	mov	r1, r0
 8006dac:	6818      	ldr	r0, [r3, #0]
 8006dae:	f000 b819 	b.w	8006de4 <_free_r>
 8006db2:	bf00      	nop
 8006db4:	20000014 	.word	0x20000014

08006db8 <memcpy>:
 8006db8:	440a      	add	r2, r1
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006dc0:	d100      	bne.n	8006dc4 <memcpy+0xc>
 8006dc2:	4770      	bx	lr
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dce:	4291      	cmp	r1, r2
 8006dd0:	d1f9      	bne.n	8006dc6 <memcpy+0xe>
 8006dd2:	bd10      	pop	{r4, pc}

08006dd4 <memset>:
 8006dd4:	4402      	add	r2, r0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d100      	bne.n	8006dde <memset+0xa>
 8006ddc:	4770      	bx	lr
 8006dde:	f803 1b01 	strb.w	r1, [r3], #1
 8006de2:	e7f9      	b.n	8006dd8 <memset+0x4>

08006de4 <_free_r>:
 8006de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006de6:	2900      	cmp	r1, #0
 8006de8:	d048      	beq.n	8006e7c <_free_r+0x98>
 8006dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dee:	9001      	str	r0, [sp, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f1a1 0404 	sub.w	r4, r1, #4
 8006df6:	bfb8      	it	lt
 8006df8:	18e4      	addlt	r4, r4, r3
 8006dfa:	f000 f957 	bl	80070ac <__malloc_lock>
 8006dfe:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <_free_r+0x9c>)
 8006e00:	9801      	ldr	r0, [sp, #4]
 8006e02:	6813      	ldr	r3, [r2, #0]
 8006e04:	4615      	mov	r5, r2
 8006e06:	b933      	cbnz	r3, 8006e16 <_free_r+0x32>
 8006e08:	6063      	str	r3, [r4, #4]
 8006e0a:	6014      	str	r4, [r2, #0]
 8006e0c:	b003      	add	sp, #12
 8006e0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e12:	f000 b951 	b.w	80070b8 <__malloc_unlock>
 8006e16:	42a3      	cmp	r3, r4
 8006e18:	d90b      	bls.n	8006e32 <_free_r+0x4e>
 8006e1a:	6821      	ldr	r1, [r4, #0]
 8006e1c:	1862      	adds	r2, r4, r1
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	bf04      	itt	eq
 8006e22:	681a      	ldreq	r2, [r3, #0]
 8006e24:	685b      	ldreq	r3, [r3, #4]
 8006e26:	6063      	str	r3, [r4, #4]
 8006e28:	bf04      	itt	eq
 8006e2a:	1852      	addeq	r2, r2, r1
 8006e2c:	6022      	streq	r2, [r4, #0]
 8006e2e:	602c      	str	r4, [r5, #0]
 8006e30:	e7ec      	b.n	8006e0c <_free_r+0x28>
 8006e32:	461a      	mov	r2, r3
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	b10b      	cbz	r3, 8006e3c <_free_r+0x58>
 8006e38:	42a3      	cmp	r3, r4
 8006e3a:	d9fa      	bls.n	8006e32 <_free_r+0x4e>
 8006e3c:	6811      	ldr	r1, [r2, #0]
 8006e3e:	1855      	adds	r5, r2, r1
 8006e40:	42a5      	cmp	r5, r4
 8006e42:	d10b      	bne.n	8006e5c <_free_r+0x78>
 8006e44:	6824      	ldr	r4, [r4, #0]
 8006e46:	4421      	add	r1, r4
 8006e48:	1854      	adds	r4, r2, r1
 8006e4a:	42a3      	cmp	r3, r4
 8006e4c:	6011      	str	r1, [r2, #0]
 8006e4e:	d1dd      	bne.n	8006e0c <_free_r+0x28>
 8006e50:	681c      	ldr	r4, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	6053      	str	r3, [r2, #4]
 8006e56:	4421      	add	r1, r4
 8006e58:	6011      	str	r1, [r2, #0]
 8006e5a:	e7d7      	b.n	8006e0c <_free_r+0x28>
 8006e5c:	d902      	bls.n	8006e64 <_free_r+0x80>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	6003      	str	r3, [r0, #0]
 8006e62:	e7d3      	b.n	8006e0c <_free_r+0x28>
 8006e64:	6825      	ldr	r5, [r4, #0]
 8006e66:	1961      	adds	r1, r4, r5
 8006e68:	428b      	cmp	r3, r1
 8006e6a:	bf04      	itt	eq
 8006e6c:	6819      	ldreq	r1, [r3, #0]
 8006e6e:	685b      	ldreq	r3, [r3, #4]
 8006e70:	6063      	str	r3, [r4, #4]
 8006e72:	bf04      	itt	eq
 8006e74:	1949      	addeq	r1, r1, r5
 8006e76:	6021      	streq	r1, [r4, #0]
 8006e78:	6054      	str	r4, [r2, #4]
 8006e7a:	e7c7      	b.n	8006e0c <_free_r+0x28>
 8006e7c:	b003      	add	sp, #12
 8006e7e:	bd30      	pop	{r4, r5, pc}
 8006e80:	20001a18 	.word	0x20001a18

08006e84 <_malloc_r>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	1ccd      	adds	r5, r1, #3
 8006e88:	f025 0503 	bic.w	r5, r5, #3
 8006e8c:	3508      	adds	r5, #8
 8006e8e:	2d0c      	cmp	r5, #12
 8006e90:	bf38      	it	cc
 8006e92:	250c      	movcc	r5, #12
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	4606      	mov	r6, r0
 8006e98:	db01      	blt.n	8006e9e <_malloc_r+0x1a>
 8006e9a:	42a9      	cmp	r1, r5
 8006e9c:	d903      	bls.n	8006ea6 <_malloc_r+0x22>
 8006e9e:	230c      	movs	r3, #12
 8006ea0:	6033      	str	r3, [r6, #0]
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea6:	f000 f901 	bl	80070ac <__malloc_lock>
 8006eaa:	4921      	ldr	r1, [pc, #132]	; (8006f30 <_malloc_r+0xac>)
 8006eac:	680a      	ldr	r2, [r1, #0]
 8006eae:	4614      	mov	r4, r2
 8006eb0:	b99c      	cbnz	r4, 8006eda <_malloc_r+0x56>
 8006eb2:	4f20      	ldr	r7, [pc, #128]	; (8006f34 <_malloc_r+0xb0>)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	b923      	cbnz	r3, 8006ec2 <_malloc_r+0x3e>
 8006eb8:	4621      	mov	r1, r4
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f000 f83c 	bl	8006f38 <_sbrk_r>
 8006ec0:	6038      	str	r0, [r7, #0]
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f000 f837 	bl	8006f38 <_sbrk_r>
 8006eca:	1c43      	adds	r3, r0, #1
 8006ecc:	d123      	bne.n	8006f16 <_malloc_r+0x92>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	6033      	str	r3, [r6, #0]
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f000 f8f0 	bl	80070b8 <__malloc_unlock>
 8006ed8:	e7e3      	b.n	8006ea2 <_malloc_r+0x1e>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	1b5b      	subs	r3, r3, r5
 8006ede:	d417      	bmi.n	8006f10 <_malloc_r+0x8c>
 8006ee0:	2b0b      	cmp	r3, #11
 8006ee2:	d903      	bls.n	8006eec <_malloc_r+0x68>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	441c      	add	r4, r3
 8006ee8:	6025      	str	r5, [r4, #0]
 8006eea:	e004      	b.n	8006ef6 <_malloc_r+0x72>
 8006eec:	6863      	ldr	r3, [r4, #4]
 8006eee:	42a2      	cmp	r2, r4
 8006ef0:	bf0c      	ite	eq
 8006ef2:	600b      	streq	r3, [r1, #0]
 8006ef4:	6053      	strne	r3, [r2, #4]
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 f8de 	bl	80070b8 <__malloc_unlock>
 8006efc:	f104 000b 	add.w	r0, r4, #11
 8006f00:	1d23      	adds	r3, r4, #4
 8006f02:	f020 0007 	bic.w	r0, r0, #7
 8006f06:	1ac2      	subs	r2, r0, r3
 8006f08:	d0cc      	beq.n	8006ea4 <_malloc_r+0x20>
 8006f0a:	1a1b      	subs	r3, r3, r0
 8006f0c:	50a3      	str	r3, [r4, r2]
 8006f0e:	e7c9      	b.n	8006ea4 <_malloc_r+0x20>
 8006f10:	4622      	mov	r2, r4
 8006f12:	6864      	ldr	r4, [r4, #4]
 8006f14:	e7cc      	b.n	8006eb0 <_malloc_r+0x2c>
 8006f16:	1cc4      	adds	r4, r0, #3
 8006f18:	f024 0403 	bic.w	r4, r4, #3
 8006f1c:	42a0      	cmp	r0, r4
 8006f1e:	d0e3      	beq.n	8006ee8 <_malloc_r+0x64>
 8006f20:	1a21      	subs	r1, r4, r0
 8006f22:	4630      	mov	r0, r6
 8006f24:	f000 f808 	bl	8006f38 <_sbrk_r>
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d1dd      	bne.n	8006ee8 <_malloc_r+0x64>
 8006f2c:	e7cf      	b.n	8006ece <_malloc_r+0x4a>
 8006f2e:	bf00      	nop
 8006f30:	20001a18 	.word	0x20001a18
 8006f34:	20001a1c 	.word	0x20001a1c

08006f38 <_sbrk_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d06      	ldr	r5, [pc, #24]	; (8006f54 <_sbrk_r+0x1c>)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4608      	mov	r0, r1
 8006f42:	602b      	str	r3, [r5, #0]
 8006f44:	f7f9 fd8a 	bl	8000a5c <_sbrk>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d102      	bne.n	8006f52 <_sbrk_r+0x1a>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	b103      	cbz	r3, 8006f52 <_sbrk_r+0x1a>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	20001b4c 	.word	0x20001b4c

08006f58 <_raise_r>:
 8006f58:	291f      	cmp	r1, #31
 8006f5a:	b538      	push	{r3, r4, r5, lr}
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	460d      	mov	r5, r1
 8006f60:	d904      	bls.n	8006f6c <_raise_r+0x14>
 8006f62:	2316      	movs	r3, #22
 8006f64:	6003      	str	r3, [r0, #0]
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f6e:	b112      	cbz	r2, 8006f76 <_raise_r+0x1e>
 8006f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f74:	b94b      	cbnz	r3, 8006f8a <_raise_r+0x32>
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 f830 	bl	8006fdc <_getpid_r>
 8006f7c:	462a      	mov	r2, r5
 8006f7e:	4601      	mov	r1, r0
 8006f80:	4620      	mov	r0, r4
 8006f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f86:	f000 b817 	b.w	8006fb8 <_kill_r>
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d00a      	beq.n	8006fa4 <_raise_r+0x4c>
 8006f8e:	1c59      	adds	r1, r3, #1
 8006f90:	d103      	bne.n	8006f9a <_raise_r+0x42>
 8006f92:	2316      	movs	r3, #22
 8006f94:	6003      	str	r3, [r0, #0]
 8006f96:	2001      	movs	r0, #1
 8006f98:	e7e7      	b.n	8006f6a <_raise_r+0x12>
 8006f9a:	2400      	movs	r4, #0
 8006f9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	4798      	blx	r3
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e7e0      	b.n	8006f6a <_raise_r+0x12>

08006fa8 <raise>:
 8006fa8:	4b02      	ldr	r3, [pc, #8]	; (8006fb4 <raise+0xc>)
 8006faa:	4601      	mov	r1, r0
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	f7ff bfd3 	b.w	8006f58 <_raise_r>
 8006fb2:	bf00      	nop
 8006fb4:	20000014 	.word	0x20000014

08006fb8 <_kill_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4d07      	ldr	r5, [pc, #28]	; (8006fd8 <_kill_r+0x20>)
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	602b      	str	r3, [r5, #0]
 8006fc6:	f7f9 fd2f 	bl	8000a28 <_kill>
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	d102      	bne.n	8006fd4 <_kill_r+0x1c>
 8006fce:	682b      	ldr	r3, [r5, #0]
 8006fd0:	b103      	cbz	r3, 8006fd4 <_kill_r+0x1c>
 8006fd2:	6023      	str	r3, [r4, #0]
 8006fd4:	bd38      	pop	{r3, r4, r5, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20001b4c 	.word	0x20001b4c

08006fdc <_getpid_r>:
 8006fdc:	f7f9 bd1c 	b.w	8000a18 <_getpid>

08006fe0 <__register_exitproc>:
 8006fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80070a0 <__register_exitproc+0xc0>
 8006fe8:	4606      	mov	r6, r0
 8006fea:	f8d8 0000 	ldr.w	r0, [r8]
 8006fee:	461f      	mov	r7, r3
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	4691      	mov	r9, r2
 8006ff4:	f000 f856 	bl	80070a4 <__retarget_lock_acquire_recursive>
 8006ff8:	4b25      	ldr	r3, [pc, #148]	; (8007090 <__register_exitproc+0xb0>)
 8006ffa:	681c      	ldr	r4, [r3, #0]
 8006ffc:	b934      	cbnz	r4, 800700c <__register_exitproc+0x2c>
 8006ffe:	4c25      	ldr	r4, [pc, #148]	; (8007094 <__register_exitproc+0xb4>)
 8007000:	601c      	str	r4, [r3, #0]
 8007002:	4b25      	ldr	r3, [pc, #148]	; (8007098 <__register_exitproc+0xb8>)
 8007004:	b113      	cbz	r3, 800700c <__register_exitproc+0x2c>
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	2b1f      	cmp	r3, #31
 8007010:	dd07      	ble.n	8007022 <__register_exitproc+0x42>
 8007012:	f8d8 0000 	ldr.w	r0, [r8]
 8007016:	f000 f847 	bl	80070a8 <__retarget_lock_release_recursive>
 800701a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800701e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007022:	b34e      	cbz	r6, 8007078 <__register_exitproc+0x98>
 8007024:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8007028:	b988      	cbnz	r0, 800704e <__register_exitproc+0x6e>
 800702a:	4b1c      	ldr	r3, [pc, #112]	; (800709c <__register_exitproc+0xbc>)
 800702c:	b923      	cbnz	r3, 8007038 <__register_exitproc+0x58>
 800702e:	f8d8 0000 	ldr.w	r0, [r8]
 8007032:	f000 f838 	bl	80070a6 <__retarget_lock_release>
 8007036:	e7f0      	b.n	800701a <__register_exitproc+0x3a>
 8007038:	f44f 7084 	mov.w	r0, #264	; 0x108
 800703c:	f7ff feac 	bl	8006d98 <malloc>
 8007040:	2800      	cmp	r0, #0
 8007042:	d0f4      	beq.n	800702e <__register_exitproc+0x4e>
 8007044:	2300      	movs	r3, #0
 8007046:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800704a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800704e:	6863      	ldr	r3, [r4, #4]
 8007050:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8007054:	2201      	movs	r2, #1
 8007056:	409a      	lsls	r2, r3
 8007058:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800705c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007060:	4313      	orrs	r3, r2
 8007062:	2e02      	cmp	r6, #2
 8007064:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007068:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800706c:	bf02      	ittt	eq
 800706e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8007072:	431a      	orreq	r2, r3
 8007074:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8007078:	6863      	ldr	r3, [r4, #4]
 800707a:	f8d8 0000 	ldr.w	r0, [r8]
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	3302      	adds	r3, #2
 8007082:	6062      	str	r2, [r4, #4]
 8007084:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8007088:	f000 f80e 	bl	80070a8 <__retarget_lock_release_recursive>
 800708c:	2000      	movs	r0, #0
 800708e:	e7c6      	b.n	800701e <__register_exitproc+0x3e>
 8007090:	20001aac 	.word	0x20001aac
 8007094:	20001a20 	.word	0x20001a20
 8007098:	00000000 	.word	0x00000000
 800709c:	08006d99 	.word	0x08006d99
 80070a0:	20000078 	.word	0x20000078

080070a4 <__retarget_lock_acquire_recursive>:
 80070a4:	4770      	bx	lr

080070a6 <__retarget_lock_release>:
 80070a6:	4770      	bx	lr

080070a8 <__retarget_lock_release_recursive>:
 80070a8:	4770      	bx	lr
	...

080070ac <__malloc_lock>:
 80070ac:	4801      	ldr	r0, [pc, #4]	; (80070b4 <__malloc_lock+0x8>)
 80070ae:	f7ff bff9 	b.w	80070a4 <__retarget_lock_acquire_recursive>
 80070b2:	bf00      	nop
 80070b4:	20001b44 	.word	0x20001b44

080070b8 <__malloc_unlock>:
 80070b8:	4801      	ldr	r0, [pc, #4]	; (80070c0 <__malloc_unlock+0x8>)
 80070ba:	f7ff bff5 	b.w	80070a8 <__retarget_lock_release_recursive>
 80070be:	bf00      	nop
 80070c0:	20001b44 	.word	0x20001b44

080070c4 <_init>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	bf00      	nop
 80070c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ca:	bc08      	pop	{r3}
 80070cc:	469e      	mov	lr, r3
 80070ce:	4770      	bx	lr

080070d0 <_fini>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	bf00      	nop
 80070d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d6:	bc08      	pop	{r3}
 80070d8:	469e      	mov	lr, r3
 80070da:	4770      	bx	lr
