
hello_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c0  080062c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062c8  080062c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080062c8  080062c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080062d0  080062d0  000162d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080062d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a00  20000010  080062e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a10  080062e8  00021a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4ff  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003679  00000000  00000000  0003c53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  0003fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  00041228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051ee  00000000  00000000  00042760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172ce  00000000  00000000  0004794e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdce3  00000000  00000000  0005ec1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c8ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e7c  00000000  00000000  0015c954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006210 	.word	0x08006210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006210 	.word	0x08006210

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 faf0 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8d0 	bl	8000678 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004d8:	f000 f89a 	bl	8000610 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f003 f90c 	bl	80036f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <main+0x30>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x34>)
 80004e6:	f003 f951 	bl	800378c <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <main+0x38>)
 80004ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f0:	f003 f926 	bl	8003740 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x2c>
 80004f6:	bf00      	nop
 80004f8:	08006254 	.word	0x08006254
 80004fc:	08000729 	.word	0x08000729
 8000500:	200000b0 	.word	0x200000b0

08000504 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b0b8      	sub	sp, #224	; 0xe0
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f005 fe74 	bl	8006200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2288      	movs	r2, #136	; 0x88
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f005 fe66 	bl	8006200 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	2303      	movs	r3, #3
 800054a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000554:	230a      	movs	r3, #10
 8000556:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800055a:	2307      	movs	r3, #7
 800055c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fdff 	bl	8001174 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000586:	f000 f8f9 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2303      	movs	r3, #3
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005ac:	2104      	movs	r1, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 f9c6 	bl	8001940 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80005c4:	f000 f8da 	bl	800077c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fbea 	bl	8001dac <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf14      	ite	ne
 80005de:	2301      	movne	r3, #1
 80005e0:	2300      	moveq	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 80005e8:	f000 f8c8 	bl	800077c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f0:	f000 fd6a 	bl	80010c8 <HAL_PWREx_ControlVoltageScaling>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000604:	f000 f8ba 	bl	800077c <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	37e0      	adds	r7, #224	; 0xe0
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000654:	f002 fb38 	bl	8002cc8 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf14      	ite	ne
 800065e:	2301      	movne	r3, #1
 8000660:	2300      	moveq	r3, #0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000668:	f000 f888 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40004400 	.word	0x40004400

08000678 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a23      	ldr	r2, [pc, #140]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a1d      	ldr	r2, [pc, #116]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <_ZL12MX_GPIO_Initv+0xa8>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <_ZL12MX_GPIO_Initv+0xac>)
 80006f6:	f000 fca7 	bl	8001048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <_ZL12MX_GPIO_Initv+0xac>)
 8000714:	f000 faee 	bl	8000cf4 <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3728      	adds	r7, #40	; 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	48000800 	.word	0x48000800

08000728 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	HAL_UART_Transmit(&huart2, (uint8_t *)("hello\r\n"), sizeof("hello\r\n"), 100);
 8000730:	2364      	movs	r3, #100	; 0x64
 8000732:	2208      	movs	r2, #8
 8000734:	4905      	ldr	r1, [pc, #20]	; (800074c <_Z16StartDefaultTaskPv+0x24>)
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <_Z16StartDefaultTaskPv+0x28>)
 8000738:	f002 fb14 	bl	8002d64 <HAL_UART_Transmit>
  	xUI.test();
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <_Z16StartDefaultTaskPv+0x2c>)
 800073e:	f000 f97d 	bl	8000a3c <_ZN2UI4testEv>
    osDelay(250);
 8000742:	20fa      	movs	r0, #250	; 0xfa
 8000744:	f003 f8b4 	bl	80038b0 <osDelay>
  	HAL_UART_Transmit(&huart2, (uint8_t *)("hello\r\n"), sizeof("hello\r\n"), 100);
 8000748:	e7f2      	b.n	8000730 <_Z16StartDefaultTaskPv+0x8>
 800074a:	bf00      	nop
 800074c:	08006234 	.word	0x08006234
 8000750:	2000002c 	.word	0x2000002c
 8000754:	200000b4 	.word	0x200000b4

08000758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d101      	bne.n	800076e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076a:	f000 f9c1 	bl	8000af0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40001000 	.word	0x40001000

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d107      	bne.n	80007a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800079e:	4293      	cmp	r3, r2
 80007a0:	d102      	bne.n	80007a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
UI xUI;
 80007a2:	4809      	ldr	r0, [pc, #36]	; (80007c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80007a4:	f000 f934 	bl	8000a10 <_ZN2UIC1Ev>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d107      	bne.n	80007be <_Z41__static_initialization_and_destruction_0ii+0x36>
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d102      	bne.n	80007be <_Z41__static_initialization_and_destruction_0ii+0x36>
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80007ba:	f000 f934 	bl	8000a26 <_ZN2UID1Ev>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000b4 	.word	0x200000b4

080007cc <_GLOBAL__sub_I_huart2>:
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ffd7 	bl	8000788 <_Z41__static_initialization_and_destruction_0ii>
 80007da:	bd80      	pop	{r7, pc}

080007dc <_GLOBAL__sub_D_huart2>:
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
 80007e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ffcf 	bl	8000788 <_Z41__static_initialization_and_destruction_0ii>
 80007ea:	bd80      	pop	{r7, pc}

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_MspInit+0x4c>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <HAL_MspInit+0x4c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	; 0x60
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_MspInit+0x4c>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_MspInit+0x4c>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6593      	str	r3, [r2, #88]	; 0x58
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_MspInit+0x4c>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	210f      	movs	r1, #15
 8000826:	f06f 0001 	mvn.w	r0, #1
 800082a:	f000 fa39 	bl	8000ca0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_UART_MspInit+0x7c>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d128      	bne.n	80008b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <HAL_UART_MspInit+0x80>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000862:	4a16      	ldr	r2, [pc, #88]	; (80008bc <HAL_UART_MspInit+0x80>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	6593      	str	r3, [r2, #88]	; 0x58
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_UART_MspInit+0x80>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_UART_MspInit+0x80>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_UART_MspInit+0x80>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_UART_MspInit+0x80>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800088e:	230c      	movs	r3, #12
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089e:	2307      	movs	r3, #7
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f000 fa22 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	2036      	movs	r0, #54	; 0x36
 80008d6:	f000 f9e3 	bl	8000ca0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008da:	2036      	movs	r0, #54	; 0x36
 80008dc:	f000 f9fc 	bl	8000cd8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <HAL_InitTick+0x9c>)
 80008e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e4:	4a1d      	ldr	r2, [pc, #116]	; (800095c <HAL_InitTick+0x9c>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	6593      	str	r3, [r2, #88]	; 0x58
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <HAL_InitTick+0x9c>)
 80008ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f0:	f003 0310 	and.w	r3, r3, #16
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f8:	f107 0210 	add.w	r2, r7, #16
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f001 f9c0 	bl	8001c88 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000908:	f001 f992 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 800090c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000910:	4a13      	ldr	r2, [pc, #76]	; (8000960 <HAL_InitTick+0xa0>)
 8000912:	fba2 2303 	umull	r2, r3, r2, r3
 8000916:	0c9b      	lsrs	r3, r3, #18
 8000918:	3b01      	subs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_InitTick+0xa4>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <HAL_InitTick+0xa8>)
 8000920:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_InitTick+0xa4>)
 8000924:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000928:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_InitTick+0xa4>)
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_InitTick+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_InitTick+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <HAL_InitTick+0xa4>)
 800093e:	f001 fef1 	bl	8002724 <HAL_TIM_Base_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d104      	bne.n	8000952 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000948:	4806      	ldr	r0, [pc, #24]	; (8000964 <HAL_InitTick+0xa4>)
 800094a:	f001 ff4d 	bl	80027e8 <HAL_TIM_Base_Start_IT>
 800094e:	4603      	mov	r3, r0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	431bde83 	.word	0x431bde83
 8000964:	20001980 	.word	0x20001980
 8000968:	40001000 	.word	0x40001000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM6_DAC_IRQHandler+0x10>)
 800099e:	f001 ff93 	bl	80028c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20001980 	.word	0x20001980

080009ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <SystemInit+0x5c>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <SystemInit+0x5c>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <SystemInit+0x60>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <SystemInit+0x60>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <SystemInit+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <SystemInit+0x60>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <SystemInit+0x60>)
 80009d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <SystemInit+0x60>)
 80009e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <SystemInit+0x60>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <SystemInit+0x60>)
 80009f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <SystemInit+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00
 8000a0c:	40021000 	.word	0x40021000

08000a10 <_ZN2UIC1Ev>:
 *      Author: victor
 */

#include "ui.h"

UI::UI() {}
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_ZN2UID1Ev>:


UI::~UI() {}
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <_ZN2UI4testEv>:


void UI::test(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <_ZN2UI4testEv+0x1c>)
 8000a4a:	f000 fb15 	bl	8001078 <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);

  //HAL_UART_Transmit(&huart2, (uint8_t *)("test\r\n"), sizeof("test\r\n"), 100);
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	48000800 	.word	0x48000800

08000a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a60:	f7ff ffa4 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a66:	e003      	b.n	8000a70 <LoopCopyDataInit>

08000a68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a6e:	3104      	adds	r1, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a78:	d3f6      	bcc.n	8000a68 <CopyDataInit>
	ldr	r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a7c:	e002      	b.n	8000a84 <LoopFillZerobss>

08000a7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a80:	f842 3b04 	str.w	r3, [r2], #4

08000a84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <LoopForever+0x16>)
	cmp	r2, r3
 8000a86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a88:	d3f9      	bcc.n	8000a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f005 fb87 	bl	800619c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8e:	f7ff fd1b 	bl	80004c8 <main>

08000a92 <LoopForever>:

LoopForever:
    b LoopForever
 8000a92:	e7fe      	b.n	8000a92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a94:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a98:	080062d8 	.word	0x080062d8
	ldr	r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000aa0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000aa4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000aa8:	20001a10 	.word	0x20001a10

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_Init+0x3c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <HAL_Init+0x3c>)
 8000ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f000 f8df 	bl	8000c8a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fef7 	bl	80008c0 <HAL_InitTick>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	e001      	b.n	8000ae2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ade:	f7ff fe85 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40022000 	.word	0x40022000

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	200019cc 	.word	0x200019cc

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200019cc 	.word	0x200019cc

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ff4c 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb2:	f7ff ff61 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	68b9      	ldr	r1, [r7, #8]
 8000cbc:	6978      	ldr	r0, [r7, #20]
 8000cbe:	f7ff ffb1 	bl	8000c24 <NVIC_EncodePriority>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff80 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000cd0:	bf00      	nop
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff54 	bl	8000b94 <__NVIC_EnableIRQ>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e17f      	b.n	8001004 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8171 	beq.w	8000ffe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d00b      	beq.n	8000d3c <HAL_GPIO_Init+0x48>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d007      	beq.n	8000d3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d30:	2b11      	cmp	r3, #17
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b12      	cmp	r3, #18
 8000d3a:	d130      	bne.n	8000d9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d72:	2201      	movs	r2, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	f003 0201 	and.w	r2, r3, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d118      	bne.n	8000ddc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x128>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b12      	cmp	r3, #18
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	6939      	ldr	r1, [r7, #16]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80ac 	beq.w	8000ffe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b5f      	ldr	r3, [pc, #380]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	4a5e      	ldr	r2, [pc, #376]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ebe:	4a5a      	ldr	r2, [pc, #360]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ee8:	d025      	beq.n	8000f36 <HAL_GPIO_Init+0x242>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4f      	ldr	r2, [pc, #316]	; (800102c <HAL_GPIO_Init+0x338>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01f      	beq.n	8000f32 <HAL_GPIO_Init+0x23e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4e      	ldr	r2, [pc, #312]	; (8001030 <HAL_GPIO_Init+0x33c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0x23a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4d      	ldr	r2, [pc, #308]	; (8001034 <HAL_GPIO_Init+0x340>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0x236>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_GPIO_Init+0x344>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00d      	beq.n	8000f26 <HAL_GPIO_Init+0x232>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	; (800103c <HAL_GPIO_Init+0x348>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x22e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4a      	ldr	r2, [pc, #296]	; (8001040 <HAL_GPIO_Init+0x34c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_Init+0x22a>
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	e00c      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e00a      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f22:	2305      	movs	r3, #5
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f36:	2300      	movs	r3, #0
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f48:	4937      	ldr	r1, [pc, #220]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f56:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f7a:	4a32      	ldr	r2, [pc, #200]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa4:	4a27      	ldr	r2, [pc, #156]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fce:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa22 f303 	lsr.w	r3, r2, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	f47f ae78 	bne.w	8000d04 <HAL_GPIO_Init+0x10>
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	48000400 	.word	0x48000400
 8001030:	48000800 	.word	0x48000800
 8001034:	48000c00 	.word	0x48000c00
 8001038:	48001000 	.word	0x48001000
 800103c:	48001400 	.word	0x48001400
 8001040:	48001800 	.word	0x48001800
 8001044:	40010400 	.word	0x40010400

08001048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
 8001054:	4613      	mov	r3, r2
 8001056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001058:	787b      	ldrb	r3, [r7, #1]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001064:	e002      	b.n	800106c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4013      	ands	r3, r2
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43d9      	mvns	r1, r3
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	400b      	ands	r3, r1
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40007000 	.word	0x40007000

080010c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d6:	d130      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010e4:	d038      	beq.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2232      	movs	r2, #50	; 0x32
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	3301      	adds	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800110c:	e002      	b.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3b01      	subs	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001120:	d102      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f2      	bne.n	800110e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001134:	d110      	bne.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e00f      	b.n	800115a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001146:	d007      	beq.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001150:	4a05      	ldr	r2, [pc, #20]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40007000 	.word	0x40007000
 800116c:	20000000 	.word	0x20000000
 8001170:	431bde83 	.word	0x431bde83

08001174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e3d4      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001186:	4ba1      	ldr	r3, [pc, #644]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001190:	4b9e      	ldr	r3, [pc, #632]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80e4 	beq.w	8001370 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <HAL_RCC_OscConfig+0x4a>
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b0c      	cmp	r3, #12
 80011b2:	f040 808b 	bne.w	80012cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	f040 8087 	bne.w	80012cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011be:	4b93      	ldr	r3, [pc, #588]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <HAL_RCC_OscConfig+0x62>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e3ac      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1a      	ldr	r2, [r3, #32]
 80011da:	4b8c      	ldr	r3, [pc, #560]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_RCC_OscConfig+0x7c>
 80011e6:	4b89      	ldr	r3, [pc, #548]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ee:	e005      	b.n	80011fc <HAL_RCC_OscConfig+0x88>
 80011f0:	4b86      	ldr	r3, [pc, #536]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80011f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d223      	bcs.n	8001248 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fd71 	bl	8001cec <RCC_SetFlashLatencyFromMSIRange>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e38d      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001214:	4b7d      	ldr	r3, [pc, #500]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a7c      	ldr	r2, [pc, #496]	; (800140c <HAL_RCC_OscConfig+0x298>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b7a      	ldr	r3, [pc, #488]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4977      	ldr	r1, [pc, #476]	; (800140c <HAL_RCC_OscConfig+0x298>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001232:	4b76      	ldr	r3, [pc, #472]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	4972      	ldr	r1, [pc, #456]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
 8001246:	e025      	b.n	8001294 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001248:	4b70      	ldr	r3, [pc, #448]	; (800140c <HAL_RCC_OscConfig+0x298>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a6f      	ldr	r2, [pc, #444]	; (800140c <HAL_RCC_OscConfig+0x298>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b6d      	ldr	r3, [pc, #436]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	496a      	ldr	r1, [pc, #424]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001266:	4b69      	ldr	r3, [pc, #420]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	4965      	ldr	r1, [pc, #404]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d109      	bne.n	8001294 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fd31 	bl	8001cec <RCC_SetFlashLatencyFromMSIRange>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e34d      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001294:	f000 fc36 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001298:	4602      	mov	r2, r0
 800129a:	4b5c      	ldr	r3, [pc, #368]	; (800140c <HAL_RCC_OscConfig+0x298>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	495a      	ldr	r1, [pc, #360]	; (8001410 <HAL_RCC_OscConfig+0x29c>)
 80012a6:	5ccb      	ldrb	r3, [r1, r3]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	4a58      	ldr	r2, [pc, #352]	; (8001414 <HAL_RCC_OscConfig+0x2a0>)
 80012b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012b4:	4b58      	ldr	r3, [pc, #352]	; (8001418 <HAL_RCC_OscConfig+0x2a4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fb01 	bl	80008c0 <HAL_InitTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d052      	beq.n	800136e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	e331      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d032      	beq.n	800133a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012d4:	4b4d      	ldr	r3, [pc, #308]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc1a 	bl	8000b18 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc16 	bl	8000b18 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e31a      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012fa:	4b44      	ldr	r3, [pc, #272]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001306:	4b41      	ldr	r3, [pc, #260]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a40      	ldr	r2, [pc, #256]	; (800140c <HAL_RCC_OscConfig+0x298>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b3e      	ldr	r3, [pc, #248]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	493b      	ldr	r1, [pc, #236]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001324:	4b39      	ldr	r3, [pc, #228]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	4936      	ldr	r1, [pc, #216]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
 8001338:	e01a      	b.n	8001370 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <HAL_RCC_OscConfig+0x298>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a33      	ldr	r2, [pc, #204]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001346:	f7ff fbe7 	bl	8000b18 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134e:	f7ff fbe3 	bl	8000b18 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e2e7      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001360:	4b2a      	ldr	r3, [pc, #168]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x1da>
 800136c:	e000      	b.n	8001370 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800136e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d074      	beq.n	8001466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b08      	cmp	r3, #8
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x21a>
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b0c      	cmp	r3, #12
 8001386:	d10e      	bne.n	80013a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d10b      	bne.n	80013a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_RCC_OscConfig+0x298>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d064      	beq.n	8001464 <HAL_RCC_OscConfig+0x2f0>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d160      	bne.n	8001464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e2c4      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x24a>
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a15      	ldr	r2, [pc, #84]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80013b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e01d      	b.n	80013fa <HAL_RCC_OscConfig+0x286>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c6:	d10c      	bne.n	80013e2 <HAL_RCC_OscConfig+0x26e>
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0f      	ldr	r2, [pc, #60]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80013ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e00b      	b.n	80013fa <HAL_RCC_OscConfig+0x286>
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80013e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <HAL_RCC_OscConfig+0x298>)
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d01c      	beq.n	800143c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fb89 	bl	8000b18 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001408:	e011      	b.n	800142e <HAL_RCC_OscConfig+0x2ba>
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	08006278 	.word	0x08006278
 8001414:	20000000 	.word	0x20000000
 8001418:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fb7c 	bl	8000b18 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e280      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800142e:	4baf      	ldr	r3, [pc, #700]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x2a8>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fb6c 	bl	8000b18 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fb68 	bl	8000b18 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e26c      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001456:	4ba5      	ldr	r3, [pc, #660]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x2d0>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d060      	beq.n	8001534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d005      	beq.n	8001484 <HAL_RCC_OscConfig+0x310>
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d116      	bne.n	80014b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001484:	4b99      	ldr	r3, [pc, #612]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x328>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e249      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149c:	4b93      	ldr	r3, [pc, #588]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	061b      	lsls	r3, r3, #24
 80014aa:	4990      	ldr	r1, [pc, #576]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b0:	e040      	b.n	8001534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d023      	beq.n	8001502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ba:	4b8c      	ldr	r3, [pc, #560]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a8b      	ldr	r2, [pc, #556]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff fb27 	bl	8000b18 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fb23 	bl	8000b18 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e227      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e0:	4b82      	ldr	r3, [pc, #520]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b7f      	ldr	r3, [pc, #508]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	061b      	lsls	r3, r3, #24
 80014fa:	497c      	ldr	r1, [pc, #496]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
 8001500:	e018      	b.n	8001534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001502:	4b7a      	ldr	r3, [pc, #488]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a79      	ldr	r2, [pc, #484]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fb03 	bl	8000b18 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff faff 	bl	8000b18 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e203      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001528:	4b70      	ldr	r3, [pc, #448]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f0      	bne.n	8001516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d03c      	beq.n	80015ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d01c      	beq.n	8001582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001548:	4b68      	ldr	r3, [pc, #416]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154e:	4a67      	ldr	r2, [pc, #412]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff fade 	bl	8000b18 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff fada 	bl	8000b18 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1de      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001572:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0ef      	beq.n	8001560 <HAL_RCC_OscConfig+0x3ec>
 8001580:	e01b      	b.n	80015ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001582:	4b5a      	ldr	r3, [pc, #360]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001588:	4a58      	ldr	r2, [pc, #352]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001592:	f7ff fac1 	bl	8000b18 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff fabd 	bl	8000b18 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1c1      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ac:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80015ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ef      	bne.n	800159a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80a6 	beq.w	8001714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015cc:	4b47      	ldr	r3, [pc, #284]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10d      	bne.n	80015f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d8:	4b44      	ldr	r3, [pc, #272]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	4a43      	ldr	r2, [pc, #268]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6593      	str	r3, [r2, #88]	; 0x58
 80015e4:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f0:	2301      	movs	r3, #1
 80015f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f4:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <HAL_RCC_OscConfig+0x57c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d118      	bne.n	8001632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001600:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_RCC_OscConfig+0x57c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a3a      	ldr	r2, [pc, #232]	; (80016f0 <HAL_RCC_OscConfig+0x57c>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160c:	f7ff fa84 	bl	8000b18 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001614:	f7ff fa80 	bl	8000b18 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e184      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001626:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <HAL_RCC_OscConfig+0x57c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d108      	bne.n	800164c <HAL_RCC_OscConfig+0x4d8>
 800163a:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 800163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001640:	4a2a      	ldr	r2, [pc, #168]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800164a:	e024      	b.n	8001696 <HAL_RCC_OscConfig+0x522>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d110      	bne.n	8001676 <HAL_RCC_OscConfig+0x502>
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165a:	4a24      	ldr	r2, [pc, #144]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	4a20      	ldr	r2, [pc, #128]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001674:	e00f      	b.n	8001696 <HAL_RCC_OscConfig+0x522>
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167c:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 8001688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168c:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 800168e:	f023 0304 	bic.w	r3, r3, #4
 8001692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d016      	beq.n	80016cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff fa3b 	bl	8000b18 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fa37 	bl	8000b18 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e139      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_OscConfig+0x578>)
 80016be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0ed      	beq.n	80016a6 <HAL_RCC_OscConfig+0x532>
 80016ca:	e01a      	b.n	8001702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff fa24 	bl	8000b18 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d2:	e00f      	b.n	80016f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff fa20 	bl	8000b18 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d906      	bls.n	80016f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e122      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f4:	4b90      	ldr	r3, [pc, #576]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1e8      	bne.n	80016d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001702:	7ffb      	ldrb	r3, [r7, #31]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	4b8b      	ldr	r3, [pc, #556]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	4a8a      	ldr	r2, [pc, #552]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800170e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001712:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8108 	beq.w	800192e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	2b02      	cmp	r3, #2
 8001724:	f040 80d0 	bne.w	80018c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001728:	4b83      	ldr	r3, [pc, #524]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0203 	and.w	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	429a      	cmp	r2, r3
 800173a:	d130      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	3b01      	subs	r3, #1
 8001748:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d127      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d11f      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001768:	2a07      	cmp	r2, #7
 800176a:	bf14      	ite	ne
 800176c:	2201      	movne	r2, #1
 800176e:	2200      	moveq	r2, #0
 8001770:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001772:	4293      	cmp	r3, r2
 8001774:	d113      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d109      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	085b      	lsrs	r3, r3, #1
 8001796:	3b01      	subs	r3, #1
 8001798:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d06e      	beq.n	800187c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d069      	beq.n	8001878 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017a4:	4b64      	ldr	r3, [pc, #400]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017b0:	4b61      	ldr	r3, [pc, #388]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0b7      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017c0:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a5c      	ldr	r2, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80017c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017cc:	f7ff f9a4 	bl	8000b18 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff f9a0 	bl	8000b18 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0a4      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e6:	4b54      	ldr	r3, [pc, #336]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f2:	4b51      	ldr	r3, [pc, #324]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	4b51      	ldr	r3, [pc, #324]	; (800193c <HAL_RCC_OscConfig+0x7c8>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001802:	3a01      	subs	r2, #1
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800180c:	0212      	lsls	r2, r2, #8
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001814:	0852      	lsrs	r2, r2, #1
 8001816:	3a01      	subs	r2, #1
 8001818:	0552      	lsls	r2, r2, #21
 800181a:	4311      	orrs	r1, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001820:	0852      	lsrs	r2, r2, #1
 8001822:	3a01      	subs	r2, #1
 8001824:	0652      	lsls	r2, r2, #25
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800182c:	0912      	lsrs	r2, r2, #4
 800182e:	0452      	lsls	r2, r2, #17
 8001830:	430a      	orrs	r2, r1
 8001832:	4941      	ldr	r1, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 8001834:	4313      	orrs	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001838:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a3e      	ldr	r2, [pc, #248]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800183e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001844:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001850:	f7ff f962 	bl	8000b18 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff f95e 	bl	8000b18 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e062      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	4b33      	ldr	r3, [pc, #204]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001876:	e05a      	b.n	800192e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e059      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187c:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d152      	bne.n	800192e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001888:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2a      	ldr	r2, [pc, #168]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001892:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001894:	4b28      	ldr	r3, [pc, #160]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a27      	ldr	r2, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800189a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018a0:	f7ff f93a 	bl	8000b18 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff f936 	bl	8000b18 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e03a      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x734>
 80018c6:	e032      	b.n	800192e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d02d      	beq.n	800192a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a19      	ldr	r2, [pc, #100]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80018d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4a13      	ldr	r2, [pc, #76]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80018ec:	f023 0303 	bic.w	r3, r3, #3
 80018f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	4a10      	ldr	r2, [pc, #64]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 80018f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff f909 	bl	8000b18 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190a:	f7ff f905 	bl	8000b18 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e009      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_RCC_OscConfig+0x7c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x796>
 8001928:	e001      	b.n	800192e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	f99d808c 	.word	0xf99d808c

08001940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0c8      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <HAL_RCC_ClockConfig+0x1b0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d910      	bls.n	8001984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <HAL_RCC_ClockConfig+0x1b0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 0207 	bic.w	r2, r3, #7
 800196a:	4961      	ldr	r1, [pc, #388]	; (8001af0 <HAL_RCC_ClockConfig+0x1b0>)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <HAL_RCC_ClockConfig+0x1b0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0b0      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d04c      	beq.n	8001a2a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001998:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d121      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e09e      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b0:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d115      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e092      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d109      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e086      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d8:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e07e      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e8:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 0203 	bic.w	r2, r3, #3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	493f      	ldr	r1, [pc, #252]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019fa:	f7ff f88d 	bl	8000b18 <HAL_GetTick>
 80019fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a02:	f7ff f889 	bl	8000b18 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e066      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 020c 	and.w	r2, r3, #12
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d1eb      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a36:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	492c      	ldr	r1, [pc, #176]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a48:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d210      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 0207 	bic.w	r2, r3, #7
 8001a5e:	4924      	ldr	r1, [pc, #144]	; (8001af0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_RCC_ClockConfig+0x1b0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e036      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4918      	ldr	r1, [pc, #96]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4910      	ldr	r1, [pc, #64]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ab6:	f000 f825 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <HAL_RCC_ClockConfig+0x1b4>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	490c      	ldr	r1, [pc, #48]	; (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fef0 	bl	80008c0 <HAL_InitTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40022000 	.word	0x40022000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	08006278 	.word	0x08006278
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b12:	4b3e      	ldr	r3, [pc, #248]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b1c:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x34>
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d121      	bne.n	8001b76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d11e      	bne.n	8001b76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b38:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4a:	0a1b      	lsrs	r3, r3, #8
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	e005      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b60:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10d      	bne.n	8001b8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	e004      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d134      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0xa6>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d003      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xac>
 8001ba8:	e005      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bac:	617b      	str	r3, [r7, #20]
      break;
 8001bae:	e005      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bb2:	617b      	str	r3, [r7, #20]
      break;
 8001bb4:	e002      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	617b      	str	r3, [r7, #20]
      break;
 8001bba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	fb02 f203 	mul.w	r2, r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	0e5b      	lsrs	r3, r3, #25
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	3301      	adds	r3, #1
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bfc:	69bb      	ldr	r3, [r7, #24]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3724      	adds	r7, #36	; 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	08006290 	.word	0x08006290
 8001c14:	00f42400 	.word	0x00f42400

08001c18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c34:	f7ff fff0 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4904      	ldr	r1, [pc, #16]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08006288 	.word	0x08006288

08001c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c60:	f7ff ffda 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0adb      	lsrs	r3, r3, #11
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4904      	ldr	r1, [pc, #16]	; (8001c84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08006288 	.word	0x08006288

08001c88 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	220f      	movs	r2, #15
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_RCC_GetClockConfig+0x60>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0207 	and.w	r2, r3, #7
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	601a      	str	r2, [r3, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40022000 	.word	0x40022000

08001cec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d04:	f7ff f9d2 	bl	80010ac <HAL_PWREx_GetVoltageRange>
 8001d08:	6178      	str	r0, [r7, #20]
 8001d0a:	e014      	b.n	8001d36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	4a24      	ldr	r2, [pc, #144]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d16:	6593      	str	r3, [r2, #88]	; 0x58
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d24:	f7ff f9c2 	bl	80010ac <HAL_PWREx_GetVoltageRange>
 8001d28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3c:	d10b      	bne.n	8001d56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b80      	cmp	r3, #128	; 0x80
 8001d42:	d919      	bls.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2ba0      	cmp	r3, #160	; 0xa0
 8001d48:	d902      	bls.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	e013      	b.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d50:	2301      	movs	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	e010      	b.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b80      	cmp	r3, #128	; 0x80
 8001d5a:	d902      	bls.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	e00a      	b.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b80      	cmp	r3, #128	; 0x80
 8001d66:	d102      	bne.n	8001d6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d68:	2302      	movs	r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	e004      	b.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b70      	cmp	r3, #112	; 0x70
 8001d72:	d101      	bne.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d74:	2301      	movs	r3, #1
 8001d76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 0207 	bic.w	r2, r3, #7
 8001d80:	4909      	ldr	r1, [pc, #36]	; (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d001      	beq.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40022000 	.word	0x40022000

08001dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001db4:	2300      	movs	r3, #0
 8001db6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001db8:	2300      	movs	r3, #0
 8001dba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d041      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dd0:	d02a      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dd6:	d824      	bhi.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ddc:	d008      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001de2:	d81e      	bhi.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dec:	d010      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dee:	e018      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001df0:	4b86      	ldr	r3, [pc, #536]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a85      	ldr	r2, [pc, #532]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dfc:	e015      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fabb 	bl	8002380 <RCCEx_PLLSAI1_Config>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e0e:	e00c      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3320      	adds	r3, #32
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fba6 	bl	8002568 <RCCEx_PLLSAI2_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e20:	e003      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	74fb      	strb	r3, [r7, #19]
      break;
 8001e26:	e000      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e2a:	7cfb      	ldrb	r3, [r7, #19]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e30:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e3e:	4973      	ldr	r1, [pc, #460]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e46:	e001      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e48:	7cfb      	ldrb	r3, [r7, #19]
 8001e4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d041      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e60:	d02a      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e66:	d824      	bhi.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e6c:	d008      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e72:	d81e      	bhi.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d010      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e7e:	e018      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e80:	4b62      	ldr	r3, [pc, #392]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a61      	ldr	r2, [pc, #388]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e8c:	e015      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fa73 	bl	8002380 <RCCEx_PLLSAI1_Config>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e9e:	e00c      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3320      	adds	r3, #32
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fb5e 	bl	8002568 <RCCEx_PLLSAI2_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eb0:	e003      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	74fb      	strb	r3, [r7, #19]
      break;
 8001eb6:	e000      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eba:	7cfb      	ldrb	r3, [r7, #19]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10b      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ec0:	4b52      	ldr	r3, [pc, #328]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ece:	494f      	ldr	r1, [pc, #316]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ed6:	e001      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a0 	beq.w	800202a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001efe:	2300      	movs	r3, #0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00d      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	4a40      	ldr	r2, [pc, #256]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f10:	4b3e      	ldr	r3, [pc, #248]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f20:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a3a      	ldr	r2, [pc, #232]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f2c:	f7fe fdf4 	bl	8000b18 <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f32:	e009      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f34:	f7fe fdf0 	bl	8000b18 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d902      	bls.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	74fb      	strb	r3, [r7, #19]
        break;
 8001f46:	e005      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f48:	4b31      	ldr	r3, [pc, #196]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ef      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d15c      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01f      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d019      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	4a20      	ldr	r2, [pc, #128]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fa4:	4a19      	ldr	r2, [pc, #100]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fdaf 	bl	8000b18 <HAL_GetTick>
 8001fba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7fe fdab 	bl	8000b18 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d902      	bls.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	74fb      	strb	r3, [r7, #19]
            break;
 8001fd4:	e006      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ec      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ffa:	4904      	ldr	r1, [pc, #16]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002002:	e009      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002004:	7cfb      	ldrb	r3, [r7, #19]
 8002006:	74bb      	strb	r3, [r7, #18]
 8002008:	e006      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002018:	7c7b      	ldrb	r3, [r7, #17]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d105      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201e:	4b9e      	ldr	r3, [pc, #632]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	4a9d      	ldr	r2, [pc, #628]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002028:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002036:	4b98      	ldr	r3, [pc, #608]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203c:	f023 0203 	bic.w	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	4994      	ldr	r1, [pc, #592]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00a      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002058:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	f023 020c 	bic.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	498c      	ldr	r1, [pc, #560]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800207a:	4b87      	ldr	r3, [pc, #540]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002080:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	4983      	ldr	r1, [pc, #524]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800209c:	4b7e      	ldr	r3, [pc, #504]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	497b      	ldr	r1, [pc, #492]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020be:	4b76      	ldr	r3, [pc, #472]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	4972      	ldr	r1, [pc, #456]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020e0:	4b6d      	ldr	r3, [pc, #436]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	496a      	ldr	r1, [pc, #424]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002102:	4b65      	ldr	r3, [pc, #404]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002108:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	4961      	ldr	r1, [pc, #388]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002124:	4b5c      	ldr	r3, [pc, #368]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002132:	4959      	ldr	r1, [pc, #356]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002146:	4b54      	ldr	r3, [pc, #336]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002154:	4950      	ldr	r1, [pc, #320]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002168:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	4948      	ldr	r1, [pc, #288]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	493f      	ldr	r1, [pc, #252]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d028      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021ac:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ba:	4937      	ldr	r1, [pc, #220]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ca:	d106      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a31      	ldr	r2, [pc, #196]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d6:	60d3      	str	r3, [r2, #12]
 80021d8:	e011      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021e2:	d10c      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	2101      	movs	r1, #1
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f8c8 	bl	8002380 <RCCEx_PLLSAI1_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d028      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	491f      	ldr	r1, [pc, #124]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002228:	d106      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	4a1a      	ldr	r2, [pc, #104]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002234:	60d3      	str	r3, [r2, #12]
 8002236:	e011      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002240:	d10c      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	2101      	movs	r1, #1
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f899 	bl	8002380 <RCCEx_PLLSAI1_Config>
 800224e:	4603      	mov	r3, r0
 8002250:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002252:	7cfb      	ldrb	r3, [r7, #19]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d02b      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002276:	4908      	ldr	r1, [pc, #32]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002286:	d109      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a02      	ldr	r2, [pc, #8]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002292:	60d3      	str	r3, [r2, #12]
 8002294:	e014      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2101      	movs	r1, #1
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f867 	bl	8002380 <RCCEx_PLLSAI1_Config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d02f      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022cc:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022da:	4928      	ldr	r1, [pc, #160]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022ea:	d10d      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3304      	adds	r3, #4
 80022f0:	2102      	movs	r1, #2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f844 	bl	8002380 <RCCEx_PLLSAI1_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d014      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	74bb      	strb	r3, [r7, #18]
 8002306:	e011      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800230c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002310:	d10c      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3320      	adds	r3, #32
 8002316:	2102      	movs	r1, #2
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f925 	bl	8002568 <RCCEx_PLLSAI2_Config>
 800231e:	4603      	mov	r3, r0
 8002320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002346:	490d      	ldr	r1, [pc, #52]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002360:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800236a:	4904      	ldr	r1, [pc, #16]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002372:	7cbb      	ldrb	r3, [r7, #18]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000

08002380 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800238e:	4b75      	ldr	r3, [pc, #468]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d018      	beq.n	80023cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800239a:	4b72      	ldr	r3, [pc, #456]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f003 0203 	and.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d10d      	bne.n	80023c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
       ||
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023b2:	4b6c      	ldr	r3, [pc, #432]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
       ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d047      	beq.n	8002456 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	e044      	b.n	8002456 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d018      	beq.n	8002406 <RCCEx_PLLSAI1_Config+0x86>
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d825      	bhi.n	8002424 <RCCEx_PLLSAI1_Config+0xa4>
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d002      	beq.n	80023e2 <RCCEx_PLLSAI1_Config+0x62>
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d009      	beq.n	80023f4 <RCCEx_PLLSAI1_Config+0x74>
 80023e0:	e020      	b.n	8002424 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023e2:	4b60      	ldr	r3, [pc, #384]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d11d      	bne.n	800242a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f2:	e01a      	b.n	800242a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023f4:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d116      	bne.n	800242e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002404:	e013      	b.n	800242e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002406:	4b57      	ldr	r3, [pc, #348]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002412:	4b54      	ldr	r3, [pc, #336]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002422:	e006      	b.n	8002432 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      break;
 8002428:	e004      	b.n	8002434 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800242a:	bf00      	nop
 800242c:	e002      	b.n	8002434 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800242e:	bf00      	nop
 8002430:	e000      	b.n	8002434 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002432:	bf00      	nop
    }

    if(status == HAL_OK)
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10d      	bne.n	8002456 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800243a:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6819      	ldr	r1, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	430b      	orrs	r3, r1
 8002450:	4944      	ldr	r1, [pc, #272]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d17d      	bne.n	8002558 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800245c:	4b41      	ldr	r3, [pc, #260]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a40      	ldr	r2, [pc, #256]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002462:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002468:	f7fe fb56 	bl	8000b18 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800246e:	e009      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002470:	f7fe fb52 	bl	8000b18 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d902      	bls.n	8002484 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	73fb      	strb	r3, [r7, #15]
        break;
 8002482:	e005      	b.n	8002490 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002484:	4b37      	ldr	r3, [pc, #220]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ef      	bne.n	8002470 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d160      	bne.n	8002558 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d111      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800249c:	4b31      	ldr	r3, [pc, #196]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6892      	ldr	r2, [r2, #8]
 80024ac:	0211      	lsls	r1, r2, #8
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68d2      	ldr	r2, [r2, #12]
 80024b2:	0912      	lsrs	r2, r2, #4
 80024b4:	0452      	lsls	r2, r2, #17
 80024b6:	430a      	orrs	r2, r1
 80024b8:	492a      	ldr	r1, [pc, #168]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	610b      	str	r3, [r1, #16]
 80024be:	e027      	b.n	8002510 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d112      	bne.n	80024ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024c6:	4b27      	ldr	r3, [pc, #156]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6892      	ldr	r2, [r2, #8]
 80024d6:	0211      	lsls	r1, r2, #8
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6912      	ldr	r2, [r2, #16]
 80024dc:	0852      	lsrs	r2, r2, #1
 80024de:	3a01      	subs	r2, #1
 80024e0:	0552      	lsls	r2, r2, #21
 80024e2:	430a      	orrs	r2, r1
 80024e4:	491f      	ldr	r1, [pc, #124]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	610b      	str	r3, [r1, #16]
 80024ea:	e011      	b.n	8002510 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6892      	ldr	r2, [r2, #8]
 80024fc:	0211      	lsls	r1, r2, #8
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6952      	ldr	r2, [r2, #20]
 8002502:	0852      	lsrs	r2, r2, #1
 8002504:	3a01      	subs	r2, #1
 8002506:	0652      	lsls	r2, r2, #25
 8002508:	430a      	orrs	r2, r1
 800250a:	4916      	ldr	r1, [pc, #88]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a13      	ldr	r2, [pc, #76]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002516:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800251a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7fe fafc 	bl	8000b18 <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002522:	e009      	b.n	8002538 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002524:	f7fe faf8 	bl	8000b18 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d902      	bls.n	8002538 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	73fb      	strb	r3, [r7, #15]
          break;
 8002536:	e005      	b.n	8002544 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0ef      	beq.n	8002524 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	4904      	ldr	r1, [pc, #16]	; (8002564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000

08002568 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002576:	4b6a      	ldr	r3, [pc, #424]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d018      	beq.n	80025b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002582:	4b67      	ldr	r3, [pc, #412]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0203 	and.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d10d      	bne.n	80025ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
       ||
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800259a:	4b61      	ldr	r3, [pc, #388]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
       ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d047      	beq.n	800263e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	e044      	b.n	800263e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d018      	beq.n	80025ee <RCCEx_PLLSAI2_Config+0x86>
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d825      	bhi.n	800260c <RCCEx_PLLSAI2_Config+0xa4>
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d002      	beq.n	80025ca <RCCEx_PLLSAI2_Config+0x62>
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d009      	beq.n	80025dc <RCCEx_PLLSAI2_Config+0x74>
 80025c8:	e020      	b.n	800260c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ca:	4b55      	ldr	r3, [pc, #340]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11d      	bne.n	8002612 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025da:	e01a      	b.n	8002612 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025dc:	4b50      	ldr	r3, [pc, #320]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d116      	bne.n	8002616 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ec:	e013      	b.n	8002616 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ee:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025fa:	4b49      	ldr	r3, [pc, #292]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800260a:	e006      	b.n	800261a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      break;
 8002610:	e004      	b.n	800261c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002612:	bf00      	nop
 8002614:	e002      	b.n	800261c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002616:	bf00      	nop
 8002618:	e000      	b.n	800261c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800261a:	bf00      	nop
    }

    if(status == HAL_OK)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10d      	bne.n	800263e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002622:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6819      	ldr	r1, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	430b      	orrs	r3, r1
 8002638:	4939      	ldr	r1, [pc, #228]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263a:	4313      	orrs	r3, r2
 800263c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d167      	bne.n	8002714 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a35      	ldr	r2, [pc, #212]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002650:	f7fe fa62 	bl	8000b18 <HAL_GetTick>
 8002654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002656:	e009      	b.n	800266c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002658:	f7fe fa5e 	bl	8000b18 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d902      	bls.n	800266c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	73fb      	strb	r3, [r7, #15]
        break;
 800266a:	e005      	b.n	8002678 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800266c:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ef      	bne.n	8002658 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d14a      	bne.n	8002714 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d111      	bne.n	80026a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002684:	4b26      	ldr	r3, [pc, #152]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800268c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6892      	ldr	r2, [r2, #8]
 8002694:	0211      	lsls	r1, r2, #8
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68d2      	ldr	r2, [r2, #12]
 800269a:	0912      	lsrs	r2, r2, #4
 800269c:	0452      	lsls	r2, r2, #17
 800269e:	430a      	orrs	r2, r1
 80026a0:	491f      	ldr	r1, [pc, #124]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	614b      	str	r3, [r1, #20]
 80026a6:	e011      	b.n	80026cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6892      	ldr	r2, [r2, #8]
 80026b8:	0211      	lsls	r1, r2, #8
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6912      	ldr	r2, [r2, #16]
 80026be:	0852      	lsrs	r2, r2, #1
 80026c0:	3a01      	subs	r2, #1
 80026c2:	0652      	lsls	r2, r2, #25
 80026c4:	430a      	orrs	r2, r1
 80026c6:	4916      	ldr	r1, [pc, #88]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a13      	ldr	r2, [pc, #76]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fa1e 	bl	8000b18 <HAL_GetTick>
 80026dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026de:	e009      	b.n	80026f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026e0:	f7fe fa1a 	bl	8000b18 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d902      	bls.n	80026f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	73fb      	strb	r3, [r7, #15]
          break;
 80026f2:	e005      	b.n	8002700 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026f4:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ef      	beq.n	80026e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	4904      	ldr	r1, [pc, #16]	; (8002720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002710:	4313      	orrs	r3, r2
 8002712:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000

08002724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e049      	b.n	80027ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f841 	bl	80027d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3304      	adds	r3, #4
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f000 f9f8 	bl	8002b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d001      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e04f      	b.n	80028a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a23      	ldr	r2, [pc, #140]	; (80028ac <HAL_TIM_Base_Start_IT+0xc4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01d      	beq.n	800285e <HAL_TIM_Base_Start_IT+0x76>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282a:	d018      	beq.n	800285e <HAL_TIM_Base_Start_IT+0x76>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_TIM_Base_Start_IT+0x76>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00e      	beq.n	800285e <HAL_TIM_Base_Start_IT+0x76>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_TIM_Base_Start_IT+0x76>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_TIM_Base_Start_IT+0xd4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_TIM_Base_Start_IT+0x76>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d115      	bne.n	800288a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002866:	4013      	ands	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b06      	cmp	r3, #6
 800286e:	d015      	beq.n	800289c <HAL_TIM_Base_Start_IT+0xb4>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002876:	d011      	beq.n	800289c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	e008      	b.n	800289c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e000      	b.n	800289e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40000800 	.word	0x40000800
 80028b8:	40000c00 	.word	0x40000c00
 80028bc:	40013400 	.word	0x40013400
 80028c0:	40014000 	.word	0x40014000
 80028c4:	00010007 	.word	0x00010007

080028c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d122      	bne.n	8002924 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d11b      	bne.n	8002924 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0202 	mvn.w	r2, #2
 80028f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f905 	bl	8002b1a <HAL_TIM_IC_CaptureCallback>
 8002910:	e005      	b.n	800291e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8f7 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f908 	bl	8002b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b04      	cmp	r3, #4
 8002930:	d122      	bne.n	8002978 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b04      	cmp	r3, #4
 800293e:	d11b      	bne.n	8002978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0204 	mvn.w	r2, #4
 8002948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f8db 	bl	8002b1a <HAL_TIM_IC_CaptureCallback>
 8002964:	e005      	b.n	8002972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f8cd 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f8de 	bl	8002b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b08      	cmp	r3, #8
 8002984:	d122      	bne.n	80029cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b08      	cmp	r3, #8
 8002992:	d11b      	bne.n	80029cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0208 	mvn.w	r2, #8
 800299c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2204      	movs	r2, #4
 80029a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8b1 	bl	8002b1a <HAL_TIM_IC_CaptureCallback>
 80029b8:	e005      	b.n	80029c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8a3 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f8b4 	bl	8002b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d122      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d11b      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0210 	mvn.w	r2, #16
 80029f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2208      	movs	r2, #8
 80029f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f887 	bl	8002b1a <HAL_TIM_IC_CaptureCallback>
 8002a0c:	e005      	b.n	8002a1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f879 	bl	8002b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f88a 	bl	8002b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d10e      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d107      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0201 	mvn.w	r2, #1
 8002a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fd fe86 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b80      	cmp	r3, #128	; 0x80
 8002a58:	d10e      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b80      	cmp	r3, #128	; 0x80
 8002a66:	d107      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f914 	bl	8002ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a86:	d10e      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	d107      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f907 	bl	8002cb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d107      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f838 	bl	8002b42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d10e      	bne.n	8002afe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d107      	bne.n	8002afe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0220 	mvn.w	r2, #32
 8002af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f8c7 	bl	8002c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <TIM_Base_SetConfig+0x114>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b76:	d00f      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a3d      	ldr	r2, [pc, #244]	; (8002c70 <TIM_Base_SetConfig+0x118>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00b      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a3c      	ldr	r2, [pc, #240]	; (8002c74 <TIM_Base_SetConfig+0x11c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3b      	ldr	r2, [pc, #236]	; (8002c78 <TIM_Base_SetConfig+0x120>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3a      	ldr	r2, [pc, #232]	; (8002c7c <TIM_Base_SetConfig+0x124>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d108      	bne.n	8002baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a2f      	ldr	r2, [pc, #188]	; (8002c6c <TIM_Base_SetConfig+0x114>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d01f      	beq.n	8002bf2 <TIM_Base_SetConfig+0x9a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d01b      	beq.n	8002bf2 <TIM_Base_SetConfig+0x9a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a2c      	ldr	r2, [pc, #176]	; (8002c70 <TIM_Base_SetConfig+0x118>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d017      	beq.n	8002bf2 <TIM_Base_SetConfig+0x9a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <TIM_Base_SetConfig+0x11c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <TIM_Base_SetConfig+0x9a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a2a      	ldr	r2, [pc, #168]	; (8002c78 <TIM_Base_SetConfig+0x120>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00f      	beq.n	8002bf2 <TIM_Base_SetConfig+0x9a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <TIM_Base_SetConfig+0x124>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00b      	beq.n	8002bf2 <TIM_Base_SetConfig+0x9a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <TIM_Base_SetConfig+0x128>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <TIM_Base_SetConfig+0x9a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a27      	ldr	r2, [pc, #156]	; (8002c84 <TIM_Base_SetConfig+0x12c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d003      	beq.n	8002bf2 <TIM_Base_SetConfig+0x9a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <TIM_Base_SetConfig+0x130>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d108      	bne.n	8002c04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a10      	ldr	r2, [pc, #64]	; (8002c6c <TIM_Base_SetConfig+0x114>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00f      	beq.n	8002c50 <TIM_Base_SetConfig+0xf8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <TIM_Base_SetConfig+0x124>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00b      	beq.n	8002c50 <TIM_Base_SetConfig+0xf8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <TIM_Base_SetConfig+0x128>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d007      	beq.n	8002c50 <TIM_Base_SetConfig+0xf8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <TIM_Base_SetConfig+0x12c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_Base_SetConfig+0xf8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <TIM_Base_SetConfig+0x130>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d103      	bne.n	8002c58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	615a      	str	r2, [r3, #20]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40000c00 	.word	0x40000c00
 8002c7c:	40013400 	.word	0x40013400
 8002c80:	40014000 	.word	0x40014000
 8002c84:	40014400 	.word	0x40014400
 8002c88:	40014800 	.word	0x40014800

08002c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e040      	b.n	8002d5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fda6 	bl	800083c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2224      	movs	r2, #36	; 0x24
 8002cf4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f8c0 	bl	8002e8c <UART_SetConfig>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e022      	b.n	8002d5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fb3e 	bl	80033a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fbc5 	bl	80034e4 <UART_CheckIdleState>
 8002d5a:	4603      	mov	r3, r0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	f040 8082 	bne.w	8002e82 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_UART_Transmit+0x26>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07a      	b.n	8002e84 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_UART_Transmit+0x38>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e073      	b.n	8002e84 <HAL_UART_Transmit+0x120>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2221      	movs	r2, #33	; 0x21
 8002db0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db2:	f7fd feb1 	bl	8000b18 <HAL_GetTick>
 8002db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	88fa      	ldrh	r2, [r7, #6]
 8002dbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd0:	d108      	bne.n	8002de4 <HAL_UART_Transmit+0x80>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	e003      	b.n	8002dec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002df4:	e02d      	b.n	8002e52 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fbb8 	bl	8003576 <UART_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e039      	b.n	8002e84 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	881a      	ldrh	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e22:	b292      	uxth	r2, r2
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	3302      	adds	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	e008      	b.n	8002e40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	b292      	uxth	r2, r2
 8002e38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1cb      	bne.n	8002df6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2140      	movs	r1, #64	; 0x40
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fb84 	bl	8003576 <UART_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e005      	b.n	8002e84 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
  }
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e8c:	b5b0      	push	{r4, r5, r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4bad      	ldr	r3, [pc, #692]	; (800316c <UART_SetConfig+0x2e0>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	69f9      	ldr	r1, [r7, #28]
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4aa2      	ldr	r2, [pc, #648]	; (8003170 <UART_SetConfig+0x2e4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a99      	ldr	r2, [pc, #612]	; (8003174 <UART_SetConfig+0x2e8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d121      	bne.n	8002f56 <UART_SetConfig+0xca>
 8002f12:	4b99      	ldr	r3, [pc, #612]	; (8003178 <UART_SetConfig+0x2ec>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d817      	bhi.n	8002f50 <UART_SetConfig+0xc4>
 8002f20:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <UART_SetConfig+0x9c>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f39 	.word	0x08002f39
 8002f2c:	08002f45 	.word	0x08002f45
 8002f30:	08002f3f 	.word	0x08002f3f
 8002f34:	08002f4b 	.word	0x08002f4b
 8002f38:	2301      	movs	r3, #1
 8002f3a:	76fb      	strb	r3, [r7, #27]
 8002f3c:	e0e7      	b.n	800310e <UART_SetConfig+0x282>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	76fb      	strb	r3, [r7, #27]
 8002f42:	e0e4      	b.n	800310e <UART_SetConfig+0x282>
 8002f44:	2304      	movs	r3, #4
 8002f46:	76fb      	strb	r3, [r7, #27]
 8002f48:	e0e1      	b.n	800310e <UART_SetConfig+0x282>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	76fb      	strb	r3, [r7, #27]
 8002f4e:	e0de      	b.n	800310e <UART_SetConfig+0x282>
 8002f50:	2310      	movs	r3, #16
 8002f52:	76fb      	strb	r3, [r7, #27]
 8002f54:	e0db      	b.n	800310e <UART_SetConfig+0x282>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a88      	ldr	r2, [pc, #544]	; (800317c <UART_SetConfig+0x2f0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d132      	bne.n	8002fc6 <UART_SetConfig+0x13a>
 8002f60:	4b85      	ldr	r3, [pc, #532]	; (8003178 <UART_SetConfig+0x2ec>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d828      	bhi.n	8002fc0 <UART_SetConfig+0x134>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <UART_SetConfig+0xe8>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	08002fc1 	.word	0x08002fc1
 8002f7c:	08002fc1 	.word	0x08002fc1
 8002f80:	08002fc1 	.word	0x08002fc1
 8002f84:	08002fb5 	.word	0x08002fb5
 8002f88:	08002fc1 	.word	0x08002fc1
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	08002fc1 	.word	0x08002fc1
 8002f94:	08002faf 	.word	0x08002faf
 8002f98:	08002fc1 	.word	0x08002fc1
 8002f9c:	08002fc1 	.word	0x08002fc1
 8002fa0:	08002fc1 	.word	0x08002fc1
 8002fa4:	08002fbb 	.word	0x08002fbb
 8002fa8:	2300      	movs	r3, #0
 8002faa:	76fb      	strb	r3, [r7, #27]
 8002fac:	e0af      	b.n	800310e <UART_SetConfig+0x282>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	76fb      	strb	r3, [r7, #27]
 8002fb2:	e0ac      	b.n	800310e <UART_SetConfig+0x282>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	76fb      	strb	r3, [r7, #27]
 8002fb8:	e0a9      	b.n	800310e <UART_SetConfig+0x282>
 8002fba:	2308      	movs	r3, #8
 8002fbc:	76fb      	strb	r3, [r7, #27]
 8002fbe:	e0a6      	b.n	800310e <UART_SetConfig+0x282>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	76fb      	strb	r3, [r7, #27]
 8002fc4:	e0a3      	b.n	800310e <UART_SetConfig+0x282>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a6d      	ldr	r2, [pc, #436]	; (8003180 <UART_SetConfig+0x2f4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d120      	bne.n	8003012 <UART_SetConfig+0x186>
 8002fd0:	4b69      	ldr	r3, [pc, #420]	; (8003178 <UART_SetConfig+0x2ec>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fda:	2b30      	cmp	r3, #48	; 0x30
 8002fdc:	d013      	beq.n	8003006 <UART_SetConfig+0x17a>
 8002fde:	2b30      	cmp	r3, #48	; 0x30
 8002fe0:	d814      	bhi.n	800300c <UART_SetConfig+0x180>
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d009      	beq.n	8002ffa <UART_SetConfig+0x16e>
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d810      	bhi.n	800300c <UART_SetConfig+0x180>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <UART_SetConfig+0x168>
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d006      	beq.n	8003000 <UART_SetConfig+0x174>
 8002ff2:	e00b      	b.n	800300c <UART_SetConfig+0x180>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	76fb      	strb	r3, [r7, #27]
 8002ff8:	e089      	b.n	800310e <UART_SetConfig+0x282>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	76fb      	strb	r3, [r7, #27]
 8002ffe:	e086      	b.n	800310e <UART_SetConfig+0x282>
 8003000:	2304      	movs	r3, #4
 8003002:	76fb      	strb	r3, [r7, #27]
 8003004:	e083      	b.n	800310e <UART_SetConfig+0x282>
 8003006:	2308      	movs	r3, #8
 8003008:	76fb      	strb	r3, [r7, #27]
 800300a:	e080      	b.n	800310e <UART_SetConfig+0x282>
 800300c:	2310      	movs	r3, #16
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e07d      	b.n	800310e <UART_SetConfig+0x282>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a5b      	ldr	r2, [pc, #364]	; (8003184 <UART_SetConfig+0x2f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d120      	bne.n	800305e <UART_SetConfig+0x1d2>
 800301c:	4b56      	ldr	r3, [pc, #344]	; (8003178 <UART_SetConfig+0x2ec>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003026:	2bc0      	cmp	r3, #192	; 0xc0
 8003028:	d013      	beq.n	8003052 <UART_SetConfig+0x1c6>
 800302a:	2bc0      	cmp	r3, #192	; 0xc0
 800302c:	d814      	bhi.n	8003058 <UART_SetConfig+0x1cc>
 800302e:	2b80      	cmp	r3, #128	; 0x80
 8003030:	d009      	beq.n	8003046 <UART_SetConfig+0x1ba>
 8003032:	2b80      	cmp	r3, #128	; 0x80
 8003034:	d810      	bhi.n	8003058 <UART_SetConfig+0x1cc>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <UART_SetConfig+0x1b4>
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d006      	beq.n	800304c <UART_SetConfig+0x1c0>
 800303e:	e00b      	b.n	8003058 <UART_SetConfig+0x1cc>
 8003040:	2300      	movs	r3, #0
 8003042:	76fb      	strb	r3, [r7, #27]
 8003044:	e063      	b.n	800310e <UART_SetConfig+0x282>
 8003046:	2302      	movs	r3, #2
 8003048:	76fb      	strb	r3, [r7, #27]
 800304a:	e060      	b.n	800310e <UART_SetConfig+0x282>
 800304c:	2304      	movs	r3, #4
 800304e:	76fb      	strb	r3, [r7, #27]
 8003050:	e05d      	b.n	800310e <UART_SetConfig+0x282>
 8003052:	2308      	movs	r3, #8
 8003054:	76fb      	strb	r3, [r7, #27]
 8003056:	e05a      	b.n	800310e <UART_SetConfig+0x282>
 8003058:	2310      	movs	r3, #16
 800305a:	76fb      	strb	r3, [r7, #27]
 800305c:	e057      	b.n	800310e <UART_SetConfig+0x282>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a49      	ldr	r2, [pc, #292]	; (8003188 <UART_SetConfig+0x2fc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d125      	bne.n	80030b4 <UART_SetConfig+0x228>
 8003068:	4b43      	ldr	r3, [pc, #268]	; (8003178 <UART_SetConfig+0x2ec>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003076:	d017      	beq.n	80030a8 <UART_SetConfig+0x21c>
 8003078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800307c:	d817      	bhi.n	80030ae <UART_SetConfig+0x222>
 800307e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003082:	d00b      	beq.n	800309c <UART_SetConfig+0x210>
 8003084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003088:	d811      	bhi.n	80030ae <UART_SetConfig+0x222>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <UART_SetConfig+0x20a>
 800308e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003092:	d006      	beq.n	80030a2 <UART_SetConfig+0x216>
 8003094:	e00b      	b.n	80030ae <UART_SetConfig+0x222>
 8003096:	2300      	movs	r3, #0
 8003098:	76fb      	strb	r3, [r7, #27]
 800309a:	e038      	b.n	800310e <UART_SetConfig+0x282>
 800309c:	2302      	movs	r3, #2
 800309e:	76fb      	strb	r3, [r7, #27]
 80030a0:	e035      	b.n	800310e <UART_SetConfig+0x282>
 80030a2:	2304      	movs	r3, #4
 80030a4:	76fb      	strb	r3, [r7, #27]
 80030a6:	e032      	b.n	800310e <UART_SetConfig+0x282>
 80030a8:	2308      	movs	r3, #8
 80030aa:	76fb      	strb	r3, [r7, #27]
 80030ac:	e02f      	b.n	800310e <UART_SetConfig+0x282>
 80030ae:	2310      	movs	r3, #16
 80030b0:	76fb      	strb	r3, [r7, #27]
 80030b2:	e02c      	b.n	800310e <UART_SetConfig+0x282>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2d      	ldr	r2, [pc, #180]	; (8003170 <UART_SetConfig+0x2e4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d125      	bne.n	800310a <UART_SetConfig+0x27e>
 80030be:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <UART_SetConfig+0x2ec>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030cc:	d017      	beq.n	80030fe <UART_SetConfig+0x272>
 80030ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030d2:	d817      	bhi.n	8003104 <UART_SetConfig+0x278>
 80030d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d8:	d00b      	beq.n	80030f2 <UART_SetConfig+0x266>
 80030da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030de:	d811      	bhi.n	8003104 <UART_SetConfig+0x278>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <UART_SetConfig+0x260>
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e8:	d006      	beq.n	80030f8 <UART_SetConfig+0x26c>
 80030ea:	e00b      	b.n	8003104 <UART_SetConfig+0x278>
 80030ec:	2300      	movs	r3, #0
 80030ee:	76fb      	strb	r3, [r7, #27]
 80030f0:	e00d      	b.n	800310e <UART_SetConfig+0x282>
 80030f2:	2302      	movs	r3, #2
 80030f4:	76fb      	strb	r3, [r7, #27]
 80030f6:	e00a      	b.n	800310e <UART_SetConfig+0x282>
 80030f8:	2304      	movs	r3, #4
 80030fa:	76fb      	strb	r3, [r7, #27]
 80030fc:	e007      	b.n	800310e <UART_SetConfig+0x282>
 80030fe:	2308      	movs	r3, #8
 8003100:	76fb      	strb	r3, [r7, #27]
 8003102:	e004      	b.n	800310e <UART_SetConfig+0x282>
 8003104:	2310      	movs	r3, #16
 8003106:	76fb      	strb	r3, [r7, #27]
 8003108:	e001      	b.n	800310e <UART_SetConfig+0x282>
 800310a:	2310      	movs	r3, #16
 800310c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a17      	ldr	r2, [pc, #92]	; (8003170 <UART_SetConfig+0x2e4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	f040 8087 	bne.w	8003228 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800311a:	7efb      	ldrb	r3, [r7, #27]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d837      	bhi.n	8003190 <UART_SetConfig+0x304>
 8003120:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <UART_SetConfig+0x29c>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	0800314d 	.word	0x0800314d
 800312c:	08003191 	.word	0x08003191
 8003130:	08003155 	.word	0x08003155
 8003134:	08003191 	.word	0x08003191
 8003138:	0800315b 	.word	0x0800315b
 800313c:	08003191 	.word	0x08003191
 8003140:	08003191 	.word	0x08003191
 8003144:	08003191 	.word	0x08003191
 8003148:	08003163 	.word	0x08003163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800314c:	f7fe fd70 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8003150:	6178      	str	r0, [r7, #20]
        break;
 8003152:	e022      	b.n	800319a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <UART_SetConfig+0x300>)
 8003156:	617b      	str	r3, [r7, #20]
        break;
 8003158:	e01f      	b.n	800319a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315a:	f7fe fcd3 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 800315e:	6178      	str	r0, [r7, #20]
        break;
 8003160:	e01b      	b.n	800319a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003166:	617b      	str	r3, [r7, #20]
        break;
 8003168:	e017      	b.n	800319a <UART_SetConfig+0x30e>
 800316a:	bf00      	nop
 800316c:	efff69f3 	.word	0xefff69f3
 8003170:	40008000 	.word	0x40008000
 8003174:	40013800 	.word	0x40013800
 8003178:	40021000 	.word	0x40021000
 800317c:	40004400 	.word	0x40004400
 8003180:	40004800 	.word	0x40004800
 8003184:	40004c00 	.word	0x40004c00
 8003188:	40005000 	.word	0x40005000
 800318c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	76bb      	strb	r3, [r7, #26]
        break;
 8003198:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80f1 	beq.w	8003384 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d305      	bcc.n	80031be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d902      	bls.n	80031c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	76bb      	strb	r3, [r7, #26]
 80031c2:	e0df      	b.n	8003384 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	020b      	lsls	r3, r1, #8
 80031d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031da:	0202      	lsls	r2, r0, #8
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	6849      	ldr	r1, [r1, #4]
 80031e0:	0849      	lsrs	r1, r1, #1
 80031e2:	4608      	mov	r0, r1
 80031e4:	f04f 0100 	mov.w	r1, #0
 80031e8:	1814      	adds	r4, r2, r0
 80031ea:	eb43 0501 	adc.w	r5, r3, r1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	4620      	mov	r0, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fc ffe8 	bl	80001d0 <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4613      	mov	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320e:	d308      	bcc.n	8003222 <UART_SetConfig+0x396>
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003216:	d204      	bcs.n	8003222 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	e0b0      	b.n	8003384 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	76bb      	strb	r3, [r7, #26]
 8003226:	e0ad      	b.n	8003384 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003230:	d15c      	bne.n	80032ec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003232:	7efb      	ldrb	r3, [r7, #27]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d828      	bhi.n	800328a <UART_SetConfig+0x3fe>
 8003238:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <UART_SetConfig+0x3b4>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	08003265 	.word	0x08003265
 8003244:	0800326d 	.word	0x0800326d
 8003248:	08003275 	.word	0x08003275
 800324c:	0800328b 	.word	0x0800328b
 8003250:	0800327b 	.word	0x0800327b
 8003254:	0800328b 	.word	0x0800328b
 8003258:	0800328b 	.word	0x0800328b
 800325c:	0800328b 	.word	0x0800328b
 8003260:	08003283 	.word	0x08003283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003264:	f7fe fce4 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8003268:	6178      	str	r0, [r7, #20]
        break;
 800326a:	e013      	b.n	8003294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800326c:	f7fe fcf6 	bl	8001c5c <HAL_RCC_GetPCLK2Freq>
 8003270:	6178      	str	r0, [r7, #20]
        break;
 8003272:	e00f      	b.n	8003294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003274:	4b49      	ldr	r3, [pc, #292]	; (800339c <UART_SetConfig+0x510>)
 8003276:	617b      	str	r3, [r7, #20]
        break;
 8003278:	e00c      	b.n	8003294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800327a:	f7fe fc43 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 800327e:	6178      	str	r0, [r7, #20]
        break;
 8003280:	e008      	b.n	8003294 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003286:	617b      	str	r3, [r7, #20]
        break;
 8003288:	e004      	b.n	8003294 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	76bb      	strb	r3, [r7, #26]
        break;
 8003292:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d074      	beq.n	8003384 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005a      	lsls	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	441a      	add	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b0f      	cmp	r3, #15
 80032b6:	d916      	bls.n	80032e6 <UART_SetConfig+0x45a>
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032be:	d212      	bcs.n	80032e6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f023 030f 	bic.w	r3, r3, #15
 80032c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	89fb      	ldrh	r3, [r7, #14]
 80032d8:	4313      	orrs	r3, r2
 80032da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	89fa      	ldrh	r2, [r7, #14]
 80032e2:	60da      	str	r2, [r3, #12]
 80032e4:	e04e      	b.n	8003384 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	76bb      	strb	r3, [r7, #26]
 80032ea:	e04b      	b.n	8003384 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ec:	7efb      	ldrb	r3, [r7, #27]
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d827      	bhi.n	8003342 <UART_SetConfig+0x4b6>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <UART_SetConfig+0x46c>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	0800331d 	.word	0x0800331d
 80032fc:	08003325 	.word	0x08003325
 8003300:	0800332d 	.word	0x0800332d
 8003304:	08003343 	.word	0x08003343
 8003308:	08003333 	.word	0x08003333
 800330c:	08003343 	.word	0x08003343
 8003310:	08003343 	.word	0x08003343
 8003314:	08003343 	.word	0x08003343
 8003318:	0800333b 	.word	0x0800333b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800331c:	f7fe fc88 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8003320:	6178      	str	r0, [r7, #20]
        break;
 8003322:	e013      	b.n	800334c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003324:	f7fe fc9a 	bl	8001c5c <HAL_RCC_GetPCLK2Freq>
 8003328:	6178      	str	r0, [r7, #20]
        break;
 800332a:	e00f      	b.n	800334c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <UART_SetConfig+0x510>)
 800332e:	617b      	str	r3, [r7, #20]
        break;
 8003330:	e00c      	b.n	800334c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003332:	f7fe fbe7 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8003336:	6178      	str	r0, [r7, #20]
        break;
 8003338:	e008      	b.n	800334c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800333a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333e:	617b      	str	r3, [r7, #20]
        break;
 8003340:	e004      	b.n	800334c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	76bb      	strb	r3, [r7, #26]
        break;
 800334a:	bf00      	nop
    }

    if (pclk != 0U)
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d018      	beq.n	8003384 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	085a      	lsrs	r2, r3, #1
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	441a      	add	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b0f      	cmp	r3, #15
 800336c:	d908      	bls.n	8003380 <UART_SetConfig+0x4f4>
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d204      	bcs.n	8003380 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	e001      	b.n	8003384 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003390:	7ebb      	ldrb	r3, [r7, #26]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bdb0      	pop	{r4, r5, r7, pc}
 800339a:	bf00      	nop
 800339c:	00f42400 	.word	0x00f42400

080033a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01a      	beq.n	80034b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349e:	d10a      	bne.n	80034b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
  }
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034f4:	f7fd fb10 	bl	8000b18 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b08      	cmp	r3, #8
 8003506:	d10e      	bne.n	8003526 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f82d 	bl	8003576 <UART_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e023      	b.n	800356e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d10e      	bne.n	8003552 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f817 	bl	8003576 <UART_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e00d      	b.n	800356e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003586:	e05e      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800358e:	d05a      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003590:	f7fd fac2 	bl	8000b18 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	429a      	cmp	r2, r3
 800359e:	d302      	bcc.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d11b      	bne.n	80035de <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e043      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d02c      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fa:	d124      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003604:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003614:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00f      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	429a      	cmp	r2, r3
 8003662:	d091      	beq.n	8003588 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <__NVIC_SetPriority>:
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db0a      	blt.n	800369a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	490c      	ldr	r1, [pc, #48]	; (80036bc <__NVIC_SetPriority+0x4c>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	440b      	add	r3, r1
 8003694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003698:	e00a      	b.n	80036b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4908      	ldr	r1, [pc, #32]	; (80036c0 <__NVIC_SetPriority+0x50>)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3b04      	subs	r3, #4
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	440b      	add	r3, r1
 80036ae:	761a      	strb	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <SysTick_Handler+0x1c>)
 80036ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80036cc:	f001 fcfe 	bl	80050cc <xTaskGetSchedulerState>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d001      	beq.n	80036da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80036d6:	f002 fae7 	bl	8005ca8 <xPortSysTickHandler>
  }
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	e000e010 	.word	0xe000e010

080036e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80036e8:	2100      	movs	r1, #0
 80036ea:	f06f 0004 	mvn.w	r0, #4
 80036ee:	f7ff ffbf 	bl	8003670 <__NVIC_SetPriority>
#endif
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036fe:	f3ef 8305 	mrs	r3, IPSR
 8003702:	603b      	str	r3, [r7, #0]
  return(result);
 8003704:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800370a:	f06f 0305 	mvn.w	r3, #5
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	e00c      	b.n	800372c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <osKernelInitialize+0x44>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d105      	bne.n	8003726 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <osKernelInitialize+0x44>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003720:	2300      	movs	r3, #0
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	e002      	b.n	800372c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800372a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800372c:	687b      	ldr	r3, [r7, #4]
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	200000b8 	.word	0x200000b8

08003740 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003746:	f3ef 8305 	mrs	r3, IPSR
 800374a:	603b      	str	r3, [r7, #0]
  return(result);
 800374c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003752:	f06f 0305 	mvn.w	r3, #5
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	e010      	b.n	800377c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <osKernelStart+0x48>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d109      	bne.n	8003776 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003762:	f7ff ffbf 	bl	80036e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <osKernelStart+0x48>)
 8003768:	2202      	movs	r2, #2
 800376a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800376c:	f001 f866 	bl	800483c <vTaskStartScheduler>
      stat = osOK;
 8003770:	2300      	movs	r3, #0
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	e002      	b.n	800377c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800377a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800377c:	687b      	ldr	r3, [r7, #4]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200000b8 	.word	0x200000b8

0800378c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b08e      	sub	sp, #56	; 0x38
 8003790:	af04      	add	r7, sp, #16
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800379c:	f3ef 8305 	mrs	r3, IPSR
 80037a0:	617b      	str	r3, [r7, #20]
  return(result);
 80037a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d17e      	bne.n	80038a6 <osThreadNew+0x11a>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d07b      	beq.n	80038a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80037b2:	2318      	movs	r3, #24
 80037b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d045      	beq.n	8003852 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <osThreadNew+0x48>
        name = attr->name;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <osThreadNew+0x6e>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b38      	cmp	r3, #56	; 0x38
 80037ec:	d805      	bhi.n	80037fa <osThreadNew+0x6e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <osThreadNew+0x72>
        return (NULL);
 80037fa:	2300      	movs	r3, #0
 80037fc:	e054      	b.n	80038a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00e      	beq.n	8003834 <osThreadNew+0xa8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b5b      	cmp	r3, #91	; 0x5b
 800381c:	d90a      	bls.n	8003834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003822:	2b00      	cmp	r3, #0
 8003824:	d006      	beq.n	8003834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <osThreadNew+0xa8>
        mem = 1;
 800382e:	2301      	movs	r3, #1
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	e010      	b.n	8003856 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10c      	bne.n	8003856 <osThreadNew+0xca>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d108      	bne.n	8003856 <osThreadNew+0xca>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <osThreadNew+0xca>
          mem = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e001      	b.n	8003856 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d110      	bne.n	800387e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003864:	9202      	str	r2, [sp, #8]
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6a3a      	ldr	r2, [r7, #32]
 8003870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 fe0c 	bl	8004490 <xTaskCreateStatic>
 8003878:	4603      	mov	r3, r0
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	e013      	b.n	80038a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d110      	bne.n	80038a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	b29a      	uxth	r2, r3
 8003888:	f107 0310 	add.w	r3, r7, #16
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fe57 	bl	800454a <xTaskCreate>
 800389c:	4603      	mov	r3, r0
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d001      	beq.n	80038a6 <osThreadNew+0x11a>
            hTask = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80038a6:	693b      	ldr	r3, [r7, #16]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3728      	adds	r7, #40	; 0x28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038b8:	f3ef 8305 	mrs	r3, IPSR
 80038bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80038be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <osDelay+0x1c>
    stat = osErrorISR;
 80038c4:	f06f 0305 	mvn.w	r3, #5
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	e007      	b.n	80038dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 ff7c 	bl	80047d4 <vTaskDelay>
    }
  }

  return (stat);
 80038dc:	68fb      	ldr	r3, [r7, #12]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a07      	ldr	r2, [pc, #28]	; (8003914 <vApplicationGetIdleTaskMemory+0x2c>)
 80038f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4a06      	ldr	r2, [pc, #24]	; (8003918 <vApplicationGetIdleTaskMemory+0x30>)
 80038fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2280      	movs	r2, #128	; 0x80
 8003904:	601a      	str	r2, [r3, #0]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	200000bc 	.word	0x200000bc
 8003918:	20000118 	.word	0x20000118

0800391c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a07      	ldr	r2, [pc, #28]	; (8003948 <vApplicationGetTimerTaskMemory+0x2c>)
 800392c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4a06      	ldr	r2, [pc, #24]	; (800394c <vApplicationGetTimerTaskMemory+0x30>)
 8003932:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800393a:	601a      	str	r2, [r3, #0]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	20000318 	.word	0x20000318
 800394c:	20000374 	.word	0x20000374

08003950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f103 0208 	add.w	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003968:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f103 0208 	add.w	r2, r3, #8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f103 0208 	add.w	r2, r3, #8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	601a      	str	r2, [r3, #0]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a08:	d103      	bne.n	8003a12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e00c      	b.n	8003a2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3308      	adds	r3, #8
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e002      	b.n	8003a20 <vListInsert+0x2e>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d2f6      	bcs.n	8003a1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	601a      	str	r2, [r3, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6852      	ldr	r2, [r2, #4]
 8003a84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d103      	bne.n	8003a98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	1e5a      	subs	r2, r3, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ae2:	f002 f84f 	bl	8005b84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	68f9      	ldr	r1, [r7, #12]
 8003af0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003af2:	fb01 f303 	mul.w	r3, r1, r3
 8003af6:	441a      	add	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	3b01      	subs	r3, #1
 8003b14:	68f9      	ldr	r1, [r7, #12]
 8003b16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	441a      	add	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	22ff      	movs	r2, #255	; 0xff
 8003b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	22ff      	movs	r2, #255	; 0xff
 8003b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d114      	bne.n	8003b62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01a      	beq.n	8003b76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3310      	adds	r3, #16
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 f903 	bl	8004d50 <xTaskRemoveFromEventList>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d012      	beq.n	8003b76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <xQueueGenericReset+0xcc>)
 8003b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	e009      	b.n	8003b76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3310      	adds	r3, #16
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fef2 	bl	8003950 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3324      	adds	r3, #36	; 0x24
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff feed 	bl	8003950 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b76:	f002 f835 	bl	8005be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b7a:	2301      	movs	r3, #1
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08e      	sub	sp, #56	; 0x38
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bae:	bf00      	nop
 8003bb0:	e7fe      	b.n	8003bb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bca:	bf00      	nop
 8003bcc:	e7fe      	b.n	8003bcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <xQueueGenericCreateStatic+0x52>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <xQueueGenericCreateStatic+0x56>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <xQueueGenericCreateStatic+0x58>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	623b      	str	r3, [r7, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d102      	bne.n	8003c06 <xQueueGenericCreateStatic+0x7e>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <xQueueGenericCreateStatic+0x82>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <xQueueGenericCreateStatic+0x84>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	61fb      	str	r3, [r7, #28]
}
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c26:	2350      	movs	r3, #80	; 0x50
 8003c28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b50      	cmp	r3, #80	; 0x50
 8003c2e:	d00a      	beq.n	8003c46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	61bb      	str	r3, [r7, #24]
}
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00d      	beq.n	8003c6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f805 	bl	8003c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3730      	adds	r7, #48	; 0x30
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e002      	b.n	8003c9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	69b8      	ldr	r0, [r7, #24]
 8003caa:	f7ff ff05 	bl	8003ab8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08e      	sub	sp, #56	; 0x38
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <xQueueGenericSend+0x32>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <xQueueGenericSend+0x40>
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <xQueueGenericSend+0x44>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <xQueueGenericSend+0x46>
 8003d04:	2300      	movs	r3, #0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <xQueueGenericSend+0x60>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d1c:	bf00      	nop
 8003d1e:	e7fe      	b.n	8003d1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d103      	bne.n	8003d2e <xQueueGenericSend+0x6e>
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <xQueueGenericSend+0x72>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <xQueueGenericSend+0x74>
 8003d32:	2300      	movs	r3, #0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <xQueueGenericSend+0x8e>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	623b      	str	r3, [r7, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	e7fe      	b.n	8003d4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d4e:	f001 f9bd 	bl	80050cc <xTaskGetSchedulerState>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <xQueueGenericSend+0x9e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <xQueueGenericSend+0xa2>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <xQueueGenericSend+0xa4>
 8003d62:	2300      	movs	r3, #0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <xQueueGenericSend+0xbe>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	61fb      	str	r3, [r7, #28]
}
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d7e:	f001 ff01 	bl	8005b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <xQueueGenericSend+0xd4>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d129      	bne.n	8003de8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d9a:	f000 fa0b 	bl	80041b4 <prvCopyDataToQueue>
 8003d9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d010      	beq.n	8003dca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	3324      	adds	r3, #36	; 0x24
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 ffcf 	bl	8004d50 <xTaskRemoveFromEventList>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d013      	beq.n	8003de0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003db8:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <xQueueGenericSend+0x1f8>)
 8003dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	e00a      	b.n	8003de0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003dd0:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <xQueueGenericSend+0x1f8>)
 8003dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003de0:	f001 ff00 	bl	8005be4 <vPortExitCritical>
				return pdPASS;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e063      	b.n	8003eb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d103      	bne.n	8003df6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dee:	f001 fef9 	bl	8005be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e05c      	b.n	8003eb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 f809 	bl	8004e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e06:	2301      	movs	r3, #1
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e0a:	f001 feeb 	bl	8005be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e0e:	f000 fd7b 	bl	8004908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e12:	f001 feb7 	bl	8005b84 <vPortEnterCritical>
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e22:	d103      	bne.n	8003e2c <xQueueGenericSend+0x16c>
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e32:	b25b      	sxtb	r3, r3
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e38:	d103      	bne.n	8003e42 <xQueueGenericSend+0x182>
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e42:	f001 fecf 	bl	8005be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e46:	1d3a      	adds	r2, r7, #4
 8003e48:	f107 0314 	add.w	r3, r7, #20
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fff8 	bl	8004e44 <xTaskCheckForTimeOut>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d124      	bne.n	8003ea4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e5c:	f000 faa2 	bl	80043a4 <prvIsQueueFull>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d018      	beq.n	8003e98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	3310      	adds	r3, #16
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 ff1e 	bl	8004cb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e76:	f000 fa2d 	bl	80042d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e7a:	f000 fd53 	bl	8004924 <xTaskResumeAll>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f af7c 	bne.w	8003d7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <xQueueGenericSend+0x1f8>)
 8003e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	e772      	b.n	8003d7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e9a:	f000 fa1b 	bl	80042d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e9e:	f000 fd41 	bl	8004924 <xTaskResumeAll>
 8003ea2:	e76c      	b.n	8003d7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ea6:	f000 fa15 	bl	80042d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eaa:	f000 fd3b 	bl	8004924 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003eae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3738      	adds	r7, #56	; 0x38
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	e000ed04 	.word	0xe000ed04

08003ebc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b090      	sub	sp, #64	; 0x40
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d103      	bne.n	8003ef8 <xQueueGenericSendFromISR+0x3c>
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <xQueueGenericSendFromISR+0x40>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <xQueueGenericSendFromISR+0x42>
 8003efc:	2300      	movs	r3, #0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d103      	bne.n	8003f26 <xQueueGenericSendFromISR+0x6a>
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <xQueueGenericSendFromISR+0x6e>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <xQueueGenericSendFromISR+0x70>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	623b      	str	r3, [r7, #32]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f46:	f001 feff 	bl	8005d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f4a:	f3ef 8211 	mrs	r2, BASEPRI
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	61fa      	str	r2, [r7, #28]
 8003f60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <xQueueGenericSendFromISR+0xbc>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d12f      	bne.n	8003fd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f8e:	f000 f911 	bl	80041b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f9a:	d112      	bne.n	8003fc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d016      	beq.n	8003fd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	3324      	adds	r3, #36	; 0x24
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fed1 	bl	8004d50 <xTaskRemoveFromEventList>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00e      	beq.n	8003fd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	e007      	b.n	8003fd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	b25a      	sxtb	r2, r3
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003fd6:	e001      	b.n	8003fdc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fe6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3740      	adds	r7, #64	; 0x40
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08c      	sub	sp, #48	; 0x30
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004000:	2300      	movs	r3, #0
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <xQueueReceive+0x30>
	__asm volatile
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	623b      	str	r3, [r7, #32]
}
 8004020:	bf00      	nop
 8004022:	e7fe      	b.n	8004022 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <xQueueReceive+0x3e>
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <xQueueReceive+0x42>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <xQueueReceive+0x44>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <xQueueReceive+0x5e>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	61fb      	str	r3, [r7, #28]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004052:	f001 f83b 	bl	80050cc <xTaskGetSchedulerState>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <xQueueReceive+0x6e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <xQueueReceive+0x72>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <xQueueReceive+0x74>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xQueueReceive+0x8e>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	61bb      	str	r3, [r7, #24]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004082:	f001 fd7f 	bl	8005b84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01f      	beq.n	80040d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004096:	f000 f8f7 	bl	8004288 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	1e5a      	subs	r2, r3, #1
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00f      	beq.n	80040ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	3310      	adds	r3, #16
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fe4e 	bl	8004d50 <xTaskRemoveFromEventList>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040ba:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <xQueueReceive+0x1bc>)
 80040bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040ca:	f001 fd8b 	bl	8005be4 <vPortExitCritical>
				return pdPASS;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e069      	b.n	80041a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d103      	bne.n	80040e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040d8:	f001 fd84 	bl	8005be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040dc:	2300      	movs	r3, #0
 80040de:	e062      	b.n	80041a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040e6:	f107 0310 	add.w	r3, r7, #16
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fe94 	bl	8004e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040f4:	f001 fd76 	bl	8005be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040f8:	f000 fc06 	bl	8004908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040fc:	f001 fd42 	bl	8005b84 <vPortEnterCritical>
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004106:	b25b      	sxtb	r3, r3
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800410c:	d103      	bne.n	8004116 <xQueueReceive+0x122>
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800411c:	b25b      	sxtb	r3, r3
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004122:	d103      	bne.n	800412c <xQueueReceive+0x138>
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800412c:	f001 fd5a 	bl	8005be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004130:	1d3a      	adds	r2, r7, #4
 8004132:	f107 0310 	add.w	r3, r7, #16
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fe83 	bl	8004e44 <xTaskCheckForTimeOut>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d123      	bne.n	800418c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004146:	f000 f917 	bl	8004378 <prvIsQueueEmpty>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d017      	beq.n	8004180 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	3324      	adds	r3, #36	; 0x24
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fda9 	bl	8004cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800415e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004160:	f000 f8b8 	bl	80042d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004164:	f000 fbde 	bl	8004924 <xTaskResumeAll>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d189      	bne.n	8004082 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <xQueueReceive+0x1bc>)
 8004170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	e780      	b.n	8004082 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004182:	f000 f8a7 	bl	80042d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004186:	f000 fbcd 	bl	8004924 <xTaskResumeAll>
 800418a:	e77a      	b.n	8004082 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800418c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800418e:	f000 f8a1 	bl	80042d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004192:	f000 fbc7 	bl	8004924 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004198:	f000 f8ee 	bl	8004378 <prvIsQueueEmpty>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f43f af6f 	beq.w	8004082 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3730      	adds	r7, #48	; 0x30
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10d      	bne.n	80041ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d14d      	bne.n	8004276 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 ff92 	bl	8005108 <xTaskPriorityDisinherit>
 80041e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	e043      	b.n	8004276 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d119      	bne.n	8004228 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6858      	ldr	r0, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	461a      	mov	r2, r3
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	f001 fff0 	bl	80061e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	441a      	add	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	d32b      	bcc.n	8004276 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	e026      	b.n	8004276 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68d8      	ldr	r0, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	461a      	mov	r2, r3
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	f001 ffd6 	bl	80061e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	425b      	negs	r3, r3
 8004242:	441a      	add	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d207      	bcs.n	8004264 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	425b      	negs	r3, r3
 800425e:	441a      	add	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d105      	bne.n	8004276 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	3b01      	subs	r3, #1
 8004274:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800427e:	697b      	ldr	r3, [r7, #20]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d018      	beq.n	80042cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	441a      	add	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d303      	bcc.n	80042bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68d9      	ldr	r1, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	461a      	mov	r2, r3
 80042c6:	6838      	ldr	r0, [r7, #0]
 80042c8:	f001 ff8c 	bl	80061e4 <memcpy>
	}
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042dc:	f001 fc52 	bl	8005b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042e8:	e011      	b.n	800430e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d012      	beq.n	8004318 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3324      	adds	r3, #36	; 0x24
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fd2a 	bl	8004d50 <xTaskRemoveFromEventList>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004302:	f000 fe01 	bl	8004f08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	3b01      	subs	r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800430e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	dce9      	bgt.n	80042ea <prvUnlockQueue+0x16>
 8004316:	e000      	b.n	800431a <prvUnlockQueue+0x46>
					break;
 8004318:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	22ff      	movs	r2, #255	; 0xff
 800431e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004322:	f001 fc5f 	bl	8005be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004326:	f001 fc2d 	bl	8005b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004330:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004332:	e011      	b.n	8004358 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d012      	beq.n	8004362 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3310      	adds	r3, #16
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fd05 	bl	8004d50 <xTaskRemoveFromEventList>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800434c:	f000 fddc 	bl	8004f08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004350:	7bbb      	ldrb	r3, [r7, #14]
 8004352:	3b01      	subs	r3, #1
 8004354:	b2db      	uxtb	r3, r3
 8004356:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800435c:	2b00      	cmp	r3, #0
 800435e:	dce9      	bgt.n	8004334 <prvUnlockQueue+0x60>
 8004360:	e000      	b.n	8004364 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004362:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	22ff      	movs	r2, #255	; 0xff
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800436c:	f001 fc3a 	bl	8005be4 <vPortExitCritical>
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004380:	f001 fc00 	bl	8005b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800438c:	2301      	movs	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e001      	b.n	8004396 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004396:	f001 fc25 	bl	8005be4 <vPortExitCritical>

	return xReturn;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043ac:	f001 fbea 	bl	8005b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d102      	bne.n	80043c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043bc:	2301      	movs	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e001      	b.n	80043c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043c6:	f001 fc0d 	bl	8005be4 <vPortExitCritical>

	return xReturn;
 80043ca:	68fb      	ldr	r3, [r7, #12]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e014      	b.n	800440e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043e4:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <vQueueAddToRegistry+0x50>)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043f0:	490c      	ldr	r1, [pc, #48]	; (8004424 <vQueueAddToRegistry+0x50>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80043fa:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <vQueueAddToRegistry+0x50>)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4413      	add	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004406:	e006      	b.n	8004416 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3301      	adds	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b07      	cmp	r3, #7
 8004412:	d9e7      	bls.n	80043e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	200019d0 	.word	0x200019d0

08004428 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004438:	f001 fba4 	bl	8005b84 <vPortEnterCritical>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004442:	b25b      	sxtb	r3, r3
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004448:	d103      	bne.n	8004452 <vQueueWaitForMessageRestricted+0x2a>
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004458:	b25b      	sxtb	r3, r3
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800445e:	d103      	bne.n	8004468 <vQueueWaitForMessageRestricted+0x40>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004468:	f001 fbbc 	bl	8005be4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	2b00      	cmp	r3, #0
 8004472:	d106      	bne.n	8004482 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	3324      	adds	r3, #36	; 0x24
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fc3b 	bl	8004cf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff ff26 	bl	80042d4 <prvUnlockQueue>
	}
 8004488:	bf00      	nop
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08e      	sub	sp, #56	; 0x38
 8004494:	af04      	add	r7, sp, #16
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800449e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	623b      	str	r3, [r7, #32]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	61fb      	str	r3, [r7, #28]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044d6:	235c      	movs	r3, #92	; 0x5c
 80044d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b5c      	cmp	r3, #92	; 0x5c
 80044de:	d00a      	beq.n	80044f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	61bb      	str	r3, [r7, #24]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01e      	beq.n	800453c <xTaskCreateStatic+0xac>
 80044fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01b      	beq.n	800453c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800450c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	2202      	movs	r2, #2
 8004512:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004516:	2300      	movs	r3, #0
 8004518:	9303      	str	r3, [sp, #12]
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	9302      	str	r3, [sp, #8]
 800451e:	f107 0314 	add.w	r3, r7, #20
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f850 	bl	80045d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004536:	f000 f8dd 	bl	80046f4 <prvAddNewTaskToReadyList>
 800453a:	e001      	b.n	8004540 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004540:	697b      	ldr	r3, [r7, #20]
	}
 8004542:	4618      	mov	r0, r3
 8004544:	3728      	adds	r7, #40	; 0x28
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800454a:	b580      	push	{r7, lr}
 800454c:	b08c      	sub	sp, #48	; 0x30
 800454e:	af04      	add	r7, sp, #16
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4618      	mov	r0, r3
 8004560:	f001 fc32 	bl	8005dc8 <pvPortMalloc>
 8004564:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00e      	beq.n	800458a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800456c:	205c      	movs	r0, #92	; 0x5c
 800456e:	f001 fc2b 	bl	8005dc8 <pvPortMalloc>
 8004572:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
 8004580:	e005      	b.n	800458e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004582:	6978      	ldr	r0, [r7, #20]
 8004584:	f001 fcec 	bl	8005f60 <vPortFree>
 8004588:	e001      	b.n	800458e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d017      	beq.n	80045c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	2300      	movs	r3, #0
 80045a0:	9303      	str	r3, [sp, #12]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	9302      	str	r3, [sp, #8]
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f80e 	bl	80045d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045b8:	69f8      	ldr	r0, [r7, #28]
 80045ba:	f000 f89b 	bl	80046f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045be:	2301      	movs	r3, #1
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e002      	b.n	80045ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045ca:	69bb      	ldr	r3, [r7, #24]
	}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	461a      	mov	r2, r3
 80045ec:	21a5      	movs	r1, #165	; 0xa5
 80045ee:	f001 fe07 	bl	8006200 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045fc:	3b01      	subs	r3, #1
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f023 0307 	bic.w	r3, r3, #7
 800460a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	617b      	str	r3, [r7, #20]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01f      	beq.n	8004672 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	e012      	b.n	800465e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	7819      	ldrb	r1, [r3, #0]
 8004640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	3334      	adds	r3, #52	; 0x34
 8004648:	460a      	mov	r2, r1
 800464a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3301      	adds	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b0f      	cmp	r3, #15
 8004662:	d9e9      	bls.n	8004638 <prvInitialiseNewTask+0x64>
 8004664:	e000      	b.n	8004668 <prvInitialiseNewTask+0x94>
			{
				break;
 8004666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004670:	e003      	b.n	800467a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	2b37      	cmp	r3, #55	; 0x37
 800467e:	d901      	bls.n	8004684 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004680:	2337      	movs	r3, #55	; 0x37
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800468e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	2200      	movs	r2, #0
 8004694:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	3304      	adds	r3, #4
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff f978 	bl	8003990 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	3318      	adds	r3, #24
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff f973 	bl	8003990 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	2200      	movs	r2, #0
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	68f9      	ldr	r1, [r7, #12]
 80046d2:	69b8      	ldr	r0, [r7, #24]
 80046d4:	f001 f928 	bl	8005928 <pxPortInitialiseStack>
 80046d8:	4602      	mov	r2, r0
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046ea:	bf00      	nop
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046fc:	f001 fa42 	bl	8005b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004700:	4b2d      	ldr	r3, [pc, #180]	; (80047b8 <prvAddNewTaskToReadyList+0xc4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	4a2c      	ldr	r2, [pc, #176]	; (80047b8 <prvAddNewTaskToReadyList+0xc4>)
 8004708:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800470a:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <prvAddNewTaskToReadyList+0xc8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004712:	4a2a      	ldr	r2, [pc, #168]	; (80047bc <prvAddNewTaskToReadyList+0xc8>)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <prvAddNewTaskToReadyList+0xc4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d110      	bne.n	8004742 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004720:	f000 fc16 	bl	8004f50 <prvInitialiseTaskLists>
 8004724:	e00d      	b.n	8004742 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004726:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <prvAddNewTaskToReadyList+0xcc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800472e:	4b23      	ldr	r3, [pc, #140]	; (80047bc <prvAddNewTaskToReadyList+0xc8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	429a      	cmp	r2, r3
 800473a:	d802      	bhi.n	8004742 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800473c:	4a1f      	ldr	r2, [pc, #124]	; (80047bc <prvAddNewTaskToReadyList+0xc8>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <prvAddNewTaskToReadyList+0xd0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3301      	adds	r3, #1
 8004748:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <prvAddNewTaskToReadyList+0xd0>)
 800474a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <prvAddNewTaskToReadyList+0xd0>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <prvAddNewTaskToReadyList+0xd4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d903      	bls.n	8004768 <prvAddNewTaskToReadyList+0x74>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <prvAddNewTaskToReadyList+0xd4>)
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4a15      	ldr	r2, [pc, #84]	; (80047cc <prvAddNewTaskToReadyList+0xd8>)
 8004776:	441a      	add	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7ff f913 	bl	80039aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004784:	f001 fa2e 	bl	8005be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <prvAddNewTaskToReadyList+0xcc>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00e      	beq.n	80047ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <prvAddNewTaskToReadyList+0xc8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	429a      	cmp	r2, r3
 800479c:	d207      	bcs.n	80047ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <prvAddNewTaskToReadyList+0xdc>)
 80047a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000c48 	.word	0x20000c48
 80047bc:	20000774 	.word	0x20000774
 80047c0:	20000c54 	.word	0x20000c54
 80047c4:	20000c64 	.word	0x20000c64
 80047c8:	20000c50 	.word	0x20000c50
 80047cc:	20000778 	.word	0x20000778
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d017      	beq.n	8004816 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047e6:	4b13      	ldr	r3, [pc, #76]	; (8004834 <vTaskDelay+0x60>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <vTaskDelay+0x30>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	60bb      	str	r3, [r7, #8]
}
 8004800:	bf00      	nop
 8004802:	e7fe      	b.n	8004802 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004804:	f000 f880 	bl	8004908 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004808:	2100      	movs	r1, #0
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fcea 	bl	80051e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004810:	f000 f888 	bl	8004924 <xTaskResumeAll>
 8004814:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d107      	bne.n	800482c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <vTaskDelay+0x64>)
 800481e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000c70 	.word	0x20000c70
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	; 0x28
 8004840:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800484a:	463a      	mov	r2, r7
 800484c:	1d39      	adds	r1, r7, #4
 800484e:	f107 0308 	add.w	r3, r7, #8
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff f848 	bl	80038e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	9202      	str	r2, [sp, #8]
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	2300      	movs	r3, #0
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	460a      	mov	r2, r1
 800486a:	4921      	ldr	r1, [pc, #132]	; (80048f0 <vTaskStartScheduler+0xb4>)
 800486c:	4821      	ldr	r0, [pc, #132]	; (80048f4 <vTaskStartScheduler+0xb8>)
 800486e:	f7ff fe0f 	bl	8004490 <xTaskCreateStatic>
 8004872:	4603      	mov	r3, r0
 8004874:	4a20      	ldr	r2, [pc, #128]	; (80048f8 <vTaskStartScheduler+0xbc>)
 8004876:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004878:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <vTaskStartScheduler+0xbc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004880:	2301      	movs	r3, #1
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e001      	b.n	800488a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d102      	bne.n	8004896 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004890:	f000 fcfc 	bl	800528c <xTimerCreateTimerTask>
 8004894:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d116      	bne.n	80048ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	613b      	str	r3, [r7, #16]
}
 80048ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <vTaskStartScheduler+0xc0>)
 80048b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048b8:	4b11      	ldr	r3, [pc, #68]	; (8004900 <vTaskStartScheduler+0xc4>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048be:	4b11      	ldr	r3, [pc, #68]	; (8004904 <vTaskStartScheduler+0xc8>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048c4:	f001 f8bc 	bl	8005a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048c8:	e00e      	b.n	80048e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d0:	d10a      	bne.n	80048e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60fb      	str	r3, [r7, #12]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <vTaskStartScheduler+0xaa>
}
 80048e8:	bf00      	nop
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	0800623c 	.word	0x0800623c
 80048f4:	08004f21 	.word	0x08004f21
 80048f8:	20000c6c 	.word	0x20000c6c
 80048fc:	20000c68 	.word	0x20000c68
 8004900:	20000c54 	.word	0x20000c54
 8004904:	20000c4c 	.word	0x20000c4c

08004908 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800490c:	4b04      	ldr	r3, [pc, #16]	; (8004920 <vTaskSuspendAll+0x18>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	4a03      	ldr	r2, [pc, #12]	; (8004920 <vTaskSuspendAll+0x18>)
 8004914:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004916:	bf00      	nop
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	20000c70 	.word	0x20000c70

08004924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004932:	4b42      	ldr	r3, [pc, #264]	; (8004a3c <xTaskResumeAll+0x118>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <xTaskResumeAll+0x2c>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	603b      	str	r3, [r7, #0]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004950:	f001 f918 	bl	8005b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004954:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <xTaskResumeAll+0x118>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3b01      	subs	r3, #1
 800495a:	4a38      	ldr	r2, [pc, #224]	; (8004a3c <xTaskResumeAll+0x118>)
 800495c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800495e:	4b37      	ldr	r3, [pc, #220]	; (8004a3c <xTaskResumeAll+0x118>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d162      	bne.n	8004a2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004966:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <xTaskResumeAll+0x11c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d05e      	beq.n	8004a2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800496e:	e02f      	b.n	80049d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004970:	4b34      	ldr	r3, [pc, #208]	; (8004a44 <xTaskResumeAll+0x120>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3318      	adds	r3, #24
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff f871 	bl	8003a64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3304      	adds	r3, #4
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff f86c 	bl	8003a64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004990:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <xTaskResumeAll+0x124>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d903      	bls.n	80049a0 <xTaskResumeAll+0x7c>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	4a2a      	ldr	r2, [pc, #168]	; (8004a48 <xTaskResumeAll+0x124>)
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4a27      	ldr	r2, [pc, #156]	; (8004a4c <xTaskResumeAll+0x128>)
 80049ae:	441a      	add	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f7fe fff7 	bl	80039aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <xTaskResumeAll+0x12c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80049ca:	4b22      	ldr	r3, [pc, #136]	; (8004a54 <xTaskResumeAll+0x130>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049d0:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <xTaskResumeAll+0x120>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1cb      	bne.n	8004970 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049de:	f000 fb55 	bl	800508c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <xTaskResumeAll+0x134>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d010      	beq.n	8004a10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049ee:	f000 f847 	bl	8004a80 <xTaskIncrementTick>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80049f8:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <xTaskResumeAll+0x130>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f1      	bne.n	80049ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a0a:	4b13      	ldr	r3, [pc, #76]	; (8004a58 <xTaskResumeAll+0x134>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <xTaskResumeAll+0x130>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d009      	beq.n	8004a2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <xTaskResumeAll+0x138>)
 8004a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a2c:	f001 f8da 	bl	8005be4 <vPortExitCritical>

	return xAlreadyYielded;
 8004a30:	68bb      	ldr	r3, [r7, #8]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000c70 	.word	0x20000c70
 8004a40:	20000c48 	.word	0x20000c48
 8004a44:	20000c08 	.word	0x20000c08
 8004a48:	20000c50 	.word	0x20000c50
 8004a4c:	20000778 	.word	0x20000778
 8004a50:	20000774 	.word	0x20000774
 8004a54:	20000c5c 	.word	0x20000c5c
 8004a58:	20000c58 	.word	0x20000c58
 8004a5c:	e000ed04 	.word	0xe000ed04

08004a60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <xTaskGetTickCount+0x1c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a6c:	687b      	ldr	r3, [r7, #4]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000c4c 	.word	0x20000c4c

08004a80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a8a:	4b4f      	ldr	r3, [pc, #316]	; (8004bc8 <xTaskIncrementTick+0x148>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 808f 	bne.w	8004bb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a94:	4b4d      	ldr	r3, [pc, #308]	; (8004bcc <xTaskIncrementTick+0x14c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a9c:	4a4b      	ldr	r2, [pc, #300]	; (8004bcc <xTaskIncrementTick+0x14c>)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d120      	bne.n	8004aea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004aa8:	4b49      	ldr	r3, [pc, #292]	; (8004bd0 <xTaskIncrementTick+0x150>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	603b      	str	r3, [r7, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <xTaskIncrementTick+0x46>
 8004ac8:	4b41      	ldr	r3, [pc, #260]	; (8004bd0 <xTaskIncrementTick+0x150>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4b41      	ldr	r3, [pc, #260]	; (8004bd4 <xTaskIncrementTick+0x154>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3f      	ldr	r2, [pc, #252]	; (8004bd0 <xTaskIncrementTick+0x150>)
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4a3f      	ldr	r2, [pc, #252]	; (8004bd4 <xTaskIncrementTick+0x154>)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b3e      	ldr	r3, [pc, #248]	; (8004bd8 <xTaskIncrementTick+0x158>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	4a3d      	ldr	r2, [pc, #244]	; (8004bd8 <xTaskIncrementTick+0x158>)
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	f000 fad1 	bl	800508c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004aea:	4b3c      	ldr	r3, [pc, #240]	; (8004bdc <xTaskIncrementTick+0x15c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d349      	bcc.n	8004b88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004af4:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <xTaskIncrementTick+0x150>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004afe:	4b37      	ldr	r3, [pc, #220]	; (8004bdc <xTaskIncrementTick+0x15c>)
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b04:	601a      	str	r2, [r3, #0]
					break;
 8004b06:	e03f      	b.n	8004b88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b08:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <xTaskIncrementTick+0x150>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d203      	bcs.n	8004b28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b20:	4a2e      	ldr	r2, [pc, #184]	; (8004bdc <xTaskIncrementTick+0x15c>)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b26:	e02f      	b.n	8004b88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe ff99 	bl	8003a64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe ff90 	bl	8003a64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <xTaskIncrementTick+0x160>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d903      	bls.n	8004b58 <xTaskIncrementTick+0xd8>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a22      	ldr	r2, [pc, #136]	; (8004be0 <xTaskIncrementTick+0x160>)
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <xTaskIncrementTick+0x164>)
 8004b66:	441a      	add	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f7fe ff1b 	bl	80039aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <xTaskIncrementTick+0x168>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d3b8      	bcc.n	8004af4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b86:	e7b5      	b.n	8004af4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b88:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <xTaskIncrementTick+0x168>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8e:	4915      	ldr	r1, [pc, #84]	; (8004be4 <xTaskIncrementTick+0x164>)
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d901      	bls.n	8004ba4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <xTaskIncrementTick+0x16c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e004      	b.n	8004bbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <xTaskIncrementTick+0x170>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	4a0d      	ldr	r2, [pc, #52]	; (8004bf0 <xTaskIncrementTick+0x170>)
 8004bba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bbc:	697b      	ldr	r3, [r7, #20]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000c70 	.word	0x20000c70
 8004bcc:	20000c4c 	.word	0x20000c4c
 8004bd0:	20000c00 	.word	0x20000c00
 8004bd4:	20000c04 	.word	0x20000c04
 8004bd8:	20000c60 	.word	0x20000c60
 8004bdc:	20000c68 	.word	0x20000c68
 8004be0:	20000c50 	.word	0x20000c50
 8004be4:	20000778 	.word	0x20000778
 8004be8:	20000774 	.word	0x20000774
 8004bec:	20000c5c 	.word	0x20000c5c
 8004bf0:	20000c58 	.word	0x20000c58

08004bf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bfa:	4b28      	ldr	r3, [pc, #160]	; (8004c9c <vTaskSwitchContext+0xa8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c02:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <vTaskSwitchContext+0xac>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c08:	e041      	b.n	8004c8e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004c0a:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <vTaskSwitchContext+0xac>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c10:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <vTaskSwitchContext+0xb0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e010      	b.n	8004c3a <vTaskSwitchContext+0x46>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <vTaskSwitchContext+0x40>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
}
 8004c30:	bf00      	nop
 8004c32:	e7fe      	b.n	8004c32 <vTaskSwitchContext+0x3e>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	491b      	ldr	r1, [pc, #108]	; (8004ca8 <vTaskSwitchContext+0xb4>)
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0e4      	beq.n	8004c18 <vTaskSwitchContext+0x24>
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <vTaskSwitchContext+0xb4>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d104      	bne.n	8004c7e <vTaskSwitchContext+0x8a>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a09      	ldr	r2, [pc, #36]	; (8004cac <vTaskSwitchContext+0xb8>)
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	4a06      	ldr	r2, [pc, #24]	; (8004ca4 <vTaskSwitchContext+0xb0>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6013      	str	r3, [r2, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000c70 	.word	0x20000c70
 8004ca0:	20000c5c 	.word	0x20000c5c
 8004ca4:	20000c50 	.word	0x20000c50
 8004ca8:	20000778 	.word	0x20000778
 8004cac:	20000774 	.word	0x20000774

08004cb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <vTaskPlaceOnEventList+0x44>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3318      	adds	r3, #24
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fe fe87 	bl	80039f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	6838      	ldr	r0, [r7, #0]
 8004ce8:	f000 fa7c 	bl	80051e4 <prvAddCurrentTaskToDelayedList>
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000774 	.word	0x20000774

08004cf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	617b      	str	r3, [r7, #20]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <vTaskPlaceOnEventListRestricted+0x54>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3318      	adds	r3, #24
 8004d26:	4619      	mov	r1, r3
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7fe fe3e 	bl	80039aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	68b8      	ldr	r0, [r7, #8]
 8004d3e:	f000 fa51 	bl	80051e4 <prvAddCurrentTaskToDelayedList>
	}
 8004d42:	bf00      	nop
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000774 	.word	0x20000774

08004d50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	60fb      	str	r3, [r7, #12]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	3318      	adds	r3, #24
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe fe6f 	bl	8003a64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d86:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <xTaskRemoveFromEventList+0xb0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d11d      	bne.n	8004dca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fe66 	bl	8003a64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9c:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <xTaskRemoveFromEventList+0xb4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d903      	bls.n	8004dac <xTaskRemoveFromEventList+0x5c>
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4a16      	ldr	r2, [pc, #88]	; (8004e04 <xTaskRemoveFromEventList+0xb4>)
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <xTaskRemoveFromEventList+0xb8>)
 8004dba:	441a      	add	r2, r3
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f7fe fdf1 	bl	80039aa <vListInsertEnd>
 8004dc8:	e005      	b.n	8004dd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3318      	adds	r3, #24
 8004dce:	4619      	mov	r1, r3
 8004dd0:	480e      	ldr	r0, [pc, #56]	; (8004e0c <xTaskRemoveFromEventList+0xbc>)
 8004dd2:	f7fe fdea 	bl	80039aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dda:	4b0d      	ldr	r3, [pc, #52]	; (8004e10 <xTaskRemoveFromEventList+0xc0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d905      	bls.n	8004df0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <xTaskRemoveFromEventList+0xc4>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e001      	b.n	8004df4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004df4:	697b      	ldr	r3, [r7, #20]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000c70 	.word	0x20000c70
 8004e04:	20000c50 	.word	0x20000c50
 8004e08:	20000778 	.word	0x20000778
 8004e0c:	20000c08 	.word	0x20000c08
 8004e10:	20000774 	.word	0x20000774
 8004e14:	20000c5c 	.word	0x20000c5c

08004e18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <vTaskInternalSetTimeOutState+0x24>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <vTaskInternalSetTimeOutState+0x28>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	605a      	str	r2, [r3, #4]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000c60 	.word	0x20000c60
 8004e40:	20000c4c 	.word	0x20000c4c

08004e44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	613b      	str	r3, [r7, #16]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60fb      	str	r3, [r7, #12]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004e86:	f000 fe7d 	bl	8005b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e8a:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <xTaskCheckForTimeOut+0xbc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea2:	d102      	bne.n	8004eaa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	e023      	b.n	8004ef2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4b15      	ldr	r3, [pc, #84]	; (8004f04 <xTaskCheckForTimeOut+0xc0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d007      	beq.n	8004ec6 <xTaskCheckForTimeOut+0x82>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d302      	bcc.n	8004ec6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	e015      	b.n	8004ef2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d20b      	bcs.n	8004ee8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad2      	subs	r2, r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff ff9b 	bl	8004e18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	e004      	b.n	8004ef2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ef2:	f000 fe77 	bl	8005be4 <vPortExitCritical>

	return xReturn;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000c4c 	.word	0x20000c4c
 8004f04:	20000c60 	.word	0x20000c60

08004f08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <vTaskMissedYield+0x14>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
}
 8004f12:	bf00      	nop
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	20000c5c 	.word	0x20000c5c

08004f20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f28:	f000 f852 	bl	8004fd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <prvIdleTask+0x28>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d9f9      	bls.n	8004f28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <prvIdleTask+0x2c>)
 8004f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f44:	e7f0      	b.n	8004f28 <prvIdleTask+0x8>
 8004f46:	bf00      	nop
 8004f48:	20000778 	.word	0x20000778
 8004f4c:	e000ed04 	.word	0xe000ed04

08004f50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f56:	2300      	movs	r3, #0
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	e00c      	b.n	8004f76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4a12      	ldr	r2, [pc, #72]	; (8004fb0 <prvInitialiseTaskLists+0x60>)
 8004f68:	4413      	add	r3, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe fcf0 	bl	8003950 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3301      	adds	r3, #1
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b37      	cmp	r3, #55	; 0x37
 8004f7a:	d9ef      	bls.n	8004f5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f7c:	480d      	ldr	r0, [pc, #52]	; (8004fb4 <prvInitialiseTaskLists+0x64>)
 8004f7e:	f7fe fce7 	bl	8003950 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f82:	480d      	ldr	r0, [pc, #52]	; (8004fb8 <prvInitialiseTaskLists+0x68>)
 8004f84:	f7fe fce4 	bl	8003950 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f88:	480c      	ldr	r0, [pc, #48]	; (8004fbc <prvInitialiseTaskLists+0x6c>)
 8004f8a:	f7fe fce1 	bl	8003950 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f8e:	480c      	ldr	r0, [pc, #48]	; (8004fc0 <prvInitialiseTaskLists+0x70>)
 8004f90:	f7fe fcde 	bl	8003950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f94:	480b      	ldr	r0, [pc, #44]	; (8004fc4 <prvInitialiseTaskLists+0x74>)
 8004f96:	f7fe fcdb 	bl	8003950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <prvInitialiseTaskLists+0x78>)
 8004f9c:	4a05      	ldr	r2, [pc, #20]	; (8004fb4 <prvInitialiseTaskLists+0x64>)
 8004f9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <prvInitialiseTaskLists+0x7c>)
 8004fa2:	4a05      	ldr	r2, [pc, #20]	; (8004fb8 <prvInitialiseTaskLists+0x68>)
 8004fa4:	601a      	str	r2, [r3, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000778 	.word	0x20000778
 8004fb4:	20000bd8 	.word	0x20000bd8
 8004fb8:	20000bec 	.word	0x20000bec
 8004fbc:	20000c08 	.word	0x20000c08
 8004fc0:	20000c1c 	.word	0x20000c1c
 8004fc4:	20000c34 	.word	0x20000c34
 8004fc8:	20000c00 	.word	0x20000c00
 8004fcc:	20000c04 	.word	0x20000c04

08004fd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fd6:	e019      	b.n	800500c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fd8:	f000 fdd4 	bl	8005b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <prvCheckTasksWaitingTermination+0x50>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fe fd3b 	bl	8003a64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <prvCheckTasksWaitingTermination+0x54>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	4a0b      	ldr	r2, [pc, #44]	; (8005024 <prvCheckTasksWaitingTermination+0x54>)
 8004ff6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <prvCheckTasksWaitingTermination+0x58>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <prvCheckTasksWaitingTermination+0x58>)
 8005000:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005002:	f000 fdef 	bl	8005be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f810 	bl	800502c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <prvCheckTasksWaitingTermination+0x58>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e1      	bne.n	8004fd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000c1c 	.word	0x20000c1c
 8005024:	20000c48 	.word	0x20000c48
 8005028:	20000c30 	.word	0x20000c30

0800502c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800503a:	2b00      	cmp	r3, #0
 800503c:	d108      	bne.n	8005050 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	4618      	mov	r0, r3
 8005044:	f000 ff8c 	bl	8005f60 <vPortFree>
				vPortFree( pxTCB );
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 ff89 	bl	8005f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800504e:	e018      	b.n	8005082 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005056:	2b01      	cmp	r3, #1
 8005058:	d103      	bne.n	8005062 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 ff80 	bl	8005f60 <vPortFree>
	}
 8005060:	e00f      	b.n	8005082 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005068:	2b02      	cmp	r3, #2
 800506a:	d00a      	beq.n	8005082 <prvDeleteTCB+0x56>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60fb      	str	r3, [r7, #12]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <prvDeleteTCB+0x54>
	}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005092:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <prvResetNextTaskUnblockTime+0x38>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d104      	bne.n	80050a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <prvResetNextTaskUnblockTime+0x3c>)
 800509e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050a4:	e008      	b.n	80050b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <prvResetNextTaskUnblockTime+0x38>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	4a04      	ldr	r2, [pc, #16]	; (80050c8 <prvResetNextTaskUnblockTime+0x3c>)
 80050b6:	6013      	str	r3, [r2, #0]
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	20000c00 	.word	0x20000c00
 80050c8:	20000c68 	.word	0x20000c68

080050cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <xTaskGetSchedulerState+0x34>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d102      	bne.n	80050e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050da:	2301      	movs	r3, #1
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	e008      	b.n	80050f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050e0:	4b08      	ldr	r3, [pc, #32]	; (8005104 <xTaskGetSchedulerState+0x38>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050e8:	2302      	movs	r3, #2
 80050ea:	607b      	str	r3, [r7, #4]
 80050ec:	e001      	b.n	80050f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050ee:	2300      	movs	r3, #0
 80050f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050f2:	687b      	ldr	r3, [r7, #4]
	}
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	20000c54 	.word	0x20000c54
 8005104:	20000c70 	.word	0x20000c70

08005108 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d056      	beq.n	80051cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800511e:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <xTaskPriorityDisinherit+0xd0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	429a      	cmp	r2, r3
 8005126:	d00a      	beq.n	800513e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	60fb      	str	r3, [r7, #12]
}
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60bb      	str	r3, [r7, #8]
}
 8005158:	bf00      	nop
 800515a:	e7fe      	b.n	800515a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005160:	1e5a      	subs	r2, r3, #1
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516e:	429a      	cmp	r2, r3
 8005170:	d02c      	beq.n	80051cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005176:	2b00      	cmp	r3, #0
 8005178:	d128      	bne.n	80051cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	3304      	adds	r3, #4
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe fc70 	bl	8003a64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <xTaskPriorityDisinherit+0xd4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d903      	bls.n	80051ac <xTaskPriorityDisinherit+0xa4>
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4a0c      	ldr	r2, [pc, #48]	; (80051dc <xTaskPriorityDisinherit+0xd4>)
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <xTaskPriorityDisinherit+0xd8>)
 80051ba:	441a      	add	r2, r3
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	3304      	adds	r3, #4
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7fe fbf1 	bl	80039aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051c8:	2301      	movs	r3, #1
 80051ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051cc:	697b      	ldr	r3, [r7, #20]
	}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000774 	.word	0x20000774
 80051dc:	20000c50 	.word	0x20000c50
 80051e0:	20000778 	.word	0x20000778

080051e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051ee:	4b21      	ldr	r3, [pc, #132]	; (8005274 <prvAddCurrentTaskToDelayedList+0x90>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051f4:	4b20      	ldr	r3, [pc, #128]	; (8005278 <prvAddCurrentTaskToDelayedList+0x94>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fc32 	bl	8003a64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005206:	d10a      	bne.n	800521e <prvAddCurrentTaskToDelayedList+0x3a>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800520e:	4b1a      	ldr	r3, [pc, #104]	; (8005278 <prvAddCurrentTaskToDelayedList+0x94>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4819      	ldr	r0, [pc, #100]	; (800527c <prvAddCurrentTaskToDelayedList+0x98>)
 8005218:	f7fe fbc7 	bl	80039aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800521c:	e026      	b.n	800526c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4413      	add	r3, r2
 8005224:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005226:	4b14      	ldr	r3, [pc, #80]	; (8005278 <prvAddCurrentTaskToDelayedList+0x94>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	429a      	cmp	r2, r3
 8005234:	d209      	bcs.n	800524a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005236:	4b12      	ldr	r3, [pc, #72]	; (8005280 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <prvAddCurrentTaskToDelayedList+0x94>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f7fe fbd5 	bl	80039f2 <vListInsert>
}
 8005248:	e010      	b.n	800526c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800524a:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <prvAddCurrentTaskToDelayedList+0xa0>)
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <prvAddCurrentTaskToDelayedList+0x94>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3304      	adds	r3, #4
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f7fe fbcb 	bl	80039f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <prvAddCurrentTaskToDelayedList+0xa4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	d202      	bcs.n	800526c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005266:	4a08      	ldr	r2, [pc, #32]	; (8005288 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	6013      	str	r3, [r2, #0]
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000c4c 	.word	0x20000c4c
 8005278:	20000774 	.word	0x20000774
 800527c:	20000c34 	.word	0x20000c34
 8005280:	20000c04 	.word	0x20000c04
 8005284:	20000c00 	.word	0x20000c00
 8005288:	20000c68 	.word	0x20000c68

0800528c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	; 0x28
 8005290:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005296:	f000 fb07 	bl	80058a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800529a:	4b1c      	ldr	r3, [pc, #112]	; (800530c <xTimerCreateTimerTask+0x80>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d021      	beq.n	80052e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052aa:	1d3a      	adds	r2, r7, #4
 80052ac:	f107 0108 	add.w	r1, r7, #8
 80052b0:	f107 030c 	add.w	r3, r7, #12
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fb31 	bl	800391c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	9202      	str	r2, [sp, #8]
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	2302      	movs	r3, #2
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	2300      	movs	r3, #0
 80052ca:	460a      	mov	r2, r1
 80052cc:	4910      	ldr	r1, [pc, #64]	; (8005310 <xTimerCreateTimerTask+0x84>)
 80052ce:	4811      	ldr	r0, [pc, #68]	; (8005314 <xTimerCreateTimerTask+0x88>)
 80052d0:	f7ff f8de 	bl	8004490 <xTaskCreateStatic>
 80052d4:	4603      	mov	r3, r0
 80052d6:	4a10      	ldr	r2, [pc, #64]	; (8005318 <xTimerCreateTimerTask+0x8c>)
 80052d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80052da:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <xTimerCreateTimerTask+0x8c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80052e2:	2301      	movs	r3, #1
 80052e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	613b      	str	r3, [r7, #16]
}
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005302:	697b      	ldr	r3, [r7, #20]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000ca4 	.word	0x20000ca4
 8005310:	08006244 	.word	0x08006244
 8005314:	08005451 	.word	0x08005451
 8005318:	20000ca8 	.word	0x20000ca8

0800531c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800532a:	2300      	movs	r3, #0
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	623b      	str	r3, [r7, #32]
}
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800534a:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <xTimerGenericCommand+0x98>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d02a      	beq.n	80053a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b05      	cmp	r3, #5
 8005362:	dc18      	bgt.n	8005396 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005364:	f7ff feb2 	bl	80050cc <xTaskGetSchedulerState>
 8005368:	4603      	mov	r3, r0
 800536a:	2b02      	cmp	r3, #2
 800536c:	d109      	bne.n	8005382 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800536e:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <xTimerGenericCommand+0x98>)
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	f107 0110 	add.w	r1, r7, #16
 8005376:	2300      	movs	r3, #0
 8005378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537a:	f7fe fca1 	bl	8003cc0 <xQueueGenericSend>
 800537e:	6278      	str	r0, [r7, #36]	; 0x24
 8005380:	e012      	b.n	80053a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005382:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <xTimerGenericCommand+0x98>)
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	f107 0110 	add.w	r1, r7, #16
 800538a:	2300      	movs	r3, #0
 800538c:	2200      	movs	r2, #0
 800538e:	f7fe fc97 	bl	8003cc0 <xQueueGenericSend>
 8005392:	6278      	str	r0, [r7, #36]	; 0x24
 8005394:	e008      	b.n	80053a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <xTimerGenericCommand+0x98>)
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	f107 0110 	add.w	r1, r7, #16
 800539e:	2300      	movs	r3, #0
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	f7fe fd8b 	bl	8003ebc <xQueueGenericSendFromISR>
 80053a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3728      	adds	r7, #40	; 0x28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000ca4 	.word	0x20000ca4

080053b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af02      	add	r7, sp, #8
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c2:	4b22      	ldr	r3, [pc, #136]	; (800544c <prvProcessExpiredTimer+0x94>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe fb47 	bl	8003a64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d022      	beq.n	800542a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	18d1      	adds	r1, r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	6978      	ldr	r0, [r7, #20]
 80053f2:	f000 f8d1 	bl	8005598 <prvInsertTimerInActiveList>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01f      	beq.n	800543c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053fc:	2300      	movs	r3, #0
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	2300      	movs	r3, #0
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	2100      	movs	r1, #0
 8005406:	6978      	ldr	r0, [r7, #20]
 8005408:	f7ff ff88 	bl	800531c <xTimerGenericCommand>
 800540c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d113      	bne.n	800543c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60fb      	str	r3, [r7, #12]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	b2da      	uxtb	r2, r3
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	6978      	ldr	r0, [r7, #20]
 8005442:	4798      	blx	r3
}
 8005444:	bf00      	nop
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20000c9c 	.word	0x20000c9c

08005450 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005458:	f107 0308 	add.w	r3, r7, #8
 800545c:	4618      	mov	r0, r3
 800545e:	f000 f857 	bl	8005510 <prvGetNextExpireTime>
 8005462:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4619      	mov	r1, r3
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f803 	bl	8005474 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800546e:	f000 f8d5 	bl	800561c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005472:	e7f1      	b.n	8005458 <prvTimerTask+0x8>

08005474 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800547e:	f7ff fa43 	bl	8004908 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f866 	bl	8005558 <prvSampleTimeNow>
 800548c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d130      	bne.n	80054f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10a      	bne.n	80054b0 <prvProcessTimerOrBlockTask+0x3c>
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d806      	bhi.n	80054b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80054a2:	f7ff fa3f 	bl	8004924 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054a6:	68f9      	ldr	r1, [r7, #12]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff85 	bl	80053b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80054ae:	e024      	b.n	80054fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d008      	beq.n	80054c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80054b6:	4b13      	ldr	r3, [pc, #76]	; (8005504 <prvProcessTimerOrBlockTask+0x90>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <prvProcessTimerOrBlockTask+0x50>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <prvProcessTimerOrBlockTask+0x52>
 80054c4:	2300      	movs	r3, #0
 80054c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054c8:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <prvProcessTimerOrBlockTask+0x94>)
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	4619      	mov	r1, r3
 80054d6:	f7fe ffa7 	bl	8004428 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80054da:	f7ff fa23 	bl	8004924 <xTaskResumeAll>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80054e4:	4b09      	ldr	r3, [pc, #36]	; (800550c <prvProcessTimerOrBlockTask+0x98>)
 80054e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	f3bf 8f6f 	isb	sy
}
 80054f4:	e001      	b.n	80054fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80054f6:	f7ff fa15 	bl	8004924 <xTaskResumeAll>
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000ca0 	.word	0x20000ca0
 8005508:	20000ca4 	.word	0x20000ca4
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005518:	4b0e      	ldr	r3, [pc, #56]	; (8005554 <prvGetNextExpireTime+0x44>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <prvGetNextExpireTime+0x16>
 8005522:	2201      	movs	r2, #1
 8005524:	e000      	b.n	8005528 <prvGetNextExpireTime+0x18>
 8005526:	2200      	movs	r2, #0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005534:	4b07      	ldr	r3, [pc, #28]	; (8005554 <prvGetNextExpireTime+0x44>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	e001      	b.n	8005544 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005544:	68fb      	ldr	r3, [r7, #12]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000c9c 	.word	0x20000c9c

08005558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005560:	f7ff fa7e 	bl	8004a60 <xTaskGetTickCount>
 8005564:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <prvSampleTimeNow+0x3c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	d205      	bcs.n	800557c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005570:	f000 f936 	bl	80057e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e002      	b.n	8005582 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005582:	4a04      	ldr	r2, [pc, #16]	; (8005594 <prvSampleTimeNow+0x3c>)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005588:	68fb      	ldr	r3, [r7, #12]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000cac 	.word	0x20000cac

08005598 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d812      	bhi.n	80055e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	1ad2      	subs	r2, r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d302      	bcc.n	80055d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80055cc:	2301      	movs	r3, #1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e01b      	b.n	800560a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <prvInsertTimerInActiveList+0x7c>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3304      	adds	r3, #4
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f7fe fa08 	bl	80039f2 <vListInsert>
 80055e2:	e012      	b.n	800560a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d206      	bcs.n	80055fa <prvInsertTimerInActiveList+0x62>
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80055f4:	2301      	movs	r3, #1
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	e007      	b.n	800560a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <prvInsertTimerInActiveList+0x80>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3304      	adds	r3, #4
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f7fe f9f4 	bl	80039f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800560a:	697b      	ldr	r3, [r7, #20]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20000ca0 	.word	0x20000ca0
 8005618:	20000c9c 	.word	0x20000c9c

0800561c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08e      	sub	sp, #56	; 0x38
 8005620:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005622:	e0ca      	b.n	80057ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	da18      	bge.n	800565c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	3304      	adds	r3, #4
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10a      	bne.n	800564c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	61fb      	str	r3, [r7, #28]
}
 8005648:	bf00      	nop
 800564a:	e7fe      	b.n	800564a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005652:	6850      	ldr	r0, [r2, #4]
 8005654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005656:	6892      	ldr	r2, [r2, #8]
 8005658:	4611      	mov	r1, r2
 800565a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f2c0 80aa 	blt.w	80057b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	3304      	adds	r3, #4
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe f9f5 	bl	8003a64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800567a:	463b      	mov	r3, r7
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff ff6b 	bl	8005558 <prvSampleTimeNow>
 8005682:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b09      	cmp	r3, #9
 8005688:	f200 8097 	bhi.w	80057ba <prvProcessReceivedCommands+0x19e>
 800568c:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <prvProcessReceivedCommands+0x78>)
 800568e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005692:	bf00      	nop
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056bd 	.word	0x080056bd
 800569c:	080056bd 	.word	0x080056bd
 80056a0:	08005731 	.word	0x08005731
 80056a4:	08005745 	.word	0x08005745
 80056a8:	0800578f 	.word	0x0800578f
 80056ac:	080056bd 	.word	0x080056bd
 80056b0:	080056bd 	.word	0x080056bd
 80056b4:	08005731 	.word	0x08005731
 80056b8:	08005745 	.word	0x08005745
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	18d1      	adds	r1, r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056dc:	f7ff ff5c 	bl	8005598 <prvInsertTimerInActiveList>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d069      	beq.n	80057ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d05e      	beq.n	80057ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	441a      	add	r2, r3
 8005704:	2300      	movs	r3, #0
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	2300      	movs	r3, #0
 800570a:	2100      	movs	r1, #0
 800570c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800570e:	f7ff fe05 	bl	800531c <xTimerGenericCommand>
 8005712:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d14f      	bne.n	80057ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	61bb      	str	r3, [r7, #24]
}
 800572c:	bf00      	nop
 800572e:	e7fe      	b.n	800572e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	b2da      	uxtb	r2, r3
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005742:	e03a      	b.n	80057ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	b2da      	uxtb	r2, r3
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	617b      	str	r3, [r7, #20]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	18d1      	adds	r1, r2, r3
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005788:	f7ff ff06 	bl	8005598 <prvInsertTimerInActiveList>
					break;
 800578c:	e015      	b.n	80057ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800579c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800579e:	f000 fbdf 	bl	8005f60 <vPortFree>
 80057a2:	e00a      	b.n	80057ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057b6:	e000      	b.n	80057ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80057b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057ba:	4b08      	ldr	r3, [pc, #32]	; (80057dc <prvProcessReceivedCommands+0x1c0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	1d39      	adds	r1, r7, #4
 80057c0:	2200      	movs	r2, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fc16 	bl	8003ff4 <xQueueReceive>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f47f af2a 	bne.w	8005624 <prvProcessReceivedCommands+0x8>
	}
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	3730      	adds	r7, #48	; 0x30
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000ca4 	.word	0x20000ca4

080057e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057e6:	e048      	b.n	800587a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057e8:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <prvSwitchTimerLists+0xc0>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f2:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <prvSwitchTimerLists+0xc0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3304      	adds	r3, #4
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe f92f 	bl	8003a64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d02e      	beq.n	800587a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	429a      	cmp	r2, r3
 800582c:	d90e      	bls.n	800584c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800583a:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <prvSwitchTimerLists+0xc0>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3304      	adds	r3, #4
 8005842:	4619      	mov	r1, r3
 8005844:	4610      	mov	r0, r2
 8005846:	f7fe f8d4 	bl	80039f2 <vListInsert>
 800584a:	e016      	b.n	800587a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800584c:	2300      	movs	r3, #0
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	2300      	movs	r3, #0
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	2100      	movs	r1, #0
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff fd60 	bl	800531c <xTimerGenericCommand>
 800585c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	603b      	str	r3, [r7, #0]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <prvSwitchTimerLists+0xc0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1b1      	bne.n	80057e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <prvSwitchTimerLists+0xc0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800588a:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <prvSwitchTimerLists+0xc4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a04      	ldr	r2, [pc, #16]	; (80058a0 <prvSwitchTimerLists+0xc0>)
 8005890:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005892:	4a04      	ldr	r2, [pc, #16]	; (80058a4 <prvSwitchTimerLists+0xc4>)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	6013      	str	r3, [r2, #0]
}
 8005898:	bf00      	nop
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20000c9c 	.word	0x20000c9c
 80058a4:	20000ca0 	.word	0x20000ca0

080058a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058ae:	f000 f969 	bl	8005b84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058b2:	4b15      	ldr	r3, [pc, #84]	; (8005908 <prvCheckForValidListAndQueue+0x60>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d120      	bne.n	80058fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058ba:	4814      	ldr	r0, [pc, #80]	; (800590c <prvCheckForValidListAndQueue+0x64>)
 80058bc:	f7fe f848 	bl	8003950 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058c0:	4813      	ldr	r0, [pc, #76]	; (8005910 <prvCheckForValidListAndQueue+0x68>)
 80058c2:	f7fe f845 	bl	8003950 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058c6:	4b13      	ldr	r3, [pc, #76]	; (8005914 <prvCheckForValidListAndQueue+0x6c>)
 80058c8:	4a10      	ldr	r2, [pc, #64]	; (800590c <prvCheckForValidListAndQueue+0x64>)
 80058ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058cc:	4b12      	ldr	r3, [pc, #72]	; (8005918 <prvCheckForValidListAndQueue+0x70>)
 80058ce:	4a10      	ldr	r2, [pc, #64]	; (8005910 <prvCheckForValidListAndQueue+0x68>)
 80058d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058d2:	2300      	movs	r3, #0
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <prvCheckForValidListAndQueue+0x74>)
 80058d8:	4a11      	ldr	r2, [pc, #68]	; (8005920 <prvCheckForValidListAndQueue+0x78>)
 80058da:	2110      	movs	r1, #16
 80058dc:	200a      	movs	r0, #10
 80058de:	f7fe f953 	bl	8003b88 <xQueueGenericCreateStatic>
 80058e2:	4603      	mov	r3, r0
 80058e4:	4a08      	ldr	r2, [pc, #32]	; (8005908 <prvCheckForValidListAndQueue+0x60>)
 80058e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80058e8:	4b07      	ldr	r3, [pc, #28]	; (8005908 <prvCheckForValidListAndQueue+0x60>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80058f0:	4b05      	ldr	r3, [pc, #20]	; (8005908 <prvCheckForValidListAndQueue+0x60>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	490b      	ldr	r1, [pc, #44]	; (8005924 <prvCheckForValidListAndQueue+0x7c>)
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fe fd6c 	bl	80043d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058fc:	f000 f972 	bl	8005be4 <vPortExitCritical>
}
 8005900:	bf00      	nop
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000ca4 	.word	0x20000ca4
 800590c:	20000c74 	.word	0x20000c74
 8005910:	20000c88 	.word	0x20000c88
 8005914:	20000c9c 	.word	0x20000c9c
 8005918:	20000ca0 	.word	0x20000ca0
 800591c:	20000d50 	.word	0x20000d50
 8005920:	20000cb0 	.word	0x20000cb0
 8005924:	0800624c 	.word	0x0800624c

08005928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3b04      	subs	r3, #4
 8005938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3b04      	subs	r3, #4
 8005946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f023 0201 	bic.w	r2, r3, #1
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3b04      	subs	r3, #4
 8005956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005958:	4a0c      	ldr	r2, [pc, #48]	; (800598c <pxPortInitialiseStack+0x64>)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3b14      	subs	r3, #20
 8005962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3b04      	subs	r3, #4
 800596e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f06f 0202 	mvn.w	r2, #2
 8005976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3b20      	subs	r3, #32
 800597c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800597e:	68fb      	ldr	r3, [r7, #12]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	08005991 	.word	0x08005991

08005990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800599a:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <prvTaskExitError+0x54>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a2:	d00a      	beq.n	80059ba <prvTaskExitError+0x2a>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	60fb      	str	r3, [r7, #12]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <prvTaskExitError+0x28>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	60bb      	str	r3, [r7, #8]
}
 80059cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059ce:	bf00      	nop
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0fc      	beq.n	80059d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059d6:	bf00      	nop
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	2000000c 	.word	0x2000000c
	...

080059f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <pxCurrentTCBConst2>)
 80059f2:	6819      	ldr	r1, [r3, #0]
 80059f4:	6808      	ldr	r0, [r1, #0]
 80059f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fa:	f380 8809 	msr	PSP, r0
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f04f 0000 	mov.w	r0, #0
 8005a06:	f380 8811 	msr	BASEPRI, r0
 8005a0a:	4770      	bx	lr
 8005a0c:	f3af 8000 	nop.w

08005a10 <pxCurrentTCBConst2>:
 8005a10:	20000774 	.word	0x20000774
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop

08005a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a18:	4808      	ldr	r0, [pc, #32]	; (8005a3c <prvPortStartFirstTask+0x24>)
 8005a1a:	6800      	ldr	r0, [r0, #0]
 8005a1c:	6800      	ldr	r0, [r0, #0]
 8005a1e:	f380 8808 	msr	MSP, r0
 8005a22:	f04f 0000 	mov.w	r0, #0
 8005a26:	f380 8814 	msr	CONTROL, r0
 8005a2a:	b662      	cpsie	i
 8005a2c:	b661      	cpsie	f
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	df00      	svc	0
 8005a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a3a:	bf00      	nop
 8005a3c:	e000ed08 	.word	0xe000ed08

08005a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a46:	4b46      	ldr	r3, [pc, #280]	; (8005b60 <xPortStartScheduler+0x120>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a46      	ldr	r2, [pc, #280]	; (8005b64 <xPortStartScheduler+0x124>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10a      	bne.n	8005a66 <xPortStartScheduler+0x26>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	613b      	str	r3, [r7, #16]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a66:	4b3e      	ldr	r3, [pc, #248]	; (8005b60 <xPortStartScheduler+0x120>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a3f      	ldr	r2, [pc, #252]	; (8005b68 <xPortStartScheduler+0x128>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d10a      	bne.n	8005a86 <xPortStartScheduler+0x46>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	60fb      	str	r3, [r7, #12]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a86:	4b39      	ldr	r3, [pc, #228]	; (8005b6c <xPortStartScheduler+0x12c>)
 8005a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	4b31      	ldr	r3, [pc, #196]	; (8005b70 <xPortStartScheduler+0x130>)
 8005aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005aae:	4b31      	ldr	r3, [pc, #196]	; (8005b74 <xPortStartScheduler+0x134>)
 8005ab0:	2207      	movs	r2, #7
 8005ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ab4:	e009      	b.n	8005aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <xPortStartScheduler+0x134>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	4a2d      	ldr	r2, [pc, #180]	; (8005b74 <xPortStartScheduler+0x134>)
 8005abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad2:	2b80      	cmp	r3, #128	; 0x80
 8005ad4:	d0ef      	beq.n	8005ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ad6:	4b27      	ldr	r3, [pc, #156]	; (8005b74 <xPortStartScheduler+0x134>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f1c3 0307 	rsb	r3, r3, #7
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d00a      	beq.n	8005af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	60bb      	str	r3, [r7, #8]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005af8:	4b1e      	ldr	r3, [pc, #120]	; (8005b74 <xPortStartScheduler+0x134>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	4a1d      	ldr	r2, [pc, #116]	; (8005b74 <xPortStartScheduler+0x134>)
 8005b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b02:	4b1c      	ldr	r3, [pc, #112]	; (8005b74 <xPortStartScheduler+0x134>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b0a:	4a1a      	ldr	r2, [pc, #104]	; (8005b74 <xPortStartScheduler+0x134>)
 8005b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b16:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <xPortStartScheduler+0x138>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <xPortStartScheduler+0x138>)
 8005b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b22:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <xPortStartScheduler+0x138>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <xPortStartScheduler+0x138>)
 8005b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b2e:	f000 f8dd 	bl	8005cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b32:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <xPortStartScheduler+0x13c>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b38:	f000 f8fc 	bl	8005d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b3c:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <xPortStartScheduler+0x140>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a0f      	ldr	r2, [pc, #60]	; (8005b80 <xPortStartScheduler+0x140>)
 8005b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b48:	f7ff ff66 	bl	8005a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b4c:	f7ff f852 	bl	8004bf4 <vTaskSwitchContext>
	prvTaskExitError();
 8005b50:	f7ff ff1e 	bl	8005990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	e000ed00 	.word	0xe000ed00
 8005b64:	410fc271 	.word	0x410fc271
 8005b68:	410fc270 	.word	0x410fc270
 8005b6c:	e000e400 	.word	0xe000e400
 8005b70:	20000da0 	.word	0x20000da0
 8005b74:	20000da4 	.word	0x20000da4
 8005b78:	e000ed20 	.word	0xe000ed20
 8005b7c:	2000000c 	.word	0x2000000c
 8005b80:	e000ef34 	.word	0xe000ef34

08005b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	607b      	str	r3, [r7, #4]
}
 8005b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <vPortEnterCritical+0x58>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	4a0d      	ldr	r2, [pc, #52]	; (8005bdc <vPortEnterCritical+0x58>)
 8005ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <vPortEnterCritical+0x58>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d10f      	bne.n	8005bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <vPortEnterCritical+0x5c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	603b      	str	r3, [r7, #0]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <vPortEnterCritical+0x4a>
	}
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	2000000c 	.word	0x2000000c
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bea:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <vPortExitCritical+0x50>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <vPortExitCritical+0x24>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	607b      	str	r3, [r7, #4]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c08:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <vPortExitCritical+0x50>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <vPortExitCritical+0x50>)
 8005c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c12:	4b08      	ldr	r3, [pc, #32]	; (8005c34 <vPortExitCritical+0x50>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d105      	bne.n	8005c26 <vPortExitCritical+0x42>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	f383 8811 	msr	BASEPRI, r3
}
 8005c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	2000000c 	.word	0x2000000c
	...

08005c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c40:	f3ef 8009 	mrs	r0, PSP
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	4b15      	ldr	r3, [pc, #84]	; (8005ca0 <pxCurrentTCBConst>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	f01e 0f10 	tst.w	lr, #16
 8005c50:	bf08      	it	eq
 8005c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5a:	6010      	str	r0, [r2, #0]
 8005c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c64:	f380 8811 	msr	BASEPRI, r0
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f7fe ffc0 	bl	8004bf4 <vTaskSwitchContext>
 8005c74:	f04f 0000 	mov.w	r0, #0
 8005c78:	f380 8811 	msr	BASEPRI, r0
 8005c7c:	bc09      	pop	{r0, r3}
 8005c7e:	6819      	ldr	r1, [r3, #0]
 8005c80:	6808      	ldr	r0, [r1, #0]
 8005c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c86:	f01e 0f10 	tst.w	lr, #16
 8005c8a:	bf08      	it	eq
 8005c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c90:	f380 8809 	msr	PSP, r0
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	f3af 8000 	nop.w

08005ca0 <pxCurrentTCBConst>:
 8005ca0:	20000774 	.word	0x20000774
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop

08005ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	607b      	str	r3, [r7, #4]
}
 8005cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cc2:	f7fe fedd 	bl	8004a80 <xTaskIncrementTick>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ccc:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <xPortSysTickHandler+0x40>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	f383 8811 	msr	BASEPRI, r3
}
 8005cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	e000ed04 	.word	0xe000ed04

08005cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <vPortSetupTimerInterrupt+0x34>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cf6:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <vPortSetupTimerInterrupt+0x38>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <vPortSetupTimerInterrupt+0x3c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <vPortSetupTimerInterrupt+0x40>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	099b      	lsrs	r3, r3, #6
 8005d08:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <vPortSetupTimerInterrupt+0x44>)
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d0e:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <vPortSetupTimerInterrupt+0x34>)
 8005d10:	2207      	movs	r2, #7
 8005d12:	601a      	str	r2, [r3, #0]
}
 8005d14:	bf00      	nop
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	e000e010 	.word	0xe000e010
 8005d24:	e000e018 	.word	0xe000e018
 8005d28:	20000000 	.word	0x20000000
 8005d2c:	10624dd3 	.word	0x10624dd3
 8005d30:	e000e014 	.word	0xe000e014

08005d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d44 <vPortEnableVFP+0x10>
 8005d38:	6801      	ldr	r1, [r0, #0]
 8005d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d3e:	6001      	str	r1, [r0, #0]
 8005d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d42:	bf00      	nop
 8005d44:	e000ed88 	.word	0xe000ed88

08005d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d4e:	f3ef 8305 	mrs	r3, IPSR
 8005d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b0f      	cmp	r3, #15
 8005d58:	d914      	bls.n	8005d84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d5a:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <vPortValidateInterruptPriority+0x70>)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d64:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <vPortValidateInterruptPriority+0x74>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	7afa      	ldrb	r2, [r7, #11]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d20a      	bcs.n	8005d84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	607b      	str	r3, [r7, #4]
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d84:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <vPortValidateInterruptPriority+0x78>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d8c:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <vPortValidateInterruptPriority+0x7c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d90a      	bls.n	8005daa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	603b      	str	r3, [r7, #0]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <vPortValidateInterruptPriority+0x60>
	}
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	e000e3f0 	.word	0xe000e3f0
 8005dbc:	20000da0 	.word	0x20000da0
 8005dc0:	e000ed0c 	.word	0xe000ed0c
 8005dc4:	20000da4 	.word	0x20000da4

08005dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005dd4:	f7fe fd98 	bl	8004908 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005dd8:	4b5b      	ldr	r3, [pc, #364]	; (8005f48 <pvPortMalloc+0x180>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005de0:	f000 f920 	bl	8006024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005de4:	4b59      	ldr	r3, [pc, #356]	; (8005f4c <pvPortMalloc+0x184>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4013      	ands	r3, r2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f040 8093 	bne.w	8005f18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01d      	beq.n	8005e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005df8:	2208      	movs	r2, #8
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d014      	beq.n	8005e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f023 0307 	bic.w	r3, r3, #7
 8005e10:	3308      	adds	r3, #8
 8005e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <pvPortMalloc+0x6c>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	617b      	str	r3, [r7, #20]
}
 8005e30:	bf00      	nop
 8005e32:	e7fe      	b.n	8005e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d06e      	beq.n	8005f18 <pvPortMalloc+0x150>
 8005e3a:	4b45      	ldr	r3, [pc, #276]	; (8005f50 <pvPortMalloc+0x188>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d869      	bhi.n	8005f18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e44:	4b43      	ldr	r3, [pc, #268]	; (8005f54 <pvPortMalloc+0x18c>)
 8005e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e48:	4b42      	ldr	r3, [pc, #264]	; (8005f54 <pvPortMalloc+0x18c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e4e:	e004      	b.n	8005e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d903      	bls.n	8005e6c <pvPortMalloc+0xa4>
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f1      	bne.n	8005e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e6c:	4b36      	ldr	r3, [pc, #216]	; (8005f48 <pvPortMalloc+0x180>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d050      	beq.n	8005f18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	4413      	add	r3, r2
 8005e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	2308      	movs	r3, #8
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d91f      	bls.n	8005ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	613b      	str	r3, [r7, #16]
}
 8005ebc:	bf00      	nop
 8005ebe:	e7fe      	b.n	8005ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	1ad2      	subs	r2, r2, r3
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ed2:	69b8      	ldr	r0, [r7, #24]
 8005ed4:	f000 f908 	bl	80060e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <pvPortMalloc+0x188>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	4a1b      	ldr	r2, [pc, #108]	; (8005f50 <pvPortMalloc+0x188>)
 8005ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ee6:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <pvPortMalloc+0x188>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	4b1b      	ldr	r3, [pc, #108]	; (8005f58 <pvPortMalloc+0x190>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d203      	bcs.n	8005efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ef2:	4b17      	ldr	r3, [pc, #92]	; (8005f50 <pvPortMalloc+0x188>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a18      	ldr	r2, [pc, #96]	; (8005f58 <pvPortMalloc+0x190>)
 8005ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <pvPortMalloc+0x184>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <pvPortMalloc+0x194>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a11      	ldr	r2, [pc, #68]	; (8005f5c <pvPortMalloc+0x194>)
 8005f16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f18:	f7fe fd04 	bl	8004924 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <pvPortMalloc+0x174>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	60fb      	str	r3, [r7, #12]
}
 8005f38:	bf00      	nop
 8005f3a:	e7fe      	b.n	8005f3a <pvPortMalloc+0x172>
	return pvReturn;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3728      	adds	r7, #40	; 0x28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20001968 	.word	0x20001968
 8005f4c:	2000197c 	.word	0x2000197c
 8005f50:	2000196c 	.word	0x2000196c
 8005f54:	20001960 	.word	0x20001960
 8005f58:	20001970 	.word	0x20001970
 8005f5c:	20001974 	.word	0x20001974

08005f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d04d      	beq.n	800600e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f72:	2308      	movs	r3, #8
 8005f74:	425b      	negs	r3, r3
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4413      	add	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	4b24      	ldr	r3, [pc, #144]	; (8006018 <vPortFree+0xb8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <vPortFree+0x44>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	60fb      	str	r3, [r7, #12]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <vPortFree+0x62>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60bb      	str	r3, [r7, #8]
}
 8005fbe:	bf00      	nop
 8005fc0:	e7fe      	b.n	8005fc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	4b14      	ldr	r3, [pc, #80]	; (8006018 <vPortFree+0xb8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01e      	beq.n	800600e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d11a      	bne.n	800600e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	4b0e      	ldr	r3, [pc, #56]	; (8006018 <vPortFree+0xb8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	401a      	ands	r2, r3
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fe8:	f7fe fc8e 	bl	8004908 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	; (800601c <vPortFree+0xbc>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	4a09      	ldr	r2, [pc, #36]	; (800601c <vPortFree+0xbc>)
 8005ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ffa:	6938      	ldr	r0, [r7, #16]
 8005ffc:	f000 f874 	bl	80060e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006000:	4b07      	ldr	r3, [pc, #28]	; (8006020 <vPortFree+0xc0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a06      	ldr	r2, [pc, #24]	; (8006020 <vPortFree+0xc0>)
 8006008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800600a:	f7fe fc8b 	bl	8004924 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800600e:	bf00      	nop
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	2000197c 	.word	0x2000197c
 800601c:	2000196c 	.word	0x2000196c
 8006020:	20001978 	.word	0x20001978

08006024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800602a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800602e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006030:	4b27      	ldr	r3, [pc, #156]	; (80060d0 <prvHeapInit+0xac>)
 8006032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00c      	beq.n	8006058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3307      	adds	r3, #7
 8006042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0307 	bic.w	r3, r3, #7
 800604a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	4a1f      	ldr	r2, [pc, #124]	; (80060d0 <prvHeapInit+0xac>)
 8006054:	4413      	add	r3, r2
 8006056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800605c:	4a1d      	ldr	r2, [pc, #116]	; (80060d4 <prvHeapInit+0xb0>)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006062:	4b1c      	ldr	r3, [pc, #112]	; (80060d4 <prvHeapInit+0xb0>)
 8006064:	2200      	movs	r2, #0
 8006066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	4413      	add	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006070:	2208      	movs	r2, #8
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0307 	bic.w	r3, r3, #7
 800607e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4a15      	ldr	r2, [pc, #84]	; (80060d8 <prvHeapInit+0xb4>)
 8006084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006086:	4b14      	ldr	r3, [pc, #80]	; (80060d8 <prvHeapInit+0xb4>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2200      	movs	r2, #0
 800608c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <prvHeapInit+0xb4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	1ad2      	subs	r2, r2, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060a4:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <prvHeapInit+0xb4>)
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <prvHeapInit+0xb8>)
 80060b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <prvHeapInit+0xbc>)
 80060ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060bc:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <prvHeapInit+0xc0>)
 80060be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060c2:	601a      	str	r2, [r3, #0]
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	20000da8 	.word	0x20000da8
 80060d4:	20001960 	.word	0x20001960
 80060d8:	20001968 	.word	0x20001968
 80060dc:	20001970 	.word	0x20001970
 80060e0:	2000196c 	.word	0x2000196c
 80060e4:	2000197c 	.word	0x2000197c

080060e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060f0:	4b28      	ldr	r3, [pc, #160]	; (8006194 <prvInsertBlockIntoFreeList+0xac>)
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e002      	b.n	80060fc <prvInsertBlockIntoFreeList+0x14>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	429a      	cmp	r2, r3
 8006104:	d8f7      	bhi.n	80060f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	4413      	add	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	429a      	cmp	r2, r3
 8006116:	d108      	bne.n	800612a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	441a      	add	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	441a      	add	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	429a      	cmp	r2, r3
 800613c:	d118      	bne.n	8006170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b15      	ldr	r3, [pc, #84]	; (8006198 <prvInsertBlockIntoFreeList+0xb0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d00d      	beq.n	8006166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	441a      	add	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e008      	b.n	8006178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006166:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <prvInsertBlockIntoFreeList+0xb0>)
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	e003      	b.n	8006178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	429a      	cmp	r2, r3
 800617e:	d002      	beq.n	8006186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20001960 	.word	0x20001960
 8006198:	20001968 	.word	0x20001968

0800619c <__libc_init_array>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	4d0d      	ldr	r5, [pc, #52]	; (80061d4 <__libc_init_array+0x38>)
 80061a0:	4c0d      	ldr	r4, [pc, #52]	; (80061d8 <__libc_init_array+0x3c>)
 80061a2:	1b64      	subs	r4, r4, r5
 80061a4:	10a4      	asrs	r4, r4, #2
 80061a6:	2600      	movs	r6, #0
 80061a8:	42a6      	cmp	r6, r4
 80061aa:	d109      	bne.n	80061c0 <__libc_init_array+0x24>
 80061ac:	4d0b      	ldr	r5, [pc, #44]	; (80061dc <__libc_init_array+0x40>)
 80061ae:	4c0c      	ldr	r4, [pc, #48]	; (80061e0 <__libc_init_array+0x44>)
 80061b0:	f000 f82e 	bl	8006210 <_init>
 80061b4:	1b64      	subs	r4, r4, r5
 80061b6:	10a4      	asrs	r4, r4, #2
 80061b8:	2600      	movs	r6, #0
 80061ba:	42a6      	cmp	r6, r4
 80061bc:	d105      	bne.n	80061ca <__libc_init_array+0x2e>
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c4:	4798      	blx	r3
 80061c6:	3601      	adds	r6, #1
 80061c8:	e7ee      	b.n	80061a8 <__libc_init_array+0xc>
 80061ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ce:	4798      	blx	r3
 80061d0:	3601      	adds	r6, #1
 80061d2:	e7f2      	b.n	80061ba <__libc_init_array+0x1e>
 80061d4:	080062c8 	.word	0x080062c8
 80061d8:	080062c8 	.word	0x080062c8
 80061dc:	080062c8 	.word	0x080062c8
 80061e0:	080062d0 	.word	0x080062d0

080061e4 <memcpy>:
 80061e4:	440a      	add	r2, r1
 80061e6:	4291      	cmp	r1, r2
 80061e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80061ec:	d100      	bne.n	80061f0 <memcpy+0xc>
 80061ee:	4770      	bx	lr
 80061f0:	b510      	push	{r4, lr}
 80061f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061fa:	4291      	cmp	r1, r2
 80061fc:	d1f9      	bne.n	80061f2 <memcpy+0xe>
 80061fe:	bd10      	pop	{r4, pc}

08006200 <memset>:
 8006200:	4402      	add	r2, r0
 8006202:	4603      	mov	r3, r0
 8006204:	4293      	cmp	r3, r2
 8006206:	d100      	bne.n	800620a <memset+0xa>
 8006208:	4770      	bx	lr
 800620a:	f803 1b01 	strb.w	r1, [r3], #1
 800620e:	e7f9      	b.n	8006204 <memset+0x4>

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
